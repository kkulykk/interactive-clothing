
project_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a598  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800a730  0800a730  0001a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a958  0800a958  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a960  0800a960  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a960  0800a960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a964  0800a964  0001a964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f68  20000090  0800a9f8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff8  0800a9f8  00020ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f694  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000431f  00000000  00000000  0003f754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00043a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  00045028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a71f  00000000  00000000  00046428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e68d  00000000  00000000  00060b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e40  00000000  00000000  0007f1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115014  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c84  00000000  00000000  00115068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a718 	.word	0x0800a718

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a718 	.word	0x0800a718

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_DMA_Init+0x3c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <MX_DMA_Init+0x3c>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_DMA_Init+0x3c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2039      	movs	r0, #57	; 0x39
 80004f8:	f000 ffb4 	bl	8001464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80004fc:	2039      	movs	r0, #57	; 0x39
 80004fe:	f000 ffdd 	bl	80014bc <HAL_NVIC_EnableIRQ>

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800

08000510 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
 800052a:	4b82      	ldr	r3, [pc, #520]	; (8000734 <MX_GPIO_Init+0x224>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a81      	ldr	r2, [pc, #516]	; (8000734 <MX_GPIO_Init+0x224>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b7f      	ldr	r3, [pc, #508]	; (8000734 <MX_GPIO_Init+0x224>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0310 	and.w	r3, r3, #16
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	4b7b      	ldr	r3, [pc, #492]	; (8000734 <MX_GPIO_Init+0x224>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a7a      	ldr	r2, [pc, #488]	; (8000734 <MX_GPIO_Init+0x224>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b78      	ldr	r3, [pc, #480]	; (8000734 <MX_GPIO_Init+0x224>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	4b74      	ldr	r3, [pc, #464]	; (8000734 <MX_GPIO_Init+0x224>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a73      	ldr	r2, [pc, #460]	; (8000734 <MX_GPIO_Init+0x224>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b71      	ldr	r3, [pc, #452]	; (8000734 <MX_GPIO_Init+0x224>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4b6d      	ldr	r3, [pc, #436]	; (8000734 <MX_GPIO_Init+0x224>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a6c      	ldr	r2, [pc, #432]	; (8000734 <MX_GPIO_Init+0x224>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b6a      	ldr	r3, [pc, #424]	; (8000734 <MX_GPIO_Init+0x224>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b66      	ldr	r3, [pc, #408]	; (8000734 <MX_GPIO_Init+0x224>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a65      	ldr	r2, [pc, #404]	; (8000734 <MX_GPIO_Init+0x224>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b63      	ldr	r3, [pc, #396]	; (8000734 <MX_GPIO_Init+0x224>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b5f      	ldr	r3, [pc, #380]	; (8000734 <MX_GPIO_Init+0x224>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a5e      	ldr	r2, [pc, #376]	; (8000734 <MX_GPIO_Init+0x224>)
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b5c      	ldr	r3, [pc, #368]	; (8000734 <MX_GPIO_Init+0x224>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0308 	and.w	r3, r3, #8
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2108      	movs	r1, #8
 80005d2:	4859      	ldr	r0, [pc, #356]	; (8000738 <MX_GPIO_Init+0x228>)
 80005d4:	f001 ff40 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	4857      	ldr	r0, [pc, #348]	; (800073c <MX_GPIO_Init+0x22c>)
 80005de:	f001 ff3b 	bl	8002458 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005e2:	2200      	movs	r2, #0
 80005e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005e8:	4855      	ldr	r0, [pc, #340]	; (8000740 <MX_GPIO_Init+0x230>)
 80005ea:	f001 ff35 	bl	8002458 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005ee:	2304      	movs	r3, #4
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	484d      	ldr	r0, [pc, #308]	; (8000738 <MX_GPIO_Init+0x228>)
 8000602:	f001 fc8d 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000606:	2308      	movs	r3, #8
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	4846      	ldr	r0, [pc, #280]	; (8000738 <MX_GPIO_Init+0x228>)
 800061e:	f001 fc7f 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000622:	2332      	movs	r3, #50	; 0x32
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000626:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4840      	ldr	r0, [pc, #256]	; (8000738 <MX_GPIO_Init+0x228>)
 8000638:	f001 fc72 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	483a      	ldr	r0, [pc, #232]	; (800073c <MX_GPIO_Init+0x22c>)
 8000654:	f001 fc64 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000658:	2308      	movs	r3, #8
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000668:	2305      	movs	r3, #5
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4832      	ldr	r0, [pc, #200]	; (800073c <MX_GPIO_Init+0x22c>)
 8000674:	f001 fc54 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	482d      	ldr	r0, [pc, #180]	; (8000744 <MX_GPIO_Init+0x234>)
 800068e:	f001 fc47 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000692:	2310      	movs	r3, #16
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006a2:	2306      	movs	r3, #6
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4825      	ldr	r0, [pc, #148]	; (8000744 <MX_GPIO_Init+0x234>)
 80006ae:	f001 fc37 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006c4:	2305      	movs	r3, #5
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <MX_GPIO_Init+0x238>)
 80006d0:	f001 fc26 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006d4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006d8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <MX_GPIO_Init+0x230>)
 80006ee:	f001 fc17 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006f2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000704:	2306      	movs	r3, #6
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0x22c>)
 8000710:	f001 fc06 	bl	8001f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_GPIO_Init+0x230>)
 8000728:	f001 fbfa 	bl	8001f20 <HAL_GPIO_Init>

}
 800072c:	bf00      	nop
 800072e:	3730      	adds	r7, #48	; 0x30
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40021000 	.word	0x40021000
 800073c:	40020800 	.word	0x40020800
 8000740:	40020c00 	.word	0x40020c00
 8000744:	40020000 	.word	0x40020000
 8000748:	40020400 	.word	0x40020400

0800074c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C1_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2C1_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C1_Init+0x50>)
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x58>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2C1_Init+0x50>)
 800076a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C1_Init+0x50>)
 800078a:	f003 fc13 	bl	8003fb4 <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 fa4c 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000c0 	.word	0x200000c0
 80007a0:	40005400 	.word	0x40005400
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a19      	ldr	r2, [pc, #100]	; (800082c <HAL_I2C_MspInit+0x84>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d12c      	bne.n	8000824 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ec:	2312      	movs	r3, #18
 80007ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f8:	2304      	movs	r3, #4
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <HAL_I2C_MspInit+0x8c>)
 8000804:	f001 fb8c 	bl	8001f20 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_I2C_MspInit+0x88>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_I2C_MspInit+0x88>)
 8000812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_I2C_MspInit+0x88>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40005400 	.word	0x40005400
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400

08000838 <HAL_TIM_PWM_PulseFinishedCallback>:

int datasentflag=0;  // to make sure that the dma does not send another data while the first data is still transmitted


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)  // this callback is called when data transmission is finished
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);  // stop dma, when the transmission is finished
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000844:	f005 f8a6 	bl	8005994 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200008c0 	.word	0x200008c0
 800085c:	200000ac 	.word	0x200000ac

08000860 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <Set_LED+0x58>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;  // store green first as ws2821b requires this order (g,r,b)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <Set_LED+0x58>)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	460a      	mov	r2, r1
 8000888:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	b2d9      	uxtb	r1, r3
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <Set_LED+0x58>)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	460a      	mov	r2, r1
 8000898:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2d9      	uxtb	r1, r3
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <Set_LED+0x58>)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	460a      	mov	r2, r1
 80008a8:	70da      	strb	r2, [r3, #3]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000114 	.word	0x20000114

080008bc <Set_Brightness>:

#define PI 3.14159265359

void Set_Brightness (int brightness)  // 0-45
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50]; // store 24 bits for each led + 50 values for reset code

void WS2812_Send (void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
	uint32_t color;  //32 bit variable to store 24 bits of color


	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	e036      	b.n	800094e <WS2812_Send+0x7e>
	{

#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80008e0:	4a2e      	ldr	r2, [pc, #184]	; (800099c <WS2812_Send+0xcc>)
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	041a      	lsls	r2, r3, #16
 80008ec:	492b      	ldr	r1, [pc, #172]	; (800099c <WS2812_Send+0xcc>)
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	431a      	orrs	r2, r3
 80008fa:	4928      	ldr	r1, [pc, #160]	; (800099c <WS2812_Send+0xcc>)
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	78db      	ldrb	r3, [r3, #3]
 8000904:	4313      	orrs	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
#endif
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 8000908:	2317      	movs	r3, #23
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	e019      	b.n	8000942 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800090e:	2201      	movs	r2, #1
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4013      	ands	r3, r2
 800091c:	2b00      	cmp	r3, #0
 800091e:	d005      	beq.n	800092c <WS2812_Send+0x5c>
			{
				pwmData[indx] = 57; // if the bit is 1, the duty cycle is 64%
 8000920:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <WS2812_Send+0xd0>)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2139      	movs	r1, #57	; 0x39
 8000926:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800092a:	e004      	b.n	8000936 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 28;  // if the bit is 0, the duty cycle is 32%
 800092c:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <WS2812_Send+0xd0>)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	211c      	movs	r1, #28
 8000932:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3b01      	subs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dae2      	bge.n	800090e <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3301      	adds	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	2b1d      	cmp	r3, #29
 8000952:	ddc5      	ble.n	80008e0 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	e00a      	b.n	8000970 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <WS2812_Send+0xd0>)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2100      	movs	r1, #0
 8000960:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	3301      	adds	r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b31      	cmp	r3, #49	; 0x31
 8000974:	ddf1      	ble.n	800095a <WS2812_Send+0x8a>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send the data to the dma
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	b29b      	uxth	r3, r3
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <WS2812_Send+0xd0>)
 800097c:	2100      	movs	r1, #0
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <WS2812_Send+0xd4>)
 8000980:	f004 fdce 	bl	8005520 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};  // this flag will be set when the data transmission is finished, dma is stopped and now we can send another data
 8000984:	bf00      	nop
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <WS2812_Send+0xd8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0fb      	beq.n	8000986 <WS2812_Send+0xb6>
	datasentflag = 0;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <WS2812_Send+0xd8>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000114 	.word	0x20000114
 80009a0:	20000204 	.word	0x20000204
 80009a4:	200008c0 	.word	0x200008c0
 80009a8:	200000ac 	.word	0x200000ac

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	; 0x30
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fbd1 	bl	8001158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f8d3 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff fda9 	bl	8000510 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009be:	f7ff fec5 	bl	800074c <MX_I2C1_Init>
  MX_SPI1_Init();
 80009c2:	f000 f945 	bl	8000c50 <MX_SPI1_Init>
  MX_DMA_Init();
 80009c6:	f7ff fd83 	bl	80004d0 <MX_DMA_Init>
  MX_USB_HOST_Init();
 80009ca:	f009 fa93 	bl	8009ef4 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80009ce:	f000 fa6b 	bl	8000ea8 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int pos = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
  while (1)
  {

	  // right turn signal
	  for (int j = 0; j < 3; j++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009da:	e02a      	b.n	8000a32 <main+0x86>
		  for (int i = 0; i < 30; i++) {
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
 80009e0:	e010      	b.n	8000a04 <main+0x58>
			  Set_LED(i, 255, 40, 0);
 80009e2:	2300      	movs	r3, #0
 80009e4:	2228      	movs	r2, #40	; 0x28
 80009e6:	21ff      	movs	r1, #255	; 0xff
 80009e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80009ea:	f7ff ff39 	bl	8000860 <Set_LED>
			  Set_Brightness(45);
 80009ee:	202d      	movs	r0, #45	; 0x2d
 80009f0:	f7ff ff64 	bl	80008bc <Set_Brightness>
			  WS2812_Send();
 80009f4:	f7ff ff6c 	bl	80008d0 <WS2812_Send>
			  HAL_Delay(20);
 80009f8:	2014      	movs	r0, #20
 80009fa:	f000 fc1f 	bl	800123c <HAL_Delay>
		  for (int i = 0; i < 30; i++) {
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	3301      	adds	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	2b1d      	cmp	r3, #29
 8000a08:	ddeb      	ble.n	80009e2 <main+0x36>
		  }

		  for (int i = 0; i < 30; i++) {
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0e:	e008      	b.n	8000a22 <main+0x76>
			  Set_LED(i, 0, 0, 0);
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a18:	f7ff ff22 	bl	8000860 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	3301      	adds	r3, #1
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	2b1d      	cmp	r3, #29
 8000a26:	ddf3      	ble.n	8000a10 <main+0x64>
		  }

		  WS2812_Send();
 8000a28:	f7ff ff52 	bl	80008d0 <WS2812_Send>
	  for (int j = 0; j < 3; j++) {
 8000a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2e:	3301      	adds	r3, #1
 8000a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	ddd1      	ble.n	80009dc <main+0x30>
	  }


	  // pause
	  for (int i = 0; i < 30; i++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
 8000a3c:	e008      	b.n	8000a50 <main+0xa4>
		  Set_LED(i, 0, 0, 0);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	6a38      	ldr	r0, [r7, #32]
 8000a46:	f7ff ff0b 	bl	8000860 <Set_LED>
	  for (int i = 0; i < 30; i++) {
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2b1d      	cmp	r3, #29
 8000a54:	ddf3      	ble.n	8000a3e <main+0x92>
	  }

	  WS2812_Send();
 8000a56:	f7ff ff3b 	bl	80008d0 <WS2812_Send>
	  HAL_Delay(500);
 8000a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a5e:	f000 fbed 	bl	800123c <HAL_Delay>


	  // attention blinking
	  for (int j = 0; j < 5; j++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
 8000a66:	e02f      	b.n	8000ac8 <main+0x11c>
		  for (int i = 0; i < 30; i++) {
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	e00b      	b.n	8000a86 <main+0xda>
			  Set_LED(i, 139, 0, 0);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	218b      	movs	r1, #139	; 0x8b
 8000a74:	69b8      	ldr	r0, [r7, #24]
 8000a76:	f7ff fef3 	bl	8000860 <Set_LED>
			  Set_Brightness(45);
 8000a7a:	202d      	movs	r0, #45	; 0x2d
 8000a7c:	f7ff ff1e 	bl	80008bc <Set_Brightness>
		  for (int i = 0; i < 30; i++) {
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	3301      	adds	r3, #1
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2b1d      	cmp	r3, #29
 8000a8a:	ddf0      	ble.n	8000a6e <main+0xc2>
		  }

		  WS2812_Send();
 8000a8c:	f7ff ff20 	bl	80008d0 <WS2812_Send>
		  HAL_Delay(350);
 8000a90:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000a94:	f000 fbd2 	bl	800123c <HAL_Delay>

		  for (int i = 0; i < 30; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e008      	b.n	8000ab0 <main+0x104>
			  Set_LED(i, 0, 0, 0);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	6978      	ldr	r0, [r7, #20]
 8000aa6:	f7ff fedb 	bl	8000860 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3301      	adds	r3, #1
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	2b1d      	cmp	r3, #29
 8000ab4:	ddf3      	ble.n	8000a9e <main+0xf2>
		  }

		  WS2812_Send();
 8000ab6:	f7ff ff0b 	bl	80008d0 <WS2812_Send>
		  HAL_Delay(350);
 8000aba:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000abe:	f000 fbbd 	bl	800123c <HAL_Delay>
	  for (int j = 0; j < 5; j++) {
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	ddcc      	ble.n	8000a68 <main+0xbc>
	  }


	  // pause
	  for (int i = 0; i < 30; i++) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	e008      	b.n	8000ae6 <main+0x13a>
		  Set_LED(i, 0, 0, 0);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	6938      	ldr	r0, [r7, #16]
 8000adc:	f7ff fec0 	bl	8000860 <Set_LED>
	  for (int i = 0; i < 30; i++) {
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	2b1d      	cmp	r3, #29
 8000aea:	ddf3      	ble.n	8000ad4 <main+0x128>
	  }

	  WS2812_Send();
 8000aec:	f7ff fef0 	bl	80008d0 <WS2812_Send>
	  HAL_Delay(500);
 8000af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af4:	f000 fba2 	bl	800123c <HAL_Delay>

	  // left turn signal
	  for (int j = 0; j < 3; j++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e02a      	b.n	8000b54 <main+0x1a8>
		  for (int i = 29; i >= 0; i--) {
 8000afe:	231d      	movs	r3, #29
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	e010      	b.n	8000b26 <main+0x17a>
			  Set_LED(i, 255, 40, 0);
 8000b04:	2300      	movs	r3, #0
 8000b06:	2228      	movs	r2, #40	; 0x28
 8000b08:	21ff      	movs	r1, #255	; 0xff
 8000b0a:	68b8      	ldr	r0, [r7, #8]
 8000b0c:	f7ff fea8 	bl	8000860 <Set_LED>
			  Set_Brightness(45);
 8000b10:	202d      	movs	r0, #45	; 0x2d
 8000b12:	f7ff fed3 	bl	80008bc <Set_Brightness>
			  WS2812_Send();
 8000b16:	f7ff fedb 	bl	80008d0 <WS2812_Send>
			  HAL_Delay(20);
 8000b1a:	2014      	movs	r0, #20
 8000b1c:	f000 fb8e 	bl	800123c <HAL_Delay>
		  for (int i = 29; i >= 0; i--) {
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	daeb      	bge.n	8000b04 <main+0x158>
		  }

		  for (int i = 0; i < 30; i++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	e008      	b.n	8000b44 <main+0x198>
			  Set_LED(i, 0, 0, 0);
 8000b32:	2300      	movs	r3, #0
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff fe91 	bl	8000860 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b1d      	cmp	r3, #29
 8000b48:	ddf3      	ble.n	8000b32 <main+0x186>
		  }

		  WS2812_Send();
 8000b4a:	f7ff fec1 	bl	80008d0 <WS2812_Send>
	  for (int j = 0; j < 3; j++) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	ddd1      	ble.n	8000afe <main+0x152>
	  }


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b5a:	f009 f9f1 	bl	8009f40 <MX_USB_HOST_Process>
	  for (int j = 0; j < 3; j++) {
 8000b5e:	e73a      	b.n	80009d6 <main+0x2a>

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f009 fd02 	bl	800a578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b27      	ldr	r3, [pc, #156]	; (8000c28 <SystemClock_Config+0xc8>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a26      	ldr	r2, [pc, #152]	; (8000c28 <SystemClock_Config+0xc8>)
 8000b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <SystemClock_Config+0xc8>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <SystemClock_Config+0xcc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <SystemClock_Config+0xcc>)
 8000baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <SystemClock_Config+0xcc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000bd4:	2348      	movs	r3, #72	; 0x48
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	f107 0320 	add.w	r3, r7, #32
 8000be4:	4618      	mov	r0, r3
 8000be6:	f003 fbb1 	bl	800434c <HAL_RCC_OscConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf0:	f000 f81e 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fec3 	bl	800499c <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c1c:	f000 f808 	bl	8000c30 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3750      	adds	r7, #80	; 0x50
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>

08000c3a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000ca2:	f004 f90b 	bl	8004ebc <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f7ff ffc0 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000808 	.word	0x20000808
 8000cb8:	40013000 	.word	0x40013000

08000cbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_SPI_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d16:	23e0      	movs	r3, #224	; 0xe0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_SPI_MspInit+0x8c>)
 8000d32:	f001 f8f5 	bl	8001f20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f000 fb4a 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 fa08 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <DMA2_Stream1_IRQHandler+0x10>)
 8000df6:	f000 fe29 	bl	8001a4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000860 	.word	0x20000860

08000e04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <OTG_FS_IRQHandler+0x10>)
 8000e0a:	f001 fdcd 	bl	80029a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000ce4 	.word	0x20000ce4

08000e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <_sbrk+0x5c>)
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <_sbrk+0x60>)
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d102      	bne.n	8000e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <_sbrk+0x64>)
 8000e36:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <_sbrk+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d207      	bcs.n	8000e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e48:	f009 fb5c 	bl	800a504 <__errno>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	220c      	movs	r2, #12
 8000e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e56:	e009      	b.n	8000e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <_sbrk+0x64>)
 8000e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20020000 	.word	0x20020000
 8000e78:	00000400 	.word	0x00000400
 8000e7c:	200000b0 	.word	0x200000b0
 8000e80:	20000ff8 	.word	0x20000ff8

08000e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <SystemInit+0x20>)
 8000e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <SystemInit+0x20>)
 8000e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b096      	sub	sp, #88	; 0x58
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2220      	movs	r2, #32
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f009 fb49 	bl	800a578 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee6:	4b3e      	ldr	r3, [pc, #248]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000ee8:	4a3e      	ldr	r2, [pc, #248]	; (8000fe4 <MX_TIM1_Init+0x13c>)
 8000eea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eec:	4b3c      	ldr	r3, [pc, #240]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000efa:	2259      	movs	r2, #89	; 0x59
 8000efc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0a:	4b35      	ldr	r3, [pc, #212]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f10:	4833      	ldr	r0, [pc, #204]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f12:	f004 f96f 	bl	80051f4 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f1c:	f7ff fe88 	bl	8000c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482c      	ldr	r0, [pc, #176]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f2e:	f005 f81f 	bl	8005f70 <HAL_TIM_ConfigClockSource>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f38:	f7ff fe7a 	bl	8000c30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f3c:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f3e:	f004 fa1f 	bl	8005380 <HAL_TIM_PWM_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f48:	f7ff fe72 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f5c:	f005 ff9a 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000f66:	f7ff fe63 	bl	8000c30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6a:	2360      	movs	r3, #96	; 0x60
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f76:	2300      	movs	r3, #0
 8000f78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4814      	ldr	r0, [pc, #80]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000f90:	f004 fe48 	bl	8005c24 <HAL_TIM_PWM_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000f9a:	f7ff fe49 	bl	8000c30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000fc2:	f006 f825 	bl	8007010 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000fcc:	f7ff fe30 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fd0:	4803      	ldr	r0, [pc, #12]	; (8000fe0 <MX_TIM1_Init+0x138>)
 8000fd2:	f000 f85d 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000fd6:	bf00      	nop
 8000fd8:	3758      	adds	r7, #88	; 0x58
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200008c0 	.word	0x200008c0
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_TIM_Base_MspInit+0x98>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d13d      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <HAL_TIM_Base_MspInit+0x9c>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a20      	ldr	r2, [pc, #128]	; (8001084 <HAL_TIM_Base_MspInit+0x9c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <HAL_TIM_Base_MspInit+0x9c>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001016:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 8001018:	4a1c      	ldr	r2, [pc, #112]	; (800108c <HAL_TIM_Base_MspInit+0xa4>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 800101e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001022:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 8001032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001036:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 800103a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800103e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 8001042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001046:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 800105c:	f000 fa52 	bl	8001504 <HAL_DMA_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001066:	f7ff fde3 	bl	8000c30 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <HAL_TIM_Base_MspInit+0xa0>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40010000 	.word	0x40010000
 8001084:	40023800 	.word	0x40023800
 8001088:	20000860 	.word	0x20000860
 800108c:	40026428 	.word	0x40026428

08001090 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <HAL_TIM_MspPostInit+0x68>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d11e      	bne.n	80010f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_TIM_MspPostInit+0x6c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_TIM_MspPostInit+0x6c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_TIM_MspPostInit+0x6c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_TIM_MspPostInit+0x70>)
 80010ec:	f000 ff18 	bl	8001f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40010000 	.word	0x40010000
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001120:	4c0b      	ldr	r4, [pc, #44]	; (8001150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800112e:	f7ff fea9 	bl	8000e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f009 f9ed 	bl	800a510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fc39 	bl	80009ac <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800113c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001148:	0800a968 	.word	0x0800a968
  ldr r2, =_sbss
 800114c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001150:	20000ff8 	.word	0x20000ff8

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>
	...

08001158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_Init+0x40>)
 8001162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_Init+0x40>)
 800116e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a07      	ldr	r2, [pc, #28]	; (8001198 <HAL_Init+0x40>)
 800117a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f94f 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f808 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118c:	f7ff fdde 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f996 	bl	80014ec <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d8:	f000 f944 	bl	8001464 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008
 8001220:	20000908 	.word	0x20000908

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000908 	.word	0x20000908

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	; (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b07      	cmp	r3, #7
 8001430:	d00f      	beq.n	8001452 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b06      	cmp	r3, #6
 8001436:	d00c      	beq.n	8001452 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d009      	beq.n	8001452 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d006      	beq.n	8001452 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d003      	beq.n	8001452 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800144a:	2192      	movs	r1, #146	; 0x92
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800144e:	f7ff fbf4 	bl	8000c3a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff16 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800a730 	.word	0x0800a730

08001464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d903      	bls.n	8001484 <HAL_NVIC_SetPriority+0x20>
 800147c:	21aa      	movs	r1, #170	; 0xaa
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <HAL_NVIC_SetPriority+0x54>)
 8001480:	f7ff fbdb 	bl	8000c3a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b0f      	cmp	r3, #15
 8001488:	d903      	bls.n	8001492 <HAL_NVIC_SetPriority+0x2e>
 800148a:	21ab      	movs	r1, #171	; 0xab
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <HAL_NVIC_SetPriority+0x54>)
 800148e:	f7ff fbd4 	bl	8000c3a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001492:	f7ff ff1b 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001496:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	6978      	ldr	r0, [r7, #20]
 800149e:	f7ff ff6b 	bl	8001378 <NVIC_EncodePriority>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff3a 	bl	8001324 <__NVIC_SetPriority>
}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800a730 	.word	0x0800a730

080014bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da03      	bge.n	80014d6 <HAL_NVIC_EnableIRQ+0x1a>
 80014ce:	21be      	movs	r1, #190	; 0xbe
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_NVIC_EnableIRQ+0x2c>)
 80014d2:	f7ff fbb2 	bl	8000c3a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff04 	bl	80012e8 <__NVIC_EnableIRQ>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800a730 	.word	0x0800a730

080014ec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff73 	bl	80013e0 <SysTick_Config>
 80014fa:	4603      	mov	r3, r0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fe88 	bl	8001224 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e204      	b.n	800192a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a97      	ldr	r2, [pc, #604]	; (8001784 <HAL_DMA_Init+0x280>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d04e      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a96      	ldr	r2, [pc, #600]	; (8001788 <HAL_DMA_Init+0x284>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d049      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a94      	ldr	r2, [pc, #592]	; (800178c <HAL_DMA_Init+0x288>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d044      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a93      	ldr	r2, [pc, #588]	; (8001790 <HAL_DMA_Init+0x28c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d03f      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a91      	ldr	r2, [pc, #580]	; (8001794 <HAL_DMA_Init+0x290>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d03a      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a90      	ldr	r2, [pc, #576]	; (8001798 <HAL_DMA_Init+0x294>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d035      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a8e      	ldr	r2, [pc, #568]	; (800179c <HAL_DMA_Init+0x298>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d030      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a8d      	ldr	r2, [pc, #564]	; (80017a0 <HAL_DMA_Init+0x29c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d02b      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a8b      	ldr	r2, [pc, #556]	; (80017a4 <HAL_DMA_Init+0x2a0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d026      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a8a      	ldr	r2, [pc, #552]	; (80017a8 <HAL_DMA_Init+0x2a4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d021      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a88      	ldr	r2, [pc, #544]	; (80017ac <HAL_DMA_Init+0x2a8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01c      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a87      	ldr	r2, [pc, #540]	; (80017b0 <HAL_DMA_Init+0x2ac>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d017      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a85      	ldr	r2, [pc, #532]	; (80017b4 <HAL_DMA_Init+0x2b0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d012      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a84      	ldr	r2, [pc, #528]	; (80017b8 <HAL_DMA_Init+0x2b4>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00d      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a82      	ldr	r2, [pc, #520]	; (80017bc <HAL_DMA_Init+0x2b8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d008      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a81      	ldr	r2, [pc, #516]	; (80017c0 <HAL_DMA_Init+0x2bc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d003      	beq.n	80015c8 <HAL_DMA_Init+0xc4>
 80015c0:	21b8      	movs	r1, #184	; 0xb8
 80015c2:	4880      	ldr	r0, [pc, #512]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 80015c4:	f7ff fb39 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d026      	beq.n	800161e <HAL_DMA_Init+0x11a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015d8:	d021      	beq.n	800161e <HAL_DMA_Init+0x11a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015e2:	d01c      	beq.n	800161e <HAL_DMA_Init+0x11a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80015ec:	d017      	beq.n	800161e <HAL_DMA_Init+0x11a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015f6:	d012      	beq.n	800161e <HAL_DMA_Init+0x11a>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001600:	d00d      	beq.n	800161e <HAL_DMA_Init+0x11a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800160a:	d008      	beq.n	800161e <HAL_DMA_Init+0x11a>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001614:	d003      	beq.n	800161e <HAL_DMA_Init+0x11a>
 8001616:	21b9      	movs	r1, #185	; 0xb9
 8001618:	486a      	ldr	r0, [pc, #424]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 800161a:	f7ff fb0e 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_DMA_Init+0x13a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b40      	cmp	r3, #64	; 0x40
 800162c:	d007      	beq.n	800163e <HAL_DMA_Init+0x13a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b80      	cmp	r3, #128	; 0x80
 8001634:	d003      	beq.n	800163e <HAL_DMA_Init+0x13a>
 8001636:	21ba      	movs	r1, #186	; 0xba
 8001638:	4862      	ldr	r0, [pc, #392]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 800163a:	f7ff fafe 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001646:	d007      	beq.n	8001658 <HAL_DMA_Init+0x154>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_DMA_Init+0x154>
 8001650:	21bb      	movs	r1, #187	; 0xbb
 8001652:	485c      	ldr	r0, [pc, #368]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 8001654:	f7ff faf1 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001660:	d007      	beq.n	8001672 <HAL_DMA_Init+0x16e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_DMA_Init+0x16e>
 800166a:	21bc      	movs	r1, #188	; 0xbc
 800166c:	4855      	ldr	r0, [pc, #340]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 800166e:	f7ff fae4 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00d      	beq.n	8001696 <HAL_DMA_Init+0x192>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001682:	d008      	beq.n	8001696 <HAL_DMA_Init+0x192>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800168c:	d003      	beq.n	8001696 <HAL_DMA_Init+0x192>
 800168e:	21bd      	movs	r1, #189	; 0xbd
 8001690:	484c      	ldr	r0, [pc, #304]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 8001692:	f7ff fad2 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00d      	beq.n	80016ba <HAL_DMA_Init+0x1b6>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016a6:	d008      	beq.n	80016ba <HAL_DMA_Init+0x1b6>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b0:	d003      	beq.n	80016ba <HAL_DMA_Init+0x1b6>
 80016b2:	21be      	movs	r1, #190	; 0xbe
 80016b4:	4843      	ldr	r0, [pc, #268]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 80016b6:	f7ff fac0 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00c      	beq.n	80016dc <HAL_DMA_Init+0x1d8>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ca:	d007      	beq.n	80016dc <HAL_DMA_Init+0x1d8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b20      	cmp	r3, #32
 80016d2:	d003      	beq.n	80016dc <HAL_DMA_Init+0x1d8>
 80016d4:	21bf      	movs	r1, #191	; 0xbf
 80016d6:	483b      	ldr	r0, [pc, #236]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 80016d8:	f7ff faaf 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d012      	beq.n	800170a <HAL_DMA_Init+0x206>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ec:	d00d      	beq.n	800170a <HAL_DMA_Init+0x206>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Init+0x206>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001700:	d003      	beq.n	800170a <HAL_DMA_Init+0x206>
 8001702:	21c0      	movs	r1, #192	; 0xc0
 8001704:	482f      	ldr	r0, [pc, #188]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 8001706:	f7ff fa98 	bl	8000c3a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_DMA_Init+0x21e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	2b04      	cmp	r3, #4
 8001718:	d003      	beq.n	8001722 <HAL_DMA_Init+0x21e>
 800171a:	21c1      	movs	r1, #193	; 0xc1
 800171c:	4829      	ldr	r0, [pc, #164]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 800171e:	f7ff fa8c 	bl	8000c3a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d065      	beq.n	80017f6 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00f      	beq.n	8001752 <HAL_DMA_Init+0x24e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	2b01      	cmp	r3, #1
 8001738:	d00b      	beq.n	8001752 <HAL_DMA_Init+0x24e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	2b02      	cmp	r3, #2
 8001740:	d007      	beq.n	8001752 <HAL_DMA_Init+0x24e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	2b03      	cmp	r3, #3
 8001748:	d003      	beq.n	8001752 <HAL_DMA_Init+0x24e>
 800174a:	21c6      	movs	r1, #198	; 0xc6
 800174c:	481d      	ldr	r0, [pc, #116]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 800174e:	f7ff fa74 	bl	8000c3a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	2b00      	cmp	r3, #0
 8001758:	d036      	beq.n	80017c8 <HAL_DMA_Init+0x2c4>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001762:	d031      	beq.n	80017c8 <HAL_DMA_Init+0x2c4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800176c:	d02c      	beq.n	80017c8 <HAL_DMA_Init+0x2c4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001776:	d027      	beq.n	80017c8 <HAL_DMA_Init+0x2c4>
 8001778:	21c7      	movs	r1, #199	; 0xc7
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <HAL_DMA_Init+0x2c0>)
 800177c:	f7ff fa5d 	bl	8000c3a <assert_failed>
 8001780:	e022      	b.n	80017c8 <HAL_DMA_Init+0x2c4>
 8001782:	bf00      	nop
 8001784:	40026010 	.word	0x40026010
 8001788:	40026028 	.word	0x40026028
 800178c:	40026040 	.word	0x40026040
 8001790:	40026058 	.word	0x40026058
 8001794:	40026070 	.word	0x40026070
 8001798:	40026088 	.word	0x40026088
 800179c:	400260a0 	.word	0x400260a0
 80017a0:	400260b8 	.word	0x400260b8
 80017a4:	40026410 	.word	0x40026410
 80017a8:	40026428 	.word	0x40026428
 80017ac:	40026440 	.word	0x40026440
 80017b0:	40026458 	.word	0x40026458
 80017b4:	40026470 	.word	0x40026470
 80017b8:	40026488 	.word	0x40026488
 80017bc:	400264a0 	.word	0x400264a0
 80017c0:	400264b8 	.word	0x400264b8
 80017c4:	0800a76c 	.word	0x0800a76c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d012      	beq.n	80017f6 <HAL_DMA_Init+0x2f2>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017d8:	d00d      	beq.n	80017f6 <HAL_DMA_Init+0x2f2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e2:	d008      	beq.n	80017f6 <HAL_DMA_Init+0x2f2>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80017ec:	d003      	beq.n	80017f6 <HAL_DMA_Init+0x2f2>
 80017ee:	21c8      	movs	r1, #200	; 0xc8
 80017f0:	4850      	ldr	r0, [pc, #320]	; (8001934 <HAL_DMA_Init+0x430>)
 80017f2:	f7ff fa22 	bl	8000c3a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001816:	e00f      	b.n	8001838 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001818:	f7ff fd04 	bl	8001224 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b05      	cmp	r3, #5
 8001824:	d908      	bls.n	8001838 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2220      	movs	r2, #32
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2203      	movs	r2, #3
 8001830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e078      	b.n	800192a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1e8      	bne.n	8001818 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_DMA_Init+0x434>)
 8001852:	4013      	ands	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4313      	orrs	r3, r2
 8001888:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	2b04      	cmp	r3, #4
 8001890:	d107      	bne.n	80018a2 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4313      	orrs	r3, r2
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f023 0307 	bic.w	r3, r3, #7
 80018b8:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d117      	bne.n	80018fc <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00e      	beq.n	80018fc <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 faa2 	bl	8001e28 <DMA_CheckFifoParam>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d008      	beq.n	80018fc <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2240      	movs	r2, #64	; 0x40
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018f8:	2301      	movs	r3, #1
 80018fa:	e016      	b.n	800192a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fa59 	bl	8001dbc <DMA_CalcBaseAndBitshift>
 800190a:	4603      	mov	r3, r0
 800190c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	223f      	movs	r2, #63	; 0x3f
 8001914:	409a      	lsls	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	0800a76c 	.word	0x0800a76c
 8001938:	f010803f 	.word	0xf010803f

0800193c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_DMA_Start_IT+0x26>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d304      	bcc.n	800196c <HAL_DMA_Start_IT+0x30>
 8001962:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001966:	4827      	ldr	r0, [pc, #156]	; (8001a04 <HAL_DMA_Start_IT+0xc8>)
 8001968:	f7ff f967 	bl	8000c3a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_DMA_Start_IT+0x3e>
 8001976:	2302      	movs	r3, #2
 8001978:	e040      	b.n	80019fc <HAL_DMA_Start_IT+0xc0>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d12f      	bne.n	80019ee <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2202      	movs	r2, #2
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f9dc 	bl	8001d60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	223f      	movs	r2, #63	; 0x3f
 80019ae:	409a      	lsls	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0216 	orr.w	r2, r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0208 	orr.w	r2, r2, #8
 80019da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0201 	orr.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e005      	b.n	80019fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019f6:	2302      	movs	r3, #2
 80019f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0800a76c 	.word	0x0800a76c

08001a08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d004      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00c      	b.n	8001a40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2205      	movs	r2, #5
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a58:	4b92      	ldr	r3, [pc, #584]	; (8001ca4 <HAL_DMA_IRQHandler+0x258>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a92      	ldr	r2, [pc, #584]	; (8001ca8 <HAL_DMA_IRQHandler+0x25c>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a76:	2208      	movs	r2, #8
 8001a78:	409a      	lsls	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d01a      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0204 	bic.w	r2, r2, #4
 8001a9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	2208      	movs	r2, #8
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	2201      	movs	r2, #1
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00b      	beq.n	8001aee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	2201      	movs	r2, #1
 8001adc:	409a      	lsls	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f043 0202 	orr.w	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2204      	movs	r2, #4
 8001af4:	409a      	lsls	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d012      	beq.n	8001b24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00b      	beq.n	8001b24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2204      	movs	r2, #4
 8001b12:	409a      	lsls	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f043 0204 	orr.w	r2, r3, #4
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2210      	movs	r2, #16
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d043      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d03c      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	2210      	movs	r2, #16
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d018      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d108      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d024      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
 8001b7a:	e01f      	b.n	8001bbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
 8001b8c:	e016      	b.n	8001bbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0208 	bic.w	r2, r2, #8
 8001baa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 808e 	beq.w	8001cea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8086 	beq.w	8001cea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	2220      	movs	r2, #32
 8001be4:	409a      	lsls	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b05      	cmp	r3, #5
 8001bf4:	d136      	bne.n	8001c64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0216 	bic.w	r2, r2, #22
 8001c04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695a      	ldr	r2, [r3, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <HAL_DMA_IRQHandler+0x1da>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d007      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0208 	bic.w	r2, r2, #8
 8001c34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	223f      	movs	r2, #63	; 0x3f
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d07d      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
        }
        return;
 8001c62:	e078      	b.n	8001d56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01c      	beq.n	8001cac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d108      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d030      	beq.n	8001cea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
 8001c90:	e02b      	b.n	8001cea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d027      	beq.n	8001cea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	4798      	blx	r3
 8001ca2:	e022      	b.n	8001cea <HAL_DMA_IRQHandler+0x29e>
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0210 	bic.w	r2, r2, #16
 8001cc8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d032      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d022      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2205      	movs	r2, #5
 8001d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d307      	bcc.n	8001d32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f2      	bne.n	8001d16 <HAL_DMA_IRQHandler+0x2ca>
 8001d30:	e000      	b.n	8001d34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d32:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
 8001d54:	e000      	b.n	8001d58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d56:	bf00      	nop
    }
  }
}
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop

08001d60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b40      	cmp	r3, #64	; 0x40
 8001d8c:	d108      	bne.n	8001da0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d9e:	e007      	b.n	8001db0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	60da      	str	r2, [r3, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3b10      	subs	r3, #16
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <DMA_CalcBaseAndBitshift+0x64>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dd6:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <DMA_CalcBaseAndBitshift+0x68>)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d909      	bls.n	8001dfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	1d1a      	adds	r2, r3, #4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	659a      	str	r2, [r3, #88]	; 0x58
 8001dfc:	e007      	b.n	8001e0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	aaaaaaab 	.word	0xaaaaaaab
 8001e24:	0800a950 	.word	0x0800a950

08001e28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d11f      	bne.n	8001e82 <DMA_CheckFifoParam+0x5a>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d856      	bhi.n	8001ef6 <DMA_CheckFifoParam+0xce>
 8001e48:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <DMA_CheckFifoParam+0x28>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001e61 	.word	0x08001e61
 8001e54:	08001e73 	.word	0x08001e73
 8001e58:	08001e61 	.word	0x08001e61
 8001e5c:	08001ef7 	.word	0x08001ef7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d046      	beq.n	8001efa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e70:	e043      	b.n	8001efa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7a:	d140      	bne.n	8001efe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e80:	e03d      	b.n	8001efe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8a:	d121      	bne.n	8001ed0 <DMA_CheckFifoParam+0xa8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d837      	bhi.n	8001f02 <DMA_CheckFifoParam+0xda>
 8001e92:	a201      	add	r2, pc, #4	; (adr r2, 8001e98 <DMA_CheckFifoParam+0x70>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001ea9 	.word	0x08001ea9
 8001e9c:	08001eaf 	.word	0x08001eaf
 8001ea0:	08001ea9 	.word	0x08001ea9
 8001ea4:	08001ec1 	.word	0x08001ec1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8001eac:	e030      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d025      	beq.n	8001f06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ebe:	e022      	b.n	8001f06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ec8:	d11f      	bne.n	8001f0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ece:	e01c      	b.n	8001f0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d903      	bls.n	8001ede <DMA_CheckFifoParam+0xb6>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d003      	beq.n	8001ee4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001edc:	e018      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee2:	e015      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ef4:	e00b      	b.n	8001f0e <DMA_CheckFifoParam+0xe6>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e00a      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e008      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
 8001f00:	e006      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
 8001f04:	e004      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
 8001f08:	e002      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f0a:	bf00      	nop
 8001f0c:	e000      	b.n	8001f10 <DMA_CheckFifoParam+0xe8>
      break;
 8001f0e:	bf00      	nop
    }
  } 
  
  return status; 
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a33      	ldr	r2, [pc, #204]	; (8002008 <HAL_GPIO_Init+0xe8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d017      	beq.n	8001f6e <HAL_GPIO_Init+0x4e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a32      	ldr	r2, [pc, #200]	; (800200c <HAL_GPIO_Init+0xec>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x4e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a31      	ldr	r2, [pc, #196]	; (8002010 <HAL_GPIO_Init+0xf0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00f      	beq.n	8001f6e <HAL_GPIO_Init+0x4e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a30      	ldr	r2, [pc, #192]	; (8002014 <HAL_GPIO_Init+0xf4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <HAL_GPIO_Init+0x4e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a2f      	ldr	r2, [pc, #188]	; (8002018 <HAL_GPIO_Init+0xf8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x4e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2e      	ldr	r2, [pc, #184]	; (800201c <HAL_GPIO_Init+0xfc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x4e>
 8001f66:	21ac      	movs	r1, #172	; 0xac
 8001f68:	482d      	ldr	r0, [pc, #180]	; (8002020 <HAL_GPIO_Init+0x100>)
 8001f6a:	f7fe fe66 	bl	8000c3a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_GPIO_Init+0x64>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	041b      	lsls	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x6c>
 8001f84:	21ad      	movs	r1, #173	; 0xad
 8001f86:	4826      	ldr	r0, [pc, #152]	; (8002020 <HAL_GPIO_Init+0x100>)
 8001f88:	f7fe fe57 	bl	8000c3a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d035      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d031      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b11      	cmp	r3, #17
 8001fa2:	d02d      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d029      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b12      	cmp	r3, #18
 8001fb2:	d025      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001fbc:	d020      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001fc6:	d01b      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001fd0:	d016      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001fda:	d011      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001fe4:	d00c      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001fee:	d007      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0xe0>
 8001ff8:	21ae      	movs	r1, #174	; 0xae
 8001ffa:	4809      	ldr	r0, [pc, #36]	; (8002020 <HAL_GPIO_Init+0x100>)
 8001ffc:	f7fe fe1d 	bl	8000c3a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	e211      	b.n	800242a <HAL_GPIO_Init+0x50a>
 8002006:	bf00      	nop
 8002008:	40020000 	.word	0x40020000
 800200c:	40020400 	.word	0x40020400
 8002010:	40020800 	.word	0x40020800
 8002014:	40020c00 	.word	0x40020c00
 8002018:	40021000 	.word	0x40021000
 800201c:	40021c00 	.word	0x40021c00
 8002020:	0800a7a4 	.word	0x0800a7a4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	f040 81f1 	bne.w	8002424 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d005      	beq.n	800205a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	2b02      	cmp	r3, #2
 8002058:	d144      	bne.n	80020e4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00f      	beq.n	8002082 <HAL_GPIO_Init+0x162>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00b      	beq.n	8002082 <HAL_GPIO_Init+0x162>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x162>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x162>
 800207a:	21c0      	movs	r1, #192	; 0xc0
 800207c:	489f      	ldr	r0, [pc, #636]	; (80022fc <HAL_GPIO_Init+0x3dc>)
 800207e:	f7fe fddc 	bl	8000c3a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d027      	beq.n	8002140 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_GPIO_Init+0x1f0>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d007      	beq.n	8002110 <HAL_GPIO_Init+0x1f0>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x1f0>
 8002108:	21d1      	movs	r1, #209	; 0xd1
 800210a:	487c      	ldr	r0, [pc, #496]	; (80022fc <HAL_GPIO_Init+0x3dc>)
 800210c:	f7fe fd95 	bl	8000c3a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	f040 80a0 	bne.w	800228e <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d077      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b09      	cmp	r3, #9
 800215c:	d073      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06f      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d06b      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d067      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d05f      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d05b      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d057      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d053      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d04f      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d04b      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d047      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d043      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b05      	cmp	r3, #5
 80021c4:	d03f      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b05      	cmp	r3, #5
 80021cc:	d03b      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d037      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d033      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d02f      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d02b      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d027      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b07      	cmp	r3, #7
 80021fc:	d023      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	2b07      	cmp	r3, #7
 8002204:	d01f      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b07      	cmp	r3, #7
 800220c:	d01b      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b08      	cmp	r3, #8
 8002214:	d017      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b0a      	cmp	r3, #10
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b09      	cmp	r3, #9
 8002224:	d00f      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b09      	cmp	r3, #9
 800222c:	d00b      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d007      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x326>
 800223e:	21de      	movs	r1, #222	; 0xde
 8002240:	482e      	ldr	r0, [pc, #184]	; (80022fc <HAL_GPIO_Init+0x3dc>)
 8002242:	f7fe fcfa 	bl	8000c3a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	220f      	movs	r2, #15
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0203 	and.w	r2, r3, #3
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80aa 	beq.w	8002424 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_GPIO_Init+0x3e0>)
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_GPIO_Init+0x3e0>)
 80022da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022de:	6453      	str	r3, [r2, #68]	; 0x44
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <HAL_GPIO_Init+0x3e0>)
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ec:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_GPIO_Init+0x3e4>)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	3302      	adds	r3, #2
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x3e8>
 80022fa:	bf00      	nop
 80022fc:	0800a7a4 	.word	0x0800a7a4
 8002300:	40023800 	.word	0x40023800
 8002304:	40013800 	.word	0x40013800
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a46      	ldr	r2, [pc, #280]	; (800243c <HAL_GPIO_Init+0x51c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d019      	beq.n	800235c <HAL_GPIO_Init+0x43c>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a45      	ldr	r2, [pc, #276]	; (8002440 <HAL_GPIO_Init+0x520>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_GPIO_Init+0x438>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a44      	ldr	r2, [pc, #272]	; (8002444 <HAL_GPIO_Init+0x524>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00d      	beq.n	8002354 <HAL_GPIO_Init+0x434>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a43      	ldr	r2, [pc, #268]	; (8002448 <HAL_GPIO_Init+0x528>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x430>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a42      	ldr	r2, [pc, #264]	; (800244c <HAL_GPIO_Init+0x52c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_GPIO_Init+0x42c>
 8002348:	2304      	movs	r3, #4
 800234a:	e008      	b.n	800235e <HAL_GPIO_Init+0x43e>
 800234c:	2307      	movs	r3, #7
 800234e:	e006      	b.n	800235e <HAL_GPIO_Init+0x43e>
 8002350:	2303      	movs	r3, #3
 8002352:	e004      	b.n	800235e <HAL_GPIO_Init+0x43e>
 8002354:	2302      	movs	r3, #2
 8002356:	e002      	b.n	800235e <HAL_GPIO_Init+0x43e>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_GPIO_Init+0x43e>
 800235c:	2300      	movs	r3, #0
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f002 0203 	and.w	r2, r2, #3
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4093      	lsls	r3, r2
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236e:	4938      	ldr	r1, [pc, #224]	; (8002450 <HAL_GPIO_Init+0x530>)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	3302      	adds	r3, #2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <HAL_GPIO_Init+0x534>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a0:	4a2c      	ldr	r2, [pc, #176]	; (8002454 <HAL_GPIO_Init+0x534>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <HAL_GPIO_Init+0x534>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ca:	4a22      	ldr	r2, [pc, #136]	; (8002454 <HAL_GPIO_Init+0x534>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d0:	4b20      	ldr	r3, [pc, #128]	; (8002454 <HAL_GPIO_Init+0x534>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f4:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_GPIO_Init+0x534>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_GPIO_Init+0x534>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241e:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_GPIO_Init+0x534>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	3301      	adds	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	2b0f      	cmp	r3, #15
 800242e:	f67f adf9 	bls.w	8002024 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40020000 	.word	0x40020000
 8002440:	40020400 	.word	0x40020400
 8002444:	40020800 	.word	0x40020800
 8002448:	40020c00 	.word	0x40020c00
 800244c:	40021000 	.word	0x40021000
 8002450:	40013800 	.word	0x40013800
 8002454:	40013c00 	.word	0x40013c00

08002458 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
 8002464:	4613      	mov	r3, r2
 8002466:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_GPIO_WritePin+0x20>
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_GPIO_WritePin+0x2a>
 8002478:	f240 119d 	movw	r1, #413	; 0x19d
 800247c:	480e      	ldr	r0, [pc, #56]	; (80024b8 <HAL_GPIO_WritePin+0x60>)
 800247e:	f7fe fbdc 	bl	8000c3a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002482:	787b      	ldrb	r3, [r7, #1]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_GPIO_WritePin+0x40>
 8002488:	787b      	ldrb	r3, [r7, #1]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d004      	beq.n	8002498 <HAL_GPIO_WritePin+0x40>
 800248e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002492:	4809      	ldr	r0, [pc, #36]	; (80024b8 <HAL_GPIO_WritePin+0x60>)
 8002494:	f7fe fbd1 	bl	8000c3a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	0800a7a4 	.word	0x0800a7a4

080024bc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024be:	b08f      	sub	sp, #60	; 0x3c
 80024c0:	af0a      	add	r7, sp, #40	; 0x28
 80024c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e05d      	b.n	800258a <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d6:	d003      	beq.n	80024e0 <HAL_HCD_Init+0x24>
 80024d8:	2179      	movs	r1, #121	; 0x79
 80024da:	482e      	ldr	r0, [pc, #184]	; (8002594 <HAL_HCD_Init+0xd8>)
 80024dc:	f7fe fbad 	bl	8000c3a <assert_failed>

  USBx = hhcd->Instance;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f007 fd58 	bl	8009fb0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2203      	movs	r2, #3
 8002504:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f004 feae 	bl	8007280 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	687e      	ldr	r6, [r7, #4]
 800252c:	466d      	mov	r5, sp
 800252e:	f106 0410 	add.w	r4, r6, #16
 8002532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800253e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002542:	1d33      	adds	r3, r6, #4
 8002544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002546:	6838      	ldr	r0, [r7, #0]
 8002548:	f004 fe28 	bl	800719c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fea5 	bl	80072a2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	687e      	ldr	r6, [r7, #4]
 8002560:	466d      	mov	r5, sp
 8002562:	f106 0410 	add.w	r4, r6, #16
 8002566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002572:	e885 0003 	stmia.w	r5, {r0, r1}
 8002576:	1d33      	adds	r3, r6, #4
 8002578:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257a:	6838      	ldr	r0, [r7, #0]
 800257c:	f005 f80c 	bl	8007598 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002592:	bf00      	nop
 8002594:	0800a7e0 	.word	0x0800a7e0

08002598 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af04      	add	r7, sp, #16
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	70fb      	strb	r3, [r7, #3]
 80025aa:	460b      	mov	r3, r1
 80025ac:	70bb      	strb	r3, [r7, #2]
 80025ae:	4613      	mov	r3, r2
 80025b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_HCD_HC_Init+0x28>
 80025bc:	2302      	movs	r3, #2
 80025be:	e076      	b.n	80026ae <HAL_HCD_HC_Init+0x116>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	333d      	adds	r3, #61	; 0x3d
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3338      	adds	r3, #56	; 0x38
 80025e8:	787a      	ldrb	r2, [r7, #1]
 80025ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3340      	adds	r3, #64	; 0x40
 80025fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025fc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3339      	adds	r3, #57	; 0x39
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	333f      	adds	r3, #63	; 0x3f
 800261e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	78ba      	ldrb	r2, [r7, #2]
 8002628:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800262c:	b2d0      	uxtb	r0, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	333a      	adds	r3, #58	; 0x3a
 800263a:	4602      	mov	r2, r0
 800263c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800263e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002642:	2b00      	cmp	r3, #0
 8002644:	da09      	bge.n	800265a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	333b      	adds	r3, #59	; 0x3b
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e008      	b.n	800266c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	212c      	movs	r1, #44	; 0x2c
 8002660:	fb01 f303 	mul.w	r3, r1, r3
 8002664:	4413      	add	r3, r2
 8002666:	333b      	adds	r3, #59	; 0x3b
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	333c      	adds	r3, #60	; 0x3c
 800267a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800267e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	787c      	ldrb	r4, [r7, #1]
 8002686:	78ba      	ldrb	r2, [r7, #2]
 8002688:	78f9      	ldrb	r1, [r7, #3]
 800268a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4623      	mov	r3, r4
 800269c:	f005 f8f6 	bl	800788c <USB_HC_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}

080026b6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_HCD_HC_Halt+0x1e>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e00f      	b.n	80026f4 <HAL_HCD_HC_Halt+0x3e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 fb32 	bl	8007d4e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	461a      	mov	r2, r3
 800270a:	4603      	mov	r3, r0
 800270c:	70fb      	strb	r3, [r7, #3]
 800270e:	460b      	mov	r3, r1
 8002710:	70bb      	strb	r3, [r7, #2]
 8002712:	4613      	mov	r3, r2
 8002714:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	333b      	adds	r3, #59	; 0x3b
 8002724:	78ba      	ldrb	r2, [r7, #2]
 8002726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	333f      	adds	r3, #63	; 0x3f
 8002736:	787a      	ldrb	r2, [r7, #1]
 8002738:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800273a:	7c3b      	ldrb	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d112      	bne.n	8002766 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3342      	adds	r3, #66	; 0x42
 800274e:	2203      	movs	r2, #3
 8002750:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	333d      	adds	r3, #61	; 0x3d
 8002760:	7f3a      	ldrb	r2, [r7, #28]
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e008      	b.n	8002778 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3342      	adds	r3, #66	; 0x42
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b03      	cmp	r3, #3
 800277c:	f200 80c6 	bhi.w	800290c <HAL_HCD_HC_SubmitRequest+0x210>
 8002780:	a201      	add	r2, pc, #4	; (adr r2, 8002788 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	08002799 	.word	0x08002799
 800278c:	080028f9 	.word	0x080028f9
 8002790:	080027fd 	.word	0x080027fd
 8002794:	0800287b 	.word	0x0800287b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002798:	7c3b      	ldrb	r3, [r7, #16]
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 80b8 	bne.w	8002910 <HAL_HCD_HC_SubmitRequest+0x214>
 80027a0:	78bb      	ldrb	r3, [r7, #2]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f040 80b4 	bne.w	8002910 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80027a8:	8b3b      	ldrh	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3355      	adds	r3, #85	; 0x55
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	3355      	adds	r3, #85	; 0x55
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d109      	bne.n	80027e8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	212c      	movs	r1, #44	; 0x2c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3342      	adds	r3, #66	; 0x42
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027e6:	e093      	b.n	8002910 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3342      	adds	r3, #66	; 0x42
 80027f6:	2202      	movs	r2, #2
 80027f8:	701a      	strb	r2, [r3, #0]
      break;
 80027fa:	e089      	b.n	8002910 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027fc:	78bb      	ldrb	r3, [r7, #2]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d11d      	bne.n	800283e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	3355      	adds	r3, #85	; 0x55
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3342      	adds	r3, #66	; 0x42
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002828:	e073      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	212c      	movs	r1, #44	; 0x2c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4413      	add	r3, r2
 8002836:	3342      	adds	r3, #66	; 0x42
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
      break;
 800283c:	e069      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3354      	adds	r3, #84	; 0x54
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	212c      	movs	r1, #44	; 0x2c
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	4413      	add	r3, r2
 800285e:	3342      	adds	r3, #66	; 0x42
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
      break;
 8002864:	e055      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3342      	adds	r3, #66	; 0x42
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
      break;
 8002878:	e04b      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800287a:	78bb      	ldrb	r3, [r7, #2]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11d      	bne.n	80028bc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3355      	adds	r3, #85	; 0x55
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3342      	adds	r3, #66	; 0x42
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028a6:	e034      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3342      	adds	r3, #66	; 0x42
 80028b6:	2202      	movs	r2, #2
 80028b8:	701a      	strb	r2, [r3, #0]
      break;
 80028ba:	e02a      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3354      	adds	r3, #84	; 0x54
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3342      	adds	r3, #66	; 0x42
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
      break;
 80028e2:	e016      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3342      	adds	r3, #66	; 0x42
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
      break;
 80028f6:	e00c      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3342      	adds	r3, #66	; 0x42
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
      break;
 800290a:	e002      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002910:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3344      	adds	r3, #68	; 0x44
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	8b3a      	ldrh	r2, [r7, #24]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	202c      	movs	r0, #44	; 0x2c
 800292c:	fb00 f303 	mul.w	r3, r0, r3
 8002930:	440b      	add	r3, r1
 8002932:	334c      	adds	r3, #76	; 0x4c
 8002934:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	3360      	adds	r3, #96	; 0x60
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	212c      	movs	r1, #44	; 0x2c
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3350      	adds	r3, #80	; 0x50
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3339      	adds	r3, #57	; 0x39
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	222c      	movs	r2, #44	; 0x2c
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	3338      	adds	r3, #56	; 0x38
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	18d1      	adds	r1, r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	f005 f886 	bl	8007aa8 <USB_HC_StartXfer>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop

080029a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fda9 	bl	8007516 <USB_GetMode>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80f6 	bne.w	8002bb8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 fd8d 	bl	80074f0 <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80ec 	beq.w	8002bb6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fd84 	bl	80074f0 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f2:	d104      	bne.n	80029fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fd74 	bl	80074f0 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a12:	d104      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fd64 	bl	80074f0 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a32:	d104      	bne.n	8002a3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 fd54 	bl	80074f0 <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d103      	bne.n	8002a5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fd46 	bl	80074f0 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6e:	d11c      	bne.n	8002aaa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	6938      	ldr	r0, [r7, #16]
 8002a8e:	f004 fc55 	bl	800733c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a92:	6938      	ldr	r0, [r7, #16]
 8002a94:	f004 fc76 	bl	8007384 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fe2e 	bl	8007700 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f007 fb01 	bl	800a0ac <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 fd1e 	bl	80074f0 <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abe:	d102      	bne.n	8002ac6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f001 fa03 	bl	8003ecc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fd10 	bl	80074f0 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d106      	bne.n	8002ae8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f007 faca 	bl	800a074 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fcff 	bl	80074f0 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d101      	bne.n	8002b00 <HAL_HCD_IRQHandler+0x158>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_HCD_IRQHandler+0x15a>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699a      	ldr	r2, [r3, #24]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0210 	bic.w	r2, r2, #16
 8002b14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f001 f906 	bl	8003d28 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0210 	orr.w	r2, r2, #16
 8002b2a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f004 fcdd 	bl	80074f0 <USB_ReadInterrupts>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b40:	d13a      	bne.n	8002bb8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 f8f0 	bl	8007d2c <USB_HC_ReadInterrupt>
 8002b4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e025      	b.n	8002ba0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d018      	beq.n	8002b9a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7e:	d106      	bne.n	8002b8e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4619      	mov	r1, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8ab 	bl	8002ce2 <HCD_HC_IN_IRQHandler>
 8002b8c:	e005      	b.n	8002b9a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	4619      	mov	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fcc6 	bl	8003526 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3d4      	bcc.n	8002b54 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb2:	615a      	str	r2, [r3, #20]
 8002bb4:	e000      	b.n	8002bb8 <HAL_HCD_IRQHandler+0x210>
      return;
 8002bb6:	bf00      	nop
    }
  }
}
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_HCD_Start+0x16>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e013      	b.n	8002bfc <HAL_HCD_Start+0x3e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fdf0 	bl	80077c8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 fb36 	bl	800725e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_HCD_Stop+0x16>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e00d      	b.n	8002c36 <HAL_HCD_Stop+0x32>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f005 f9ea 	bl	8008000 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fd92 	bl	8007774 <USB_ResetPort>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	3360      	adds	r3, #96	; 0x60
 8002c74:	781b      	ldrb	r3, [r3, #0]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3350      	adds	r3, #80	; 0x50
 8002c9c:	681b      	ldr	r3, [r3, #0]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 fdd6 	bl	8007868 <USB_GetCurrentFrame>
 8002cbc:	4603      	mov	r3, r0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fdb1 	bl	800783a <USB_GetHostSpeed>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d119      	bne.n	8002d46 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2304      	movs	r3, #4
 8002d22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	0151      	lsls	r1, r2, #5
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	440a      	add	r2, r1
 8002d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	60d3      	str	r3, [r2, #12]
 8002d44:	e101      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5c:	d12b      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3361      	adds	r3, #97	; 0x61
 8002d80:	2207      	movs	r2, #7
 8002d82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	0151      	lsls	r1, r2, #5
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	440a      	add	r2, r1
 8002d9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d9e:	f043 0302 	orr.w	r3, r3, #2
 8002da2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 ffcd 	bl	8007d4e <USB_HC_Halt>
 8002db4:	e0c9      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d109      	bne.n	8002de0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2320      	movs	r3, #32
 8002ddc:	6093      	str	r3, [r2, #8]
 8002dde:	e0b4      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d133      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	0151      	lsls	r1, r2, #5
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3361      	adds	r3, #97	; 0x61
 8002e24:	2205      	movs	r2, #5
 8002e26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2310      	movs	r3, #16
 8002e38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	2308      	movs	r3, #8
 8002e4a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 ff79 	bl	8007d4e <USB_HC_Halt>
 8002e5c:	e075      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d134      	bne.n	8002ee0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3361      	adds	r3, #97	; 0x61
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ecc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 ff38 	bl	8007d4e <USB_HC_Halt>
 8002ede:	e034      	b.n	8002f4a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b80      	cmp	r3, #128	; 0x80
 8002ef4:	d129      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	0151      	lsls	r1, r2, #5
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	440a      	add	r2, r1
 8002f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	2206      	movs	r2, #6
 8002f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 ff0b 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f60:	d122      	bne.n	8002fa8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	0151      	lsls	r1, r2, #5
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	440a      	add	r2, r1
 8002f78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f7c:	f043 0302 	orr.w	r3, r3, #2
 8002f80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f004 fede 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002fa6:	e2ba      	b.n	800351e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	f040 811b 	bne.w	80031f6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d019      	beq.n	8002ffc <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3348      	adds	r3, #72	; 0x48
 8002fd6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0159      	lsls	r1, r3, #5
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	440b      	add	r3, r1
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fea:	1ad2      	subs	r2, r2, r3
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	202c      	movs	r0, #44	; 0x2c
 8002ff2:	fb00 f303 	mul.w	r3, r0, r3
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3350      	adds	r3, #80	; 0x50
 8002ffa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3361      	adds	r3, #97	; 0x61
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	335c      	adds	r3, #92	; 0x5c
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2301      	movs	r3, #1
 8003030:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	333f      	adds	r3, #63	; 0x3f
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	212c      	movs	r1, #44	; 0x2c
 800304c:	fb01 f303 	mul.w	r3, r1, r3
 8003050:	4413      	add	r3, r2
 8003052:	333f      	adds	r3, #63	; 0x3f
 8003054:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003056:	2b02      	cmp	r3, #2
 8003058:	d121      	bne.n	800309e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4413      	add	r3, r2
 8003062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	0151      	lsls	r1, r2, #5
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	440a      	add	r2, r1
 8003070:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003074:	f043 0302 	orr.w	r3, r3, #2
 8003078:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f004 fe62 	bl	8007d4e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	461a      	mov	r2, r3
 8003098:	2310      	movs	r3, #16
 800309a:	6093      	str	r3, [r2, #8]
 800309c:	e066      	b.n	800316c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	333f      	adds	r3, #63	; 0x3f
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d127      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	0151      	lsls	r1, r2, #5
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	440a      	add	r2, r1
 80030c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030d0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	3360      	adds	r3, #96	; 0x60
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	b2d9      	uxtb	r1, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	202c      	movs	r0, #44	; 0x2c
 80030ee:	fb00 f303 	mul.w	r3, r0, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f006 ffe4 	bl	800a0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003100:	e034      	b.n	800316c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	333f      	adds	r3, #63	; 0x3f
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d12a      	bne.n	800316c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3360      	adds	r3, #96	; 0x60
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3354      	adds	r3, #84	; 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	f083 0301 	eor.w	r3, r3, #1
 800313c:	b2d8      	uxtb	r0, r3
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3354      	adds	r3, #84	; 0x54
 800314c:	4602      	mov	r2, r0
 800314e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	b2d9      	uxtb	r1, r3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	202c      	movs	r0, #44	; 0x2c
 800315a:	fb00 f303 	mul.w	r3, r0, r3
 800315e:	4413      	add	r3, r2
 8003160:	3360      	adds	r3, #96	; 0x60
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f006 ffae 	bl	800a0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d12b      	bne.n	80031cc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3348      	adds	r3, #72	; 0x48
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	202c      	movs	r0, #44	; 0x2c
 800318a:	fb00 f202 	mul.w	r2, r0, r2
 800318e:	440a      	add	r2, r1
 8003190:	3240      	adds	r2, #64	; 0x40
 8003192:	8812      	ldrh	r2, [r2, #0]
 8003194:	fbb3 f3f2 	udiv	r3, r3, r2
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 81be 	beq.w	800351e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	3354      	adds	r3, #84	; 0x54
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2d8      	uxtb	r0, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	212c      	movs	r1, #44	; 0x2c
 80031be:	fb01 f303 	mul.w	r3, r1, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	3354      	adds	r3, #84	; 0x54
 80031c6:	4602      	mov	r2, r0
 80031c8:	701a      	strb	r2, [r3, #0]
}
 80031ca:	e1a8      	b.n	800351e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	3354      	adds	r3, #84	; 0x54
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	f083 0301 	eor.w	r3, r3, #1
 80031e0:	b2d8      	uxtb	r0, r3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3354      	adds	r3, #84	; 0x54
 80031f0:	4602      	mov	r2, r0
 80031f2:	701a      	strb	r2, [r3, #0]
}
 80031f4:	e193      	b.n	800351e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	f040 8106 	bne.w	800341a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	0151      	lsls	r1, r2, #5
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	440a      	add	r2, r1
 8003224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003228:	f023 0302 	bic.w	r3, r3, #2
 800322c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	212c      	movs	r1, #44	; 0x2c
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	3361      	adds	r3, #97	; 0x61
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d109      	bne.n	8003256 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3360      	adds	r3, #96	; 0x60
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	e0c9      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	3361      	adds	r3, #97	; 0x61
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b05      	cmp	r3, #5
 8003268:	d109      	bne.n	800327e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	2205      	movs	r2, #5
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e0b5      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	212c      	movs	r1, #44	; 0x2c
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	4413      	add	r3, r2
 800328a:	3361      	adds	r3, #97	; 0x61
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b06      	cmp	r3, #6
 8003290:	d009      	beq.n	80032a6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3361      	adds	r3, #97	; 0x61
 80032a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d150      	bne.n	8003348 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	335c      	adds	r3, #92	; 0x5c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	202c      	movs	r0, #44	; 0x2c
 80032be:	fb00 f303 	mul.w	r3, r0, r3
 80032c2:	440b      	add	r3, r1
 80032c4:	335c      	adds	r3, #92	; 0x5c
 80032c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	335c      	adds	r3, #92	; 0x5c
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d912      	bls.n	8003302 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	335c      	adds	r3, #92	; 0x5c
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	3360      	adds	r3, #96	; 0x60
 80032fc:	2204      	movs	r2, #4
 80032fe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003300:	e073      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	3360      	adds	r3, #96	; 0x60
 8003310:	2202      	movs	r2, #2
 8003312:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800332a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003332:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	461a      	mov	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003346:	e050      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3361      	adds	r3, #97	; 0x61
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d122      	bne.n	80033a2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	212c      	movs	r1, #44	; 0x2c
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	4413      	add	r3, r2
 8003368:	3360      	adds	r3, #96	; 0x60
 800336a:	2202      	movs	r2, #2
 800336c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003384:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800338c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	461a      	mov	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	e023      	b.n	80033ea <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3361      	adds	r3, #97	; 0x61
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b07      	cmp	r3, #7
 80033b4:	d119      	bne.n	80033ea <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	212c      	movs	r1, #44	; 0x2c
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	335c      	adds	r3, #92	; 0x5c
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	202c      	movs	r0, #44	; 0x2c
 80033ce:	fb00 f303 	mul.w	r3, r0, r3
 80033d2:	440b      	add	r3, r1
 80033d4:	335c      	adds	r3, #92	; 0x5c
 80033d6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	212c      	movs	r1, #44	; 0x2c
 80033de:	fb01 f303 	mul.w	r3, r1, r3
 80033e2:	4413      	add	r3, r2
 80033e4:	3360      	adds	r3, #96	; 0x60
 80033e6:	2204      	movs	r2, #4
 80033e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2302      	movs	r3, #2
 80033fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	b2d9      	uxtb	r1, r3
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	202c      	movs	r0, #44	; 0x2c
 8003406:	fb00 f303 	mul.w	r3, r0, r3
 800340a:	4413      	add	r3, r2
 800340c:	3360      	adds	r3, #96	; 0x60
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f006 fe58 	bl	800a0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003418:	e081      	b.n	800351e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d176      	bne.n	800351e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	333f      	adds	r3, #63	; 0x3f
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d121      	bne.n	8003488 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	335c      	adds	r3, #92	; 0x5c
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	0151      	lsls	r1, r2, #5
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	440a      	add	r2, r1
 800346c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f004 fc64 	bl	8007d4e <USB_HC_Halt>
 8003486:	e041      	b.n	800350c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	333f      	adds	r3, #63	; 0x3f
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	212c      	movs	r1, #44	; 0x2c
 80034a2:	fb01 f303 	mul.w	r3, r1, r3
 80034a6:	4413      	add	r3, r2
 80034a8:	333f      	adds	r3, #63	; 0x3f
 80034aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d12d      	bne.n	800350c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	335c      	adds	r3, #92	; 0x5c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d120      	bne.n	800350c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	212c      	movs	r1, #44	; 0x2c
 80034d0:	fb01 f303 	mul.w	r3, r1, r3
 80034d4:	4413      	add	r3, r2
 80034d6:	3361      	adds	r3, #97	; 0x61
 80034d8:	2203      	movs	r2, #3
 80034da:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	0151      	lsls	r1, r2, #5
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	440a      	add	r2, r1
 80034f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f6:	f043 0302 	orr.w	r3, r3, #2
 80034fa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fc21 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	461a      	mov	r2, r3
 800351a:	2310      	movs	r3, #16
 800351c:	6093      	str	r3, [r2, #8]
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b088      	sub	sp, #32
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d119      	bne.n	800358a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003562:	461a      	mov	r2, r3
 8003564:	2304      	movs	r3, #4
 8003566:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	0151      	lsls	r1, r2, #5
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	440a      	add	r2, r1
 800357e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003588:	e3ca      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b20      	cmp	r3, #32
 800359e:	d13e      	bne.n	800361e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ac:	461a      	mov	r2, r3
 80035ae:	2320      	movs	r3, #32
 80035b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	212c      	movs	r1, #44	; 0x2c
 80035b8:	fb01 f303 	mul.w	r3, r1, r3
 80035bc:	4413      	add	r3, r2
 80035be:	333d      	adds	r3, #61	; 0x3d
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	f040 83ac 	bne.w	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	333d      	adds	r3, #61	; 0x3d
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3360      	adds	r3, #96	; 0x60
 80035e8:	2202      	movs	r2, #2
 80035ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	0151      	lsls	r1, r2, #5
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	440a      	add	r2, r1
 8003602:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003606:	f043 0302 	orr.w	r3, r3, #2
 800360a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f004 fb99 	bl	8007d4e <USB_HC_Halt>
}
 800361c:	e380      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003634:	d122      	bne.n	800367c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	0151      	lsls	r1, r2, #5
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	440a      	add	r2, r1
 800364c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f004 fb74 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	461a      	mov	r2, r3
 8003674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003678:	6093      	str	r3, [r2, #8]
}
 800367a:	e351      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d150      	bne.n	8003734 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	335c      	adds	r3, #92	; 0x5c
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d111      	bne.n	80036de <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	212c      	movs	r1, #44	; 0x2c
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	333d      	adds	r3, #61	; 0x3d
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d8:	461a      	mov	r2, r3
 80036da:	2340      	movs	r3, #64	; 0x40
 80036dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	015a      	lsls	r2, r3, #5
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4413      	add	r3, r2
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	0151      	lsls	r1, r2, #5
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	440a      	add	r2, r1
 80036f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036f8:	f043 0302 	orr.w	r3, r3, #2
 80036fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f004 fb20 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4413      	add	r3, r2
 8003716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371a:	461a      	mov	r2, r3
 800371c:	2301      	movs	r3, #1
 800371e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	212c      	movs	r1, #44	; 0x2c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	4413      	add	r3, r2
 800372c:	3361      	adds	r3, #97	; 0x61
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
}
 8003732:	e2f5      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	4413      	add	r3, r2
 800373c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d13c      	bne.n	80037c4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3361      	adds	r3, #97	; 0x61
 8003758:	2204      	movs	r2, #4
 800375a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	333d      	adds	r3, #61	; 0x3d
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	335c      	adds	r3, #92	; 0x5c
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	0151      	lsls	r1, r2, #5
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	440a      	add	r2, r1
 8003796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	4611      	mov	r1, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 facf 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	461a      	mov	r2, r3
 80037be:	2340      	movs	r3, #64	; 0x40
 80037c0:	6093      	str	r3, [r2, #8]
}
 80037c2:	e2ad      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d12a      	bne.n	8003830 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	2308      	movs	r3, #8
 80037ea:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	440a      	add	r2, r1
 8003802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f004 fa99 	bl	8007d4e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	212c      	movs	r1, #44	; 0x2c
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	4413      	add	r3, r2
 8003828:	3361      	adds	r3, #97	; 0x61
 800382a:	2205      	movs	r2, #5
 800382c:	701a      	strb	r2, [r3, #0]
}
 800382e:	e277      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	4413      	add	r3, r2
 8003838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b10      	cmp	r3, #16
 8003844:	d150      	bne.n	80038e8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	335c      	adds	r3, #92	; 0x5c
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	3361      	adds	r3, #97	; 0x61
 8003866:	2203      	movs	r2, #3
 8003868:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	333d      	adds	r3, #61	; 0x3d
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d112      	bne.n	80038a4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	333c      	adds	r3, #60	; 0x3c
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d108      	bne.n	80038a4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	333d      	adds	r3, #61	; 0x3d
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038be:	f043 0302 	orr.w	r3, r3, #2
 80038c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	4611      	mov	r1, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 fa3d 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	2310      	movs	r3, #16
 80038e4:	6093      	str	r3, [r2, #8]
}
 80038e6:	e21b      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d174      	bne.n	80039e8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d121      	bne.n	800394a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3361      	adds	r3, #97	; 0x61
 8003914:	2206      	movs	r2, #6
 8003916:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	440a      	add	r2, r1
 800392e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003932:	f043 0302 	orr.w	r3, r3, #2
 8003936:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fa03 	bl	8007d4e <USB_HC_Halt>
 8003948:	e044      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	335c      	adds	r3, #92	; 0x5c
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	202c      	movs	r0, #44	; 0x2c
 8003962:	fb00 f303 	mul.w	r3, r0, r3
 8003966:	440b      	add	r3, r1
 8003968:	335c      	adds	r3, #92	; 0x5c
 800396a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	335c      	adds	r3, #92	; 0x5c
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d920      	bls.n	80039c2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	335c      	adds	r3, #92	; 0x5c
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3360      	adds	r3, #96	; 0x60
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	b2d9      	uxtb	r1, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	202c      	movs	r0, #44	; 0x2c
 80039ae:	fb00 f303 	mul.w	r3, r0, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f006 fb84 	bl	800a0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039c0:	e008      	b.n	80039d4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3360      	adds	r3, #96	; 0x60
 80039d0:	2202      	movs	r2, #2
 80039d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	461a      	mov	r2, r3
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	6093      	str	r3, [r2, #8]
}
 80039e6:	e19b      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fe:	d134      	bne.n	8003a6a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	0151      	lsls	r1, r2, #5
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	440a      	add	r2, r1
 8003a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1a:	f043 0302 	orr.w	r3, r3, #2
 8003a1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 f98f 	bl	8007d4e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	2310      	movs	r3, #16
 8003a40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	3361      	adds	r3, #97	; 0x61
 8003a64:	2208      	movs	r2, #8
 8003a66:	701a      	strb	r2, [r3, #0]
}
 8003a68:	e15a      	b.n	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	f040 814f 	bne.w	8003d20 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9c:	f023 0302 	bic.w	r3, r3, #2
 8003aa0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3361      	adds	r3, #97	; 0x61
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d17d      	bne.n	8003bb2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3360      	adds	r3, #96	; 0x60
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	333f      	adds	r3, #63	; 0x3f
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d00a      	beq.n	8003af2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	212c      	movs	r1, #44	; 0x2c
 8003ae2:	fb01 f303 	mul.w	r3, r1, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	333f      	adds	r3, #63	; 0x3f
 8003aea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	f040 8100 	bne.w	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d113      	bne.n	8003b22 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	3355      	adds	r3, #85	; 0x55
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2d8      	uxtb	r0, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	212c      	movs	r1, #44	; 0x2c
 8003b16:	fb01 f303 	mul.w	r3, r1, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3355      	adds	r3, #85	; 0x55
 8003b1e:	4602      	mov	r2, r0
 8003b20:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	f040 80e3 	bne.w	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	334c      	adds	r3, #76	; 0x4c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80d8 	beq.w	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	212c      	movs	r1, #44	; 0x2c
 8003b48:	fb01 f303 	mul.w	r3, r1, r3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	334c      	adds	r3, #76	; 0x4c
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	202c      	movs	r0, #44	; 0x2c
 8003b58:	fb00 f202 	mul.w	r2, r0, r2
 8003b5c:	440a      	add	r2, r1
 8003b5e:	3240      	adds	r2, #64	; 0x40
 8003b60:	8812      	ldrh	r2, [r2, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	3b01      	subs	r3, #1
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	202c      	movs	r0, #44	; 0x2c
 8003b6c:	fb00 f202 	mul.w	r2, r0, r2
 8003b70:	440a      	add	r2, r1
 8003b72:	3240      	adds	r2, #64	; 0x40
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80b5 	beq.w	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3355      	adds	r3, #85	; 0x55
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f083 0301 	eor.w	r3, r3, #1
 8003b9c:	b2d8      	uxtb	r0, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	3355      	adds	r3, #85	; 0x55
 8003bac:	4602      	mov	r2, r0
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e09f      	b.n	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3361      	adds	r3, #97	; 0x61
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d109      	bne.n	8003bda <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	212c      	movs	r1, #44	; 0x2c
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3360      	adds	r3, #96	; 0x60
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	e08b      	b.n	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	212c      	movs	r1, #44	; 0x2c
 8003be0:	fb01 f303 	mul.w	r3, r1, r3
 8003be4:	4413      	add	r3, r2
 8003be6:	3361      	adds	r3, #97	; 0x61
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d109      	bne.n	8003c02 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	212c      	movs	r1, #44	; 0x2c
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3360      	adds	r3, #96	; 0x60
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e077      	b.n	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3361      	adds	r3, #97	; 0x61
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b05      	cmp	r3, #5
 8003c14:	d109      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	212c      	movs	r1, #44	; 0x2c
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	4413      	add	r3, r2
 8003c22:	3360      	adds	r3, #96	; 0x60
 8003c24:	2205      	movs	r2, #5
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e063      	b.n	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3361      	adds	r3, #97	; 0x61
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d009      	beq.n	8003c52 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	212c      	movs	r1, #44	; 0x2c
 8003c44:	fb01 f303 	mul.w	r3, r1, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	3361      	adds	r3, #97	; 0x61
 8003c4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d14f      	bne.n	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	212c      	movs	r1, #44	; 0x2c
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	335c      	adds	r3, #92	; 0x5c
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	202c      	movs	r0, #44	; 0x2c
 8003c6a:	fb00 f303 	mul.w	r3, r0, r3
 8003c6e:	440b      	add	r3, r1
 8003c70:	335c      	adds	r3, #92	; 0x5c
 8003c72:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	335c      	adds	r3, #92	; 0x5c
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d912      	bls.n	8003cae <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	335c      	adds	r3, #92	; 0x5c
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3360      	adds	r3, #96	; 0x60
 8003ca8:	2204      	movs	r2, #4
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e021      	b.n	8003cf2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3360      	adds	r3, #96	; 0x60
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cd6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cde:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	461a      	mov	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2302      	movs	r3, #2
 8003d02:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	b2d9      	uxtb	r1, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	202c      	movs	r0, #44	; 0x2c
 8003d0e:	fb00 f303 	mul.w	r3, r0, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	3360      	adds	r3, #96	; 0x60
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f006 f9d4 	bl	800a0c8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d20:	bf00      	nop
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	0c5b      	lsrs	r3, r3, #17
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d5c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d004      	beq.n	8003d6e <HCD_RXQLVL_IRQHandler+0x46>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	f000 80a9 	beq.w	8003ebe <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d6c:	e0aa      	b.n	8003ec4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a6 	beq.w	8003ec2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3344      	adds	r3, #68	; 0x44
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 809b 	beq.w	8003ec2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	212c      	movs	r1, #44	; 0x2c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	3350      	adds	r3, #80	; 0x50
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	441a      	add	r2, r3
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	202c      	movs	r0, #44	; 0x2c
 8003da6:	fb00 f303 	mul.w	r3, r0, r3
 8003daa:	440b      	add	r3, r1
 8003dac:	334c      	adds	r3, #76	; 0x4c
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d87a      	bhi.n	8003eaa <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	212c      	movs	r1, #44	; 0x2c
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3344      	adds	r3, #68	; 0x44
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	b292      	uxth	r2, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f003 fb37 	bl	8007440 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3344      	adds	r3, #68	; 0x44
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	441a      	add	r2, r3
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	202c      	movs	r0, #44	; 0x2c
 8003dec:	fb00 f303 	mul.w	r3, r0, r3
 8003df0:	440b      	add	r3, r1
 8003df2:	3344      	adds	r3, #68	; 0x44
 8003df4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3350      	adds	r3, #80	; 0x50
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	441a      	add	r2, r3
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	202c      	movs	r0, #44	; 0x2c
 8003e10:	fb00 f303 	mul.w	r3, r0, r3
 8003e14:	440b      	add	r3, r1
 8003e16:	3350      	adds	r3, #80	; 0x50
 8003e18:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	0cdb      	lsrs	r3, r3, #19
 8003e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3340      	adds	r3, #64	; 0x40
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d13c      	bne.n	8003ec2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d039      	beq.n	8003ec2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e64:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e6c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	212c      	movs	r1, #44	; 0x2c
 8003e86:	fb01 f303 	mul.w	r3, r1, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3354      	adds	r3, #84	; 0x54
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	f083 0301 	eor.w	r3, r3, #1
 8003e94:	b2d8      	uxtb	r0, r3
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3354      	adds	r3, #84	; 0x54
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	701a      	strb	r2, [r3, #0]
      break;
 8003ea8:	e00b      	b.n	8003ec2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3360      	adds	r3, #96	; 0x60
 8003eb8:	2204      	movs	r2, #4
 8003eba:	701a      	strb	r2, [r3, #0]
      break;
 8003ebc:	e001      	b.n	8003ec2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003ec2:	bf00      	nop
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ef8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d10b      	bne.n	8003f1c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d102      	bne.n	8003f14 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f006 f8be 	bl	800a090 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f043 0302 	orr.w	r3, r3, #2
 8003f1a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d132      	bne.n	8003f8c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f043 0308 	orr.w	r3, r3, #8
 8003f2c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d126      	bne.n	8003f86 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d113      	bne.n	8003f68 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f4a:	d106      	bne.n	8003f5a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f003 fbd4 	bl	8007700 <USB_InitFSLSPClkSel>
 8003f58:	e011      	b.n	8003f7e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f003 fbcd 	bl	8007700 <USB_InitFSLSPClkSel>
 8003f66:	e00a      	b.n	8003f7e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f76:	461a      	mov	r2, r3
 8003f78:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f7c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f006 f8b0 	bl	800a0e4 <HAL_HCD_PortEnabled_Callback>
 8003f84:	e002      	b.n	8003f8c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f006 f8ba 	bl	800a100 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d103      	bne.n	8003f9e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f043 0320 	orr.w	r3, r3, #32
 8003f9c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e1be      	b.n	8004344 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a9f      	ldr	r2, [pc, #636]	; (8004248 <HAL_I2C_Init+0x294>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_I2C_Init+0x3a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a9d      	ldr	r2, [pc, #628]	; (800424c <HAL_I2C_Init+0x298>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_I2C_Init+0x3a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a9c      	ldr	r2, [pc, #624]	; (8004250 <HAL_I2C_Init+0x29c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_I2C_Init+0x3a>
 8003fe4:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003fe8:	489a      	ldr	r0, [pc, #616]	; (8004254 <HAL_I2C_Init+0x2a0>)
 8003fea:	f7fc fe26 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d004      	beq.n	8004000 <HAL_I2C_Init+0x4c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4a97      	ldr	r2, [pc, #604]	; (8004258 <HAL_I2C_Init+0x2a4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d904      	bls.n	800400a <HAL_I2C_Init+0x56>
 8004000:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8004004:	4893      	ldr	r0, [pc, #588]	; (8004254 <HAL_I2C_Init+0x2a0>)
 8004006:	f7fc fe18 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <HAL_I2C_Init+0x72>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800401a:	d004      	beq.n	8004026 <HAL_I2C_Init+0x72>
 800401c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8004020:	488c      	ldr	r0, [pc, #560]	; (8004254 <HAL_I2C_Init+0x2a0>)
 8004022:	f7fc fe0a 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <HAL_I2C_Init+0x8c>
 8004036:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800403a:	4886      	ldr	r0, [pc, #536]	; (8004254 <HAL_I2C_Init+0x2a0>)
 800403c:	f7fc fdfd 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004048:	d009      	beq.n	800405e <HAL_I2C_Init+0xaa>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004052:	d004      	beq.n	800405e <HAL_I2C_Init+0xaa>
 8004054:	f240 11c3 	movw	r1, #451	; 0x1c3
 8004058:	487e      	ldr	r0, [pc, #504]	; (8004254 <HAL_I2C_Init+0x2a0>)
 800405a:	f7fc fdee 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_I2C_Init+0xc4>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d004      	beq.n	8004078 <HAL_I2C_Init+0xc4>
 800406e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8004072:	4878      	ldr	r0, [pc, #480]	; (8004254 <HAL_I2C_Init+0x2a0>)
 8004074:	f7fc fde1 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <HAL_I2C_Init+0xda>
 8004084:	f240 11c5 	movw	r1, #453	; 0x1c5
 8004088:	4872      	ldr	r0, [pc, #456]	; (8004254 <HAL_I2C_Init+0x2a0>)
 800408a:	f7fc fdd6 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_I2C_Init+0xf4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d004      	beq.n	80040a8 <HAL_I2C_Init+0xf4>
 800409e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80040a2:	486c      	ldr	r0, [pc, #432]	; (8004254 <HAL_I2C_Init+0x2a0>)
 80040a4:	f7fc fdc9 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_I2C_Init+0x10e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d004      	beq.n	80040c2 <HAL_I2C_Init+0x10e>
 80040b8:	f240 11c7 	movw	r1, #455	; 0x1c7
 80040bc:	4865      	ldr	r0, [pc, #404]	; (8004254 <HAL_I2C_Init+0x2a0>)
 80040be:	f7fc fdbc 	bl	8000c3a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fb66 	bl	80007a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	; 0x24
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004102:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004112:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004114:	f000 febe 	bl	8004e94 <HAL_RCC_GetPCLK1Freq>
 8004118:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4a4f      	ldr	r2, [pc, #316]	; (800425c <HAL_I2C_Init+0x2a8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d807      	bhi.n	8004134 <HAL_I2C_Init+0x180>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a4e      	ldr	r2, [pc, #312]	; (8004260 <HAL_I2C_Init+0x2ac>)
 8004128:	4293      	cmp	r3, r2
 800412a:	bf94      	ite	ls
 800412c:	2301      	movls	r3, #1
 800412e:	2300      	movhi	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e006      	b.n	8004142 <HAL_I2C_Init+0x18e>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a4b      	ldr	r2, [pc, #300]	; (8004264 <HAL_I2C_Init+0x2b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	bf94      	ite	ls
 800413c:	2301      	movls	r3, #1
 800413e:	2300      	movhi	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0fc      	b.n	8004344 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a46      	ldr	r2, [pc, #280]	; (8004268 <HAL_I2C_Init+0x2b4>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0c9b      	lsrs	r3, r3, #18
 8004154:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a38      	ldr	r2, [pc, #224]	; (800425c <HAL_I2C_Init+0x2a8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d802      	bhi.n	8004184 <HAL_I2C_Init+0x1d0>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3301      	adds	r3, #1
 8004182:	e009      	b.n	8004198 <HAL_I2C_Init+0x1e4>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	4a37      	ldr	r2, [pc, #220]	; (800426c <HAL_I2C_Init+0x2b8>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	3301      	adds	r3, #1
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	492a      	ldr	r1, [pc, #168]	; (800425c <HAL_I2C_Init+0x2a8>)
 80041b4:	428b      	cmp	r3, r1
 80041b6:	d819      	bhi.n	80041ec <HAL_I2C_Init+0x238>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1e59      	subs	r1, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041cc:	400b      	ands	r3, r1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_I2C_Init+0x234>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e59      	subs	r1, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80041e0:	3301      	adds	r3, #1
 80041e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e6:	e066      	b.n	80042b6 <HAL_I2C_Init+0x302>
 80041e8:	2304      	movs	r3, #4
 80041ea:	e064      	b.n	80042b6 <HAL_I2C_Init+0x302>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d111      	bne.n	8004218 <HAL_I2C_Init+0x264>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1e58      	subs	r0, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	440b      	add	r3, r1
 8004202:	fbb0 f3f3 	udiv	r3, r0, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e012      	b.n	800423e <HAL_I2C_Init+0x28a>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1e58      	subs	r0, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	0099      	lsls	r1, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	fbb0 f3f3 	udiv	r3, r0, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_I2C_Init+0x2bc>
 8004242:	2301      	movs	r3, #1
 8004244:	e037      	b.n	80042b6 <HAL_I2C_Init+0x302>
 8004246:	bf00      	nop
 8004248:	40005400 	.word	0x40005400
 800424c:	40005800 	.word	0x40005800
 8004250:	40005c00 	.word	0x40005c00
 8004254:	0800a818 	.word	0x0800a818
 8004258:	00061a80 	.word	0x00061a80
 800425c:	000186a0 	.word	0x000186a0
 8004260:	001e847f 	.word	0x001e847f
 8004264:	003d08ff 	.word	0x003d08ff
 8004268:	431bde83 	.word	0x431bde83
 800426c:	10624dd3 	.word	0x10624dd3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10e      	bne.n	8004296 <HAL_I2C_Init+0x2e2>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1e58      	subs	r0, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6859      	ldr	r1, [r3, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	440b      	add	r3, r1
 8004286:	fbb0 f3f3 	udiv	r3, r0, r3
 800428a:	3301      	adds	r3, #1
 800428c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004294:	e00f      	b.n	80042b6 <HAL_I2C_Init+0x302>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1e58      	subs	r0, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6859      	ldr	r1, [r3, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	0099      	lsls	r1, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	6809      	ldr	r1, [r1, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6911      	ldr	r1, [r2, #16]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68d2      	ldr	r2, [r2, #12]
 80042f0:	4311      	orrs	r1, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	430b      	orrs	r3, r1
 80042f8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e316      	b.n	800498c <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b0f      	cmp	r3, #15
 8004364:	d903      	bls.n	800436e <HAL_RCC_OscConfig+0x22>
 8004366:	21e8      	movs	r1, #232	; 0xe8
 8004368:	48a3      	ldr	r0, [pc, #652]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	f7fc fc66 	bl	8000c3a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8088 	beq.w	800448c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <HAL_RCC_OscConfig+0x54>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438c:	d008      	beq.n	80043a0 <HAL_RCC_OscConfig+0x54>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004396:	d003      	beq.n	80043a0 <HAL_RCC_OscConfig+0x54>
 8004398:	21ed      	movs	r1, #237	; 0xed
 800439a:	4897      	ldr	r0, [pc, #604]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	f7fc fc4d 	bl	8000c3a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043a0:	4b96      	ldr	r3, [pc, #600]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d00c      	beq.n	80043c6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ac:	4b93      	ldr	r3, [pc, #588]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d112      	bne.n	80043de <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043b8:	4b90      	ldr	r3, [pc, #576]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c4:	d10b      	bne.n	80043de <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c6:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d05b      	beq.n	800448a <HAL_RCC_OscConfig+0x13e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d157      	bne.n	800448a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e2d6      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e6:	d106      	bne.n	80043f6 <HAL_RCC_OscConfig+0xaa>
 80043e8:	4b84      	ldr	r3, [pc, #528]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a83      	ldr	r2, [pc, #524]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80043ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e01d      	b.n	8004432 <HAL_RCC_OscConfig+0xe6>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043fe:	d10c      	bne.n	800441a <HAL_RCC_OscConfig+0xce>
 8004400:	4b7e      	ldr	r3, [pc, #504]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a7d      	ldr	r2, [pc, #500]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004406:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b7b      	ldr	r3, [pc, #492]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a7a      	ldr	r2, [pc, #488]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	e00b      	b.n	8004432 <HAL_RCC_OscConfig+0xe6>
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a77      	ldr	r2, [pc, #476]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b75      	ldr	r3, [pc, #468]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a74      	ldr	r2, [pc, #464]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 800442c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d013      	beq.n	8004462 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fc fef3 	bl	8001224 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004442:	f7fc feef 	bl	8001224 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b64      	cmp	r3, #100	; 0x64
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e29b      	b.n	800498c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004454:	4b69      	ldr	r3, [pc, #420]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0xf6>
 8004460:	e014      	b.n	800448c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004462:	f7fc fedf 	bl	8001224 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800446a:	f7fc fedb 	bl	8001224 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b64      	cmp	r3, #100	; 0x64
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e287      	b.n	800498c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447c:	4b5f      	ldr	r3, [pc, #380]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x11e>
 8004488:	e000      	b.n	800448c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d079      	beq.n	800458c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_RCC_OscConfig+0x166>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d004      	beq.n	80044b2 <HAL_RCC_OscConfig+0x166>
 80044a8:	f240 111f 	movw	r1, #287	; 0x11f
 80044ac:	4852      	ldr	r0, [pc, #328]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	f7fc fbc4 	bl	8000c3a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b1f      	cmp	r3, #31
 80044b8:	d904      	bls.n	80044c4 <HAL_RCC_OscConfig+0x178>
 80044ba:	f44f 7190 	mov.w	r1, #288	; 0x120
 80044be:	484e      	ldr	r0, [pc, #312]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	f7fc fbbb 	bl	8000c3a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c4:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d0:	4b4a      	ldr	r3, [pc, #296]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d11c      	bne.n	8004516 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044dc:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d116      	bne.n	8004516 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e8:	4b44      	ldr	r3, [pc, #272]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_OscConfig+0x1b4>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e245      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	493b      	ldr	r1, [pc, #236]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004514:	e03a      	b.n	800458c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d020      	beq.n	8004560 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800451e:	4b38      	ldr	r3, [pc, #224]	; (8004600 <HAL_RCC_OscConfig+0x2b4>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fc fe7e 	bl	8001224 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452c:	f7fc fe7a 	bl	8001224 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e226      	b.n	800498c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4928      	ldr	r1, [pc, #160]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
 800455e:	e015      	b.n	800458c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RCC_OscConfig+0x2b4>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fc fe5d 	bl	8001224 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800456e:	f7fc fe59 	bl	8001224 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e205      	b.n	800498c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f0      	bne.n	800456e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d046      	beq.n	8004626 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCC_OscConfig+0x266>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d004      	beq.n	80045b2 <HAL_RCC_OscConfig+0x266>
 80045a8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80045ac:	4812      	ldr	r0, [pc, #72]	; (80045f8 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	f7fc fb44 	bl	8000c3a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_RCC_OscConfig+0x2b8>)
 80045bc:	2201      	movs	r2, #1
 80045be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c0:	f7fc fe30 	bl	8001224 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c8:	f7fc fe2c 	bl	8001224 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e1d8      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCC_OscConfig+0x2b0>)
 80045dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x27c>
 80045e6:	e01e      	b.n	8004626 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x2b8>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ee:	f7fc fe19 	bl	8001224 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	e011      	b.n	800461a <HAL_RCC_OscConfig+0x2ce>
 80045f6:	bf00      	nop
 80045f8:	0800a850 	.word	0x0800a850
 80045fc:	40023800 	.word	0x40023800
 8004600:	42470000 	.word	0x42470000
 8004604:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004608:	f7fc fe0c 	bl	8001224 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e1b8      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800461a:	4b97      	ldr	r3, [pc, #604]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80a8 	beq.w	8004784 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_RCC_OscConfig+0x30e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d008      	beq.n	800465a <HAL_RCC_OscConfig+0x30e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d004      	beq.n	800465a <HAL_RCC_OscConfig+0x30e>
 8004650:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004654:	4889      	ldr	r0, [pc, #548]	; (800487c <HAL_RCC_OscConfig+0x530>)
 8004656:	f7fc faf0 	bl	8000c3a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465a:	4b87      	ldr	r3, [pc, #540]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b83      	ldr	r3, [pc, #524]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	4a82      	ldr	r2, [pc, #520]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6413      	str	r3, [r2, #64]	; 0x40
 8004676:	4b80      	ldr	r3, [pc, #512]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b7e      	ldr	r3, [pc, #504]	; (8004880 <HAL_RCC_OscConfig+0x534>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d118      	bne.n	80046c4 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004692:	4b7b      	ldr	r3, [pc, #492]	; (8004880 <HAL_RCC_OscConfig+0x534>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7a      	ldr	r2, [pc, #488]	; (8004880 <HAL_RCC_OscConfig+0x534>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469e:	f7fc fdc1 	bl	8001224 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fc fdbd 	bl	8001224 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e169      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b8:	4b71      	ldr	r3, [pc, #452]	; (8004880 <HAL_RCC_OscConfig+0x534>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x38e>
 80046cc:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80046ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d0:	4a69      	ldr	r2, [pc, #420]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70
 80046d8:	e01c      	b.n	8004714 <HAL_RCC_OscConfig+0x3c8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0x3b0>
 80046e2:	4b65      	ldr	r3, [pc, #404]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	4a64      	ldr	r2, [pc, #400]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6713      	str	r3, [r2, #112]	; 0x70
 80046ee:	4b62      	ldr	r3, [pc, #392]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	4a61      	ldr	r2, [pc, #388]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	; 0x70
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0x3c8>
 80046fc:	4b5e      	ldr	r3, [pc, #376]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a5d      	ldr	r2, [pc, #372]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	4b5b      	ldr	r3, [pc, #364]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a5a      	ldr	r2, [pc, #360]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800470e:	f023 0304 	bic.w	r3, r3, #4
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fc fd82 	bl	8001224 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004722:	e00a      	b.n	800473a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fc fd7e 	bl	8001224 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e128      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	4b4f      	ldr	r3, [pc, #316]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ee      	beq.n	8004724 <HAL_RCC_OscConfig+0x3d8>
 8004746:	e014      	b.n	8004772 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004748:	f7fc fd6c 	bl	8001224 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fc fd68 	bl	8001224 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	; 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e112      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004766:	4b44      	ldr	r3, [pc, #272]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1ee      	bne.n	8004750 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004772:	7dfb      	ldrb	r3, [r7, #23]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d105      	bne.n	8004784 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004778:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 800477e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_RCC_OscConfig+0x45a>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d008      	beq.n	80047a6 <HAL_RCC_OscConfig+0x45a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d004      	beq.n	80047a6 <HAL_RCC_OscConfig+0x45a>
 800479c:	f240 11cf 	movw	r1, #463	; 0x1cf
 80047a0:	4836      	ldr	r0, [pc, #216]	; (800487c <HAL_RCC_OscConfig+0x530>)
 80047a2:	f7fc fa4a 	bl	8000c3a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80ed 	beq.w	800498a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b0:	4b31      	ldr	r3, [pc, #196]	; (8004878 <HAL_RCC_OscConfig+0x52c>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	f000 80ae 	beq.w	800491a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	f040 8092 	bne.w	80048ec <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_RCC_OscConfig+0x498>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d8:	d004      	beq.n	80047e4 <HAL_RCC_OscConfig+0x498>
 80047da:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80047de:	4827      	ldr	r0, [pc, #156]	; (800487c <HAL_RCC_OscConfig+0x530>)
 80047e0:	f7fc fa2b 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	2b3f      	cmp	r3, #63	; 0x3f
 80047ea:	d904      	bls.n	80047f6 <HAL_RCC_OscConfig+0x4aa>
 80047ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80047f0:	4822      	ldr	r0, [pc, #136]	; (800487c <HAL_RCC_OscConfig+0x530>)
 80047f2:	f7fc fa22 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2b31      	cmp	r3, #49	; 0x31
 80047fc:	d904      	bls.n	8004808 <HAL_RCC_OscConfig+0x4bc>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004806:	d904      	bls.n	8004812 <HAL_RCC_OscConfig+0x4c6>
 8004808:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800480c:	481b      	ldr	r0, [pc, #108]	; (800487c <HAL_RCC_OscConfig+0x530>)
 800480e:	f7fc fa14 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	2b02      	cmp	r3, #2
 8004818:	d010      	beq.n	800483c <HAL_RCC_OscConfig+0x4f0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	2b04      	cmp	r3, #4
 8004820:	d00c      	beq.n	800483c <HAL_RCC_OscConfig+0x4f0>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	2b06      	cmp	r3, #6
 8004828:	d008      	beq.n	800483c <HAL_RCC_OscConfig+0x4f0>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	2b08      	cmp	r3, #8
 8004830:	d004      	beq.n	800483c <HAL_RCC_OscConfig+0x4f0>
 8004832:	f240 11db 	movw	r1, #475	; 0x1db
 8004836:	4811      	ldr	r0, [pc, #68]	; (800487c <HAL_RCC_OscConfig+0x530>)
 8004838:	f7fc f9ff 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d903      	bls.n	800484c <HAL_RCC_OscConfig+0x500>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	2b0f      	cmp	r3, #15
 800484a:	d904      	bls.n	8004856 <HAL_RCC_OscConfig+0x50a>
 800484c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004850:	480a      	ldr	r0, [pc, #40]	; (800487c <HAL_RCC_OscConfig+0x530>)
 8004852:	f7fc f9f2 	bl	8000c3a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x538>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fc fce2 	bl	8001224 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e011      	b.n	8004888 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004864:	f7fc fcde 	bl	8001224 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d90a      	bls.n	8004888 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e08a      	b.n	800498c <HAL_RCC_OscConfig+0x640>
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	0800a850 	.word	0x0800a850
 8004880:	40007000 	.word	0x40007000
 8004884:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <HAL_RCC_OscConfig+0x648>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e7      	bne.n	8004864 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	019b      	lsls	r3, r3, #6
 80048a4:	431a      	orrs	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	4936      	ldr	r1, [pc, #216]	; (8004994 <HAL_RCC_OscConfig+0x648>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048be:	4b36      	ldr	r3, [pc, #216]	; (8004998 <HAL_RCC_OscConfig+0x64c>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fc fcae 	bl	8001224 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048cc:	f7fc fcaa 	bl	8001224 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e056      	b.n	800498c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <HAL_RCC_OscConfig+0x648>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x580>
 80048ea:	e04e      	b.n	800498a <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCC_OscConfig+0x64c>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f2:	f7fc fc97 	bl	8001224 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048fa:	f7fc fc93 	bl	8001224 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e03f      	b.n	800498c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_RCC_OscConfig+0x648>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f0      	bne.n	80048fa <HAL_RCC_OscConfig+0x5ae>
 8004918:	e037      	b.n	800498a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e032      	b.n	800498c <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004926:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <HAL_RCC_OscConfig+0x648>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d028      	beq.n	8004986 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493e:	429a      	cmp	r2, r3
 8004940:	d121      	bne.n	8004986 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d11a      	bne.n	8004986 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004956:	4013      	ands	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800495c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800495e:	4293      	cmp	r3, r2
 8004960:	d111      	bne.n	8004986 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	085b      	lsrs	r3, r3, #1
 800496e:	3b01      	subs	r3, #1
 8004970:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d107      	bne.n	8004986 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	42470060 	.word	0x42470060

0800499c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e174      	b.n	8004c9a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x24>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d904      	bls.n	80049ca <HAL_RCC_ClockConfig+0x2e>
 80049c0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80049c4:	487b      	ldr	r0, [pc, #492]	; (8004bb4 <HAL_RCC_ClockConfig+0x218>)
 80049c6:	f7fc f938 	bl	8000c3a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d019      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d016      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d013      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d010      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d00d      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b06      	cmp	r3, #6
 80049f2:	d007      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b07      	cmp	r3, #7
 80049f8:	d004      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x68>
 80049fa:	f240 215d 	movw	r1, #605	; 0x25d
 80049fe:	486d      	ldr	r0, [pc, #436]	; (8004bb4 <HAL_RCC_ClockConfig+0x218>)
 8004a00:	f7fc f91b 	bl	8000c3a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <HAL_RCC_ClockConfig+0x21c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d90c      	bls.n	8004a2c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b69      	ldr	r3, [pc, #420]	; (8004bb8 <HAL_RCC_ClockConfig+0x21c>)
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b67      	ldr	r3, [pc, #412]	; (8004bb8 <HAL_RCC_ClockConfig+0x21c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e136      	b.n	8004c9a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d049      	beq.n	8004acc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a44:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4a5c      	ldr	r2, [pc, #368]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a5c:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a56      	ldr	r2, [pc, #344]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d024      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d020      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b90      	cmp	r3, #144	; 0x90
 8004a7e:	d01c      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2ba0      	cmp	r3, #160	; 0xa0
 8004a86:	d018      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2bb0      	cmp	r3, #176	; 0xb0
 8004a8e:	d014      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2bc0      	cmp	r3, #192	; 0xc0
 8004a96:	d010      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2bd0      	cmp	r3, #208	; 0xd0
 8004a9e:	d00c      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2be0      	cmp	r3, #224	; 0xe0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2bf0      	cmp	r3, #240	; 0xf0
 8004aae:	d004      	beq.n	8004aba <HAL_RCC_ClockConfig+0x11e>
 8004ab0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004ab4:	483f      	ldr	r0, [pc, #252]	; (8004bb4 <HAL_RCC_ClockConfig+0x218>)
 8004ab6:	f7fc f8c0 	bl	8000c3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aba:	4b40      	ldr	r3, [pc, #256]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	493d      	ldr	r1, [pc, #244]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d059      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x166>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d00c      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x166>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d008      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x166>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d004      	beq.n	8004b02 <HAL_RCC_ClockConfig+0x166>
 8004af8:	f240 2187 	movw	r1, #647	; 0x287
 8004afc:	482d      	ldr	r0, [pc, #180]	; (8004bb4 <HAL_RCC_ClockConfig+0x218>)
 8004afe:	f7fc f89c 	bl	8000c3a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d107      	bne.n	8004b1a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d119      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e0bf      	b.n	8004c9a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d003      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2a:	4b24      	ldr	r3, [pc, #144]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0af      	b.n	8004c9a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0a7      	b.n	8004c9a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4919      	ldr	r1, [pc, #100]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7fc fb62 	bl	8001224 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b64:	f7fc fb5e 	bl	8001224 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e08f      	b.n	8004c9a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_RCC_ClockConfig+0x220>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 020c 	and.w	r2, r3, #12
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d1eb      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_RCC_ClockConfig+0x21c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d212      	bcs.n	8004bc0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <HAL_RCC_ClockConfig+0x21c>)
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_RCC_ClockConfig+0x21c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d007      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e072      	b.n	8004c9a <HAL_RCC_ClockConfig+0x2fe>
 8004bb4:	0800a850 	.word	0x0800a850
 8004bb8:	40023c00 	.word	0x40023c00
 8004bbc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d025      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d018      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x26a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d013      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x26a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004be6:	d00e      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x26a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x26a>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004bfa:	d004      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x26a>
 8004bfc:	f240 21c5 	movw	r1, #709	; 0x2c5
 8004c00:	4828      	ldr	r0, [pc, #160]	; (8004ca4 <HAL_RCC_ClockConfig+0x308>)
 8004c02:	f7fc f81a 	bl	8000c3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c06:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <HAL_RCC_ClockConfig+0x30c>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	4925      	ldr	r1, [pc, #148]	; (8004ca8 <HAL_RCC_ClockConfig+0x30c>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d026      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d018      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x2c2>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c34:	d013      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x2c2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c3e:	d00e      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x2c2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004c48:	d009      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x2c2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004c52:	d004      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x2c2>
 8004c54:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8004c58:	4812      	ldr	r0, [pc, #72]	; (8004ca4 <HAL_RCC_ClockConfig+0x308>)
 8004c5a:	f7fb ffee 	bl	8000c3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCC_ClockConfig+0x30c>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	490e      	ldr	r1, [pc, #56]	; (8004ca8 <HAL_RCC_ClockConfig+0x30c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c72:	f000 f821 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <HAL_RCC_ClockConfig+0x30c>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	490a      	ldr	r1, [pc, #40]	; (8004cac <HAL_RCC_ClockConfig+0x310>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a09      	ldr	r2, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x314>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCC_ClockConfig+0x318>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc fa82 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	0800a850 	.word	0x0800a850
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	0800a938 	.word	0x0800a938
 8004cb0:	20000000 	.word	0x20000000
 8004cb4:	20000004 	.word	0x20000004

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd0:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 030c 	and.w	r3, r3, #12
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d00d      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	f200 80bd 	bhi.w	8004e5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x34>
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d003      	beq.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cea:	e0b7      	b.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004cee:	60bb      	str	r3, [r7, #8]
       break;
 8004cf0:	e0b7      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cf2:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004cf4:	60bb      	str	r3, [r7, #8]
      break;
 8004cf6:	e0b4      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cf8:	4b5d      	ldr	r3, [pc, #372]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d02:	4b5b      	ldr	r3, [pc, #364]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d04d      	beq.n	8004daa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0e:	4b58      	ldr	r3, [pc, #352]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	099b      	lsrs	r3, r3, #6
 8004d14:	461a      	mov	r2, r3
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	ea02 0800 	and.w	r8, r2, r0
 8004d26:	ea03 0901 	and.w	r9, r3, r1
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	014b      	lsls	r3, r1, #5
 8004d38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d3c:	0142      	lsls	r2, r0, #5
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	ebb0 0008 	subs.w	r0, r0, r8
 8004d46:	eb61 0109 	sbc.w	r1, r1, r9
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	018b      	lsls	r3, r1, #6
 8004d54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d58:	0182      	lsls	r2, r0, #6
 8004d5a:	1a12      	subs	r2, r2, r0
 8004d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8004d60:	f04f 0000 	mov.w	r0, #0
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	00d9      	lsls	r1, r3, #3
 8004d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d6e:	00d0      	lsls	r0, r2, #3
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	eb12 0208 	adds.w	r2, r2, r8
 8004d78:	eb43 0309 	adc.w	r3, r3, r9
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	0259      	lsls	r1, r3, #9
 8004d86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d8a:	0250      	lsls	r0, r2, #9
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4610      	mov	r0, r2
 8004d92:	4619      	mov	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	f7fb fa1c 	bl	80001d8 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4613      	mov	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e04a      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	099b      	lsrs	r3, r3, #6
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 0300 	mov.w	r3, #0
 8004db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	ea02 0400 	and.w	r4, r2, r0
 8004dc2:	ea03 0501 	and.w	r5, r3, r1
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f04f 0200 	mov.w	r2, #0
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	014b      	lsls	r3, r1, #5
 8004dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd8:	0142      	lsls	r2, r0, #5
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	1b00      	subs	r0, r0, r4
 8004de0:	eb61 0105 	sbc.w	r1, r1, r5
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	018b      	lsls	r3, r1, #6
 8004dee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004df2:	0182      	lsls	r2, r0, #6
 8004df4:	1a12      	subs	r2, r2, r0
 8004df6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dfa:	f04f 0000 	mov.w	r0, #0
 8004dfe:	f04f 0100 	mov.w	r1, #0
 8004e02:	00d9      	lsls	r1, r3, #3
 8004e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e08:	00d0      	lsls	r0, r2, #3
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	1912      	adds	r2, r2, r4
 8004e10:	eb45 0303 	adc.w	r3, r5, r3
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0299      	lsls	r1, r3, #10
 8004e1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e22:	0290      	lsls	r0, r2, #10
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4610      	mov	r0, r2
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	f7fb f9d0 	bl	80001d8 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	60bb      	str	r3, [r7, #8]
      break;
 8004e5a:	e002      	b.n	8004e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e5e:	60bb      	str	r3, [r7, #8]
      break;
 8004e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e62:	68bb      	ldr	r3, [r7, #8]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	00f42400 	.word	0x00f42400
 8004e78:	007a1200 	.word	0x007a1200

08004e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e80:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e82:	681b      	ldr	r3, [r3, #0]
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000000 	.word	0x20000000

08004e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e98:	f7ff fff0 	bl	8004e7c <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	; (8004eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800a948 	.word	0x0800a948

08004ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e18c      	b.n	80051e8 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_SPI_Init+0x1ec>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d018      	beq.n	8004f0a <HAL_SPI_Init+0x4e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a73      	ldr	r2, [pc, #460]	; (80050ac <HAL_SPI_Init+0x1f0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <HAL_SPI_Init+0x4e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a72      	ldr	r2, [pc, #456]	; (80050b0 <HAL_SPI_Init+0x1f4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00e      	beq.n	8004f0a <HAL_SPI_Init+0x4e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a70      	ldr	r2, [pc, #448]	; (80050b4 <HAL_SPI_Init+0x1f8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d009      	beq.n	8004f0a <HAL_SPI_Init+0x4e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a6f      	ldr	r2, [pc, #444]	; (80050b8 <HAL_SPI_Init+0x1fc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_SPI_Init+0x4e>
 8004f00:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004f04:	486d      	ldr	r0, [pc, #436]	; (80050bc <HAL_SPI_Init+0x200>)
 8004f06:	f7fb fe98 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_SPI_Init+0x6a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1a:	d004      	beq.n	8004f26 <HAL_SPI_Init+0x6a>
 8004f1c:	f240 1143 	movw	r1, #323	; 0x143
 8004f20:	4866      	ldr	r0, [pc, #408]	; (80050bc <HAL_SPI_Init+0x200>)
 8004f22:	f7fb fe8a 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00e      	beq.n	8004f4c <HAL_SPI_Init+0x90>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f36:	d009      	beq.n	8004f4c <HAL_SPI_Init+0x90>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	d004      	beq.n	8004f4c <HAL_SPI_Init+0x90>
 8004f42:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004f46:	485d      	ldr	r0, [pc, #372]	; (80050bc <HAL_SPI_Init+0x200>)
 8004f48:	f7fb fe77 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f54:	d008      	beq.n	8004f68 <HAL_SPI_Init+0xac>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <HAL_SPI_Init+0xac>
 8004f5e:	f240 1145 	movw	r1, #325	; 0x145
 8004f62:	4856      	ldr	r0, [pc, #344]	; (80050bc <HAL_SPI_Init+0x200>)
 8004f64:	f7fb fe69 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f70:	d00d      	beq.n	8004f8e <HAL_SPI_Init+0xd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d009      	beq.n	8004f8e <HAL_SPI_Init+0xd2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f82:	d004      	beq.n	8004f8e <HAL_SPI_Init+0xd2>
 8004f84:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004f88:	484c      	ldr	r0, [pc, #304]	; (80050bc <HAL_SPI_Init+0x200>)
 8004f8a:	f7fb fe56 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d020      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d01c      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d018      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	2b18      	cmp	r3, #24
 8004fac:	d014      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	2b20      	cmp	r3, #32
 8004fb4:	d010      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	2b28      	cmp	r3, #40	; 0x28
 8004fbc:	d00c      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	2b30      	cmp	r3, #48	; 0x30
 8004fc4:	d008      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	2b38      	cmp	r3, #56	; 0x38
 8004fcc:	d004      	beq.n	8004fd8 <HAL_SPI_Init+0x11c>
 8004fce:	f240 1147 	movw	r1, #327	; 0x147
 8004fd2:	483a      	ldr	r0, [pc, #232]	; (80050bc <HAL_SPI_Init+0x200>)
 8004fd4:	f7fb fe31 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_SPI_Init+0x136>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d004      	beq.n	8004ff2 <HAL_SPI_Init+0x136>
 8004fe8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004fec:	4833      	ldr	r0, [pc, #204]	; (80050bc <HAL_SPI_Init+0x200>)
 8004fee:	f7fb fe24 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <HAL_SPI_Init+0x150>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	2b10      	cmp	r3, #16
 8005000:	d004      	beq.n	800500c <HAL_SPI_Init+0x150>
 8005002:	f240 1149 	movw	r1, #329	; 0x149
 8005006:	482d      	ldr	r0, [pc, #180]	; (80050bc <HAL_SPI_Init+0x200>)
 8005008:	f7fb fe17 	bl	8000c3a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b00      	cmp	r3, #0
 8005012:	d155      	bne.n	80050c0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_SPI_Init+0x172>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d004      	beq.n	800502e <HAL_SPI_Init+0x172>
 8005024:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005028:	4824      	ldr	r0, [pc, #144]	; (80050bc <HAL_SPI_Init+0x200>)
 800502a:	f7fb fe06 	bl	8000c3a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_SPI_Init+0x18c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d004      	beq.n	8005048 <HAL_SPI_Init+0x18c>
 800503e:	f240 114d 	movw	r1, #333	; 0x14d
 8005042:	481e      	ldr	r0, [pc, #120]	; (80050bc <HAL_SPI_Init+0x200>)
 8005044:	f7fb fdf9 	bl	8000c3a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005050:	d125      	bne.n	800509e <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d05d      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	2b08      	cmp	r3, #8
 8005060:	d059      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	2b10      	cmp	r3, #16
 8005068:	d055      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	2b18      	cmp	r3, #24
 8005070:	d051      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2b20      	cmp	r3, #32
 8005078:	d04d      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b28      	cmp	r3, #40	; 0x28
 8005080:	d049      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	2b30      	cmp	r3, #48	; 0x30
 8005088:	d045      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b38      	cmp	r3, #56	; 0x38
 8005090:	d041      	beq.n	8005116 <HAL_SPI_Init+0x25a>
 8005092:	f240 1151 	movw	r1, #337	; 0x151
 8005096:	4809      	ldr	r0, [pc, #36]	; (80050bc <HAL_SPI_Init+0x200>)
 8005098:	f7fb fdcf 	bl	8000c3a <assert_failed>
 800509c:	e03b      	b.n	8005116 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	61da      	str	r2, [r3, #28]
 80050a4:	e037      	b.n	8005116 <HAL_SPI_Init+0x25a>
 80050a6:	bf00      	nop
 80050a8:	40013000 	.word	0x40013000
 80050ac:	40003800 	.word	0x40003800
 80050b0:	40003c00 	.word	0x40003c00
 80050b4:	40013400 	.word	0x40013400
 80050b8:	40015000 	.word	0x40015000
 80050bc:	0800a888 	.word	0x0800a888
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d020      	beq.n	800510a <HAL_SPI_Init+0x24e>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d01c      	beq.n	800510a <HAL_SPI_Init+0x24e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d018      	beq.n	800510a <HAL_SPI_Init+0x24e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	2b18      	cmp	r3, #24
 80050de:	d014      	beq.n	800510a <HAL_SPI_Init+0x24e>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d010      	beq.n	800510a <HAL_SPI_Init+0x24e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	2b28      	cmp	r3, #40	; 0x28
 80050ee:	d00c      	beq.n	800510a <HAL_SPI_Init+0x24e>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d008      	beq.n	800510a <HAL_SPI_Init+0x24e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	2b38      	cmp	r3, #56	; 0x38
 80050fe:	d004      	beq.n	800510a <HAL_SPI_Init+0x24e>
 8005100:	f240 115b 	movw	r1, #347	; 0x15b
 8005104:	483a      	ldr	r0, [pc, #232]	; (80051f0 <HAL_SPI_Init+0x334>)
 8005106:	f7fb fd98 	bl	8000c3a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fb fdc3 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	ea42 0103 	orr.w	r1, r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	f003 0104 	and.w	r1, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f003 0210 	and.w	r2, r3, #16
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	0800a888 	.word	0x0800a888

080051f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0a7      	b.n	8005356 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a55      	ldr	r2, [pc, #340]	; (8005360 <HAL_TIM_Base_Init+0x16c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d027      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005218:	d022      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a51      	ldr	r2, [pc, #324]	; (8005364 <HAL_TIM_Base_Init+0x170>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01d      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a4f      	ldr	r2, [pc, #316]	; (8005368 <HAL_TIM_Base_Init+0x174>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a4e      	ldr	r2, [pc, #312]	; (800536c <HAL_TIM_Base_Init+0x178>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a4c      	ldr	r2, [pc, #304]	; (8005370 <HAL_TIM_Base_Init+0x17c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a4b      	ldr	r2, [pc, #300]	; (8005374 <HAL_TIM_Base_Init+0x180>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a49      	ldr	r2, [pc, #292]	; (8005378 <HAL_TIM_Base_Init+0x184>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIM_Base_Init+0x6c>
 8005256:	f240 1113 	movw	r1, #275	; 0x113
 800525a:	4848      	ldr	r0, [pc, #288]	; (800537c <HAL_TIM_Base_Init+0x188>)
 800525c:	f7fb fced 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d014      	beq.n	8005292 <HAL_TIM_Base_Init+0x9e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b10      	cmp	r3, #16
 800526e:	d010      	beq.n	8005292 <HAL_TIM_Base_Init+0x9e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	2b20      	cmp	r3, #32
 8005276:	d00c      	beq.n	8005292 <HAL_TIM_Base_Init+0x9e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d008      	beq.n	8005292 <HAL_TIM_Base_Init+0x9e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b60      	cmp	r3, #96	; 0x60
 8005286:	d004      	beq.n	8005292 <HAL_TIM_Base_Init+0x9e>
 8005288:	f44f 718a 	mov.w	r1, #276	; 0x114
 800528c:	483b      	ldr	r0, [pc, #236]	; (800537c <HAL_TIM_Base_Init+0x188>)
 800528e:	f7fb fcd4 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00e      	beq.n	80052b8 <HAL_TIM_Base_Init+0xc4>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a2:	d009      	beq.n	80052b8 <HAL_TIM_Base_Init+0xc4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ac:	d004      	beq.n	80052b8 <HAL_TIM_Base_Init+0xc4>
 80052ae:	f240 1115 	movw	r1, #277	; 0x115
 80052b2:	4832      	ldr	r0, [pc, #200]	; (800537c <HAL_TIM_Base_Init+0x188>)
 80052b4:	f7fb fcc1 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_TIM_Base_Init+0xde>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d004      	beq.n	80052d2 <HAL_TIM_Base_Init+0xde>
 80052c8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80052cc:	482b      	ldr	r0, [pc, #172]	; (800537c <HAL_TIM_Base_Init+0x188>)
 80052ce:	f7fb fcb4 	bl	8000c3a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fb fe7e 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f001 fa2c 	bl	800675c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
 800537c:	0800a8c0 	.word	0x0800a8c0

08005380 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e0a7      	b.n	80054e2 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a55      	ldr	r2, [pc, #340]	; (80054ec <HAL_TIM_PWM_Init+0x16c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d027      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a4:	d022      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a51      	ldr	r2, [pc, #324]	; (80054f0 <HAL_TIM_PWM_Init+0x170>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d01d      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4f      	ldr	r2, [pc, #316]	; (80054f4 <HAL_TIM_PWM_Init+0x174>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d018      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a4e      	ldr	r2, [pc, #312]	; (80054f8 <HAL_TIM_PWM_Init+0x178>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a4c      	ldr	r2, [pc, #304]	; (80054fc <HAL_TIM_PWM_Init+0x17c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00e      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a4b      	ldr	r2, [pc, #300]	; (8005500 <HAL_TIM_PWM_Init+0x180>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d009      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a49      	ldr	r2, [pc, #292]	; (8005504 <HAL_TIM_PWM_Init+0x184>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_TIM_PWM_Init+0x6c>
 80053e2:	f240 5129 	movw	r1, #1321	; 0x529
 80053e6:	4848      	ldr	r0, [pc, #288]	; (8005508 <HAL_TIM_PWM_Init+0x188>)
 80053e8:	f7fb fc27 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d014      	beq.n	800541e <HAL_TIM_PWM_Init+0x9e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d010      	beq.n	800541e <HAL_TIM_PWM_Init+0x9e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	2b20      	cmp	r3, #32
 8005402:	d00c      	beq.n	800541e <HAL_TIM_PWM_Init+0x9e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d008      	beq.n	800541e <HAL_TIM_PWM_Init+0x9e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b60      	cmp	r3, #96	; 0x60
 8005412:	d004      	beq.n	800541e <HAL_TIM_PWM_Init+0x9e>
 8005414:	f240 512a 	movw	r1, #1322	; 0x52a
 8005418:	483b      	ldr	r0, [pc, #236]	; (8005508 <HAL_TIM_PWM_Init+0x188>)
 800541a:	f7fb fc0e 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00e      	beq.n	8005444 <HAL_TIM_PWM_Init+0xc4>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d009      	beq.n	8005444 <HAL_TIM_PWM_Init+0xc4>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005438:	d004      	beq.n	8005444 <HAL_TIM_PWM_Init+0xc4>
 800543a:	f240 512b 	movw	r1, #1323	; 0x52b
 800543e:	4832      	ldr	r0, [pc, #200]	; (8005508 <HAL_TIM_PWM_Init+0x188>)
 8005440:	f7fb fbfb 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <HAL_TIM_PWM_Init+0xde>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d004      	beq.n	800545e <HAL_TIM_PWM_Init+0xde>
 8005454:	f240 512c 	movw	r1, #1324	; 0x52c
 8005458:	482b      	ldr	r0, [pc, #172]	; (8005508 <HAL_TIM_PWM_Init+0x188>)
 800545a:	f7fb fbee 	bl	8000c3a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f84a 	bl	800550c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f001 f966 	bl	800675c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800
 8005508:	0800a8c0 	.word	0x0800a8c0

0800550c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a9e      	ldr	r2, [pc, #632]	; (80057b0 <HAL_TIM_PWM_Start_DMA+0x290>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d10b      	bne.n	8005554 <HAL_TIM_PWM_Start_DMA+0x34>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d06c      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d069      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b08      	cmp	r3, #8
 800554c:	d066      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d063      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555c:	d10b      	bne.n	8005576 <HAL_TIM_PWM_Start_DMA+0x56>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05b      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b04      	cmp	r3, #4
 8005568:	d058      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d055      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d052      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a8e      	ldr	r2, [pc, #568]	; (80057b4 <HAL_TIM_PWM_Start_DMA+0x294>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d10b      	bne.n	8005598 <HAL_TIM_PWM_Start_DMA+0x78>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d04a      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d047      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b08      	cmp	r3, #8
 8005590:	d044      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d041      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a86      	ldr	r2, [pc, #536]	; (80057b8 <HAL_TIM_PWM_Start_DMA+0x298>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10b      	bne.n	80055ba <HAL_TIM_PWM_Start_DMA+0x9a>
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d039      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d036      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d033      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b0c      	cmp	r3, #12
 80055b8:	d030      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a7f      	ldr	r2, [pc, #508]	; (80057bc <HAL_TIM_PWM_Start_DMA+0x29c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10b      	bne.n	80055dc <HAL_TIM_PWM_Start_DMA+0xbc>
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d028      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d025      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d022      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d01f      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a77      	ldr	r2, [pc, #476]	; (80057c0 <HAL_TIM_PWM_Start_DMA+0x2a0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d105      	bne.n	80055f2 <HAL_TIM_PWM_Start_DMA+0xd2>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d017      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d014      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a73      	ldr	r2, [pc, #460]	; (80057c4 <HAL_TIM_PWM_Start_DMA+0x2a4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d102      	bne.n	8005602 <HAL_TIM_PWM_Start_DMA+0xe2>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a70      	ldr	r2, [pc, #448]	; (80057c8 <HAL_TIM_PWM_Start_DMA+0x2a8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d102      	bne.n	8005612 <HAL_TIM_PWM_Start_DMA+0xf2>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005612:	f240 61b3 	movw	r1, #1715	; 0x6b3
 8005616:	486d      	ldr	r0, [pc, #436]	; (80057cc <HAL_TIM_PWM_Start_DMA+0x2ac>)
 8005618:	f7fb fb0f 	bl	8000c3a <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_TIM_PWM_Start_DMA+0x116>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	bf0c      	ite	eq
 800562e:	2301      	moveq	r3, #1
 8005630:	2300      	movne	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	e022      	b.n	800567c <HAL_TIM_PWM_Start_DMA+0x15c>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d109      	bne.n	8005650 <HAL_TIM_PWM_Start_DMA+0x130>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	e015      	b.n	800567c <HAL_TIM_PWM_Start_DMA+0x15c>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b08      	cmp	r3, #8
 8005654:	d109      	bne.n	800566a <HAL_TIM_PWM_Start_DMA+0x14a>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	bf0c      	ite	eq
 8005662:	2301      	moveq	r3, #1
 8005664:	2300      	movne	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	e008      	b.n	800567c <HAL_TIM_PWM_Start_DMA+0x15c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_TIM_PWM_Start_DMA+0x164>
  {
    return HAL_BUSY;
 8005680:	2302      	movs	r3, #2
 8005682:	e173      	b.n	800596c <HAL_TIM_PWM_Start_DMA+0x44c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <HAL_TIM_PWM_Start_DMA+0x17e>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	e022      	b.n	80056e4 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d109      	bne.n	80056b8 <HAL_TIM_PWM_Start_DMA+0x198>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e015      	b.n	80056e4 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d109      	bne.n	80056d2 <HAL_TIM_PWM_Start_DMA+0x1b2>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	bf0c      	ite	eq
 80056ca:	2301      	moveq	r3, #1
 80056cc:	2300      	movne	r3, #0
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	e008      	b.n	80056e4 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	bf0c      	ite	eq
 80056de:	2301      	moveq	r3, #1
 80056e0:	2300      	movne	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d024      	beq.n	8005732 <HAL_TIM_PWM_Start_DMA+0x212>
  {
    if ((pData == NULL) && (Length > 0U))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <HAL_TIM_PWM_Start_DMA+0x1d8>
 80056ee:	887b      	ldrh	r3, [r7, #2]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_TIM_PWM_Start_DMA+0x1d8>
    {
      return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e139      	b.n	800596c <HAL_TIM_PWM_Start_DMA+0x44c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <HAL_TIM_PWM_Start_DMA+0x1e8>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005706:	e016      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x216>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b04      	cmp	r3, #4
 800570c:	d104      	bne.n	8005718 <HAL_TIM_PWM_Start_DMA+0x1f8>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2202      	movs	r2, #2
 8005712:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005716:	e00e      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x216>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b08      	cmp	r3, #8
 800571c:	d104      	bne.n	8005728 <HAL_TIM_PWM_Start_DMA+0x208>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005726:	e006      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x216>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005730:	e001      	b.n	8005736 <HAL_TIM_PWM_Start_DMA+0x216>
    }
  }
  else
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e11a      	b.n	800596c <HAL_TIM_PWM_Start_DMA+0x44c>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b0c      	cmp	r3, #12
 800573a:	f200 80c4 	bhi.w	80058c6 <HAL_TIM_PWM_Start_DMA+0x3a6>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_TIM_PWM_Start_DMA+0x224>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005779 	.word	0x08005779
 8005748:	080058c7 	.word	0x080058c7
 800574c:	080058c7 	.word	0x080058c7
 8005750:	080058c7 	.word	0x080058c7
 8005754:	080057ef 	.word	0x080057ef
 8005758:	080058c7 	.word	0x080058c7
 800575c:	080058c7 	.word	0x080058c7
 8005760:	080058c7 	.word	0x080058c7
 8005764:	08005837 	.word	0x08005837
 8005768:	080058c7 	.word	0x080058c7
 800576c:	080058c7 	.word	0x080058c7
 8005770:	080058c7 	.word	0x080058c7
 8005774:	0800587f 	.word	0x0800587f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	4a14      	ldr	r2, [pc, #80]	; (80057d0 <HAL_TIM_PWM_Start_DMA+0x2b0>)
 800577e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <HAL_TIM_PWM_Start_DMA+0x2b4>)
 8005786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <HAL_TIM_PWM_Start_DMA+0x2b8>)
 800578e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3334      	adds	r3, #52	; 0x34
 800579c:	461a      	mov	r2, r3
 800579e:	887b      	ldrh	r3, [r7, #2]
 80057a0:	f7fc f8cc 	bl	800193c <HAL_DMA_Start_IT>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d018      	beq.n	80057dc <HAL_TIM_PWM_Start_DMA+0x2bc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0de      	b.n	800596c <HAL_TIM_PWM_Start_DMA+0x44c>
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800
 80057cc:	0800a8c0 	.word	0x0800a8c0
 80057d0:	0800664b 	.word	0x0800664b
 80057d4:	080066f3 	.word	0x080066f3
 80057d8:	080065b9 	.word	0x080065b9
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ea:	60da      	str	r2, [r3, #12]
      break;
 80057ec:	e06e      	b.n	80058cc <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f2:	4a60      	ldr	r2, [pc, #384]	; (8005974 <HAL_TIM_PWM_Start_DMA+0x454>)
 80057f4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	4a5f      	ldr	r2, [pc, #380]	; (8005978 <HAL_TIM_PWM_Start_DMA+0x458>)
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	4a5e      	ldr	r2, [pc, #376]	; (800597c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8005804:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3338      	adds	r3, #56	; 0x38
 8005812:	461a      	mov	r2, r3
 8005814:	887b      	ldrh	r3, [r7, #2]
 8005816:	f7fc f891 	bl	800193c <HAL_DMA_Start_IT>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_TIM_PWM_Start_DMA+0x304>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0a3      	b.n	800596c <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005832:	60da      	str	r2, [r3, #12]
      break;
 8005834:	e04a      	b.n	80058cc <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	4a4e      	ldr	r2, [pc, #312]	; (8005974 <HAL_TIM_PWM_Start_DMA+0x454>)
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	4a4d      	ldr	r2, [pc, #308]	; (8005978 <HAL_TIM_PWM_Start_DMA+0x458>)
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	4a4c      	ldr	r2, [pc, #304]	; (800597c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800584c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	333c      	adds	r3, #60	; 0x3c
 800585a:	461a      	mov	r2, r3
 800585c:	887b      	ldrh	r3, [r7, #2]
 800585e:	f7fc f86d 	bl	800193c <HAL_DMA_Start_IT>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_TIM_PWM_Start_DMA+0x34c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e07f      	b.n	800596c <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800587a:	60da      	str	r2, [r3, #12]
      break;
 800587c:	e026      	b.n	80058cc <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <HAL_TIM_PWM_Start_DMA+0x454>)
 8005884:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <HAL_TIM_PWM_Start_DMA+0x458>)
 800588c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4a3a      	ldr	r2, [pc, #232]	; (800597c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8005894:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3340      	adds	r3, #64	; 0x40
 80058a2:	461a      	mov	r2, r3
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	f7fc f849 	bl	800193c <HAL_DMA_Start_IT>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_TIM_PWM_Start_DMA+0x394>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e05b      	b.n	800596c <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058c2:	60da      	str	r2, [r3, #12]
      break;
 80058c4:	e002      	b.n	80058cc <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    default:
      status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
      break;
 80058ca:	bf00      	nop
  }

  if (status == HAL_OK)
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d14b      	bne.n	800596a <HAL_TIM_PWM_Start_DMA+0x44a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2201      	movs	r2, #1
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa6e 	bl	8006dbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a26      	ldr	r2, [pc, #152]	; (8005980 <HAL_TIM_PWM_Start_DMA+0x460>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d107      	bne.n	80058fa <HAL_TIM_PWM_Start_DMA+0x3da>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a20      	ldr	r2, [pc, #128]	; (8005980 <HAL_TIM_PWM_Start_DMA+0x460>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d018      	beq.n	8005936 <HAL_TIM_PWM_Start_DMA+0x416>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d013      	beq.n	8005936 <HAL_TIM_PWM_Start_DMA+0x416>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1c      	ldr	r2, [pc, #112]	; (8005984 <HAL_TIM_PWM_Start_DMA+0x464>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d00e      	beq.n	8005936 <HAL_TIM_PWM_Start_DMA+0x416>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <HAL_TIM_PWM_Start_DMA+0x468>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d009      	beq.n	8005936 <HAL_TIM_PWM_Start_DMA+0x416>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_TIM_PWM_Start_DMA+0x46c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d004      	beq.n	8005936 <HAL_TIM_PWM_Start_DMA+0x416>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a17      	ldr	r2, [pc, #92]	; (8005990 <HAL_TIM_PWM_Start_DMA+0x470>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d111      	bne.n	800595a <HAL_TIM_PWM_Start_DMA+0x43a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b06      	cmp	r3, #6
 8005946:	d010      	beq.n	800596a <HAL_TIM_PWM_Start_DMA+0x44a>
      {
        __HAL_TIM_ENABLE(htim);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005958:	e007      	b.n	800596a <HAL_TIM_PWM_Start_DMA+0x44a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	0800664b 	.word	0x0800664b
 8005978:	080066f3 	.word	0x080066f3
 800597c:	080065b9 	.word	0x080065b9
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40014000 	.word	0x40014000

08005994 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a97      	ldr	r2, [pc, #604]	; (8005c04 <HAL_TIM_PWM_Stop_DMA+0x270>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d10b      	bne.n	80059c4 <HAL_TIM_PWM_Stop_DMA+0x30>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d06c      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d069      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d066      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b0c      	cmp	r3, #12
 80059c2:	d063      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059cc:	d10b      	bne.n	80059e6 <HAL_TIM_PWM_Stop_DMA+0x52>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05b      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d058      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d055      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b0c      	cmp	r3, #12
 80059e4:	d052      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a87      	ldr	r2, [pc, #540]	; (8005c08 <HAL_TIM_PWM_Stop_DMA+0x274>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10b      	bne.n	8005a08 <HAL_TIM_PWM_Stop_DMA+0x74>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d04a      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d047      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d044      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	d041      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a7f      	ldr	r2, [pc, #508]	; (8005c0c <HAL_TIM_PWM_Stop_DMA+0x278>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10b      	bne.n	8005a2a <HAL_TIM_PWM_Stop_DMA+0x96>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d039      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d036      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d033      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d030      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a78      	ldr	r2, [pc, #480]	; (8005c10 <HAL_TIM_PWM_Stop_DMA+0x27c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10b      	bne.n	8005a4c <HAL_TIM_PWM_Stop_DMA+0xb8>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d028      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d025      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d022      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d01f      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a70      	ldr	r2, [pc, #448]	; (8005c14 <HAL_TIM_PWM_Stop_DMA+0x280>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d105      	bne.n	8005a62 <HAL_TIM_PWM_Stop_DMA+0xce>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d017      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d014      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6c      	ldr	r2, [pc, #432]	; (8005c18 <HAL_TIM_PWM_Stop_DMA+0x284>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d102      	bne.n	8005a72 <HAL_TIM_PWM_Stop_DMA+0xde>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a69      	ldr	r2, [pc, #420]	; (8005c1c <HAL_TIM_PWM_Stop_DMA+0x288>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d102      	bne.n	8005a82 <HAL_TIM_PWM_Stop_DMA+0xee>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d004      	beq.n	8005a8c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005a82:	f240 7154 	movw	r1, #1876	; 0x754
 8005a86:	4866      	ldr	r0, [pc, #408]	; (8005c20 <HAL_TIM_PWM_Stop_DMA+0x28c>)
 8005a88:	f7fb f8d7 	bl	8000c3a <assert_failed>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b0c      	cmp	r3, #12
 8005a90:	d854      	bhi.n	8005b3c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <HAL_TIM_PWM_Stop_DMA+0x104>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005b3d 	.word	0x08005b3d
 8005aa0:	08005b3d 	.word	0x08005b3d
 8005aa4:	08005b3d 	.word	0x08005b3d
 8005aa8:	08005ae9 	.word	0x08005ae9
 8005aac:	08005b3d 	.word	0x08005b3d
 8005ab0:	08005b3d 	.word	0x08005b3d
 8005ab4:	08005b3d 	.word	0x08005b3d
 8005ab8:	08005b05 	.word	0x08005b05
 8005abc:	08005b3d 	.word	0x08005b3d
 8005ac0:	08005b3d 	.word	0x08005b3d
 8005ac4:	08005b3d 	.word	0x08005b3d
 8005ac8:	08005b21 	.word	0x08005b21
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ada:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fb ff91 	bl	8001a08 <HAL_DMA_Abort_IT>
      break;
 8005ae6:	e02c      	b.n	8005b42 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fb ff83 	bl	8001a08 <HAL_DMA_Abort_IT>
      break;
 8005b02:	e01e      	b.n	8005b42 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fb ff75 	bl	8001a08 <HAL_DMA_Abort_IT>
      break;
 8005b1e:	e010      	b.n	8005b42 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fb ff67 	bl	8001a08 <HAL_DMA_Abort_IT>
      break;
 8005b3a:	e002      	b.n	8005b42 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    default:
      status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b40:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d157      	bne.n	8005bf8 <HAL_TIM_PWM_Stop_DMA+0x264>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 f933 	bl	8006dbc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a2a      	ldr	r2, [pc, #168]	; (8005c04 <HAL_TIM_PWM_Stop_DMA+0x270>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d117      	bne.n	8005b90 <HAL_TIM_PWM_Stop_DMA+0x1fc>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a1a      	ldr	r2, [r3, #32]
 8005b66:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10f      	bne.n	8005b90 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	f240 4344 	movw	r3, #1092	; 0x444
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10f      	bne.n	8005bc0 <HAL_TIM_PWM_Stop_DMA+0x22c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6a1a      	ldr	r2, [r3, #32]
 8005ba6:	f240 4344 	movw	r3, #1092	; 0x444
 8005baa:	4013      	ands	r3, r2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <HAL_TIM_PWM_Stop_DMA+0x22c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0201 	bic.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_TIM_PWM_Stop_DMA+0x23c>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bce:	e013      	b.n	8005bf8 <HAL_TIM_PWM_Stop_DMA+0x264>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d104      	bne.n	8005be0 <HAL_TIM_PWM_Stop_DMA+0x24c>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bde:	e00b      	b.n	8005bf8 <HAL_TIM_PWM_Stop_DMA+0x264>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b08      	cmp	r3, #8
 8005be4:	d104      	bne.n	8005bf0 <HAL_TIM_PWM_Stop_DMA+0x25c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bee:	e003      	b.n	8005bf8 <HAL_TIM_PWM_Stop_DMA+0x264>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40014000 	.word	0x40014000
 8005c18:	40014400 	.word	0x40014400
 8005c1c:	40014800 	.word	0x40014800
 8005c20:	0800a8c0 	.word	0x0800a8c0

08005c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d010      	beq.n	8005c5c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d00d      	beq.n	8005c5c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d00a      	beq.n	8005c5c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b0c      	cmp	r3, #12
 8005c4a:	d007      	beq.n	8005c5c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b3c      	cmp	r3, #60	; 0x3c
 8005c50:	d004      	beq.n	8005c5c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005c52:	f241 0177 	movw	r1, #4215	; 0x1077
 8005c56:	4893      	ldr	r0, [pc, #588]	; (8005ea4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005c58:	f7fa ffef 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d008      	beq.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x52>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b70      	cmp	r3, #112	; 0x70
 8005c6a:	d004      	beq.n	8005c76 <HAL_TIM_PWM_ConfigChannel+0x52>
 8005c6c:	f241 0178 	movw	r1, #4216	; 0x1078
 8005c70:	488c      	ldr	r0, [pc, #560]	; (8005ea4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005c72:	f7fa ffe2 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d004      	beq.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005c86:	f241 0179 	movw	r1, #4217	; 0x1079
 8005c8a:	4886      	ldr	r0, [pc, #536]	; (8005ea4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005c8c:	f7fa ffd5 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x86>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d004      	beq.n	8005caa <HAL_TIM_PWM_ConfigChannel+0x86>
 8005ca0:	f241 017a 	movw	r1, #4218	; 0x107a
 8005ca4:	487f      	ldr	r0, [pc, #508]	; (8005ea4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005ca6:	f7fa ffc8 	bl	8000c3a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_PWM_ConfigChannel+0x94>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e14c      	b.n	8005f52 <HAL_TIM_PWM_ConfigChannel+0x32e>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b0c      	cmp	r3, #12
 8005cc4:	f200 813d 	bhi.w	8005f42 <HAL_TIM_PWM_ConfigChannel+0x31e>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005f43 	.word	0x08005f43
 8005cd8:	08005f43 	.word	0x08005f43
 8005cdc:	08005f43 	.word	0x08005f43
 8005ce0:	08005d9f 	.word	0x08005d9f
 8005ce4:	08005f43 	.word	0x08005f43
 8005ce8:	08005f43 	.word	0x08005f43
 8005cec:	08005f43 	.word	0x08005f43
 8005cf0:	08005e27 	.word	0x08005e27
 8005cf4:	08005f43 	.word	0x08005f43
 8005cf8:	08005f43 	.word	0x08005f43
 8005cfc:	08005f43 	.word	0x08005f43
 8005d00:	08005ec5 	.word	0x08005ec5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a67      	ldr	r2, [pc, #412]	; (8005ea8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d027      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d16:	d022      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a63      	ldr	r2, [pc, #396]	; (8005eac <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01d      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a62      	ldr	r2, [pc, #392]	; (8005eb0 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d018      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a60      	ldr	r2, [pc, #384]	; (8005eb4 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a5f      	ldr	r2, [pc, #380]	; (8005eb8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a5d      	ldr	r2, [pc, #372]	; (8005ebc <HAL_TIM_PWM_ConfigChannel+0x298>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d009      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a5c      	ldr	r2, [pc, #368]	; (8005ec0 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005d54:	f241 0184 	movw	r1, #4228	; 0x1084
 8005d58:	4852      	ldr	r0, [pc, #328]	; (8005ea4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005d5a:	f7fa ff6e 	bl	8000c3a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fd79 	bl	800685c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0208 	orr.w	r2, r2, #8
 8005d78:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0204 	bic.w	r2, r2, #4
 8005d88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6999      	ldr	r1, [r3, #24]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	619a      	str	r2, [r3, #24]
      break;
 8005d9c:	e0d4      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a41      	ldr	r2, [pc, #260]	; (8005ea8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d01d      	beq.n	8005de4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db0:	d018      	beq.n	8005de4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a3d      	ldr	r2, [pc, #244]	; (8005eac <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a3b      	ldr	r2, [pc, #236]	; (8005eb0 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00e      	beq.n	8005de4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3a      	ldr	r2, [pc, #232]	; (8005eb4 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d009      	beq.n	8005de4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a38      	ldr	r2, [pc, #224]	; (8005eb8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d004      	beq.n	8005de4 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005dda:	f241 0195 	movw	r1, #4245	; 0x1095
 8005dde:	4831      	ldr	r0, [pc, #196]	; (8005ea4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005de0:	f7fa ff2b 	bl	8000c3a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68b9      	ldr	r1, [r7, #8]
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fdc6 	bl	800697c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	021a      	lsls	r2, r3, #8
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	619a      	str	r2, [r3, #24]
      break;
 8005e24:	e090      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	; (8005ea8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d018      	beq.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d013      	beq.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a19      	ldr	r2, [pc, #100]	; (8005eb0 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005e58:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8005e5c:	4811      	ldr	r0, [pc, #68]	; (8005ea4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005e5e:	f7fa feec 	bl	8000c3a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fe1b 	bl	8006aa4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	69da      	ldr	r2, [r3, #28]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0208 	orr.w	r2, r2, #8
 8005e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 0204 	bic.w	r2, r2, #4
 8005e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69d9      	ldr	r1, [r3, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	61da      	str	r2, [r3, #28]
      break;
 8005ea0:	e052      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x324>
 8005ea2:	bf00      	nop
 8005ea4:	0800a8c0 	.word	0x0800a8c0
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800
 8005eb4:	40000c00 	.word	0x40000c00
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <HAL_TIM_PWM_ConfigChannel+0x338>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed6:	d013      	beq.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005ef6:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8005efa:	481c      	ldr	r0, [pc, #112]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x348>)
 8005efc:	f7fa fe9d 	bl	8000c3a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fe60 	bl	8006bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	69da      	ldr	r2, [r3, #28]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69da      	ldr	r2, [r3, #28]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69d9      	ldr	r1, [r3, #28]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	021a      	lsls	r2, r3, #8
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	61da      	str	r2, [r3, #28]
      break;
 8005f40:	e002      	b.n	8005f48 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
      break;
 8005f46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	0800a8c0 	.word	0x0800a8c0

08005f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_TIM_ConfigClockSource+0x1c>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e2f0      	b.n	800656e <HAL_TIM_ConfigClockSource+0x5fe>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fa4:	d029      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fae:	d024      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d020      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d01c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d018      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b30      	cmp	r3, #48	; 0x30
 8005fce:	d014      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d010      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b50      	cmp	r3, #80	; 0x50
 8005fde:	d00c      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b60      	cmp	r3, #96	; 0x60
 8005fe6:	d008      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b70      	cmp	r3, #112	; 0x70
 8005fee:	d004      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005ff0:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8005ff4:	487c      	ldr	r0, [pc, #496]	; (80061e8 <HAL_TIM_ConfigClockSource+0x278>)
 8005ff6:	f7fa fe20 	bl	8000c3a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006008:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006010:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006022:	f000 80f1 	beq.w	8006208 <HAL_TIM_ConfigClockSource+0x298>
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602a:	f200 8293 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	d02d      	beq.n	8006090 <HAL_TIM_ConfigClockSource+0x120>
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	f200 828c 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 800603c:	2b70      	cmp	r3, #112	; 0x70
 800603e:	d05d      	beq.n	80060fc <HAL_TIM_ConfigClockSource+0x18c>
 8006040:	2b70      	cmp	r3, #112	; 0x70
 8006042:	f200 8287 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 8006046:	2b60      	cmp	r3, #96	; 0x60
 8006048:	f000 81a0 	beq.w	800638c <HAL_TIM_ConfigClockSource+0x41c>
 800604c:	2b60      	cmp	r3, #96	; 0x60
 800604e:	f200 8281 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 8006052:	2b50      	cmp	r3, #80	; 0x50
 8006054:	f000 8144 	beq.w	80062e0 <HAL_TIM_ConfigClockSource+0x370>
 8006058:	2b50      	cmp	r3, #80	; 0x50
 800605a:	f200 827b 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	f000 81f6 	beq.w	8006450 <HAL_TIM_ConfigClockSource+0x4e0>
 8006064:	2b40      	cmp	r3, #64	; 0x40
 8006066:	f200 8275 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 800606a:	2b30      	cmp	r3, #48	; 0x30
 800606c:	f000 8246 	beq.w	80064fc <HAL_TIM_ConfigClockSource+0x58c>
 8006070:	2b30      	cmp	r3, #48	; 0x30
 8006072:	f200 826f 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 8006076:	2b20      	cmp	r3, #32
 8006078:	f000 8240 	beq.w	80064fc <HAL_TIM_ConfigClockSource+0x58c>
 800607c:	2b20      	cmp	r3, #32
 800607e:	f200 8269 	bhi.w	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 823a 	beq.w	80064fc <HAL_TIM_ConfigClockSource+0x58c>
 8006088:	2b10      	cmp	r3, #16
 800608a:	f000 8237 	beq.w	80064fc <HAL_TIM_ConfigClockSource+0x58c>
 800608e:	e261      	b.n	8006554 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a55      	ldr	r2, [pc, #340]	; (80061ec <HAL_TIM_ConfigClockSource+0x27c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	f000 825f 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a4:	f000 8259 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a50      	ldr	r2, [pc, #320]	; (80061f0 <HAL_TIM_ConfigClockSource+0x280>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	f000 8253 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a4e      	ldr	r2, [pc, #312]	; (80061f4 <HAL_TIM_ConfigClockSource+0x284>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	f000 824d 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a4c      	ldr	r2, [pc, #304]	; (80061f8 <HAL_TIM_ConfigClockSource+0x288>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	f000 8247 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <HAL_TIM_ConfigClockSource+0x28c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	f000 8241 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a48      	ldr	r2, [pc, #288]	; (8006200 <HAL_TIM_ConfigClockSource+0x290>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	f000 823b 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a46      	ldr	r2, [pc, #280]	; (8006204 <HAL_TIM_ConfigClockSource+0x294>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	f000 8235 	beq.w	800655a <HAL_TIM_ConfigClockSource+0x5ea>
 80060f0:	f241 41c7 	movw	r1, #5319	; 0x14c7
 80060f4:	483c      	ldr	r0, [pc, #240]	; (80061e8 <HAL_TIM_ConfigClockSource+0x278>)
 80060f6:	f7fa fda0 	bl	8000c3a <assert_failed>
      break;
 80060fa:	e22e      	b.n	800655a <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a3a      	ldr	r2, [pc, #232]	; (80061ec <HAL_TIM_ConfigClockSource+0x27c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01d      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x1d2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d018      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x1d2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a36      	ldr	r2, [pc, #216]	; (80061f0 <HAL_TIM_ConfigClockSource+0x280>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x1d2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a35      	ldr	r2, [pc, #212]	; (80061f4 <HAL_TIM_ConfigClockSource+0x284>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x1d2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a33      	ldr	r2, [pc, #204]	; (80061f8 <HAL_TIM_ConfigClockSource+0x288>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x1d2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a32      	ldr	r2, [pc, #200]	; (80061fc <HAL_TIM_ConfigClockSource+0x28c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x1d2>
 8006138:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800613c:	482a      	ldr	r0, [pc, #168]	; (80061e8 <HAL_TIM_ConfigClockSource+0x278>)
 800613e:	f7fa fd7c 	bl	8000c3a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d013      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x202>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006152:	d00e      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x202>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800615c:	d009      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x202>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006166:	d004      	beq.n	8006172 <HAL_TIM_ConfigClockSource+0x202>
 8006168:	f241 41d1 	movw	r1, #5329	; 0x14d1
 800616c:	481e      	ldr	r0, [pc, #120]	; (80061e8 <HAL_TIM_ConfigClockSource+0x278>)
 800616e:	f7fa fd64 	bl	8000c3a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617a:	d014      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x236>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d010      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x236>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x236>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d008      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x236>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b0a      	cmp	r3, #10
 800619a:	d004      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x236>
 800619c:	f241 41d2 	movw	r1, #5330	; 0x14d2
 80061a0:	4811      	ldr	r0, [pc, #68]	; (80061e8 <HAL_TIM_ConfigClockSource+0x278>)
 80061a2:	f7fa fd4a 	bl	8000c3a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	2b0f      	cmp	r3, #15
 80061ac:	d904      	bls.n	80061b8 <HAL_TIM_ConfigClockSource+0x248>
 80061ae:	f241 41d3 	movw	r1, #5331	; 0x14d3
 80061b2:	480d      	ldr	r0, [pc, #52]	; (80061e8 <HAL_TIM_ConfigClockSource+0x278>)
 80061b4:	f7fa fd41 	bl	8000c3a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6899      	ldr	r1, [r3, #8]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f000 fdd8 	bl	8006d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061da:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	609a      	str	r2, [r3, #8]
      break;
 80061e4:	e1ba      	b.n	800655c <HAL_TIM_ConfigClockSource+0x5ec>
 80061e6:	bf00      	nop
 80061e8:	0800a8c0 	.word	0x0800a8c0
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a8a      	ldr	r2, [pc, #552]	; (8006438 <HAL_TIM_ConfigClockSource+0x4c8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0x2d4>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d013      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0x2d4>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a86      	ldr	r2, [pc, #536]	; (800643c <HAL_TIM_ConfigClockSource+0x4cc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0x2d4>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a85      	ldr	r2, [pc, #532]	; (8006440 <HAL_TIM_ConfigClockSource+0x4d0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0x2d4>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a83      	ldr	r2, [pc, #524]	; (8006444 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0x2d4>
 800623a:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800623e:	4882      	ldr	r0, [pc, #520]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006240:	f7fa fcfb 	bl	8000c3a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d013      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0x304>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006254:	d00e      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0x304>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625e:	d009      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0x304>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006268:	d004      	beq.n	8006274 <HAL_TIM_ConfigClockSource+0x304>
 800626a:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800626e:	4876      	ldr	r0, [pc, #472]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006270:	f7fa fce3 	bl	8000c3a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800627c:	d014      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0x338>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d010      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0x338>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0x338>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d008      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0x338>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b0a      	cmp	r3, #10
 800629c:	d004      	beq.n	80062a8 <HAL_TIM_ConfigClockSource+0x338>
 800629e:	f241 41ea 	movw	r1, #5354	; 0x14ea
 80062a2:	4869      	ldr	r0, [pc, #420]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 80062a4:	f7fa fcc9 	bl	8000c3a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b0f      	cmp	r3, #15
 80062ae:	d904      	bls.n	80062ba <HAL_TIM_ConfigClockSource+0x34a>
 80062b0:	f241 41eb 	movw	r1, #5355	; 0x14eb
 80062b4:	4864      	ldr	r0, [pc, #400]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 80062b6:	f7fa fcc0 	bl	8000c3a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6899      	ldr	r1, [r3, #8]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f000 fd57 	bl	8006d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062dc:	609a      	str	r2, [r3, #8]
      break;
 80062de:	e13d      	b.n	800655c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a54      	ldr	r2, [pc, #336]	; (8006438 <HAL_TIM_ConfigClockSource+0x4c8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01d      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x3b6>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f2:	d018      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x3b6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a50      	ldr	r2, [pc, #320]	; (800643c <HAL_TIM_ConfigClockSource+0x4cc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d013      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x3b6>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a4f      	ldr	r2, [pc, #316]	; (8006440 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d00e      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x3b6>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a4d      	ldr	r2, [pc, #308]	; (8006444 <HAL_TIM_ConfigClockSource+0x4d4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d009      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x3b6>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a4d      	ldr	r2, [pc, #308]	; (800644c <HAL_TIM_ConfigClockSource+0x4dc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d004      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0x3b6>
 800631c:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8006320:	4849      	ldr	r0, [pc, #292]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006322:	f7fa fc8a 	bl	8000c3a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632e:	d014      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x3ea>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d010      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x3ea>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00c      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x3ea>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d008      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x3ea>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b0a      	cmp	r3, #10
 800634e:	d004      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x3ea>
 8006350:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8006354:	483c      	ldr	r0, [pc, #240]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006356:	f7fa fc70 	bl	8000c3a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b0f      	cmp	r3, #15
 8006360:	d904      	bls.n	800636c <HAL_TIM_ConfigClockSource+0x3fc>
 8006362:	f241 41fe 	movw	r1, #5374	; 0x14fe
 8006366:	4838      	ldr	r0, [pc, #224]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006368:	f7fa fc67 	bl	8000c3a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	461a      	mov	r2, r3
 800637a:	f000 fc85 	bl	8006c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2150      	movs	r1, #80	; 0x50
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fcde 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 800638a:	e0e7      	b.n	800655c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <HAL_TIM_ConfigClockSource+0x4c8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01d      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x462>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639e:	d018      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x462>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a25      	ldr	r2, [pc, #148]	; (800643c <HAL_TIM_ConfigClockSource+0x4cc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x462>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a24      	ldr	r2, [pc, #144]	; (8006440 <HAL_TIM_ConfigClockSource+0x4d0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d00e      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x462>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a22      	ldr	r2, [pc, #136]	; (8006444 <HAL_TIM_ConfigClockSource+0x4d4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d009      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x462>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a22      	ldr	r2, [pc, #136]	; (800644c <HAL_TIM_ConfigClockSource+0x4dc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d004      	beq.n	80063d2 <HAL_TIM_ConfigClockSource+0x462>
 80063c8:	f241 510a 	movw	r1, #5386	; 0x150a
 80063cc:	481e      	ldr	r0, [pc, #120]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 80063ce:	f7fa fc34 	bl	8000c3a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063da:	d014      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x496>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d010      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x496>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x496>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d008      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x496>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b0a      	cmp	r3, #10
 80063fa:	d004      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x496>
 80063fc:	f241 510d 	movw	r1, #5389	; 0x150d
 8006400:	4811      	ldr	r0, [pc, #68]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006402:	f7fa fc1a 	bl	8000c3a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	2b0f      	cmp	r3, #15
 800640c:	d904      	bls.n	8006418 <HAL_TIM_ConfigClockSource+0x4a8>
 800640e:	f241 510e 	movw	r1, #5390	; 0x150e
 8006412:	480d      	ldr	r0, [pc, #52]	; (8006448 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006414:	f7fa fc11 	bl	8000c3a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	461a      	mov	r2, r3
 8006426:	f000 fc5e 	bl	8006ce6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2160      	movs	r1, #96	; 0x60
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fc88 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 8006436:	e091      	b.n	800655c <HAL_TIM_ConfigClockSource+0x5ec>
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	0800a8c0 	.word	0x0800a8c0
 800644c:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a48      	ldr	r2, [pc, #288]	; (8006578 <HAL_TIM_ConfigClockSource+0x608>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x526>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006462:	d018      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x526>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a44      	ldr	r2, [pc, #272]	; (800657c <HAL_TIM_ConfigClockSource+0x60c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x526>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a43      	ldr	r2, [pc, #268]	; (8006580 <HAL_TIM_ConfigClockSource+0x610>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x526>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a41      	ldr	r2, [pc, #260]	; (8006584 <HAL_TIM_ConfigClockSource+0x614>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x526>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a40      	ldr	r2, [pc, #256]	; (8006588 <HAL_TIM_ConfigClockSource+0x618>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x526>
 800648c:	f241 511a 	movw	r1, #5402	; 0x151a
 8006490:	483e      	ldr	r0, [pc, #248]	; (800658c <HAL_TIM_ConfigClockSource+0x61c>)
 8006492:	f7fa fbd2 	bl	8000c3a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800649e:	d014      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x55a>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d010      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x55a>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00c      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x55a>
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d008      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x55a>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b0a      	cmp	r3, #10
 80064be:	d004      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x55a>
 80064c0:	f241 511d 	movw	r1, #5405	; 0x151d
 80064c4:	4831      	ldr	r0, [pc, #196]	; (800658c <HAL_TIM_ConfigClockSource+0x61c>)
 80064c6:	f7fa fbb8 	bl	8000c3a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b0f      	cmp	r3, #15
 80064d0:	d904      	bls.n	80064dc <HAL_TIM_ConfigClockSource+0x56c>
 80064d2:	f241 511e 	movw	r1, #5406	; 0x151e
 80064d6:	482d      	ldr	r0, [pc, #180]	; (800658c <HAL_TIM_ConfigClockSource+0x61c>)
 80064d8:	f7fa fbaf 	bl	8000c3a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6859      	ldr	r1, [r3, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	461a      	mov	r2, r3
 80064ea:	f000 fbcd 	bl	8006c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2140      	movs	r1, #64	; 0x40
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fc26 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 80064fa:	e02f      	b.n	800655c <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <HAL_TIM_ConfigClockSource+0x608>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01d      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x5d2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650e:	d018      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x5d2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a19      	ldr	r2, [pc, #100]	; (800657c <HAL_TIM_ConfigClockSource+0x60c>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x5d2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_TIM_ConfigClockSource+0x610>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d00e      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x5d2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a16      	ldr	r2, [pc, #88]	; (8006584 <HAL_TIM_ConfigClockSource+0x614>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d009      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x5d2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a15      	ldr	r2, [pc, #84]	; (8006588 <HAL_TIM_ConfigClockSource+0x618>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0x5d2>
 8006538:	f241 512d 	movw	r1, #5421	; 0x152d
 800653c:	4813      	ldr	r0, [pc, #76]	; (800658c <HAL_TIM_ConfigClockSource+0x61c>)
 800653e:	f7fa fb7c 	bl	8000c3a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f000 fbfa 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 8006552:	e003      	b.n	800655c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e000      	b.n	800655c <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800655a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40010000 	.word	0x40010000
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40014000 	.word	0x40014000
 800658c:	0800a8c0 	.word	0x0800a8c0

08006590 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d107      	bne.n	80065e0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065de:	e02a      	b.n	8006636 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d107      	bne.n	80065fa <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2202      	movs	r2, #2
 80065ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f8:	e01d      	b.n	8006636 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d107      	bne.n	8006614 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2204      	movs	r2, #4
 8006608:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006612:	e010      	b.n	8006636 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d107      	bne.n	800662e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2208      	movs	r2, #8
 8006622:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800662c:	e003      	b.n	8006636 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff ffb4 	bl	80065a4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	771a      	strb	r2, [r3, #28]
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	429a      	cmp	r2, r3
 8006660:	d10b      	bne.n	800667a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2201      	movs	r2, #1
 8006666:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d136      	bne.n	80066de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006678:	e031      	b.n	80066de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d10b      	bne.n	800669c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2202      	movs	r2, #2
 8006688:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d125      	bne.n	80066de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800669a:	e020      	b.n	80066de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d10b      	bne.n	80066be <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2204      	movs	r2, #4
 80066aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d114      	bne.n	80066de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066bc:	e00f      	b.n	80066de <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d10a      	bne.n	80066de <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2208      	movs	r2, #8
 80066cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7fa f8aa 	bl	8000838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	771a      	strb	r2, [r3, #28]
}
 80066ea:	bf00      	nop
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d103      	bne.n	8006712 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	771a      	strb	r2, [r3, #28]
 8006710:	e019      	b.n	8006746 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d103      	bne.n	8006724 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2202      	movs	r2, #2
 8006720:	771a      	strb	r2, [r3, #28]
 8006722:	e010      	b.n	8006746 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	429a      	cmp	r2, r3
 800672c:	d103      	bne.n	8006736 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2204      	movs	r2, #4
 8006732:	771a      	strb	r2, [r3, #28]
 8006734:	e007      	b.n	8006746 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	d102      	bne.n	8006746 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2208      	movs	r2, #8
 8006744:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff ff22 	bl	8006590 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	771a      	strb	r2, [r3, #28]
}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a34      	ldr	r2, [pc, #208]	; (8006840 <TIM_Base_SetConfig+0xe4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00f      	beq.n	8006794 <TIM_Base_SetConfig+0x38>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677a:	d00b      	beq.n	8006794 <TIM_Base_SetConfig+0x38>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a31      	ldr	r2, [pc, #196]	; (8006844 <TIM_Base_SetConfig+0xe8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d007      	beq.n	8006794 <TIM_Base_SetConfig+0x38>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a30      	ldr	r2, [pc, #192]	; (8006848 <TIM_Base_SetConfig+0xec>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_Base_SetConfig+0x38>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a2f      	ldr	r2, [pc, #188]	; (800684c <TIM_Base_SetConfig+0xf0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d108      	bne.n	80067a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a25      	ldr	r2, [pc, #148]	; (8006840 <TIM_Base_SetConfig+0xe4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01b      	beq.n	80067e6 <TIM_Base_SetConfig+0x8a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b4:	d017      	beq.n	80067e6 <TIM_Base_SetConfig+0x8a>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a22      	ldr	r2, [pc, #136]	; (8006844 <TIM_Base_SetConfig+0xe8>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <TIM_Base_SetConfig+0x8a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a21      	ldr	r2, [pc, #132]	; (8006848 <TIM_Base_SetConfig+0xec>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00f      	beq.n	80067e6 <TIM_Base_SetConfig+0x8a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a20      	ldr	r2, [pc, #128]	; (800684c <TIM_Base_SetConfig+0xf0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00b      	beq.n	80067e6 <TIM_Base_SetConfig+0x8a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1f      	ldr	r2, [pc, #124]	; (8006850 <TIM_Base_SetConfig+0xf4>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d007      	beq.n	80067e6 <TIM_Base_SetConfig+0x8a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a1e      	ldr	r2, [pc, #120]	; (8006854 <TIM_Base_SetConfig+0xf8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d003      	beq.n	80067e6 <TIM_Base_SetConfig+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <TIM_Base_SetConfig+0xfc>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d108      	bne.n	80067f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a08      	ldr	r2, [pc, #32]	; (8006840 <TIM_Base_SetConfig+0xe4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d103      	bne.n	800682c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	615a      	str	r2, [r3, #20]
}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40010000 	.word	0x40010000
 8006844:	40000400 	.word	0x40000400
 8006848:	40000800 	.word	0x40000800
 800684c:	40000c00 	.word	0x40000c00
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800

0800685c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f023 0201 	bic.w	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0303 	bic.w	r3, r3, #3
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 0302 	bic.w	r3, r3, #2
 80068a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a30      	ldr	r2, [pc, #192]	; (8006974 <TIM_OC1_SetConfig+0x118>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d119      	bne.n	80068ec <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <TIM_OC1_SetConfig+0x76>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d004      	beq.n	80068d2 <TIM_OC1_SetConfig+0x76>
 80068c8:	f641 21cb 	movw	r1, #6859	; 0x1acb
 80068cc:	482a      	ldr	r0, [pc, #168]	; (8006978 <TIM_OC1_SetConfig+0x11c>)
 80068ce:	f7fa f9b4 	bl	8000c3a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f023 0308 	bic.w	r3, r3, #8
 80068d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f023 0304 	bic.w	r3, r3, #4
 80068ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a21      	ldr	r2, [pc, #132]	; (8006974 <TIM_OC1_SetConfig+0x118>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d12d      	bne.n	8006950 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fc:	d008      	beq.n	8006910 <TIM_OC1_SetConfig+0xb4>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <TIM_OC1_SetConfig+0xb4>
 8006906:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800690a:	481b      	ldr	r0, [pc, #108]	; (8006978 <TIM_OC1_SetConfig+0x11c>)
 800690c:	f7fa f995 	bl	8000c3a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006918:	d008      	beq.n	800692c <TIM_OC1_SetConfig+0xd0>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <TIM_OC1_SetConfig+0xd0>
 8006922:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 8006926:	4814      	ldr	r0, [pc, #80]	; (8006978 <TIM_OC1_SetConfig+0x11c>)
 8006928:	f7fa f987 	bl	8000c3a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800693a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	4313      	orrs	r3, r2
 800694e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40010000 	.word	0x40010000
 8006978:	0800a8c0 	.word	0x0800a8c0

0800697c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f023 0210 	bic.w	r2, r3, #16
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	021b      	lsls	r3, r3, #8
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4313      	orrs	r3, r2
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0320 	bic.w	r3, r3, #32
 80069c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a31      	ldr	r2, [pc, #196]	; (8006a9c <TIM_OC2_SetConfig+0x120>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d11a      	bne.n	8006a12 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <TIM_OC2_SetConfig+0x7a>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d004      	beq.n	80069f6 <TIM_OC2_SetConfig+0x7a>
 80069ec:	f641 3116 	movw	r1, #6934	; 0x1b16
 80069f0:	482b      	ldr	r0, [pc, #172]	; (8006aa0 <TIM_OC2_SetConfig+0x124>)
 80069f2:	f7fa f922 	bl	8000c3a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a10:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <TIM_OC2_SetConfig+0x120>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d12f      	bne.n	8006a7a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a22:	d008      	beq.n	8006a36 <TIM_OC2_SetConfig+0xba>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d004      	beq.n	8006a36 <TIM_OC2_SetConfig+0xba>
 8006a2c:	f641 3124 	movw	r1, #6948	; 0x1b24
 8006a30:	481b      	ldr	r0, [pc, #108]	; (8006aa0 <TIM_OC2_SetConfig+0x124>)
 8006a32:	f7fa f902 	bl	8000c3a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3e:	d008      	beq.n	8006a52 <TIM_OC2_SetConfig+0xd6>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <TIM_OC2_SetConfig+0xd6>
 8006a48:	f641 3125 	movw	r1, #6949	; 0x1b25
 8006a4c:	4814      	ldr	r0, [pc, #80]	; (8006aa0 <TIM_OC2_SetConfig+0x124>)
 8006a4e:	f7fa f8f4 	bl	8000c3a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	621a      	str	r2, [r3, #32]
}
 8006a94:	bf00      	nop
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	0800a8c0 	.word	0x0800a8c0

08006aa4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0303 	bic.w	r3, r3, #3
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a31      	ldr	r2, [pc, #196]	; (8006bc4 <TIM_OC3_SetConfig+0x120>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d11a      	bne.n	8006b38 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <TIM_OC3_SetConfig+0x78>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d004      	beq.n	8006b1c <TIM_OC3_SetConfig+0x78>
 8006b12:	f641 3161 	movw	r1, #7009	; 0x1b61
 8006b16:	482c      	ldr	r0, [pc, #176]	; (8006bc8 <TIM_OC3_SetConfig+0x124>)
 8006b18:	f7fa f88f 	bl	8000c3a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a22      	ldr	r2, [pc, #136]	; (8006bc4 <TIM_OC3_SetConfig+0x120>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d12f      	bne.n	8006ba0 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b48:	d008      	beq.n	8006b5c <TIM_OC3_SetConfig+0xb8>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <TIM_OC3_SetConfig+0xb8>
 8006b52:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8006b56:	481c      	ldr	r0, [pc, #112]	; (8006bc8 <TIM_OC3_SetConfig+0x124>)
 8006b58:	f7fa f86f 	bl	8000c3a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	d008      	beq.n	8006b78 <TIM_OC3_SetConfig+0xd4>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <TIM_OC3_SetConfig+0xd4>
 8006b6e:	f641 316f 	movw	r1, #7023	; 0x1b6f
 8006b72:	4815      	ldr	r0, [pc, #84]	; (8006bc8 <TIM_OC3_SetConfig+0x124>)
 8006b74:	f7fa f861 	bl	8000c3a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	0800a8c0 	.word	0x0800a8c0

08006bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	031b      	lsls	r3, r3, #12
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <TIM_OC4_SetConfig+0xb4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d117      	bne.n	8006c5c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c34:	d008      	beq.n	8006c48 <TIM_OC4_SetConfig+0x7c>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <TIM_OC4_SetConfig+0x7c>
 8006c3e:	f641 31ad 	movw	r1, #7085	; 0x1bad
 8006c42:	4810      	ldr	r0, [pc, #64]	; (8006c84 <TIM_OC4_SetConfig+0xb8>)
 8006c44:	f7f9 fff9 	bl	8000c3a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	019b      	lsls	r3, r3, #6
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	621a      	str	r2, [r3, #32]
}
 8006c76:	bf00      	nop
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40010000 	.word	0x40010000
 8006c84:	0800a8c0 	.word	0x0800a8c0

08006c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 030a 	bic.w	r3, r3, #10
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0210 	bic.w	r2, r3, #16
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f043 0307 	orr.w	r3, r3, #7
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4a2a      	ldr	r2, [pc, #168]	; (8006e74 <TIM_CCxChannelCmd+0xb8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d020      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd6:	d01c      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4a27      	ldr	r2, [pc, #156]	; (8006e78 <TIM_CCxChannelCmd+0xbc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d018      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <TIM_CCxChannelCmd+0xc0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d014      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4a25      	ldr	r2, [pc, #148]	; (8006e80 <TIM_CCxChannelCmd+0xc4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d010      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4a24      	ldr	r2, [pc, #144]	; (8006e84 <TIM_CCxChannelCmd+0xc8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00c      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4a23      	ldr	r2, [pc, #140]	; (8006e88 <TIM_CCxChannelCmd+0xcc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d008      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a22      	ldr	r2, [pc, #136]	; (8006e8c <TIM_CCxChannelCmd+0xd0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <TIM_CCxChannelCmd+0x56>
 8006e08:	f641 5198 	movw	r1, #7576	; 0x1d98
 8006e0c:	4820      	ldr	r0, [pc, #128]	; (8006e90 <TIM_CCxChannelCmd+0xd4>)
 8006e0e:	f7f9 ff14 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d010      	beq.n	8006e3a <TIM_CCxChannelCmd+0x7e>
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d00d      	beq.n	8006e3a <TIM_CCxChannelCmd+0x7e>
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d00a      	beq.n	8006e3a <TIM_CCxChannelCmd+0x7e>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b0c      	cmp	r3, #12
 8006e28:	d007      	beq.n	8006e3a <TIM_CCxChannelCmd+0x7e>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b3c      	cmp	r3, #60	; 0x3c
 8006e2e:	d004      	beq.n	8006e3a <TIM_CCxChannelCmd+0x7e>
 8006e30:	f641 5199 	movw	r1, #7577	; 0x1d99
 8006e34:	4816      	ldr	r0, [pc, #88]	; (8006e90 <TIM_CCxChannelCmd+0xd4>)
 8006e36:	f7f9 ff00 	bl	8000c3a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	2201      	movs	r2, #1
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1a      	ldr	r2, [r3, #32]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	401a      	ands	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a1a      	ldr	r2, [r3, #32]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	fa01 f303 	lsl.w	r3, r1, r3
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	621a      	str	r2, [r3, #32]
}
 8006e6c:	bf00      	nop
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40014400 	.word	0x40014400
 8006e8c:	40014800 	.word	0x40014800
 8006e90:	0800a8c0 	.word	0x0800a8c0

08006e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a55      	ldr	r2, [pc, #340]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d018      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb0:	d013      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a51      	ldr	r2, [pc, #324]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00e      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a4f      	ldr	r2, [pc, #316]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d009      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a4e      	ldr	r2, [pc, #312]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d004      	beq.n	8006eda <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006ed0:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8006ed4:	484c      	ldr	r0, [pc, #304]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006ed6:	f7f9 feb0 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d020      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b10      	cmp	r3, #16
 8006ee8:	d01c      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d018      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b30      	cmp	r3, #48	; 0x30
 8006ef8:	d014      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d010      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b50      	cmp	r3, #80	; 0x50
 8006f08:	d00c      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b60      	cmp	r3, #96	; 0x60
 8006f10:	d008      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b70      	cmp	r3, #112	; 0x70
 8006f18:	d004      	beq.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006f1a:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8006f1e:	483a      	ldr	r0, [pc, #232]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006f20:	f7f9 fe8b 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d008      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8006f34:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8006f38:	4833      	ldr	r0, [pc, #204]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006f3a:	f7f9 fe7e 	bl	8000c3a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e050      	b.n	8006fee <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d018      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f98:	d013      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00e      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a15      	ldr	r2, [pc, #84]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d009      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a14      	ldr	r2, [pc, #80]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d004      	beq.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a13      	ldr	r2, [pc, #76]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d10c      	bne.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	40000400 	.word	0x40000400
 8007000:	40000800 	.word	0x40000800
 8007004:	40000c00 	.word	0x40000c00
 8007008:	0800a8f8 	.word	0x0800a8f8
 800700c:	40014000 	.word	0x40014000

08007010 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a5c      	ldr	r2, [pc, #368]	; (8007194 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 8007028:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800702c:	485a      	ldr	r0, [pc, #360]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800702e:	f7f9 fe04 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800703a:	d008      	beq.n	800704e <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8007044:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8007048:	4853      	ldr	r0, [pc, #332]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800704a:	f7f9 fdf6 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007056:	d008      	beq.n	800706a <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8007060:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8007064:	484c      	ldr	r0, [pc, #304]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007066:	f7f9 fde8 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d013      	beq.n	800709a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800707a:	d00e      	beq.n	800709a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007084:	d009      	beq.n	800709a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708e:	d004      	beq.n	800709a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8007090:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8007094:	4840      	ldr	r0, [pc, #256]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007096:	f7f9 fdd0 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2bff      	cmp	r3, #255	; 0xff
 80070a0:	d904      	bls.n	80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 80070a2:	f240 71f2 	movw	r1, #2034	; 0x7f2
 80070a6:	483c      	ldr	r0, [pc, #240]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80070a8:	f7f9 fdc7 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
 80070b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b4:	d008      	beq.n	80070c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80070be:	f240 71f3 	movw	r1, #2035	; 0x7f3
 80070c2:	4835      	ldr	r0, [pc, #212]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80070c4:	f7f9 fdb9 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d8:	d004      	beq.n	80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 80070da:	f240 71f4 	movw	r1, #2036	; 0x7f4
 80070de:	482e      	ldr	r0, [pc, #184]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80070e0:	f7f9 fdab 	bl	8000c3a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070ec:	d008      	beq.n	8007100 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 80070f6:	f240 71f5 	movw	r1, #2037	; 0x7f5
 80070fa:	4827      	ldr	r0, [pc, #156]	; (8007198 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 80070fc:	f7f9 fd9d 	bl	8000c3a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800710a:	2302      	movs	r3, #2
 800710c:	e03d      	b.n	800718a <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40010000 	.word	0x40010000
 8007198:	0800a8f8 	.word	0x0800a8f8

0800719c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800719c:	b084      	sub	sp, #16
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	f107 001c 	add.w	r0, r7, #28
 80071aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d122      	bne.n	80071fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80071c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d105      	bne.n	80071ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f9a0 	bl	8007534 <USB_CoreReset>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	e01a      	b.n	8007230 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f994 	bl	8007534 <USB_CoreReset>
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
 8007222:	e005      	b.n	8007230 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10b      	bne.n	800724e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f043 0206 	orr.w	r2, r3, #6
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f043 0220 	orr.w	r2, r3, #32
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800725a:	b004      	add	sp, #16
 800725c:	4770      	bx	lr

0800725e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f043 0201 	orr.w	r2, r3, #1
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f023 0201 	bic.w	r2, r3, #1
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d115      	bne.n	80072f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072d0:	2001      	movs	r0, #1
 80072d2:	f7f9 ffb3 	bl	800123c <HAL_Delay>
      ms++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f91a 	bl	8007516 <USB_GetMode>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d01e      	beq.n	8007326 <USB_SetCurrentMode+0x84>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b31      	cmp	r3, #49	; 0x31
 80072ec:	d9f0      	bls.n	80072d0 <USB_SetCurrentMode+0x2e>
 80072ee:	e01a      	b.n	8007326 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d115      	bne.n	8007322 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007302:	2001      	movs	r0, #1
 8007304:	f7f9 ff9a 	bl	800123c <HAL_Delay>
      ms++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3301      	adds	r3, #1
 800730c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f901 	bl	8007516 <USB_GetMode>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <USB_SetCurrentMode+0x84>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b31      	cmp	r3, #49	; 0x31
 800731e:	d9f0      	bls.n	8007302 <USB_SetCurrentMode+0x60>
 8007320:	e001      	b.n	8007326 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e005      	b.n	8007332 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2b32      	cmp	r3, #50	; 0x32
 800732a:	d101      	bne.n	8007330 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	019b      	lsls	r3, r3, #6
 800734e:	f043 0220 	orr.w	r2, r3, #32
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	4a08      	ldr	r2, [pc, #32]	; (8007380 <USB_FlushTxFifo+0x44>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d901      	bls.n	8007366 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e006      	b.n	8007374 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b20      	cmp	r3, #32
 8007370:	d0f1      	beq.n	8007356 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	00030d40 	.word	0x00030d40

08007384 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2210      	movs	r2, #16
 8007394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	4a08      	ldr	r2, [pc, #32]	; (80073c0 <USB_FlushRxFifo+0x3c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d901      	bls.n	80073a6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e006      	b.n	80073b4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d0f1      	beq.n	8007396 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3714      	adds	r7, #20
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	00030d40 	.word	0x00030d40

080073c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	4611      	mov	r1, r2
 80073d0:	461a      	mov	r2, r3
 80073d2:	460b      	mov	r3, r1
 80073d4:	71fb      	strb	r3, [r7, #7]
 80073d6:	4613      	mov	r3, r2
 80073d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d123      	bne.n	8007432 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073ea:	88bb      	ldrh	r3, [r7, #4]
 80073ec:	3303      	adds	r3, #3
 80073ee:	089b      	lsrs	r3, r3, #2
 80073f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073f2:	2300      	movs	r3, #0
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e018      	b.n	800742a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073f8:	79fb      	ldrb	r3, [r7, #7]
 80073fa:	031a      	lsls	r2, r3, #12
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007404:	461a      	mov	r2, r3
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	3301      	adds	r3, #1
 8007410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	3301      	adds	r3, #1
 8007416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	3301      	adds	r3, #1
 8007422:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	3301      	adds	r3, #1
 8007428:	61bb      	str	r3, [r7, #24]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	429a      	cmp	r2, r3
 8007430:	d3e2      	bcc.n	80073f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3724      	adds	r7, #36	; 0x24
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007440:	b480      	push	{r7}
 8007442:	b08b      	sub	sp, #44	; 0x2c
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	4613      	mov	r3, r2
 800744c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007456:	88fb      	ldrh	r3, [r7, #6]
 8007458:	089b      	lsrs	r3, r3, #2
 800745a:	b29b      	uxth	r3, r3
 800745c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800745e:	88fb      	ldrh	r3, [r7, #6]
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007466:	2300      	movs	r3, #0
 8007468:	623b      	str	r3, [r7, #32]
 800746a:	e014      	b.n	8007496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	601a      	str	r2, [r3, #0]
    pDest++;
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	3301      	adds	r3, #1
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	3301      	adds	r3, #1
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	3301      	adds	r3, #1
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	3301      	adds	r3, #1
 800748e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	3301      	adds	r3, #1
 8007494:	623b      	str	r3, [r7, #32]
 8007496:	6a3a      	ldr	r2, [r7, #32]
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	429a      	cmp	r2, r3
 800749c:	d3e6      	bcc.n	800746c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800749e:	8bfb      	ldrh	r3, [r7, #30]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d01e      	beq.n	80074e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ae:	461a      	mov	r2, r3
 80074b0:	f107 0310 	add.w	r3, r7, #16
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	701a      	strb	r2, [r3, #0]
      i++;
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	3301      	adds	r3, #1
 80074ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d2:	3301      	adds	r3, #1
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074d6:	8bfb      	ldrh	r3, [r7, #30]
 80074d8:	3b01      	subs	r3, #1
 80074da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074dc:	8bfb      	ldrh	r3, [r7, #30]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1ea      	bne.n	80074b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	372c      	adds	r7, #44	; 0x2c
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007508:	68fb      	ldr	r3, [r7, #12]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f003 0301 	and.w	r3, r3, #1
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
 8007546:	4a13      	ldr	r2, [pc, #76]	; (8007594 <USB_CoreReset+0x60>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d901      	bls.n	8007550 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e01a      	b.n	8007586 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	daf3      	bge.n	8007540 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f043 0201 	orr.w	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	4a09      	ldr	r2, [pc, #36]	; (8007594 <USB_CoreReset+0x60>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d901      	bls.n	8007578 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e006      	b.n	8007586 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d0f1      	beq.n	8007568 <USB_CoreReset+0x34>

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	00030d40 	.word	0x00030d40

08007598 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007598:	b084      	sub	sp, #16
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	f107 001c 	add.w	r0, r7, #28
 80075a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075b4:	461a      	mov	r2, r3
 80075b6:	2300      	movs	r3, #0
 80075b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10a      	bne.n	8007606 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075fe:	f043 0304 	orr.w	r3, r3, #4
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e014      	b.n	8007630 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007614:	f023 0304 	bic.w	r3, r3, #4
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	e009      	b.n	8007630 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800762a:	f023 0304 	bic.w	r3, r3, #4
 800762e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007630:	2110      	movs	r1, #16
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fe82 	bl	800733c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f7ff fea3 	bl	8007384 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	e015      	b.n	8007670 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4413      	add	r3, r2
 800764c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007650:	461a      	mov	r2, r3
 8007652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007656:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	4413      	add	r3, r2
 8007660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007664:	461a      	mov	r2, r3
 8007666:	2300      	movs	r3, #0
 8007668:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	429a      	cmp	r2, r3
 8007676:	d3e5      	bcc.n	8007644 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007684:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007698:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a13      	ldr	r2, [pc, #76]	; (80076ec <USB_HostInit+0x154>)
 800769e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a13      	ldr	r2, [pc, #76]	; (80076f0 <USB_HostInit+0x158>)
 80076a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80076a8:	e009      	b.n	80076be <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2280      	movs	r2, #128	; 0x80
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <USB_HostInit+0x15c>)
 80076b4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <USB_HostInit+0x160>)
 80076ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d105      	bne.n	80076d0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f043 0210 	orr.w	r2, r3, #16
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699a      	ldr	r2, [r3, #24]
 80076d4:	4b09      	ldr	r3, [pc, #36]	; (80076fc <USB_HostInit+0x164>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e8:	b004      	add	sp, #16
 80076ea:	4770      	bx	lr
 80076ec:	01000200 	.word	0x01000200
 80076f0:	00e00300 	.word	0x00e00300
 80076f4:	00600080 	.word	0x00600080
 80076f8:	004000e0 	.word	0x004000e0
 80076fc:	a3200008 	.word	0xa3200008

08007700 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	460b      	mov	r3, r1
 800770a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800771e:	f023 0303 	bic.w	r3, r3, #3
 8007722:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	68f9      	ldr	r1, [r7, #12]
 8007734:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007738:	4313      	orrs	r3, r2
 800773a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d107      	bne.n	8007752 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007748:	461a      	mov	r2, r3
 800774a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800774e:	6053      	str	r3, [r2, #4]
 8007750:	e009      	b.n	8007766 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007752:	78fb      	ldrb	r3, [r7, #3]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d106      	bne.n	8007766 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775e:	461a      	mov	r2, r3
 8007760:	f241 7370 	movw	r3, #6000	; 0x1770
 8007764:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007794:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800779e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077a4:	2064      	movs	r0, #100	; 0x64
 80077a6:	f7f9 fd49 	bl	800123c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077b8:	200a      	movs	r0, #10
 80077ba:	f7f9 fd3f 	bl	800123c <HAL_Delay>

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <USB_DriveVbus+0x44>
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d106      	bne.n	800780c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800780a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007816:	d109      	bne.n	800782c <USB_DriveVbus+0x64>
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800782a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	0c5b      	lsrs	r3, r3, #17
 8007858:	f003 0303 	and.w	r3, r3, #3
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	b29b      	uxth	r3, r3
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b088      	sub	sp, #32
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	4608      	mov	r0, r1
 8007896:	4611      	mov	r1, r2
 8007898:	461a      	mov	r2, r3
 800789a:	4603      	mov	r3, r0
 800789c:	70fb      	strb	r3, [r7, #3]
 800789e:	460b      	mov	r3, r1
 80078a0:	70bb      	strb	r3, [r7, #2]
 80078a2:	4613      	mov	r3, r2
 80078a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80078a6:	2300      	movs	r3, #0
 80078a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ba:	461a      	mov	r2, r3
 80078bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d87e      	bhi.n	80079c8 <USB_HC_Init+0x13c>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USB_HC_Init+0x44>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078e1 	.word	0x080078e1
 80078d4:	0800798b 	.word	0x0800798b
 80078d8:	080078e1 	.word	0x080078e1
 80078dc:	0800794d 	.word	0x0800794d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ec:	461a      	mov	r2, r3
 80078ee:	f240 439d 	movw	r3, #1181	; 0x49d
 80078f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80078f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	da10      	bge.n	800791e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	440a      	add	r2, r1
 8007912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800791c:	e057      	b.n	80079ce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007926:	2b00      	cmp	r3, #0
 8007928:	d051      	beq.n	80079ce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	4413      	add	r3, r2
 8007932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	440a      	add	r2, r1
 8007940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007944:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007948:	60d3      	str	r3, [r2, #12]
      break;
 800794a:	e040      	b.n	80079ce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	4413      	add	r3, r2
 8007954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007958:	461a      	mov	r2, r3
 800795a:	f240 639d 	movw	r3, #1693	; 0x69d
 800795e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007960:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da34      	bge.n	80079d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	440a      	add	r2, r1
 800797e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007986:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007988:	e023      	b.n	80079d2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	4413      	add	r3, r2
 8007992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007996:	461a      	mov	r2, r3
 8007998:	f240 2325 	movw	r3, #549	; 0x225
 800799c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800799e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da17      	bge.n	80079d6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079c0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079c6:	e006      	b.n	80079d6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	77fb      	strb	r3, [r7, #31]
      break;
 80079cc:	e004      	b.n	80079d8 <USB_HC_Init+0x14c>
      break;
 80079ce:	bf00      	nop
 80079d0:	e002      	b.n	80079d8 <USB_HC_Init+0x14c>
      break;
 80079d2:	bf00      	nop
 80079d4:	e000      	b.n	80079d8 <USB_HC_Init+0x14c>
      break;
 80079d6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	2101      	movs	r1, #1
 80079e8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ec:	6939      	ldr	r1, [r7, #16]
 80079ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079f2:	4313      	orrs	r3, r2
 80079f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da03      	bge.n	8007a12 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a0e:	61bb      	str	r3, [r7, #24]
 8007a10:	e001      	b.n	8007a16 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7ff ff0f 	bl	800783a <USB_GetHostSpeed>
 8007a1c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007a1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d106      	bne.n	8007a34 <USB_HC_Init+0x1a8>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d003      	beq.n	8007a34 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e001      	b.n	8007a38 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a38:	787b      	ldrb	r3, [r7, #1]
 8007a3a:	059b      	lsls	r3, r3, #22
 8007a3c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a40:	78bb      	ldrb	r3, [r7, #2]
 8007a42:	02db      	lsls	r3, r3, #11
 8007a44:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a48:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a4e:	049b      	lsls	r3, r3, #18
 8007a50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	0159      	lsls	r1, r3, #5
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	440b      	add	r3, r1
 8007a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a74:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007a76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d10f      	bne.n	8007a9e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	0151      	lsls	r1, r2, #5
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	440a      	add	r2, r1
 8007a94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a9c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08c      	sub	sp, #48	; 0x30
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	785b      	ldrb	r3, [r3, #1]
 8007abe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ac4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d02d      	beq.n	8007b2e <USB_HC_StartXfer+0x86>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	791b      	ldrb	r3, [r3, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d129      	bne.n	8007b2e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007ada:	79fb      	ldrb	r3, [r7, #7]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d117      	bne.n	8007b10 <USB_HC_StartXfer+0x68>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	79db      	ldrb	r3, [r3, #7]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <USB_HC_StartXfer+0x48>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	79db      	ldrb	r3, [r3, #7]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d10f      	bne.n	8007b10 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	6a3a      	ldr	r2, [r7, #32]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <USB_HC_StartXfer+0x86>
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	795b      	ldrb	r3, [r3, #5]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d107      	bne.n	8007b2e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	785b      	ldrb	r3, [r3, #1]
 8007b22:	4619      	mov	r1, r3
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 fa2f 	bl	8007f88 <USB_DoPing>
      return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	e0f8      	b.n	8007d20 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d018      	beq.n	8007b68 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	8912      	ldrh	r2, [r2, #8]
 8007b3e:	4413      	add	r3, r2
 8007b40:	3b01      	subs	r3, #1
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	8912      	ldrh	r2, [r2, #8]
 8007b46:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b4a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b4e:	8b7b      	ldrh	r3, [r7, #26]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d90b      	bls.n	8007b6c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b54:	8b7b      	ldrh	r3, [r7, #26]
 8007b56:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	8912      	ldrh	r2, [r2, #8]
 8007b5e:	fb02 f203 	mul.w	r2, r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	611a      	str	r2, [r3, #16]
 8007b66:	e001      	b.n	8007b6c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	78db      	ldrb	r3, [r3, #3]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	8912      	ldrh	r2, [r2, #8]
 8007b7a:	fb02 f203 	mul.w	r2, r2, r3
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	611a      	str	r2, [r3, #16]
 8007b82:	e003      	b.n	8007b8c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	695a      	ldr	r2, [r3, #20]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b96:	04d9      	lsls	r1, r3, #19
 8007b98:	4b63      	ldr	r3, [pc, #396]	; (8007d28 <USB_HC_StartXfer+0x280>)
 8007b9a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b9c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	7a9b      	ldrb	r3, [r3, #10]
 8007ba2:	075b      	lsls	r3, r3, #29
 8007ba4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ba8:	69f9      	ldr	r1, [r7, #28]
 8007baa:	0148      	lsls	r0, r1, #5
 8007bac:	6a39      	ldr	r1, [r7, #32]
 8007bae:	4401      	add	r1, r0
 8007bb0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bb4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bb6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d009      	beq.n	8007bd2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	68d9      	ldr	r1, [r3, #12]
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bce:	460a      	mov	r2, r1
 8007bd0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bf0c      	ite	eq
 8007be2:	2301      	moveq	r3, #1
 8007be4:	2300      	movne	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	0151      	lsls	r1, r2, #5
 8007bfc:	6a3a      	ldr	r2, [r7, #32]
 8007bfe:	440a      	add	r2, r1
 8007c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	7e7b      	ldrb	r3, [r7, #25]
 8007c1a:	075b      	lsls	r3, r3, #29
 8007c1c:	69f9      	ldr	r1, [r7, #28]
 8007c1e:	0148      	lsls	r0, r1, #5
 8007c20:	6a39      	ldr	r1, [r7, #32]
 8007c22:	4401      	add	r1, r0
 8007c24:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c42:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	78db      	ldrb	r3, [r3, #3]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d004      	beq.n	8007c56 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	e003      	b.n	8007c5e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c5c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c64:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c72:	461a      	mov	r2, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e04e      	b.n	8007d20 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	78db      	ldrb	r3, [r3, #3]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d149      	bne.n	8007d1e <USB_HC_StartXfer+0x276>
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d045      	beq.n	8007d1e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	79db      	ldrb	r3, [r3, #7]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d830      	bhi.n	8007cfc <USB_HC_StartXfer+0x254>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <USB_HC_StartXfer+0x1f8>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007cb1 	.word	0x08007cb1
 8007cac:	08007cd5 	.word	0x08007cd5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	3303      	adds	r3, #3
 8007cb6:	089b      	lsrs	r3, r3, #2
 8007cb8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cba:	8afa      	ldrh	r2, [r7, #22]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d91c      	bls.n	8007d00 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f043 0220 	orr.w	r2, r3, #32
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cd2:	e015      	b.n	8007d00 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	3303      	adds	r3, #3
 8007cda:	089b      	lsrs	r3, r3, #2
 8007cdc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007cde:	8afa      	ldrh	r2, [r7, #22]
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d90a      	bls.n	8007d04 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cfa:	e003      	b.n	8007d04 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007cfc:	bf00      	nop
 8007cfe:	e002      	b.n	8007d06 <USB_HC_StartXfer+0x25e>
        break;
 8007d00:	bf00      	nop
 8007d02:	e000      	b.n	8007d06 <USB_HC_StartXfer+0x25e>
        break;
 8007d04:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	68d9      	ldr	r1, [r3, #12]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	785a      	ldrb	r2, [r3, #1]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2000      	movs	r0, #0
 8007d16:	9000      	str	r0, [sp, #0]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fb53 	bl	80073c4 <USB_WritePacket>
  }

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3728      	adds	r7, #40	; 0x28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	1ff80000 	.word	0x1ff80000

08007d2c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	b29b      	uxth	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b089      	sub	sp, #36	; 0x24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	0c9b      	lsrs	r3, r3, #18
 8007d76:	f003 0303 	and.w	r3, r3, #3
 8007d7a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	0fdb      	lsrs	r3, r3, #31
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d104      	bne.n	8007da8 <USB_HC_Halt+0x5a>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	e0e8      	b.n	8007f7a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <USB_HC_Halt+0x66>
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d173      	bne.n	8007e9c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dd2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 80cb 	bne.w	8007f78 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d143      	bne.n	8007e76 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e4c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	3301      	adds	r3, #1
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e5a:	d81d      	bhi.n	8007e98 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e72:	d0ec      	beq.n	8007e4e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e74:	e080      	b.n	8007f78 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e96:	e06f      	b.n	8007f78 <USB_HC_Halt+0x22a>
            break;
 8007e98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e9a:	e06d      	b.n	8007f78 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007eba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d143      	bne.n	8007f54 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	0151      	lsls	r1, r2, #5
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	440a      	add	r2, r1
 8007f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	015a      	lsls	r2, r3, #5
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	4413      	add	r3, r2
 8007f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	0151      	lsls	r1, r2, #5
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	440a      	add	r2, r1
 8007f22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f2a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	61fb      	str	r3, [r7, #28]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f38:	d81d      	bhi.n	8007f76 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f50:	d0ec      	beq.n	8007f2c <USB_HC_Halt+0x1de>
 8007f52:	e011      	b.n	8007f78 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	e000      	b.n	8007f78 <USB_HC_Halt+0x22a>
          break;
 8007f76:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3724      	adds	r7, #36	; 0x24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	04da      	lsls	r2, r3, #19
 8007fa4:	4b15      	ldr	r3, [pc, #84]	; (8007ffc <USB_DoPing+0x74>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fd0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fd8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	1ff80000 	.word	0x1ff80000

08008000 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff f935 	bl	8007280 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008016:	2110      	movs	r1, #16
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff f98f 	bl	800733c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff f9b0 	bl	8007384 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008024:	2300      	movs	r3, #0
 8008026:	613b      	str	r3, [r7, #16]
 8008028:	e01f      	b.n	800806a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008040:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008048:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008050:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805e:	461a      	mov	r2, r3
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3301      	adds	r3, #1
 8008068:	613b      	str	r3, [r7, #16]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b0f      	cmp	r3, #15
 800806e:	d9dc      	bls.n	800802a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008070:	2300      	movs	r3, #0
 8008072:	613b      	str	r3, [r7, #16]
 8008074:	e034      	b.n	80080e0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4413      	add	r3, r2
 800807e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800808c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008094:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800809c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080aa:	461a      	mov	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	3301      	adds	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080bc:	d80c      	bhi.n	80080d8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d4:	d0ec      	beq.n	80080b0 <USB_StopHost+0xb0>
 80080d6:	e000      	b.n	80080da <USB_StopHost+0xda>
        break;
 80080d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	3301      	adds	r3, #1
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b0f      	cmp	r3, #15
 80080e4:	d9c7      	bls.n	8008076 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ec:	461a      	mov	r2, r3
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff f8ae 	bl	800725e <USB_EnableGlobalInt>

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b089      	sub	sp, #36	; 0x24
 8008110:	af04      	add	r7, sp, #16
 8008112:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008114:	2301      	movs	r3, #1
 8008116:	2202      	movs	r2, #2
 8008118:	2102      	movs	r1, #2
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fc66 	bl	80089ec <USBH_FindInterface>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2bff      	cmp	r3, #255	; 0xff
 8008128:	d002      	beq.n	8008130 <USBH_CDC_InterfaceInit+0x24>
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d901      	bls.n	8008134 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008130:	2302      	movs	r3, #2
 8008132:	e13d      	b.n	80083b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc3b 	bl	80089b4 <USBH_SelectInterface>
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008142:	7bbb      	ldrb	r3, [r7, #14]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008148:	2302      	movs	r3, #2
 800814a:	e131      	b.n	80083b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008152:	2050      	movs	r0, #80	; 0x50
 8008154:	f002 fa00 	bl	800a558 <malloc>
 8008158:	4603      	mov	r3, r0
 800815a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800816c:	2302      	movs	r3, #2
 800816e:	e11f      	b.n	80083b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008170:	2250      	movs	r2, #80	; 0x50
 8008172:	2100      	movs	r1, #0
 8008174:	68b8      	ldr	r0, [r7, #8]
 8008176:	f002 f9ff 	bl	800a578 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	211a      	movs	r1, #26
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	4413      	add	r3, r2
 8008186:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b25b      	sxtb	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	da15      	bge.n	80081be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	211a      	movs	r1, #26
 8008198:	fb01 f303 	mul.w	r3, r1, r3
 800819c:	4413      	add	r3, r2
 800819e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	211a      	movs	r1, #26
 80081ae:	fb01 f303 	mul.w	r3, r1, r3
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80081b8:	881a      	ldrh	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	785b      	ldrb	r3, [r3, #1]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f001 fe32 	bl	8009e2e <USBH_AllocPipe>
 80081ca:	4603      	mov	r3, r0
 80081cc:	461a      	mov	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	7819      	ldrb	r1, [r3, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	7858      	ldrb	r0, [r3, #1]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	8952      	ldrh	r2, [r2, #10]
 80081ea:	9202      	str	r2, [sp, #8]
 80081ec:	2203      	movs	r2, #3
 80081ee:	9201      	str	r2, [sp, #4]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	4623      	mov	r3, r4
 80081f4:	4602      	mov	r2, r0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f001 fdea 	bl	8009dd0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2200      	movs	r2, #0
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f002 f8f9 	bl	800a3fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800820a:	2300      	movs	r3, #0
 800820c:	2200      	movs	r2, #0
 800820e:	210a      	movs	r1, #10
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fbeb 	bl	80089ec <USBH_FindInterface>
 8008216:	4603      	mov	r3, r0
 8008218:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	2bff      	cmp	r3, #255	; 0xff
 800821e:	d002      	beq.n	8008226 <USBH_CDC_InterfaceInit+0x11a>
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d901      	bls.n	800822a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008226:	2302      	movs	r3, #2
 8008228:	e0c2      	b.n	80083b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	211a      	movs	r1, #26
 8008230:	fb01 f303 	mul.w	r3, r1, r3
 8008234:	4413      	add	r3, r2
 8008236:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	b25b      	sxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	da16      	bge.n	8008270 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	211a      	movs	r1, #26
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	4413      	add	r3, r2
 800824e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008258:	7bfb      	ldrb	r3, [r7, #15]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	211a      	movs	r1, #26
 800825e:	fb01 f303 	mul.w	r3, r1, r3
 8008262:	4413      	add	r3, r2
 8008264:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008268:	881a      	ldrh	r2, [r3, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	835a      	strh	r2, [r3, #26]
 800826e:	e015      	b.n	800829c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	211a      	movs	r1, #26
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	4413      	add	r3, r2
 800827c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008280:	781a      	ldrb	r2, [r3, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	211a      	movs	r1, #26
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	4413      	add	r3, r2
 8008292:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008296:	881a      	ldrh	r2, [r3, #0]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	211a      	movs	r1, #26
 80082a2:	fb01 f303 	mul.w	r3, r1, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	b25b      	sxtb	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da16      	bge.n	80082e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	211a      	movs	r1, #26
 80082ba:	fb01 f303 	mul.w	r3, r1, r3
 80082be:	4413      	add	r3, r2
 80082c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082c4:	781a      	ldrb	r2, [r3, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	211a      	movs	r1, #26
 80082d0:	fb01 f303 	mul.w	r3, r1, r3
 80082d4:	4413      	add	r3, r2
 80082d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80082da:	881a      	ldrh	r2, [r3, #0]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	835a      	strh	r2, [r3, #26]
 80082e0:	e015      	b.n	800830e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	211a      	movs	r1, #26
 80082e8:	fb01 f303 	mul.w	r3, r1, r3
 80082ec:	4413      	add	r3, r2
 80082ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 80082f2:	781a      	ldrb	r2, [r3, #0]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	211a      	movs	r1, #26
 80082fe:	fb01 f303 	mul.w	r3, r1, r3
 8008302:	4413      	add	r3, r2
 8008304:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008308:	881a      	ldrh	r2, [r3, #0]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	7b9b      	ldrb	r3, [r3, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 fd8a 	bl	8009e2e <USBH_AllocPipe>
 800831a:	4603      	mov	r3, r0
 800831c:	461a      	mov	r2, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	7bdb      	ldrb	r3, [r3, #15]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 fd80 	bl	8009e2e <USBH_AllocPipe>
 800832e:	4603      	mov	r3, r0
 8008330:	461a      	mov	r2, r3
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	7b59      	ldrb	r1, [r3, #13]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	7b98      	ldrb	r0, [r3, #14]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	8b12      	ldrh	r2, [r2, #24]
 800834e:	9202      	str	r2, [sp, #8]
 8008350:	2202      	movs	r2, #2
 8008352:	9201      	str	r2, [sp, #4]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	4623      	mov	r3, r4
 8008358:	4602      	mov	r2, r0
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fd38 	bl	8009dd0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	7b19      	ldrb	r1, [r3, #12]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	7bd8      	ldrb	r0, [r3, #15]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	8b52      	ldrh	r2, [r2, #26]
 8008378:	9202      	str	r2, [sp, #8]
 800837a:	2202      	movs	r2, #2
 800837c:	9201      	str	r2, [sp, #4]
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	4623      	mov	r3, r4
 8008382:	4602      	mov	r2, r0
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 fd23 	bl	8009dd0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	7b5b      	ldrb	r3, [r3, #13]
 8008396:	2200      	movs	r2, #0
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f002 f82e 	bl	800a3fc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	7b1b      	ldrb	r3, [r3, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f002 f827 	bl	800a3fc <USBH_LL_SetToggle>

  return USBH_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd90      	pop	{r4, r7, pc}

080083b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00e      	beq.n	80083f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 fd18 	bl	8009e0e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 fd43 	bl	8009e70 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	7b1b      	ldrb	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00e      	beq.n	8008416 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	7b1b      	ldrb	r3, [r3, #12]
 80083fc:	4619      	mov	r1, r3
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 fd05 	bl	8009e0e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	7b1b      	ldrb	r3, [r3, #12]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 fd30 	bl	8009e70 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	7b5b      	ldrb	r3, [r3, #13]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00e      	beq.n	800843c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	7b5b      	ldrb	r3, [r3, #13]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 fcf2 	bl	8009e0e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	7b5b      	ldrb	r3, [r3, #13]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 fd1d 	bl	8009e70 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	4618      	mov	r0, r3
 8008452:	f002 f889 	bl	800a568 <free>
    phost->pActiveClass->pData = 0U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800845c:	2200      	movs	r2, #0
 800845e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3340      	adds	r3, #64	; 0x40
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f8b1 	bl	80085ea <GetLineCoding>
 8008488:	4603      	mov	r3, r0
 800848a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800848c:	7afb      	ldrb	r3, [r7, #11]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d105      	bne.n	800849e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008498:	2102      	movs	r1, #2
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800849e:	7afb      	ldrb	r3, [r7, #11]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	d877      	bhi.n	80085bc <USBH_CDC_Process+0x114>
 80084cc:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <USBH_CDC_Process+0x2c>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080084e9 	.word	0x080084e9
 80084d8:	080084ef 	.word	0x080084ef
 80084dc:	0800851f 	.word	0x0800851f
 80084e0:	08008593 	.word	0x08008593
 80084e4:	080085a1 	.word	0x080085a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]
      break;
 80084ec:	e06d      	b.n	80085ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f2:	4619      	mov	r1, r3
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f897 	bl	8008628 <SetLineCoding>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800850c:	e058      	b.n	80085c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d055      	beq.n	80085c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2204      	movs	r2, #4
 8008518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800851c:	e050      	b.n	80085c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	3340      	adds	r3, #64	; 0x40
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f860 	bl	80085ea <GetLineCoding>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d126      	bne.n	8008582 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008546:	791b      	ldrb	r3, [r3, #4]
 8008548:	429a      	cmp	r2, r3
 800854a:	d13b      	bne.n	80085c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008556:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008558:	429a      	cmp	r2, r3
 800855a:	d133      	bne.n	80085c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008566:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008568:	429a      	cmp	r2, r3
 800856a:	d12b      	bne.n	80085c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008574:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008576:	429a      	cmp	r2, r3
 8008578:	d124      	bne.n	80085c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f958 	bl	8008830 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008580:	e020      	b.n	80085c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d01d      	beq.n	80085c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2204      	movs	r2, #4
 800858c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008590:	e018      	b.n	80085c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f867 	bl	8008666 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8da 	bl	8008752 <CDC_ProcessReception>
      break;
 800859e:	e014      	b.n	80085ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80085a0:	2100      	movs	r1, #0
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 ffe3 	bl	800956e <USBH_ClrFeature>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80085ba:	e005      	b.n	80085c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80085bc:	bf00      	nop
 80085be:	e004      	b.n	80085ca <USBH_CDC_Process+0x122>
      break;
 80085c0:	bf00      	nop
 80085c2:	e002      	b.n	80085ca <USBH_CDC_Process+0x122>
      break;
 80085c4:	bf00      	nop
 80085c6:	e000      	b.n	80085ca <USBH_CDC_Process+0x122>
      break;
 80085c8:	bf00      	nop

  }

  return status;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	22a1      	movs	r2, #161	; 0xa1
 80085f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2221      	movs	r2, #33	; 0x21
 80085fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2207      	movs	r2, #7
 8008610:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2207      	movs	r2, #7
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f988 	bl	800992e <USBH_CtlReq>
 800861e:	4603      	mov	r3, r0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2221      	movs	r2, #33	; 0x21
 8008636:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2207      	movs	r2, #7
 800864e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2207      	movs	r2, #7
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 f969 	bl	800992e <USBH_CtlReq>
 800865c:	4603      	mov	r3, r0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3708      	adds	r7, #8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af02      	add	r7, sp, #8
 800866c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008678:	2300      	movs	r3, #0
 800867a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008682:	2b01      	cmp	r3, #1
 8008684:	d002      	beq.n	800868c <CDC_ProcessTransmission+0x26>
 8008686:	2b02      	cmp	r3, #2
 8008688:	d023      	beq.n	80086d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800868a:	e05e      	b.n	800874a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	8b12      	ldrh	r2, [r2, #24]
 8008694:	4293      	cmp	r3, r2
 8008696:	d90b      	bls.n	80086b0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	69d9      	ldr	r1, [r3, #28]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8b1a      	ldrh	r2, [r3, #24]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	7b5b      	ldrb	r3, [r3, #13]
 80086a4:	2001      	movs	r0, #1
 80086a6:	9000      	str	r0, [sp, #0]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 fb4e 	bl	8009d4a <USBH_BulkSendData>
 80086ae:	e00b      	b.n	80086c8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	7b5b      	ldrb	r3, [r3, #13]
 80086be:	2001      	movs	r0, #1
 80086c0:	9000      	str	r0, [sp, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 fb41 	bl	8009d4a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80086d0:	e03b      	b.n	800874a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	7b5b      	ldrb	r3, [r3, #13]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fe65 	bl	800a3a8 <USBH_LL_GetURBState>
 80086de:	4603      	mov	r3, r0
 80086e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80086e2:	7afb      	ldrb	r3, [r7, #11]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d128      	bne.n	800873a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	8b12      	ldrh	r2, [r2, #24]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d90e      	bls.n	8008712 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	8b12      	ldrh	r2, [r2, #24]
 80086fc:	1a9a      	subs	r2, r3, r2
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	8b12      	ldrh	r2, [r2, #24]
 800870a:	441a      	add	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	61da      	str	r2, [r3, #28]
 8008710:	e002      	b.n	8008718 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b00      	cmp	r3, #0
 800871e:	d004      	beq.n	800872a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008728:	e00e      	b.n	8008748 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f868 	bl	8008808 <USBH_CDC_TransmitCallback>
      break;
 8008738:	e006      	b.n	8008748 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	2b02      	cmp	r3, #2
 800873e:	d103      	bne.n	8008748 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008748:	bf00      	nop
  }
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008764:	2300      	movs	r3, #0
 8008766:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800876e:	2b03      	cmp	r3, #3
 8008770:	d002      	beq.n	8008778 <CDC_ProcessReception+0x26>
 8008772:	2b04      	cmp	r3, #4
 8008774:	d00e      	beq.n	8008794 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008776:	e043      	b.n	8008800 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	6a19      	ldr	r1, [r3, #32]
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	8b5a      	ldrh	r2, [r3, #26]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	7b1b      	ldrb	r3, [r3, #12]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fb05 	bl	8009d94 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2204      	movs	r2, #4
 800878e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008792:	e035      	b.n	8008800 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	7b1b      	ldrb	r3, [r3, #12]
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 fe04 	bl	800a3a8 <USBH_LL_GetURBState>
 80087a0:	4603      	mov	r3, r0
 80087a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80087a4:	7cfb      	ldrb	r3, [r7, #19]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d129      	bne.n	80087fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	7b1b      	ldrb	r3, [r3, #12]
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 fd67 	bl	800a284 <USBH_LL_GetLastXferSize>
 80087b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d016      	beq.n	80087f0 <CDC_ProcessReception+0x9e>
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	8b5b      	ldrh	r3, [r3, #26]
 80087c6:	461a      	mov	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d910      	bls.n	80087f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	1ad2      	subs	r2, r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6a1a      	ldr	r2, [r3, #32]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	441a      	add	r2, r3
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2203      	movs	r2, #3
 80087ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80087ee:	e006      	b.n	80087fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f80f 	bl	800881c <USBH_CDC_ReceiveCallback>
      break;
 80087fe:	bf00      	nop
  }
}
 8008800:	bf00      	nop
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	4613      	mov	r3, r2
 8008850:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008858:	2302      	movs	r3, #2
 800885a:	e029      	b.n	80088b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	79fa      	ldrb	r2, [r7, #7]
 8008860:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 f81f 	bl	80088b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f001 fc37 	bl	800a11c <USBH_LL_Init>

  return USBH_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	e009      	b.n	80088de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	33e0      	adds	r3, #224	; 0xe0
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	2200      	movs	r2, #0
 80088d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3301      	adds	r3, #1
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b0e      	cmp	r3, #14
 80088e2:	d9f2      	bls.n	80088ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088e4:	2300      	movs	r3, #0
 80088e6:	60fb      	str	r3, [r7, #12]
 80088e8:	e009      	b.n	80088fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088f4:	2200      	movs	r2, #0
 80088f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	3301      	adds	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008904:	d3f1      	bcc.n	80088ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2240      	movs	r2, #64	; 0x40
 800892a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d016      	beq.n	80089a2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10e      	bne.n	800899c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008984:	1c59      	adds	r1, r3, #1
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	33de      	adds	r3, #222	; 0xde
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	e004      	b.n	80089a6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800899c:	2302      	movs	r3, #2
 800899e:	73fb      	strb	r3, [r7, #15]
 80089a0:	e001      	b.n	80089a6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80089a2:	2302      	movs	r3, #2
 80089a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d204      	bcs.n	80089da <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	78fa      	ldrb	r2, [r7, #3]
 80089d4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80089d8:	e001      	b.n	80089de <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80089da:	2302      	movs	r3, #2
 80089dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089de:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	4608      	mov	r0, r1
 80089f6:	4611      	mov	r1, r2
 80089f8:	461a      	mov	r2, r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	70fb      	strb	r3, [r7, #3]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70bb      	strb	r3, [r7, #2]
 8008a02:	4613      	mov	r3, r2
 8008a04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008a14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a16:	e025      	b.n	8008a64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	221a      	movs	r2, #26
 8008a1c:	fb02 f303 	mul.w	r3, r2, r3
 8008a20:	3308      	adds	r3, #8
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	3302      	adds	r3, #2
 8008a28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	795b      	ldrb	r3, [r3, #5]
 8008a2e:	78fa      	ldrb	r2, [r7, #3]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d002      	beq.n	8008a3a <USBH_FindInterface+0x4e>
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	2bff      	cmp	r3, #255	; 0xff
 8008a38:	d111      	bne.n	8008a5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008a3e:	78ba      	ldrb	r2, [r7, #2]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d002      	beq.n	8008a4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a44:	78bb      	ldrb	r3, [r7, #2]
 8008a46:	2bff      	cmp	r3, #255	; 0xff
 8008a48:	d109      	bne.n	8008a5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008a4e:	787a      	ldrb	r2, [r7, #1]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d002      	beq.n	8008a5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008a54:	787b      	ldrb	r3, [r7, #1]
 8008a56:	2bff      	cmp	r3, #255	; 0xff
 8008a58:	d101      	bne.n	8008a5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	e006      	b.n	8008a6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	3301      	adds	r3, #1
 8008a62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d9d6      	bls.n	8008a18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008a6a:	23ff      	movs	r3, #255	; 0xff
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	371c      	adds	r7, #28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f001 fb87 	bl	800a194 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008a86:	2101      	movs	r1, #1
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 fca0 	bl	800a3ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af04      	add	r7, sp, #16
 8008a9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d102      	bne.n	8008aba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2203      	movs	r2, #3
 8008ab8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b0b      	cmp	r3, #11
 8008ac2:	f200 81b3 	bhi.w	8008e2c <USBH_Process+0x394>
 8008ac6:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <USBH_Process+0x34>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008afd 	.word	0x08008afd
 8008ad0:	08008b2f 	.word	0x08008b2f
 8008ad4:	08008b97 	.word	0x08008b97
 8008ad8:	08008dc7 	.word	0x08008dc7
 8008adc:	08008e2d 	.word	0x08008e2d
 8008ae0:	08008c3b 	.word	0x08008c3b
 8008ae4:	08008d6d 	.word	0x08008d6d
 8008ae8:	08008c71 	.word	0x08008c71
 8008aec:	08008c91 	.word	0x08008c91
 8008af0:	08008cb1 	.word	0x08008cb1
 8008af4:	08008cdf 	.word	0x08008cdf
 8008af8:	08008daf 	.word	0x08008daf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8193 	beq.w	8008e30 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008b10:	20c8      	movs	r0, #200	; 0xc8
 8008b12:	f001 fca3 	bl	800a45c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fb99 	bl	800a24e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b2c:	e180      	b.n	8008e30 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d107      	bne.n	8008b48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b46:	e182      	b.n	8008e4e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b52:	d914      	bls.n	8008b7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d903      	bls.n	8008b76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	220d      	movs	r2, #13
 8008b72:	701a      	strb	r2, [r3, #0]
      break;
 8008b74:	e16b      	b.n	8008e4e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	701a      	strb	r2, [r3, #0]
      break;
 8008b7c:	e167      	b.n	8008e4e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008b84:	f103 020a 	add.w	r2, r3, #10
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008b8e:	200a      	movs	r0, #10
 8008b90:	f001 fc64 	bl	800a45c <USBH_Delay>
      break;
 8008b94:	e15b      	b.n	8008e4e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008bac:	2064      	movs	r0, #100	; 0x64
 8008bae:	f001 fc55 	bl	800a45c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f001 fb24 	bl	800a200 <USBH_LL_GetSpeed>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2205      	movs	r2, #5
 8008bc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008bc8:	2100      	movs	r1, #0
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f001 f92f 	bl	8009e2e <USBH_AllocPipe>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008bd8:	2180      	movs	r1, #128	; 0x80
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 f927 	bl	8009e2e <USBH_AllocPipe>
 8008be0:	4603      	mov	r3, r0
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	7919      	ldrb	r1, [r3, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008bfc:	b292      	uxth	r2, r2
 8008bfe:	9202      	str	r2, [sp, #8]
 8008c00:	2200      	movs	r2, #0
 8008c02:	9201      	str	r2, [sp, #4]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	4603      	mov	r3, r0
 8008c08:	2280      	movs	r2, #128	; 0x80
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 f8e0 	bl	8009dd0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	7959      	ldrb	r1, [r3, #5]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008c24:	b292      	uxth	r2, r2
 8008c26:	9202      	str	r2, [sp, #8]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	9201      	str	r2, [sp, #4]
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2200      	movs	r2, #0
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 f8cc 	bl	8009dd0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c38:	e109      	b.n	8008e4e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f90c 	bl	8008e58 <USBH_HandleEnum>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f040 80f3 	bne.w	8008e34 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d103      	bne.n	8008c68 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2208      	movs	r2, #8
 8008c64:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008c66:	e0e5      	b.n	8008e34 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2207      	movs	r2, #7
 8008c6c:	701a      	strb	r2, [r3, #0]
      break;
 8008c6e:	e0e1      	b.n	8008e34 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 80de 	beq.w	8008e38 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c82:	2101      	movs	r1, #1
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2208      	movs	r2, #8
 8008c8c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008c8e:	e0d3      	b.n	8008e38 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fc20 	bl	80094e0 <USBH_SetCfg>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f040 80ca 	bne.w	8008e3c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2209      	movs	r2, #9
 8008cac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008cae:	e0c5      	b.n	8008e3c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fc30 	bl	8009526 <USBH_SetFeature>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f040 80b9 	bne.w	8008e40 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	220a      	movs	r2, #10
 8008cd2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008cd4:	e0b4      	b.n	8008e40 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	220a      	movs	r2, #10
 8008cda:	701a      	strb	r2, [r3, #0]
      break;
 8008cdc:	e0b0      	b.n	8008e40 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 80ad 	beq.w	8008e44 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	e016      	b.n	8008d26 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008cf8:	7bfa      	ldrb	r2, [r7, #15]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	32de      	adds	r2, #222	; 0xde
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	791a      	ldrb	r2, [r3, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d108      	bne.n	8008d20 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008d0e:	7bfa      	ldrb	r2, [r7, #15]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	32de      	adds	r2, #222	; 0xde
 8008d14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008d1e:	e005      	b.n	8008d2c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
 8008d22:	3301      	adds	r3, #1
 8008d24:	73fb      	strb	r3, [r7, #15]
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0e5      	beq.n	8008cf8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d016      	beq.n	8008d64 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	4798      	blx	r3
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2206      	movs	r2, #6
 8008d4c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d54:	2103      	movs	r1, #3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d5a:	e073      	b.n	8008e44 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	220d      	movs	r2, #13
 8008d60:	701a      	strb	r2, [r3, #0]
      break;
 8008d62:	e06f      	b.n	8008e44 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	220d      	movs	r2, #13
 8008d68:	701a      	strb	r2, [r3, #0]
      break;
 8008d6a:	e06b      	b.n	8008e44 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d017      	beq.n	8008da6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	4798      	blx	r3
 8008d82:	4603      	mov	r3, r0
 8008d84:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d103      	bne.n	8008d96 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	220b      	movs	r2, #11
 8008d92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d94:	e058      	b.n	8008e48 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d154      	bne.n	8008e48 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	220d      	movs	r2, #13
 8008da2:	701a      	strb	r2, [r3, #0]
      break;
 8008da4:	e050      	b.n	8008e48 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	220d      	movs	r2, #13
 8008daa:	701a      	strb	r2, [r3, #0]
      break;
 8008dac:	e04c      	b.n	8008e48 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d049      	beq.n	8008e4c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	4798      	blx	r3
      }
      break;
 8008dc4:	e042      	b.n	8008e4c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fd72 	bl	80088b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d009      	beq.n	8008df2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d005      	beq.n	8008e08 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e02:	2105      	movs	r1, #5
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d107      	bne.n	8008e24 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fe2b 	bl	8008a78 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e22:	e014      	b.n	8008e4e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f9b5 	bl	800a194 <USBH_LL_Start>
      break;
 8008e2a:	e010      	b.n	8008e4e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e2c:	bf00      	nop
 8008e2e:	e00e      	b.n	8008e4e <USBH_Process+0x3b6>
      break;
 8008e30:	bf00      	nop
 8008e32:	e00c      	b.n	8008e4e <USBH_Process+0x3b6>
      break;
 8008e34:	bf00      	nop
 8008e36:	e00a      	b.n	8008e4e <USBH_Process+0x3b6>
    break;
 8008e38:	bf00      	nop
 8008e3a:	e008      	b.n	8008e4e <USBH_Process+0x3b6>
      break;
 8008e3c:	bf00      	nop
 8008e3e:	e006      	b.n	8008e4e <USBH_Process+0x3b6>
      break;
 8008e40:	bf00      	nop
 8008e42:	e004      	b.n	8008e4e <USBH_Process+0x3b6>
      break;
 8008e44:	bf00      	nop
 8008e46:	e002      	b.n	8008e4e <USBH_Process+0x3b6>
      break;
 8008e48:	bf00      	nop
 8008e4a:	e000      	b.n	8008e4e <USBH_Process+0x3b6>
      break;
 8008e4c:	bf00      	nop
  }
  return USBH_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e64:	2301      	movs	r3, #1
 8008e66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	785b      	ldrb	r3, [r3, #1]
 8008e6c:	2b07      	cmp	r3, #7
 8008e6e:	f200 81c1 	bhi.w	80091f4 <USBH_HandleEnum+0x39c>
 8008e72:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <USBH_HandleEnum+0x20>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008f57 	.word	0x08008f57
 8008e80:	08008fc1 	.word	0x08008fc1
 8008e84:	0800904f 	.word	0x0800904f
 8008e88:	080090b9 	.word	0x080090b9
 8008e8c:	08009129 	.word	0x08009129
 8008e90:	0800916f 	.word	0x0800916f
 8008e94:	080091b5 	.word	0x080091b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e98:	2108      	movs	r1, #8
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa50 	bl	8009340 <USBH_Get_DevDesc>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d130      	bne.n	8008f0c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7919      	ldrb	r1, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ece:	b292      	uxth	r2, r2
 8008ed0:	9202      	str	r2, [sp, #8]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	9201      	str	r2, [sp, #4]
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2280      	movs	r2, #128	; 0x80
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 ff77 	bl	8009dd0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	7959      	ldrb	r1, [r3, #5]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ef6:	b292      	uxth	r2, r2
 8008ef8:	9202      	str	r2, [sp, #8]
 8008efa:	2200      	movs	r2, #0
 8008efc:	9201      	str	r2, [sp, #4]
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	4603      	mov	r3, r0
 8008f02:	2200      	movs	r2, #0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 ff63 	bl	8009dd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f0a:	e175      	b.n	80091f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	f040 8172 	bne.w	80091f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d903      	bls.n	8008f36 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	220d      	movs	r2, #13
 8008f32:	701a      	strb	r2, [r3, #0]
      break;
 8008f34:	e160      	b.n	80091f8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	795b      	ldrb	r3, [r3, #5]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 ff97 	bl	8009e70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	791b      	ldrb	r3, [r3, #4]
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 ff91 	bl	8009e70 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
      break;
 8008f54:	e150      	b.n	80091f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f56:	2112      	movs	r1, #18
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f9f1 	bl	8009340 <USBH_Get_DevDesc>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d103      	bne.n	8008f70 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f6e:	e145      	b.n	80091fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	2b03      	cmp	r3, #3
 8008f74:	f040 8142 	bne.w	80091fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f7e:	3301      	adds	r3, #1
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d903      	bls.n	8008f9a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	220d      	movs	r2, #13
 8008f96:	701a      	strb	r2, [r3, #0]
      break;
 8008f98:	e130      	b.n	80091fc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	795b      	ldrb	r3, [r3, #5]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 ff65 	bl	8009e70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	791b      	ldrb	r3, [r3, #4]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 ff5f 	bl	8009e70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	701a      	strb	r2, [r3, #0]
      break;
 8008fbe:	e11d      	b.n	80091fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008fc0:	2101      	movs	r1, #1
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa68 	bl	8009498 <USBH_SetAddress>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d132      	bne.n	8009038 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008fd2:	2002      	movs	r0, #2
 8008fd4:	f001 fa42 	bl	800a45c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2203      	movs	r2, #3
 8008fe4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7919      	ldrb	r1, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ffa:	b292      	uxth	r2, r2
 8008ffc:	9202      	str	r2, [sp, #8]
 8008ffe:	2200      	movs	r2, #0
 8009000:	9201      	str	r2, [sp, #4]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	4603      	mov	r3, r0
 8009006:	2280      	movs	r2, #128	; 0x80
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fee1 	bl	8009dd0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	7959      	ldrb	r1, [r3, #5]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009022:	b292      	uxth	r2, r2
 8009024:	9202      	str	r2, [sp, #8]
 8009026:	2200      	movs	r2, #0
 8009028:	9201      	str	r2, [sp, #4]
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	4603      	mov	r3, r0
 800902e:	2200      	movs	r2, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fecd 	bl	8009dd0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009036:	e0e3      	b.n	8009200 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b03      	cmp	r3, #3
 800903c:	f040 80e0 	bne.w	8009200 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	220d      	movs	r2, #13
 8009044:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	705a      	strb	r2, [r3, #1]
      break;
 800904c:	e0d8      	b.n	8009200 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800904e:	2109      	movs	r1, #9
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f99d 	bl	8009390 <USBH_Get_CfgDesc>
 8009056:	4603      	mov	r3, r0
 8009058:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d103      	bne.n	8009068 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2204      	movs	r2, #4
 8009064:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009066:	e0cd      	b.n	8009204 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b03      	cmp	r3, #3
 800906c:	f040 80ca 	bne.w	8009204 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009076:	3301      	adds	r3, #1
 8009078:	b2da      	uxtb	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009086:	2b03      	cmp	r3, #3
 8009088:	d903      	bls.n	8009092 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	220d      	movs	r2, #13
 800908e:	701a      	strb	r2, [r3, #0]
      break;
 8009090:	e0b8      	b.n	8009204 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	795b      	ldrb	r3, [r3, #5]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fee9 	bl	8009e70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	791b      	ldrb	r3, [r3, #4]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fee3 	bl	8009e70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	701a      	strb	r2, [r3, #0]
      break;
 80090b6:	e0a5      	b.n	8009204 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f965 	bl	8009390 <USBH_Get_CfgDesc>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090ca:	7bbb      	ldrb	r3, [r7, #14]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2205      	movs	r2, #5
 80090d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090d6:	e097      	b.n	8009208 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	2b03      	cmp	r3, #3
 80090dc:	f040 8094 	bne.w	8009208 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d903      	bls.n	8009102 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	220d      	movs	r2, #13
 80090fe:	701a      	strb	r2, [r3, #0]
      break;
 8009100:	e082      	b.n	8009208 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	795b      	ldrb	r3, [r3, #5]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 feb1 	bl	8009e70 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	791b      	ldrb	r3, [r3, #4]
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 feab 	bl	8009e70 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
      break;
 8009126:	e06f      	b.n	8009208 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800912e:	2b00      	cmp	r3, #0
 8009130:	d019      	beq.n	8009166 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800913e:	23ff      	movs	r3, #255	; 0xff
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f949 	bl	80093d8 <USBH_Get_StringDesc>
 8009146:	4603      	mov	r3, r0
 8009148:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d103      	bne.n	8009158 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2206      	movs	r2, #6
 8009154:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009156:	e059      	b.n	800920c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009158:	7bbb      	ldrb	r3, [r7, #14]
 800915a:	2b03      	cmp	r3, #3
 800915c:	d156      	bne.n	800920c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2206      	movs	r2, #6
 8009162:	705a      	strb	r2, [r3, #1]
      break;
 8009164:	e052      	b.n	800920c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2206      	movs	r2, #6
 800916a:	705a      	strb	r2, [r3, #1]
      break;
 800916c:	e04e      	b.n	800920c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009174:	2b00      	cmp	r3, #0
 8009176:	d019      	beq.n	80091ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009184:	23ff      	movs	r3, #255	; 0xff
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f926 	bl	80093d8 <USBH_Get_StringDesc>
 800918c:	4603      	mov	r3, r0
 800918e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2207      	movs	r2, #7
 800919a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800919c:	e038      	b.n	8009210 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d135      	bne.n	8009210 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2207      	movs	r2, #7
 80091a8:	705a      	strb	r2, [r3, #1]
      break;
 80091aa:	e031      	b.n	8009210 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2207      	movs	r2, #7
 80091b0:	705a      	strb	r2, [r3, #1]
      break;
 80091b2:	e02d      	b.n	8009210 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d017      	beq.n	80091ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091ca:	23ff      	movs	r3, #255	; 0xff
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f903 	bl	80093d8 <USBH_Get_StringDesc>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80091e0:	e018      	b.n	8009214 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d115      	bne.n	8009214 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
      break;
 80091ec:	e012      	b.n	8009214 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
      break;
 80091f2:	e00f      	b.n	8009214 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80091f4:	bf00      	nop
 80091f6:	e00e      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 80091f8:	bf00      	nop
 80091fa:	e00c      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 80091fc:	bf00      	nop
 80091fe:	e00a      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 8009200:	bf00      	nop
 8009202:	e008      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 8009204:	bf00      	nop
 8009206:	e006      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 8009208:	bf00      	nop
 800920a:	e004      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <USBH_HandleEnum+0x3be>
      break;
 8009214:	bf00      	nop
  }
  return Status;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b082      	sub	sp, #8
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f804 	bl	8009262 <USBH_HandleSof>
}
 800925a:	bf00      	nop
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b0b      	cmp	r3, #11
 8009272:	d10a      	bne.n	800928a <USBH_HandleSof+0x28>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
  }
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80092a2:	bf00      	nop
}
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80092be:	bf00      	nop
}
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 ff56 	bl	800a1ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fda3 	bl	8009e70 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	795b      	ldrb	r3, [r3, #5]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fd9d 	bl	8009e70 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af02      	add	r7, sp, #8
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	b29b      	uxth	r3, r3
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	4613      	mov	r3, r2
 800935a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800935e:	2100      	movs	r1, #0
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f864 	bl	800942e <USBH_GetDescriptor>
 8009366:	4603      	mov	r3, r0
 8009368:	73fb      	strb	r3, [r7, #15]
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10a      	bne.n	8009386 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800937c:	78fa      	ldrb	r2, [r7, #3]
 800937e:	b292      	uxth	r2, r2
 8009380:	4619      	mov	r1, r3
 8009382:	f000 f918 	bl	80095b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009386:	7bfb      	ldrb	r3, [r7, #15]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af02      	add	r7, sp, #8
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	331c      	adds	r3, #28
 80093a0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80093a2:	887b      	ldrh	r3, [r7, #2]
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ac:	2100      	movs	r1, #0
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f83d 	bl	800942e <USBH_GetDescriptor>
 80093b4:	4603      	mov	r3, r0
 80093b6:	72fb      	strb	r3, [r7, #11]
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d107      	bne.n	80093ce <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80093c4:	887a      	ldrh	r2, [r7, #2]
 80093c6:	68f9      	ldr	r1, [r7, #12]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f964 	bl	8009696 <USBH_ParseCfgDesc>
  }

  return status;
 80093ce:	7afb      	ldrb	r3, [r7, #11]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af02      	add	r7, sp, #8
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	461a      	mov	r2, r3
 80093e4:	460b      	mov	r3, r1
 80093e6:	72fb      	strb	r3, [r7, #11]
 80093e8:	4613      	mov	r3, r2
 80093ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80093f4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80093fc:	893b      	ldrh	r3, [r7, #8]
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	460b      	mov	r3, r1
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f812 	bl	800942e <USBH_GetDescriptor>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d107      	bne.n	8009424 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800941a:	893a      	ldrh	r2, [r7, #8]
 800941c:	6879      	ldr	r1, [r7, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fa37 	bl	8009892 <USBH_ParseStringDesc>
  }

  return status;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	607b      	str	r3, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	72fb      	strb	r3, [r7, #11]
 800943c:	4613      	mov	r3, r2
 800943e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	789b      	ldrb	r3, [r3, #2]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d11c      	bne.n	8009482 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009448:	7afb      	ldrb	r3, [r7, #11]
 800944a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800944e:	b2da      	uxtb	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2206      	movs	r2, #6
 8009458:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	893a      	ldrh	r2, [r7, #8]
 800945e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009460:	893b      	ldrh	r3, [r7, #8]
 8009462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800946a:	d104      	bne.n	8009476 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f240 4209 	movw	r2, #1033	; 0x409
 8009472:	829a      	strh	r2, [r3, #20]
 8009474:	e002      	b.n	800947c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8b3a      	ldrh	r2, [r7, #24]
 8009480:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009482:	8b3b      	ldrh	r3, [r7, #24]
 8009484:	461a      	mov	r2, r3
 8009486:	6879      	ldr	r1, [r7, #4]
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	f000 fa50 	bl	800992e <USBH_CtlReq>
 800948e:	4603      	mov	r3, r0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	460b      	mov	r3, r1
 80094a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	789b      	ldrb	r3, [r3, #2]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d10f      	bne.n	80094cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2205      	movs	r2, #5
 80094b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80094cc:	2200      	movs	r2, #0
 80094ce:	2100      	movs	r1, #0
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fa2c 	bl	800992e <USBH_CtlReq>
 80094d6:	4603      	mov	r3, r0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	789b      	ldrb	r3, [r3, #2]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d10e      	bne.n	8009512 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2209      	movs	r2, #9
 80094fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	887a      	ldrh	r2, [r7, #2]
 8009504:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009512:	2200      	movs	r2, #0
 8009514:	2100      	movs	r1, #0
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa09 	bl	800992e <USBH_CtlReq>
 800951c:	4603      	mov	r3, r0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	789b      	ldrb	r3, [r3, #2]
 8009536:	2b01      	cmp	r3, #1
 8009538:	d10f      	bne.n	800955a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2203      	movs	r2, #3
 8009544:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800955a:	2200      	movs	r2, #0
 800955c:	2100      	movs	r1, #0
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f9e5 	bl	800992e <USBH_CtlReq>
 8009564:	4603      	mov	r3, r0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	460b      	mov	r3, r1
 8009578:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	789b      	ldrb	r3, [r3, #2]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d10f      	bne.n	80095a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2202      	movs	r2, #2
 8009586:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	b29a      	uxth	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80095a2:	2200      	movs	r2, #0
 80095a4:	2100      	movs	r1, #0
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f9c1 	bl	800992e <USBH_CtlReq>
 80095ac:	4603      	mov	r3, r0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b085      	sub	sp, #20
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	4613      	mov	r3, r2
 80095c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	781a      	ldrb	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	785a      	ldrb	r2, [r3, #1]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3302      	adds	r3, #2
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	3303      	adds	r3, #3
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	021b      	lsls	r3, r3, #8
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	4313      	orrs	r3, r2
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	791a      	ldrb	r2, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	795a      	ldrb	r2, [r3, #5]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	799a      	ldrb	r2, [r3, #6]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	79da      	ldrb	r2, [r3, #7]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009610:	88fb      	ldrh	r3, [r7, #6]
 8009612:	2b08      	cmp	r3, #8
 8009614:	d939      	bls.n	800968a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	3308      	adds	r3, #8
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	b29a      	uxth	r2, r3
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	3309      	adds	r3, #9
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	b29b      	uxth	r3, r3
 800962a:	4313      	orrs	r3, r2
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	330a      	adds	r3, #10
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	b29a      	uxth	r2, r3
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	330b      	adds	r3, #11
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	b29b      	uxth	r3, r3
 8009646:	4313      	orrs	r3, r2
 8009648:	b29a      	uxth	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	330c      	adds	r3, #12
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	b29a      	uxth	r2, r3
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	330d      	adds	r3, #13
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	b29b      	uxth	r3, r3
 8009662:	4313      	orrs	r3, r2
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	7b9a      	ldrb	r2, [r3, #14]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	7bda      	ldrb	r2, [r3, #15]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	7c1a      	ldrb	r2, [r3, #16]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	7c5a      	ldrb	r2, [r3, #17]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	745a      	strb	r2, [r3, #17]
  }
}
 800968a:	bf00      	nop
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b08a      	sub	sp, #40	; 0x28
 800969a:	af00      	add	r7, sp, #0
 800969c:	60f8      	str	r0, [r7, #12]
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	4613      	mov	r3, r2
 80096a2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	781a      	ldrb	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	785a      	ldrb	r2, [r3, #1]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	3302      	adds	r3, #2
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3303      	adds	r3, #3
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	b29b      	uxth	r3, r3
 80096dc:	4313      	orrs	r3, r2
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	791a      	ldrb	r2, [r3, #4]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	795a      	ldrb	r2, [r3, #5]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	799a      	ldrb	r2, [r3, #6]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	79da      	ldrb	r2, [r3, #7]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	7a1a      	ldrb	r2, [r3, #8]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800970c:	88fb      	ldrh	r3, [r7, #6]
 800970e:	2b09      	cmp	r3, #9
 8009710:	d95f      	bls.n	80097d2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009712:	2309      	movs	r3, #9
 8009714:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009716:	2300      	movs	r3, #0
 8009718:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800971a:	e051      	b.n	80097c0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800971c:	f107 0316 	add.w	r3, r7, #22
 8009720:	4619      	mov	r1, r3
 8009722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009724:	f000 f8e8 	bl	80098f8 <USBH_GetNextDesc>
 8009728:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	785b      	ldrb	r3, [r3, #1]
 800972e:	2b04      	cmp	r3, #4
 8009730:	d146      	bne.n	80097c0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009736:	221a      	movs	r2, #26
 8009738:	fb02 f303 	mul.w	r3, r2, r3
 800973c:	3308      	adds	r3, #8
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	4413      	add	r3, r2
 8009742:	3302      	adds	r3, #2
 8009744:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009748:	69f8      	ldr	r0, [r7, #28]
 800974a:	f000 f846 	bl	80097da <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800974e:	2300      	movs	r3, #0
 8009750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009754:	2300      	movs	r3, #0
 8009756:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009758:	e022      	b.n	80097a0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800975a:	f107 0316 	add.w	r3, r7, #22
 800975e:	4619      	mov	r1, r3
 8009760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009762:	f000 f8c9 	bl	80098f8 <USBH_GetNextDesc>
 8009766:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	2b05      	cmp	r3, #5
 800976e:	d117      	bne.n	80097a0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009770:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009774:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009778:	3201      	adds	r2, #1
 800977a:	00d2      	lsls	r2, r2, #3
 800977c:	211a      	movs	r1, #26
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	4413      	add	r3, r2
 8009784:	3308      	adds	r3, #8
 8009786:	68fa      	ldr	r2, [r7, #12]
 8009788:	4413      	add	r3, r2
 800978a:	3304      	adds	r3, #4
 800978c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800978e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009790:	69b8      	ldr	r0, [r7, #24]
 8009792:	f000 f851 	bl	8009838 <USBH_ParseEPDesc>
            ep_ix++;
 8009796:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800979a:	3301      	adds	r3, #1
 800979c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	791b      	ldrb	r3, [r3, #4]
 80097a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d204      	bcs.n	80097b6 <USBH_ParseCfgDesc+0x120>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	885a      	ldrh	r2, [r3, #2]
 80097b0:	8afb      	ldrh	r3, [r7, #22]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d8d1      	bhi.n	800975a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80097b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097ba:	3301      	adds	r3, #1
 80097bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80097c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d804      	bhi.n	80097d2 <USBH_ParseCfgDesc+0x13c>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	885a      	ldrh	r2, [r3, #2]
 80097cc:	8afb      	ldrh	r3, [r7, #22]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d8a4      	bhi.n	800971c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80097d2:	bf00      	nop
 80097d4:	3728      	adds	r7, #40	; 0x28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781a      	ldrb	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	785a      	ldrb	r2, [r3, #1]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	789a      	ldrb	r2, [r3, #2]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	78da      	ldrb	r2, [r3, #3]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	791a      	ldrb	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	795a      	ldrb	r2, [r3, #5]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	799a      	ldrb	r2, [r3, #6]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	79da      	ldrb	r2, [r3, #7]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	7a1a      	ldrb	r2, [r3, #8]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	721a      	strb	r2, [r3, #8]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	785a      	ldrb	r2, [r3, #1]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	789a      	ldrb	r2, [r3, #2]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	78da      	ldrb	r2, [r3, #3]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	3304      	adds	r3, #4
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	b29a      	uxth	r2, r3
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	3305      	adds	r3, #5
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	021b      	lsls	r3, r3, #8
 8009874:	b29b      	uxth	r3, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	799a      	ldrb	r2, [r3, #6]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	719a      	strb	r2, [r3, #6]
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009892:	b480      	push	{r7}
 8009894:	b087      	sub	sp, #28
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	4613      	mov	r3, r2
 800989e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3301      	adds	r3, #1
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d120      	bne.n	80098ec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	1e9a      	subs	r2, r3, #2
 80098b0:	88fb      	ldrh	r3, [r7, #6]
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bf28      	it	cs
 80098b6:	4613      	movcs	r3, r2
 80098b8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3302      	adds	r3, #2
 80098be:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80098c0:	2300      	movs	r3, #0
 80098c2:	82fb      	strh	r3, [r7, #22]
 80098c4:	e00b      	b.n	80098de <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80098c6:	8afb      	ldrh	r3, [r7, #22]
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4413      	add	r3, r2
 80098cc:	781a      	ldrb	r2, [r3, #0]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3301      	adds	r3, #1
 80098d6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80098d8:	8afb      	ldrh	r3, [r7, #22]
 80098da:	3302      	adds	r3, #2
 80098dc:	82fb      	strh	r3, [r7, #22]
 80098de:	8afa      	ldrh	r2, [r7, #22]
 80098e0:	8abb      	ldrh	r3, [r7, #20]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d3ef      	bcc.n	80098c6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]
  }
}
 80098ec:	bf00      	nop
 80098ee:	371c      	adds	r7, #28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	881a      	ldrh	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	4413      	add	r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4413      	add	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009920:	68fb      	ldr	r3, [r7, #12]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b086      	sub	sp, #24
 8009932:	af00      	add	r7, sp, #0
 8009934:	60f8      	str	r0, [r7, #12]
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	4613      	mov	r3, r2
 800993a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800993c:	2301      	movs	r3, #1
 800993e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	789b      	ldrb	r3, [r3, #2]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d002      	beq.n	800994e <USBH_CtlReq+0x20>
 8009948:	2b02      	cmp	r3, #2
 800994a:	d00f      	beq.n	800996c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800994c:	e027      	b.n	800999e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	88fa      	ldrh	r2, [r7, #6]
 8009958:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2202      	movs	r2, #2
 8009964:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009966:	2301      	movs	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
      break;
 800996a:	e018      	b.n	800999e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f81b 	bl	80099a8 <USBH_HandleControl>
 8009972:	4603      	mov	r3, r0
 8009974:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <USBH_CtlReq+0x54>
 800997c:	7dfb      	ldrb	r3, [r7, #23]
 800997e:	2b03      	cmp	r3, #3
 8009980:	d106      	bne.n	8009990 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2201      	movs	r2, #1
 8009986:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	761a      	strb	r2, [r3, #24]
      break;
 800998e:	e005      	b.n	800999c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d102      	bne.n	800999c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2201      	movs	r2, #1
 800999a:	709a      	strb	r2, [r3, #2]
      break;
 800999c:	bf00      	nop
  }
  return status;
 800999e:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80099b0:	2301      	movs	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7e1b      	ldrb	r3, [r3, #24]
 80099bc:	3b01      	subs	r3, #1
 80099be:	2b0a      	cmp	r3, #10
 80099c0:	f200 8156 	bhi.w	8009c70 <USBH_HandleControl+0x2c8>
 80099c4:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <USBH_HandleControl+0x24>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	080099f9 	.word	0x080099f9
 80099d0:	08009a13 	.word	0x08009a13
 80099d4:	08009a7d 	.word	0x08009a7d
 80099d8:	08009aa3 	.word	0x08009aa3
 80099dc:	08009adb 	.word	0x08009adb
 80099e0:	08009b05 	.word	0x08009b05
 80099e4:	08009b57 	.word	0x08009b57
 80099e8:	08009b79 	.word	0x08009b79
 80099ec:	08009bb5 	.word	0x08009bb5
 80099f0:	08009bdb 	.word	0x08009bdb
 80099f4:	08009c19 	.word	0x08009c19
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f103 0110 	add.w	r1, r3, #16
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	795b      	ldrb	r3, [r3, #5]
 8009a02:	461a      	mov	r2, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f943 	bl	8009c90 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	761a      	strb	r2, [r3, #24]
      break;
 8009a10:	e139      	b.n	8009c86 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	795b      	ldrb	r3, [r3, #5]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 fcc5 	bl	800a3a8 <USBH_LL_GetURBState>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d11e      	bne.n	8009a66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7c1b      	ldrb	r3, [r3, #16]
 8009a2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009a30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	8adb      	ldrh	r3, [r3, #22]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00a      	beq.n	8009a50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009a3a:	7b7b      	ldrb	r3, [r7, #13]
 8009a3c:	2b80      	cmp	r3, #128	; 0x80
 8009a3e:	d103      	bne.n	8009a48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2203      	movs	r2, #3
 8009a44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009a46:	e115      	b.n	8009c74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2205      	movs	r2, #5
 8009a4c:	761a      	strb	r2, [r3, #24]
      break;
 8009a4e:	e111      	b.n	8009c74 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009a50:	7b7b      	ldrb	r3, [r7, #13]
 8009a52:	2b80      	cmp	r3, #128	; 0x80
 8009a54:	d103      	bne.n	8009a5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2209      	movs	r2, #9
 8009a5a:	761a      	strb	r2, [r3, #24]
      break;
 8009a5c:	e10a      	b.n	8009c74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2207      	movs	r2, #7
 8009a62:	761a      	strb	r2, [r3, #24]
      break;
 8009a64:	e106      	b.n	8009c74 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	2b04      	cmp	r3, #4
 8009a6a:	d003      	beq.n	8009a74 <USBH_HandleControl+0xcc>
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	f040 8100 	bne.w	8009c74 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	220b      	movs	r2, #11
 8009a78:	761a      	strb	r2, [r3, #24]
      break;
 8009a7a:	e0fb      	b.n	8009c74 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a82:	b29a      	uxth	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6899      	ldr	r1, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	899a      	ldrh	r2, [r3, #12]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	791b      	ldrb	r3, [r3, #4]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f93a 	bl	8009d0e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	761a      	strb	r2, [r3, #24]
      break;
 8009aa0:	e0f1      	b.n	8009c86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fc7d 	bl	800a3a8 <USBH_LL_GetURBState>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d102      	bne.n	8009abe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2209      	movs	r2, #9
 8009abc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	2b05      	cmp	r3, #5
 8009ac2:	d102      	bne.n	8009aca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ac8:	e0d6      	b.n	8009c78 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	f040 80d3 	bne.w	8009c78 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	220b      	movs	r2, #11
 8009ad6:	761a      	strb	r2, [r3, #24]
      break;
 8009ad8:	e0ce      	b.n	8009c78 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6899      	ldr	r1, [r3, #8]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	899a      	ldrh	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	795b      	ldrb	r3, [r3, #5]
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	9000      	str	r0, [sp, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8ea 	bl	8009cc4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2206      	movs	r2, #6
 8009b00:	761a      	strb	r2, [r3, #24]
      break;
 8009b02:	e0c0      	b.n	8009c86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	795b      	ldrb	r3, [r3, #5]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fc4c 	bl	800a3a8 <USBH_LL_GetURBState>
 8009b10:	4603      	mov	r3, r0
 8009b12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b14:	7bbb      	ldrb	r3, [r7, #14]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d103      	bne.n	8009b22 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2207      	movs	r2, #7
 8009b1e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b20:	e0ac      	b.n	8009c7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	2b05      	cmp	r3, #5
 8009b26:	d105      	bne.n	8009b34 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	220c      	movs	r2, #12
 8009b2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	73fb      	strb	r3, [r7, #15]
      break;
 8009b32:	e0a3      	b.n	8009c7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d103      	bne.n	8009b42 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2205      	movs	r2, #5
 8009b3e:	761a      	strb	r2, [r3, #24]
      break;
 8009b40:	e09c      	b.n	8009c7c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009b42:	7bbb      	ldrb	r3, [r7, #14]
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	f040 8099 	bne.w	8009c7c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	220b      	movs	r2, #11
 8009b4e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009b50:	2302      	movs	r3, #2
 8009b52:	73fb      	strb	r3, [r7, #15]
      break;
 8009b54:	e092      	b.n	8009c7c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	791b      	ldrb	r3, [r3, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f8d5 	bl	8009d0e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2208      	movs	r2, #8
 8009b74:	761a      	strb	r2, [r3, #24]

      break;
 8009b76:	e086      	b.n	8009c86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	791b      	ldrb	r3, [r3, #4]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fc12 	bl	800a3a8 <USBH_LL_GetURBState>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d105      	bne.n	8009b9a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	220d      	movs	r2, #13
 8009b92:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b98:	e072      	b.n	8009c80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	2b04      	cmp	r3, #4
 8009b9e:	d103      	bne.n	8009ba8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	220b      	movs	r2, #11
 8009ba4:	761a      	strb	r2, [r3, #24]
      break;
 8009ba6:	e06b      	b.n	8009c80 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b05      	cmp	r3, #5
 8009bac:	d168      	bne.n	8009c80 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb2:	e065      	b.n	8009c80 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	795b      	ldrb	r3, [r3, #5]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	9200      	str	r2, [sp, #0]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f87f 	bl	8009cc4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	220a      	movs	r2, #10
 8009bd6:	761a      	strb	r2, [r3, #24]
      break;
 8009bd8:	e055      	b.n	8009c86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	795b      	ldrb	r3, [r3, #5]
 8009bde:	4619      	mov	r1, r3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fbe1 	bl	800a3a8 <USBH_LL_GetURBState>
 8009be6:	4603      	mov	r3, r0
 8009be8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d105      	bne.n	8009bfc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	220d      	movs	r2, #13
 8009bf8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009bfa:	e043      	b.n	8009c84 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d103      	bne.n	8009c0a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2209      	movs	r2, #9
 8009c06:	761a      	strb	r2, [r3, #24]
      break;
 8009c08:	e03c      	b.n	8009c84 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b04      	cmp	r3, #4
 8009c0e:	d139      	bne.n	8009c84 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	220b      	movs	r2, #11
 8009c14:	761a      	strb	r2, [r3, #24]
      break;
 8009c16:	e035      	b.n	8009c84 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7e5b      	ldrb	r3, [r3, #25]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	765a      	strb	r2, [r3, #25]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	7e5b      	ldrb	r3, [r3, #25]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d806      	bhi.n	8009c3a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009c38:	e025      	b.n	8009c86 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c40:	2106      	movs	r1, #6
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	795b      	ldrb	r3, [r3, #5]
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f90c 	bl	8009e70 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	791b      	ldrb	r3, [r3, #4]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f906 	bl	8009e70 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c6e:	e00a      	b.n	8009c86 <USBH_HandleControl+0x2de>

    default:
      break;
 8009c70:	bf00      	nop
 8009c72:	e008      	b.n	8009c86 <USBH_HandleControl+0x2de>
      break;
 8009c74:	bf00      	nop
 8009c76:	e006      	b.n	8009c86 <USBH_HandleControl+0x2de>
      break;
 8009c78:	bf00      	nop
 8009c7a:	e004      	b.n	8009c86 <USBH_HandleControl+0x2de>
      break;
 8009c7c:	bf00      	nop
 8009c7e:	e002      	b.n	8009c86 <USBH_HandleControl+0x2de>
      break;
 8009c80:	bf00      	nop
 8009c82:	e000      	b.n	8009c86 <USBH_HandleControl+0x2de>
      break;
 8009c84:	bf00      	nop
  }

  return status;
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af04      	add	r7, sp, #16
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009c9e:	79f9      	ldrb	r1, [r7, #7]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9303      	str	r3, [sp, #12]
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	2300      	movs	r3, #0
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f000 fb46 	bl	800a346 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af04      	add	r7, sp, #16
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	80fb      	strh	r3, [r7, #6]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ce8:	7979      	ldrb	r1, [r7, #5]
 8009cea:	7e3b      	ldrb	r3, [r7, #24]
 8009cec:	9303      	str	r3, [sp, #12]
 8009cee:	88fb      	ldrh	r3, [r7, #6]
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 fb21 	bl	800a346 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b088      	sub	sp, #32
 8009d12:	af04      	add	r7, sp, #16
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	4611      	mov	r1, r2
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	80fb      	strh	r3, [r7, #6]
 8009d20:	4613      	mov	r3, r2
 8009d22:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d24:	7979      	ldrb	r1, [r7, #5]
 8009d26:	2300      	movs	r3, #0
 8009d28:	9303      	str	r3, [sp, #12]
 8009d2a:	88fb      	ldrh	r3, [r7, #6]
 8009d2c:	9302      	str	r3, [sp, #8]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	9301      	str	r3, [sp, #4]
 8009d32:	2301      	movs	r3, #1
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	2300      	movs	r3, #0
 8009d38:	2201      	movs	r2, #1
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f000 fb03 	bl	800a346 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009d40:	2300      	movs	r3, #0

}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b088      	sub	sp, #32
 8009d4e:	af04      	add	r7, sp, #16
 8009d50:	60f8      	str	r0, [r7, #12]
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	4611      	mov	r1, r2
 8009d56:	461a      	mov	r2, r3
 8009d58:	460b      	mov	r3, r1
 8009d5a:	80fb      	strh	r3, [r7, #6]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d6e:	7979      	ldrb	r1, [r7, #5]
 8009d70:	7e3b      	ldrb	r3, [r7, #24]
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	9302      	str	r3, [sp, #8]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	9301      	str	r3, [sp, #4]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	2302      	movs	r3, #2
 8009d82:	2200      	movs	r2, #0
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 fade 	bl	800a346 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b088      	sub	sp, #32
 8009d98:	af04      	add	r7, sp, #16
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4611      	mov	r1, r2
 8009da0:	461a      	mov	r2, r3
 8009da2:	460b      	mov	r3, r1
 8009da4:	80fb      	strh	r3, [r7, #6]
 8009da6:	4613      	mov	r3, r2
 8009da8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009daa:	7979      	ldrb	r1, [r7, #5]
 8009dac:	2300      	movs	r3, #0
 8009dae:	9303      	str	r3, [sp, #12]
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	9302      	str	r3, [sp, #8]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	2301      	movs	r3, #1
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	2302      	movs	r3, #2
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 fac0 	bl	800a346 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af04      	add	r7, sp, #16
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	4608      	mov	r0, r1
 8009dda:	4611      	mov	r1, r2
 8009ddc:	461a      	mov	r2, r3
 8009dde:	4603      	mov	r3, r0
 8009de0:	70fb      	strb	r3, [r7, #3]
 8009de2:	460b      	mov	r3, r1
 8009de4:	70bb      	strb	r3, [r7, #2]
 8009de6:	4613      	mov	r3, r2
 8009de8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009dea:	7878      	ldrb	r0, [r7, #1]
 8009dec:	78ba      	ldrb	r2, [r7, #2]
 8009dee:	78f9      	ldrb	r1, [r7, #3]
 8009df0:	8b3b      	ldrh	r3, [r7, #24]
 8009df2:	9302      	str	r3, [sp, #8]
 8009df4:	7d3b      	ldrb	r3, [r7, #20]
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	7c3b      	ldrb	r3, [r7, #16]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fa53 	bl	800a2aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fa72 	bl	800a308 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f836 	bl	8009eac <USBH_GetFreePipe>
 8009e40:	4603      	mov	r3, r0
 8009e42:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009e44:	89fb      	ldrh	r3, [r7, #14]
 8009e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d00a      	beq.n	8009e64 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009e4e:	78fa      	ldrb	r2, [r7, #3]
 8009e50:	89fb      	ldrh	r3, [r7, #14]
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	33e0      	adds	r3, #224	; 0xe0
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	b2db      	uxtb	r3, r3
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	2b0a      	cmp	r3, #10
 8009e80:	d80d      	bhi.n	8009e9e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009e82:	78fb      	ldrb	r3, [r7, #3]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	33e0      	adds	r3, #224	; 0xe0
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	33e0      	adds	r3, #224	; 0xe0
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	440b      	add	r3, r1
 8009e9c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	73fb      	strb	r3, [r7, #15]
 8009ebc:	e00f      	b.n	8009ede <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	33e0      	adds	r3, #224	; 0xe0
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	e007      	b.n	8009ee8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	3301      	adds	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	2b0a      	cmp	r3, #10
 8009ee2:	d9ec      	bls.n	8009ebe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ee4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009ef8:	2201      	movs	r2, #1
 8009efa:	490e      	ldr	r1, [pc, #56]	; (8009f34 <MX_USB_HOST_Init+0x40>)
 8009efc:	480e      	ldr	r0, [pc, #56]	; (8009f38 <MX_USB_HOST_Init+0x44>)
 8009efe:	f7fe fca1 	bl	8008844 <USBH_Init>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009f08:	f7f6 fe92 	bl	8000c30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009f0c:	490b      	ldr	r1, [pc, #44]	; (8009f3c <MX_USB_HOST_Init+0x48>)
 8009f0e:	480a      	ldr	r0, [pc, #40]	; (8009f38 <MX_USB_HOST_Init+0x44>)
 8009f10:	f7fe fd26 	bl	8008960 <USBH_RegisterClass>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d001      	beq.n	8009f1e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009f1a:	f7f6 fe89 	bl	8000c30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009f1e:	4806      	ldr	r0, [pc, #24]	; (8009f38 <MX_USB_HOST_Init+0x44>)
 8009f20:	f7fe fdaa 	bl	8008a78 <USBH_Start>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009f2a:	f7f6 fe81 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009f2e:	bf00      	nop
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	08009f55 	.word	0x08009f55
 8009f38:	2000090c 	.word	0x2000090c
 8009f3c:	2000000c 	.word	0x2000000c

08009f40 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009f44:	4802      	ldr	r0, [pc, #8]	; (8009f50 <MX_USB_HOST_Process+0x10>)
 8009f46:	f7fe fda7 	bl	8008a98 <USBH_Process>
}
 8009f4a:	bf00      	nop
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	2000090c 	.word	0x2000090c

08009f54 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	2b04      	cmp	r3, #4
 8009f66:	d819      	bhi.n	8009f9c <USBH_UserProcess+0x48>
 8009f68:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <USBH_UserProcess+0x1c>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	08009f9d 	.word	0x08009f9d
 8009f74:	08009f8d 	.word	0x08009f8d
 8009f78:	08009f9d 	.word	0x08009f9d
 8009f7c:	08009f95 	.word	0x08009f95
 8009f80:	08009f85 	.word	0x08009f85
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009f84:	4b09      	ldr	r3, [pc, #36]	; (8009fac <USBH_UserProcess+0x58>)
 8009f86:	2203      	movs	r2, #3
 8009f88:	701a      	strb	r2, [r3, #0]
  break;
 8009f8a:	e008      	b.n	8009f9e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009f8c:	4b07      	ldr	r3, [pc, #28]	; (8009fac <USBH_UserProcess+0x58>)
 8009f8e:	2202      	movs	r2, #2
 8009f90:	701a      	strb	r2, [r3, #0]
  break;
 8009f92:	e004      	b.n	8009f9e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009f94:	4b05      	ldr	r3, [pc, #20]	; (8009fac <USBH_UserProcess+0x58>)
 8009f96:	2201      	movs	r2, #1
 8009f98:	701a      	strb	r2, [r3, #0]
  break;
 8009f9a:	e000      	b.n	8009f9e <USBH_UserProcess+0x4a>

  default:
  break;
 8009f9c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009f9e:	bf00      	nop
 8009fa0:	370c      	adds	r7, #12
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	200000b4 	.word	0x200000b4

08009fb0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fb8:	f107 0314 	add.w	r3, r7, #20
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	605a      	str	r2, [r3, #4]
 8009fc2:	609a      	str	r2, [r3, #8]
 8009fc4:	60da      	str	r2, [r3, #12]
 8009fc6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fd0:	d147      	bne.n	800a062 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	613b      	str	r3, [r7, #16]
 8009fd6:	4b25      	ldr	r3, [pc, #148]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fda:	4a24      	ldr	r2, [pc, #144]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8009fe2:	4b22      	ldr	r3, [pc, #136]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 8009fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009ffc:	f107 0314 	add.w	r3, r7, #20
 800a000:	4619      	mov	r1, r3
 800a002:	481b      	ldr	r0, [pc, #108]	; (800a070 <HAL_HCD_MspInit+0xc0>)
 800a004:	f7f7 ff8c 	bl	8001f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a008:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a00c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a00e:	2302      	movs	r3, #2
 800a010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a012:	2300      	movs	r3, #0
 800a014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a016:	2303      	movs	r3, #3
 800a018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a01a:	230a      	movs	r3, #10
 800a01c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a01e:	f107 0314 	add.w	r3, r7, #20
 800a022:	4619      	mov	r1, r3
 800a024:	4812      	ldr	r0, [pc, #72]	; (800a070 <HAL_HCD_MspInit+0xc0>)
 800a026:	f7f7 ff7b 	bl	8001f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a02a:	4b10      	ldr	r3, [pc, #64]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 800a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02e:	4a0f      	ldr	r2, [pc, #60]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 800a030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a034:	6353      	str	r3, [r2, #52]	; 0x34
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	4a0b      	ldr	r2, [pc, #44]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 800a040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a044:	6453      	str	r3, [r2, #68]	; 0x44
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <HAL_HCD_MspInit+0xbc>)
 800a048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a04e:	60fb      	str	r3, [r7, #12]
 800a050:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	2043      	movs	r0, #67	; 0x43
 800a058:	f7f7 fa04 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a05c:	2043      	movs	r0, #67	; 0x43
 800a05e:	f7f7 fa2d 	bl	80014bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a062:	bf00      	nop
 800a064:	3728      	adds	r7, #40	; 0x28
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	40023800 	.word	0x40023800
 800a070:	40020000 	.word	0x40020000

0800a074 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff f8db 	bl	800923e <USBH_LL_IncTimer>
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7ff f913 	bl	80092ca <USBH_LL_Connect>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7ff f91c 	bl	80092f8 <USBH_LL_Disconnect>
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70fb      	strb	r3, [r7, #3]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff f8cd 	bl	8009292 <USBH_LL_PortEnabled>
}
 800a0f8:	bf00      	nop
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff f8cd 	bl	80092ae <USBH_LL_PortDisabled>
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d12a      	bne.n	800a184 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a12e:	4a18      	ldr	r2, [pc, #96]	; (800a190 <USBH_LL_Init+0x74>)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a15      	ldr	r2, [pc, #84]	; (800a190 <USBH_LL_Init+0x74>)
 800a13a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a13e:	4b14      	ldr	r3, [pc, #80]	; (800a190 <USBH_LL_Init+0x74>)
 800a140:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a144:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <USBH_LL_Init+0x74>)
 800a148:	2208      	movs	r2, #8
 800a14a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a14c:	4b10      	ldr	r3, [pc, #64]	; (800a190 <USBH_LL_Init+0x74>)
 800a14e:	2201      	movs	r2, #1
 800a150:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a152:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <USBH_LL_Init+0x74>)
 800a154:	2200      	movs	r2, #0
 800a156:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a158:	4b0d      	ldr	r3, [pc, #52]	; (800a190 <USBH_LL_Init+0x74>)
 800a15a:	2202      	movs	r2, #2
 800a15c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <USBH_LL_Init+0x74>)
 800a160:	2200      	movs	r2, #0
 800a162:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a164:	480a      	ldr	r0, [pc, #40]	; (800a190 <USBH_LL_Init+0x74>)
 800a166:	f7f8 f9a9 	bl	80024bc <HAL_HCD_Init>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a170:	f7f6 fd5e 	bl	8000c30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a174:	4806      	ldr	r0, [pc, #24]	; (800a190 <USBH_LL_Init+0x74>)
 800a176:	f7f8 fd98 	bl	8002caa <HAL_HCD_GetCurrentFrame>
 800a17a:	4603      	mov	r3, r0
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff f84e 	bl	8009220 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000ce4 	.word	0x20000ce4

0800a194 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f8 fd07 	bl	8002bbe <HAL_HCD_Start>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f95c 	bl	800a474 <USBH_Get_USB_Status>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f8 fd0f 	bl	8002c04 <HAL_HCD_Stop>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 f941 	bl	800a474 <USBH_Get_USB_Status>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a212:	4618      	mov	r0, r3
 800a214:	f7f8 fd57 	bl	8002cc6 <HAL_HCD_GetCurrentSpeed>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d00c      	beq.n	800a238 <USBH_LL_GetSpeed+0x38>
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d80d      	bhi.n	800a23e <USBH_LL_GetSpeed+0x3e>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <USBH_LL_GetSpeed+0x2c>
 800a226:	2b01      	cmp	r3, #1
 800a228:	d003      	beq.n	800a232 <USBH_LL_GetSpeed+0x32>
 800a22a:	e008      	b.n	800a23e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]
    break;
 800a230:	e008      	b.n	800a244 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a232:	2301      	movs	r3, #1
 800a234:	73fb      	strb	r3, [r7, #15]
    break;
 800a236:	e005      	b.n	800a244 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a238:	2302      	movs	r3, #2
 800a23a:	73fb      	strb	r3, [r7, #15]
    break;
 800a23c:	e002      	b.n	800a244 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a23e:	2301      	movs	r3, #1
 800a240:	73fb      	strb	r3, [r7, #15]
    break;
 800a242:	bf00      	nop
  }
  return  speed;
 800a244:	7bfb      	ldrb	r3, [r7, #15]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a264:	4618      	mov	r0, r3
 800a266:	f7f8 fcea 	bl	8002c3e <HAL_HCD_ResetPort>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	4618      	mov	r0, r3
 800a272:	f000 f8ff 	bl	800a474 <USBH_Get_USB_Status>
 800a276:	4603      	mov	r3, r0
 800a278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f8 fcf1 	bl	8002c82 <HAL_HCD_HC_GetXferCount>
 800a2a0:	4603      	mov	r3, r0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2aa:	b590      	push	{r4, r7, lr}
 800a2ac:	b089      	sub	sp, #36	; 0x24
 800a2ae:	af04      	add	r7, sp, #16
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	70fb      	strb	r3, [r7, #3]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70bb      	strb	r3, [r7, #2]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a2d2:	787c      	ldrb	r4, [r7, #1]
 800a2d4:	78ba      	ldrb	r2, [r7, #2]
 800a2d6:	78f9      	ldrb	r1, [r7, #3]
 800a2d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2da:	9302      	str	r3, [sp, #8]
 800a2dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	f7f8 f955 	bl	8002598 <HAL_HCD_HC_Init>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f8bd 	bl	800a474 <USBH_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}

0800a308 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7f8 f9c5 	bl	80026b6 <HAL_HCD_HC_Halt>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f89e 	bl	800a474 <USBH_Get_USB_Status>
 800a338:	4603      	mov	r3, r0
 800a33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a346:	b590      	push	{r4, r7, lr}
 800a348:	b089      	sub	sp, #36	; 0x24
 800a34a:	af04      	add	r7, sp, #16
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	4608      	mov	r0, r1
 800a350:	4611      	mov	r1, r2
 800a352:	461a      	mov	r2, r3
 800a354:	4603      	mov	r3, r0
 800a356:	70fb      	strb	r3, [r7, #3]
 800a358:	460b      	mov	r3, r1
 800a35a:	70bb      	strb	r3, [r7, #2]
 800a35c:	4613      	mov	r3, r2
 800a35e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a36e:	787c      	ldrb	r4, [r7, #1]
 800a370:	78ba      	ldrb	r2, [r7, #2]
 800a372:	78f9      	ldrb	r1, [r7, #3]
 800a374:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a378:	9303      	str	r3, [sp, #12]
 800a37a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a37c:	9302      	str	r3, [sp, #8]
 800a37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	4623      	mov	r3, r4
 800a38a:	f7f8 f9b7 	bl	80026fc <HAL_HCD_HC_SubmitRequest>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f86d 	bl	800a474 <USBH_Get_USB_Status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd90      	pop	{r4, r7, pc}

0800a3a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a3ba:	78fa      	ldrb	r2, [r7, #3]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f8 fc4b 	bl	8002c5a <HAL_HCD_HC_GetURBState>
 800a3c4:	4603      	mov	r3, r0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d103      	bne.n	800a3ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a3e4:	78fb      	ldrb	r3, [r7, #3]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f870 	bl	800a4cc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a3ec:	20c8      	movs	r0, #200	; 0xc8
 800a3ee:	f7f6 ff25 	bl	800123c <HAL_Delay>
  return USBH_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
 800a408:	4613      	mov	r3, r2
 800a40a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a412:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a414:	78fb      	ldrb	r3, [r7, #3]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	212c      	movs	r1, #44	; 0x2c
 800a41a:	fb01 f303 	mul.w	r3, r1, r3
 800a41e:	4413      	add	r3, r2
 800a420:	333b      	adds	r3, #59	; 0x3b
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d009      	beq.n	800a43c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	212c      	movs	r1, #44	; 0x2c
 800a42e:	fb01 f303 	mul.w	r3, r1, r3
 800a432:	4413      	add	r3, r2
 800a434:	3354      	adds	r3, #84	; 0x54
 800a436:	78ba      	ldrb	r2, [r7, #2]
 800a438:	701a      	strb	r2, [r3, #0]
 800a43a:	e008      	b.n	800a44e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a43c:	78fb      	ldrb	r3, [r7, #3]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	212c      	movs	r1, #44	; 0x2c
 800a442:	fb01 f303 	mul.w	r3, r1, r3
 800a446:	4413      	add	r3, r2
 800a448:	3355      	adds	r3, #85	; 0x55
 800a44a:	78ba      	ldrb	r2, [r7, #2]
 800a44c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7f6 fee9 	bl	800123c <HAL_Delay>
}
 800a46a:	bf00      	nop
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
	...

0800a474 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a482:	79fb      	ldrb	r3, [r7, #7]
 800a484:	2b03      	cmp	r3, #3
 800a486:	d817      	bhi.n	800a4b8 <USBH_Get_USB_Status+0x44>
 800a488:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <USBH_Get_USB_Status+0x1c>)
 800a48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48e:	bf00      	nop
 800a490:	0800a4a1 	.word	0x0800a4a1
 800a494:	0800a4a7 	.word	0x0800a4a7
 800a498:	0800a4ad 	.word	0x0800a4ad
 800a49c:	0800a4b3 	.word	0x0800a4b3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a4:	e00b      	b.n	800a4be <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4aa:	e008      	b.n	800a4be <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b0:	e005      	b.n	800a4be <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b6:	e002      	b.n	800a4be <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a4bc:	bf00      	nop
  }
  return usb_status;
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d102      	bne.n	800a4e6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	73fb      	strb	r3, [r7, #15]
 800a4e4:	e001      	b.n	800a4ea <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	4803      	ldr	r0, [pc, #12]	; (800a500 <MX_DriverVbusFS+0x34>)
 800a4f2:	f7f7 ffb1 	bl	8002458 <HAL_GPIO_WritePin>
}
 800a4f6:	bf00      	nop
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	40020800 	.word	0x40020800

0800a504 <__errno>:
 800a504:	4b01      	ldr	r3, [pc, #4]	; (800a50c <__errno+0x8>)
 800a506:	6818      	ldr	r0, [r3, #0]
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	2000002c 	.word	0x2000002c

0800a510 <__libc_init_array>:
 800a510:	b570      	push	{r4, r5, r6, lr}
 800a512:	4d0d      	ldr	r5, [pc, #52]	; (800a548 <__libc_init_array+0x38>)
 800a514:	4c0d      	ldr	r4, [pc, #52]	; (800a54c <__libc_init_array+0x3c>)
 800a516:	1b64      	subs	r4, r4, r5
 800a518:	10a4      	asrs	r4, r4, #2
 800a51a:	2600      	movs	r6, #0
 800a51c:	42a6      	cmp	r6, r4
 800a51e:	d109      	bne.n	800a534 <__libc_init_array+0x24>
 800a520:	4d0b      	ldr	r5, [pc, #44]	; (800a550 <__libc_init_array+0x40>)
 800a522:	4c0c      	ldr	r4, [pc, #48]	; (800a554 <__libc_init_array+0x44>)
 800a524:	f000 f8f8 	bl	800a718 <_init>
 800a528:	1b64      	subs	r4, r4, r5
 800a52a:	10a4      	asrs	r4, r4, #2
 800a52c:	2600      	movs	r6, #0
 800a52e:	42a6      	cmp	r6, r4
 800a530:	d105      	bne.n	800a53e <__libc_init_array+0x2e>
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	f855 3b04 	ldr.w	r3, [r5], #4
 800a538:	4798      	blx	r3
 800a53a:	3601      	adds	r6, #1
 800a53c:	e7ee      	b.n	800a51c <__libc_init_array+0xc>
 800a53e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a542:	4798      	blx	r3
 800a544:	3601      	adds	r6, #1
 800a546:	e7f2      	b.n	800a52e <__libc_init_array+0x1e>
 800a548:	0800a960 	.word	0x0800a960
 800a54c:	0800a960 	.word	0x0800a960
 800a550:	0800a960 	.word	0x0800a960
 800a554:	0800a964 	.word	0x0800a964

0800a558 <malloc>:
 800a558:	4b02      	ldr	r3, [pc, #8]	; (800a564 <malloc+0xc>)
 800a55a:	4601      	mov	r1, r0
 800a55c:	6818      	ldr	r0, [r3, #0]
 800a55e:	f000 b863 	b.w	800a628 <_malloc_r>
 800a562:	bf00      	nop
 800a564:	2000002c 	.word	0x2000002c

0800a568 <free>:
 800a568:	4b02      	ldr	r3, [pc, #8]	; (800a574 <free+0xc>)
 800a56a:	4601      	mov	r1, r0
 800a56c:	6818      	ldr	r0, [r3, #0]
 800a56e:	f000 b80b 	b.w	800a588 <_free_r>
 800a572:	bf00      	nop
 800a574:	2000002c 	.word	0x2000002c

0800a578 <memset>:
 800a578:	4402      	add	r2, r0
 800a57a:	4603      	mov	r3, r0
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d100      	bne.n	800a582 <memset+0xa>
 800a580:	4770      	bx	lr
 800a582:	f803 1b01 	strb.w	r1, [r3], #1
 800a586:	e7f9      	b.n	800a57c <memset+0x4>

0800a588 <_free_r>:
 800a588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a58a:	2900      	cmp	r1, #0
 800a58c:	d048      	beq.n	800a620 <_free_r+0x98>
 800a58e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a592:	9001      	str	r0, [sp, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f1a1 0404 	sub.w	r4, r1, #4
 800a59a:	bfb8      	it	lt
 800a59c:	18e4      	addlt	r4, r4, r3
 800a59e:	f000 f8ad 	bl	800a6fc <__malloc_lock>
 800a5a2:	4a20      	ldr	r2, [pc, #128]	; (800a624 <_free_r+0x9c>)
 800a5a4:	9801      	ldr	r0, [sp, #4]
 800a5a6:	6813      	ldr	r3, [r2, #0]
 800a5a8:	4615      	mov	r5, r2
 800a5aa:	b933      	cbnz	r3, 800a5ba <_free_r+0x32>
 800a5ac:	6063      	str	r3, [r4, #4]
 800a5ae:	6014      	str	r4, [r2, #0]
 800a5b0:	b003      	add	sp, #12
 800a5b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5b6:	f000 b8a7 	b.w	800a708 <__malloc_unlock>
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	d90b      	bls.n	800a5d6 <_free_r+0x4e>
 800a5be:	6821      	ldr	r1, [r4, #0]
 800a5c0:	1862      	adds	r2, r4, r1
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	bf04      	itt	eq
 800a5c6:	681a      	ldreq	r2, [r3, #0]
 800a5c8:	685b      	ldreq	r3, [r3, #4]
 800a5ca:	6063      	str	r3, [r4, #4]
 800a5cc:	bf04      	itt	eq
 800a5ce:	1852      	addeq	r2, r2, r1
 800a5d0:	6022      	streq	r2, [r4, #0]
 800a5d2:	602c      	str	r4, [r5, #0]
 800a5d4:	e7ec      	b.n	800a5b0 <_free_r+0x28>
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	b10b      	cbz	r3, 800a5e0 <_free_r+0x58>
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	d9fa      	bls.n	800a5d6 <_free_r+0x4e>
 800a5e0:	6811      	ldr	r1, [r2, #0]
 800a5e2:	1855      	adds	r5, r2, r1
 800a5e4:	42a5      	cmp	r5, r4
 800a5e6:	d10b      	bne.n	800a600 <_free_r+0x78>
 800a5e8:	6824      	ldr	r4, [r4, #0]
 800a5ea:	4421      	add	r1, r4
 800a5ec:	1854      	adds	r4, r2, r1
 800a5ee:	42a3      	cmp	r3, r4
 800a5f0:	6011      	str	r1, [r2, #0]
 800a5f2:	d1dd      	bne.n	800a5b0 <_free_r+0x28>
 800a5f4:	681c      	ldr	r4, [r3, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	6053      	str	r3, [r2, #4]
 800a5fa:	4421      	add	r1, r4
 800a5fc:	6011      	str	r1, [r2, #0]
 800a5fe:	e7d7      	b.n	800a5b0 <_free_r+0x28>
 800a600:	d902      	bls.n	800a608 <_free_r+0x80>
 800a602:	230c      	movs	r3, #12
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	e7d3      	b.n	800a5b0 <_free_r+0x28>
 800a608:	6825      	ldr	r5, [r4, #0]
 800a60a:	1961      	adds	r1, r4, r5
 800a60c:	428b      	cmp	r3, r1
 800a60e:	bf04      	itt	eq
 800a610:	6819      	ldreq	r1, [r3, #0]
 800a612:	685b      	ldreq	r3, [r3, #4]
 800a614:	6063      	str	r3, [r4, #4]
 800a616:	bf04      	itt	eq
 800a618:	1949      	addeq	r1, r1, r5
 800a61a:	6021      	streq	r1, [r4, #0]
 800a61c:	6054      	str	r4, [r2, #4]
 800a61e:	e7c7      	b.n	800a5b0 <_free_r+0x28>
 800a620:	b003      	add	sp, #12
 800a622:	bd30      	pop	{r4, r5, pc}
 800a624:	200000b8 	.word	0x200000b8

0800a628 <_malloc_r>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	1ccd      	adds	r5, r1, #3
 800a62c:	f025 0503 	bic.w	r5, r5, #3
 800a630:	3508      	adds	r5, #8
 800a632:	2d0c      	cmp	r5, #12
 800a634:	bf38      	it	cc
 800a636:	250c      	movcc	r5, #12
 800a638:	2d00      	cmp	r5, #0
 800a63a:	4606      	mov	r6, r0
 800a63c:	db01      	blt.n	800a642 <_malloc_r+0x1a>
 800a63e:	42a9      	cmp	r1, r5
 800a640:	d903      	bls.n	800a64a <_malloc_r+0x22>
 800a642:	230c      	movs	r3, #12
 800a644:	6033      	str	r3, [r6, #0]
 800a646:	2000      	movs	r0, #0
 800a648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a64a:	f000 f857 	bl	800a6fc <__malloc_lock>
 800a64e:	4921      	ldr	r1, [pc, #132]	; (800a6d4 <_malloc_r+0xac>)
 800a650:	680a      	ldr	r2, [r1, #0]
 800a652:	4614      	mov	r4, r2
 800a654:	b99c      	cbnz	r4, 800a67e <_malloc_r+0x56>
 800a656:	4f20      	ldr	r7, [pc, #128]	; (800a6d8 <_malloc_r+0xb0>)
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	b923      	cbnz	r3, 800a666 <_malloc_r+0x3e>
 800a65c:	4621      	mov	r1, r4
 800a65e:	4630      	mov	r0, r6
 800a660:	f000 f83c 	bl	800a6dc <_sbrk_r>
 800a664:	6038      	str	r0, [r7, #0]
 800a666:	4629      	mov	r1, r5
 800a668:	4630      	mov	r0, r6
 800a66a:	f000 f837 	bl	800a6dc <_sbrk_r>
 800a66e:	1c43      	adds	r3, r0, #1
 800a670:	d123      	bne.n	800a6ba <_malloc_r+0x92>
 800a672:	230c      	movs	r3, #12
 800a674:	6033      	str	r3, [r6, #0]
 800a676:	4630      	mov	r0, r6
 800a678:	f000 f846 	bl	800a708 <__malloc_unlock>
 800a67c:	e7e3      	b.n	800a646 <_malloc_r+0x1e>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	1b5b      	subs	r3, r3, r5
 800a682:	d417      	bmi.n	800a6b4 <_malloc_r+0x8c>
 800a684:	2b0b      	cmp	r3, #11
 800a686:	d903      	bls.n	800a690 <_malloc_r+0x68>
 800a688:	6023      	str	r3, [r4, #0]
 800a68a:	441c      	add	r4, r3
 800a68c:	6025      	str	r5, [r4, #0]
 800a68e:	e004      	b.n	800a69a <_malloc_r+0x72>
 800a690:	6863      	ldr	r3, [r4, #4]
 800a692:	42a2      	cmp	r2, r4
 800a694:	bf0c      	ite	eq
 800a696:	600b      	streq	r3, [r1, #0]
 800a698:	6053      	strne	r3, [r2, #4]
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 f834 	bl	800a708 <__malloc_unlock>
 800a6a0:	f104 000b 	add.w	r0, r4, #11
 800a6a4:	1d23      	adds	r3, r4, #4
 800a6a6:	f020 0007 	bic.w	r0, r0, #7
 800a6aa:	1ac2      	subs	r2, r0, r3
 800a6ac:	d0cc      	beq.n	800a648 <_malloc_r+0x20>
 800a6ae:	1a1b      	subs	r3, r3, r0
 800a6b0:	50a3      	str	r3, [r4, r2]
 800a6b2:	e7c9      	b.n	800a648 <_malloc_r+0x20>
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	6864      	ldr	r4, [r4, #4]
 800a6b8:	e7cc      	b.n	800a654 <_malloc_r+0x2c>
 800a6ba:	1cc4      	adds	r4, r0, #3
 800a6bc:	f024 0403 	bic.w	r4, r4, #3
 800a6c0:	42a0      	cmp	r0, r4
 800a6c2:	d0e3      	beq.n	800a68c <_malloc_r+0x64>
 800a6c4:	1a21      	subs	r1, r4, r0
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f000 f808 	bl	800a6dc <_sbrk_r>
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	d1dd      	bne.n	800a68c <_malloc_r+0x64>
 800a6d0:	e7cf      	b.n	800a672 <_malloc_r+0x4a>
 800a6d2:	bf00      	nop
 800a6d4:	200000b8 	.word	0x200000b8
 800a6d8:	200000bc 	.word	0x200000bc

0800a6dc <_sbrk_r>:
 800a6dc:	b538      	push	{r3, r4, r5, lr}
 800a6de:	4d06      	ldr	r5, [pc, #24]	; (800a6f8 <_sbrk_r+0x1c>)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	602b      	str	r3, [r5, #0]
 800a6e8:	f7f6 fb96 	bl	8000e18 <_sbrk>
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	d102      	bne.n	800a6f6 <_sbrk_r+0x1a>
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	b103      	cbz	r3, 800a6f6 <_sbrk_r+0x1a>
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	bd38      	pop	{r3, r4, r5, pc}
 800a6f8:	20000fe8 	.word	0x20000fe8

0800a6fc <__malloc_lock>:
 800a6fc:	4801      	ldr	r0, [pc, #4]	; (800a704 <__malloc_lock+0x8>)
 800a6fe:	f000 b809 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800a702:	bf00      	nop
 800a704:	20000ff0 	.word	0x20000ff0

0800a708 <__malloc_unlock>:
 800a708:	4801      	ldr	r0, [pc, #4]	; (800a710 <__malloc_unlock+0x8>)
 800a70a:	f000 b804 	b.w	800a716 <__retarget_lock_release_recursive>
 800a70e:	bf00      	nop
 800a710:	20000ff0 	.word	0x20000ff0

0800a714 <__retarget_lock_acquire_recursive>:
 800a714:	4770      	bx	lr

0800a716 <__retarget_lock_release_recursive>:
 800a716:	4770      	bx	lr

0800a718 <_init>:
 800a718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71a:	bf00      	nop
 800a71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a71e:	bc08      	pop	{r3}
 800a720:	469e      	mov	lr, r3
 800a722:	4770      	bx	lr

0800a724 <_fini>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	bf00      	nop
 800a728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72a:	bc08      	pop	{r3}
 800a72c:	469e      	mov	lr, r3
 800a72e:	4770      	bx	lr
