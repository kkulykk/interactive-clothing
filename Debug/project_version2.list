
project_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013564  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf8  08013708  08013708  00023708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014400  08014400  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014400  08014400  00024400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014408  08014408  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014408  08014408  00024408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801440c  0801440c  0002440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08014410  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  200002d8  080146e8  000302d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001550  080146e8  00031550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a17a  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f6f  00000000  00000000  0005a482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  000603f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b88  00000000  00000000  000621b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df27  00000000  00000000  00063d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c76  00000000  00000000  00081c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa90c  00000000  00000000  000aa8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001551e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d90  00000000  00000000  0015523c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080136ec 	.word	0x080136ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	080136ec 	.word	0x080136ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ebe:	f002 fde9 	bl	8003a94 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000ec8:	f107 030f 	add.w	r3, r7, #15
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f002 fe29 	bl	8003b28 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000ee0:	f107 030f 	add.w	r3, r7, #15
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2123      	movs	r1, #35	; 0x23
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fe1d 	bl	8003b28 <GYRO_IO_Write>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000f0a:	f002 fdc3 	bl	8003a94 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	2201      	movs	r2, #1
 8000f12:	210f      	movs	r1, #15
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 fe39 	bl	8003b8c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2124      	movs	r1, #36	; 0x24
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fe2b 	bl	8003b8c <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	2201      	movs	r2, #1
 8000f44:	2124      	movs	r1, #36	; 0x24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fdee 	bl	8003b28 <GYRO_IO_Write>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fdd9 	bl	8003b28 <GYRO_IO_Write>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000f90:	f107 030f 	add.w	r3, r7, #15
 8000f94:	2201      	movs	r2, #1
 8000f96:	2130      	movs	r1, #48	; 0x30
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f002 fdf7 	bl	8003b8c <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000f9e:	f107 030e 	add.w	r3, r7, #14
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2122      	movs	r1, #34	; 0x22
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fdf0 	bl	8003b8c <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	121b      	asrs	r3, r3, #8
 8000fbc:	b25a      	sxtb	r2, r3
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	f023 0320 	bic.w	r3, r3, #32
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8000fe0:	f107 030f 	add.w	r3, r7, #15
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2130      	movs	r1, #48	; 0x30
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f002 fd9d 	bl	8003b28 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2122      	movs	r1, #34	; 0x22
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fd96 	bl	8003b28 <GYRO_IO_Write>
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800100e:	f107 030f 	add.w	r3, r7, #15
 8001012:	2201      	movs	r2, #1
 8001014:	2122      	movs	r1, #34	; 0x22
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fdb8 	bl	8003b8c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10a      	bne.n	8001038 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e00c      	b.n	8001052 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d109      	bne.n	8001052 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	f023 0308 	bic.w	r3, r3, #8
 8001044:	b2db      	uxtb	r3, r3
 8001046:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	b2db      	uxtb	r3, r3
 8001050:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001052:	f107 030f 	add.w	r3, r7, #15
 8001056:	2201      	movs	r2, #1
 8001058:	2122      	movs	r1, #34	; 0x22
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fd64 	bl	8003b28 <GYRO_IO_Write>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001072:	f107 030f 	add.w	r3, r7, #15
 8001076:	2201      	movs	r2, #1
 8001078:	2122      	movs	r1, #34	; 0x22
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fd86 	bl	8003b8c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d107      	bne.n	8001096 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800108c:	b2db      	uxtb	r3, r3
 800108e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e009      	b.n	80010aa <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d106      	bne.n	80010aa <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
 800109e:	f023 0308 	bic.w	r3, r3, #8
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80010aa:	f107 030f 	add.w	r3, r7, #15
 80010ae:	2201      	movs	r2, #1
 80010b0:	2122      	movs	r1, #34	; 0x22
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fd38 	bl	8003b28 <GYRO_IO_Write>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80010ca:	f107 030f 	add.w	r3, r7, #15
 80010ce:	2201      	movs	r2, #1
 80010d0:	2121      	movs	r1, #33	; 0x21
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 fd5a 	bl	8003b8c <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80010ec:	f107 030f 	add.w	r3, r7, #15
 80010f0:	2201      	movs	r2, #1
 80010f2:	2121      	movs	r1, #33	; 0x21
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fd17 	bl	8003b28 <GYRO_IO_Write>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800110c:	f107 030f 	add.w	r3, r7, #15
 8001110:	2201      	movs	r2, #1
 8001112:	2124      	movs	r1, #36	; 0x24
 8001114:	4618      	mov	r0, r3
 8001116:	f002 fd39 	bl	8003b8c <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f023 0310 	bic.w	r3, r3, #16
 8001120:	b2db      	uxtb	r3, r3
 8001122:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4313      	orrs	r3, r2
 800112a:	b2db      	uxtb	r3, r3
 800112c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800112e:	f107 030f 	add.w	r3, r7, #15
 8001132:	2201      	movs	r2, #1
 8001134:	2124      	movs	r1, #36	; 0x24
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fcf6 	bl	8003b28 <GYRO_IO_Write>
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	2300      	movs	r3, #0
 8001152:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	2201      	movs	r2, #1
 8001172:	2123      	movs	r1, #35	; 0x23
 8001174:	4618      	mov	r0, r3
 8001176:	f002 fd09 	bl	8003b8c <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800117a:	f107 0318 	add.w	r3, r7, #24
 800117e:	2206      	movs	r2, #6
 8001180:	2128      	movs	r1, #40	; 0x28
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fd02 	bl	8003b8c <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d126      	bne.n	80011e0 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
 8001196:	e01f      	b.n	80011d8 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	3301      	adds	r3, #1
 800119e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011a2:	4413      	add	r3, r2
 80011a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011b6:	440b      	add	r3, r1
 80011b8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4413      	add	r3, r2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011cc:	440b      	add	r3, r1
 80011ce:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	3301      	adds	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	dddc      	ble.n	8001198 <I3G4250D_ReadXYZAngRate+0x54>
 80011de:	e025      	b.n	800122c <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	e01f      	b.n	8001226 <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80011ee:	4413      	add	r3, r2
 80011f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	3301      	adds	r3, #1
 8001200:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001204:	440b      	add	r3, r1
 8001206:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29b      	uxth	r3, r3
 8001210:	b21a      	sxth	r2, r3
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800121a:	440b      	add	r3, r1
 800121c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	3301      	adds	r3, #1
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	2b02      	cmp	r3, #2
 800122a:	dddc      	ble.n	80011e6 <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001232:	2b20      	cmp	r3, #32
 8001234:	d00c      	beq.n	8001250 <I3G4250D_ReadXYZAngRate+0x10c>
 8001236:	2b20      	cmp	r3, #32
 8001238:	dc0d      	bgt.n	8001256 <I3G4250D_ReadXYZAngRate+0x112>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <I3G4250D_ReadXYZAngRate+0x100>
 800123e:	2b10      	cmp	r3, #16
 8001240:	d003      	beq.n	800124a <I3G4250D_ReadXYZAngRate+0x106>
 8001242:	e008      	b.n	8001256 <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <I3G4250D_ReadXYZAngRate+0x158>)
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001248:	e005      	b.n	8001256 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <I3G4250D_ReadXYZAngRate+0x15c>)
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800124e:	e002      	b.n	8001256 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <I3G4250D_ReadXYZAngRate+0x160>)
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001254:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
 800125a:	e017      	b.n	800128c <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001264:	4413      	add	r3, r2
 8001266:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800127e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001282:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	3301      	adds	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	2b02      	cmp	r3, #2
 8001290:	dde4      	ble.n	800125c <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	; 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	410c0000 	.word	0x410c0000
 80012a0:	418c0000 	.word	0x418c0000
 80012a4:	428c0000 	.word	0x428c0000

080012a8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80012b2:	2300      	movs	r3, #0
 80012b4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80012b6:	f002 fbed 	bl	8003a94 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80012c0:	f107 030f 	add.w	r3, r7, #15
 80012c4:	2201      	movs	r2, #1
 80012c6:	2120      	movs	r1, #32
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fc2d 	bl	8003b28 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80012d8:	f107 030f 	add.w	r3, r7, #15
 80012dc:	2201      	movs	r2, #1
 80012de:	2123      	movs	r1, #35	; 0x23
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fc21 	bl	8003b28 <GYRO_IO_Write>
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001302:	f002 fbc7 	bl	8003a94 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	2201      	movs	r2, #1
 800130a:	210f      	movs	r1, #15
 800130c:	4618      	mov	r0, r3
 800130e:	f002 fc3d 	bl	8003b8c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001312:	79fb      	ldrb	r3, [r7, #7]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	2201      	movs	r2, #1
 8001326:	2124      	movs	r1, #36	; 0x24
 8001328:	4618      	mov	r0, r3
 800132a:	f002 fc2f 	bl	8003b8c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001334:	b2db      	uxtb	r3, r3
 8001336:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001338:	1dfb      	adds	r3, r7, #7
 800133a:	2201      	movs	r2, #1
 800133c:	2124      	movs	r1, #36	; 0x24
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fbf2 	bl	8003b28 <GYRO_IO_Write>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001360:	f107 030f 	add.w	r3, r7, #15
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fbdd 	bl	8003b28 <GYRO_IO_Write>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	2300      	movs	r3, #0
 8001386:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001388:	f107 030f 	add.w	r3, r7, #15
 800138c:	2201      	movs	r2, #1
 800138e:	2130      	movs	r1, #48	; 0x30
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fbfb 	bl	8003b8c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001396:	f107 030e 	add.w	r3, r7, #14
 800139a:	2201      	movs	r2, #1
 800139c:	2122      	movs	r1, #34	; 0x22
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fbf4 	bl	8003b8c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	121b      	asrs	r3, r3, #8
 80013b4:	b25a      	sxtb	r2, r3
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80013c2:	7bbb      	ldrb	r3, [r7, #14]
 80013c4:	f023 0320 	bic.w	r3, r3, #32
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	7bbb      	ldrb	r3, [r7, #14]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80013d8:	f107 030f 	add.w	r3, r7, #15
 80013dc:	2201      	movs	r2, #1
 80013de:	2130      	movs	r1, #48	; 0x30
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fba1 	bl	8003b28 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80013e6:	f107 030e 	add.w	r3, r7, #14
 80013ea:	2201      	movs	r2, #1
 80013ec:	2122      	movs	r1, #34	; 0x22
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 fb9a 	bl	8003b28 <GYRO_IO_Write>
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	2201      	movs	r2, #1
 800140c:	2122      	movs	r1, #34	; 0x22
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fbbc 	bl	8003b8c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10a      	bne.n	8001430 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001420:	b2db      	uxtb	r3, r3
 8001422:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800142a:	b2db      	uxtb	r3, r3
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	e00c      	b.n	800144a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d109      	bne.n	800144a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	f023 0308 	bic.w	r3, r3, #8
 800143c:	b2db      	uxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	b2db      	uxtb	r3, r3
 8001448:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800144a:	f107 030f 	add.w	r3, r7, #15
 800144e:	2201      	movs	r2, #1
 8001450:	2122      	movs	r1, #34	; 0x22
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fb68 	bl	8003b28 <GYRO_IO_Write>
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800146a:	f107 030f 	add.w	r3, r7, #15
 800146e:	2201      	movs	r2, #1
 8001470:	2122      	movs	r1, #34	; 0x22
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fb8a 	bl	8003b8c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001484:	b2db      	uxtb	r3, r3
 8001486:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	73fb      	strb	r3, [r7, #15]
 800148c:	e009      	b.n	80014a2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	f023 0308 	bic.w	r3, r3, #8
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80014a2:	f107 030f 	add.w	r3, r7, #15
 80014a6:	2201      	movs	r2, #1
 80014a8:	2122      	movs	r1, #34	; 0x22
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fb3c 	bl	8003b28 <GYRO_IO_Write>
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80014c2:	f107 030f 	add.w	r3, r7, #15
 80014c6:	2201      	movs	r2, #1
 80014c8:	2121      	movs	r1, #33	; 0x21
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fb5e 	bl	8003b8c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	4313      	orrs	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80014e4:	f107 030f 	add.w	r3, r7, #15
 80014e8:	2201      	movs	r2, #1
 80014ea:	2121      	movs	r1, #33	; 0x21
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 fb1b 	bl	8003b28 <GYRO_IO_Write>
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001504:	f107 030f 	add.w	r3, r7, #15
 8001508:	2201      	movs	r2, #1
 800150a:	2124      	movs	r1, #36	; 0x24
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb3d 	bl	8003b8c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	f023 0310 	bic.w	r3, r3, #16
 8001518:	b2db      	uxtb	r3, r3
 800151a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4313      	orrs	r3, r2
 8001522:	b2db      	uxtb	r3, r3
 8001524:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001526:	f107 030f 	add.w	r3, r7, #15
 800152a:	2201      	movs	r2, #1
 800152c:	2124      	movs	r1, #36	; 0x24
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fafa 	bl	8003b28 <GYRO_IO_Write>
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	2300      	movs	r3, #0
 800154a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001564:	f107 030f 	add.w	r3, r7, #15
 8001568:	2201      	movs	r2, #1
 800156a:	2123      	movs	r1, #35	; 0x23
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fb0d 	bl	8003b8c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001572:	f107 0318 	add.w	r3, r7, #24
 8001576:	2206      	movs	r2, #6
 8001578:	2128      	movs	r1, #40	; 0x28
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fb06 	bl	8003b8c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d126      	bne.n	80015d8 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	e01f      	b.n	80015d0 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	3301      	adds	r3, #1
 8001596:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800159a:	4413      	add	r3, r2
 800159c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015ae:	440b      	add	r3, r1
 80015b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015c4:	440b      	add	r3, r1
 80015c6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	3301      	adds	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	dddc      	ble.n	8001590 <L3GD20_ReadXYZAngRate+0x54>
 80015d6:	e025      	b.n	8001624 <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
 80015dc:	e01f      	b.n	800161e <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015e6:	4413      	add	r3, r2
 80015e8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	3301      	adds	r3, #1
 80015f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015fc:	440b      	add	r3, r1
 80015fe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b29b      	uxth	r3, r3
 8001608:	b21a      	sxth	r2, r3
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001612:	440b      	add	r3, r1
 8001614:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	3301      	adds	r3, #1
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	2b02      	cmp	r3, #2
 8001622:	dddc      	ble.n	80015de <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800162a:	2b20      	cmp	r3, #32
 800162c:	d00c      	beq.n	8001648 <L3GD20_ReadXYZAngRate+0x10c>
 800162e:	2b20      	cmp	r3, #32
 8001630:	dc0d      	bgt.n	800164e <L3GD20_ReadXYZAngRate+0x112>
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <L3GD20_ReadXYZAngRate+0x100>
 8001636:	2b10      	cmp	r3, #16
 8001638:	d003      	beq.n	8001642 <L3GD20_ReadXYZAngRate+0x106>
 800163a:	e008      	b.n	800164e <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <L3GD20_ReadXYZAngRate+0x158>)
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001640:	e005      	b.n	800164e <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <L3GD20_ReadXYZAngRate+0x15c>)
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001646:	e002      	b.n	800164e <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <L3GD20_ReadXYZAngRate+0x160>)
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800164c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	e017      	b.n	8001684 <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800165c:	4413      	add	r3, r2
 800165e:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	3301      	adds	r3, #1
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	2b02      	cmp	r3, #2
 8001688:	dde4      	ble.n	8001654 <L3GD20_ReadXYZAngRate+0x118>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	410c0000 	.word	0x410c0000
 8001698:	418c0000 	.word	0x418c0000
 800169c:	428c0000 	.word	0x428c0000

080016a0 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80016ae:	f002 faa7 	bl	8003c00 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	461a      	mov	r2, r3
 80016ba:	2120      	movs	r1, #32
 80016bc:	2032      	movs	r0, #50	; 0x32
 80016be:	f002 faf7 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80016c2:	2300      	movs	r3, #0
 80016c4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	461a      	mov	r2, r3
 80016ca:	2123      	movs	r1, #35	; 0x23
 80016cc:	2032      	movs	r0, #50	; 0x32
 80016ce:	f002 faef 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80016ee:	2300      	movs	r3, #0
 80016f0:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80016f2:	f002 fa85 	bl	8003c00 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80016f6:	210f      	movs	r1, #15
 80016f8:	2032      	movs	r0, #50	; 0x32
 80016fa:	f002 faec 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001702:	79fb      	ldrb	r3, [r7, #7]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8001712:	2124      	movs	r1, #36	; 0x24
 8001714:	2032      	movs	r0, #50	; 0x32
 8001716:	f002 fade 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001724:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	461a      	mov	r2, r3
 800172a:	2124      	movs	r1, #36	; 0x24
 800172c:	2032      	movs	r0, #50	; 0x32
 800172e:	f002 fabf 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8001744:	2121      	movs	r1, #33	; 0x21
 8001746:	2032      	movs	r0, #50	; 0x32
 8001748:	f002 fac5 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001758:	7bfa      	ldrb	r2, [r7, #15]
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	4313      	orrs	r3, r2
 800175e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	461a      	mov	r2, r3
 8001764:	2121      	movs	r1, #33	; 0x21
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f002 faa2 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800177e:	2121      	movs	r1, #33	; 0x21
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f002 faa8 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	f023 0308 	bic.w	r3, r3, #8
 8001790:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4313      	orrs	r3, r2
 8001798:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	461a      	mov	r2, r3
 800179e:	2121      	movs	r1, #33	; 0x21
 80017a0:	2032      	movs	r0, #50	; 0x32
 80017a2:	f002 fa85 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b088      	sub	sp, #32
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80017b6:	2300      	movs	r3, #0
 80017b8:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80017be:	2301      	movs	r3, #1
 80017c0:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80017c2:	2123      	movs	r1, #35	; 0x23
 80017c4:	2032      	movs	r0, #50	; 0x32
 80017c6:	f002 fa86 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80017ca:	4603      	mov	r3, r0
 80017cc:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80017ce:	2124      	movs	r1, #36	; 0x24
 80017d0:	2032      	movs	r0, #50	; 0x32
 80017d2:	f002 fa80 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80017d6:	4603      	mov	r3, r0
 80017d8:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80017da:	2128      	movs	r1, #40	; 0x28
 80017dc:	2032      	movs	r0, #50	; 0x32
 80017de:	f002 fa7a 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80017e8:	2129      	movs	r1, #41	; 0x29
 80017ea:	2032      	movs	r0, #50	; 0x32
 80017ec:	f002 fa73 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80017f0:	4603      	mov	r3, r0
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80017f6:	212a      	movs	r1, #42	; 0x2a
 80017f8:	2032      	movs	r0, #50	; 0x32
 80017fa:	f002 fa6c 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80017fe:	4603      	mov	r3, r0
 8001800:	b25b      	sxtb	r3, r3
 8001802:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8001804:	212b      	movs	r1, #43	; 0x2b
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f002 fa65 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 800180c:	4603      	mov	r3, r0
 800180e:	b25b      	sxtb	r3, r3
 8001810:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	2032      	movs	r0, #50	; 0x32
 8001816:	f002 fa5e 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 800181a:	4603      	mov	r3, r0
 800181c:	b25b      	sxtb	r3, r3
 800181e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8001820:	212d      	movs	r1, #45	; 0x2d
 8001822:	2032      	movs	r0, #50	; 0x32
 8001824:	f002 fa57 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001828:	4603      	mov	r3, r0
 800182a:	b25b      	sxtb	r3, r3
 800182c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800182e:	7d3b      	ldrb	r3, [r7, #20]
 8001830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001834:	2b00      	cmp	r3, #0
 8001836:	d126      	bne.n	8001886 <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	77fb      	strb	r3, [r7, #31]
 800183c:	e01f      	b.n	800187e <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800183e:	7ffb      	ldrb	r3, [r7, #31]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	3301      	adds	r3, #1
 8001844:	f107 0220 	add.w	r2, r7, #32
 8001848:	4413      	add	r3, r2
 800184a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800184e:	b29b      	uxth	r3, r3
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b29a      	uxth	r2, r3
 8001854:	7ffb      	ldrb	r3, [r7, #31]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	f107 0120 	add.w	r1, r7, #32
 800185c:	440b      	add	r3, r1
 800185e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b29a      	uxth	r2, r3
 8001868:	7ffb      	ldrb	r3, [r7, #31]
 800186a:	b212      	sxth	r2, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	f107 0120 	add.w	r1, r7, #32
 8001872:	440b      	add	r3, r1
 8001874:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001878:	7ffb      	ldrb	r3, [r7, #31]
 800187a:	3301      	adds	r3, #1
 800187c:	77fb      	strb	r3, [r7, #31]
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d9dc      	bls.n	800183e <LSM303AGR_AccReadXYZ+0x90>
 8001884:	e025      	b.n	80018d2 <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	77fb      	strb	r3, [r7, #31]
 800188a:	e01f      	b.n	80018cc <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	f107 0220 	add.w	r2, r7, #32
 8001894:	4413      	add	r3, r2
 8001896:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800189a:	b29b      	uxth	r3, r3
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b29a      	uxth	r2, r3
 80018a0:	7ffb      	ldrb	r3, [r7, #31]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	3301      	adds	r3, #1
 80018a6:	f107 0120 	add.w	r1, r7, #32
 80018aa:	440b      	add	r3, r1
 80018ac:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	7ffb      	ldrb	r3, [r7, #31]
 80018b8:	b212      	sxth	r2, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	f107 0120 	add.w	r1, r7, #32
 80018c0:	440b      	add	r3, r1
 80018c2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80018c6:	7ffb      	ldrb	r3, [r7, #31]
 80018c8:	3301      	adds	r3, #1
 80018ca:	77fb      	strb	r3, [r7, #31]
 80018cc:	7ffb      	ldrb	r3, [r7, #31]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d9dc      	bls.n	800188c <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 80018d2:	7d3b      	ldrb	r3, [r7, #20]
 80018d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018d8:	2b30      	cmp	r3, #48	; 0x30
 80018da:	d013      	beq.n	8001904 <LSM303AGR_AccReadXYZ+0x156>
 80018dc:	2b30      	cmp	r3, #48	; 0x30
 80018de:	dc14      	bgt.n	800190a <LSM303AGR_AccReadXYZ+0x15c>
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d00c      	beq.n	80018fe <LSM303AGR_AccReadXYZ+0x150>
 80018e4:	2b20      	cmp	r3, #32
 80018e6:	dc10      	bgt.n	800190a <LSM303AGR_AccReadXYZ+0x15c>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <LSM303AGR_AccReadXYZ+0x144>
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d003      	beq.n	80018f8 <LSM303AGR_AccReadXYZ+0x14a>
 80018f0:	e00b      	b.n	800190a <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80018f2:	2301      	movs	r3, #1
 80018f4:	77bb      	strb	r3, [r7, #30]
    break;
 80018f6:	e008      	b.n	800190a <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 80018f8:	2302      	movs	r3, #2
 80018fa:	77bb      	strb	r3, [r7, #30]
    break;
 80018fc:	e005      	b.n	800190a <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 80018fe:	2304      	movs	r3, #4
 8001900:	77bb      	strb	r3, [r7, #30]
    break;
 8001902:	e002      	b.n	800190a <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8001904:	230c      	movs	r3, #12
 8001906:	77bb      	strb	r3, [r7, #30]
    break;
 8001908:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	77fb      	strb	r3, [r7, #31]
 800190e:	e015      	b.n	800193c <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001910:	7ffb      	ldrb	r3, [r7, #31]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	f107 0220 	add.w	r2, r7, #32
 8001918:	4413      	add	r3, r2
 800191a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800191e:	b29a      	uxth	r2, r3
 8001920:	7fbb      	ldrb	r3, [r7, #30]
 8001922:	b29b      	uxth	r3, r3
 8001924:	fb12 f303 	smulbb	r3, r2, r3
 8001928:	b299      	uxth	r1, r3
 800192a:	7ffb      	ldrb	r3, [r7, #31]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	b20a      	sxth	r2, r1
 8001934:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	3301      	adds	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
 800193c:	7ffb      	ldrb	r3, [r7, #31]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d9e6      	bls.n	8001910 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800195a:	2121      	movs	r1, #33	; 0x21
 800195c:	2032      	movs	r0, #50	; 0x32
 800195e:	f002 f9ba 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001962:	4603      	mov	r3, r0
 8001964:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 800196e:	7bfa      	ldrb	r2, [r7, #15]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4313      	orrs	r3, r2
 8001974:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	461a      	mov	r2, r3
 800197a:	2121      	movs	r1, #33	; 0x21
 800197c:	2032      	movs	r0, #50	; 0x32
 800197e:	f002 f997 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001998:	2122      	movs	r1, #34	; 0x22
 800199a:	2032      	movs	r0, #50	; 0x32
 800199c:	f002 f99b 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80019a0:	4603      	mov	r3, r0
 80019a2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	461a      	mov	r2, r3
 80019b0:	2122      	movs	r1, #34	; 0x22
 80019b2:	2032      	movs	r0, #50	; 0x32
 80019b4:	f002 f97c 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 80019ce:	2138      	movs	r1, #56	; 0x38
 80019d0:	2032      	movs	r0, #50	; 0x32
 80019d2:	f002 f980 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 80019d6:	4603      	mov	r3, r0
 80019d8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4313      	orrs	r3, r2
 80019e0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	461a      	mov	r2, r3
 80019e6:	2138      	movs	r1, #56	; 0x38
 80019e8:	2032      	movs	r0, #50	; 0x32
 80019ea:	f002 f961 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80019ee:	230a      	movs	r3, #10
 80019f0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	461a      	mov	r2, r3
 80019f6:	213a      	movs	r1, #58	; 0x3a
 80019f8:	2032      	movs	r0, #50	; 0x32
 80019fa:	f002 f959 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80019fe:	2305      	movs	r3, #5
 8001a00:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	461a      	mov	r2, r3
 8001a06:	213b      	movs	r1, #59	; 0x3b
 8001a08:	2032      	movs	r0, #50	; 0x32
 8001a0a:	f002 f951 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	461a      	mov	r2, r3
 8001a12:	213c      	movs	r1, #60	; 0x3c
 8001a14:	2032      	movs	r0, #50	; 0x32
 8001a16:	f002 f94b 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001a1a:	2332      	movs	r3, #50	; 0x32
 8001a1c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001a1e:	7bfb      	ldrb	r3, [r7, #15]
 8001a20:	461a      	mov	r2, r3
 8001a22:	213d      	movs	r1, #61	; 0x3d
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f002 f943 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001a36:	f002 f90b 	bl	8003c50 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001a3a:	2080      	movs	r0, #128	; 0x80
 8001a3c:	f7ff ffa5 	bl	800198a <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001a40:	2004      	movs	r0, #4
 8001a42:	f7ff ff83 	bl	800194c <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8001a46:	2010      	movs	r0, #16
 8001a48:	f7ff ffba 	bl	80019c0 <LSM303AGR_AccClickITEnable>
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001a5e:	f002 f8cf 	bl	8003c00 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	2032      	movs	r0, #50	; 0x32
 8001a6e:	f002 f91f 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2123      	movs	r1, #35	; 0x23
 8001a7c:	2032      	movs	r0, #50	; 0x32
 8001a7e:	f002 f917 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001aa2:	f002 f8ad 	bl	8003c00 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f002 f914 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001ac2:	2124      	movs	r1, #36	; 0x24
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f002 f906 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ad4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2124      	movs	r1, #36	; 0x24
 8001adc:	2032      	movs	r0, #50	; 0x32
 8001ade:	f002 f8e7 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001af4:	2121      	movs	r1, #33	; 0x21
 8001af6:	2032      	movs	r0, #50	; 0x32
 8001af8:	f002 f8ed 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001afc:	4603      	mov	r3, r0
 8001afe:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001b08:	7bfa      	ldrb	r2, [r7, #15]
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	461a      	mov	r2, r3
 8001b14:	2121      	movs	r1, #33	; 0x21
 8001b16:	2032      	movs	r0, #50	; 0x32
 8001b18:	f002 f8ca 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001b2e:	2121      	movs	r1, #33	; 0x21
 8001b30:	2032      	movs	r0, #50	; 0x32
 8001b32:	f002 f8d0 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	f023 0308 	bic.w	r3, r3, #8
 8001b40:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	2121      	movs	r1, #33	; 0x21
 8001b50:	2032      	movs	r0, #50	; 0x32
 8001b52:	f002 f8ad 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b088      	sub	sp, #32
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001b66:	2300      	movs	r3, #0
 8001b68:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001b72:	2123      	movs	r1, #35	; 0x23
 8001b74:	2032      	movs	r0, #50	; 0x32
 8001b76:	f002 f8ae 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001b7e:	2124      	movs	r1, #36	; 0x24
 8001b80:	2032      	movs	r0, #50	; 0x32
 8001b82:	f002 f8a8 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001b86:	4603      	mov	r3, r0
 8001b88:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001b8a:	2128      	movs	r1, #40	; 0x28
 8001b8c:	2032      	movs	r0, #50	; 0x32
 8001b8e:	f002 f8a2 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001b98:	2129      	movs	r1, #41	; 0x29
 8001b9a:	2032      	movs	r0, #50	; 0x32
 8001b9c:	f002 f89b 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001ba6:	212a      	movs	r1, #42	; 0x2a
 8001ba8:	2032      	movs	r0, #50	; 0x32
 8001baa:	f002 f894 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b25b      	sxtb	r3, r3
 8001bb2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001bb4:	212b      	movs	r1, #43	; 0x2b
 8001bb6:	2032      	movs	r0, #50	; 0x32
 8001bb8:	f002 f88d 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001bc2:	212c      	movs	r1, #44	; 0x2c
 8001bc4:	2032      	movs	r0, #50	; 0x32
 8001bc6:	f002 f886 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001bd0:	212d      	movs	r1, #45	; 0x2d
 8001bd2:	2032      	movs	r0, #50	; 0x32
 8001bd4:	f002 f87f 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001bde:	7d3b      	ldrb	r3, [r7, #20]
 8001be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d126      	bne.n	8001c36 <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	77fb      	strb	r3, [r7, #31]
 8001bec:	e01f      	b.n	8001c2e <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001bee:	7ffb      	ldrb	r3, [r7, #31]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f107 0220 	add.w	r2, r7, #32
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	f107 0120 	add.w	r1, r7, #32
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4413      	add	r3, r2
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
 8001c1a:	b212      	sxth	r2, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	f107 0120 	add.w	r1, r7, #32
 8001c22:	440b      	add	r3, r1
 8001c24:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	77fb      	strb	r3, [r7, #31]
 8001c2e:	7ffb      	ldrb	r3, [r7, #31]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d9dc      	bls.n	8001bee <LSM303DLHC_AccReadXYZ+0x90>
 8001c34:	e025      	b.n	8001c82 <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	77fb      	strb	r3, [r7, #31]
 8001c3a:	e01f      	b.n	8001c7c <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001c3c:	7ffb      	ldrb	r3, [r7, #31]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	f107 0220 	add.w	r2, r7, #32
 8001c44:	4413      	add	r3, r2
 8001c46:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	7ffb      	ldrb	r3, [r7, #31]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	3301      	adds	r3, #1
 8001c56:	f107 0120 	add.w	r1, r7, #32
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	7ffb      	ldrb	r3, [r7, #31]
 8001c68:	b212      	sxth	r2, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	f107 0120 	add.w	r1, r7, #32
 8001c70:	440b      	add	r3, r1
 8001c72:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001c76:	7ffb      	ldrb	r3, [r7, #31]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	77fb      	strb	r3, [r7, #31]
 8001c7c:	7ffb      	ldrb	r3, [r7, #31]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d9dc      	bls.n	8001c3c <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001c82:	7d3b      	ldrb	r3, [r7, #20]
 8001c84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c88:	2b30      	cmp	r3, #48	; 0x30
 8001c8a:	d013      	beq.n	8001cb4 <LSM303DLHC_AccReadXYZ+0x156>
 8001c8c:	2b30      	cmp	r3, #48	; 0x30
 8001c8e:	dc14      	bgt.n	8001cba <LSM303DLHC_AccReadXYZ+0x15c>
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d00c      	beq.n	8001cae <LSM303DLHC_AccReadXYZ+0x150>
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	dc10      	bgt.n	8001cba <LSM303DLHC_AccReadXYZ+0x15c>
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <LSM303DLHC_AccReadXYZ+0x144>
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d003      	beq.n	8001ca8 <LSM303DLHC_AccReadXYZ+0x14a>
 8001ca0:	e00b      	b.n	8001cba <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	77bb      	strb	r3, [r7, #30]
    break;
 8001ca6:	e008      	b.n	8001cba <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	77bb      	strb	r3, [r7, #30]
    break;
 8001cac:	e005      	b.n	8001cba <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	77bb      	strb	r3, [r7, #30]
    break;
 8001cb2:	e002      	b.n	8001cba <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	77bb      	strb	r3, [r7, #30]
    break;
 8001cb8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	77fb      	strb	r3, [r7, #31]
 8001cbe:	e015      	b.n	8001cec <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001cc0:	7ffb      	ldrb	r3, [r7, #31]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	f107 0220 	add.w	r2, r7, #32
 8001cc8:	4413      	add	r3, r2
 8001cca:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	7fbb      	ldrb	r3, [r7, #30]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	fb12 f303 	smulbb	r3, r2, r3
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	7ffb      	ldrb	r3, [r7, #31]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b20a      	sxth	r2, r1
 8001ce4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	77fb      	strb	r3, [r7, #31]
 8001cec:	7ffb      	ldrb	r3, [r7, #31]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d9e6      	bls.n	8001cc0 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001d0a:	2121      	movs	r1, #33	; 0x21
 8001d0c:	2032      	movs	r0, #50	; 0x32
 8001d0e:	f001 ffe2 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001d12:	4603      	mov	r3, r0
 8001d14:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2121      	movs	r1, #33	; 0x21
 8001d2c:	2032      	movs	r0, #50	; 0x32
 8001d2e:	f001 ffbf 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001d48:	2122      	movs	r1, #34	; 0x22
 8001d4a:	2032      	movs	r0, #50	; 0x32
 8001d4c:	f001 ffc3 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2122      	movs	r1, #34	; 0x22
 8001d62:	2032      	movs	r0, #50	; 0x32
 8001d64:	f001 ffa4 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001d7e:	2138      	movs	r1, #56	; 0x38
 8001d80:	2032      	movs	r0, #50	; 0x32
 8001d82:	f001 ffa8 	bl	8003cd6 <COMPASSACCELERO_IO_Read>
 8001d86:	4603      	mov	r3, r0
 8001d88:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	461a      	mov	r2, r3
 8001d96:	2138      	movs	r1, #56	; 0x38
 8001d98:	2032      	movs	r0, #50	; 0x32
 8001d9a:	f001 ff89 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001d9e:	230a      	movs	r3, #10
 8001da0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	461a      	mov	r2, r3
 8001da6:	213a      	movs	r1, #58	; 0x3a
 8001da8:	2032      	movs	r0, #50	; 0x32
 8001daa:	f001 ff81 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001dae:	2305      	movs	r3, #5
 8001db0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	461a      	mov	r2, r3
 8001db6:	213b      	movs	r1, #59	; 0x3b
 8001db8:	2032      	movs	r0, #50	; 0x32
 8001dba:	f001 ff79 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	213c      	movs	r1, #60	; 0x3c
 8001dc4:	2032      	movs	r0, #50	; 0x32
 8001dc6:	f001 ff73 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001dca:	2332      	movs	r3, #50	; 0x32
 8001dcc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	213d      	movs	r1, #61	; 0x3d
 8001dd4:	2032      	movs	r0, #50	; 0x32
 8001dd6:	f001 ff6b 	bl	8003cb0 <COMPASSACCELERO_IO_Write>
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001de2:	b580      	push	{r7, lr}
 8001de4:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001de6:	f001 ff33 	bl	8003c50 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001dea:	2080      	movs	r0, #128	; 0x80
 8001dec:	f7ff ffa5 	bl	8001d3a <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001df0:	2004      	movs	r0, #4
 8001df2:	f7ff ff83 	bl	8001cfc <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001df6:	2010      	movs	r0, #16
 8001df8:	f7ff ffba 	bl	8001d70 <LSM303DLHC_AccClickITEnable>
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e06:	463b      	mov	r3, r7
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e14:	4a28      	ldr	r2, [pc, #160]	; (8001eb8 <MX_ADC1_Init+0xb8>)
 8001e16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e18:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e40:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <MX_ADC1_Init+0xbc>)
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e5e:	4815      	ldr	r0, [pc, #84]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e60:	f002 fc3a 	bl	80046d8 <HAL_ADC_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e6a:	f001 fb61 	bl	8003530 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e76:	2307      	movs	r3, #7
 8001e78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e80:	f002 fd88 	bl	8004994 <HAL_ADC_ConfigChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001e8a:	f001 fb51 	bl	8003530 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e92:	2302      	movs	r3, #2
 8001e94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e96:	463b      	mov	r3, r7
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <MX_ADC1_Init+0xb4>)
 8001e9c:	f002 fd7a 	bl	8004994 <HAL_ADC_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001ea6:	f001 fb43 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200003d4 	.word	0x200003d4
 8001eb8:	40012000 	.word	0x40012000
 8001ebc:	0f000001 	.word	0x0f000001

08001ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <HAL_ADC_MspInit+0xdc>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d157      	bne.n	8001f92 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_ADC_MspInit+0xe0>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_ADC_MspInit+0xe0>)
 8001eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_ADC_MspInit+0xe0>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_ADC_MspInit+0xe0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <HAL_ADC_MspInit+0xe0>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_ADC_MspInit+0xe0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481d      	ldr	r0, [pc, #116]	; (8001fa4 <HAL_ADC_MspInit+0xe4>)
 8001f2e:	f003 fdff 	bl	8005b30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f34:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_ADC_MspInit+0xec>)
 8001f36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f68:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f78:	f003 f8cc 	bl	8005114 <HAL_DMA_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001f82:	f001 fad5 	bl	8003530 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_ADC_MspInit+0xe8>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	; 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40012000 	.word	0x40012000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	2000041c 	.word	0x2000041c
 8001fac:	40026410 	.word	0x40026410

08001fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <MX_DMA_Init+0x4c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a0f      	ldr	r2, [pc, #60]	; (8001ffc <MX_DMA_Init+0x4c>)
 8001fc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <MX_DMA_Init+0x4c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2038      	movs	r0, #56	; 0x38
 8001fd8:	f003 f84c 	bl	8005074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fdc:	2038      	movs	r0, #56	; 0x38
 8001fde:	f003 f875 	bl	80050cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2039      	movs	r0, #57	; 0x39
 8001fe8:	f003 f844 	bl	8005074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001fec:	2039      	movs	r0, #57	; 0x39
 8001fee:	f003 f86d 	bl	80050cc <HAL_NVIC_EnableIRQ>

}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800

08002000 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08c      	sub	sp, #48	; 0x30
 8002004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	f107 031c 	add.w	r3, r7, #28
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	4b9b      	ldr	r3, [pc, #620]	; (8002288 <MX_GPIO_Init+0x288>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a9a      	ldr	r2, [pc, #616]	; (8002288 <MX_GPIO_Init+0x288>)
 8002020:	f043 0310 	orr.w	r3, r3, #16
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b98      	ldr	r3, [pc, #608]	; (8002288 <MX_GPIO_Init+0x288>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	4b94      	ldr	r3, [pc, #592]	; (8002288 <MX_GPIO_Init+0x288>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a93      	ldr	r2, [pc, #588]	; (8002288 <MX_GPIO_Init+0x288>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b91      	ldr	r3, [pc, #580]	; (8002288 <MX_GPIO_Init+0x288>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b8d      	ldr	r3, [pc, #564]	; (8002288 <MX_GPIO_Init+0x288>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a8c      	ldr	r2, [pc, #560]	; (8002288 <MX_GPIO_Init+0x288>)
 8002058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <MX_GPIO_Init+0x288>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b86      	ldr	r3, [pc, #536]	; (8002288 <MX_GPIO_Init+0x288>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a85      	ldr	r2, [pc, #532]	; (8002288 <MX_GPIO_Init+0x288>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b83      	ldr	r3, [pc, #524]	; (8002288 <MX_GPIO_Init+0x288>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <MX_GPIO_Init+0x288>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a7e      	ldr	r2, [pc, #504]	; (8002288 <MX_GPIO_Init+0x288>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b7c      	ldr	r3, [pc, #496]	; (8002288 <MX_GPIO_Init+0x288>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
 80020a6:	4b78      	ldr	r3, [pc, #480]	; (8002288 <MX_GPIO_Init+0x288>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a77      	ldr	r2, [pc, #476]	; (8002288 <MX_GPIO_Init+0x288>)
 80020ac:	f043 0308 	orr.w	r3, r3, #8
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b75      	ldr	r3, [pc, #468]	; (8002288 <MX_GPIO_Init+0x288>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	2108      	movs	r1, #8
 80020c2:	4872      	ldr	r0, [pc, #456]	; (800228c <MX_GPIO_Init+0x28c>)
 80020c4:	f004 f8f8 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	2101      	movs	r1, #1
 80020cc:	4870      	ldr	r0, [pc, #448]	; (8002290 <MX_GPIO_Init+0x290>)
 80020ce:	f004 f8f3 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	f244 0182 	movw	r1, #16514	; 0x4082
 80020d8:	486e      	ldr	r0, [pc, #440]	; (8002294 <MX_GPIO_Init+0x294>)
 80020da:	f004 f8ed 	bl	80062b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80020de:	2200      	movs	r2, #0
 80020e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80020e4:	486c      	ldr	r0, [pc, #432]	; (8002298 <MX_GPIO_Init+0x298>)
 80020e6:	f004 f8e7 	bl	80062b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80020ea:	2304      	movs	r3, #4
 80020ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80020f6:	f107 031c 	add.w	r3, r7, #28
 80020fa:	4619      	mov	r1, r3
 80020fc:	4863      	ldr	r0, [pc, #396]	; (800228c <MX_GPIO_Init+0x28c>)
 80020fe:	f003 fd17 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002102:	2308      	movs	r3, #8
 8002104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	485c      	ldr	r0, [pc, #368]	; (800228c <MX_GPIO_Init+0x28c>)
 800211a:	f003 fd09 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800211e:	2332      	movs	r3, #50	; 0x32
 8002120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002122:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4856      	ldr	r0, [pc, #344]	; (800228c <MX_GPIO_Init+0x28c>)
 8002134:	f003 fcfc 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002138:	2301      	movs	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	4850      	ldr	r0, [pc, #320]	; (8002290 <MX_GPIO_Init+0x290>)
 8002150:	f003 fcee 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002154:	2308      	movs	r3, #8
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002164:	2305      	movs	r3, #5
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	4619      	mov	r1, r3
 800216e:	4848      	ldr	r0, [pc, #288]	; (8002290 <MX_GPIO_Init+0x290>)
 8002170:	f003 fcde 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002174:	2301      	movs	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	4845      	ldr	r0, [pc, #276]	; (800229c <MX_GPIO_Init+0x29c>)
 8002188:	f003 fcd2 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800218c:	2310      	movs	r3, #16
 800218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800219c:	2306      	movs	r3, #6
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4619      	mov	r1, r3
 80021a6:	483d      	ldr	r0, [pc, #244]	; (800229c <MX_GPIO_Init+0x29c>)
 80021a8:	f003 fcc2 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin;
 80021ac:	f244 0382 	movw	r3, #16514	; 0x4082
 80021b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	4619      	mov	r1, r3
 80021c4:	4833      	ldr	r0, [pc, #204]	; (8002294 <MX_GPIO_Init+0x294>)
 80021c6:	f003 fcb3 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80021ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021dc:	2305      	movs	r3, #5
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4619      	mov	r1, r3
 80021e6:	482b      	ldr	r0, [pc, #172]	; (8002294 <MX_GPIO_Init+0x294>)
 80021e8:	f003 fca2 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80021ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	4825      	ldr	r0, [pc, #148]	; (8002298 <MX_GPIO_Init+0x298>)
 8002204:	f003 fc94 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002208:	f24f 0310 	movw	r3, #61456	; 0xf010
 800220c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800221a:	f107 031c 	add.w	r3, r7, #28
 800221e:	4619      	mov	r1, r3
 8002220:	481d      	ldr	r0, [pc, #116]	; (8002298 <MX_GPIO_Init+0x298>)
 8002222:	f003 fc85 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002226:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002238:	2306      	movs	r3, #6
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4813      	ldr	r0, [pc, #76]	; (8002290 <MX_GPIO_Init+0x290>)
 8002244:	f003 fc74 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002248:	2320      	movs	r3, #32
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	480f      	ldr	r0, [pc, #60]	; (8002298 <MX_GPIO_Init+0x298>)
 800225c:	f003 fc68 	bl	8005b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	2017      	movs	r0, #23
 8002266:	f002 ff05 	bl	8005074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800226a:	2017      	movs	r0, #23
 800226c:	f002 ff2e 	bl	80050cc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2028      	movs	r0, #40	; 0x28
 8002276:	f002 fefd 	bl	8005074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800227a:	2028      	movs	r0, #40	; 0x28
 800227c:	f002 ff26 	bl	80050cc <HAL_NVIC_EnableIRQ>

}
 8002280:	bf00      	nop
 8002282:	3730      	adds	r7, #48	; 0x30
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40021000 	.word	0x40021000
 8002290:	40020800 	.word	0x40020800
 8002294:	40020400 	.word	0x40020400
 8002298:	40020c00 	.word	0x40020c00
 800229c:	40020000 	.word	0x40020000

080022a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022a6:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <MX_I2C1_Init+0x54>)
 80022a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <MX_I2C1_Init+0x58>)
 80022ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <MX_I2C1_Init+0x50>)
 80022de:	f005 fdb1 	bl	8007e44 <HAL_I2C_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80022e8:	f001 f922 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000047c 	.word	0x2000047c
 80022f4:	40005400 	.word	0x40005400
 80022f8:	000186a0 	.word	0x000186a0

080022fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_I2C_MspInit+0x84>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d12c      	bne.n	8002378 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b18      	ldr	r3, [pc, #96]	; (8002384 <HAL_I2C_MspInit+0x88>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a17      	ldr	r2, [pc, #92]	; (8002384 <HAL_I2C_MspInit+0x88>)
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_I2C_MspInit+0x88>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800233a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002340:	2312      	movs	r3, #18
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002344:	2301      	movs	r3, #1
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800234c:	2304      	movs	r3, #4
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	480c      	ldr	r0, [pc, #48]	; (8002388 <HAL_I2C_MspInit+0x8c>)
 8002358:	f003 fbea 	bl	8005b30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_I2C_MspInit+0x88>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_I2C_MspInit+0x88>)
 8002366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800236a:	6413      	str	r3, [r2, #64]	; 0x40
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_I2C_MspInit+0x88>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40005400 	.word	0x40005400
 8002384:	40023800 	.word	0x40023800
 8002388:	40020400 	.word	0x40020400

0800238c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <HAL_I2C_MspDeInit+0x38>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10e      	bne.n	80023bc <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_I2C_MspDeInit+0x3c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <HAL_I2C_MspDeInit+0x3c>)
 80023a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 80023aa:	2140      	movs	r1, #64	; 0x40
 80023ac:	4807      	ldr	r0, [pc, #28]	; (80023cc <HAL_I2C_MspDeInit+0x40>)
 80023ae:	f003 fe5b 	bl	8006068 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 80023b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_I2C_MspDeInit+0x40>)
 80023b8:	f003 fe56 	bl	8006068 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40005400 	.word	0x40005400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020400 	.word	0x40020400

080023d0 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fbdb 	bl	8002b96 <LCD5110_refresh_ll>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f880 	bl	8002504 <LCD5110_wset_cursor>
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f95f 	bl	80026da <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	2100      	movs	r1, #0
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff ffe1 	bl	80023e8 <LCD5110_set_cursor>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f893 	bl	8002570 <LCD5110_wprint>
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b08b      	sub	sp, #44	; 0x2c
 8002458:	af04      	add	r7, sp, #16
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db41      	blt.n	80024f2 <LCD5110_wputchar+0x9e>
 800246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002470:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db3c      	blt.n	80024f2 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8002478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800247e:	461a      	mov	r2, r3
 8002480:	2306      	movs	r3, #6
 8002482:	4413      	add	r3, r2
 8002484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002486:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800248a:	4293      	cmp	r3, r2
 800248c:	d833      	bhi.n	80024f6 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002494:	461a      	mov	r2, r3
 8002496:	2308      	movs	r3, #8
 8002498:	4413      	add	r3, r2
 800249a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d828      	bhi.n	80024f6 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <LCD5110_wputchar+0xac>)
 80024a6:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 80024a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	18d0      	adds	r0, r2, r3
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	18d1      	adds	r1, r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2206      	movs	r2, #6
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	441a      	add	r2, r3
 80024cc:	2306      	movs	r3, #6
 80024ce:	461e      	mov	r6, r3
 80024d0:	2308      	movs	r3, #8
 80024d2:	461c      	mov	r4, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	461d      	mov	r5, r3
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e4:	9302      	str	r3, [sp, #8]
 80024e6:	9501      	str	r5, [sp, #4]
 80024e8:	9400      	str	r4, [sp, #0]
 80024ea:	4633      	mov	r3, r6
 80024ec:	f000 f950 	bl	8002790 <LCD5110_drawBitmap>
 80024f0:	e002      	b.n	80024f8 <LCD5110_wputchar+0xa4>
		return;
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <LCD5110_wputchar+0xa4>
		return;
 80024f6:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fe:	bf00      	nop
 8002500:	080139a8 	.word	0x080139a8

08002504 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	b21a      	sxth	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	b21a      	sxth	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	815a      	strh	r2, [r3, #10]
}
 8002522:	bf00      	nop
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800253e:	b29a      	uxth	r2, r3
 8002540:	2308      	movs	r3, #8
 8002542:	b29b      	uxth	r3, r3
 8002544:	4413      	add	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	b29b      	uxth	r3, r3
 800254c:	b21a      	sxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7b1b      	ldrb	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8002560:	6838      	ldr	r0, [r7, #0]
 8002562:	f7ff ff35 	bl	80023d0 <LCD5110_refresh>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
	...

08002570 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 800257e:	e053      	b.n	8002628 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b0a      	cmp	r3, #10
 8002586:	d010      	beq.n	80025aa <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002596:	4619      	mov	r1, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f7ff ff55 	bl	8002454 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	2306      	movs	r3, #6
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	b21a      	sxth	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025c6:	461a      	mov	r2, r3
 80025c8:	2306      	movs	r3, #6
 80025ca:	4413      	add	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d904      	bls.n	80025e0 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3301      	adds	r3, #1
 80025da:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80025dc:	2b0a      	cmp	r3, #10
 80025de:	d103      	bne.n	80025e8 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b0a      	cmp	r3, #10
 80025e6:	d111      	bne.n	800260c <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff9f 	bl	800252e <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3301      	adds	r3, #1
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a10      	ldr	r2, [pc, #64]	; (800263c <LCD5110_wprint+0xcc>)
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <LCD5110_wprint+0x9c>
				++str;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	3301      	adds	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002612:	461a      	mov	r2, r3
 8002614:	2308      	movs	r3, #8
 8002616:	4413      	add	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800261e:	4293      	cmp	r3, r2
 8002620:	d807      	bhi.n	8002632 <LCD5110_wprint+0xc2>
			break;
		str++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1a7      	bne.n	8002580 <LCD5110_wprint+0x10>

	}
}
 8002630:	e000      	b.n	8002634 <LCD5110_wprint+0xc4>
			break;
 8002632:	bf00      	nop
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	08013fd8 	.word	0x08013fd8

08002640 <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 8002640:	b40c      	push	{r2, r3}
 8002642:	b580      	push	{r7, lr}
 8002644:	b09e      	sub	sp, #120	; 0x78
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 800264c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002650:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 8002652:	f107 0010 	add.w	r0, r7, #16
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800265c:	2164      	movs	r1, #100	; 0x64
 800265e:	f00d ff3d 	bl	80104dc <vsniprintf>
 8002662:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 8002664:	f107 0310 	add.w	r3, r7, #16
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fede 	bl	800242e <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fea7 	bl	80023d0 <LCD5110_refresh>

	va_end(vargs);

	return res;
 8002682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8002684:	4618      	mov	r0, r3
 8002686:	3778      	adds	r7, #120	; 0x78
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800268e:	b002      	add	sp, #8
 8002690:	4770      	bx	lr

08002692 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8002692:	b480      	push	{r7}
 8002694:	b087      	sub	sp, #28
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	10db      	asrs	r3, r3, #3
 80026a2:	2254      	movs	r2, #84	; 0x54
 80026a4:	fb02 f203 	mul.w	r2, r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4413      	add	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	2201      	movs	r2, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	753b      	strb	r3, [r7, #20]

	return res;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	461a      	mov	r2, r3
 80026c2:	f107 0310 	add.w	r3, r7, #16
 80026c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e008      	b.n	80026fa <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4413      	add	r3, r2
 80026ee:	331c      	adds	r3, #28
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002700:	dbf2      	blt.n	80026e8 <LCD5110_clrscr+0xe>
	}
}
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db31      	blt.n	8002788 <LCD5110_putpix+0x78>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	db2e      	blt.n	8002788 <LCD5110_putpix+0x78>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b53      	cmp	r3, #83	; 0x53
 800272e:	dc2b      	bgt.n	8002788 <LCD5110_putpix+0x78>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b2f      	cmp	r3, #47	; 0x2f
 8002734:	dc28      	bgt.n	8002788 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8002736:	f107 0310 	add.w	r3, r7, #16
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ffa7 	bl	8002692 <xy_to_pix>

	if (color)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00c      	beq.n	8002764 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	7f19      	ldrb	r1, [r3, #28]
 8002752:	7d3a      	ldrb	r2, [r7, #20]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	430a      	orrs	r2, r1
 8002758:	b2d1      	uxtb	r1, r2
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	4413      	add	r3, r2
 800275e:	460a      	mov	r2, r1
 8002760:	771a      	strb	r2, [r3, #28]
 8002762:	e012      	b.n	800278a <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	7f1b      	ldrb	r3, [r3, #28]
 800276c:	b25a      	sxtb	r2, r3
 800276e:	7d3b      	ldrb	r3, [r7, #20]
 8002770:	b25b      	sxtb	r3, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	b25b      	sxtb	r3, r3
 8002776:	4013      	ands	r3, r2
 8002778:	b25a      	sxtb	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	b2d1      	uxtb	r1, r2
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	460a      	mov	r2, r1
 8002784:	771a      	strb	r2, [r3, #28]
 8002786:	e000      	b.n	800278a <LCD5110_putpix+0x7a>
		return;
 8002788:	bf00      	nop
}
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	e042      	b.n	800282a <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	e038      	b.n	800281c <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	da00      	bge.n	80027b2 <LCD5110_drawBitmap+0x22>
 80027b0:	3307      	adds	r3, #7
 80027b2:	10db      	asrs	r3, r3, #3
 80027b4:	461a      	mov	r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	fb03 f202 	mul.w	r2, r3, r2
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	425a      	negs	r2, r3
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	f002 0207 	and.w	r2, r2, #7
 80027d6:	bf58      	it	pl
 80027d8:	4253      	negpl	r3, r2
 80027da:	2201      	movs	r2, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	b25a      	sxtb	r2, r3
 80027e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	18d0      	adds	r0, r2, r3
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	18d1      	adds	r1, r2, r3
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <LCD5110_drawBitmap+0x7e>
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	e000      	b.n	8002810 <LCD5110_drawBitmap+0x80>
 800280e:	7dfa      	ldrb	r2, [r7, #23]
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	f7ff ff7d 	bl	8002710 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3301      	adds	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	429a      	cmp	r2, r3
 8002822:	dbc2      	blt.n	80027aa <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3301      	adds	r3, #1
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	69fa      	ldr	r2, [r7, #28]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbb8      	blt.n	80027a4 <LCD5110_drawBitmap+0x14>
		}
	}
}
 8002832:	bf00      	nop
 8002834:	bf00      	nop
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	1df9      	adds	r1, r7, #7
 800284e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002852:	2201      	movs	r2, #1
 8002854:	f007 fb56 	bl	8009f04 <HAL_SPI_Transmit>
 8002858:	4603      	mov	r3, r0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	460b      	mov	r3, r1
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	897a      	ldrh	r2, [r7, #10]
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	68f9      	ldr	r1, [r7, #12]
 800287c:	f007 fb42 	bl	8009f04 <HAL_SPI_Transmit>
 8002880:	4603      	mov	r3, r0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6898      	ldr	r0, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	889b      	ldrh	r3, [r3, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	4619      	mov	r1, r3
 800289e:	f003 fd0b 	bl	80062b8 <HAL_GPIO_WritePin>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6998      	ldr	r0, [r3, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8a9b      	ldrh	r3, [r3, #20]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4619      	mov	r1, r3
 80028be:	f003 fcfb 	bl	80062b8 <HAL_GPIO_WritePin>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6998      	ldr	r0, [r3, #24]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8a9b      	ldrh	r3, [r3, #20]
 80028da:	2200      	movs	r2, #0
 80028dc:	4619      	mov	r1, r3
 80028de:	f003 fceb 	bl	80062b8 <HAL_GPIO_WritePin>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6918      	ldr	r0, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	899b      	ldrh	r3, [r3, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4619      	mov	r1, r3
 80028fe:	f003 fcdb 	bl	80062b8 <HAL_GPIO_WritePin>
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6918      	ldr	r0, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	899b      	ldrh	r3, [r3, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	4619      	mov	r1, r3
 800291e:	f003 fccb 	bl	80062b8 <HAL_GPIO_WritePin>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	4603      	mov	r3, r0
 8002932:	6039      	str	r1, [r7, #0]
 8002934:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	f023 0320 	bic.w	r3, r3, #32
 800293c:	2b07      	cmp	r3, #7
 800293e:	dd01      	ble.n	8002944 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8002940:	2301      	movs	r3, #1
 8002942:	e008      	b.n	8002956 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	f043 0320 	orr.w	r3, r3, #32
 800294a:	b2db      	uxtb	r3, r3
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff74 	bl	800283c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	6039      	str	r1, [r7, #0]
 8002968:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f023 030d 	bic.w	r3, r3, #13
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8002974:	2302      	movs	r3, #2
 8002976:	e005      	b.n	8002984 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	6839      	ldr	r1, [r7, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff5d 	bl	800283c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	2b00      	cmp	r3, #0
 800299e:	da01      	bge.n	80029a4 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e008      	b.n	80029b6 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff44 	bl	800283c <send_byte_to_LCD5110>
	return LCD5110_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	6039      	str	r1, [r7, #0]
 80029c8:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d901      	bls.n	80029d4 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 80029d0:	2304      	movs	r3, #4
 80029d2:	e008      	b.n	80029e6 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f043 0304 	orr.w	r3, r3, #4
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff2c 	bl	800283c <send_byte_to_LCD5110>
	return LCD5110_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	6039      	str	r1, [r7, #0]
 80029f8:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2b07      	cmp	r3, #7
 80029fe:	d901      	bls.n	8002a04 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8002a00:	2305      	movs	r3, #5
 8002a02:	e008      	b.n	8002a16 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ff14 	bl	800283c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	6039      	str	r1, [r7, #0]
 8002a28:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8002a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db03      	blt.n	8002a3a <LCD5110_set_X_base+0x1c>
 8002a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a36:	2b53      	cmp	r3, #83	; 0x53
 8002a38:	dd01      	ble.n	8002a3e <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00a      	b.n	8002a54 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fef5 	bl	800283c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8002a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db03      	blt.n	8002a78 <LCD5110_set_Y_base+0x1c>
 8002a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	dd01      	ble.n	8002a7c <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	e00a      	b.n	8002a92 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	b25b      	sxtb	r3, r3
 8002a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a84:	b25b      	sxtb	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fed6 	bl	800283c <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	603a      	str	r2, [r7, #0]
 8002aa4:	80fb      	strh	r3, [r7, #6]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8002aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ffb4 	bl	8002a1e <LCD5110_set_X_base>
 8002ab6:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <LCD5110_set_XY_base+0x28>
		return res;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	e00c      	b.n	8002adc <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8002ac2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ffc7 	bl	8002a5c <LCD5110_set_Y_base>
 8002ace:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <LCD5110_set_XY_base+0x40>
		return res;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	e000      	b.n	8002adc <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002afe:	601a      	str	r2, [r3, #0]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	4608      	mov	r0, r1
 8002b16:	4611      	mov	r1, r2
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	70fb      	strb	r3, [r7, #3]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	70bb      	strb	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7ff ffdc 	bl	8002ae4 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff feac 	bl	800288a <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fee9 	bl	800290a <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8002b38:	2364      	movs	r3, #100	; 0x64
 8002b3a:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8002b3c:	bf00      	nop
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1fa      	bne.n	8002b3e <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fece 	bl	80028ea <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff febb 	bl	80028ca <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7ff fee7 	bl	800292a <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8002b5c:	78bb      	ldrb	r3, [r7, #2]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff13 	bl	800298c <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8002b66:	787b      	ldrb	r3, [r7, #1]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff ff27 	bl	80029be <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8002b70:	7e3b      	ldrb	r3, [r7, #24]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff3a 	bl	80029ee <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff fed4 	bl	800292a <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fee9 	bl	800295e <LCD5110_set_mode_base>

	return LCD5110_OK;
 8002b8c:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fe73 	bl	800288a <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fe90 	bl	80028ca <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	2100      	movs	r1, #0
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff ff73 	bl	8002a9a <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff fe78 	bl	80028aa <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	331c      	adds	r3, #28
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe4c 	bl	8002862 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_GPIO_EXTI_Callback>:
volatile int fall_down = 0;
volatile int light = 0;
volatile int pressed = 0; // Ініціалізується нулем по замовчуванню, але так гарніше
volatile int button_is_pressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	80fb      	strh	r3, [r7, #6]


 if( GPIO_Pin == GPIO_PIN_8)
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be4:	d129      	bne.n	8002c3a <HAL_GPIO_EXTI_Callback+0x66>
 {
  static uint32_t last_change_tick;
  if( HAL_GetTick() - last_change_tick < 50 )
 8002be6:	f001 fd47 	bl	8004678 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b31      	cmp	r3, #49	; 0x31
 8002bf4:	d97a      	bls.n	8002cec <HAL_GPIO_EXTI_Callback+0x118>
  {
   return;
  }
  last_change_tick = HAL_GetTick();
 8002bf6:	f001 fd3f 	bl	8004678 <HAL_GetTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4a3f      	ldr	r2, [pc, #252]	; (8002cfc <HAL_GPIO_EXTI_Callback+0x128>)
 8002bfe:	6013      	str	r3, [r2, #0]
  if(button_is_pressed)
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d015      	beq.n	8002c34 <HAL_GPIO_EXTI_Callback+0x60>
  {
   button_is_pressed = 0;
 8002c08:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
   ++pressed;
 8002c0e:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x130>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x130>)
 8002c16:	6013      	str	r3, [r2, #0]
	  if (light == -1) {
 8002c18:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c20:	d103      	bne.n	8002c2a <HAL_GPIO_EXTI_Callback+0x56>
		light = 0;
 8002c22:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e007      	b.n	8002c3a <HAL_GPIO_EXTI_Callback+0x66>
	  } else {
		light = -1;
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e002      	b.n	8002c3a <HAL_GPIO_EXTI_Callback+0x66>
	  }
  }else
  {
   button_is_pressed = 1;
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  }
 }

 if( GPIO_Pin == GPIO_PIN_9)
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d127      	bne.n	8002c92 <HAL_GPIO_EXTI_Callback+0xbe>
 {
  static uint32_t last_change_tick;
  if( HAL_GetTick() - last_change_tick < 50 )
 8002c42:	f001 fd19 	bl	8004678 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_GPIO_EXTI_Callback+0x138>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b31      	cmp	r3, #49	; 0x31
 8002c50:	d94e      	bls.n	8002cf0 <HAL_GPIO_EXTI_Callback+0x11c>
  {
   return;
  }
  last_change_tick = HAL_GetTick();
 8002c52:	f001 fd11 	bl	8004678 <HAL_GetTick>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <HAL_GPIO_EXTI_Callback+0x138>)
 8002c5a:	6013      	str	r3, [r2, #0]
  if(button_is_pressed)
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_GPIO_EXTI_Callback+0xb8>
  {
   button_is_pressed = 0;
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
   ++pressed;
 8002c6a:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x130>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x130>)
 8002c72:	6013      	str	r3, [r2, #0]
	  if (light == 1) {
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d103      	bne.n	8002c84 <HAL_GPIO_EXTI_Callback+0xb0>
		light = 0;
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e006      	b.n	8002c92 <HAL_GPIO_EXTI_Callback+0xbe>
	  } else {
		light = 1;
 8002c84:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e002      	b.n	8002c92 <HAL_GPIO_EXTI_Callback+0xbe>
	  }
  }else
  {
   button_is_pressed = 1;
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	601a      	str	r2, [r3, #0]
  }
 }

 if( GPIO_Pin == GPIO_PIN_10)
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c98:	d12d      	bne.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x122>
 {
  static uint32_t last_change_tick;
  if( HAL_GetTick() - last_change_tick < 50 )
 8002c9a:	f001 fced 	bl	8004678 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b31      	cmp	r3, #49	; 0x31
 8002ca8:	d924      	bls.n	8002cf4 <HAL_GPIO_EXTI_Callback+0x120>
  {
   return;
  }
  last_change_tick = HAL_GetTick();
 8002caa:	f001 fce5 	bl	8004678 <HAL_GetTick>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002cb2:	6013      	str	r3, [r2, #0]
  if(button_is_pressed)
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_GPIO_EXTI_Callback+0x110>
  {
   button_is_pressed = 0;
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
   ++pressed;
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x130>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <HAL_GPIO_EXTI_Callback+0x130>)
 8002cca:	6013      	str	r3, [r2, #0]
	  if (light == 2) {
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d103      	bne.n	8002cdc <HAL_GPIO_EXTI_Callback+0x108>
		light = 0;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e00c      	b.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x122>
	  } else {
		light = 2;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_GPIO_EXTI_Callback+0x134>)
 8002cde:	2202      	movs	r2, #2
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e008      	b.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x122>
	  }
  }else
  {
   button_is_pressed = 1;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e004      	b.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x122>
   return;
 8002cec:	bf00      	nop
 8002cee:	e002      	b.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x122>
   return;
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x122>
   return;
 8002cf4:	bf00      	nop
  }
 }


}
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	200002fc 	.word	0x200002fc
 8002d04:	200002f8 	.word	0x200002f8
 8002d08:	200002f4 	.word	0x200002f4
 8002d0c:	20000308 	.word	0x20000308
 8002d10:	2000030c 	.word	0x2000030c

08002d14 <HAL_TIM_PWM_PulseFinishedCallback>:

int datasentflag=0;  // to make sure that the dma does not send another data while the first data is still transmitted


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)  // this callback is called when data transmission is finished
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);  // stop dma, when the transmission is finished
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002d20:	f008 f892 	bl	800ae48 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000e18 	.word	0x20000e18
 8002d38:	20000300 	.word	0x20000300

08002d3c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	b2d9      	uxtb	r1, r3
 8002d4e:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <Set_LED+0x58>)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;  // store green first as ws2821b requires this order (g,r,b)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	b2d9      	uxtb	r1, r3
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <Set_LED+0x58>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	460a      	mov	r2, r1
 8002d64:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	b2d9      	uxtb	r1, r3
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <Set_LED+0x58>)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	460a      	mov	r2, r1
 8002d74:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2d9      	uxtb	r1, r3
 8002d7a:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <Set_LED+0x58>)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	460a      	mov	r2, r1
 8002d84:	70da      	strb	r2, [r3, #3]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	200006f4 	.word	0x200006f4

08002d98 <Set_Brightness>:

#define PI 3.14159265359

void Set_Brightness (int brightness)  // 0-45
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50]; // store 24 bits for each led + 50 values for reset code

void WS2812_Send (void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
	uint32_t color;  //32 bit variable to store 24 bits of color


	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	e036      	b.n	8002e2a <WS2812_Send+0x7e>
	{

#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8002dbc:	4a2e      	ldr	r2, [pc, #184]	; (8002e78 <WS2812_Send+0xcc>)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	041a      	lsls	r2, r3, #16
 8002dc8:	492b      	ldr	r1, [pc, #172]	; (8002e78 <WS2812_Send+0xcc>)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	789b      	ldrb	r3, [r3, #2]
 8002dd2:	021b      	lsls	r3, r3, #8
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	4928      	ldr	r1, [pc, #160]	; (8002e78 <WS2812_Send+0xcc>)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	78db      	ldrb	r3, [r3, #3]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	607b      	str	r3, [r7, #4]
#endif
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 8002de4:	2317      	movs	r3, #23
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e019      	b.n	8002e1e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8002dea:	2201      	movs	r2, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 57; // if the bit is 1, the duty cycle is 64%
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <WS2812_Send+0xd0>)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2139      	movs	r1, #57	; 0x39
 8002e02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002e06:	e004      	b.n	8002e12 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 28;  // if the bit is 0, the duty cycle is 32%
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <WS2812_Send+0xd0>)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	211c      	movs	r1, #28
 8002e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	dae2      	bge.n	8002dea <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	3301      	adds	r3, #1
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b19      	cmp	r3, #25
 8002e2e:	ddc5      	ble.n	8002dbc <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	e00a      	b.n	8002e4c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8002e36:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <WS2812_Send+0xd0>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b31      	cmp	r3, #49	; 0x31
 8002e50:	ddf1      	ble.n	8002e36 <WS2812_Send+0x8a>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send the data to the dma
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <WS2812_Send+0xd0>)
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4809      	ldr	r0, [pc, #36]	; (8002e80 <WS2812_Send+0xd4>)
 8002e5c:	f007 fdba 	bl	800a9d4 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};  // this flag will be set when the data transmission is finished, dma is stopped and now we can send another data
 8002e60:	bf00      	nop
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <WS2812_Send+0xd8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0fb      	beq.n	8002e62 <WS2812_Send+0xb6>
	datasentflag = 0;
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <WS2812_Send+0xd8>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200006f4 	.word	0x200006f4
 8002e7c:	200007c4 	.word	0x200007c4
 8002e80:	20000e18 	.word	0x20000e18
 8002e84:	20000300 	.word	0x20000300

08002e88 <attention_signal.10406>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	  void attention_signal() {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	f8c7 c004 	str.w	ip, [r7, #4]
			  for (int i = 0; i < 30; i++) {
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e00b      	b.n	8002eb0 <attention_signal.10406+0x28>
				  Set_LED(i, 139, 0, 0);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	218b      	movs	r1, #139	; 0x8b
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff4c 	bl	8002d3c <Set_LED>
				  Set_Brightness(45);
 8002ea4:	202d      	movs	r0, #45	; 0x2d
 8002ea6:	f7ff ff77 	bl	8002d98 <Set_Brightness>
			  for (int i = 0; i < 30; i++) {
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3301      	adds	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b1d      	cmp	r3, #29
 8002eb4:	ddf0      	ble.n	8002e98 <attention_signal.10406+0x10>
			  }

			  WS2812_Send();
 8002eb6:	f7ff ff79 	bl	8002dac <WS2812_Send>
			  HAL_Delay(700);
 8002eba:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002ebe:	f001 fbe7 	bl	8004690 <HAL_Delay>

			  for (int i = 0; i < 30; i++) {
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	e008      	b.n	8002eda <attention_signal.10406+0x52>
				  Set_LED(i, 0, 0, 0);
 8002ec8:	2300      	movs	r3, #0
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f7ff ff34 	bl	8002d3c <Set_LED>
			  for (int i = 0; i < 30; i++) {
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b1d      	cmp	r3, #29
 8002ede:	ddf3      	ble.n	8002ec8 <attention_signal.10406+0x40>
			  }

			  WS2812_Send();
 8002ee0:	f7ff ff64 	bl	8002dac <WS2812_Send>
			  HAL_Delay(550);
 8002ee4:	f240 2026 	movw	r0, #550	; 0x226
 8002ee8:	f001 fbd2 	bl	8004690 <HAL_Delay>

		  };
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <main>:
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b08b      	sub	sp, #44	; 0x2c
 8002ef8:	af02      	add	r7, sp, #8
int main(void)
 8002efa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002efe:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f00:	f001 fb54 	bl	80045ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f04:	f000 faac 	bl	8003460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f08:	f7ff f87a 	bl	8002000 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f0c:	f7ff f9c8 	bl	80022a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002f10:	f000 fb1e 	bl	8003550 <MX_SPI1_Init>
  MX_DMA_Init();
 8002f14:	f7ff f84c 	bl	8001fb0 <MX_DMA_Init>
  MX_USB_HOST_Init();
 8002f18:	f00c fa46 	bl	800f3a8 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8002f1c:	f001 f9ee 	bl	80042fc <MX_TIM1_Init>
  MX_ADC1_Init();
 8002f20:	f7fe ff6e 	bl	8001e00 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002f24:	f000 fb4a 	bl	80035bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  lcd1.hw_conf.spi_handle = &hspi2;
 8002f28:	4b7e      	ldr	r3, [pc, #504]	; (8003124 <main+0x230>)
 8002f2a:	4a7f      	ldr	r2, [pc, #508]	; (8003128 <main+0x234>)
 8002f2c:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <main+0x230>)
 8002f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f34:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 8002f36:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <main+0x230>)
 8002f38:	4a7c      	ldr	r2, [pc, #496]	; (800312c <main+0x238>)
 8002f3a:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 8002f3c:	4b79      	ldr	r3, [pc, #484]	; (8003124 <main+0x230>)
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 8002f42:	4b78      	ldr	r3, [pc, #480]	; (8003124 <main+0x230>)
 8002f44:	4a79      	ldr	r2, [pc, #484]	; (800312c <main+0x238>)
 8002f46:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 8002f48:	4b76      	ldr	r3, [pc, #472]	; (8003124 <main+0x230>)
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 8002f4e:	4b75      	ldr	r3, [pc, #468]	; (8003124 <main+0x230>)
 8002f50:	4a76      	ldr	r2, [pc, #472]	; (800312c <main+0x238>)
 8002f52:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8002f54:	4b73      	ldr	r3, [pc, #460]	; (8003124 <main+0x230>)
 8002f56:	4a76      	ldr	r2, [pc, #472]	; (8003130 <main+0x23c>)
 8002f58:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	6820      	ldr	r0, [r4, #0]
 8002f60:	6861      	ldr	r1, [r4, #4]
 8002f62:	68a2      	ldr	r2, [r4, #8]
 8002f64:	c307      	stmia	r3!, {r0, r1, r2}
 8002f66:	89a2      	ldrh	r2, [r4, #12]
 8002f68:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	210c      	movs	r1, #12
 8002f74:	486b      	ldr	r0, [pc, #428]	; (8003124 <main+0x230>)
 8002f76:	f7ff fdc9 	bl	8002b0c <LCD5110_init>

  LCD5110_print("Hello world!\n", BLACK, &lcd1);
 8002f7a:	4a6a      	ldr	r2, [pc, #424]	; (8003124 <main+0x230>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	486d      	ldr	r0, [pc, #436]	; (8003134 <main+0x240>)
 8002f80:	f7ff fa55 	bl	800242e <LCD5110_print>

  if(BSP_ACCELERO_Init() != HAL_OK)
 8002f84:	f000 feba 	bl	8003cfc <BSP_ACCELERO_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <main+0xa6>
  {
    /* Initialization Error */
	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <main+0x230>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	4869      	ldr	r0, [pc, #420]	; (8003138 <main+0x244>)
 8002f94:	f7ff fa4b 	bl	800242e <LCD5110_print>
    while(1){}
 8002f98:	e7fe      	b.n	8002f98 <main+0xa4>
  }

  if(BSP_GYRO_Init() != HAL_OK){
 8002f9a:	f000 ff9d 	bl	8003ed8 <BSP_GYRO_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <main+0xbc>
	  /* Initialization Error */
	  	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 8002fa4:	4a5f      	ldr	r2, [pc, #380]	; (8003124 <main+0x230>)
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4863      	ldr	r0, [pc, #396]	; (8003138 <main+0x244>)
 8002faa:	f7ff fa40 	bl	800242e <LCD5110_print>
	      while(1){}
 8002fae:	e7fe      	b.n	8002fae <main+0xba>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int16_t buffer[3] = {0};
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	809a      	strh	r2, [r3, #4]
    float data[3] = {0};
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]

   int fall_down = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
//	while( HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_RESET )
//	{}
//	HAL_Delay(50);
//	 }

	 if (light == 0){
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	; (800313c <main+0x248>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d113      	bne.n	8002ff8 <main+0x104>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fd6:	485a      	ldr	r0, [pc, #360]	; (8003140 <main+0x24c>)
 8002fd8:	f003 f96e 	bl	80062b8 <HAL_GPIO_WritePin>
			 HAL_Delay(200);
 8002fdc:	20c8      	movs	r0, #200	; 0xc8
 8002fde:	f001 fb57 	bl	8004690 <HAL_Delay>
			 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fe8:	4855      	ldr	r0, [pc, #340]	; (8003140 <main+0x24c>)
 8002fea:	f003 f965 	bl	80062b8 <HAL_GPIO_WritePin>
			 attention_signal();
 8002fee:	f107 0310 	add.w	r3, r7, #16
 8002ff2:	469c      	mov	ip, r3
 8002ff4:	f7ff ff48 	bl	8002e88 <attention_signal.10406>
		 }

	 if (light == 1) {
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <main+0x248>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d114      	bne.n	800302a <main+0x136>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8003000:	2201      	movs	r2, #1
 8003002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003006:	484e      	ldr	r0, [pc, #312]	; (8003140 <main+0x24c>)
 8003008:	f003 f956 	bl	80062b8 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 800300c:	20c8      	movs	r0, #200	; 0xc8
 800300e:	f001 fb3f 	bl	8004690 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003018:	4849      	ldr	r0, [pc, #292]	; (8003140 <main+0x24c>)
 800301a:	f003 f94d 	bl	80062b8 <HAL_GPIO_WritePin>
//		 warning_signal();
		 turn_signal(1);
 800301e:	f107 0310 	add.w	r3, r7, #16
 8003022:	469c      	mov	ip, r3
 8003024:	2001      	movs	r0, #1
 8003026:	f000 f88f 	bl	8003148 <turn_signal.10417>
	 }

	 if (light == -1) {
 800302a:	4b44      	ldr	r3, [pc, #272]	; (800313c <main+0x248>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003032:	d115      	bne.n	8003060 <main+0x16c>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8003034:	2201      	movs	r2, #1
 8003036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800303a:	4841      	ldr	r0, [pc, #260]	; (8003140 <main+0x24c>)
 800303c:	f003 f93c 	bl	80062b8 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 8003040:	20c8      	movs	r0, #200	; 0xc8
 8003042:	f001 fb25 	bl	8004690 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800304c:	483c      	ldr	r0, [pc, #240]	; (8003140 <main+0x24c>)
 800304e:	f003 f933 	bl	80062b8 <HAL_GPIO_WritePin>
		 turn_signal(-1);
 8003052:	f107 0310 	add.w	r3, r7, #16
 8003056:	469c      	mov	ip, r3
 8003058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800305c:	f000 f874 	bl	8003148 <turn_signal.10417>
	 }

	 if (light == 2) {
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <main+0x248>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d113      	bne.n	8003090 <main+0x19c>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8003068:	2201      	movs	r2, #1
 800306a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800306e:	4834      	ldr	r0, [pc, #208]	; (8003140 <main+0x24c>)
 8003070:	f003 f922 	bl	80062b8 <HAL_GPIO_WritePin>
		 HAL_Delay(200);
 8003074:	20c8      	movs	r0, #200	; 0xc8
 8003076:	f001 fb0b 	bl	8004690 <HAL_Delay>
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800307a:	2200      	movs	r2, #0
 800307c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003080:	482f      	ldr	r0, [pc, #188]	; (8003140 <main+0x24c>)
 8003082:	f003 f919 	bl	80062b8 <HAL_GPIO_WritePin>
		 warning_signal();
 8003086:	f107 0310 	add.w	r3, r7, #16
 800308a:	469c      	mov	ip, r3
 800308c:	f000 f8b1 	bl	80031f2 <warning_signal.10432>
//		   		  	HAL_Delay(50);}
//	   }
//	   };


	   	   show_accelerometer();
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	469c      	mov	ip, r3
 8003096:	f000 f8ef 	bl	8003278 <show_accelerometer.10448>
//	   	   show_gyroscope();
	   	   while( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET )
 800309a:	bf00      	nop
 800309c:	2101      	movs	r1, #1
 800309e:	4829      	ldr	r0, [pc, #164]	; (8003144 <main+0x250>)
 80030a0:	f003 f8e4 	bl	800626c <HAL_GPIO_ReadPin>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d0f8      	beq.n	800309c <main+0x1a8>
	   	   		     	{}
	   	   		     	HAL_Delay(50);
 80030aa:	2032      	movs	r0, #50	; 0x32
 80030ac:	f001 faf0 	bl	8004690 <HAL_Delay>



	   	if (fall_down == 1) {
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d117      	bne.n	80030e6 <main+0x1f2>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80030b6:	2201      	movs	r2, #1
 80030b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030bc:	4820      	ldr	r0, [pc, #128]	; (8003140 <main+0x24c>)
 80030be:	f003 f8fb 	bl	80062b8 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80030c2:	2201      	movs	r2, #1
 80030c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030c8:	481d      	ldr	r0, [pc, #116]	; (8003140 <main+0x24c>)
 80030ca:	f003 f8f5 	bl	80062b8 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80030ce:	2201      	movs	r2, #1
 80030d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030d4:	481a      	ldr	r0, [pc, #104]	; (8003140 <main+0x24c>)
 80030d6:	f003 f8ef 	bl	80062b8 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80030da:	2201      	movs	r2, #1
 80030dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e0:	4817      	ldr	r0, [pc, #92]	; (8003140 <main+0x24c>)
 80030e2:	f003 f8e9 	bl	80062b8 <HAL_GPIO_WritePin>
	   	}

	   	if (fall_down == 0) {
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d117      	bne.n	800311c <main+0x228>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f2:	4813      	ldr	r0, [pc, #76]	; (8003140 <main+0x24c>)
 80030f4:	f003 f8e0 	bl	80062b8 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030fe:	4810      	ldr	r0, [pc, #64]	; (8003140 <main+0x24c>)
 8003100:	f003 f8da 	bl	80062b8 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800310a:	480d      	ldr	r0, [pc, #52]	; (8003140 <main+0x24c>)
 800310c:	f003 f8d4 	bl	80062b8 <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003116:	480a      	ldr	r0, [pc, #40]	; (8003140 <main+0x24c>)
 8003118:	f003 f8ce 	bl	80062b8 <HAL_GPIO_WritePin>
//	  attention_signal();
//	  turn_signal(-1);
//	  warning_signal();

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800311c:	f00c f96a 	bl	800f3f4 <MX_USB_HOST_Process>
  {
 8003120:	e752      	b.n	8002fc8 <main+0xd4>
 8003122:	bf00      	nop
 8003124:	200004d0 	.word	0x200004d0
 8003128:	20000d08 	.word	0x20000d08
 800312c:	40020400 	.word	0x40020400
 8003130:	08013fa8 	.word	0x08013fa8
 8003134:	08013708 	.word	0x08013708
 8003138:	08013718 	.word	0x08013718
 800313c:	200002f4 	.word	0x200002f4
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40020000 	.word	0x40020000

08003148 <turn_signal.10417>:
	  void turn_signal(int direction) {
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	f8c7 c000 	str.w	ip, [r7]
		  int mid = MAX_LED / 2;
 8003154:	230d      	movs	r3, #13
 8003156:	60bb      	str	r3, [r7, #8]
		  if (direction == -1){
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315e:	d116      	bne.n	800318e <turn_signal.10417+0x46>
	 		    for (int i = mid; i >= 0; i--) {
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e010      	b.n	8003188 <turn_signal.10417+0x40>
					Set_LED(i, 255, 69, 0);
 8003166:	2300      	movs	r3, #0
 8003168:	2245      	movs	r2, #69	; 0x45
 800316a:	21ff      	movs	r1, #255	; 0xff
 800316c:	6978      	ldr	r0, [r7, #20]
 800316e:	f7ff fde5 	bl	8002d3c <Set_LED>
					Set_Brightness(45);
 8003172:	202d      	movs	r0, #45	; 0x2d
 8003174:	f7ff fe10 	bl	8002d98 <Set_Brightness>
					WS2812_Send();
 8003178:	f7ff fe18 	bl	8002dac <WS2812_Send>
					HAL_Delay(30);
 800317c:	201e      	movs	r0, #30
 800317e:	f001 fa87 	bl	8004690 <HAL_Delay>
	 		    for (int i = mid; i >= 0; i--) {
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	3b01      	subs	r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	daeb      	bge.n	8003166 <turn_signal.10417+0x1e>
		  if (direction == 1){
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d116      	bne.n	80031c2 <turn_signal.10417+0x7a>
	 		    for (int i = mid; i < MAX_LED; i++) {
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	e010      	b.n	80031bc <turn_signal.10417+0x74>
					Set_LED(i, 255, 69, 0);
 800319a:	2300      	movs	r3, #0
 800319c:	2245      	movs	r2, #69	; 0x45
 800319e:	21ff      	movs	r1, #255	; 0xff
 80031a0:	6938      	ldr	r0, [r7, #16]
 80031a2:	f7ff fdcb 	bl	8002d3c <Set_LED>
					Set_Brightness(45);
 80031a6:	202d      	movs	r0, #45	; 0x2d
 80031a8:	f7ff fdf6 	bl	8002d98 <Set_Brightness>
					WS2812_Send();
 80031ac:	f7ff fdfe 	bl	8002dac <WS2812_Send>
					HAL_Delay(30);
 80031b0:	201e      	movs	r0, #30
 80031b2:	f001 fa6d 	bl	8004690 <HAL_Delay>
	 		    for (int i = mid; i < MAX_LED; i++) {
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	3301      	adds	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b19      	cmp	r3, #25
 80031c0:	ddeb      	ble.n	800319a <turn_signal.10417+0x52>
		 for (int i = 0; i < MAX_LED; i++) {
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e008      	b.n	80031da <turn_signal.10417+0x92>
		 	Set_LED(i, 0, 0, 0);
 80031c8:	2300      	movs	r3, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	2100      	movs	r1, #0
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff fdb4 	bl	8002d3c <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b19      	cmp	r3, #25
 80031de:	ddf3      	ble.n	80031c8 <turn_signal.10417+0x80>
		 HAL_Delay(120);
 80031e0:	2078      	movs	r0, #120	; 0x78
 80031e2:	f001 fa55 	bl	8004690 <HAL_Delay>
		 WS2812_Send();
 80031e6:	f7ff fde1 	bl	8002dac <WS2812_Send>
	  };
 80031ea:	bf00      	nop
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <warning_signal.10432>:
	  void warning_signal() {
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	f8c7 c004 	str.w	ip, [r7, #4]
		  int mid = MAX_LED / 2;
 80031fc:	230d      	movs	r3, #13
 80031fe:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i <= mid; i++) {
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	e01a      	b.n	800323c <warning_signal.10432+0x4a>
				Set_LED(mid + i, 255, 69, 0);
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	18d0      	adds	r0, r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	2245      	movs	r2, #69	; 0x45
 8003210:	21ff      	movs	r1, #255	; 0xff
 8003212:	f7ff fd93 	bl	8002d3c <Set_LED>
				Set_LED(mid - i, 255, 69, 0);
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad0      	subs	r0, r2, r3
 800321c:	2300      	movs	r3, #0
 800321e:	2245      	movs	r2, #69	; 0x45
 8003220:	21ff      	movs	r1, #255	; 0xff
 8003222:	f7ff fd8b 	bl	8002d3c <Set_LED>
				Set_Brightness(45);
 8003226:	202d      	movs	r0, #45	; 0x2d
 8003228:	f7ff fdb6 	bl	8002d98 <Set_Brightness>
				WS2812_Send();
 800322c:	f7ff fdbe 	bl	8002dac <WS2812_Send>
				HAL_Delay(30);
 8003230:	201e      	movs	r0, #30
 8003232:	f001 fa2d 	bl	8004690 <HAL_Delay>
			for (int i = 0; i <= mid; i++) {
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	3301      	adds	r3, #1
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	429a      	cmp	r2, r3
 8003242:	dde0      	ble.n	8003206 <warning_signal.10432+0x14>
		 for (int i = 0; i < MAX_LED; i++) {
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	e008      	b.n	800325c <warning_signal.10432+0x6a>
		 	Set_LED(i, 0, 0, 0);
 800324a:	2300      	movs	r3, #0
 800324c:	2200      	movs	r2, #0
 800324e:	2100      	movs	r1, #0
 8003250:	6938      	ldr	r0, [r7, #16]
 8003252:	f7ff fd73 	bl	8002d3c <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3301      	adds	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b19      	cmp	r3, #25
 8003260:	ddf3      	ble.n	800324a <warning_signal.10432+0x58>
		 HAL_Delay(120);
 8003262:	2078      	movs	r0, #120	; 0x78
 8003264:	f001 fa14 	bl	8004690 <HAL_Delay>
		 WS2812_Send();
 8003268:	f7ff fda0 	bl	8002dac <WS2812_Send>
	  };
 800326c:	bf00      	nop
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	0000      	movs	r0, r0
	...

08003278 <show_accelerometer.10448>:
	   void show_accelerometer(){
 8003278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800327c:	b093      	sub	sp, #76	; 0x4c
 800327e:	af06      	add	r7, sp, #24
 8003280:	4664      	mov	r4, ip
 8003282:	f8c7 c00c 	str.w	ip, [r7, #12]
		   BSP_ACCELERO_GetXYZ(buffer);
 8003286:	1d23      	adds	r3, r4, #4
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fdf9 	bl	8003e80 <BSP_ACCELERO_GetXYZ>
		   double x = (buffer[0]/16)/1000.0;
 800328e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	da00      	bge.n	8003298 <show_accelerometer.10448+0x20>
 8003296:	330f      	adds	r3, #15
 8003298:	111b      	asrs	r3, r3, #4
 800329a:	b21b      	sxth	r3, r3
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f949 	bl	8000534 <__aeabi_i2d>
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	4b68      	ldr	r3, [pc, #416]	; (8003448 <show_accelerometer.10448+0x1d0>)
 80032a8:	f7fd fad8 	bl	800085c <__aeabi_ddiv>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		   double y = (double)(buffer[1]/16)/1000.0;
 80032b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da00      	bge.n	80032be <show_accelerometer.10448+0x46>
 80032bc:	330f      	adds	r3, #15
 80032be:	111b      	asrs	r3, r3, #4
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f936 	bl	8000534 <__aeabi_i2d>
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <show_accelerometer.10448+0x1d0>)
 80032ce:	f7fd fac5 	bl	800085c <__aeabi_ddiv>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		   double z = (double)(buffer[2]/16)/1000.0;
 80032da:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da00      	bge.n	80032e4 <show_accelerometer.10448+0x6c>
 80032e2:	330f      	adds	r3, #15
 80032e4:	111b      	asrs	r3, r3, #4
 80032e6:	b21b      	sxth	r3, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f923 	bl	8000534 <__aeabi_i2d>
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	4b55      	ldr	r3, [pc, #340]	; (8003448 <show_accelerometer.10448+0x1d0>)
 80032f4:	f7fd fab2 	bl	800085c <__aeabi_ddiv>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		   double length = pow((x*x + y*y + z*z), 0.5);
 8003300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003308:	f7fd f97e 	bl	8000608 <__aeabi_dmul>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4690      	mov	r8, r2
 8003312:	4699      	mov	r9, r3
 8003314:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003318:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800331c:	f7fd f974 	bl	8000608 <__aeabi_dmul>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4640      	mov	r0, r8
 8003326:	4649      	mov	r1, r9
 8003328:	f7fc ffb8 	bl	800029c <__adddf3>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4690      	mov	r8, r2
 8003332:	4699      	mov	r9, r3
 8003334:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003338:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800333c:	f7fd f964 	bl	8000608 <__aeabi_dmul>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4640      	mov	r0, r8
 8003346:	4649      	mov	r1, r9
 8003348:	f7fc ffa8 	bl	800029c <__adddf3>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	ec43 2b17 	vmov	d7, r2, r3
 8003354:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8003430 <show_accelerometer.10448+0x1b8>
 8003358:	eeb0 0a47 	vmov.f32	s0, s14
 800335c:	eef0 0a67 	vmov.f32	s1, s15
 8003360:	f00f fa10 	bl	8012784 <pow>
 8003364:	ed87 0b04 	vstr	d0, [r7, #16]
		   if (fabs(z) > 0.85 ||  fabs(x) > 0.8) {
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	a330      	add	r3, pc, #192	; (adr r3, 8003438 <show_accelerometer.10448+0x1c0>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800337e:	f7fd fbd3 	bl	8000b28 <__aeabi_dcmpgt>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <show_accelerometer.10448+0x12c>
 8003388:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 8003390:	a32b      	add	r3, pc, #172	; (adr r3, 8003440 <show_accelerometer.10448+0x1c8>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	4628      	mov	r0, r5
 8003398:	4631      	mov	r1, r6
 800339a:	f7fd fbc5 	bl	8000b28 <__aeabi_dcmpgt>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d019      	beq.n	80033d8 <show_accelerometer.10448+0x160>
			   fall_down = 1;
 80033a4:	2301      	movs	r3, #1
 80033a6:	6023      	str	r3, [r4, #0]
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80033a8:	2201      	movs	r2, #1
 80033aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ae:	4827      	ldr	r0, [pc, #156]	; (800344c <show_accelerometer.10448+0x1d4>)
 80033b0:	f002 ff82 	bl	80062b8 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80033b4:	2201      	movs	r2, #1
 80033b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033ba:	4824      	ldr	r0, [pc, #144]	; (800344c <show_accelerometer.10448+0x1d4>)
 80033bc:	f002 ff7c 	bl	80062b8 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80033c0:	2201      	movs	r2, #1
 80033c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033c6:	4821      	ldr	r0, [pc, #132]	; (800344c <show_accelerometer.10448+0x1d4>)
 80033c8:	f002 ff76 	bl	80062b8 <HAL_GPIO_WritePin>
			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 80033cc:	2201      	movs	r2, #1
 80033ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d2:	481e      	ldr	r0, [pc, #120]	; (800344c <show_accelerometer.10448+0x1d4>)
 80033d4:	f002 ff70 	bl	80062b8 <HAL_GPIO_WritePin>
		  LCD5110_print("Accelerometer\n", BLACK, &lcd1);
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <show_accelerometer.10448+0x1d8>)
 80033da:	2101      	movs	r1, #1
 80033dc:	481d      	ldr	r0, [pc, #116]	; (8003454 <show_accelerometer.10448+0x1dc>)
 80033de:	f7ff f826 	bl	800242e <LCD5110_print>
		  LCD5110_printf(&lcd1, BLACK, "X: %g \n Y: %g \n Z: %g \n", x, y, z);
 80033e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80033ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033f6:	e9cd 2300 	strd	r2, r3, [sp]
 80033fa:	4a17      	ldr	r2, [pc, #92]	; (8003458 <show_accelerometer.10448+0x1e0>)
 80033fc:	2101      	movs	r1, #1
 80033fe:	4814      	ldr	r0, [pc, #80]	; (8003450 <show_accelerometer.10448+0x1d8>)
 8003400:	f7ff f91e 	bl	8002640 <LCD5110_printf>
		  LCD5110_printf(&lcd1, BLACK, "length: %g \n", length);
 8003404:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003408:	e9cd 2300 	strd	r2, r3, [sp]
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <show_accelerometer.10448+0x1e4>)
 800340e:	2101      	movs	r1, #1
 8003410:	480f      	ldr	r0, [pc, #60]	; (8003450 <show_accelerometer.10448+0x1d8>)
 8003412:	f7ff f915 	bl	8002640 <LCD5110_printf>
		  HAL_Delay(100);
 8003416:	2064      	movs	r0, #100	; 0x64
 8003418:	f001 f93a 	bl	8004690 <HAL_Delay>
		  LCD5110_clear_scr(&lcd1);
 800341c:	480c      	ldr	r0, [pc, #48]	; (8003450 <show_accelerometer.10448+0x1d8>)
 800341e:	f7fe fff5 	bl	800240c <LCD5110_clear_scr>
	   };
 8003422:	bf00      	nop
 8003424:	3734      	adds	r7, #52	; 0x34
 8003426:	46bd      	mov	sp, r7
 8003428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800342c:	f3af 8000 	nop.w
 8003430:	00000000 	.word	0x00000000
 8003434:	3fe00000 	.word	0x3fe00000
 8003438:	33333333 	.word	0x33333333
 800343c:	3feb3333 	.word	0x3feb3333
 8003440:	9999999a 	.word	0x9999999a
 8003444:	3fe99999 	.word	0x3fe99999
 8003448:	408f4000 	.word	0x408f4000
 800344c:	40020c00 	.word	0x40020c00
 8003450:	200004d0 	.word	0x200004d0
 8003454:	08013730 	.word	0x08013730
 8003458:	08013740 	.word	0x08013740
 800345c:	08013758 	.word	0x08013758

08003460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b094      	sub	sp, #80	; 0x50
 8003464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003466:	f107 0320 	add.w	r3, r7, #32
 800346a:	2230      	movs	r2, #48	; 0x30
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f00c fadc 	bl	800fa2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <SystemClock_Config+0xc8>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <SystemClock_Config+0xc8>)
 800348e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003492:	6413      	str	r3, [r2, #64]	; 0x40
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <SystemClock_Config+0xc8>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a0:	2300      	movs	r3, #0
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <SystemClock_Config+0xcc>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a20      	ldr	r2, [pc, #128]	; (800352c <SystemClock_Config+0xcc>)
 80034aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <SystemClock_Config+0xcc>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034bc:	2301      	movs	r3, #1
 80034be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034c6:	2302      	movs	r3, #2
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80034d0:	2304      	movs	r3, #4
 80034d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80034d4:	2348      	movs	r3, #72	; 0x48
 80034d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034d8:	2302      	movs	r3, #2
 80034da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80034dc:	2303      	movs	r3, #3
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034e0:	f107 0320 	add.w	r3, r7, #32
 80034e4:	4618      	mov	r0, r3
 80034e6:	f005 fd67 	bl	8008fb8 <HAL_RCC_OscConfig>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034f0:	f000 f81e 	bl	8003530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034f4:	230f      	movs	r3, #15
 80034f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034f8:	2302      	movs	r3, #2
 80034fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800350a:	f107 030c 	add.w	r3, r7, #12
 800350e:	2102      	movs	r1, #2
 8003510:	4618      	mov	r0, r3
 8003512:	f006 f879 	bl	8009608 <HAL_RCC_ClockConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800351c:	f000 f808 	bl	8003530 <Error_Handler>
  }
}
 8003520:	bf00      	nop
 8003522:	3750      	adds	r7, #80	; 0x50
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	40007000 	.word	0x40007000

08003530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003534:	b672      	cpsid	i
}
 8003536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003538:	e7fe      	b.n	8003538 <Error_Handler+0x8>

0800353a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003556:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <MX_SPI1_Init+0x68>)
 8003558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <MX_SPI1_Init+0x64>)
 800355c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <MX_SPI1_Init+0x64>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003576:	2200      	movs	r2, #0
 8003578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <MX_SPI1_Init+0x64>)
 800357c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003584:	2200      	movs	r2, #0
 8003586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <MX_SPI1_Init+0x64>)
 800358a:	2200      	movs	r2, #0
 800358c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003590:	2200      	movs	r2, #0
 8003592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003594:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <MX_SPI1_Init+0x64>)
 800359c:	220a      	movs	r2, #10
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035a0:	4804      	ldr	r0, [pc, #16]	; (80035b4 <MX_SPI1_Init+0x64>)
 80035a2:	f006 fac1 	bl	8009b28 <HAL_SPI_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035ac:	f7ff ffc0 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000d60 	.word	0x20000d60
 80035b8:	40013000 	.word	0x40013000

080035bc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80035c0:	4b17      	ldr	r3, [pc, #92]	; (8003620 <MX_SPI2_Init+0x64>)
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <MX_SPI2_Init+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035c6:	4b16      	ldr	r3, [pc, #88]	; (8003620 <MX_SPI2_Init+0x64>)
 80035c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035ce:	4b14      	ldr	r3, [pc, #80]	; (8003620 <MX_SPI2_Init+0x64>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <MX_SPI2_Init+0x64>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <MX_SPI2_Init+0x64>)
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035e0:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <MX_SPI2_Init+0x64>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <MX_SPI2_Init+0x64>)
 80035e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <MX_SPI2_Init+0x64>)
 80035f0:	2210      	movs	r2, #16
 80035f2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <MX_SPI2_Init+0x64>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <MX_SPI2_Init+0x64>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <MX_SPI2_Init+0x64>)
 8003602:	2200      	movs	r2, #0
 8003604:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <MX_SPI2_Init+0x64>)
 8003608:	220a      	movs	r2, #10
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800360c:	4804      	ldr	r0, [pc, #16]	; (8003620 <MX_SPI2_Init+0x64>)
 800360e:	f006 fa8b 	bl	8009b28 <HAL_SPI_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003618:	f7ff ff8a 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}
 8003620:	20000d08 	.word	0x20000d08
 8003624:	40003800 	.word	0x40003800

08003628 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a32      	ldr	r2, [pc, #200]	; (8003710 <HAL_SPI_MspInit+0xe8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d12c      	bne.n	80036a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	4b31      	ldr	r3, [pc, #196]	; (8003714 <HAL_SPI_MspInit+0xec>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a30      	ldr	r2, [pc, #192]	; (8003714 <HAL_SPI_MspInit+0xec>)
 8003654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
 800365a:	4b2e      	ldr	r3, [pc, #184]	; (8003714 <HAL_SPI_MspInit+0xec>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <HAL_SPI_MspInit+0xec>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a29      	ldr	r2, [pc, #164]	; (8003714 <HAL_SPI_MspInit+0xec>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b27      	ldr	r3, [pc, #156]	; (8003714 <HAL_SPI_MspInit+0xec>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003682:	23e0      	movs	r3, #224	; 0xe0
 8003684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368e:	2303      	movs	r3, #3
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003692:	2305      	movs	r3, #5
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003696:	f107 031c 	add.w	r3, r7, #28
 800369a:	4619      	mov	r1, r3
 800369c:	481e      	ldr	r0, [pc, #120]	; (8003718 <HAL_SPI_MspInit+0xf0>)
 800369e:	f002 fa47 	bl	8005b30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80036a2:	e031      	b.n	8003708 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	; (800371c <HAL_SPI_MspInit+0xf4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d12c      	bne.n	8003708 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <HAL_SPI_MspInit+0xec>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <HAL_SPI_MspInit+0xec>)
 80036b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036bc:	6413      	str	r3, [r2, #64]	; 0x40
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <HAL_SPI_MspInit+0xec>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_SPI_MspInit+0xec>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_SPI_MspInit+0xec>)
 80036d4:	f043 0302 	orr.w	r3, r3, #2
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_SPI_MspInit+0xec>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80036e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80036ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f4:	2303      	movs	r3, #3
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036f8:	2305      	movs	r3, #5
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	4619      	mov	r1, r3
 8003702:	4807      	ldr	r0, [pc, #28]	; (8003720 <HAL_SPI_MspInit+0xf8>)
 8003704:	f002 fa14 	bl	8005b30 <HAL_GPIO_Init>
}
 8003708:	bf00      	nop
 800370a:	3730      	adds	r7, #48	; 0x30
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40013000 	.word	0x40013000
 8003714:	40023800 	.word	0x40023800
 8003718:	40020000 	.word	0x40020000
 800371c:	40003800 	.word	0x40003800
 8003720:	40020400 	.word	0x40020400

08003724 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_SPI_MspDeInit+0x50>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10a      	bne.n	800374c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_SPI_MspDeInit+0x54>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_SPI_MspDeInit+0x54>)
 800373c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8003742:	21e0      	movs	r1, #224	; 0xe0
 8003744:	480d      	ldr	r0, [pc, #52]	; (800377c <HAL_SPI_MspDeInit+0x58>)
 8003746:	f002 fc8f 	bl	8006068 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800374a:	e00f      	b.n	800376c <HAL_SPI_MspDeInit+0x48>
  else if(spiHandle->Instance==SPI2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0b      	ldr	r2, [pc, #44]	; (8003780 <HAL_SPI_MspDeInit+0x5c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10a      	bne.n	800376c <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_SPI_MspDeInit+0x54>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_SPI_MspDeInit+0x54>)
 800375c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003760:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8003762:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003766:	4807      	ldr	r0, [pc, #28]	; (8003784 <HAL_SPI_MspDeInit+0x60>)
 8003768:	f002 fc7e 	bl	8006068 <HAL_GPIO_DeInit>
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40013000 	.word	0x40013000
 8003778:	40023800 	.word	0x40023800
 800377c:	40020000 	.word	0x40020000
 8003780:	40003800 	.word	0x40003800
 8003784:	40020400 	.word	0x40020400

08003788 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800378c:	4814      	ldr	r0, [pc, #80]	; (80037e0 <I2Cx_Init+0x58>)
 800378e:	f005 f8a9 	bl	80088e4 <HAL_I2C_GetState>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d121      	bne.n	80037dc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <I2Cx_Init+0x58>)
 800379a:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <I2Cx_Init+0x5c>)
 800379c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <I2Cx_Init+0x58>)
 80037a0:	2243      	movs	r2, #67	; 0x43
 80037a2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <I2Cx_Init+0x58>)
 80037a6:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <I2Cx_Init+0x60>)
 80037a8:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <I2Cx_Init+0x58>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <I2Cx_Init+0x58>)
 80037b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037b6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <I2Cx_Init+0x58>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <I2Cx_Init+0x58>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <I2Cx_Init+0x58>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <I2Cx_Init+0x58>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80037d0:	4803      	ldr	r0, [pc, #12]	; (80037e0 <I2Cx_Init+0x58>)
 80037d2:	f000 f86b 	bl	80038ac <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80037d6:	4802      	ldr	r0, [pc, #8]	; (80037e0 <I2Cx_Init+0x58>)
 80037d8:	f004 fb34 	bl	8007e44 <HAL_I2C_Init>
  }
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000310 	.word	0x20000310
 80037e4:	40005400 	.word	0x40005400
 80037e8:	000186a0 	.word	0x000186a0

080037ec <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af04      	add	r7, sp, #16
 80037f2:	4603      	mov	r3, r0
 80037f4:	80fb      	strh	r3, [r7, #6]
 80037f6:	460b      	mov	r3, r1
 80037f8:	717b      	strb	r3, [r7, #5]
 80037fa:	4613      	mov	r3, r2
 80037fc:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8003802:	797b      	ldrb	r3, [r7, #5]
 8003804:	b29a      	uxth	r2, r3
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <I2Cx_WriteData+0x48>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	88f9      	ldrh	r1, [r7, #6]
 800380c:	9302      	str	r3, [sp, #8]
 800380e:	2301      	movs	r3, #1
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2301      	movs	r3, #1
 8003818:	4807      	ldr	r0, [pc, #28]	; (8003838 <I2Cx_WriteData+0x4c>)
 800381a:	f004 fd2b 	bl	8008274 <HAL_I2C_Mem_Write>
 800381e:	4603      	mov	r3, r0
 8003820:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8003828:	f000 f834 	bl	8003894 <I2Cx_Error>
  }
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	200000d0 	.word	0x200000d0
 8003838:	20000310 	.word	0x20000310

0800383c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af04      	add	r7, sp, #16
 8003842:	4603      	mov	r3, r0
 8003844:	460a      	mov	r2, r1
 8003846:	80fb      	strh	r3, [r7, #6]
 8003848:	4613      	mov	r3, r2
 800384a:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003854:	797b      	ldrb	r3, [r7, #5]
 8003856:	b29a      	uxth	r2, r3
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <I2Cx_ReadData+0x50>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	88f9      	ldrh	r1, [r7, #6]
 800385e:	9302      	str	r3, [sp, #8]
 8003860:	2301      	movs	r3, #1
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	f107 030e 	add.w	r3, r7, #14
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2301      	movs	r3, #1
 800386c:	4808      	ldr	r0, [pc, #32]	; (8003890 <I2Cx_ReadData+0x54>)
 800386e:	f004 fe07 	bl	8008480 <HAL_I2C_Mem_Read>
 8003872:	4603      	mov	r3, r0
 8003874:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800387c:	f000 f80a 	bl	8003894 <I2Cx_Error>
  }
  return value;
 8003880:	7bbb      	ldrb	r3, [r7, #14]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200000d0 	.word	0x200000d0
 8003890:	20000310 	.word	0x20000310

08003894 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003898:	4803      	ldr	r0, [pc, #12]	; (80038a8 <I2Cx_Error+0x14>)
 800389a:	f004 fc9f 	bl	80081dc <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800389e:	f7ff ff73 	bl	8003788 <I2Cx_Init>
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000310 	.word	0x20000310

080038ac <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	4b25      	ldr	r3, [pc, #148]	; (8003950 <I2Cx_MspInit+0xa4>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a24      	ldr	r2, [pc, #144]	; (8003950 <I2Cx_MspInit+0xa4>)
 80038be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
 80038c4:	4b22      	ldr	r3, [pc, #136]	; (8003950 <I2Cx_MspInit+0xa4>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <I2Cx_MspInit+0xa4>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <I2Cx_MspInit+0xa4>)
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	6313      	str	r3, [r2, #48]	; 0x30
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <I2Cx_MspInit+0xa4>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 80038ec:	f44f 7310 	mov.w	r3, #576	; 0x240
 80038f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80038f2:	2312      	movs	r3, #18
 80038f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80038fa:	2302      	movs	r3, #2
 80038fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80038fe:	2304      	movs	r3, #4
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8003902:	f107 0314 	add.w	r3, r7, #20
 8003906:	4619      	mov	r1, r3
 8003908:	4812      	ldr	r0, [pc, #72]	; (8003954 <I2Cx_MspInit+0xa8>)
 800390a:	f002 f911 	bl	8005b30 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <I2Cx_MspInit+0xa4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <I2Cx_MspInit+0xa4>)
 8003914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003918:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <I2Cx_MspInit+0xa4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <I2Cx_MspInit+0xa4>)
 8003920:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003924:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	210f      	movs	r1, #15
 800392a:	201f      	movs	r0, #31
 800392c:	f001 fba2 	bl	8005074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003930:	201f      	movs	r0, #31
 8003932:	f001 fbcb 	bl	80050cc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	210f      	movs	r1, #15
 800393a:	2020      	movs	r0, #32
 800393c:	f001 fb9a 	bl	8005074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8003940:	2020      	movs	r0, #32
 8003942:	f001 fbc3 	bl	80050cc <HAL_NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3728      	adds	r7, #40	; 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800
 8003954:	40020400 	.word	0x40020400

08003958 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization.
  */
static void SPIx_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800395c:	4819      	ldr	r0, [pc, #100]	; (80039c4 <SPIx_Init+0x6c>)
 800395e:	f006 fdcb 	bl	800a4f8 <HAL_SPI_GetState>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d12b      	bne.n	80039c0 <SPIx_Init+0x68>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <SPIx_Init+0x6c>)
 800396a:	4a17      	ldr	r2, [pc, #92]	; (80039c8 <SPIx_Init+0x70>)
 800396c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <SPIx_Init+0x6c>)
 8003970:	2210      	movs	r2, #16
 8003972:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <SPIx_Init+0x6c>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <SPIx_Init+0x6c>)
 800397c:	2200      	movs	r2, #0
 800397e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <SPIx_Init+0x6c>)
 8003982:	2200      	movs	r2, #0
 8003984:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003986:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <SPIx_Init+0x6c>)
 8003988:	2200      	movs	r2, #0
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <SPIx_Init+0x6c>)
 800398e:	2207      	movs	r2, #7
 8003990:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <SPIx_Init+0x6c>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <SPIx_Init+0x6c>)
 800399a:	2200      	movs	r2, #0
 800399c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <SPIx_Init+0x6c>)
 80039a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <SPIx_Init+0x6c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <SPIx_Init+0x6c>)
 80039ae:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039b2:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit(&SpiHandle);
 80039b4:	4803      	ldr	r0, [pc, #12]	; (80039c4 <SPIx_Init+0x6c>)
 80039b6:	f000 f835 	bl	8003a24 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80039ba:	4802      	ldr	r0, [pc, #8]	; (80039c4 <SPIx_Init+0x6c>)
 80039bc:	f006 f8b4 	bl	8009b28 <HAL_SPI_Init>
  }
}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000364 	.word	0x20000364
 80039c8:	40013000 	.word	0x40013000

080039cc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80039da:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <SPIx_WriteRead+0x38>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f107 020f 	add.w	r2, r7, #15
 80039e2:	1df9      	adds	r1, r7, #7
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2301      	movs	r3, #1
 80039e8:	4807      	ldr	r0, [pc, #28]	; (8003a08 <SPIx_WriteRead+0x3c>)
 80039ea:	f006 fbd7 	bl	800a19c <HAL_SPI_TransmitReceive>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80039f4:	f000 f80a 	bl	8003a0c <SPIx_Error>
  }
  
  return receivedbyte;
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200000d4 	.word	0x200000d4
 8003a08:	20000364 	.word	0x20000364

08003a0c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error (void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <SPIx_Error+0x14>)
 8003a12:	f006 fa25 	bl	8009e60 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8003a16:	f7ff ff9f 	bl	8003958 <SPIx_Init>
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000364 	.word	0x20000364

08003a24 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08a      	sub	sp, #40	; 0x28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <SPIx_MspInit+0x68>)
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <SPIx_MspInit+0x68>)
 8003a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3c:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <SPIx_MspInit+0x68>)
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <SPIx_MspInit+0x68>)
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a50:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <SPIx_MspInit+0x68>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6313      	str	r3, [r2, #48]	; 0x30
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <SPIx_MspInit+0x68>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003a64:	23e0      	movs	r3, #224	; 0xe0
 8003a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003a70:	2301      	movs	r3, #1
 8003a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003a74:	2305      	movs	r3, #5
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4804      	ldr	r0, [pc, #16]	; (8003a90 <SPIx_MspInit+0x6c>)
 8003a80:	f002 f856 	bl	8005b30 <HAL_GPIO_Init>
}
 8003a84:	bf00      	nop
 8003a86:	3728      	adds	r7, #40	; 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40020000 	.word	0x40020000

08003a94 <GYRO_IO_Init>:
/********************************* LINK GYROSCOPE *****************************/
/**
  * @brief  Configures the GYRO SPI interface.
  */
void GYRO_IO_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <GYRO_IO_Init+0x8c>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <GYRO_IO_Init+0x8c>)
 8003aa4:	f043 0310 	orr.w	r3, r3, #16
 8003aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <GYRO_IO_Init+0x8c>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	f003 0310 	and.w	r3, r3, #16
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003aba:	2301      	movs	r3, #1
 8003abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	4619      	mov	r1, r3
 8003acc:	4815      	ldr	r0, [pc, #84]	; (8003b24 <GYRO_IO_Init+0x90>)
 8003ace:	f002 f82f 	bl	8005b30 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	2108      	movs	r1, #8
 8003ad6:	4813      	ldr	r0, [pc, #76]	; (8003b24 <GYRO_IO_Init+0x90>)
 8003ad8:	f002 fbee 	bl	80062b8 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8003adc:	2300      	movs	r3, #0
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <GYRO_IO_Init+0x8c>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <GYRO_IO_Init+0x8c>)
 8003ae6:	f043 0310 	orr.w	r3, r3, #16
 8003aea:	6313      	str	r3, [r2, #48]	; 0x30
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <GYRO_IO_Init+0x8c>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8003af8:	2303      	movs	r3, #3
 8003afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003b00:	2302      	movs	r3, #2
 8003b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4805      	ldr	r0, [pc, #20]	; (8003b24 <GYRO_IO_Init+0x90>)
 8003b10:	f002 f80e 	bl	8005b30 <HAL_GPIO_Init>
  
  SPIx_Init();
 8003b14:	f7ff ff20 	bl	8003958 <SPIx_Init>
}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40021000 	.word	0x40021000

08003b28 <GYRO_IO_Write>:
  * @param  pBuffer: pointer to the buffer  containing the data to be written to the GYRO.
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
 8003b34:	4613      	mov	r3, r2
 8003b36:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8003b38:	883b      	ldrh	r3, [r7, #0]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d903      	bls.n	8003b46 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b44:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003b46:	2200      	movs	r2, #0
 8003b48:	2108      	movs	r1, #8
 8003b4a:	480f      	ldr	r0, [pc, #60]	; (8003b88 <GYRO_IO_Write+0x60>)
 8003b4c:	f002 fbb4 	bl	80062b8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff ff3a 	bl	80039cc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8003b58:	e00a      	b.n	8003b70 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff34 	bl	80039cc <SPIx_WriteRead>
    NumByteToWrite--;
 8003b64:	883b      	ldrh	r3, [r7, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8003b70:	883b      	ldrh	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f1      	bne.n	8003b5a <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003b76:	2201      	movs	r2, #1
 8003b78:	2108      	movs	r1, #8
 8003b7a:	4803      	ldr	r0, [pc, #12]	; (8003b88 <GYRO_IO_Write+0x60>)
 8003b7c:	f002 fb9c 	bl	80062b8 <HAL_GPIO_WritePin>
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000

08003b8c <GYRO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the GYRO.
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8003b9c:	883b      	ldrh	r3, [r7, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d904      	bls.n	8003bac <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003ba8:	70fb      	strb	r3, [r7, #3]
 8003baa:	e003      	b.n	8003bb4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bb2:	70fb      	strb	r3, [r7, #3]
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2108      	movs	r1, #8
 8003bb8:	4810      	ldr	r0, [pc, #64]	; (8003bfc <GYRO_IO_Read+0x70>)
 8003bba:	f002 fb7d 	bl	80062b8 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff03 	bl	80039cc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8003bc6:	e00c      	b.n	8003be2 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYRO (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7ff feff 	bl	80039cc <SPIx_WriteRead>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8003bd6:	883b      	ldrh	r3, [r7, #0]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3301      	adds	r3, #1
 8003be0:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8003be2:	883b      	ldrh	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ef      	bne.n	8003bc8 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003be8:	2201      	movs	r2, #1
 8003bea:	2108      	movs	r1, #8
 8003bec:	4803      	ldr	r0, [pc, #12]	; (8003bfc <GYRO_IO_Read+0x70>)
 8003bee:	f002 fb63 	bl	80062b8 <HAL_GPIO_WritePin>
}  
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000

08003c00 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <COMPASSACCELERO_IO_Init+0x48>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <COMPASSACCELERO_IO_Init+0x48>)
 8003c10:	f043 0310 	orr.w	r3, r3, #16
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <COMPASSACCELERO_IO_Init+0x48>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8003c22:	2304      	movs	r3, #4
 8003c24:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4805      	ldr	r0, [pc, #20]	; (8003c4c <COMPASSACCELERO_IO_Init+0x4c>)
 8003c38:	f001 ff7a 	bl	8005b30 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8003c3c:	f7ff fda4 	bl	8003788 <I2Cx_Init>
}
 8003c40:	bf00      	nop
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40021000 	.word	0x40021000

08003c50 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003c60:	f043 0310 	orr.w	r3, r3, #16
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8003c72:	2330      	movs	r3, #48	; 0x30
 8003c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8003c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	4619      	mov	r1, r3
 8003c88:	4808      	ldr	r0, [pc, #32]	; (8003cac <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8003c8a:	f001 ff51 	bl	8005b30 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8003c8e:	2200      	movs	r2, #0
 8003c90:	210f      	movs	r1, #15
 8003c92:	200a      	movs	r0, #10
 8003c94:	f001 f9ee 	bl	8005074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8003c98:	200a      	movs	r0, #10
 8003c9a:	f001 fa17 	bl	80050cc <HAL_NVIC_EnableIRQ>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40021000 	.word	0x40021000

08003cb0 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	80fb      	strh	r3, [r7, #6]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	717b      	strb	r3, [r7, #5]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8003cc2:	793a      	ldrb	r2, [r7, #4]
 8003cc4:	7979      	ldrb	r1, [r7, #5]
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fd8f 	bl	80037ec <I2Cx_WriteData>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	460a      	mov	r2, r1
 8003ce0:	80fb      	strh	r3, [r7, #6]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8003ce6:	797a      	ldrb	r2, [r7, #5]
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff fda5 	bl	800383c <I2Cx_ReadData>
 8003cf2:	4603      	mov	r3, r0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8003d06:	2300      	movs	r3, #0
 8003d08:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8003d12:	4b58      	ldr	r3, [pc, #352]	; (8003e74 <BSP_ACCELERO_Init+0x178>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4798      	blx	r3
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b33      	cmp	r3, #51	; 0x33
 8003d1c:	d14f      	bne.n	8003dbe <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8003d1e:	4b56      	ldr	r3, [pc, #344]	; (8003e78 <BSP_ACCELERO_Init+0x17c>)
 8003d20:	4a54      	ldr	r2, [pc, #336]	; (8003e74 <BSP_ACCELERO_Init+0x178>)
 8003d22:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8003d28:	2340      	movs	r3, #64	; 0x40
 8003d2a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8003d2c:	2307      	movs	r3, #7
 8003d2e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8003d30:	2300      	movs	r3, #0
 8003d32:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8003d34:	2300      	movs	r3, #0
 8003d36:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8003d3c:	2308      	movs	r3, #8
 8003d3e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003d40:	7b3a      	ldrb	r2, [r7, #12]
 8003d42:	7b7b      	ldrb	r3, [r7, #13]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003d48:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	8abb      	ldrh	r3, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003d56:	7c3a      	ldrb	r2, [r7, #16]
 8003d58:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	7cbb      	ldrb	r3, [r7, #18]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003d6c:	b21a      	sxth	r2, r3
 8003d6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003d78:	4b3f      	ldr	r3, [pc, #252]	; (8003e78 <BSP_ACCELERO_Init+0x17c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	8aba      	ldrh	r2, [r7, #20]
 8003d80:	4610      	mov	r0, r2
 8003d82:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8003d88:	2310      	movs	r3, #16
 8003d8a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003d94:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003d96:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003d9c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003da2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003daa:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <BSP_ACCELERO_Init+0x17c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	8aba      	ldrh	r2, [r7, #20]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	4610      	mov	r0, r2
 8003db6:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	75fb      	strb	r3, [r7, #23]
 8003dbc:	e054      	b.n	8003e68 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8003dbe:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <BSP_ACCELERO_Init+0x180>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	4798      	blx	r3
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b33      	cmp	r3, #51	; 0x33
 8003dc8:	d14e      	bne.n	8003e68 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8003dca:	4b2b      	ldr	r3, [pc, #172]	; (8003e78 <BSP_ACCELERO_Init+0x17c>)
 8003dcc:	4a2b      	ldr	r2, [pc, #172]	; (8003e7c <BSP_ACCELERO_Init+0x180>)
 8003dce:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8003dd4:	2340      	movs	r3, #64	; 0x40
 8003dd6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8003dd8:	2307      	movs	r3, #7
 8003dda:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8003de0:	2300      	movs	r3, #0
 8003de2:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8003de4:	2300      	movs	r3, #0
 8003de6:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8003de8:	2308      	movs	r3, #8
 8003dea:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003dec:	7b3a      	ldrb	r2, [r7, #12]
 8003dee:	7b7b      	ldrb	r3, [r7, #13]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003df4:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003df6:	4313      	orrs	r3, r2
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	8abb      	ldrh	r3, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003e02:	7c3a      	ldrb	r2, [r7, #16]
 8003e04:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	7cbb      	ldrb	r3, [r7, #18]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003e18:	b21a      	sxth	r2, r3
 8003e1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <BSP_ACCELERO_Init+0x17c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	8aba      	ldrh	r2, [r7, #20]
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8003e34:	2310      	movs	r3, #16
 8003e36:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e40:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003e42:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003e48:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003e56:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <BSP_ACCELERO_Init+0x17c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	8aba      	ldrh	r2, [r7, #20]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	4610      	mov	r0, r2
 8003e62:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000009c 	.word	0x2000009c
 8003e78:	200003bc 	.word	0x200003bc
 8003e7c:	20000068 	.word	0x20000068

08003e80 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <BSP_ACCELERO_GetXYZ+0x50>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d018      	beq.n	8003ec8 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8003e96:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <BSP_ACCELERO_GetXYZ+0x50>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <BSP_ACCELERO_GetXYZ+0x50>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0b      	ldr	r2, [pc, #44]	; (8003ed4 <BSP_ACCELERO_GetXYZ+0x54>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10e      	bne.n	8003ec8 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8003eba:	89fb      	ldrh	r3, [r7, #14]
 8003ebc:	425b      	negs	r3, r3
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	b212      	sxth	r2, r2
 8003ec6:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	200003bc 	.word	0x200003bc
 8003ed4:	2000009c 	.word	0x2000009c

08003ed8 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	703b      	strb	r3, [r7, #0]
 8003eea:	2300      	movs	r3, #0
 8003eec:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003eee:	4b52      	ldr	r3, [pc, #328]	; (8004038 <BSP_GYRO_Init+0x160>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4798      	blx	r3
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2bd4      	cmp	r3, #212	; 0xd4
 8003ef8:	d005      	beq.n	8003f06 <BSP_GYRO_Init+0x2e>
 8003efa:	4b4f      	ldr	r3, [pc, #316]	; (8004038 <BSP_GYRO_Init+0x160>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	4798      	blx	r3
 8003f00:	4603      	mov	r3, r0
 8003f02:	2bd5      	cmp	r3, #213	; 0xd5
 8003f04:	d146      	bne.n	8003f94 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003f06:	4b4d      	ldr	r3, [pc, #308]	; (800403c <BSP_GYRO_Init+0x164>)
 8003f08:	4a4b      	ldr	r2, [pc, #300]	; (8004038 <BSP_GYRO_Init+0x160>)
 8003f0a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003f10:	2300      	movs	r3, #0
 8003f12:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003f14:	2307      	movs	r3, #7
 8003f16:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003f18:	2330      	movs	r3, #48	; 0x30
 8003f1a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003f20:	2300      	movs	r3, #0
 8003f22:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003f24:	2310      	movs	r3, #16
 8003f26:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003f28:	793a      	ldrb	r2, [r7, #4]
 8003f2a:	797b      	ldrb	r3, [r7, #5]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003f30:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003f36:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003f3e:	7a3a      	ldrb	r2, [r7, #8]
 8003f40:	7a7b      	ldrb	r3, [r7, #9]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003f46:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	89bb      	ldrh	r3, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003f58:	4b38      	ldr	r3, [pc, #224]	; (800403c <BSP_GYRO_Init+0x164>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	89ba      	ldrh	r2, [r7, #12]
 8003f60:	4610      	mov	r0, r2
 8003f62:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8003f64:	2300      	movs	r3, #0
 8003f66:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003f6c:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003f6e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003f70:	4313      	orrs	r3, r2
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8003f76:	4b31      	ldr	r3, [pc, #196]	; (800403c <BSP_GYRO_Init+0x164>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	89ba      	ldrh	r2, [r7, #12]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	4610      	mov	r0, r2
 8003f82:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003f84:	4b2d      	ldr	r3, [pc, #180]	; (800403c <BSP_GYRO_Init+0x164>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	2010      	movs	r0, #16
 8003f8c:	4798      	blx	r3

    ret = GYRO_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	e04b      	b.n	800402c <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8003f94:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <BSP_GYRO_Init+0x168>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4798      	blx	r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2bd3      	cmp	r3, #211	; 0xd3
 8003f9e:	d145      	bne.n	800402c <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <BSP_GYRO_Init+0x164>)
 8003fa2:	4a27      	ldr	r2, [pc, #156]	; (8004040 <BSP_GYRO_Init+0x168>)
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8003faa:	2300      	movs	r3, #0
 8003fac:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8003fae:	2307      	movs	r3, #7
 8003fb0:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8003fb2:	2330      	movs	r3, #48	; 0x30
 8003fb4:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fc2:	793a      	ldrb	r2, [r7, #4]
 8003fc4:	797b      	ldrb	r3, [r7, #5]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003fca:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003fd8:	7a3a      	ldrb	r2, [r7, #8]
 8003fda:	7a7b      	ldrb	r3, [r7, #9]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003fe0:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	89bb      	ldrh	r3, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <BSP_GYRO_Init+0x164>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	89ba      	ldrh	r2, [r7, #12]
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8003ffe:	2300      	movs	r3, #0
 8004000:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8004002:	2300      	movs	r3, #0
 8004004:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004006:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8004008:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800400a:	4313      	orrs	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8004010:	4b0a      	ldr	r3, [pc, #40]	; (800403c <BSP_GYRO_Init+0x164>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	89ba      	ldrh	r2, [r7, #12]
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	4610      	mov	r0, r2
 800401c:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <BSP_GYRO_Init+0x164>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	2010      	movs	r0, #16
 8004026:	4798      	blx	r3

    ret = GYRO_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000034 	.word	0x20000034
 800403c:	200003c0 	.word	0x200003c0
 8004040:	20000000 	.word	0x20000000

08004044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_MspInit+0x4c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	4a0f      	ldr	r2, [pc, #60]	; (8004090 <HAL_MspInit+0x4c>)
 8004054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004058:	6453      	str	r3, [r2, #68]	; 0x44
 800405a:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <HAL_MspInit+0x4c>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_MspInit+0x4c>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_MspInit+0x4c>)
 8004070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004074:	6413      	str	r3, [r2, #64]	; 0x40
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_MspInit+0x4c>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004082:	2007      	movs	r0, #7
 8004084:	f000 ffd6 	bl	8005034 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800

08004094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004098:	e7fe      	b.n	8004098 <NMI_Handler+0x4>

0800409a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800409e:	e7fe      	b.n	800409e <HardFault_Handler+0x4>

080040a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a4:	e7fe      	b.n	80040a4 <MemManage_Handler+0x4>

080040a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a6:	b480      	push	{r7}
 80040a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040aa:	e7fe      	b.n	80040aa <BusFault_Handler+0x4>

080040ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b0:	e7fe      	b.n	80040b0 <UsageFault_Handler+0x4>

080040b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b2:	b480      	push	{r7}
 80040b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ce:	b480      	push	{r7}
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e0:	f000 fab6 	bl	8004650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e4:	bf00      	nop
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80040ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80040f0:	f002 f914 	bl	800631c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80040f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80040f8:	f002 f910 	bl	800631c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}

08004100 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004104:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004108:	f002 f908 	bl	800631c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}

08004110 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <DMA2_Stream0_IRQHandler+0x10>)
 8004116:	f001 faa1 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000041c 	.word	0x2000041c

08004124 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004128:	4802      	ldr	r0, [pc, #8]	; (8004134 <DMA2_Stream1_IRQHandler+0x10>)
 800412a:	f001 fa97 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000db8 	.word	0x20000db8

08004138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800413c:	4802      	ldr	r0, [pc, #8]	; (8004148 <OTG_FS_IRQHandler+0x10>)
 800413e:	f002 fb7b 	bl	8006838 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000123c 	.word	0x2000123c

0800414c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
	return 1;
 8004150:	2301      	movs	r3, #1
}
 8004152:	4618      	mov	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <_kill>:

int _kill(int pid, int sig)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004166:	f00b fc27 	bl	800f9b8 <__errno>
 800416a:	4603      	mov	r3, r0
 800416c:	2216      	movs	r2, #22
 800416e:	601a      	str	r2, [r3, #0]
	return -1;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_exit>:

void _exit (int status)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ffe7 	bl	800415c <_kill>
	while (1) {}		/* Make sure we hang here */
 800418e:	e7fe      	b.n	800418e <_exit+0x12>

08004190 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e00a      	b.n	80041b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041a2:	f3af 8000 	nop.w
 80041a6:	4601      	mov	r1, r0
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	60ba      	str	r2, [r7, #8]
 80041ae:	b2ca      	uxtb	r2, r1
 80041b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3301      	adds	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	dbf0      	blt.n	80041a2 <_read+0x12>
	}

return len;
 80041c0:	687b      	ldr	r3, [r7, #4]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e009      	b.n	80041f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	60ba      	str	r2, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3301      	adds	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	dbf1      	blt.n	80041dc <_write+0x12>
	}
	return len;
 80041f8:	687b      	ldr	r3, [r7, #4]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <_close>:

int _close(int file)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
	return -1;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800422a:	605a      	str	r2, [r3, #4]
	return 0;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <_isatty>:

int _isatty(int file)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
	return 1;
 8004242:	2301      	movs	r3, #1
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	return 0;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <_sbrk+0x5c>)
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <_sbrk+0x60>)
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <_sbrk+0x64>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <_sbrk+0x64>)
 800428a:	4a12      	ldr	r2, [pc, #72]	; (80042d4 <_sbrk+0x68>)
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d207      	bcs.n	80042ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800429c:	f00b fb8c 	bl	800f9b8 <__errno>
 80042a0:	4603      	mov	r3, r0
 80042a2:	220c      	movs	r2, #12
 80042a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042aa:	e009      	b.n	80042c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042ac:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <_sbrk+0x64>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042b2:	4b07      	ldr	r3, [pc, #28]	; (80042d0 <_sbrk+0x64>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	4a05      	ldr	r2, [pc, #20]	; (80042d0 <_sbrk+0x64>)
 80042bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042be:	68fb      	ldr	r3, [r7, #12]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20020000 	.word	0x20020000
 80042cc:	00000400 	.word	0x00000400
 80042d0:	200003c4 	.word	0x200003c4
 80042d4:	20001550 	.word	0x20001550

080042d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <SystemInit+0x20>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	4a05      	ldr	r2, [pc, #20]	; (80042f8 <SystemInit+0x20>)
 80042e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b096      	sub	sp, #88	; 0x58
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004302:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004310:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800431a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	611a      	str	r2, [r3, #16]
 800432a:	615a      	str	r2, [r3, #20]
 800432c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	2220      	movs	r2, #32
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f00b fb79 	bl	800fa2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800433a:	4b3e      	ldr	r3, [pc, #248]	; (8004434 <MX_TIM1_Init+0x138>)
 800433c:	4a3e      	ldr	r2, [pc, #248]	; (8004438 <MX_TIM1_Init+0x13c>)
 800433e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004340:	4b3c      	ldr	r3, [pc, #240]	; (8004434 <MX_TIM1_Init+0x138>)
 8004342:	2200      	movs	r2, #0
 8004344:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004346:	4b3b      	ldr	r3, [pc, #236]	; (8004434 <MX_TIM1_Init+0x138>)
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800434c:	4b39      	ldr	r3, [pc, #228]	; (8004434 <MX_TIM1_Init+0x138>)
 800434e:	2259      	movs	r2, #89	; 0x59
 8004350:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004352:	4b38      	ldr	r3, [pc, #224]	; (8004434 <MX_TIM1_Init+0x138>)
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004358:	4b36      	ldr	r3, [pc, #216]	; (8004434 <MX_TIM1_Init+0x138>)
 800435a:	2200      	movs	r2, #0
 800435c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800435e:	4b35      	ldr	r3, [pc, #212]	; (8004434 <MX_TIM1_Init+0x138>)
 8004360:	2200      	movs	r2, #0
 8004362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004364:	4833      	ldr	r0, [pc, #204]	; (8004434 <MX_TIM1_Init+0x138>)
 8004366:	f006 f99f 	bl	800a6a8 <HAL_TIM_Base_Init>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004370:	f7ff f8de 	bl	8003530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004378:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800437a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800437e:	4619      	mov	r1, r3
 8004380:	482c      	ldr	r0, [pc, #176]	; (8004434 <MX_TIM1_Init+0x138>)
 8004382:	f007 f84f 	bl	800b424 <HAL_TIM_ConfigClockSource>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800438c:	f7ff f8d0 	bl	8003530 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004390:	4828      	ldr	r0, [pc, #160]	; (8004434 <MX_TIM1_Init+0x138>)
 8004392:	f006 fa4f 	bl	800a834 <HAL_TIM_PWM_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800439c:	f7ff f8c8 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a0:	2300      	movs	r3, #0
 80043a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043ac:	4619      	mov	r1, r3
 80043ae:	4821      	ldr	r0, [pc, #132]	; (8004434 <MX_TIM1_Init+0x138>)
 80043b0:	f007 ffca 	bl	800c348 <HAL_TIMEx_MasterConfigSynchronization>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80043ba:	f7ff f8b9 	bl	8003530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043be:	2360      	movs	r3, #96	; 0x60
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043c6:	2300      	movs	r3, #0
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043ca:	2300      	movs	r3, #0
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043d6:	2300      	movs	r3, #0
 80043d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043de:	2200      	movs	r2, #0
 80043e0:	4619      	mov	r1, r3
 80043e2:	4814      	ldr	r0, [pc, #80]	; (8004434 <MX_TIM1_Init+0x138>)
 80043e4:	f006 fe78 	bl	800b0d8 <HAL_TIM_PWM_ConfigChannel>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80043ee:	f7ff f89f 	bl	8003530 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800440a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800440c:	2300      	movs	r3, #0
 800440e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004410:	1d3b      	adds	r3, r7, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4807      	ldr	r0, [pc, #28]	; (8004434 <MX_TIM1_Init+0x138>)
 8004416:	f008 f855 	bl	800c4c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004420:	f7ff f886 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004424:	4803      	ldr	r0, [pc, #12]	; (8004434 <MX_TIM1_Init+0x138>)
 8004426:	f000 f85d 	bl	80044e4 <HAL_TIM_MspPostInit>

}
 800442a:	bf00      	nop
 800442c:	3758      	adds	r7, #88	; 0x58
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000e18 	.word	0x20000e18
 8004438:	40010000 	.word	0x40010000

0800443c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a22      	ldr	r2, [pc, #136]	; (80044d4 <HAL_TIM_Base_MspInit+0x98>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d13d      	bne.n	80044ca <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_TIM_Base_MspInit+0x9c>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <HAL_TIM_Base_MspInit+0x9c>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6453      	str	r3, [r2, #68]	; 0x44
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_TIM_Base_MspInit+0x9c>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 800446c:	4a1c      	ldr	r2, [pc, #112]	; (80044e0 <HAL_TIM_Base_MspInit+0xa4>)
 800446e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 8004472:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004476:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 800447a:	2240      	movs	r2, #64	; 0x40
 800447c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 8004480:	2200      	movs	r2, #0
 8004482:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 8004486:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800448a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 800448e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004492:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 8004496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800449a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 800449e:	2200      	movs	r2, #0
 80044a0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80044ae:	480b      	ldr	r0, [pc, #44]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 80044b0:	f000 fe30 	bl	8005114 <HAL_DMA_Init>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80044ba:	f7ff f839 	bl	8003530 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a06      	ldr	r2, [pc, #24]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
 80044c4:	4a05      	ldr	r2, [pc, #20]	; (80044dc <HAL_TIM_Base_MspInit+0xa0>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40010000 	.word	0x40010000
 80044d8:	40023800 	.word	0x40023800
 80044dc:	20000db8 	.word	0x20000db8
 80044e0:	40026428 	.word	0x40026428

080044e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b088      	sub	sp, #32
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a12      	ldr	r2, [pc, #72]	; (800454c <HAL_TIM_MspPostInit+0x68>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d11e      	bne.n	8004544 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HAL_TIM_MspPostInit+0x6c>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <HAL_TIM_MspPostInit+0x6c>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6313      	str	r3, [r2, #48]	; 0x30
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HAL_TIM_MspPostInit+0x6c>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004526:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004528:	2302      	movs	r3, #2
 800452a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	2300      	movs	r3, #0
 8004532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004534:	2301      	movs	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	4619      	mov	r1, r3
 800453e:	4805      	ldr	r0, [pc, #20]	; (8004554 <HAL_TIM_MspPostInit+0x70>)
 8004540:	f001 faf6 	bl	8005b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004544:	bf00      	nop
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40010000 	.word	0x40010000
 8004550:	40023800 	.word	0x40023800
 8004554:	40020000 	.word	0x40020000

08004558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004590 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800455c:	480d      	ldr	r0, [pc, #52]	; (8004594 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800455e:	490e      	ldr	r1, [pc, #56]	; (8004598 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004560:	4a0e      	ldr	r2, [pc, #56]	; (800459c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004564:	e002      	b.n	800456c <LoopCopyDataInit>

08004566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800456a:	3304      	adds	r3, #4

0800456c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800456c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004570:	d3f9      	bcc.n	8004566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004572:	4a0b      	ldr	r2, [pc, #44]	; (80045a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004574:	4c0b      	ldr	r4, [pc, #44]	; (80045a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004578:	e001      	b.n	800457e <LoopFillZerobss>

0800457a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800457a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800457c:	3204      	adds	r2, #4

0800457e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004580:	d3fb      	bcc.n	800457a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004582:	f7ff fea9 	bl	80042d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004586:	f00b fa1d 	bl	800f9c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800458a:	f7fe fcb3 	bl	8002ef4 <main>
  bx  lr    
 800458e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004598:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 800459c:	08014410 	.word	0x08014410
  ldr r2, =_sbss
 80045a0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80045a4:	20001550 	.word	0x20001550

080045a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a8:	e7fe      	b.n	80045a8 <ADC_IRQHandler>
	...

080045ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045b0:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <HAL_Init+0x40>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0d      	ldr	r2, [pc, #52]	; (80045ec <HAL_Init+0x40>)
 80045b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_Init+0x40>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <HAL_Init+0x40>)
 80045c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045c8:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_Init+0x40>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a07      	ldr	r2, [pc, #28]	; (80045ec <HAL_Init+0x40>)
 80045ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d4:	2003      	movs	r0, #3
 80045d6:	f000 fd2d 	bl	8005034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045da:	2000      	movs	r0, #0
 80045dc:	f000 f808 	bl	80045f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045e0:	f7ff fd30 	bl	8004044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00

080045f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_InitTick+0x54>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4b12      	ldr	r3, [pc, #72]	; (8004648 <HAL_InitTick+0x58>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	4619      	mov	r1, r3
 8004602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004606:	fbb3 f3f1 	udiv	r3, r3, r1
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fd74 	bl	80050fc <HAL_SYSTICK_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e00e      	b.n	800463c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b0f      	cmp	r3, #15
 8004622:	d80a      	bhi.n	800463a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004624:	2200      	movs	r2, #0
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800462c:	f000 fd22 	bl	8005074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004630:	4a06      	ldr	r2, [pc, #24]	; (800464c <HAL_InitTick+0x5c>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e000      	b.n	800463c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200000d8 	.word	0x200000d8
 8004648:	200000e0 	.word	0x200000e0
 800464c:	200000dc 	.word	0x200000dc

08004650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_IncTick+0x20>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_IncTick+0x24>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4413      	add	r3, r2
 8004660:	4a04      	ldr	r2, [pc, #16]	; (8004674 <HAL_IncTick+0x24>)
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200000e0 	.word	0x200000e0
 8004674:	20000e60 	.word	0x20000e60

08004678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return uwTick;
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_GetTick+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000e60 	.word	0x20000e60

08004690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004698:	f7ff ffee 	bl	8004678 <HAL_GetTick>
 800469c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a8:	d005      	beq.n	80046b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <HAL_Delay+0x44>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046b6:	bf00      	nop
 80046b8:	f7ff ffde 	bl	8004678 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d8f7      	bhi.n	80046b8 <HAL_Delay+0x28>
  {
  }
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200000e0 	.word	0x200000e0

080046d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e147      	b.n	800497e <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4aa5      	ldr	r2, [pc, #660]	; (8004988 <HAL_ADC_Init+0x2b0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_ADC_Init+0x2a>
 80046f8:	f240 1143 	movw	r1, #323	; 0x143
 80046fc:	48a3      	ldr	r0, [pc, #652]	; (800498c <HAL_ADC_Init+0x2b4>)
 80046fe:	f7fe ff1c 	bl	800353a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d013      	beq.n	8004732 <HAL_ADC_Init+0x5a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004712:	d00e      	beq.n	8004732 <HAL_ADC_Init+0x5a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800471c:	d009      	beq.n	8004732 <HAL_ADC_Init+0x5a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004726:	d004      	beq.n	8004732 <HAL_ADC_Init+0x5a>
 8004728:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800472c:	4897      	ldr	r0, [pc, #604]	; (800498c <HAL_ADC_Init+0x2b4>)
 800472e:	f7fe ff04 	bl	800353a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d013      	beq.n	8004762 <HAL_ADC_Init+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004742:	d00e      	beq.n	8004762 <HAL_ADC_Init+0x8a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800474c:	d009      	beq.n	8004762 <HAL_ADC_Init+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004756:	d004      	beq.n	8004762 <HAL_ADC_Init+0x8a>
 8004758:	f240 1145 	movw	r1, #325	; 0x145
 800475c:	488b      	ldr	r0, [pc, #556]	; (800498c <HAL_ADC_Init+0x2b4>)
 800475e:	f7fe feec 	bl	800353a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_ADC_Init+0xa4>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d004      	beq.n	800477c <HAL_ADC_Init+0xa4>
 8004772:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004776:	4885      	ldr	r0, [pc, #532]	; (800498c <HAL_ADC_Init+0x2b4>)
 8004778:	f7fe fedf 	bl	800353a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	7e1b      	ldrb	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <HAL_ADC_Init+0xbe>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7e1b      	ldrb	r3, [r3, #24]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d004      	beq.n	8004796 <HAL_ADC_Init+0xbe>
 800478c:	f240 1147 	movw	r1, #327	; 0x147
 8004790:	487e      	ldr	r0, [pc, #504]	; (800498c <HAL_ADC_Init+0x2b4>)
 8004792:	f7fe fed2 	bl	800353a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	d054      	beq.n	8004848 <HAL_ADC_Init+0x170>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a6:	d04f      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b0:	d04a      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ba:	d045      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c4:	d040      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80047ce:	d03b      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80047d8:	d036      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80047e2:	d031      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ec:	d02c      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80047f6:	d027      	beq.n	8004848 <HAL_ADC_Init+0x170>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004800:	d022      	beq.n	8004848 <HAL_ADC_Init+0x170>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800480a:	d01d      	beq.n	8004848 <HAL_ADC_Init+0x170>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004814:	d018      	beq.n	8004848 <HAL_ADC_Init+0x170>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800481e:	d013      	beq.n	8004848 <HAL_ADC_Init+0x170>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004828:	d00e      	beq.n	8004848 <HAL_ADC_Init+0x170>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004832:	d009      	beq.n	8004848 <HAL_ADC_Init+0x170>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	4a55      	ldr	r2, [pc, #340]	; (8004990 <HAL_ADC_Init+0x2b8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_ADC_Init+0x170>
 800483e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004842:	4852      	ldr	r0, [pc, #328]	; (800498c <HAL_ADC_Init+0x2b4>)
 8004844:	f7fe fe79 	bl	800353a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d009      	beq.n	8004864 <HAL_ADC_Init+0x18c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004858:	d004      	beq.n	8004864 <HAL_ADC_Init+0x18c>
 800485a:	f240 1149 	movw	r1, #329	; 0x149
 800485e:	484b      	ldr	r0, [pc, #300]	; (800498c <HAL_ADC_Init+0x2b4>)
 8004860:	f7fe fe6b 	bl	800353a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_ADC_Init+0x19c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	2b10      	cmp	r3, #16
 8004872:	d904      	bls.n	800487e <HAL_ADC_Init+0x1a6>
 8004874:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004878:	4844      	ldr	r0, [pc, #272]	; (800498c <HAL_ADC_Init+0x2b4>)
 800487a:	f7fe fe5e 	bl	800353a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <HAL_ADC_Init+0x1c4>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800488e:	2b01      	cmp	r3, #1
 8004890:	d004      	beq.n	800489c <HAL_ADC_Init+0x1c4>
 8004892:	f240 114b 	movw	r1, #331	; 0x14b
 8004896:	483d      	ldr	r0, [pc, #244]	; (800498c <HAL_ADC_Init+0x2b4>)
 8004898:	f7fe fe4f 	bl	800353a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d00c      	beq.n	80048be <HAL_ADC_Init+0x1e6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_ADC_Init+0x1e6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d004      	beq.n	80048be <HAL_ADC_Init+0x1e6>
 80048b4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80048b8:	4834      	ldr	r0, [pc, #208]	; (800498c <HAL_ADC_Init+0x2b4>)
 80048ba:	f7fe fe3e 	bl	800353a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <HAL_ADC_Init+0x204>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d004      	beq.n	80048dc <HAL_ADC_Init+0x204>
 80048d2:	f240 114d 	movw	r1, #333	; 0x14d
 80048d6:	482d      	ldr	r0, [pc, #180]	; (800498c <HAL_ADC_Init+0x2b4>)
 80048d8:	f7fe fe2f 	bl	800353a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HAL_ADC_Init+0x2b8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d017      	beq.n	8004916 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d013      	beq.n	8004916 <HAL_ADC_Init+0x23e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f6:	d00e      	beq.n	8004916 <HAL_ADC_Init+0x23e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d009      	beq.n	8004916 <HAL_ADC_Init+0x23e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800490a:	d004      	beq.n	8004916 <HAL_ADC_Init+0x23e>
 800490c:	f240 1151 	movw	r1, #337	; 0x151
 8004910:	481e      	ldr	r0, [pc, #120]	; (800498c <HAL_ADC_Init+0x2b4>)
 8004912:	f7fe fe12 	bl	800353a <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd face 	bl	8001ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d118      	bne.n	8004970 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004946:	f023 0302 	bic.w	r3, r3, #2
 800494a:	f043 0202 	orr.w	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f994 	bl	8004c80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
 800496e:	e001      	b.n	8004974 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40012000 	.word	0x40012000
 800498c:	08013768 	.word	0x08013768
 8004990:	0f000001 	.word	0x0f000001

08004994 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b12      	cmp	r3, #18
 80049a8:	d909      	bls.n	80049be <HAL_ADC_ConfigChannel+0x2a>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a72      	ldr	r2, [pc, #456]	; (8004b78 <HAL_ADC_ConfigChannel+0x1e4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d004      	beq.n	80049be <HAL_ADC_ConfigChannel+0x2a>
 80049b4:	f240 6189 	movw	r1, #1673	; 0x689
 80049b8:	4870      	ldr	r0, [pc, #448]	; (8004b7c <HAL_ADC_ConfigChannel+0x1e8>)
 80049ba:	f7fe fdbe 	bl	800353a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_ADC_ConfigChannel+0x3a>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b10      	cmp	r3, #16
 80049cc:	d904      	bls.n	80049d8 <HAL_ADC_ConfigChannel+0x44>
 80049ce:	f240 618a 	movw	r1, #1674	; 0x68a
 80049d2:	486a      	ldr	r0, [pc, #424]	; (8004b7c <HAL_ADC_ConfigChannel+0x1e8>)
 80049d4:	f7fe fdb1 	bl	800353a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d01c      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d018      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d014      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d010      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d00c      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	2b06      	cmp	r3, #6
 8004a0e:	d008      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2b07      	cmp	r3, #7
 8004a16:	d004      	beq.n	8004a22 <HAL_ADC_ConfigChannel+0x8e>
 8004a18:	f240 618b 	movw	r1, #1675	; 0x68b
 8004a1c:	4857      	ldr	r0, [pc, #348]	; (8004b7c <HAL_ADC_ConfigChannel+0x1e8>)
 8004a1e:	f7fe fd8c 	bl	800353a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x9c>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e118      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x2ce>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b09      	cmp	r3, #9
 8004a3e:	d925      	bls.n	8004a8c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68d9      	ldr	r1, [r3, #12]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	3b1e      	subs	r3, #30
 8004a56:	2207      	movs	r2, #7
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	400a      	ands	r2, r1
 8004a64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68d9      	ldr	r1, [r3, #12]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4618      	mov	r0, r3
 8004a78:	4603      	mov	r3, r0
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4403      	add	r3, r0
 8004a7e:	3b1e      	subs	r3, #30
 8004a80:	409a      	lsls	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	60da      	str	r2, [r3, #12]
 8004a8a:	e022      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6919      	ldr	r1, [r3, #16]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4413      	add	r3, r2
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	400a      	ands	r2, r1
 8004aae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6919      	ldr	r1, [r3, #16]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	4403      	add	r3, r0
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d824      	bhi.n	8004b24 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	3b05      	subs	r3, #5
 8004aec:	221f      	movs	r2, #31
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43da      	mvns	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	400a      	ands	r2, r1
 8004afa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	4618      	mov	r0, r3
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	3b05      	subs	r3, #5
 8004b16:	fa00 f203 	lsl.w	r2, r0, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34
 8004b22:	e051      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b0c      	cmp	r3, #12
 8004b2a:	d829      	bhi.n	8004b80 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	3b23      	subs	r3, #35	; 0x23
 8004b3e:	221f      	movs	r2, #31
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43da      	mvns	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	3b23      	subs	r3, #35	; 0x23
 8004b68:	fa00 f203 	lsl.w	r2, r0, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
 8004b74:	e028      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x234>
 8004b76:	bf00      	nop
 8004b78:	10000012 	.word	0x10000012
 8004b7c:	08013768 	.word	0x08013768
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	3b41      	subs	r3, #65	; 0x41
 8004b92:	221f      	movs	r2, #31
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43da      	mvns	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	400a      	ands	r2, r1
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	4618      	mov	r0, r3
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	3b41      	subs	r3, #65	; 0x41
 8004bbc:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bc8:	4b28      	ldr	r3, [pc, #160]	; (8004c6c <HAL_ADC_ConfigChannel+0x2d8>)
 8004bca:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <HAL_ADC_ConfigChannel+0x2dc>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x262>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b12      	cmp	r3, #18
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_ADC_ConfigChannel+0x2dc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d12b      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x2c4>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1b      	ldr	r2, [pc, #108]	; (8004c74 <HAL_ADC_ConfigChannel+0x2e0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <HAL_ADC_ConfigChannel+0x27e>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b11      	cmp	r3, #17
 8004c10:	d122      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <HAL_ADC_ConfigChannel+0x2e0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d111      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c34:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_ADC_ConfigChannel+0x2e4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <HAL_ADC_ConfigChannel+0x2e8>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	0c9a      	lsrs	r2, r3, #18
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c4a:	e002      	b.n	8004c52 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f9      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40012300 	.word	0x40012300
 8004c70:	40012000 	.word	0x40012000
 8004c74:	10000012 	.word	0x10000012
 8004c78:	200000d8 	.word	0x200000d8
 8004c7c:	431bde83 	.word	0x431bde83

08004c80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c88:	4b7f      	ldr	r3, [pc, #508]	; (8004e88 <ADC_Init+0x208>)
 8004c8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6859      	ldr	r1, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	021a      	lsls	r2, r3, #8
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004cd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	4a5e      	ldr	r2, [pc, #376]	; (8004e8c <ADC_Init+0x20c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6899      	ldr	r1, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6899      	ldr	r1, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
 8004d5c:	e00f      	b.n	8004d7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0202 	bic.w	r2, r2, #2
 8004d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7e1b      	ldrb	r3, [r3, #24]
 8004d98:	005a      	lsls	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d028      	beq.n	8004dfe <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <ADC_Init+0x13c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d904      	bls.n	8004dc6 <ADC_Init+0x146>
 8004dbc:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8004dc0:	4833      	ldr	r0, [pc, #204]	; (8004e90 <ADC_Init+0x210>)
 8004dc2:	f7fe fbba 	bl	800353a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004de4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	3b01      	subs	r3, #1
 8004df2:	035a      	lsls	r2, r3, #13
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	605a      	str	r2, [r3, #4]
 8004dfc:	e007      	b.n	8004e0e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e0c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	051a      	lsls	r2, r3, #20
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e50:	025a      	lsls	r2, r3, #9
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6899      	ldr	r1, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	029a      	lsls	r2, r3, #10
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40012300 	.word	0x40012300
 8004e8c:	0f000001 	.word	0x0f000001
 8004e90:	08013768 	.word	0x08013768

08004e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ec6:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	60d3      	str	r3, [r2, #12]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr
 8004ed8:	e000ed00 	.word	0xe000ed00

08004edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	0a1b      	lsrs	r3, r3, #8
 8004ee6:	f003 0307 	and.w	r3, r3, #7
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	e000ed00 	.word	0xe000ed00

08004ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	db0b      	blt.n	8004f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	f003 021f 	and.w	r2, r3, #31
 8004f10:	4907      	ldr	r1, [pc, #28]	; (8004f30 <__NVIC_EnableIRQ+0x38>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2001      	movs	r0, #1
 8004f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e100 	.word	0xe000e100

08004f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	6039      	str	r1, [r7, #0]
 8004f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	db0a      	blt.n	8004f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	490c      	ldr	r1, [pc, #48]	; (8004f80 <__NVIC_SetPriority+0x4c>)
 8004f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f52:	0112      	lsls	r2, r2, #4
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	440b      	add	r3, r1
 8004f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f5c:	e00a      	b.n	8004f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	4908      	ldr	r1, [pc, #32]	; (8004f84 <__NVIC_SetPriority+0x50>)
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	3b04      	subs	r3, #4
 8004f6c:	0112      	lsls	r2, r2, #4
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	440b      	add	r3, r1
 8004f72:	761a      	strb	r2, [r3, #24]
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	e000e100 	.word	0xe000e100
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b089      	sub	sp, #36	; 0x24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f1c3 0307 	rsb	r3, r3, #7
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	bf28      	it	cs
 8004fa6:	2304      	movcs	r3, #4
 8004fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3304      	adds	r3, #4
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d902      	bls.n	8004fb8 <NVIC_EncodePriority+0x30>
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	3b03      	subs	r3, #3
 8004fb6:	e000      	b.n	8004fba <NVIC_EncodePriority+0x32>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43da      	mvns	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	401a      	ands	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	43d9      	mvns	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe0:	4313      	orrs	r3, r2
         );
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3724      	adds	r7, #36	; 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005000:	d301      	bcc.n	8005006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005002:	2301      	movs	r3, #1
 8005004:	e00f      	b.n	8005026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005006:	4a0a      	ldr	r2, [pc, #40]	; (8005030 <SysTick_Config+0x40>)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3b01      	subs	r3, #1
 800500c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800500e:	210f      	movs	r1, #15
 8005010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005014:	f7ff ff8e 	bl	8004f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <SysTick_Config+0x40>)
 800501a:	2200      	movs	r2, #0
 800501c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800501e:	4b04      	ldr	r3, [pc, #16]	; (8005030 <SysTick_Config+0x40>)
 8005020:	2207      	movs	r2, #7
 8005022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	e000e010 	.word	0xe000e010

08005034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b07      	cmp	r3, #7
 8005040:	d00f      	beq.n	8005062 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b06      	cmp	r3, #6
 8005046:	d00c      	beq.n	8005062 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d009      	beq.n	8005062 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b04      	cmp	r3, #4
 8005052:	d006      	beq.n	8005062 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d003      	beq.n	8005062 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800505a:	2192      	movs	r1, #146	; 0x92
 800505c:	4804      	ldr	r0, [pc, #16]	; (8005070 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800505e:	f7fe fa6c 	bl	800353a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff ff16 	bl	8004e94 <__NVIC_SetPriorityGrouping>
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	080137a0 	.word	0x080137a0

08005074 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b0f      	cmp	r3, #15
 800508a:	d903      	bls.n	8005094 <HAL_NVIC_SetPriority+0x20>
 800508c:	21aa      	movs	r1, #170	; 0xaa
 800508e:	480e      	ldr	r0, [pc, #56]	; (80050c8 <HAL_NVIC_SetPriority+0x54>)
 8005090:	f7fe fa53 	bl	800353a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b0f      	cmp	r3, #15
 8005098:	d903      	bls.n	80050a2 <HAL_NVIC_SetPriority+0x2e>
 800509a:	21ab      	movs	r1, #171	; 0xab
 800509c:	480a      	ldr	r0, [pc, #40]	; (80050c8 <HAL_NVIC_SetPriority+0x54>)
 800509e:	f7fe fa4c 	bl	800353a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050a2:	f7ff ff1b 	bl	8004edc <__NVIC_GetPriorityGrouping>
 80050a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	6978      	ldr	r0, [r7, #20]
 80050ae:	f7ff ff6b 	bl	8004f88 <NVIC_EncodePriority>
 80050b2:	4602      	mov	r2, r0
 80050b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ff3a 	bl	8004f34 <__NVIC_SetPriority>
}
 80050c0:	bf00      	nop
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	080137a0 	.word	0x080137a0

080050cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80050d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da03      	bge.n	80050e6 <HAL_NVIC_EnableIRQ+0x1a>
 80050de:	21be      	movs	r1, #190	; 0xbe
 80050e0:	4805      	ldr	r0, [pc, #20]	; (80050f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80050e2:	f7fe fa2a 	bl	800353a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff ff04 	bl	8004ef8 <__NVIC_EnableIRQ>
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	080137a0 	.word	0x080137a0

080050fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff73 	bl	8004ff0 <SysTick_Config>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005120:	f7ff faaa 	bl	8004678 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e204      	b.n	800553a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a97      	ldr	r2, [pc, #604]	; (8005394 <HAL_DMA_Init+0x280>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d04e      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a96      	ldr	r2, [pc, #600]	; (8005398 <HAL_DMA_Init+0x284>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d049      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a94      	ldr	r2, [pc, #592]	; (800539c <HAL_DMA_Init+0x288>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d044      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a93      	ldr	r2, [pc, #588]	; (80053a0 <HAL_DMA_Init+0x28c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d03f      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a91      	ldr	r2, [pc, #580]	; (80053a4 <HAL_DMA_Init+0x290>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d03a      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a90      	ldr	r2, [pc, #576]	; (80053a8 <HAL_DMA_Init+0x294>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d035      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a8e      	ldr	r2, [pc, #568]	; (80053ac <HAL_DMA_Init+0x298>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d030      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a8d      	ldr	r2, [pc, #564]	; (80053b0 <HAL_DMA_Init+0x29c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d02b      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a8b      	ldr	r2, [pc, #556]	; (80053b4 <HAL_DMA_Init+0x2a0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d026      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a8a      	ldr	r2, [pc, #552]	; (80053b8 <HAL_DMA_Init+0x2a4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d021      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a88      	ldr	r2, [pc, #544]	; (80053bc <HAL_DMA_Init+0x2a8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d01c      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a87      	ldr	r2, [pc, #540]	; (80053c0 <HAL_DMA_Init+0x2ac>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d017      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a85      	ldr	r2, [pc, #532]	; (80053c4 <HAL_DMA_Init+0x2b0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d012      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a84      	ldr	r2, [pc, #528]	; (80053c8 <HAL_DMA_Init+0x2b4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00d      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a82      	ldr	r2, [pc, #520]	; (80053cc <HAL_DMA_Init+0x2b8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d008      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a81      	ldr	r2, [pc, #516]	; (80053d0 <HAL_DMA_Init+0x2bc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <HAL_DMA_Init+0xc4>
 80051d0:	21b8      	movs	r1, #184	; 0xb8
 80051d2:	4880      	ldr	r0, [pc, #512]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 80051d4:	f7fe f9b1 	bl	800353a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d026      	beq.n	800522e <HAL_DMA_Init+0x11a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051e8:	d021      	beq.n	800522e <HAL_DMA_Init+0x11a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051f2:	d01c      	beq.n	800522e <HAL_DMA_Init+0x11a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80051fc:	d017      	beq.n	800522e <HAL_DMA_Init+0x11a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005206:	d012      	beq.n	800522e <HAL_DMA_Init+0x11a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005210:	d00d      	beq.n	800522e <HAL_DMA_Init+0x11a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800521a:	d008      	beq.n	800522e <HAL_DMA_Init+0x11a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005224:	d003      	beq.n	800522e <HAL_DMA_Init+0x11a>
 8005226:	21b9      	movs	r1, #185	; 0xb9
 8005228:	486a      	ldr	r0, [pc, #424]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 800522a:	f7fe f986 	bl	800353a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <HAL_DMA_Init+0x13a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b40      	cmp	r3, #64	; 0x40
 800523c:	d007      	beq.n	800524e <HAL_DMA_Init+0x13a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d003      	beq.n	800524e <HAL_DMA_Init+0x13a>
 8005246:	21ba      	movs	r1, #186	; 0xba
 8005248:	4862      	ldr	r0, [pc, #392]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 800524a:	f7fe f976 	bl	800353a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005256:	d007      	beq.n	8005268 <HAL_DMA_Init+0x154>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_DMA_Init+0x154>
 8005260:	21bb      	movs	r1, #187	; 0xbb
 8005262:	485c      	ldr	r0, [pc, #368]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 8005264:	f7fe f969 	bl	800353a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005270:	d007      	beq.n	8005282 <HAL_DMA_Init+0x16e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_DMA_Init+0x16e>
 800527a:	21bc      	movs	r1, #188	; 0xbc
 800527c:	4855      	ldr	r0, [pc, #340]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 800527e:	f7fe f95c 	bl	800353a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00d      	beq.n	80052a6 <HAL_DMA_Init+0x192>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005292:	d008      	beq.n	80052a6 <HAL_DMA_Init+0x192>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d003      	beq.n	80052a6 <HAL_DMA_Init+0x192>
 800529e:	21bd      	movs	r1, #189	; 0xbd
 80052a0:	484c      	ldr	r0, [pc, #304]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 80052a2:	f7fe f94a 	bl	800353a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <HAL_DMA_Init+0x1b6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b6:	d008      	beq.n	80052ca <HAL_DMA_Init+0x1b6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052c0:	d003      	beq.n	80052ca <HAL_DMA_Init+0x1b6>
 80052c2:	21be      	movs	r1, #190	; 0xbe
 80052c4:	4843      	ldr	r0, [pc, #268]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 80052c6:	f7fe f938 	bl	800353a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_DMA_Init+0x1d8>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052da:	d007      	beq.n	80052ec <HAL_DMA_Init+0x1d8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d003      	beq.n	80052ec <HAL_DMA_Init+0x1d8>
 80052e4:	21bf      	movs	r1, #191	; 0xbf
 80052e6:	483b      	ldr	r0, [pc, #236]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 80052e8:	f7fe f927 	bl	800353a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d012      	beq.n	800531a <HAL_DMA_Init+0x206>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d00d      	beq.n	800531a <HAL_DMA_Init+0x206>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005306:	d008      	beq.n	800531a <HAL_DMA_Init+0x206>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005310:	d003      	beq.n	800531a <HAL_DMA_Init+0x206>
 8005312:	21c0      	movs	r1, #192	; 0xc0
 8005314:	482f      	ldr	r0, [pc, #188]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 8005316:	f7fe f910 	bl	800353a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <HAL_DMA_Init+0x21e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2b04      	cmp	r3, #4
 8005328:	d003      	beq.n	8005332 <HAL_DMA_Init+0x21e>
 800532a:	21c1      	movs	r1, #193	; 0xc1
 800532c:	4829      	ldr	r0, [pc, #164]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 800532e:	f7fe f904 	bl	800353a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d065      	beq.n	8005406 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00f      	beq.n	8005362 <HAL_DMA_Init+0x24e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005346:	2b01      	cmp	r3, #1
 8005348:	d00b      	beq.n	8005362 <HAL_DMA_Init+0x24e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	2b02      	cmp	r3, #2
 8005350:	d007      	beq.n	8005362 <HAL_DMA_Init+0x24e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	2b03      	cmp	r3, #3
 8005358:	d003      	beq.n	8005362 <HAL_DMA_Init+0x24e>
 800535a:	21c6      	movs	r1, #198	; 0xc6
 800535c:	481d      	ldr	r0, [pc, #116]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 800535e:	f7fe f8ec 	bl	800353a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d036      	beq.n	80053d8 <HAL_DMA_Init+0x2c4>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005372:	d031      	beq.n	80053d8 <HAL_DMA_Init+0x2c4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800537c:	d02c      	beq.n	80053d8 <HAL_DMA_Init+0x2c4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005386:	d027      	beq.n	80053d8 <HAL_DMA_Init+0x2c4>
 8005388:	21c7      	movs	r1, #199	; 0xc7
 800538a:	4812      	ldr	r0, [pc, #72]	; (80053d4 <HAL_DMA_Init+0x2c0>)
 800538c:	f7fe f8d5 	bl	800353a <assert_failed>
 8005390:	e022      	b.n	80053d8 <HAL_DMA_Init+0x2c4>
 8005392:	bf00      	nop
 8005394:	40026010 	.word	0x40026010
 8005398:	40026028 	.word	0x40026028
 800539c:	40026040 	.word	0x40026040
 80053a0:	40026058 	.word	0x40026058
 80053a4:	40026070 	.word	0x40026070
 80053a8:	40026088 	.word	0x40026088
 80053ac:	400260a0 	.word	0x400260a0
 80053b0:	400260b8 	.word	0x400260b8
 80053b4:	40026410 	.word	0x40026410
 80053b8:	40026428 	.word	0x40026428
 80053bc:	40026440 	.word	0x40026440
 80053c0:	40026458 	.word	0x40026458
 80053c4:	40026470 	.word	0x40026470
 80053c8:	40026488 	.word	0x40026488
 80053cc:	400264a0 	.word	0x400264a0
 80053d0:	400264b8 	.word	0x400264b8
 80053d4:	080137dc 	.word	0x080137dc
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d012      	beq.n	8005406 <HAL_DMA_Init+0x2f2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e8:	d00d      	beq.n	8005406 <HAL_DMA_Init+0x2f2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d008      	beq.n	8005406 <HAL_DMA_Init+0x2f2>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053fc:	d003      	beq.n	8005406 <HAL_DMA_Init+0x2f2>
 80053fe:	21c8      	movs	r1, #200	; 0xc8
 8005400:	4850      	ldr	r0, [pc, #320]	; (8005544 <HAL_DMA_Init+0x430>)
 8005402:	f7fe f89a 	bl	800353a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005426:	e00f      	b.n	8005448 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005428:	f7ff f926 	bl	8004678 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b05      	cmp	r3, #5
 8005434:	d908      	bls.n	8005448 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e078      	b.n	800553a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e8      	bne.n	8005428 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	4b39      	ldr	r3, [pc, #228]	; (8005548 <HAL_DMA_Init+0x434>)
 8005462:	4013      	ands	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800548c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d107      	bne.n	80054b2 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	4313      	orrs	r3, r2
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0307 	bic.w	r3, r3, #7
 80054c8:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d117      	bne.n	800550c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 faa2 	bl	8005a38 <DMA_CheckFifoParam>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d008      	beq.n	800550c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2240      	movs	r2, #64	; 0x40
 80054fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005508:	2301      	movs	r3, #1
 800550a:	e016      	b.n	800553a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fa59 	bl	80059cc <DMA_CalcBaseAndBitshift>
 800551a:	4603      	mov	r3, r0
 800551c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005522:	223f      	movs	r2, #63	; 0x3f
 8005524:	409a      	lsls	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	080137dc 	.word	0x080137dc
 8005548:	f010803f 	.word	0xf010803f

0800554c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_DMA_Start_IT+0x26>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005570:	d304      	bcc.n	800557c <HAL_DMA_Start_IT+0x30>
 8005572:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8005576:	4827      	ldr	r0, [pc, #156]	; (8005614 <HAL_DMA_Start_IT+0xc8>)
 8005578:	f7fd ffdf 	bl	800353a <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_DMA_Start_IT+0x3e>
 8005586:	2302      	movs	r3, #2
 8005588:	e040      	b.n	800560c <HAL_DMA_Start_IT+0xc0>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b01      	cmp	r3, #1
 800559c:	d12f      	bne.n	80055fe <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2202      	movs	r2, #2
 80055a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f9dc 	bl	8005970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	223f      	movs	r2, #63	; 0x3f
 80055be:	409a      	lsls	r2, r3
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0216 	orr.w	r2, r2, #22
 80055d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0208 	orr.w	r2, r2, #8
 80055ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e005      	b.n	800560a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005606:	2302      	movs	r3, #2
 8005608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800560a:	7dfb      	ldrb	r3, [r7, #23]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	080137dc 	.word	0x080137dc

08005618 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d004      	beq.n	8005636 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e00c      	b.n	8005650 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2205      	movs	r2, #5
 800563a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005668:	4b92      	ldr	r3, [pc, #584]	; (80058b4 <HAL_DMA_IRQHandler+0x258>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a92      	ldr	r2, [pc, #584]	; (80058b8 <HAL_DMA_IRQHandler+0x25c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0a9b      	lsrs	r3, r3, #10
 8005674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005686:	2208      	movs	r2, #8
 8005688:	409a      	lsls	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01a      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0204 	bic.w	r2, r2, #4
 80056ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b4:	2208      	movs	r2, #8
 80056b6:	409a      	lsls	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056cc:	2201      	movs	r2, #1
 80056ce:	409a      	lsls	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d012      	beq.n	80056fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ea:	2201      	movs	r2, #1
 80056ec:	409a      	lsls	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	f043 0202 	orr.w	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	2204      	movs	r2, #4
 8005704:	409a      	lsls	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005720:	2204      	movs	r2, #4
 8005722:	409a      	lsls	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572c:	f043 0204 	orr.w	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005738:	2210      	movs	r2, #16
 800573a:	409a      	lsls	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d043      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d03c      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005756:	2210      	movs	r2, #16
 8005758:	409a      	lsls	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d018      	beq.n	800579e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d024      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
 800578a:	e01f      	b.n	80057cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
 800579c:	e016      	b.n	80057cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0208 	bic.w	r2, r2, #8
 80057ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d0:	2220      	movs	r2, #32
 80057d2:	409a      	lsls	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 808e 	beq.w	80058fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8086 	beq.w	80058fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f2:	2220      	movs	r2, #32
 80057f4:	409a      	lsls	r2, r3
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b05      	cmp	r3, #5
 8005804:	d136      	bne.n	8005874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0216 	bic.w	r2, r2, #22
 8005814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <HAL_DMA_IRQHandler+0x1da>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0208 	bic.w	r2, r2, #8
 8005844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	223f      	movs	r2, #63	; 0x3f
 800584c:	409a      	lsls	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005866:	2b00      	cmp	r3, #0
 8005868:	d07d      	beq.n	8005966 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
        }
        return;
 8005872:	e078      	b.n	8005966 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01c      	beq.n	80058bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d108      	bne.n	80058a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005894:	2b00      	cmp	r3, #0
 8005896:	d030      	beq.n	80058fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
 80058a0:	e02b      	b.n	80058fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d027      	beq.n	80058fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	4798      	blx	r3
 80058b2:	e022      	b.n	80058fa <HAL_DMA_IRQHandler+0x29e>
 80058b4:	200000d8 	.word	0x200000d8
 80058b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10f      	bne.n	80058ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0210 	bic.w	r2, r2, #16
 80058d8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d032      	beq.n	8005968 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d022      	beq.n	8005954 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2205      	movs	r2, #5
 8005912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	3301      	adds	r3, #1
 800592a:	60bb      	str	r3, [r7, #8]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	429a      	cmp	r2, r3
 8005930:	d307      	bcc.n	8005942 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f2      	bne.n	8005926 <HAL_DMA_IRQHandler+0x2ca>
 8005940:	e000      	b.n	8005944 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005942:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	4798      	blx	r3
 8005964:	e000      	b.n	8005968 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005966:	bf00      	nop
    }
  }
}
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop

08005970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800598c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b40      	cmp	r3, #64	; 0x40
 800599c:	d108      	bne.n	80059b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059ae:	e007      	b.n	80059c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	60da      	str	r2, [r3, #12]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	3b10      	subs	r3, #16
 80059dc:	4a14      	ldr	r2, [pc, #80]	; (8005a30 <DMA_CalcBaseAndBitshift+0x64>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <DMA_CalcBaseAndBitshift+0x68>)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d909      	bls.n	8005a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a0c:	e007      	b.n	8005a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	aaaaaaab 	.word	0xaaaaaaab
 8005a34:	08013fd0 	.word	0x08013fd0

08005a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d11f      	bne.n	8005a92 <DMA_CheckFifoParam+0x5a>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d856      	bhi.n	8005b06 <DMA_CheckFifoParam+0xce>
 8005a58:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <DMA_CheckFifoParam+0x28>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a71 	.word	0x08005a71
 8005a64:	08005a83 	.word	0x08005a83
 8005a68:	08005a71 	.word	0x08005a71
 8005a6c:	08005b07 	.word	0x08005b07
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d046      	beq.n	8005b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e043      	b.n	8005b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a8a:	d140      	bne.n	8005b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a90:	e03d      	b.n	8005b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9a:	d121      	bne.n	8005ae0 <DMA_CheckFifoParam+0xa8>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d837      	bhi.n	8005b12 <DMA_CheckFifoParam+0xda>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <DMA_CheckFifoParam+0x70>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005abf 	.word	0x08005abf
 8005ab0:	08005ab9 	.word	0x08005ab9
 8005ab4:	08005ad1 	.word	0x08005ad1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
      break;
 8005abc:	e030      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d025      	beq.n	8005b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ace:	e022      	b.n	8005b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ad8:	d11f      	bne.n	8005b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ade:	e01c      	b.n	8005b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d903      	bls.n	8005aee <DMA_CheckFifoParam+0xb6>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d003      	beq.n	8005af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005aec:	e018      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
      break;
 8005af2:	e015      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
      break;
 8005b04:	e00b      	b.n	8005b1e <DMA_CheckFifoParam+0xe6>
      break;
 8005b06:	bf00      	nop
 8005b08:	e00a      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e008      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e006      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b12:	bf00      	nop
 8005b14:	e004      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop

08005b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a33      	ldr	r2, [pc, #204]	; (8005c18 <HAL_GPIO_Init+0xe8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d017      	beq.n	8005b7e <HAL_GPIO_Init+0x4e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a32      	ldr	r2, [pc, #200]	; (8005c1c <HAL_GPIO_Init+0xec>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_GPIO_Init+0x4e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a31      	ldr	r2, [pc, #196]	; (8005c20 <HAL_GPIO_Init+0xf0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00f      	beq.n	8005b7e <HAL_GPIO_Init+0x4e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a30      	ldr	r2, [pc, #192]	; (8005c24 <HAL_GPIO_Init+0xf4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <HAL_GPIO_Init+0x4e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2f      	ldr	r2, [pc, #188]	; (8005c28 <HAL_GPIO_Init+0xf8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <HAL_GPIO_Init+0x4e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <HAL_GPIO_Init+0xfc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <HAL_GPIO_Init+0x4e>
 8005b76:	21ac      	movs	r1, #172	; 0xac
 8005b78:	482d      	ldr	r0, [pc, #180]	; (8005c30 <HAL_GPIO_Init+0x100>)
 8005b7a:	f7fd fcde 	bl	800353a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_GPIO_Init+0x64>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_GPIO_Init+0x6c>
 8005b94:	21ad      	movs	r1, #173	; 0xad
 8005b96:	4826      	ldr	r0, [pc, #152]	; (8005c30 <HAL_GPIO_Init+0x100>)
 8005b98:	f7fd fccf 	bl	800353a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d035      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d031      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b11      	cmp	r3, #17
 8005bb2:	d02d      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d029      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b12      	cmp	r3, #18
 8005bc2:	d025      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005bcc:	d020      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005bd6:	d01b      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005be0:	d016      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005bea:	d011      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005bf4:	d00c      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005bfe:	d007      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0xe0>
 8005c08:	21ae      	movs	r1, #174	; 0xae
 8005c0a:	4809      	ldr	r0, [pc, #36]	; (8005c30 <HAL_GPIO_Init+0x100>)
 8005c0c:	f7fd fc95 	bl	800353a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
 8005c14:	e211      	b.n	800603a <HAL_GPIO_Init+0x50a>
 8005c16:	bf00      	nop
 8005c18:	40020000 	.word	0x40020000
 8005c1c:	40020400 	.word	0x40020400
 8005c20:	40020800 	.word	0x40020800
 8005c24:	40020c00 	.word	0x40020c00
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	40021c00 	.word	0x40021c00
 8005c30:	08013814 	.word	0x08013814
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c34:	2201      	movs	r2, #1
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4013      	ands	r3, r2
 8005c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	f040 81f1 	bne.w	8006034 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d005      	beq.n	8005c6a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d144      	bne.n	8005cf4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00f      	beq.n	8005c92 <HAL_GPIO_Init+0x162>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d00b      	beq.n	8005c92 <HAL_GPIO_Init+0x162>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d007      	beq.n	8005c92 <HAL_GPIO_Init+0x162>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d003      	beq.n	8005c92 <HAL_GPIO_Init+0x162>
 8005c8a:	21c0      	movs	r1, #192	; 0xc0
 8005c8c:	489f      	ldr	r0, [pc, #636]	; (8005f0c <HAL_GPIO_Init+0x3dc>)
 8005c8e:	f7fd fc54 	bl	800353a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cc8:	2201      	movs	r2, #1
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	f003 0201 	and.w	r2, r3, #1
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d027      	beq.n	8005d50 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_GPIO_Init+0x1f0>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d007      	beq.n	8005d20 <HAL_GPIO_Init+0x1f0>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d003      	beq.n	8005d20 <HAL_GPIO_Init+0x1f0>
 8005d18:	21d1      	movs	r1, #209	; 0xd1
 8005d1a:	487c      	ldr	r0, [pc, #496]	; (8005f0c <HAL_GPIO_Init+0x3dc>)
 8005d1c:	f7fd fc0d 	bl	800353a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	f040 80a0 	bne.w	8005e9e <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d077      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b09      	cmp	r3, #9
 8005d6c:	d073      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d06f      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d06b      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d067      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d063      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d05f      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d05b      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d057      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d053      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d04f      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d04b      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d047      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d043      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	d03f      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	d03b      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b05      	cmp	r3, #5
 8005de4:	d037      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d033      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b06      	cmp	r3, #6
 8005df4:	d02f      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d02b      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d027      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b07      	cmp	r3, #7
 8005e0c:	d023      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b07      	cmp	r3, #7
 8005e14:	d01f      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b07      	cmp	r3, #7
 8005e1c:	d01b      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d017      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b0a      	cmp	r3, #10
 8005e2c:	d013      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b09      	cmp	r3, #9
 8005e34:	d00f      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b09      	cmp	r3, #9
 8005e3c:	d00b      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b0c      	cmp	r3, #12
 8005e44:	d007      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b0f      	cmp	r3, #15
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_Init+0x326>
 8005e4e:	21de      	movs	r1, #222	; 0xde
 8005e50:	482e      	ldr	r0, [pc, #184]	; (8005f0c <HAL_GPIO_Init+0x3dc>)
 8005e52:	f7fd fb72 	bl	800353a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	08da      	lsrs	r2, r3, #3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3208      	adds	r2, #8
 8005e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 0307 	and.w	r3, r3, #7
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	08da      	lsrs	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3208      	adds	r2, #8
 8005e98:	69b9      	ldr	r1, [r7, #24]
 8005e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	2203      	movs	r2, #3
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f003 0203 	and.w	r2, r3, #3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80aa 	beq.w	8006034 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_GPIO_Init+0x3e0>)
 8005ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee8:	4a09      	ldr	r2, [pc, #36]	; (8005f10 <HAL_GPIO_Init+0x3e0>)
 8005eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005eee:	6453      	str	r3, [r2, #68]	; 0x44
 8005ef0:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <HAL_GPIO_Init+0x3e0>)
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005efc:	4a05      	ldr	r2, [pc, #20]	; (8005f14 <HAL_GPIO_Init+0x3e4>)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	089b      	lsrs	r3, r3, #2
 8005f02:	3302      	adds	r3, #2
 8005f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f08:	e006      	b.n	8005f18 <HAL_GPIO_Init+0x3e8>
 8005f0a:	bf00      	nop
 8005f0c:	08013814 	.word	0x08013814
 8005f10:	40023800 	.word	0x40023800
 8005f14:	40013800 	.word	0x40013800
 8005f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	220f      	movs	r2, #15
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a46      	ldr	r2, [pc, #280]	; (800604c <HAL_GPIO_Init+0x51c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d019      	beq.n	8005f6c <HAL_GPIO_Init+0x43c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a45      	ldr	r2, [pc, #276]	; (8006050 <HAL_GPIO_Init+0x520>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d013      	beq.n	8005f68 <HAL_GPIO_Init+0x438>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a44      	ldr	r2, [pc, #272]	; (8006054 <HAL_GPIO_Init+0x524>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00d      	beq.n	8005f64 <HAL_GPIO_Init+0x434>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a43      	ldr	r2, [pc, #268]	; (8006058 <HAL_GPIO_Init+0x528>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <HAL_GPIO_Init+0x430>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a42      	ldr	r2, [pc, #264]	; (800605c <HAL_GPIO_Init+0x52c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d101      	bne.n	8005f5c <HAL_GPIO_Init+0x42c>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	e008      	b.n	8005f6e <HAL_GPIO_Init+0x43e>
 8005f5c:	2307      	movs	r3, #7
 8005f5e:	e006      	b.n	8005f6e <HAL_GPIO_Init+0x43e>
 8005f60:	2303      	movs	r3, #3
 8005f62:	e004      	b.n	8005f6e <HAL_GPIO_Init+0x43e>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e002      	b.n	8005f6e <HAL_GPIO_Init+0x43e>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e000      	b.n	8005f6e <HAL_GPIO_Init+0x43e>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	f002 0203 	and.w	r2, r2, #3
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	4093      	lsls	r3, r2
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f7e:	4938      	ldr	r1, [pc, #224]	; (8006060 <HAL_GPIO_Init+0x530>)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	089b      	lsrs	r3, r3, #2
 8005f84:	3302      	adds	r3, #2
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <HAL_GPIO_Init+0x534>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fb0:	4a2c      	ldr	r2, [pc, #176]	; (8006064 <HAL_GPIO_Init+0x534>)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <HAL_GPIO_Init+0x534>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fda:	4a22      	ldr	r2, [pc, #136]	; (8006064 <HAL_GPIO_Init+0x534>)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fe0:	4b20      	ldr	r3, [pc, #128]	; (8006064 <HAL_GPIO_Init+0x534>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d003      	beq.n	8006004 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <HAL_GPIO_Init+0x534>)
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800600a:	4b16      	ldr	r3, [pc, #88]	; (8006064 <HAL_GPIO_Init+0x534>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800602e:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <HAL_GPIO_Init+0x534>)
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	2b0f      	cmp	r3, #15
 800603e:	f67f adf9 	bls.w	8005c34 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40020000 	.word	0x40020000
 8006050:	40020400 	.word	0x40020400
 8006054:	40020800 	.word	0x40020800
 8006058:	40020c00 	.word	0x40020c00
 800605c:	40021000 	.word	0x40021000
 8006060:	40013800 	.word	0x40013800
 8006064:	40013c00 	.word	0x40013c00

08006068 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800607a:	2300      	movs	r3, #0
 800607c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a71      	ldr	r2, [pc, #452]	; (8006248 <HAL_GPIO_DeInit+0x1e0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d018      	beq.n	80060b8 <HAL_GPIO_DeInit+0x50>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a70      	ldr	r2, [pc, #448]	; (800624c <HAL_GPIO_DeInit+0x1e4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d014      	beq.n	80060b8 <HAL_GPIO_DeInit+0x50>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a6f      	ldr	r2, [pc, #444]	; (8006250 <HAL_GPIO_DeInit+0x1e8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d010      	beq.n	80060b8 <HAL_GPIO_DeInit+0x50>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a6e      	ldr	r2, [pc, #440]	; (8006254 <HAL_GPIO_DeInit+0x1ec>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00c      	beq.n	80060b8 <HAL_GPIO_DeInit+0x50>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a6d      	ldr	r2, [pc, #436]	; (8006258 <HAL_GPIO_DeInit+0x1f0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d008      	beq.n	80060b8 <HAL_GPIO_DeInit+0x50>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a6c      	ldr	r2, [pc, #432]	; (800625c <HAL_GPIO_DeInit+0x1f4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <HAL_GPIO_DeInit+0x50>
 80060ae:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80060b2:	486b      	ldr	r0, [pc, #428]	; (8006260 <HAL_GPIO_DeInit+0x1f8>)
 80060b4:	f7fd fa41 	bl	800353a <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e0bb      	b.n	8006236 <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80060be:	2201      	movs	r2, #1
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4013      	ands	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	f040 80ab 	bne.w	8006230 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80060da:	4a62      	ldr	r2, [pc, #392]	; (8006264 <HAL_GPIO_DeInit+0x1fc>)
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	3302      	adds	r3, #2
 80060e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	220f      	movs	r2, #15
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	4013      	ands	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a52      	ldr	r2, [pc, #328]	; (8006248 <HAL_GPIO_DeInit+0x1e0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d019      	beq.n	8006138 <HAL_GPIO_DeInit+0xd0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a51      	ldr	r2, [pc, #324]	; (800624c <HAL_GPIO_DeInit+0x1e4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_GPIO_DeInit+0xcc>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a50      	ldr	r2, [pc, #320]	; (8006250 <HAL_GPIO_DeInit+0x1e8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00d      	beq.n	8006130 <HAL_GPIO_DeInit+0xc8>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a4f      	ldr	r2, [pc, #316]	; (8006254 <HAL_GPIO_DeInit+0x1ec>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <HAL_GPIO_DeInit+0xc4>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a4e      	ldr	r2, [pc, #312]	; (8006258 <HAL_GPIO_DeInit+0x1f0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d101      	bne.n	8006128 <HAL_GPIO_DeInit+0xc0>
 8006124:	2304      	movs	r3, #4
 8006126:	e008      	b.n	800613a <HAL_GPIO_DeInit+0xd2>
 8006128:	2307      	movs	r3, #7
 800612a:	e006      	b.n	800613a <HAL_GPIO_DeInit+0xd2>
 800612c:	2303      	movs	r3, #3
 800612e:	e004      	b.n	800613a <HAL_GPIO_DeInit+0xd2>
 8006130:	2302      	movs	r3, #2
 8006132:	e002      	b.n	800613a <HAL_GPIO_DeInit+0xd2>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <HAL_GPIO_DeInit+0xd2>
 8006138:	2300      	movs	r3, #0
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	f002 0203 	and.w	r2, r2, #3
 8006140:	0092      	lsls	r2, r2, #2
 8006142:	4093      	lsls	r3, r2
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d132      	bne.n	80061b0 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800614a:	4b47      	ldr	r3, [pc, #284]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	43db      	mvns	r3, r3
 8006152:	4945      	ldr	r1, [pc, #276]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 8006154:	4013      	ands	r3, r2
 8006156:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006158:	4b43      	ldr	r3, [pc, #268]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	43db      	mvns	r3, r3
 8006160:	4941      	ldr	r1, [pc, #260]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 8006162:	4013      	ands	r3, r2
 8006164:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006166:	4b40      	ldr	r3, [pc, #256]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	43db      	mvns	r3, r3
 800616e:	493e      	ldr	r1, [pc, #248]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 8006170:	4013      	ands	r3, r2
 8006172:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006174:	4b3c      	ldr	r3, [pc, #240]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	43db      	mvns	r3, r3
 800617c:	493a      	ldr	r1, [pc, #232]	; (8006268 <HAL_GPIO_DeInit+0x200>)
 800617e:	4013      	ands	r3, r2
 8006180:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	220f      	movs	r2, #15
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006192:	4a34      	ldr	r2, [pc, #208]	; (8006264 <HAL_GPIO_DeInit+0x1fc>)
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	089b      	lsrs	r3, r3, #2
 8006198:	3302      	adds	r3, #2
 800619a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	43da      	mvns	r2, r3
 80061a2:	4830      	ldr	r0, [pc, #192]	; (8006264 <HAL_GPIO_DeInit+0x1fc>)
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	400a      	ands	r2, r1
 80061aa:	3302      	adds	r3, #2
 80061ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	2103      	movs	r1, #3
 80061ba:	fa01 f303 	lsl.w	r3, r1, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	401a      	ands	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	08da      	lsrs	r2, r3, #3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3208      	adds	r2, #8
 80061ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	220f      	movs	r2, #15
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	08d2      	lsrs	r2, r2, #3
 80061e6:	4019      	ands	r1, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3208      	adds	r2, #8
 80061ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	2103      	movs	r1, #3
 80061fa:	fa01 f303 	lsl.w	r3, r1, r3
 80061fe:	43db      	mvns	r3, r3
 8006200:	401a      	ands	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	2101      	movs	r1, #1
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	43db      	mvns	r3, r3
 8006214:	401a      	ands	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	2103      	movs	r1, #3
 8006224:	fa01 f303 	lsl.w	r3, r1, r3
 8006228:	43db      	mvns	r3, r3
 800622a:	401a      	ands	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	3301      	adds	r3, #1
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b0f      	cmp	r3, #15
 800623a:	f67f af40 	bls.w	80060be <HAL_GPIO_DeInit+0x56>
    }
  }
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40020000 	.word	0x40020000
 800624c:	40020400 	.word	0x40020400
 8006250:	40020800 	.word	0x40020800
 8006254:	40020c00 	.word	0x40020c00
 8006258:	40021000 	.word	0x40021000
 800625c:	40021c00 	.word	0x40021c00
 8006260:	08013814 	.word	0x08013814
 8006264:	40013800 	.word	0x40013800
 8006268:	40013c00 	.word	0x40013c00

0800626c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006278:	887b      	ldrh	r3, [r7, #2]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <HAL_GPIO_ReadPin+0x1c>
 800627e:	887b      	ldrh	r3, [r7, #2]
 8006280:	0c1b      	lsrs	r3, r3, #16
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <HAL_GPIO_ReadPin+0x26>
 8006288:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800628c:	4809      	ldr	r0, [pc, #36]	; (80062b4 <HAL_GPIO_ReadPin+0x48>)
 800628e:	f7fd f954 	bl	800353a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	887b      	ldrh	r3, [r7, #2]
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800629e:	2301      	movs	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
 80062a2:	e001      	b.n	80062a8 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062a4:	2300      	movs	r3, #0
 80062a6:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	08013814 	.word	0x08013814

080062b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	807b      	strh	r3, [r7, #2]
 80062c4:	4613      	mov	r3, r2
 80062c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80062c8:	887b      	ldrh	r3, [r7, #2]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <HAL_GPIO_WritePin+0x20>
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <HAL_GPIO_WritePin+0x2a>
 80062d8:	f240 119d 	movw	r1, #413	; 0x19d
 80062dc:	480e      	ldr	r0, [pc, #56]	; (8006318 <HAL_GPIO_WritePin+0x60>)
 80062de:	f7fd f92c 	bl	800353a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80062e2:	787b      	ldrb	r3, [r7, #1]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <HAL_GPIO_WritePin+0x40>
 80062e8:	787b      	ldrb	r3, [r7, #1]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d004      	beq.n	80062f8 <HAL_GPIO_WritePin+0x40>
 80062ee:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80062f2:	4809      	ldr	r0, [pc, #36]	; (8006318 <HAL_GPIO_WritePin+0x60>)
 80062f4:	f7fd f921 	bl	800353a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80062f8:	787b      	ldrb	r3, [r7, #1]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006304:	e003      	b.n	800630e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006306:	887b      	ldrh	r3, [r7, #2]
 8006308:	041a      	lsls	r2, r3, #16
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	619a      	str	r2, [r3, #24]
}
 800630e:	bf00      	nop
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	08013814 	.word	0x08013814

0800631c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006326:	4b08      	ldr	r3, [pc, #32]	; (8006348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006328:	695a      	ldr	r2, [r3, #20]
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d006      	beq.n	8006340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006332:	4a05      	ldr	r2, [pc, #20]	; (8006348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006338:	88fb      	ldrh	r3, [r7, #6]
 800633a:	4618      	mov	r0, r3
 800633c:	f7fc fc4a 	bl	8002bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40013c00 	.word	0x40013c00

0800634c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800634c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800634e:	b08f      	sub	sp, #60	; 0x3c
 8006350:	af0a      	add	r7, sp, #40	; 0x28
 8006352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e05d      	b.n	800641a <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006366:	d003      	beq.n	8006370 <HAL_HCD_Init+0x24>
 8006368:	2179      	movs	r1, #121	; 0x79
 800636a:	482e      	ldr	r0, [pc, #184]	; (8006424 <HAL_HCD_Init+0xd8>)
 800636c:	f7fd f8e5 	bl	800353a <assert_failed>

  USBx = hhcd->Instance;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d106      	bne.n	8006390 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f009 f86a 	bl	800f464 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2203      	movs	r2, #3
 8006394:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f006 f9c0 	bl	800c734 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	687e      	ldr	r6, [r7, #4]
 80063bc:	466d      	mov	r5, sp
 80063be:	f106 0410 	add.w	r4, r6, #16
 80063c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80063d2:	1d33      	adds	r3, r6, #4
 80063d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063d6:	6838      	ldr	r0, [r7, #0]
 80063d8:	f006 f93a 	bl	800c650 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2101      	movs	r1, #1
 80063e2:	4618      	mov	r0, r3
 80063e4:	f006 f9b7 	bl	800c756 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	687e      	ldr	r6, [r7, #4]
 80063f0:	466d      	mov	r5, sp
 80063f2:	f106 0410 	add.w	r4, r6, #16
 80063f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006402:	e885 0003 	stmia.w	r5, {r0, r1}
 8006406:	1d33      	adds	r3, r6, #4
 8006408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800640a:	6838      	ldr	r0, [r7, #0]
 800640c:	f006 fb1e 	bl	800ca4c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006422:	bf00      	nop
 8006424:	08013850 	.word	0x08013850

08006428 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006428:	b590      	push	{r4, r7, lr}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af04      	add	r7, sp, #16
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	4608      	mov	r0, r1
 8006432:	4611      	mov	r1, r2
 8006434:	461a      	mov	r2, r3
 8006436:	4603      	mov	r3, r0
 8006438:	70fb      	strb	r3, [r7, #3]
 800643a:	460b      	mov	r3, r1
 800643c:	70bb      	strb	r3, [r7, #2]
 800643e:	4613      	mov	r3, r2
 8006440:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_HCD_HC_Init+0x28>
 800644c:	2302      	movs	r3, #2
 800644e:	e076      	b.n	800653e <HAL_HCD_HC_Init+0x116>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	212c      	movs	r1, #44	; 0x2c
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	4413      	add	r3, r2
 8006464:	333d      	adds	r3, #61	; 0x3d
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800646a:	78fb      	ldrb	r3, [r7, #3]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	212c      	movs	r1, #44	; 0x2c
 8006470:	fb01 f303 	mul.w	r3, r1, r3
 8006474:	4413      	add	r3, r2
 8006476:	3338      	adds	r3, #56	; 0x38
 8006478:	787a      	ldrb	r2, [r7, #1]
 800647a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	212c      	movs	r1, #44	; 0x2c
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	3340      	adds	r3, #64	; 0x40
 800648a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800648c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	212c      	movs	r1, #44	; 0x2c
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	3339      	adds	r3, #57	; 0x39
 800649c:	78fa      	ldrb	r2, [r7, #3]
 800649e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	212c      	movs	r1, #44	; 0x2c
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	333f      	adds	r3, #63	; 0x3f
 80064ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80064b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	78ba      	ldrb	r2, [r7, #2]
 80064b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064bc:	b2d0      	uxtb	r0, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	212c      	movs	r1, #44	; 0x2c
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	4413      	add	r3, r2
 80064c8:	333a      	adds	r3, #58	; 0x3a
 80064ca:	4602      	mov	r2, r0
 80064cc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80064ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	da09      	bge.n	80064ea <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	212c      	movs	r1, #44	; 0x2c
 80064dc:	fb01 f303 	mul.w	r3, r1, r3
 80064e0:	4413      	add	r3, r2
 80064e2:	333b      	adds	r3, #59	; 0x3b
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	e008      	b.n	80064fc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80064ea:	78fb      	ldrb	r3, [r7, #3]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	212c      	movs	r1, #44	; 0x2c
 80064f0:	fb01 f303 	mul.w	r3, r1, r3
 80064f4:	4413      	add	r3, r2
 80064f6:	333b      	adds	r3, #59	; 0x3b
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	212c      	movs	r1, #44	; 0x2c
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	4413      	add	r3, r2
 8006508:	333c      	adds	r3, #60	; 0x3c
 800650a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800650e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	787c      	ldrb	r4, [r7, #1]
 8006516:	78ba      	ldrb	r2, [r7, #2]
 8006518:	78f9      	ldrb	r1, [r7, #3]
 800651a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800651c:	9302      	str	r3, [sp, #8]
 800651e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4623      	mov	r3, r4
 800652c:	f006 fc08 	bl	800cd40 <USB_HC_Init>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}

08006546 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_HCD_HC_Halt+0x1e>
 8006560:	2302      	movs	r3, #2
 8006562:	e00f      	b.n	8006584 <HAL_HCD_HC_Halt+0x3e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f006 fe44 	bl	800d202 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	4608      	mov	r0, r1
 8006596:	4611      	mov	r1, r2
 8006598:	461a      	mov	r2, r3
 800659a:	4603      	mov	r3, r0
 800659c:	70fb      	strb	r3, [r7, #3]
 800659e:	460b      	mov	r3, r1
 80065a0:	70bb      	strb	r3, [r7, #2]
 80065a2:	4613      	mov	r3, r2
 80065a4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	212c      	movs	r1, #44	; 0x2c
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	4413      	add	r3, r2
 80065b2:	333b      	adds	r3, #59	; 0x3b
 80065b4:	78ba      	ldrb	r2, [r7, #2]
 80065b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	212c      	movs	r1, #44	; 0x2c
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	333f      	adds	r3, #63	; 0x3f
 80065c6:	787a      	ldrb	r2, [r7, #1]
 80065c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80065ca:	7c3b      	ldrb	r3, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d112      	bne.n	80065f6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80065d0:	78fb      	ldrb	r3, [r7, #3]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	212c      	movs	r1, #44	; 0x2c
 80065d6:	fb01 f303 	mul.w	r3, r1, r3
 80065da:	4413      	add	r3, r2
 80065dc:	3342      	adds	r3, #66	; 0x42
 80065de:	2203      	movs	r2, #3
 80065e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	212c      	movs	r1, #44	; 0x2c
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	4413      	add	r3, r2
 80065ee:	333d      	adds	r3, #61	; 0x3d
 80065f0:	7f3a      	ldrb	r2, [r7, #28]
 80065f2:	701a      	strb	r2, [r3, #0]
 80065f4:	e008      	b.n	8006608 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	212c      	movs	r1, #44	; 0x2c
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	4413      	add	r3, r2
 8006602:	3342      	adds	r3, #66	; 0x42
 8006604:	2202      	movs	r2, #2
 8006606:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006608:	787b      	ldrb	r3, [r7, #1]
 800660a:	2b03      	cmp	r3, #3
 800660c:	f200 80c6 	bhi.w	800679c <HAL_HCD_HC_SubmitRequest+0x210>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	08006629 	.word	0x08006629
 800661c:	08006789 	.word	0x08006789
 8006620:	0800668d 	.word	0x0800668d
 8006624:	0800670b 	.word	0x0800670b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006628:	7c3b      	ldrb	r3, [r7, #16]
 800662a:	2b01      	cmp	r3, #1
 800662c:	f040 80b8 	bne.w	80067a0 <HAL_HCD_HC_SubmitRequest+0x214>
 8006630:	78bb      	ldrb	r3, [r7, #2]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f040 80b4 	bne.w	80067a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006638:	8b3b      	ldrh	r3, [r7, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d108      	bne.n	8006650 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	212c      	movs	r1, #44	; 0x2c
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	3355      	adds	r3, #85	; 0x55
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	212c      	movs	r1, #44	; 0x2c
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	4413      	add	r3, r2
 800665c:	3355      	adds	r3, #85	; 0x55
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	212c      	movs	r1, #44	; 0x2c
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	4413      	add	r3, r2
 8006670:	3342      	adds	r3, #66	; 0x42
 8006672:	2200      	movs	r2, #0
 8006674:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006676:	e093      	b.n	80067a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	212c      	movs	r1, #44	; 0x2c
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	4413      	add	r3, r2
 8006684:	3342      	adds	r3, #66	; 0x42
 8006686:	2202      	movs	r2, #2
 8006688:	701a      	strb	r2, [r3, #0]
      break;
 800668a:	e089      	b.n	80067a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800668c:	78bb      	ldrb	r3, [r7, #2]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d11d      	bne.n	80066ce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	212c      	movs	r1, #44	; 0x2c
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	4413      	add	r3, r2
 800669e:	3355      	adds	r3, #85	; 0x55
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	212c      	movs	r1, #44	; 0x2c
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	4413      	add	r3, r2
 80066b2:	3342      	adds	r3, #66	; 0x42
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80066b8:	e073      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	212c      	movs	r1, #44	; 0x2c
 80066c0:	fb01 f303 	mul.w	r3, r1, r3
 80066c4:	4413      	add	r3, r2
 80066c6:	3342      	adds	r3, #66	; 0x42
 80066c8:	2202      	movs	r2, #2
 80066ca:	701a      	strb	r2, [r3, #0]
      break;
 80066cc:	e069      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	212c      	movs	r1, #44	; 0x2c
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	4413      	add	r3, r2
 80066da:	3354      	adds	r3, #84	; 0x54
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	212c      	movs	r1, #44	; 0x2c
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	4413      	add	r3, r2
 80066ee:	3342      	adds	r3, #66	; 0x42
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
      break;
 80066f4:	e055      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066f6:	78fb      	ldrb	r3, [r7, #3]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	212c      	movs	r1, #44	; 0x2c
 80066fc:	fb01 f303 	mul.w	r3, r1, r3
 8006700:	4413      	add	r3, r2
 8006702:	3342      	adds	r3, #66	; 0x42
 8006704:	2202      	movs	r2, #2
 8006706:	701a      	strb	r2, [r3, #0]
      break;
 8006708:	e04b      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800670a:	78bb      	ldrb	r3, [r7, #2]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d11d      	bne.n	800674c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	212c      	movs	r1, #44	; 0x2c
 8006716:	fb01 f303 	mul.w	r3, r1, r3
 800671a:	4413      	add	r3, r2
 800671c:	3355      	adds	r3, #85	; 0x55
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	212c      	movs	r1, #44	; 0x2c
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	4413      	add	r3, r2
 8006730:	3342      	adds	r3, #66	; 0x42
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006736:	e034      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	212c      	movs	r1, #44	; 0x2c
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	4413      	add	r3, r2
 8006744:	3342      	adds	r3, #66	; 0x42
 8006746:	2202      	movs	r2, #2
 8006748:	701a      	strb	r2, [r3, #0]
      break;
 800674a:	e02a      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	212c      	movs	r1, #44	; 0x2c
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	4413      	add	r3, r2
 8006758:	3354      	adds	r3, #84	; 0x54
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d109      	bne.n	8006774 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	212c      	movs	r1, #44	; 0x2c
 8006766:	fb01 f303 	mul.w	r3, r1, r3
 800676a:	4413      	add	r3, r2
 800676c:	3342      	adds	r3, #66	; 0x42
 800676e:	2200      	movs	r2, #0
 8006770:	701a      	strb	r2, [r3, #0]
      break;
 8006772:	e016      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006774:	78fb      	ldrb	r3, [r7, #3]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	212c      	movs	r1, #44	; 0x2c
 800677a:	fb01 f303 	mul.w	r3, r1, r3
 800677e:	4413      	add	r3, r2
 8006780:	3342      	adds	r3, #66	; 0x42
 8006782:	2202      	movs	r2, #2
 8006784:	701a      	strb	r2, [r3, #0]
      break;
 8006786:	e00c      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	212c      	movs	r1, #44	; 0x2c
 800678e:	fb01 f303 	mul.w	r3, r1, r3
 8006792:	4413      	add	r3, r2
 8006794:	3342      	adds	r3, #66	; 0x42
 8006796:	2200      	movs	r2, #0
 8006798:	701a      	strb	r2, [r3, #0]
      break;
 800679a:	e002      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800679c:	bf00      	nop
 800679e:	e000      	b.n	80067a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80067a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	212c      	movs	r1, #44	; 0x2c
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	4413      	add	r3, r2
 80067ae:	3344      	adds	r3, #68	; 0x44
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	8b3a      	ldrh	r2, [r7, #24]
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	202c      	movs	r0, #44	; 0x2c
 80067bc:	fb00 f303 	mul.w	r3, r0, r3
 80067c0:	440b      	add	r3, r1
 80067c2:	334c      	adds	r3, #76	; 0x4c
 80067c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	212c      	movs	r1, #44	; 0x2c
 80067cc:	fb01 f303 	mul.w	r3, r1, r3
 80067d0:	4413      	add	r3, r2
 80067d2:	3360      	adds	r3, #96	; 0x60
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	212c      	movs	r1, #44	; 0x2c
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	3350      	adds	r3, #80	; 0x50
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	212c      	movs	r1, #44	; 0x2c
 80067f0:	fb01 f303 	mul.w	r3, r1, r3
 80067f4:	4413      	add	r3, r2
 80067f6:	3339      	adds	r3, #57	; 0x39
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	212c      	movs	r1, #44	; 0x2c
 8006802:	fb01 f303 	mul.w	r3, r1, r3
 8006806:	4413      	add	r3, r2
 8006808:	3361      	adds	r3, #97	; 0x61
 800680a:	2200      	movs	r2, #0
 800680c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	222c      	movs	r2, #44	; 0x2c
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	3338      	adds	r3, #56	; 0x38
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	18d1      	adds	r1, r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	f006 fb98 	bl	800cf5c <USB_HC_StartXfer>
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop

08006838 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f006 f8bb 	bl	800c9ca <USB_GetMode>
 8006854:	4603      	mov	r3, r0
 8006856:	2b01      	cmp	r3, #1
 8006858:	f040 80f6 	bne.w	8006a48 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f006 f89f 	bl	800c9a4 <USB_ReadInterrupts>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80ec 	beq.w	8006a46 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f006 f896 	bl	800c9a4 <USB_ReadInterrupts>
 8006878:	4603      	mov	r3, r0
 800687a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006882:	d104      	bne.n	800688e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800688c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f006 f886 	bl	800c9a4 <USB_ReadInterrupts>
 8006898:	4603      	mov	r3, r0
 800689a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068a2:	d104      	bne.n	80068ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f006 f876 	bl	800c9a4 <USB_ReadInterrupts>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068c2:	d104      	bne.n	80068ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80068cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f006 f866 	bl	800c9a4 <USB_ReadInterrupts>
 80068d8:	4603      	mov	r3, r0
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d103      	bne.n	80068ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2202      	movs	r2, #2
 80068e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f006 f858 	bl	800c9a4 <USB_ReadInterrupts>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068fe:	d11c      	bne.n	800693a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006908:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800691a:	2110      	movs	r1, #16
 800691c:	6938      	ldr	r0, [r7, #16]
 800691e:	f005 ff67 	bl	800c7f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006922:	6938      	ldr	r0, [r7, #16]
 8006924:	f005 ff88 	bl	800c838 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f006 f940 	bl	800cbb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f008 fe13 	bl	800f560 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f006 f830 	bl	800c9a4 <USB_ReadInterrupts>
 8006944:	4603      	mov	r3, r0
 8006946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800694a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800694e:	d102      	bne.n	8006956 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fa03 	bl	8007d5c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f006 f822 	bl	800c9a4 <USB_ReadInterrupts>
 8006960:	4603      	mov	r3, r0
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b08      	cmp	r3, #8
 8006968:	d106      	bne.n	8006978 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f008 fddc 	bl	800f528 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2208      	movs	r2, #8
 8006976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f006 f811 	bl	800c9a4 <USB_ReadInterrupts>
 8006982:	4603      	mov	r3, r0
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b10      	cmp	r3, #16
 800698a:	d101      	bne.n	8006990 <HAL_HCD_IRQHandler+0x158>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <HAL_HCD_IRQHandler+0x15a>
 8006990:	2300      	movs	r3, #0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d012      	beq.n	80069bc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0210 	bic.w	r2, r2, #16
 80069a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 f906 	bl	8007bb8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f042 0210 	orr.w	r2, r2, #16
 80069ba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f005 ffef 	bl	800c9a4 <USB_ReadInterrupts>
 80069c6:	4603      	mov	r3, r0
 80069c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069d0:	d13a      	bne.n	8006a48 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f006 fc02 	bl	800d1e0 <USB_HC_ReadInterrupt>
 80069dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	e025      	b.n	8006a30 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	fa22 f303 	lsr.w	r3, r2, r3
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d018      	beq.n	8006a2a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a0e:	d106      	bne.n	8006a1e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f8ab 	bl	8006b72 <HCD_HC_IN_IRQHandler>
 8006a1c:	e005      	b.n	8006a2a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fcc6 	bl	80073b6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d3d4      	bcc.n	80069e4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a42:	615a      	str	r2, [r3, #20]
 8006a44:	e000      	b.n	8006a48 <HAL_HCD_IRQHandler+0x210>
      return;
 8006a46:	bf00      	nop
    }
  }
}
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_HCD_Start+0x16>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e013      	b.n	8006a8c <HAL_HCD_Start+0x3e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2101      	movs	r1, #1
 8006a72:	4618      	mov	r0, r3
 8006a74:	f006 f902 	bl	800cc7c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f005 fe48 	bl	800c712 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_HCD_Stop+0x16>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e00d      	b.n	8006ac6 <HAL_HCD_Stop+0x32>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f006 fcfc 	bl	800d4b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f006 f8a4 	bl	800cc28 <USB_ResetPort>
 8006ae0:	4603      	mov	r3, r0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	212c      	movs	r1, #44	; 0x2c
 8006afc:	fb01 f303 	mul.w	r3, r1, r3
 8006b00:	4413      	add	r3, r2
 8006b02:	3360      	adds	r3, #96	; 0x60
 8006b04:	781b      	ldrb	r3, [r3, #0]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	212c      	movs	r1, #44	; 0x2c
 8006b24:	fb01 f303 	mul.w	r3, r1, r3
 8006b28:	4413      	add	r3, r2
 8006b2a:	3350      	adds	r3, #80	; 0x50
 8006b2c:	681b      	ldr	r3, [r3, #0]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f006 f8e8 	bl	800cd1c <USB_GetCurrentFrame>
 8006b4c:	4603      	mov	r3, r0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f006 f8c3 	bl	800ccee <USB_GetHostSpeed>
 8006b68:	4603      	mov	r3, r0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b086      	sub	sp, #24
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d119      	bne.n	8006bd6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bce:	f043 0302 	orr.w	r3, r3, #2
 8006bd2:	60d3      	str	r3, [r2, #12]
 8006bd4:	e101      	b.n	8006dda <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bec:	d12b      	bne.n	8006c46 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	212c      	movs	r1, #44	; 0x2c
 8006c08:	fb01 f303 	mul.w	r3, r1, r3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3361      	adds	r3, #97	; 0x61
 8006c10:	2207      	movs	r2, #7
 8006c12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2e:	f043 0302 	orr.w	r3, r3, #2
 8006c32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	4611      	mov	r1, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f006 fadf 	bl	800d202 <USB_HC_Halt>
 8006c44:	e0c9      	b.n	8006dda <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d109      	bne.n	8006c70 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2320      	movs	r3, #32
 8006c6c:	6093      	str	r3, [r2, #8]
 8006c6e:	e0b4      	b.n	8006dda <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d133      	bne.n	8006cee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	0151      	lsls	r1, r2, #5
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca0:	f043 0302 	orr.w	r3, r3, #2
 8006ca4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	212c      	movs	r1, #44	; 0x2c
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3361      	adds	r3, #97	; 0x61
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	2308      	movs	r3, #8
 8006cda:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f006 fa8b 	bl	800d202 <USB_HC_Halt>
 8006cec:	e075      	b.n	8006dda <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d04:	d134      	bne.n	8006d70 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d20:	f043 0302 	orr.w	r3, r3, #2
 8006d24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	212c      	movs	r1, #44	; 0x2c
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	3361      	adds	r3, #97	; 0x61
 8006d34:	2208      	movs	r2, #8
 8006d36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d44:	461a      	mov	r2, r3
 8006d46:	2310      	movs	r3, #16
 8006d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	461a      	mov	r2, r3
 8006d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f006 fa4a 	bl	800d202 <USB_HC_Halt>
 8006d6e:	e034      	b.n	8006dda <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d129      	bne.n	8006dda <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da0:	f043 0302 	orr.w	r3, r3, #2
 8006da4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	212c      	movs	r1, #44	; 0x2c
 8006dac:	fb01 f303 	mul.w	r3, r1, r3
 8006db0:	4413      	add	r3, r2
 8006db2:	3361      	adds	r3, #97	; 0x61
 8006db4:	2206      	movs	r2, #6
 8006db6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f006 fa1d 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df0:	d122      	bne.n	8006e38 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	0151      	lsls	r1, r2, #5
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	440a      	add	r2, r1
 8006e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e0c:	f043 0302 	orr.w	r3, r3, #2
 8006e10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f006 f9f0 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e34:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006e36:	e2ba      	b.n	80073ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	f040 811b 	bne.w	8007086 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d019      	beq.n	8006e8c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	212c      	movs	r1, #44	; 0x2c
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	3348      	adds	r3, #72	; 0x48
 8006e66:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	0159      	lsls	r1, r3, #5
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	440b      	add	r3, r1
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	202c      	movs	r0, #44	; 0x2c
 8006e82:	fb00 f303 	mul.w	r3, r0, r3
 8006e86:	440b      	add	r3, r1
 8006e88:	3350      	adds	r3, #80	; 0x50
 8006e8a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	212c      	movs	r1, #44	; 0x2c
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	3361      	adds	r3, #97	; 0x61
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	212c      	movs	r1, #44	; 0x2c
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	335c      	adds	r3, #92	; 0x5c
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	212c      	movs	r1, #44	; 0x2c
 8006ec8:	fb01 f303 	mul.w	r3, r1, r3
 8006ecc:	4413      	add	r3, r2
 8006ece:	333f      	adds	r3, #63	; 0x3f
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	212c      	movs	r1, #44	; 0x2c
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	333f      	adds	r3, #63	; 0x3f
 8006ee4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d121      	bne.n	8006f2e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f04:	f043 0302 	orr.w	r3, r3, #2
 8006f08:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	4611      	mov	r1, r2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f006 f974 	bl	800d202 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	461a      	mov	r2, r3
 8006f28:	2310      	movs	r3, #16
 8006f2a:	6093      	str	r3, [r2, #8]
 8006f2c:	e066      	b.n	8006ffc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	212c      	movs	r1, #44	; 0x2c
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	333f      	adds	r3, #63	; 0x3f
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d127      	bne.n	8006f92 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	015a      	lsls	r2, r3, #5
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	4413      	add	r3, r2
 8006f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	0151      	lsls	r1, r2, #5
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	440a      	add	r2, r1
 8006f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f60:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	212c      	movs	r1, #44	; 0x2c
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3360      	adds	r3, #96	; 0x60
 8006f70:	2201      	movs	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	b2d9      	uxtb	r1, r3
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	202c      	movs	r0, #44	; 0x2c
 8006f7e:	fb00 f303 	mul.w	r3, r0, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	3360      	adds	r3, #96	; 0x60
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f008 faf6 	bl	800f57c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006f90:	e034      	b.n	8006ffc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	212c      	movs	r1, #44	; 0x2c
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	333f      	adds	r3, #63	; 0x3f
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d12a      	bne.n	8006ffc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	212c      	movs	r1, #44	; 0x2c
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3360      	adds	r3, #96	; 0x60
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	212c      	movs	r1, #44	; 0x2c
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3354      	adds	r3, #84	; 0x54
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	f083 0301 	eor.w	r3, r3, #1
 8006fcc:	b2d8      	uxtb	r0, r3
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	212c      	movs	r1, #44	; 0x2c
 8006fd4:	fb01 f303 	mul.w	r3, r1, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	3354      	adds	r3, #84	; 0x54
 8006fdc:	4602      	mov	r2, r0
 8006fde:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	b2d9      	uxtb	r1, r3
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	202c      	movs	r0, #44	; 0x2c
 8006fea:	fb00 f303 	mul.w	r3, r0, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	3360      	adds	r3, #96	; 0x60
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f008 fac0 	bl	800f57c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d12b      	bne.n	800705c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	212c      	movs	r1, #44	; 0x2c
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4413      	add	r3, r2
 8007010:	3348      	adds	r3, #72	; 0x48
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	202c      	movs	r0, #44	; 0x2c
 800701a:	fb00 f202 	mul.w	r2, r0, r2
 800701e:	440a      	add	r2, r1
 8007020:	3240      	adds	r2, #64	; 0x40
 8007022:	8812      	ldrh	r2, [r2, #0]
 8007024:	fbb3 f3f2 	udiv	r3, r3, r2
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 81be 	beq.w	80073ae <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	212c      	movs	r1, #44	; 0x2c
 8007038:	fb01 f303 	mul.w	r3, r1, r3
 800703c:	4413      	add	r3, r2
 800703e:	3354      	adds	r3, #84	; 0x54
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f083 0301 	eor.w	r3, r3, #1
 8007046:	b2d8      	uxtb	r0, r3
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	212c      	movs	r1, #44	; 0x2c
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	4413      	add	r3, r2
 8007054:	3354      	adds	r3, #84	; 0x54
 8007056:	4602      	mov	r2, r0
 8007058:	701a      	strb	r2, [r3, #0]
}
 800705a:	e1a8      	b.n	80073ae <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	212c      	movs	r1, #44	; 0x2c
 8007062:	fb01 f303 	mul.w	r3, r1, r3
 8007066:	4413      	add	r3, r2
 8007068:	3354      	adds	r3, #84	; 0x54
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	f083 0301 	eor.w	r3, r3, #1
 8007070:	b2d8      	uxtb	r0, r3
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	212c      	movs	r1, #44	; 0x2c
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	4413      	add	r3, r2
 800707e:	3354      	adds	r3, #84	; 0x54
 8007080:	4602      	mov	r2, r0
 8007082:	701a      	strb	r2, [r3, #0]
}
 8007084:	e193      	b.n	80073ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b02      	cmp	r3, #2
 800709a:	f040 8106 	bne.w	80072aa <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b8:	f023 0302 	bic.w	r3, r3, #2
 80070bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	212c      	movs	r1, #44	; 0x2c
 80070c4:	fb01 f303 	mul.w	r3, r1, r3
 80070c8:	4413      	add	r3, r2
 80070ca:	3361      	adds	r3, #97	; 0x61
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d109      	bne.n	80070e6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	212c      	movs	r1, #44	; 0x2c
 80070d8:	fb01 f303 	mul.w	r3, r1, r3
 80070dc:	4413      	add	r3, r2
 80070de:	3360      	adds	r3, #96	; 0x60
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	e0c9      	b.n	800727a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	212c      	movs	r1, #44	; 0x2c
 80070ec:	fb01 f303 	mul.w	r3, r1, r3
 80070f0:	4413      	add	r3, r2
 80070f2:	3361      	adds	r3, #97	; 0x61
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d109      	bne.n	800710e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	212c      	movs	r1, #44	; 0x2c
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	4413      	add	r3, r2
 8007106:	3360      	adds	r3, #96	; 0x60
 8007108:	2205      	movs	r2, #5
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	e0b5      	b.n	800727a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	212c      	movs	r1, #44	; 0x2c
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	3361      	adds	r3, #97	; 0x61
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b06      	cmp	r3, #6
 8007120:	d009      	beq.n	8007136 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	212c      	movs	r1, #44	; 0x2c
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	3361      	adds	r3, #97	; 0x61
 8007130:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007132:	2b08      	cmp	r3, #8
 8007134:	d150      	bne.n	80071d8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	212c      	movs	r1, #44	; 0x2c
 800713c:	fb01 f303 	mul.w	r3, r1, r3
 8007140:	4413      	add	r3, r2
 8007142:	335c      	adds	r3, #92	; 0x5c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	202c      	movs	r0, #44	; 0x2c
 800714e:	fb00 f303 	mul.w	r3, r0, r3
 8007152:	440b      	add	r3, r1
 8007154:	335c      	adds	r3, #92	; 0x5c
 8007156:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	212c      	movs	r1, #44	; 0x2c
 800715e:	fb01 f303 	mul.w	r3, r1, r3
 8007162:	4413      	add	r3, r2
 8007164:	335c      	adds	r3, #92	; 0x5c
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b02      	cmp	r3, #2
 800716a:	d912      	bls.n	8007192 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	212c      	movs	r1, #44	; 0x2c
 8007172:	fb01 f303 	mul.w	r3, r1, r3
 8007176:	4413      	add	r3, r2
 8007178:	335c      	adds	r3, #92	; 0x5c
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	212c      	movs	r1, #44	; 0x2c
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	3360      	adds	r3, #96	; 0x60
 800718c:	2204      	movs	r2, #4
 800718e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007190:	e073      	b.n	800727a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	212c      	movs	r1, #44	; 0x2c
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	4413      	add	r3, r2
 800719e:	3360      	adds	r3, #96	; 0x60
 80071a0:	2202      	movs	r2, #2
 80071a2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071ba:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071c2:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d0:	461a      	mov	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80071d6:	e050      	b.n	800727a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	212c      	movs	r1, #44	; 0x2c
 80071de:	fb01 f303 	mul.w	r3, r1, r3
 80071e2:	4413      	add	r3, r2
 80071e4:	3361      	adds	r3, #97	; 0x61
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d122      	bne.n	8007232 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	212c      	movs	r1, #44	; 0x2c
 80071f2:	fb01 f303 	mul.w	r3, r1, r3
 80071f6:	4413      	add	r3, r2
 80071f8:	3360      	adds	r3, #96	; 0x60
 80071fa:	2202      	movs	r2, #2
 80071fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	4413      	add	r3, r2
 8007206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007214:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800721c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	e023      	b.n	800727a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	212c      	movs	r1, #44	; 0x2c
 8007238:	fb01 f303 	mul.w	r3, r1, r3
 800723c:	4413      	add	r3, r2
 800723e:	3361      	adds	r3, #97	; 0x61
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b07      	cmp	r3, #7
 8007244:	d119      	bne.n	800727a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	212c      	movs	r1, #44	; 0x2c
 800724c:	fb01 f303 	mul.w	r3, r1, r3
 8007250:	4413      	add	r3, r2
 8007252:	335c      	adds	r3, #92	; 0x5c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	202c      	movs	r0, #44	; 0x2c
 800725e:	fb00 f303 	mul.w	r3, r0, r3
 8007262:	440b      	add	r3, r1
 8007264:	335c      	adds	r3, #92	; 0x5c
 8007266:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	212c      	movs	r1, #44	; 0x2c
 800726e:	fb01 f303 	mul.w	r3, r1, r3
 8007272:	4413      	add	r3, r2
 8007274:	3360      	adds	r3, #96	; 0x60
 8007276:	2204      	movs	r2, #4
 8007278:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	4413      	add	r3, r2
 8007282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007286:	461a      	mov	r2, r3
 8007288:	2302      	movs	r3, #2
 800728a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	b2d9      	uxtb	r1, r3
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	202c      	movs	r0, #44	; 0x2c
 8007296:	fb00 f303 	mul.w	r3, r0, r3
 800729a:	4413      	add	r3, r2
 800729c:	3360      	adds	r3, #96	; 0x60
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	461a      	mov	r2, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f008 f96a 	bl	800f57c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80072a8:	e081      	b.n	80073ae <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b10      	cmp	r3, #16
 80072be:	d176      	bne.n	80073ae <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	212c      	movs	r1, #44	; 0x2c
 80072c6:	fb01 f303 	mul.w	r3, r1, r3
 80072ca:	4413      	add	r3, r2
 80072cc:	333f      	adds	r3, #63	; 0x3f
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d121      	bne.n	8007318 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	212c      	movs	r1, #44	; 0x2c
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	4413      	add	r3, r2
 80072e0:	335c      	adds	r3, #92	; 0x5c
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f005 ff76 	bl	800d202 <USB_HC_Halt>
 8007316:	e041      	b.n	800739c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	212c      	movs	r1, #44	; 0x2c
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	4413      	add	r3, r2
 8007324:	333f      	adds	r3, #63	; 0x3f
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	212c      	movs	r1, #44	; 0x2c
 8007332:	fb01 f303 	mul.w	r3, r1, r3
 8007336:	4413      	add	r3, r2
 8007338:	333f      	adds	r3, #63	; 0x3f
 800733a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800733c:	2b02      	cmp	r3, #2
 800733e:	d12d      	bne.n	800739c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	212c      	movs	r1, #44	; 0x2c
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	335c      	adds	r3, #92	; 0x5c
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d120      	bne.n	800739c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	212c      	movs	r1, #44	; 0x2c
 8007360:	fb01 f303 	mul.w	r3, r1, r3
 8007364:	4413      	add	r3, r2
 8007366:	3361      	adds	r3, #97	; 0x61
 8007368:	2203      	movs	r2, #3
 800736a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	440a      	add	r2, r1
 8007382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007386:	f043 0302 	orr.w	r3, r3, #2
 800738a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f005 ff33 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a8:	461a      	mov	r2, r3
 80073aa:	2310      	movs	r3, #16
 80073ac:	6093      	str	r3, [r2, #8]
}
 80073ae:	bf00      	nop
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
 80073be:	460b      	mov	r3, r1
 80073c0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	d119      	bne.n	800741a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	461a      	mov	r2, r3
 80073f4:	2304      	movs	r3, #4
 80073f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	0151      	lsls	r1, r2, #5
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	440a      	add	r2, r1
 800740e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007412:	f043 0302 	orr.w	r3, r3, #2
 8007416:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007418:	e3ca      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	4413      	add	r3, r2
 8007422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b20      	cmp	r3, #32
 800742e:	d13e      	bne.n	80074ae <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	4413      	add	r3, r2
 8007438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800743c:	461a      	mov	r2, r3
 800743e:	2320      	movs	r3, #32
 8007440:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	212c      	movs	r1, #44	; 0x2c
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	333d      	adds	r3, #61	; 0x3d
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b01      	cmp	r3, #1
 8007454:	f040 83ac 	bne.w	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	212c      	movs	r1, #44	; 0x2c
 800745e:	fb01 f303 	mul.w	r3, r1, r3
 8007462:	4413      	add	r3, r2
 8007464:	333d      	adds	r3, #61	; 0x3d
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	212c      	movs	r1, #44	; 0x2c
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	4413      	add	r3, r2
 8007476:	3360      	adds	r3, #96	; 0x60
 8007478:	2202      	movs	r2, #2
 800747a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	4413      	add	r3, r2
 8007484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	440a      	add	r2, r1
 8007492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007496:	f043 0302 	orr.w	r3, r3, #2
 800749a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f005 feab 	bl	800d202 <USB_HC_Halt>
}
 80074ac:	e380      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074c4:	d122      	bne.n	800750c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	b2d2      	uxtb	r2, r2
 80074ee:	4611      	mov	r1, r2
 80074f0:	4618      	mov	r0, r3
 80074f2:	f005 fe86 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007502:	461a      	mov	r2, r3
 8007504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007508:	6093      	str	r3, [r2, #8]
}
 800750a:	e351      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	4413      	add	r3, r2
 8007514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b01      	cmp	r3, #1
 8007520:	d150      	bne.n	80075c4 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	212c      	movs	r1, #44	; 0x2c
 8007528:	fb01 f303 	mul.w	r3, r1, r3
 800752c:	4413      	add	r3, r2
 800752e:	335c      	adds	r3, #92	; 0x5c
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	4413      	add	r3, r2
 800753c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d111      	bne.n	800756e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	212c      	movs	r1, #44	; 0x2c
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	4413      	add	r3, r2
 8007556:	333d      	adds	r3, #61	; 0x3d
 8007558:	2201      	movs	r2, #1
 800755a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	4413      	add	r3, r2
 8007564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007568:	461a      	mov	r2, r3
 800756a:	2340      	movs	r3, #64	; 0x40
 800756c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	4413      	add	r3, r2
 8007576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	440a      	add	r2, r1
 8007584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007588:	f043 0302 	orr.w	r3, r3, #2
 800758c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	4611      	mov	r1, r2
 8007598:	4618      	mov	r0, r3
 800759a:	f005 fe32 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075aa:	461a      	mov	r2, r3
 80075ac:	2301      	movs	r3, #1
 80075ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	212c      	movs	r1, #44	; 0x2c
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	4413      	add	r3, r2
 80075bc:	3361      	adds	r3, #97	; 0x61
 80075be:	2201      	movs	r2, #1
 80075c0:	701a      	strb	r2, [r3, #0]
}
 80075c2:	e2f5      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d13c      	bne.n	8007654 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	212c      	movs	r1, #44	; 0x2c
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	4413      	add	r3, r2
 80075e6:	3361      	adds	r3, #97	; 0x61
 80075e8:	2204      	movs	r2, #4
 80075ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	212c      	movs	r1, #44	; 0x2c
 80075f2:	fb01 f303 	mul.w	r3, r1, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	333d      	adds	r3, #61	; 0x3d
 80075fa:	2201      	movs	r2, #1
 80075fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	212c      	movs	r1, #44	; 0x2c
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	4413      	add	r3, r2
 800760a:	335c      	adds	r3, #92	; 0x5c
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	4413      	add	r3, r2
 8007618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	440a      	add	r2, r1
 8007626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800762a:	f043 0302 	orr.w	r3, r3, #2
 800762e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f005 fde1 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	015a      	lsls	r2, r3, #5
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	4413      	add	r3, r2
 8007648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800764c:	461a      	mov	r2, r3
 800764e:	2340      	movs	r3, #64	; 0x40
 8007650:	6093      	str	r3, [r2, #8]
}
 8007652:	e2ad      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	4413      	add	r3, r2
 800765c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b08      	cmp	r3, #8
 8007668:	d12a      	bne.n	80076c0 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	4413      	add	r3, r2
 8007672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007676:	461a      	mov	r2, r3
 8007678:	2308      	movs	r3, #8
 800767a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	440a      	add	r2, r1
 8007692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007696:	f043 0302 	orr.w	r3, r3, #2
 800769a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	4611      	mov	r1, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f005 fdab 	bl	800d202 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	212c      	movs	r1, #44	; 0x2c
 80076b2:	fb01 f303 	mul.w	r3, r1, r3
 80076b6:	4413      	add	r3, r2
 80076b8:	3361      	adds	r3, #97	; 0x61
 80076ba:	2205      	movs	r2, #5
 80076bc:	701a      	strb	r2, [r3, #0]
}
 80076be:	e277      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	2b10      	cmp	r3, #16
 80076d4:	d150      	bne.n	8007778 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	212c      	movs	r1, #44	; 0x2c
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	335c      	adds	r3, #92	; 0x5c
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	212c      	movs	r1, #44	; 0x2c
 80076ee:	fb01 f303 	mul.w	r3, r1, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	3361      	adds	r3, #97	; 0x61
 80076f6:	2203      	movs	r2, #3
 80076f8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	212c      	movs	r1, #44	; 0x2c
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	4413      	add	r3, r2
 8007706:	333d      	adds	r3, #61	; 0x3d
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d112      	bne.n	8007734 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	212c      	movs	r1, #44	; 0x2c
 8007714:	fb01 f303 	mul.w	r3, r1, r3
 8007718:	4413      	add	r3, r2
 800771a:	333c      	adds	r3, #60	; 0x3c
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d108      	bne.n	8007734 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	212c      	movs	r1, #44	; 0x2c
 8007728:	fb01 f303 	mul.w	r3, r1, r3
 800772c:	4413      	add	r3, r2
 800772e:	333d      	adds	r3, #61	; 0x3d
 8007730:	2201      	movs	r2, #1
 8007732:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	4413      	add	r3, r2
 800773c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	440a      	add	r2, r1
 800774a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800774e:	f043 0302 	orr.w	r3, r3, #2
 8007752:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	4611      	mov	r1, r2
 800775e:	4618      	mov	r0, r3
 8007760:	f005 fd4f 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	4413      	add	r3, r2
 800776c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007770:	461a      	mov	r2, r3
 8007772:	2310      	movs	r3, #16
 8007774:	6093      	str	r3, [r2, #8]
}
 8007776:	e21b      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	4413      	add	r3, r2
 8007780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778a:	2b80      	cmp	r3, #128	; 0x80
 800778c:	d174      	bne.n	8007878 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d121      	bne.n	80077da <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	212c      	movs	r1, #44	; 0x2c
 800779c:	fb01 f303 	mul.w	r3, r1, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	3361      	adds	r3, #97	; 0x61
 80077a4:	2206      	movs	r2, #6
 80077a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	4611      	mov	r1, r2
 80077d2:	4618      	mov	r0, r3
 80077d4:	f005 fd15 	bl	800d202 <USB_HC_Halt>
 80077d8:	e044      	b.n	8007864 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	212c      	movs	r1, #44	; 0x2c
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	4413      	add	r3, r2
 80077e6:	335c      	adds	r3, #92	; 0x5c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	6879      	ldr	r1, [r7, #4]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	202c      	movs	r0, #44	; 0x2c
 80077f2:	fb00 f303 	mul.w	r3, r0, r3
 80077f6:	440b      	add	r3, r1
 80077f8:	335c      	adds	r3, #92	; 0x5c
 80077fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	212c      	movs	r1, #44	; 0x2c
 8007802:	fb01 f303 	mul.w	r3, r1, r3
 8007806:	4413      	add	r3, r2
 8007808:	335c      	adds	r3, #92	; 0x5c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d920      	bls.n	8007852 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	212c      	movs	r1, #44	; 0x2c
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	4413      	add	r3, r2
 800781c:	335c      	adds	r3, #92	; 0x5c
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	212c      	movs	r1, #44	; 0x2c
 8007828:	fb01 f303 	mul.w	r3, r1, r3
 800782c:	4413      	add	r3, r2
 800782e:	3360      	adds	r3, #96	; 0x60
 8007830:	2204      	movs	r2, #4
 8007832:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	b2d9      	uxtb	r1, r3
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	202c      	movs	r0, #44	; 0x2c
 800783e:	fb00 f303 	mul.w	r3, r0, r3
 8007842:	4413      	add	r3, r2
 8007844:	3360      	adds	r3, #96	; 0x60
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	461a      	mov	r2, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f007 fe96 	bl	800f57c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007850:	e008      	b.n	8007864 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	212c      	movs	r1, #44	; 0x2c
 8007858:	fb01 f303 	mul.w	r3, r1, r3
 800785c:	4413      	add	r3, r2
 800785e:	3360      	adds	r3, #96	; 0x60
 8007860:	2202      	movs	r2, #2
 8007862:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	4413      	add	r3, r2
 800786c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007870:	461a      	mov	r2, r3
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	6093      	str	r3, [r2, #8]
}
 8007876:	e19b      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800788a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788e:	d134      	bne.n	80078fa <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	4413      	add	r3, r2
 8007898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078aa:	f043 0302 	orr.w	r3, r3, #2
 80078ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f005 fca1 	bl	800d202 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078cc:	461a      	mov	r2, r3
 80078ce:	2310      	movs	r3, #16
 80078d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078de:	461a      	mov	r2, r3
 80078e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	212c      	movs	r1, #44	; 0x2c
 80078ec:	fb01 f303 	mul.w	r3, r1, r3
 80078f0:	4413      	add	r3, r2
 80078f2:	3361      	adds	r3, #97	; 0x61
 80078f4:	2208      	movs	r2, #8
 80078f6:	701a      	strb	r2, [r3, #0]
}
 80078f8:	e15a      	b.n	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 0302 	and.w	r3, r3, #2
 800790c:	2b02      	cmp	r3, #2
 800790e:	f040 814f 	bne.w	8007bb0 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	4413      	add	r3, r2
 800791a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	440a      	add	r2, r1
 8007928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800792c:	f023 0302 	bic.w	r3, r3, #2
 8007930:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	212c      	movs	r1, #44	; 0x2c
 8007938:	fb01 f303 	mul.w	r3, r1, r3
 800793c:	4413      	add	r3, r2
 800793e:	3361      	adds	r3, #97	; 0x61
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d17d      	bne.n	8007a42 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	212c      	movs	r1, #44	; 0x2c
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	4413      	add	r3, r2
 8007952:	3360      	adds	r3, #96	; 0x60
 8007954:	2201      	movs	r2, #1
 8007956:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	212c      	movs	r1, #44	; 0x2c
 800795e:	fb01 f303 	mul.w	r3, r1, r3
 8007962:	4413      	add	r3, r2
 8007964:	333f      	adds	r3, #63	; 0x3f
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d00a      	beq.n	8007982 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	212c      	movs	r1, #44	; 0x2c
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	4413      	add	r3, r2
 8007978:	333f      	adds	r3, #63	; 0x3f
 800797a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800797c:	2b03      	cmp	r3, #3
 800797e:	f040 8100 	bne.w	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d113      	bne.n	80079b2 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	212c      	movs	r1, #44	; 0x2c
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	4413      	add	r3, r2
 8007996:	3355      	adds	r3, #85	; 0x55
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f083 0301 	eor.w	r3, r3, #1
 800799e:	b2d8      	uxtb	r0, r3
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	212c      	movs	r1, #44	; 0x2c
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	3355      	adds	r3, #85	; 0x55
 80079ae:	4602      	mov	r2, r0
 80079b0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	f040 80e3 	bne.w	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	212c      	movs	r1, #44	; 0x2c
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	4413      	add	r3, r2
 80079c8:	334c      	adds	r3, #76	; 0x4c
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80d8 	beq.w	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	212c      	movs	r1, #44	; 0x2c
 80079d8:	fb01 f303 	mul.w	r3, r1, r3
 80079dc:	4413      	add	r3, r2
 80079de:	334c      	adds	r3, #76	; 0x4c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	202c      	movs	r0, #44	; 0x2c
 80079e8:	fb00 f202 	mul.w	r2, r0, r2
 80079ec:	440a      	add	r2, r1
 80079ee:	3240      	adds	r2, #64	; 0x40
 80079f0:	8812      	ldrh	r2, [r2, #0]
 80079f2:	4413      	add	r3, r2
 80079f4:	3b01      	subs	r3, #1
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	202c      	movs	r0, #44	; 0x2c
 80079fc:	fb00 f202 	mul.w	r2, r0, r2
 8007a00:	440a      	add	r2, r1
 8007a02:	3240      	adds	r2, #64	; 0x40
 8007a04:	8812      	ldrh	r2, [r2, #0]
 8007a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 80b5 	beq.w	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	212c      	movs	r1, #44	; 0x2c
 8007a1e:	fb01 f303 	mul.w	r3, r1, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	3355      	adds	r3, #85	; 0x55
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	f083 0301 	eor.w	r3, r3, #1
 8007a2c:	b2d8      	uxtb	r0, r3
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	212c      	movs	r1, #44	; 0x2c
 8007a34:	fb01 f303 	mul.w	r3, r1, r3
 8007a38:	4413      	add	r3, r2
 8007a3a:	3355      	adds	r3, #85	; 0x55
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	e09f      	b.n	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	212c      	movs	r1, #44	; 0x2c
 8007a48:	fb01 f303 	mul.w	r3, r1, r3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3361      	adds	r3, #97	; 0x61
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d109      	bne.n	8007a6a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	212c      	movs	r1, #44	; 0x2c
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	3360      	adds	r3, #96	; 0x60
 8007a64:	2202      	movs	r2, #2
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	e08b      	b.n	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	212c      	movs	r1, #44	; 0x2c
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	4413      	add	r3, r2
 8007a76:	3361      	adds	r3, #97	; 0x61
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d109      	bne.n	8007a92 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	212c      	movs	r1, #44	; 0x2c
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	4413      	add	r3, r2
 8007a8a:	3360      	adds	r3, #96	; 0x60
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e077      	b.n	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	212c      	movs	r1, #44	; 0x2c
 8007a98:	fb01 f303 	mul.w	r3, r1, r3
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3361      	adds	r3, #97	; 0x61
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d109      	bne.n	8007aba <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	212c      	movs	r1, #44	; 0x2c
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3360      	adds	r3, #96	; 0x60
 8007ab4:	2205      	movs	r2, #5
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	e063      	b.n	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	212c      	movs	r1, #44	; 0x2c
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3361      	adds	r3, #97	; 0x61
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b06      	cmp	r3, #6
 8007acc:	d009      	beq.n	8007ae2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	212c      	movs	r1, #44	; 0x2c
 8007ad4:	fb01 f303 	mul.w	r3, r1, r3
 8007ad8:	4413      	add	r3, r2
 8007ada:	3361      	adds	r3, #97	; 0x61
 8007adc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d14f      	bne.n	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	212c      	movs	r1, #44	; 0x2c
 8007ae8:	fb01 f303 	mul.w	r3, r1, r3
 8007aec:	4413      	add	r3, r2
 8007aee:	335c      	adds	r3, #92	; 0x5c
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	202c      	movs	r0, #44	; 0x2c
 8007afa:	fb00 f303 	mul.w	r3, r0, r3
 8007afe:	440b      	add	r3, r1
 8007b00:	335c      	adds	r3, #92	; 0x5c
 8007b02:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	212c      	movs	r1, #44	; 0x2c
 8007b0a:	fb01 f303 	mul.w	r3, r1, r3
 8007b0e:	4413      	add	r3, r2
 8007b10:	335c      	adds	r3, #92	; 0x5c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d912      	bls.n	8007b3e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	212c      	movs	r1, #44	; 0x2c
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	4413      	add	r3, r2
 8007b24:	335c      	adds	r3, #92	; 0x5c
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	212c      	movs	r1, #44	; 0x2c
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	3360      	adds	r3, #96	; 0x60
 8007b38:	2204      	movs	r2, #4
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e021      	b.n	8007b82 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	212c      	movs	r1, #44	; 0x2c
 8007b44:	fb01 f303 	mul.w	r3, r1, r3
 8007b48:	4413      	add	r3, r2
 8007b4a:	3360      	adds	r3, #96	; 0x60
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b66:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b6e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8e:	461a      	mov	r2, r3
 8007b90:	2302      	movs	r3, #2
 8007b92:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	b2d9      	uxtb	r1, r3
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	202c      	movs	r0, #44	; 0x2c
 8007b9e:	fb00 f303 	mul.w	r3, r0, r3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3360      	adds	r3, #96	; 0x60
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f007 fce6 	bl	800f57c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007bb0:	bf00      	nop
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f003 030f 	and.w	r3, r3, #15
 8007bd8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	0c5b      	lsrs	r3, r3, #17
 8007bde:	f003 030f 	and.w	r3, r3, #15
 8007be2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	091b      	lsrs	r3, r3, #4
 8007be8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d004      	beq.n	8007bfe <HCD_RXQLVL_IRQHandler+0x46>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	2b05      	cmp	r3, #5
 8007bf8:	f000 80a9 	beq.w	8007d4e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007bfc:	e0aa      	b.n	8007d54 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80a6 	beq.w	8007d52 <HCD_RXQLVL_IRQHandler+0x19a>
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	212c      	movs	r1, #44	; 0x2c
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	3344      	adds	r3, #68	; 0x44
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f000 809b 	beq.w	8007d52 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	212c      	movs	r1, #44	; 0x2c
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	4413      	add	r3, r2
 8007c28:	3350      	adds	r3, #80	; 0x50
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	441a      	add	r2, r3
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	202c      	movs	r0, #44	; 0x2c
 8007c36:	fb00 f303 	mul.w	r3, r0, r3
 8007c3a:	440b      	add	r3, r1
 8007c3c:	334c      	adds	r3, #76	; 0x4c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d87a      	bhi.n	8007d3a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	212c      	movs	r1, #44	; 0x2c
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	4413      	add	r3, r2
 8007c54:	3344      	adds	r3, #68	; 0x44
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f004 fe49 	bl	800c8f4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	212c      	movs	r1, #44	; 0x2c
 8007c68:	fb01 f303 	mul.w	r3, r1, r3
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3344      	adds	r3, #68	; 0x44
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	441a      	add	r2, r3
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	202c      	movs	r0, #44	; 0x2c
 8007c7c:	fb00 f303 	mul.w	r3, r0, r3
 8007c80:	440b      	add	r3, r1
 8007c82:	3344      	adds	r3, #68	; 0x44
 8007c84:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	212c      	movs	r1, #44	; 0x2c
 8007c8c:	fb01 f303 	mul.w	r3, r1, r3
 8007c90:	4413      	add	r3, r2
 8007c92:	3350      	adds	r3, #80	; 0x50
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	441a      	add	r2, r3
 8007c9a:	6879      	ldr	r1, [r7, #4]
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	202c      	movs	r0, #44	; 0x2c
 8007ca0:	fb00 f303 	mul.w	r3, r0, r3
 8007ca4:	440b      	add	r3, r1
 8007ca6:	3350      	adds	r3, #80	; 0x50
 8007ca8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	0cdb      	lsrs	r3, r3, #19
 8007cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cbe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	212c      	movs	r1, #44	; 0x2c
 8007cc6:	fb01 f303 	mul.w	r3, r1, r3
 8007cca:	4413      	add	r3, r2
 8007ccc:	3340      	adds	r3, #64	; 0x40
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d13c      	bne.n	8007d52 <HCD_RXQLVL_IRQHandler+0x19a>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d039      	beq.n	8007d52 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cf4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cfc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	212c      	movs	r1, #44	; 0x2c
 8007d16:	fb01 f303 	mul.w	r3, r1, r3
 8007d1a:	4413      	add	r3, r2
 8007d1c:	3354      	adds	r3, #84	; 0x54
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f083 0301 	eor.w	r3, r3, #1
 8007d24:	b2d8      	uxtb	r0, r3
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	212c      	movs	r1, #44	; 0x2c
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	4413      	add	r3, r2
 8007d32:	3354      	adds	r3, #84	; 0x54
 8007d34:	4602      	mov	r2, r0
 8007d36:	701a      	strb	r2, [r3, #0]
      break;
 8007d38:	e00b      	b.n	8007d52 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	212c      	movs	r1, #44	; 0x2c
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	4413      	add	r3, r2
 8007d46:	3360      	adds	r3, #96	; 0x60
 8007d48:	2204      	movs	r2, #4
 8007d4a:	701a      	strb	r2, [r3, #0]
      break;
 8007d4c:	e001      	b.n	8007d52 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007d52:	bf00      	nop
  }
}
 8007d54:	bf00      	nop
 8007d56:	3728      	adds	r7, #40	; 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d88:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d10b      	bne.n	8007dac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d102      	bne.n	8007da4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f007 fbd0 	bl	800f544 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	f043 0302 	orr.w	r3, r3, #2
 8007daa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d132      	bne.n	8007e1c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	f043 0308 	orr.w	r3, r3, #8
 8007dbc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d126      	bne.n	8007e16 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d113      	bne.n	8007df8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dda:	d106      	bne.n	8007dea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2102      	movs	r1, #2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f004 fee6 	bl	800cbb4 <USB_InitFSLSPClkSel>
 8007de8:	e011      	b.n	8007e0e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2101      	movs	r1, #1
 8007df0:	4618      	mov	r0, r3
 8007df2:	f004 fedf 	bl	800cbb4 <USB_InitFSLSPClkSel>
 8007df6:	e00a      	b.n	8007e0e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d106      	bne.n	8007e0e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e06:	461a      	mov	r2, r3
 8007e08:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007e0c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f007 fbc2 	bl	800f598 <HAL_HCD_PortEnabled_Callback>
 8007e14:	e002      	b.n	8007e1c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f007 fbcc 	bl	800f5b4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d103      	bne.n	8007e2e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f043 0320 	orr.w	r3, r3, #32
 8007e2c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e34:	461a      	mov	r2, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6013      	str	r3, [r2, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e1be      	b.n	80081d4 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a9f      	ldr	r2, [pc, #636]	; (80080d8 <HAL_I2C_Init+0x294>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d00e      	beq.n	8007e7e <HAL_I2C_Init+0x3a>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a9d      	ldr	r2, [pc, #628]	; (80080dc <HAL_I2C_Init+0x298>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d009      	beq.n	8007e7e <HAL_I2C_Init+0x3a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a9c      	ldr	r2, [pc, #624]	; (80080e0 <HAL_I2C_Init+0x29c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d004      	beq.n	8007e7e <HAL_I2C_Init+0x3a>
 8007e74:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007e78:	489a      	ldr	r0, [pc, #616]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007e7a:	f7fb fb5e 	bl	800353a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <HAL_I2C_Init+0x4c>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4a97      	ldr	r2, [pc, #604]	; (80080e8 <HAL_I2C_Init+0x2a4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d904      	bls.n	8007e9a <HAL_I2C_Init+0x56>
 8007e90:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007e94:	4893      	ldr	r0, [pc, #588]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007e96:	f7fb fb50 	bl	800353a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d009      	beq.n	8007eb6 <HAL_I2C_Init+0x72>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eaa:	d004      	beq.n	8007eb6 <HAL_I2C_Init+0x72>
 8007eac:	f240 11c1 	movw	r1, #449	; 0x1c1
 8007eb0:	488c      	ldr	r0, [pc, #560]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007eb2:	f7fb fb42 	bl	800353a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <HAL_I2C_Init+0x8c>
 8007ec6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8007eca:	4886      	ldr	r0, [pc, #536]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007ecc:	f7fb fb35 	bl	800353a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ed8:	d009      	beq.n	8007eee <HAL_I2C_Init+0xaa>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ee2:	d004      	beq.n	8007eee <HAL_I2C_Init+0xaa>
 8007ee4:	f240 11c3 	movw	r1, #451	; 0x1c3
 8007ee8:	487e      	ldr	r0, [pc, #504]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007eea:	f7fb fb26 	bl	800353a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <HAL_I2C_Init+0xc4>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d004      	beq.n	8007f08 <HAL_I2C_Init+0xc4>
 8007efe:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8007f02:	4878      	ldr	r0, [pc, #480]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007f04:	f7fb fb19 	bl	800353a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <HAL_I2C_Init+0xda>
 8007f14:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007f18:	4872      	ldr	r0, [pc, #456]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007f1a:	f7fb fb0e 	bl	800353a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <HAL_I2C_Init+0xf4>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d004      	beq.n	8007f38 <HAL_I2C_Init+0xf4>
 8007f2e:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8007f32:	486c      	ldr	r0, [pc, #432]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007f34:	f7fb fb01 	bl	800353a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_I2C_Init+0x10e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	2b80      	cmp	r3, #128	; 0x80
 8007f46:	d004      	beq.n	8007f52 <HAL_I2C_Init+0x10e>
 8007f48:	f240 11c7 	movw	r1, #455	; 0x1c7
 8007f4c:	4865      	ldr	r0, [pc, #404]	; (80080e4 <HAL_I2C_Init+0x2a0>)
 8007f4e:	f7fb faf4 	bl	800353a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fa f9c8 	bl	80022fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2224      	movs	r2, #36	; 0x24
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0201 	bic.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007fa4:	f001 fdac 	bl	8009b00 <HAL_RCC_GetPCLK1Freq>
 8007fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	4a4f      	ldr	r2, [pc, #316]	; (80080ec <HAL_I2C_Init+0x2a8>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d807      	bhi.n	8007fc4 <HAL_I2C_Init+0x180>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4a4e      	ldr	r2, [pc, #312]	; (80080f0 <HAL_I2C_Init+0x2ac>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	bf94      	ite	ls
 8007fbc:	2301      	movls	r3, #1
 8007fbe:	2300      	movhi	r3, #0
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	e006      	b.n	8007fd2 <HAL_I2C_Init+0x18e>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4a4b      	ldr	r2, [pc, #300]	; (80080f4 <HAL_I2C_Init+0x2b0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	bf94      	ite	ls
 8007fcc:	2301      	movls	r3, #1
 8007fce:	2300      	movhi	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e0fc      	b.n	80081d4 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4a46      	ldr	r2, [pc, #280]	; (80080f8 <HAL_I2C_Init+0x2b4>)
 8007fde:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe2:	0c9b      	lsrs	r3, r3, #18
 8007fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4a38      	ldr	r2, [pc, #224]	; (80080ec <HAL_I2C_Init+0x2a8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d802      	bhi.n	8008014 <HAL_I2C_Init+0x1d0>
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	3301      	adds	r3, #1
 8008012:	e009      	b.n	8008028 <HAL_I2C_Init+0x1e4>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	4a37      	ldr	r2, [pc, #220]	; (80080fc <HAL_I2C_Init+0x2b8>)
 8008020:	fba2 2303 	umull	r2, r3, r2, r3
 8008024:	099b      	lsrs	r3, r3, #6
 8008026:	3301      	adds	r3, #1
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	430b      	orrs	r3, r1
 800802e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800803a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	492a      	ldr	r1, [pc, #168]	; (80080ec <HAL_I2C_Init+0x2a8>)
 8008044:	428b      	cmp	r3, r1
 8008046:	d819      	bhi.n	800807c <HAL_I2C_Init+0x238>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	1e59      	subs	r1, r3, #1
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	fbb1 f3f3 	udiv	r3, r1, r3
 8008056:	1c59      	adds	r1, r3, #1
 8008058:	f640 73fc 	movw	r3, #4092	; 0xffc
 800805c:	400b      	ands	r3, r1
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00a      	beq.n	8008078 <HAL_I2C_Init+0x234>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1e59      	subs	r1, r3, #1
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008070:	3301      	adds	r3, #1
 8008072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008076:	e066      	b.n	8008146 <HAL_I2C_Init+0x302>
 8008078:	2304      	movs	r3, #4
 800807a:	e064      	b.n	8008146 <HAL_I2C_Init+0x302>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d111      	bne.n	80080a8 <HAL_I2C_Init+0x264>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	1e58      	subs	r0, r3, #1
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6859      	ldr	r1, [r3, #4]
 800808c:	460b      	mov	r3, r1
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	440b      	add	r3, r1
 8008092:	fbb0 f3f3 	udiv	r3, r0, r3
 8008096:	3301      	adds	r3, #1
 8008098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800809c:	2b00      	cmp	r3, #0
 800809e:	bf0c      	ite	eq
 80080a0:	2301      	moveq	r3, #1
 80080a2:	2300      	movne	r3, #0
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	e012      	b.n	80080ce <HAL_I2C_Init+0x28a>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	1e58      	subs	r0, r3, #1
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6859      	ldr	r1, [r3, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	0099      	lsls	r1, r3, #2
 80080b8:	440b      	add	r3, r1
 80080ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80080be:	3301      	adds	r3, #1
 80080c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	bf0c      	ite	eq
 80080c8:	2301      	moveq	r3, #1
 80080ca:	2300      	movne	r3, #0
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d016      	beq.n	8008100 <HAL_I2C_Init+0x2bc>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e037      	b.n	8008146 <HAL_I2C_Init+0x302>
 80080d6:	bf00      	nop
 80080d8:	40005400 	.word	0x40005400
 80080dc:	40005800 	.word	0x40005800
 80080e0:	40005c00 	.word	0x40005c00
 80080e4:	08013888 	.word	0x08013888
 80080e8:	00061a80 	.word	0x00061a80
 80080ec:	000186a0 	.word	0x000186a0
 80080f0:	001e847f 	.word	0x001e847f
 80080f4:	003d08ff 	.word	0x003d08ff
 80080f8:	431bde83 	.word	0x431bde83
 80080fc:	10624dd3 	.word	0x10624dd3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d10e      	bne.n	8008126 <HAL_I2C_Init+0x2e2>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	1e58      	subs	r0, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6859      	ldr	r1, [r3, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	440b      	add	r3, r1
 8008116:	fbb0 f3f3 	udiv	r3, r0, r3
 800811a:	3301      	adds	r3, #1
 800811c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008124:	e00f      	b.n	8008146 <HAL_I2C_Init+0x302>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1e58      	subs	r0, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6859      	ldr	r1, [r3, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	440b      	add	r3, r1
 8008134:	0099      	lsls	r1, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	fbb0 f3f3 	udiv	r3, r0, r3
 800813c:	3301      	adds	r3, #1
 800813e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	6809      	ldr	r1, [r1, #0]
 800814a:	4313      	orrs	r3, r2
 800814c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	69da      	ldr	r2, [r3, #28]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008174:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	6911      	ldr	r1, [r2, #16]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68d2      	ldr	r2, [r2, #12]
 8008180:	4311      	orrs	r1, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	430b      	orrs	r3, r1
 8008188:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0201 	orr.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e035      	b.n	800825a <HAL_I2C_DeInit+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <HAL_I2C_DeInit+0x88>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00e      	beq.n	8008216 <HAL_I2C_DeInit+0x3a>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1a      	ldr	r2, [pc, #104]	; (8008268 <HAL_I2C_DeInit+0x8c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d009      	beq.n	8008216 <HAL_I2C_DeInit+0x3a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a19      	ldr	r2, [pc, #100]	; (800826c <HAL_I2C_DeInit+0x90>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d004      	beq.n	8008216 <HAL_I2C_DeInit+0x3a>
 800820c:	f240 212f 	movw	r1, #559	; 0x22f
 8008210:	4817      	ldr	r0, [pc, #92]	; (8008270 <HAL_I2C_DeInit+0x94>)
 8008212:	f7fb f992 	bl	800353a <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2224      	movs	r2, #36	; 0x24
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7fa f8ac 	bl	800238c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40005400 	.word	0x40005400
 8008268:	40005800 	.word	0x40005800
 800826c:	40005c00 	.word	0x40005c00
 8008270:	08013888 	.word	0x08013888

08008274 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	4608      	mov	r0, r1
 800827e:	4611      	mov	r1, r2
 8008280:	461a      	mov	r2, r3
 8008282:	4603      	mov	r3, r0
 8008284:	817b      	strh	r3, [r7, #10]
 8008286:	460b      	mov	r3, r1
 8008288:	813b      	strh	r3, [r7, #8]
 800828a:	4613      	mov	r3, r2
 800828c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800828e:	f7fc f9f3 	bl	8004678 <HAL_GetTick>
 8008292:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d007      	beq.n	80082aa <HAL_I2C_Mem_Write+0x36>
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	2b10      	cmp	r3, #16
 800829e:	d004      	beq.n	80082aa <HAL_I2C_Mem_Write+0x36>
 80082a0:	f640 11ba 	movw	r1, #2490	; 0x9ba
 80082a4:	4873      	ldr	r0, [pc, #460]	; (8008474 <HAL_I2C_Mem_Write+0x200>)
 80082a6:	f7fb f948 	bl	800353a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	f040 80d9 	bne.w	800846a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	2319      	movs	r3, #25
 80082be:	2201      	movs	r2, #1
 80082c0:	496d      	ldr	r1, [pc, #436]	; (8008478 <HAL_I2C_Mem_Write+0x204>)
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 fc9a 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80082ce:	2302      	movs	r3, #2
 80082d0:	e0cc      	b.n	800846c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_I2C_Mem_Write+0x6c>
 80082dc:	2302      	movs	r3, #2
 80082de:	e0c5      	b.n	800846c <HAL_I2C_Mem_Write+0x1f8>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d007      	beq.n	8008306 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f042 0201 	orr.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008314:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2221      	movs	r2, #33	; 0x21
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2240      	movs	r2, #64	; 0x40
 8008322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a3a      	ldr	r2, [r7, #32]
 8008330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833c:	b29a      	uxth	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4a4d      	ldr	r2, [pc, #308]	; (800847c <HAL_I2C_Mem_Write+0x208>)
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008348:	88f8      	ldrh	r0, [r7, #6]
 800834a:	893a      	ldrh	r2, [r7, #8]
 800834c:	8979      	ldrh	r1, [r7, #10]
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	4603      	mov	r3, r0
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f000 fad1 	bl	8008900 <I2C_RequestMemoryWrite>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d052      	beq.n	800840a <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e081      	b.n	800846c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 fd1b 	bl	8008da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00d      	beq.n	8008394 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	2b04      	cmp	r3, #4
 800837e:	d107      	bne.n	8008390 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800838e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e06b      	b.n	800846c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	f003 0304 	and.w	r3, r3, #4
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d11b      	bne.n	800840a <HAL_I2C_Mem_Write+0x196>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d017      	beq.n	800840a <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	781a      	ldrb	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29a      	uxth	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1aa      	bne.n	8008368 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f000 fd07 	bl	8008e2a <I2C_WaitOnBTFFlagUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00d      	beq.n	800843e <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	2b04      	cmp	r3, #4
 8008428:	d107      	bne.n	800843a <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008438:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e016      	b.n	800846c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800844c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	e000      	b.n	800846c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800846a:	2302      	movs	r3, #2
  }
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	08013888 	.word	0x08013888
 8008478:	00100002 	.word	0x00100002
 800847c:	ffff0000 	.word	0xffff0000

08008480 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08c      	sub	sp, #48	; 0x30
 8008484:	af02      	add	r7, sp, #8
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	4608      	mov	r0, r1
 800848a:	4611      	mov	r1, r2
 800848c:	461a      	mov	r2, r3
 800848e:	4603      	mov	r3, r0
 8008490:	817b      	strh	r3, [r7, #10]
 8008492:	460b      	mov	r3, r1
 8008494:	813b      	strh	r3, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800849a:	f7fc f8ed 	bl	8004678 <HAL_GetTick>
 800849e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80084a0:	88fb      	ldrh	r3, [r7, #6]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d007      	beq.n	80084b6 <HAL_I2C_Mem_Read+0x36>
 80084a6:	88fb      	ldrh	r3, [r7, #6]
 80084a8:	2b10      	cmp	r3, #16
 80084aa:	d004      	beq.n	80084b6 <HAL_I2C_Mem_Read+0x36>
 80084ac:	f640 2135 	movw	r1, #2613	; 0xa35
 80084b0:	4881      	ldr	r0, [pc, #516]	; (80086b8 <HAL_I2C_Mem_Read+0x238>)
 80084b2:	f7fb f842 	bl	800353a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b20      	cmp	r3, #32
 80084c0:	f040 8209 	bne.w	80088d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	2319      	movs	r3, #25
 80084ca:	2201      	movs	r2, #1
 80084cc:	497b      	ldr	r1, [pc, #492]	; (80086bc <HAL_I2C_Mem_Read+0x23c>)
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fb94 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80084da:	2302      	movs	r3, #2
 80084dc:	e1fc      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_I2C_Mem_Read+0x6c>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e1f5      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d007      	beq.n	8008512 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0201 	orr.w	r2, r2, #1
 8008510:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008520:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2222      	movs	r2, #34	; 0x22
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2240      	movs	r2, #64	; 0x40
 800852e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008542:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4a5b      	ldr	r2, [pc, #364]	; (80086c0 <HAL_I2C_Mem_Read+0x240>)
 8008552:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008554:	88f8      	ldrh	r0, [r7, #6]
 8008556:	893a      	ldrh	r2, [r7, #8]
 8008558:	8979      	ldrh	r1, [r7, #10]
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	4603      	mov	r3, r0
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fa61 	bl	8008a2c <I2C_RequestMemoryRead>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e1b1      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008578:	2b00      	cmp	r3, #0
 800857a:	d113      	bne.n	80085a4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800857c:	2300      	movs	r3, #0
 800857e:	623b      	str	r3, [r7, #32]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	623b      	str	r3, [r7, #32]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	623b      	str	r3, [r7, #32]
 8008590:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a0:	601a      	str	r2, [r3, #0]
 80085a2:	e185      	b.n	80088b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d11b      	bne.n	80085e4 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ba:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085bc:	2300      	movs	r3, #0
 80085be:	61fb      	str	r3, [r7, #28]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e0:	601a      	str	r2, [r3, #0]
 80085e2:	e165      	b.n	80088b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d11b      	bne.n	8008624 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085fa:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800860a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800860c:	2300      	movs	r3, #0
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	61bb      	str	r3, [r7, #24]
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	e145      	b.n	80088b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	617b      	str	r3, [r7, #20]
 8008638:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800863a:	e139      	b.n	80088b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008640:	2b03      	cmp	r3, #3
 8008642:	f200 80f2 	bhi.w	800882a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864a:	2b01      	cmp	r3, #1
 800864c:	d123      	bne.n	8008696 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800864e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fc2a 	bl	8008eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e13a      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	691a      	ldr	r2, [r3, #16]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867e:	3b01      	subs	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008694:	e10c      	b.n	80088b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800869a:	2b02      	cmp	r3, #2
 800869c:	d14f      	bne.n	800873e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	2200      	movs	r2, #0
 80086a6:	4907      	ldr	r1, [pc, #28]	; (80086c4 <HAL_I2C_Mem_Read+0x244>)
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 faa7 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d009      	beq.n	80086c8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e10f      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
 80086b8:	08013888 	.word	0x08013888
 80086bc:	00100002 	.word	0x00100002
 80086c0:	ffff0000 	.word	0xffff0000
 80086c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691a      	ldr	r2, [r3, #16]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	691a      	ldr	r2, [r3, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	b2d2      	uxtb	r2, r2
 8008716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008726:	3b01      	subs	r3, #1
 8008728:	b29a      	uxth	r2, r3
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800873c:	e0b8      	b.n	80088b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	2200      	movs	r2, #0
 8008746:	4966      	ldr	r1, [pc, #408]	; (80088e0 <HAL_I2C_Mem_Read+0x460>)
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 fa57 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d001      	beq.n	8008758 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e0bf      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	691a      	ldr	r2, [r3, #16]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008790:	b29b      	uxth	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	2200      	movs	r2, #0
 80087a2:	494f      	ldr	r1, [pc, #316]	; (80088e0 <HAL_I2C_Mem_Read+0x460>)
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fa29 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e091      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	691a      	ldr	r2, [r3, #16]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008828:	e042      	b.n	80088b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800882a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fb3c 	bl	8008eac <I2C_WaitOnRXNEFlagUntilTimeout>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e04c      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800885a:	3b01      	subs	r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008866:	b29b      	uxth	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b04      	cmp	r3, #4
 800887c:	d118      	bne.n	80088b0 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889a:	3b01      	subs	r3, #1
 800889c:	b29a      	uxth	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f47f aec1 	bne.w	800863c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2220      	movs	r2, #32
 80088be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	e000      	b.n	80088d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80088d6:	2302      	movs	r3, #2
  }
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3728      	adds	r7, #40	; 0x28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	00010004 	.word	0x00010004

080088e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f2:	b2db      	uxtb	r3, r3
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af02      	add	r7, sp, #8
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	461a      	mov	r2, r3
 800890e:	4603      	mov	r3, r0
 8008910:	817b      	strh	r3, [r7, #10]
 8008912:	460b      	mov	r3, r1
 8008914:	813b      	strh	r3, [r7, #8]
 8008916:	4613      	mov	r3, r2
 8008918:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008928:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	2200      	movs	r2, #0
 8008932:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f960 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00d      	beq.n	800895e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008950:	d103      	bne.n	800895a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e05f      	b.n	8008a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800895e:	897b      	ldrh	r3, [r7, #10]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	461a      	mov	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800896c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	6a3a      	ldr	r2, [r7, #32]
 8008972:	492d      	ldr	r1, [pc, #180]	; (8008a28 <I2C_RequestMemoryWrite+0x128>)
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 f998 	bl	8008caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e04c      	b.n	8008a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800899a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899c:	6a39      	ldr	r1, [r7, #32]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fa02 	bl	8008da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	d107      	bne.n	80089c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e02b      	b.n	8008a1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089c6:	88fb      	ldrh	r3, [r7, #6]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d105      	bne.n	80089d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089cc:	893b      	ldrh	r3, [r7, #8]
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	611a      	str	r2, [r3, #16]
 80089d6:	e021      	b.n	8008a1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80089d8:	893b      	ldrh	r3, [r7, #8]
 80089da:	0a1b      	lsrs	r3, r3, #8
 80089dc:	b29b      	uxth	r3, r3
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e8:	6a39      	ldr	r1, [r7, #32]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f000 f9dc 	bl	8008da8 <I2C_WaitOnTXEFlagUntilTimeout>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00d      	beq.n	8008a12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d107      	bne.n	8008a0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e005      	b.n	8008a1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a12:	893b      	ldrh	r3, [r7, #8]
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	00010002 	.word	0x00010002

08008a2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	817b      	strh	r3, [r7, #10]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	813b      	strh	r3, [r7, #8]
 8008a42:	4613      	mov	r3, r2
 8008a44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 f8c2 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00d      	beq.n	8008a9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a8c:	d103      	bne.n	8008a96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e0aa      	b.n	8008bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a9a:	897b      	ldrh	r3, [r7, #10]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	6a3a      	ldr	r2, [r7, #32]
 8008aae:	4952      	ldr	r1, [pc, #328]	; (8008bf8 <I2C_RequestMemoryRead+0x1cc>)
 8008ab0:	68f8      	ldr	r0, [r7, #12]
 8008ab2:	f000 f8fa 	bl	8008caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e097      	b.n	8008bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	6a39      	ldr	r1, [r7, #32]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f964 	bl	8008da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00d      	beq.n	8008b02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d107      	bne.n	8008afe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e076      	b.n	8008bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d105      	bne.n	8008b14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b08:	893b      	ldrh	r3, [r7, #8]
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	611a      	str	r2, [r3, #16]
 8008b12:	e021      	b.n	8008b58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b14:	893b      	ldrh	r3, [r7, #8]
 8008b16:	0a1b      	lsrs	r3, r3, #8
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b24:	6a39      	ldr	r1, [r7, #32]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f93e 	bl	8008da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d107      	bne.n	8008b4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e050      	b.n	8008bf0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b4e:	893b      	ldrh	r3, [r7, #8]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5a:	6a39      	ldr	r1, [r7, #32]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f923 	bl	8008da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00d      	beq.n	8008b84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d107      	bne.n	8008b80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e035      	b.n	8008bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f82b 	bl	8008bfc <I2C_WaitOnFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00d      	beq.n	8008bc8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bba:	d103      	bne.n	8008bc4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e013      	b.n	8008bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008bc8:	897b      	ldrh	r3, [r7, #10]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	f043 0301 	orr.w	r3, r3, #1
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	6a3a      	ldr	r2, [r7, #32]
 8008bdc:	4906      	ldr	r1, [pc, #24]	; (8008bf8 <I2C_RequestMemoryRead+0x1cc>)
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f863 	bl	8008caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	00010002 	.word	0x00010002

08008bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c0c:	e025      	b.n	8008c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c14:	d021      	beq.n	8008c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c16:	f7fb fd2f 	bl	8004678 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d302      	bcc.n	8008c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d116      	bne.n	8008c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	f043 0220 	orr.w	r2, r3, #32
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e023      	b.n	8008ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d10d      	bne.n	8008c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	43da      	mvns	r2, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bf0c      	ite	eq
 8008c76:	2301      	moveq	r3, #1
 8008c78:	2300      	movne	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	e00c      	b.n	8008c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	43da      	mvns	r2, r3
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	bf0c      	ite	eq
 8008c92:	2301      	moveq	r3, #1
 8008c94:	2300      	movne	r3, #0
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d0b6      	beq.n	8008c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	60b9      	str	r1, [r7, #8]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cb8:	e051      	b.n	8008d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc8:	d123      	bne.n	8008d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f043 0204 	orr.w	r2, r3, #4
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e046      	b.n	8008da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d18:	d021      	beq.n	8008d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d1a:	f7fb fcad 	bl	8004678 <HAL_GetTick>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d302      	bcc.n	8008d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d116      	bne.n	8008d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2200      	movs	r2, #0
 8008d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4a:	f043 0220 	orr.w	r2, r3, #32
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e020      	b.n	8008da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	0c1b      	lsrs	r3, r3, #16
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d10c      	bne.n	8008d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	43da      	mvns	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4013      	ands	r3, r2
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bf14      	ite	ne
 8008d7a:	2301      	movne	r3, #1
 8008d7c:	2300      	moveq	r3, #0
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	e00b      	b.n	8008d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	43da      	mvns	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	bf14      	ite	ne
 8008d94:	2301      	movne	r3, #1
 8008d96:	2300      	moveq	r3, #0
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d18d      	bne.n	8008cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008db4:	e02d      	b.n	8008e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f8ce 	bl	8008f58 <I2C_IsAcknowledgeFailed>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e02d      	b.n	8008e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dcc:	d021      	beq.n	8008e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dce:	f7fb fc53 	bl	8004678 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d302      	bcc.n	8008de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d116      	bne.n	8008e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2220      	movs	r2, #32
 8008dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	f043 0220 	orr.w	r2, r3, #32
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e007      	b.n	8008e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1c:	2b80      	cmp	r3, #128	; 0x80
 8008e1e:	d1ca      	bne.n	8008db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e36:	e02d      	b.n	8008e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f88d 	bl	8008f58 <I2C_IsAcknowledgeFailed>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e02d      	b.n	8008ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e4e:	d021      	beq.n	8008e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e50:	f7fb fc12 	bl	8004678 <HAL_GetTick>
 8008e54:	4602      	mov	r2, r0
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d302      	bcc.n	8008e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d116      	bne.n	8008e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	f043 0220 	orr.w	r2, r3, #32
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e007      	b.n	8008ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	d1ca      	bne.n	8008e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008eb8:	e042      	b.n	8008f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b10      	cmp	r3, #16
 8008ec6:	d119      	bne.n	8008efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f06f 0210 	mvn.w	r2, #16
 8008ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e029      	b.n	8008f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efc:	f7fb fbbc 	bl	8004678 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d302      	bcc.n	8008f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d116      	bne.n	8008f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2c:	f043 0220 	orr.w	r2, r3, #32
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e007      	b.n	8008f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4a:	2b40      	cmp	r3, #64	; 0x40
 8008f4c:	d1b5      	bne.n	8008eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f6e:	d11b      	bne.n	8008fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2220      	movs	r2, #32
 8008f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	f043 0204 	orr.w	r2, r3, #4
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e000      	b.n	8008faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	370c      	adds	r7, #12
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
	...

08008fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e316      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b0f      	cmp	r3, #15
 8008fd0:	d903      	bls.n	8008fda <HAL_RCC_OscConfig+0x22>
 8008fd2:	21e8      	movs	r1, #232	; 0xe8
 8008fd4:	48a3      	ldr	r0, [pc, #652]	; (8009264 <HAL_RCC_OscConfig+0x2ac>)
 8008fd6:	f7fa fab0 	bl	800353a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 8088 	beq.w	80090f8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <HAL_RCC_OscConfig+0x54>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff8:	d008      	beq.n	800900c <HAL_RCC_OscConfig+0x54>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009002:	d003      	beq.n	800900c <HAL_RCC_OscConfig+0x54>
 8009004:	21ed      	movs	r1, #237	; 0xed
 8009006:	4897      	ldr	r0, [pc, #604]	; (8009264 <HAL_RCC_OscConfig+0x2ac>)
 8009008:	f7fa fa97 	bl	800353a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800900c:	4b96      	ldr	r3, [pc, #600]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f003 030c 	and.w	r3, r3, #12
 8009014:	2b04      	cmp	r3, #4
 8009016:	d00c      	beq.n	8009032 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009018:	4b93      	ldr	r3, [pc, #588]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009020:	2b08      	cmp	r3, #8
 8009022:	d112      	bne.n	800904a <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009024:	4b90      	ldr	r3, [pc, #576]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800902c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009030:	d10b      	bne.n	800904a <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009032:	4b8d      	ldr	r3, [pc, #564]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d05b      	beq.n	80090f6 <HAL_RCC_OscConfig+0x13e>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d157      	bne.n	80090f6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e2d6      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009052:	d106      	bne.n	8009062 <HAL_RCC_OscConfig+0xaa>
 8009054:	4b84      	ldr	r3, [pc, #528]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a83      	ldr	r2, [pc, #524]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800905a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	e01d      	b.n	800909e <HAL_RCC_OscConfig+0xe6>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800906a:	d10c      	bne.n	8009086 <HAL_RCC_OscConfig+0xce>
 800906c:	4b7e      	ldr	r3, [pc, #504]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a7d      	ldr	r2, [pc, #500]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	4b7b      	ldr	r3, [pc, #492]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a7a      	ldr	r2, [pc, #488]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800907e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	e00b      	b.n	800909e <HAL_RCC_OscConfig+0xe6>
 8009086:	4b78      	ldr	r3, [pc, #480]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a77      	ldr	r2, [pc, #476]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800908c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	4b75      	ldr	r3, [pc, #468]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a74      	ldr	r2, [pc, #464]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800909c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d013      	beq.n	80090ce <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090a6:	f7fb fae7 	bl	8004678 <HAL_GetTick>
 80090aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ac:	e008      	b.n	80090c0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090ae:	f7fb fae3 	bl	8004678 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b64      	cmp	r3, #100	; 0x64
 80090ba:	d901      	bls.n	80090c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80090bc:	2303      	movs	r3, #3
 80090be:	e29b      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090c0:	4b69      	ldr	r3, [pc, #420]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d0f0      	beq.n	80090ae <HAL_RCC_OscConfig+0xf6>
 80090cc:	e014      	b.n	80090f8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ce:	f7fb fad3 	bl	8004678 <HAL_GetTick>
 80090d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090d4:	e008      	b.n	80090e8 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090d6:	f7fb facf 	bl	8004678 <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	2b64      	cmp	r3, #100	; 0x64
 80090e2:	d901      	bls.n	80090e8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	e287      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090e8:	4b5f      	ldr	r3, [pc, #380]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1f0      	bne.n	80090d6 <HAL_RCC_OscConfig+0x11e>
 80090f4:	e000      	b.n	80090f8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d079      	beq.n	80091f8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <HAL_RCC_OscConfig+0x166>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d004      	beq.n	800911e <HAL_RCC_OscConfig+0x166>
 8009114:	f240 111f 	movw	r1, #287	; 0x11f
 8009118:	4852      	ldr	r0, [pc, #328]	; (8009264 <HAL_RCC_OscConfig+0x2ac>)
 800911a:	f7fa fa0e 	bl	800353a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b1f      	cmp	r3, #31
 8009124:	d904      	bls.n	8009130 <HAL_RCC_OscConfig+0x178>
 8009126:	f44f 7190 	mov.w	r1, #288	; 0x120
 800912a:	484e      	ldr	r0, [pc, #312]	; (8009264 <HAL_RCC_OscConfig+0x2ac>)
 800912c:	f7fa fa05 	bl	800353a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009130:	4b4d      	ldr	r3, [pc, #308]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 030c 	and.w	r3, r3, #12
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00b      	beq.n	8009154 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800913c:	4b4a      	ldr	r3, [pc, #296]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009144:	2b08      	cmp	r3, #8
 8009146:	d11c      	bne.n	8009182 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009148:	4b47      	ldr	r3, [pc, #284]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d116      	bne.n	8009182 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009154:	4b44      	ldr	r3, [pc, #272]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_RCC_OscConfig+0x1b4>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d001      	beq.n	800916c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e245      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800916c:	4b3e      	ldr	r3, [pc, #248]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	493b      	ldr	r1, [pc, #236]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 800917c:	4313      	orrs	r3, r2
 800917e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009180:	e03a      	b.n	80091f8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d020      	beq.n	80091cc <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800918a:	4b38      	ldr	r3, [pc, #224]	; (800926c <HAL_RCC_OscConfig+0x2b4>)
 800918c:	2201      	movs	r2, #1
 800918e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009190:	f7fb fa72 	bl	8004678 <HAL_GetTick>
 8009194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009198:	f7fb fa6e 	bl	8004678 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e226      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091aa:	4b2f      	ldr	r3, [pc, #188]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f0      	beq.n	8009198 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091b6:	4b2c      	ldr	r3, [pc, #176]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	4928      	ldr	r1, [pc, #160]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	600b      	str	r3, [r1, #0]
 80091ca:	e015      	b.n	80091f8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091cc:	4b27      	ldr	r3, [pc, #156]	; (800926c <HAL_RCC_OscConfig+0x2b4>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d2:	f7fb fa51 	bl	8004678 <HAL_GetTick>
 80091d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091d8:	e008      	b.n	80091ec <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091da:	f7fb fa4d 	bl	8004678 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d901      	bls.n	80091ec <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e205      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091ec:	4b1e      	ldr	r3, [pc, #120]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1f0      	bne.n	80091da <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d046      	beq.n	8009292 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d008      	beq.n	800921e <HAL_RCC_OscConfig+0x266>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d004      	beq.n	800921e <HAL_RCC_OscConfig+0x266>
 8009214:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8009218:	4812      	ldr	r0, [pc, #72]	; (8009264 <HAL_RCC_OscConfig+0x2ac>)
 800921a:	f7fa f98e 	bl	800353a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d016      	beq.n	8009254 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009226:	4b12      	ldr	r3, [pc, #72]	; (8009270 <HAL_RCC_OscConfig+0x2b8>)
 8009228:	2201      	movs	r2, #1
 800922a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800922c:	f7fb fa24 	bl	8004678 <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009234:	f7fb fa20 	bl	8004678 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e1d8      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009246:	4b08      	ldr	r3, [pc, #32]	; (8009268 <HAL_RCC_OscConfig+0x2b0>)
 8009248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f0      	beq.n	8009234 <HAL_RCC_OscConfig+0x27c>
 8009252:	e01e      	b.n	8009292 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <HAL_RCC_OscConfig+0x2b8>)
 8009256:	2200      	movs	r2, #0
 8009258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800925a:	f7fb fa0d 	bl	8004678 <HAL_GetTick>
 800925e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009260:	e011      	b.n	8009286 <HAL_RCC_OscConfig+0x2ce>
 8009262:	bf00      	nop
 8009264:	080138c0 	.word	0x080138c0
 8009268:	40023800 	.word	0x40023800
 800926c:	42470000 	.word	0x42470000
 8009270:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009274:	f7fb fa00 	bl	8004678 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	2b02      	cmp	r3, #2
 8009280:	d901      	bls.n	8009286 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e1b8      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009286:	4b97      	ldr	r3, [pc, #604]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 8009288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1f0      	bne.n	8009274 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	f000 80a8 	beq.w	80093f0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092a0:	2300      	movs	r3, #0
 80092a2:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00c      	beq.n	80092c6 <HAL_RCC_OscConfig+0x30e>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d008      	beq.n	80092c6 <HAL_RCC_OscConfig+0x30e>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	d004      	beq.n	80092c6 <HAL_RCC_OscConfig+0x30e>
 80092bc:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80092c0:	4889      	ldr	r0, [pc, #548]	; (80094e8 <HAL_RCC_OscConfig+0x530>)
 80092c2:	f7fa f93a 	bl	800353a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092c6:	4b87      	ldr	r3, [pc, #540]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80092c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10f      	bne.n	80092f2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092d2:	2300      	movs	r3, #0
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	4b83      	ldr	r3, [pc, #524]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80092d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092da:	4a82      	ldr	r2, [pc, #520]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80092dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092e0:	6413      	str	r3, [r2, #64]	; 0x40
 80092e2:	4b80      	ldr	r3, [pc, #512]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ea:	60bb      	str	r3, [r7, #8]
 80092ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092ee:	2301      	movs	r3, #1
 80092f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092f2:	4b7e      	ldr	r3, [pc, #504]	; (80094ec <HAL_RCC_OscConfig+0x534>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d118      	bne.n	8009330 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092fe:	4b7b      	ldr	r3, [pc, #492]	; (80094ec <HAL_RCC_OscConfig+0x534>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a7a      	ldr	r2, [pc, #488]	; (80094ec <HAL_RCC_OscConfig+0x534>)
 8009304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800930a:	f7fb f9b5 	bl	8004678 <HAL_GetTick>
 800930e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009310:	e008      	b.n	8009324 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009312:	f7fb f9b1 	bl	8004678 <HAL_GetTick>
 8009316:	4602      	mov	r2, r0
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d901      	bls.n	8009324 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e169      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009324:	4b71      	ldr	r3, [pc, #452]	; (80094ec <HAL_RCC_OscConfig+0x534>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f0      	beq.n	8009312 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d106      	bne.n	8009346 <HAL_RCC_OscConfig+0x38e>
 8009338:	4b6a      	ldr	r3, [pc, #424]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933c:	4a69      	ldr	r2, [pc, #420]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 800933e:	f043 0301 	orr.w	r3, r3, #1
 8009342:	6713      	str	r3, [r2, #112]	; 0x70
 8009344:	e01c      	b.n	8009380 <HAL_RCC_OscConfig+0x3c8>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	2b05      	cmp	r3, #5
 800934c:	d10c      	bne.n	8009368 <HAL_RCC_OscConfig+0x3b0>
 800934e:	4b65      	ldr	r3, [pc, #404]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 8009350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009352:	4a64      	ldr	r2, [pc, #400]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 8009354:	f043 0304 	orr.w	r3, r3, #4
 8009358:	6713      	str	r3, [r2, #112]	; 0x70
 800935a:	4b62      	ldr	r3, [pc, #392]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935e:	4a61      	ldr	r2, [pc, #388]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	6713      	str	r3, [r2, #112]	; 0x70
 8009366:	e00b      	b.n	8009380 <HAL_RCC_OscConfig+0x3c8>
 8009368:	4b5e      	ldr	r3, [pc, #376]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	4a5d      	ldr	r2, [pc, #372]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	6713      	str	r3, [r2, #112]	; 0x70
 8009374:	4b5b      	ldr	r3, [pc, #364]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	4a5a      	ldr	r2, [pc, #360]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 800937a:	f023 0304 	bic.w	r3, r3, #4
 800937e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d015      	beq.n	80093b4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009388:	f7fb f976 	bl	8004678 <HAL_GetTick>
 800938c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800938e:	e00a      	b.n	80093a6 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009390:	f7fb f972 	bl	8004678 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	f241 3288 	movw	r2, #5000	; 0x1388
 800939e:	4293      	cmp	r3, r2
 80093a0:	d901      	bls.n	80093a6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e128      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093a6:	4b4f      	ldr	r3, [pc, #316]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80093a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0ee      	beq.n	8009390 <HAL_RCC_OscConfig+0x3d8>
 80093b2:	e014      	b.n	80093de <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093b4:	f7fb f960 	bl	8004678 <HAL_GetTick>
 80093b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093ba:	e00a      	b.n	80093d2 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093bc:	f7fb f95c 	bl	8004678 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d901      	bls.n	80093d2 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e112      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093d2:	4b44      	ldr	r3, [pc, #272]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1ee      	bne.n	80093bc <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d105      	bne.n	80093f0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093e4:	4b3f      	ldr	r3, [pc, #252]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80093e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e8:	4a3e      	ldr	r2, [pc, #248]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 80093ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_RCC_OscConfig+0x45a>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d008      	beq.n	8009412 <HAL_RCC_OscConfig+0x45a>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d004      	beq.n	8009412 <HAL_RCC_OscConfig+0x45a>
 8009408:	f240 11cf 	movw	r1, #463	; 0x1cf
 800940c:	4836      	ldr	r0, [pc, #216]	; (80094e8 <HAL_RCC_OscConfig+0x530>)
 800940e:	f7fa f894 	bl	800353a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 80ed 	beq.w	80095f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800941c:	4b31      	ldr	r3, [pc, #196]	; (80094e4 <HAL_RCC_OscConfig+0x52c>)
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f003 030c 	and.w	r3, r3, #12
 8009424:	2b08      	cmp	r3, #8
 8009426:	f000 80ae 	beq.w	8009586 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	2b02      	cmp	r3, #2
 8009430:	f040 8092 	bne.w	8009558 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d009      	beq.n	8009450 <HAL_RCC_OscConfig+0x498>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009444:	d004      	beq.n	8009450 <HAL_RCC_OscConfig+0x498>
 8009446:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800944a:	4827      	ldr	r0, [pc, #156]	; (80094e8 <HAL_RCC_OscConfig+0x530>)
 800944c:	f7fa f875 	bl	800353a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	2b3f      	cmp	r3, #63	; 0x3f
 8009456:	d904      	bls.n	8009462 <HAL_RCC_OscConfig+0x4aa>
 8009458:	f240 11d9 	movw	r1, #473	; 0x1d9
 800945c:	4822      	ldr	r0, [pc, #136]	; (80094e8 <HAL_RCC_OscConfig+0x530>)
 800945e:	f7fa f86c 	bl	800353a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	2b31      	cmp	r3, #49	; 0x31
 8009468:	d904      	bls.n	8009474 <HAL_RCC_OscConfig+0x4bc>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009472:	d904      	bls.n	800947e <HAL_RCC_OscConfig+0x4c6>
 8009474:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009478:	481b      	ldr	r0, [pc, #108]	; (80094e8 <HAL_RCC_OscConfig+0x530>)
 800947a:	f7fa f85e 	bl	800353a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009482:	2b02      	cmp	r3, #2
 8009484:	d010      	beq.n	80094a8 <HAL_RCC_OscConfig+0x4f0>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	2b04      	cmp	r3, #4
 800948c:	d00c      	beq.n	80094a8 <HAL_RCC_OscConfig+0x4f0>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	2b06      	cmp	r3, #6
 8009494:	d008      	beq.n	80094a8 <HAL_RCC_OscConfig+0x4f0>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949a:	2b08      	cmp	r3, #8
 800949c:	d004      	beq.n	80094a8 <HAL_RCC_OscConfig+0x4f0>
 800949e:	f240 11db 	movw	r1, #475	; 0x1db
 80094a2:	4811      	ldr	r0, [pc, #68]	; (80094e8 <HAL_RCC_OscConfig+0x530>)
 80094a4:	f7fa f849 	bl	800353a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d903      	bls.n	80094b8 <HAL_RCC_OscConfig+0x500>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	2b0f      	cmp	r3, #15
 80094b6:	d904      	bls.n	80094c2 <HAL_RCC_OscConfig+0x50a>
 80094b8:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80094bc:	480a      	ldr	r0, [pc, #40]	; (80094e8 <HAL_RCC_OscConfig+0x530>)
 80094be:	f7fa f83c 	bl	800353a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094c2:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <HAL_RCC_OscConfig+0x538>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094c8:	f7fb f8d6 	bl	8004678 <HAL_GetTick>
 80094cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ce:	e011      	b.n	80094f4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094d0:	f7fb f8d2 	bl	8004678 <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d90a      	bls.n	80094f4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e08a      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
 80094e2:	bf00      	nop
 80094e4:	40023800 	.word	0x40023800
 80094e8:	080138c0 	.word	0x080138c0
 80094ec:	40007000 	.word	0x40007000
 80094f0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094f4:	4b42      	ldr	r3, [pc, #264]	; (8009600 <HAL_RCC_OscConfig+0x648>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1e7      	bne.n	80094d0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	69da      	ldr	r2, [r3, #28]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	019b      	lsls	r3, r3, #6
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	3b01      	subs	r3, #1
 800951a:	041b      	lsls	r3, r3, #16
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009522:	061b      	lsls	r3, r3, #24
 8009524:	4936      	ldr	r1, [pc, #216]	; (8009600 <HAL_RCC_OscConfig+0x648>)
 8009526:	4313      	orrs	r3, r2
 8009528:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800952a:	4b36      	ldr	r3, [pc, #216]	; (8009604 <HAL_RCC_OscConfig+0x64c>)
 800952c:	2201      	movs	r2, #1
 800952e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009530:	f7fb f8a2 	bl	8004678 <HAL_GetTick>
 8009534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009536:	e008      	b.n	800954a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009538:	f7fb f89e 	bl	8004678 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b02      	cmp	r3, #2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e056      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800954a:	4b2d      	ldr	r3, [pc, #180]	; (8009600 <HAL_RCC_OscConfig+0x648>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f0      	beq.n	8009538 <HAL_RCC_OscConfig+0x580>
 8009556:	e04e      	b.n	80095f6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009558:	4b2a      	ldr	r3, [pc, #168]	; (8009604 <HAL_RCC_OscConfig+0x64c>)
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800955e:	f7fb f88b 	bl	8004678 <HAL_GetTick>
 8009562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009564:	e008      	b.n	8009578 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009566:	f7fb f887 	bl	8004678 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d901      	bls.n	8009578 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e03f      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009578:	4b21      	ldr	r3, [pc, #132]	; (8009600 <HAL_RCC_OscConfig+0x648>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f0      	bne.n	8009566 <HAL_RCC_OscConfig+0x5ae>
 8009584:	e037      	b.n	80095f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e032      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009592:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <HAL_RCC_OscConfig+0x648>)
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d028      	beq.n	80095f2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d121      	bne.n	80095f2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d11a      	bne.n	80095f2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095c2:	4013      	ands	r3, r2
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d111      	bne.n	80095f2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d8:	085b      	lsrs	r3, r3, #1
 80095da:	3b01      	subs	r3, #1
 80095dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095de:	429a      	cmp	r2, r3
 80095e0:	d107      	bne.n	80095f2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d001      	beq.n	80095f6 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e000      	b.n	80095f8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40023800 	.word	0x40023800
 8009604:	42470060 	.word	0x42470060

08009608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e174      	b.n	8009906 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_RCC_ClockConfig+0x24>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b0f      	cmp	r3, #15
 800962a:	d904      	bls.n	8009636 <HAL_RCC_ClockConfig+0x2e>
 800962c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8009630:	487b      	ldr	r0, [pc, #492]	; (8009820 <HAL_RCC_ClockConfig+0x218>)
 8009632:	f7f9 ff82 	bl	800353a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d019      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d016      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	2b02      	cmp	r3, #2
 8009646:	d013      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2b03      	cmp	r3, #3
 800964c:	d010      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b04      	cmp	r3, #4
 8009652:	d00d      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2b05      	cmp	r3, #5
 8009658:	d00a      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b06      	cmp	r3, #6
 800965e:	d007      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b07      	cmp	r3, #7
 8009664:	d004      	beq.n	8009670 <HAL_RCC_ClockConfig+0x68>
 8009666:	f240 215d 	movw	r1, #605	; 0x25d
 800966a:	486d      	ldr	r0, [pc, #436]	; (8009820 <HAL_RCC_ClockConfig+0x218>)
 800966c:	f7f9 ff65 	bl	800353a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009670:	4b6c      	ldr	r3, [pc, #432]	; (8009824 <HAL_RCC_ClockConfig+0x21c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d90c      	bls.n	8009698 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967e:	4b69      	ldr	r3, [pc, #420]	; (8009824 <HAL_RCC_ClockConfig+0x21c>)
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009686:	4b67      	ldr	r3, [pc, #412]	; (8009824 <HAL_RCC_ClockConfig+0x21c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0307 	and.w	r3, r3, #7
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d001      	beq.n	8009698 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e136      	b.n	8009906 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0302 	and.w	r3, r3, #2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d049      	beq.n	8009738 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d005      	beq.n	80096bc <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096b0:	4b5d      	ldr	r3, [pc, #372]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	4a5c      	ldr	r2, [pc, #368]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80096b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0308 	and.w	r3, r3, #8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096c8:	4b57      	ldr	r3, [pc, #348]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	4a56      	ldr	r2, [pc, #344]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80096ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d024      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b80      	cmp	r3, #128	; 0x80
 80096e2:	d020      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b90      	cmp	r3, #144	; 0x90
 80096ea:	d01c      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2ba0      	cmp	r3, #160	; 0xa0
 80096f2:	d018      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2bb0      	cmp	r3, #176	; 0xb0
 80096fa:	d014      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	2bc0      	cmp	r3, #192	; 0xc0
 8009702:	d010      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2bd0      	cmp	r3, #208	; 0xd0
 800970a:	d00c      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2be0      	cmp	r3, #224	; 0xe0
 8009712:	d008      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	2bf0      	cmp	r3, #240	; 0xf0
 800971a:	d004      	beq.n	8009726 <HAL_RCC_ClockConfig+0x11e>
 800971c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009720:	483f      	ldr	r0, [pc, #252]	; (8009820 <HAL_RCC_ClockConfig+0x218>)
 8009722:	f7f9 ff0a 	bl	800353a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009726:	4b40      	ldr	r3, [pc, #256]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	493d      	ldr	r1, [pc, #244]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 8009734:	4313      	orrs	r3, r2
 8009736:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d059      	beq.n	80097f8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d010      	beq.n	800976e <HAL_RCC_ClockConfig+0x166>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d00c      	beq.n	800976e <HAL_RCC_ClockConfig+0x166>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d008      	beq.n	800976e <HAL_RCC_ClockConfig+0x166>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d004      	beq.n	800976e <HAL_RCC_ClockConfig+0x166>
 8009764:	f240 2187 	movw	r1, #647	; 0x287
 8009768:	482d      	ldr	r0, [pc, #180]	; (8009820 <HAL_RCC_ClockConfig+0x218>)
 800976a:	f7f9 fee6 	bl	800353a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d107      	bne.n	8009786 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009776:	4b2c      	ldr	r3, [pc, #176]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d119      	bne.n	80097b6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e0bf      	b.n	8009906 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	2b02      	cmp	r3, #2
 800978c:	d003      	beq.n	8009796 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009792:	2b03      	cmp	r3, #3
 8009794:	d107      	bne.n	80097a6 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009796:	4b24      	ldr	r3, [pc, #144]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d109      	bne.n	80097b6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e0af      	b.n	8009906 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097a6:	4b20      	ldr	r3, [pc, #128]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0302 	and.w	r3, r3, #2
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80097b2:	2301      	movs	r3, #1
 80097b4:	e0a7      	b.n	8009906 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097b6:	4b1c      	ldr	r3, [pc, #112]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f023 0203 	bic.w	r2, r3, #3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	4919      	ldr	r1, [pc, #100]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097c8:	f7fa ff56 	bl	8004678 <HAL_GetTick>
 80097cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097ce:	e00a      	b.n	80097e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097d0:	f7fa ff52 	bl	8004678 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f241 3288 	movw	r2, #5000	; 0x1388
 80097de:	4293      	cmp	r3, r2
 80097e0:	d901      	bls.n	80097e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e08f      	b.n	8009906 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097e6:	4b10      	ldr	r3, [pc, #64]	; (8009828 <HAL_RCC_ClockConfig+0x220>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f003 020c 	and.w	r2, r3, #12
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d1eb      	bne.n	80097d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097f8:	4b0a      	ldr	r3, [pc, #40]	; (8009824 <HAL_RCC_ClockConfig+0x21c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0307 	and.w	r3, r3, #7
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	429a      	cmp	r2, r3
 8009804:	d212      	bcs.n	800982c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009806:	4b07      	ldr	r3, [pc, #28]	; (8009824 <HAL_RCC_ClockConfig+0x21c>)
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	b2d2      	uxtb	r2, r2
 800980c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <HAL_RCC_ClockConfig+0x21c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	429a      	cmp	r2, r3
 800981a:	d007      	beq.n	800982c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e072      	b.n	8009906 <HAL_RCC_ClockConfig+0x2fe>
 8009820:	080138c0 	.word	0x080138c0
 8009824:	40023c00 	.word	0x40023c00
 8009828:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b00      	cmp	r3, #0
 8009836:	d025      	beq.n	8009884 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d018      	beq.n	8009872 <HAL_RCC_ClockConfig+0x26a>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009848:	d013      	beq.n	8009872 <HAL_RCC_ClockConfig+0x26a>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009852:	d00e      	beq.n	8009872 <HAL_RCC_ClockConfig+0x26a>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800985c:	d009      	beq.n	8009872 <HAL_RCC_ClockConfig+0x26a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009866:	d004      	beq.n	8009872 <HAL_RCC_ClockConfig+0x26a>
 8009868:	f240 21c5 	movw	r1, #709	; 0x2c5
 800986c:	4828      	ldr	r0, [pc, #160]	; (8009910 <HAL_RCC_ClockConfig+0x308>)
 800986e:	f7f9 fe64 	bl	800353a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009872:	4b28      	ldr	r3, [pc, #160]	; (8009914 <HAL_RCC_ClockConfig+0x30c>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	4925      	ldr	r1, [pc, #148]	; (8009914 <HAL_RCC_ClockConfig+0x30c>)
 8009880:	4313      	orrs	r3, r2
 8009882:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0308 	and.w	r3, r3, #8
 800988c:	2b00      	cmp	r3, #0
 800988e:	d026      	beq.n	80098de <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d018      	beq.n	80098ca <HAL_RCC_ClockConfig+0x2c2>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a0:	d013      	beq.n	80098ca <HAL_RCC_ClockConfig+0x2c2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098aa:	d00e      	beq.n	80098ca <HAL_RCC_ClockConfig+0x2c2>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80098b4:	d009      	beq.n	80098ca <HAL_RCC_ClockConfig+0x2c2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80098be:	d004      	beq.n	80098ca <HAL_RCC_ClockConfig+0x2c2>
 80098c0:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80098c4:	4812      	ldr	r0, [pc, #72]	; (8009910 <HAL_RCC_ClockConfig+0x308>)
 80098c6:	f7f9 fe38 	bl	800353a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098ca:	4b12      	ldr	r3, [pc, #72]	; (8009914 <HAL_RCC_ClockConfig+0x30c>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	490e      	ldr	r1, [pc, #56]	; (8009914 <HAL_RCC_ClockConfig+0x30c>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80098de:	f000 f821 	bl	8009924 <HAL_RCC_GetSysClockFreq>
 80098e2:	4602      	mov	r2, r0
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_RCC_ClockConfig+0x30c>)
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	091b      	lsrs	r3, r3, #4
 80098ea:	f003 030f 	and.w	r3, r3, #15
 80098ee:	490a      	ldr	r1, [pc, #40]	; (8009918 <HAL_RCC_ClockConfig+0x310>)
 80098f0:	5ccb      	ldrb	r3, [r1, r3]
 80098f2:	fa22 f303 	lsr.w	r3, r2, r3
 80098f6:	4a09      	ldr	r2, [pc, #36]	; (800991c <HAL_RCC_ClockConfig+0x314>)
 80098f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <HAL_RCC_ClockConfig+0x318>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fa fe76 	bl	80045f0 <HAL_InitTick>

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	080138c0 	.word	0x080138c0
 8009914:	40023800 	.word	0x40023800
 8009918:	08013fb8 	.word	0x08013fb8
 800991c:	200000d8 	.word	0x200000d8
 8009920:	200000dc 	.word	0x200000dc

08009924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	607b      	str	r3, [r7, #4]
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	2300      	movs	r3, #0
 8009936:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009938:	2300      	movs	r3, #0
 800993a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800993c:	4b67      	ldr	r3, [pc, #412]	; (8009adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f003 030c 	and.w	r3, r3, #12
 8009944:	2b08      	cmp	r3, #8
 8009946:	d00d      	beq.n	8009964 <HAL_RCC_GetSysClockFreq+0x40>
 8009948:	2b08      	cmp	r3, #8
 800994a:	f200 80bd 	bhi.w	8009ac8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <HAL_RCC_GetSysClockFreq+0x34>
 8009952:	2b04      	cmp	r3, #4
 8009954:	d003      	beq.n	800995e <HAL_RCC_GetSysClockFreq+0x3a>
 8009956:	e0b7      	b.n	8009ac8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009958:	4b61      	ldr	r3, [pc, #388]	; (8009ae0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800995a:	60bb      	str	r3, [r7, #8]
       break;
 800995c:	e0b7      	b.n	8009ace <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800995e:	4b61      	ldr	r3, [pc, #388]	; (8009ae4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009960:	60bb      	str	r3, [r7, #8]
      break;
 8009962:	e0b4      	b.n	8009ace <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009964:	4b5d      	ldr	r3, [pc, #372]	; (8009adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800996c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800996e:	4b5b      	ldr	r3, [pc, #364]	; (8009adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d04d      	beq.n	8009a16 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800997a:	4b58      	ldr	r3, [pc, #352]	; (8009adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	099b      	lsrs	r3, r3, #6
 8009980:	461a      	mov	r2, r3
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800998a:	f04f 0100 	mov.w	r1, #0
 800998e:	ea02 0800 	and.w	r8, r2, r0
 8009992:	ea03 0901 	and.w	r9, r3, r1
 8009996:	4640      	mov	r0, r8
 8009998:	4649      	mov	r1, r9
 800999a:	f04f 0200 	mov.w	r2, #0
 800999e:	f04f 0300 	mov.w	r3, #0
 80099a2:	014b      	lsls	r3, r1, #5
 80099a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80099a8:	0142      	lsls	r2, r0, #5
 80099aa:	4610      	mov	r0, r2
 80099ac:	4619      	mov	r1, r3
 80099ae:	ebb0 0008 	subs.w	r0, r0, r8
 80099b2:	eb61 0109 	sbc.w	r1, r1, r9
 80099b6:	f04f 0200 	mov.w	r2, #0
 80099ba:	f04f 0300 	mov.w	r3, #0
 80099be:	018b      	lsls	r3, r1, #6
 80099c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80099c4:	0182      	lsls	r2, r0, #6
 80099c6:	1a12      	subs	r2, r2, r0
 80099c8:	eb63 0301 	sbc.w	r3, r3, r1
 80099cc:	f04f 0000 	mov.w	r0, #0
 80099d0:	f04f 0100 	mov.w	r1, #0
 80099d4:	00d9      	lsls	r1, r3, #3
 80099d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099da:	00d0      	lsls	r0, r2, #3
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	eb12 0208 	adds.w	r2, r2, r8
 80099e4:	eb43 0309 	adc.w	r3, r3, r9
 80099e8:	f04f 0000 	mov.w	r0, #0
 80099ec:	f04f 0100 	mov.w	r1, #0
 80099f0:	0259      	lsls	r1, r3, #9
 80099f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80099f6:	0250      	lsls	r0, r2, #9
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4610      	mov	r0, r2
 80099fe:	4619      	mov	r1, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	461a      	mov	r2, r3
 8009a04:	f04f 0300 	mov.w	r3, #0
 8009a08:	f7f7 f8d6 	bl	8000bb8 <__aeabi_uldivmod>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4613      	mov	r3, r2
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e04a      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a16:	4b31      	ldr	r3, [pc, #196]	; (8009adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	099b      	lsrs	r3, r3, #6
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	f04f 0300 	mov.w	r3, #0
 8009a22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009a26:	f04f 0100 	mov.w	r1, #0
 8009a2a:	ea02 0400 	and.w	r4, r2, r0
 8009a2e:	ea03 0501 	and.w	r5, r3, r1
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f04f 0200 	mov.w	r2, #0
 8009a3a:	f04f 0300 	mov.w	r3, #0
 8009a3e:	014b      	lsls	r3, r1, #5
 8009a40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a44:	0142      	lsls	r2, r0, #5
 8009a46:	4610      	mov	r0, r2
 8009a48:	4619      	mov	r1, r3
 8009a4a:	1b00      	subs	r0, r0, r4
 8009a4c:	eb61 0105 	sbc.w	r1, r1, r5
 8009a50:	f04f 0200 	mov.w	r2, #0
 8009a54:	f04f 0300 	mov.w	r3, #0
 8009a58:	018b      	lsls	r3, r1, #6
 8009a5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009a5e:	0182      	lsls	r2, r0, #6
 8009a60:	1a12      	subs	r2, r2, r0
 8009a62:	eb63 0301 	sbc.w	r3, r3, r1
 8009a66:	f04f 0000 	mov.w	r0, #0
 8009a6a:	f04f 0100 	mov.w	r1, #0
 8009a6e:	00d9      	lsls	r1, r3, #3
 8009a70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a74:	00d0      	lsls	r0, r2, #3
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	1912      	adds	r2, r2, r4
 8009a7c:	eb45 0303 	adc.w	r3, r5, r3
 8009a80:	f04f 0000 	mov.w	r0, #0
 8009a84:	f04f 0100 	mov.w	r1, #0
 8009a88:	0299      	lsls	r1, r3, #10
 8009a8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009a8e:	0290      	lsls	r0, r2, #10
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	4610      	mov	r0, r2
 8009a96:	4619      	mov	r1, r3
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	f04f 0300 	mov.w	r3, #0
 8009aa0:	f7f7 f88a 	bl	8000bb8 <__aeabi_uldivmod>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009aac:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	0c1b      	lsrs	r3, r3, #16
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac4:	60bb      	str	r3, [r7, #8]
      break;
 8009ac6:	e002      	b.n	8009ace <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009aca:	60bb      	str	r3, [r7, #8]
      break;
 8009acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ace:	68bb      	ldr	r3, [r7, #8]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009ada:	bf00      	nop
 8009adc:	40023800 	.word	0x40023800
 8009ae0:	00f42400 	.word	0x00f42400
 8009ae4:	007a1200 	.word	0x007a1200

08009ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009aec:	4b03      	ldr	r3, [pc, #12]	; (8009afc <HAL_RCC_GetHCLKFreq+0x14>)
 8009aee:	681b      	ldr	r3, [r3, #0]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	200000d8 	.word	0x200000d8

08009b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b04:	f7ff fff0 	bl	8009ae8 <HAL_RCC_GetHCLKFreq>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4b05      	ldr	r3, [pc, #20]	; (8009b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	0a9b      	lsrs	r3, r3, #10
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	4903      	ldr	r1, [pc, #12]	; (8009b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b16:	5ccb      	ldrb	r3, [r1, r3]
 8009b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	40023800 	.word	0x40023800
 8009b24:	08013fc8 	.word	0x08013fc8

08009b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e18c      	b.n	8009e54 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a75      	ldr	r2, [pc, #468]	; (8009d14 <HAL_SPI_Init+0x1ec>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d018      	beq.n	8009b76 <HAL_SPI_Init+0x4e>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a73      	ldr	r2, [pc, #460]	; (8009d18 <HAL_SPI_Init+0x1f0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d013      	beq.n	8009b76 <HAL_SPI_Init+0x4e>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a72      	ldr	r2, [pc, #456]	; (8009d1c <HAL_SPI_Init+0x1f4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d00e      	beq.n	8009b76 <HAL_SPI_Init+0x4e>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a70      	ldr	r2, [pc, #448]	; (8009d20 <HAL_SPI_Init+0x1f8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d009      	beq.n	8009b76 <HAL_SPI_Init+0x4e>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a6f      	ldr	r2, [pc, #444]	; (8009d24 <HAL_SPI_Init+0x1fc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d004      	beq.n	8009b76 <HAL_SPI_Init+0x4e>
 8009b6c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009b70:	486d      	ldr	r0, [pc, #436]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009b72:	f7f9 fce2 	bl	800353a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <HAL_SPI_Init+0x6a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b86:	d004      	beq.n	8009b92 <HAL_SPI_Init+0x6a>
 8009b88:	f240 1143 	movw	r1, #323	; 0x143
 8009b8c:	4866      	ldr	r0, [pc, #408]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009b8e:	f7f9 fcd4 	bl	800353a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00e      	beq.n	8009bb8 <HAL_SPI_Init+0x90>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba2:	d009      	beq.n	8009bb8 <HAL_SPI_Init+0x90>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bac:	d004      	beq.n	8009bb8 <HAL_SPI_Init+0x90>
 8009bae:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009bb2:	485d      	ldr	r0, [pc, #372]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009bb4:	f7f9 fcc1 	bl	800353a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bc0:	d008      	beq.n	8009bd4 <HAL_SPI_Init+0xac>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d004      	beq.n	8009bd4 <HAL_SPI_Init+0xac>
 8009bca:	f240 1145 	movw	r1, #325	; 0x145
 8009bce:	4856      	ldr	r0, [pc, #344]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009bd0:	f7f9 fcb3 	bl	800353a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bdc:	d00d      	beq.n	8009bfa <HAL_SPI_Init+0xd2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d009      	beq.n	8009bfa <HAL_SPI_Init+0xd2>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bee:	d004      	beq.n	8009bfa <HAL_SPI_Init+0xd2>
 8009bf0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8009bf4:	484c      	ldr	r0, [pc, #304]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009bf6:	f7f9 fca0 	bl	800353a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d020      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	2b08      	cmp	r3, #8
 8009c08:	d01c      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	2b10      	cmp	r3, #16
 8009c10:	d018      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	2b18      	cmp	r3, #24
 8009c18:	d014      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d010      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	2b28      	cmp	r3, #40	; 0x28
 8009c28:	d00c      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	2b30      	cmp	r3, #48	; 0x30
 8009c30:	d008      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	2b38      	cmp	r3, #56	; 0x38
 8009c38:	d004      	beq.n	8009c44 <HAL_SPI_Init+0x11c>
 8009c3a:	f240 1147 	movw	r1, #327	; 0x147
 8009c3e:	483a      	ldr	r0, [pc, #232]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009c40:	f7f9 fc7b 	bl	800353a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d008      	beq.n	8009c5e <HAL_SPI_Init+0x136>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	2b80      	cmp	r3, #128	; 0x80
 8009c52:	d004      	beq.n	8009c5e <HAL_SPI_Init+0x136>
 8009c54:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009c58:	4833      	ldr	r0, [pc, #204]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009c5a:	f7f9 fc6e 	bl	800353a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d008      	beq.n	8009c78 <HAL_SPI_Init+0x150>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2b10      	cmp	r3, #16
 8009c6c:	d004      	beq.n	8009c78 <HAL_SPI_Init+0x150>
 8009c6e:	f240 1149 	movw	r1, #329	; 0x149
 8009c72:	482d      	ldr	r0, [pc, #180]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009c74:	f7f9 fc61 	bl	800353a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d155      	bne.n	8009d2c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d008      	beq.n	8009c9a <HAL_SPI_Init+0x172>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d004      	beq.n	8009c9a <HAL_SPI_Init+0x172>
 8009c90:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8009c94:	4824      	ldr	r0, [pc, #144]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009c96:	f7f9 fc50 	bl	800353a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d008      	beq.n	8009cb4 <HAL_SPI_Init+0x18c>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d004      	beq.n	8009cb4 <HAL_SPI_Init+0x18c>
 8009caa:	f240 114d 	movw	r1, #333	; 0x14d
 8009cae:	481e      	ldr	r0, [pc, #120]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009cb0:	f7f9 fc43 	bl	800353a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cbc:	d125      	bne.n	8009d0a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d05d      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	2b08      	cmp	r3, #8
 8009ccc:	d059      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	2b10      	cmp	r3, #16
 8009cd4:	d055      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	2b18      	cmp	r3, #24
 8009cdc:	d051      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	d04d      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	2b28      	cmp	r3, #40	; 0x28
 8009cec:	d049      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	2b30      	cmp	r3, #48	; 0x30
 8009cf4:	d045      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	2b38      	cmp	r3, #56	; 0x38
 8009cfc:	d041      	beq.n	8009d82 <HAL_SPI_Init+0x25a>
 8009cfe:	f240 1151 	movw	r1, #337	; 0x151
 8009d02:	4809      	ldr	r0, [pc, #36]	; (8009d28 <HAL_SPI_Init+0x200>)
 8009d04:	f7f9 fc19 	bl	800353a <assert_failed>
 8009d08:	e03b      	b.n	8009d82 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	61da      	str	r2, [r3, #28]
 8009d10:	e037      	b.n	8009d82 <HAL_SPI_Init+0x25a>
 8009d12:	bf00      	nop
 8009d14:	40013000 	.word	0x40013000
 8009d18:	40003800 	.word	0x40003800
 8009d1c:	40003c00 	.word	0x40003c00
 8009d20:	40013400 	.word	0x40013400
 8009d24:	40015000 	.word	0x40015000
 8009d28:	080138f8 	.word	0x080138f8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d020      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d01c      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d018      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	2b18      	cmp	r3, #24
 8009d4a:	d014      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	2b20      	cmp	r3, #32
 8009d52:	d010      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	2b28      	cmp	r3, #40	; 0x28
 8009d5a:	d00c      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	2b30      	cmp	r3, #48	; 0x30
 8009d62:	d008      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	2b38      	cmp	r3, #56	; 0x38
 8009d6a:	d004      	beq.n	8009d76 <HAL_SPI_Init+0x24e>
 8009d6c:	f240 115b 	movw	r1, #347	; 0x15b
 8009d70:	483a      	ldr	r0, [pc, #232]	; (8009e5c <HAL_SPI_Init+0x334>)
 8009d72:	f7f9 fbe2 	bl	800353a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d106      	bne.n	8009da2 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7f9 fc43 	bl	8003628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2202      	movs	r2, #2
 8009da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009db8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dd4:	431a      	orrs	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	431a      	orrs	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e06:	ea42 0103 	orr.w	r1, r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	0c1b      	lsrs	r3, r3, #16
 8009e20:	f003 0104 	and.w	r1, r3, #4
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	f003 0210 	and.w	r2, r3, #16
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	69da      	ldr	r2, [r3, #28]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009e52:	2300      	movs	r3, #0
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	080138f8 	.word	0x080138f8

08009e60 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e038      	b.n	8009ee4 <HAL_SPI_DeInit+0x84>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1d      	ldr	r2, [pc, #116]	; (8009eec <HAL_SPI_DeInit+0x8c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d018      	beq.n	8009eae <HAL_SPI_DeInit+0x4e>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1b      	ldr	r2, [pc, #108]	; (8009ef0 <HAL_SPI_DeInit+0x90>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d013      	beq.n	8009eae <HAL_SPI_DeInit+0x4e>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a1a      	ldr	r2, [pc, #104]	; (8009ef4 <HAL_SPI_DeInit+0x94>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d00e      	beq.n	8009eae <HAL_SPI_DeInit+0x4e>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a18      	ldr	r2, [pc, #96]	; (8009ef8 <HAL_SPI_DeInit+0x98>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d009      	beq.n	8009eae <HAL_SPI_DeInit+0x4e>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a17      	ldr	r2, [pc, #92]	; (8009efc <HAL_SPI_DeInit+0x9c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d004      	beq.n	8009eae <HAL_SPI_DeInit+0x4e>
 8009ea4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009ea8:	4815      	ldr	r0, [pc, #84]	; (8009f00 <HAL_SPI_DeInit+0xa0>)
 8009eaa:	f7f9 fb46 	bl	800353a <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2202      	movs	r2, #2
 8009eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ec4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7f9 fc2c 	bl	8003724 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	40013000 	.word	0x40013000
 8009ef0:	40003800 	.word	0x40003800
 8009ef4:	40003c00 	.word	0x40003c00
 8009ef8:	40013400 	.word	0x40013400
 8009efc:	40015000 	.word	0x40015000
 8009f00:	080138f8 	.word	0x080138f8

08009f04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	603b      	str	r3, [r7, #0]
 8009f10:	4613      	mov	r3, r2
 8009f12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d009      	beq.n	8009f34 <HAL_SPI_Transmit+0x30>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f28:	d004      	beq.n	8009f34 <HAL_SPI_Transmit+0x30>
 8009f2a:	f240 310a 	movw	r1, #778	; 0x30a
 8009f2e:	4893      	ldr	r0, [pc, #588]	; (800a17c <HAL_SPI_Transmit+0x278>)
 8009f30:	f7f9 fb03 	bl	800353a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d101      	bne.n	8009f42 <HAL_SPI_Transmit+0x3e>
 8009f3e:	2302      	movs	r3, #2
 8009f40:	e128      	b.n	800a194 <HAL_SPI_Transmit+0x290>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f4a:	f7fa fb95 	bl	8004678 <HAL_GetTick>
 8009f4e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009f50:	88fb      	ldrh	r3, [r7, #6]
 8009f52:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d002      	beq.n	8009f66 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8009f60:	2302      	movs	r3, #2
 8009f62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f64:	e10d      	b.n	800a182 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <HAL_SPI_Transmit+0x6e>
 8009f6c:	88fb      	ldrh	r3, [r7, #6]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d102      	bne.n	8009f78 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f76:	e104      	b.n	800a182 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2203      	movs	r2, #3
 8009f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	88fa      	ldrh	r2, [r7, #6]
 8009f90:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	88fa      	ldrh	r2, [r7, #6]
 8009f96:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fbe:	d10f      	bne.n	8009fe0 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fea:	2b40      	cmp	r3, #64	; 0x40
 8009fec:	d007      	beq.n	8009ffe <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ffc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a006:	d14b      	bne.n	800a0a0 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <HAL_SPI_Transmit+0x112>
 800a010:	8afb      	ldrh	r3, [r7, #22]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d13e      	bne.n	800a094 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01a:	881a      	ldrh	r2, [r3, #0]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a026:	1c9a      	adds	r2, r3, #2
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a030:	b29b      	uxth	r3, r3
 800a032:	3b01      	subs	r3, #1
 800a034:	b29a      	uxth	r2, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a03a:	e02b      	b.n	800a094 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 0302 	and.w	r3, r3, #2
 800a046:	2b02      	cmp	r3, #2
 800a048:	d112      	bne.n	800a070 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04e:	881a      	ldrh	r2, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	1c9a      	adds	r2, r3, #2
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a064:	b29b      	uxth	r3, r3
 800a066:	3b01      	subs	r3, #1
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a06e:	e011      	b.n	800a094 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a070:	f7fa fb02 	bl	8004678 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d803      	bhi.n	800a088 <HAL_SPI_Transmit+0x184>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a086:	d102      	bne.n	800a08e <HAL_SPI_Transmit+0x18a>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a092:	e076      	b.n	800a182 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a098:	b29b      	uxth	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1ce      	bne.n	800a03c <HAL_SPI_Transmit+0x138>
 800a09e:	e04c      	b.n	800a13a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <HAL_SPI_Transmit+0x1aa>
 800a0a8:	8afb      	ldrh	r3, [r7, #22]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d140      	bne.n	800a130 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	330c      	adds	r3, #12
 800a0b8:	7812      	ldrb	r2, [r2, #0]
 800a0ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c0:	1c5a      	adds	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	3b01      	subs	r3, #1
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a0d4:	e02c      	b.n	800a130 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d113      	bne.n	800a10c <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	330c      	adds	r3, #12
 800a0ee:	7812      	ldrb	r2, [r2, #0]
 800a0f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a100:	b29b      	uxth	r3, r3
 800a102:	3b01      	subs	r3, #1
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	86da      	strh	r2, [r3, #54]	; 0x36
 800a10a:	e011      	b.n	800a130 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a10c:	f7fa fab4 	bl	8004678 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d803      	bhi.n	800a124 <HAL_SPI_Transmit+0x220>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a122:	d102      	bne.n	800a12a <HAL_SPI_Transmit+0x226>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d102      	bne.n	800a130 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a12e:	e028      	b.n	800a182 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a134:	b29b      	uxth	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1cd      	bne.n	800a0d6 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a13a:	69ba      	ldr	r2, [r7, #24]
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fa70 	bl	800a624 <SPI_EndRxTxTransaction>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2220      	movs	r2, #32
 800a14e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a158:	2300      	movs	r3, #0
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	613b      	str	r3, [r7, #16]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	613b      	str	r3, [r7, #16]
 800a16c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a172:	2b00      	cmp	r3, #0
 800a174:	d004      	beq.n	800a180 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	77fb      	strb	r3, [r7, #31]
 800a17a:	e002      	b.n	800a182 <HAL_SPI_Transmit+0x27e>
 800a17c:	080138f8 	.word	0x080138f8
  }

error:
 800a180:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a192:	7ffb      	ldrb	r3, [r7, #31]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08c      	sub	sp, #48	; 0x30
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d004      	beq.n	800a1c6 <HAL_SPI_TransmitReceive+0x2a>
 800a1bc:	f240 417e 	movw	r1, #1150	; 0x47e
 800a1c0:	4884      	ldr	r0, [pc, #528]	; (800a3d4 <HAL_SPI_TransmitReceive+0x238>)
 800a1c2:	f7f9 f9ba 	bl	800353a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_SPI_TransmitReceive+0x38>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e18d      	b.n	800a4f0 <HAL_SPI_TransmitReceive+0x354>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1dc:	f7fa fa4c 	bl	8004678 <HAL_GetTick>
 800a1e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a1f2:	887b      	ldrh	r3, [r7, #2]
 800a1f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d00f      	beq.n	800a21e <HAL_SPI_TransmitReceive+0x82>
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a204:	d107      	bne.n	800a216 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d103      	bne.n	800a216 <HAL_SPI_TransmitReceive+0x7a>
 800a20e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a212:	2b04      	cmp	r3, #4
 800a214:	d003      	beq.n	800a21e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800a216:	2302      	movs	r3, #2
 800a218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a21c:	e15e      	b.n	800a4dc <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d005      	beq.n	800a230 <HAL_SPI_TransmitReceive+0x94>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <HAL_SPI_TransmitReceive+0x94>
 800a22a:	887b      	ldrh	r3, [r7, #2]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d103      	bne.n	800a238 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a236:	e151      	b.n	800a4dc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b04      	cmp	r3, #4
 800a242:	d003      	beq.n	800a24c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2205      	movs	r2, #5
 800a248:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	887a      	ldrh	r2, [r7, #2]
 800a25c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	887a      	ldrh	r2, [r7, #2]
 800a262:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	887a      	ldrh	r2, [r7, #2]
 800a26e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	887a      	ldrh	r2, [r7, #2]
 800a274:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	d007      	beq.n	800a2a0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a29e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2a8:	d178      	bne.n	800a39c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_SPI_TransmitReceive+0x11c>
 800a2b2:	8b7b      	ldrh	r3, [r7, #26]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d166      	bne.n	800a386 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2bc:	881a      	ldrh	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c8:	1c9a      	adds	r2, r3, #2
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2dc:	e053      	b.n	800a386 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d11b      	bne.n	800a324 <HAL_SPI_TransmitReceive+0x188>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d016      	beq.n	800a324 <HAL_SPI_TransmitReceive+0x188>
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d113      	bne.n	800a324 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a300:	881a      	ldrh	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30c:	1c9a      	adds	r2, r3, #2
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a316:	b29b      	uxth	r3, r3
 800a318:	3b01      	subs	r3, #1
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d119      	bne.n	800a366 <HAL_SPI_TransmitReceive+0x1ca>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a336:	b29b      	uxth	r3, r3
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d014      	beq.n	800a366 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68da      	ldr	r2, [r3, #12]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	b292      	uxth	r2, r2
 800a348:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34e:	1c9a      	adds	r2, r3, #2
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a358:	b29b      	uxth	r3, r3
 800a35a:	3b01      	subs	r3, #1
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a362:	2301      	movs	r3, #1
 800a364:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a366:	f7fa f987 	bl	8004678 <HAL_GetTick>
 800a36a:	4602      	mov	r2, r0
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a372:	429a      	cmp	r2, r3
 800a374:	d807      	bhi.n	800a386 <HAL_SPI_TransmitReceive+0x1ea>
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a37c:	d003      	beq.n	800a386 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a384:	e0aa      	b.n	800a4dc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1a6      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x142>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a394:	b29b      	uxth	r3, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1a1      	bne.n	800a2de <HAL_SPI_TransmitReceive+0x142>
 800a39a:	e07f      	b.n	800a49c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <HAL_SPI_TransmitReceive+0x20e>
 800a3a4:	8b7b      	ldrh	r3, [r7, #26]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d16e      	bne.n	800a488 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	330c      	adds	r3, #12
 800a3b4:	7812      	ldrb	r2, [r2, #0]
 800a3b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3bc:	1c5a      	adds	r2, r3, #1
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3d0:	e05a      	b.n	800a488 <HAL_SPI_TransmitReceive+0x2ec>
 800a3d2:	bf00      	nop
 800a3d4:	080138f8 	.word	0x080138f8
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d11c      	bne.n	800a420 <HAL_SPI_TransmitReceive+0x284>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d017      	beq.n	800a420 <HAL_SPI_TransmitReceive+0x284>
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d114      	bne.n	800a420 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	330c      	adds	r3, #12
 800a400:	7812      	ldrb	r2, [r2, #0]
 800a402:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d119      	bne.n	800a462 <HAL_SPI_TransmitReceive+0x2c6>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d014      	beq.n	800a462 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68da      	ldr	r2, [r3, #12]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a442:	b2d2      	uxtb	r2, r2
 800a444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a454:	b29b      	uxth	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	b29a      	uxth	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a45e:	2301      	movs	r3, #1
 800a460:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a462:	f7fa f909 	bl	8004678 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a46e:	429a      	cmp	r2, r3
 800a470:	d803      	bhi.n	800a47a <HAL_SPI_TransmitReceive+0x2de>
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a478:	d102      	bne.n	800a480 <HAL_SPI_TransmitReceive+0x2e4>
 800a47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d103      	bne.n	800a488 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a486:	e029      	b.n	800a4dc <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1a2      	bne.n	800a3d8 <HAL_SPI_TransmitReceive+0x23c>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a496:	b29b      	uxth	r3, r3
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d19d      	bne.n	800a3d8 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f8bf 	bl	800a624 <SPI_EndRxTxTransaction>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d006      	beq.n	800a4ba <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a4b8:	e010      	b.n	800a4dc <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10b      	bne.n	800a4da <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	e000      	b.n	800a4dc <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800a4da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a4ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3730      	adds	r7, #48	; 0x30
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a506:	b2db      	uxtb	r3, r3
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	603b      	str	r3, [r7, #0]
 800a520:	4613      	mov	r3, r2
 800a522:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a524:	f7fa f8a8 	bl	8004678 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	1a9b      	subs	r3, r3, r2
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4413      	add	r3, r2
 800a532:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a534:	f7fa f8a0 	bl	8004678 <HAL_GetTick>
 800a538:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a53a:	4b39      	ldr	r3, [pc, #228]	; (800a620 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	015b      	lsls	r3, r3, #5
 800a540:	0d1b      	lsrs	r3, r3, #20
 800a542:	69fa      	ldr	r2, [r7, #28]
 800a544:	fb02 f303 	mul.w	r3, r2, r3
 800a548:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a54a:	e054      	b.n	800a5f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a552:	d050      	beq.n	800a5f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a554:	f7fa f890 	bl	8004678 <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	429a      	cmp	r2, r3
 800a562:	d902      	bls.n	800a56a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d13d      	bne.n	800a5e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a578:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a582:	d111      	bne.n	800a5a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a58c:	d004      	beq.n	800a598 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a596:	d107      	bne.n	800a5a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5b0:	d10f      	bne.n	800a5d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e017      	b.n	800a616 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689a      	ldr	r2, [r3, #8]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4013      	ands	r3, r2
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	429a      	cmp	r2, r3
 800a604:	bf0c      	ite	eq
 800a606:	2301      	moveq	r3, #1
 800a608:	2300      	movne	r3, #0
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	461a      	mov	r2, r3
 800a60e:	79fb      	ldrb	r3, [r7, #7]
 800a610:	429a      	cmp	r2, r3
 800a612:	d19b      	bne.n	800a54c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3720      	adds	r7, #32
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	200000d8 	.word	0x200000d8

0800a624 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af02      	add	r7, sp, #8
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a630:	4b1b      	ldr	r3, [pc, #108]	; (800a6a0 <SPI_EndRxTxTransaction+0x7c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a1b      	ldr	r2, [pc, #108]	; (800a6a4 <SPI_EndRxTxTransaction+0x80>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	0d5b      	lsrs	r3, r3, #21
 800a63c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a640:	fb02 f303 	mul.w	r3, r2, r3
 800a644:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a64e:	d112      	bne.n	800a676 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	2200      	movs	r2, #0
 800a658:	2180      	movs	r1, #128	; 0x80
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7ff ff5a 	bl	800a514 <SPI_WaitFlagStateUntilTimeout>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d016      	beq.n	800a694 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66a:	f043 0220 	orr.w	r2, r3, #32
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a672:	2303      	movs	r3, #3
 800a674:	e00f      	b.n	800a696 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	3b01      	subs	r3, #1
 800a680:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a68c:	2b80      	cmp	r3, #128	; 0x80
 800a68e:	d0f2      	beq.n	800a676 <SPI_EndRxTxTransaction+0x52>
 800a690:	e000      	b.n	800a694 <SPI_EndRxTxTransaction+0x70>
        break;
 800a692:	bf00      	nop
  }

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	200000d8 	.word	0x200000d8
 800a6a4:	165e9f81 	.word	0x165e9f81

0800a6a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d101      	bne.n	800a6ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e0a7      	b.n	800a80a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a55      	ldr	r2, [pc, #340]	; (800a814 <HAL_TIM_Base_Init+0x16c>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d027      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6cc:	d022      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a51      	ldr	r2, [pc, #324]	; (800a818 <HAL_TIM_Base_Init+0x170>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d01d      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a4f      	ldr	r2, [pc, #316]	; (800a81c <HAL_TIM_Base_Init+0x174>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d018      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a4e      	ldr	r2, [pc, #312]	; (800a820 <HAL_TIM_Base_Init+0x178>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d013      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a4c      	ldr	r2, [pc, #304]	; (800a824 <HAL_TIM_Base_Init+0x17c>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00e      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a4b      	ldr	r2, [pc, #300]	; (800a828 <HAL_TIM_Base_Init+0x180>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d009      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a49      	ldr	r2, [pc, #292]	; (800a82c <HAL_TIM_Base_Init+0x184>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d004      	beq.n	800a714 <HAL_TIM_Base_Init+0x6c>
 800a70a:	f240 1113 	movw	r1, #275	; 0x113
 800a70e:	4848      	ldr	r0, [pc, #288]	; (800a830 <HAL_TIM_Base_Init+0x188>)
 800a710:	f7f8 ff13 	bl	800353a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d014      	beq.n	800a746 <HAL_TIM_Base_Init+0x9e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	2b10      	cmp	r3, #16
 800a722:	d010      	beq.n	800a746 <HAL_TIM_Base_Init+0x9e>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	2b20      	cmp	r3, #32
 800a72a:	d00c      	beq.n	800a746 <HAL_TIM_Base_Init+0x9e>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	2b40      	cmp	r3, #64	; 0x40
 800a732:	d008      	beq.n	800a746 <HAL_TIM_Base_Init+0x9e>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	2b60      	cmp	r3, #96	; 0x60
 800a73a:	d004      	beq.n	800a746 <HAL_TIM_Base_Init+0x9e>
 800a73c:	f44f 718a 	mov.w	r1, #276	; 0x114
 800a740:	483b      	ldr	r0, [pc, #236]	; (800a830 <HAL_TIM_Base_Init+0x188>)
 800a742:	f7f8 fefa 	bl	800353a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00e      	beq.n	800a76c <HAL_TIM_Base_Init+0xc4>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a756:	d009      	beq.n	800a76c <HAL_TIM_Base_Init+0xc4>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a760:	d004      	beq.n	800a76c <HAL_TIM_Base_Init+0xc4>
 800a762:	f240 1115 	movw	r1, #277	; 0x115
 800a766:	4832      	ldr	r0, [pc, #200]	; (800a830 <HAL_TIM_Base_Init+0x188>)
 800a768:	f7f8 fee7 	bl	800353a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d008      	beq.n	800a786 <HAL_TIM_Base_Init+0xde>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	699b      	ldr	r3, [r3, #24]
 800a778:	2b80      	cmp	r3, #128	; 0x80
 800a77a:	d004      	beq.n	800a786 <HAL_TIM_Base_Init+0xde>
 800a77c:	f44f 718b 	mov.w	r1, #278	; 0x116
 800a780:	482b      	ldr	r0, [pc, #172]	; (800a830 <HAL_TIM_Base_Init+0x188>)
 800a782:	f7f8 feda 	bl	800353a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d106      	bne.n	800a7a0 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7f9 fe4e 	bl	800443c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2202      	movs	r2, #2
 800a7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f001 fa2c 	bl	800bc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	40010000 	.word	0x40010000
 800a818:	40000400 	.word	0x40000400
 800a81c:	40000800 	.word	0x40000800
 800a820:	40000c00 	.word	0x40000c00
 800a824:	40014000 	.word	0x40014000
 800a828:	40014400 	.word	0x40014400
 800a82c:	40014800 	.word	0x40014800
 800a830:	08013930 	.word	0x08013930

0800a834 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d101      	bne.n	800a846 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e0a7      	b.n	800a996 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a55      	ldr	r2, [pc, #340]	; (800a9a0 <HAL_TIM_PWM_Init+0x16c>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d027      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a858:	d022      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a51      	ldr	r2, [pc, #324]	; (800a9a4 <HAL_TIM_PWM_Init+0x170>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d01d      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a4f      	ldr	r2, [pc, #316]	; (800a9a8 <HAL_TIM_PWM_Init+0x174>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d018      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a4e      	ldr	r2, [pc, #312]	; (800a9ac <HAL_TIM_PWM_Init+0x178>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d013      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a4c      	ldr	r2, [pc, #304]	; (800a9b0 <HAL_TIM_PWM_Init+0x17c>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d00e      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a4b      	ldr	r2, [pc, #300]	; (800a9b4 <HAL_TIM_PWM_Init+0x180>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d009      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a49      	ldr	r2, [pc, #292]	; (800a9b8 <HAL_TIM_PWM_Init+0x184>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d004      	beq.n	800a8a0 <HAL_TIM_PWM_Init+0x6c>
 800a896:	f240 5129 	movw	r1, #1321	; 0x529
 800a89a:	4848      	ldr	r0, [pc, #288]	; (800a9bc <HAL_TIM_PWM_Init+0x188>)
 800a89c:	f7f8 fe4d 	bl	800353a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d014      	beq.n	800a8d2 <HAL_TIM_PWM_Init+0x9e>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	2b10      	cmp	r3, #16
 800a8ae:	d010      	beq.n	800a8d2 <HAL_TIM_PWM_Init+0x9e>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	2b20      	cmp	r3, #32
 800a8b6:	d00c      	beq.n	800a8d2 <HAL_TIM_PWM_Init+0x9e>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	2b40      	cmp	r3, #64	; 0x40
 800a8be:	d008      	beq.n	800a8d2 <HAL_TIM_PWM_Init+0x9e>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	2b60      	cmp	r3, #96	; 0x60
 800a8c6:	d004      	beq.n	800a8d2 <HAL_TIM_PWM_Init+0x9e>
 800a8c8:	f240 512a 	movw	r1, #1322	; 0x52a
 800a8cc:	483b      	ldr	r0, [pc, #236]	; (800a9bc <HAL_TIM_PWM_Init+0x188>)
 800a8ce:	f7f8 fe34 	bl	800353a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00e      	beq.n	800a8f8 <HAL_TIM_PWM_Init+0xc4>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e2:	d009      	beq.n	800a8f8 <HAL_TIM_PWM_Init+0xc4>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	691b      	ldr	r3, [r3, #16]
 800a8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ec:	d004      	beq.n	800a8f8 <HAL_TIM_PWM_Init+0xc4>
 800a8ee:	f240 512b 	movw	r1, #1323	; 0x52b
 800a8f2:	4832      	ldr	r0, [pc, #200]	; (800a9bc <HAL_TIM_PWM_Init+0x188>)
 800a8f4:	f7f8 fe21 	bl	800353a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	699b      	ldr	r3, [r3, #24]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d008      	beq.n	800a912 <HAL_TIM_PWM_Init+0xde>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	2b80      	cmp	r3, #128	; 0x80
 800a906:	d004      	beq.n	800a912 <HAL_TIM_PWM_Init+0xde>
 800a908:	f240 512c 	movw	r1, #1324	; 0x52c
 800a90c:	482b      	ldr	r0, [pc, #172]	; (800a9bc <HAL_TIM_PWM_Init+0x188>)
 800a90e:	f7f8 fe14 	bl	800353a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f84a 	bl	800a9c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2202      	movs	r2, #2
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3304      	adds	r3, #4
 800a93c:	4619      	mov	r1, r3
 800a93e:	4610      	mov	r0, r2
 800a940:	f001 f966 	bl	800bc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	40010000 	.word	0x40010000
 800a9a4:	40000400 	.word	0x40000400
 800a9a8:	40000800 	.word	0x40000800
 800a9ac:	40000c00 	.word	0x40000c00
 800a9b0:	40014000 	.word	0x40014000
 800a9b4:	40014400 	.word	0x40014400
 800a9b8:	40014800 	.word	0x40014800
 800a9bc:	08013930 	.word	0x08013930

0800a9c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9c8:	bf00      	nop
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a9e      	ldr	r2, [pc, #632]	; (800ac64 <HAL_TIM_PWM_Start_DMA+0x290>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d10b      	bne.n	800aa08 <HAL_TIM_PWM_Start_DMA+0x34>
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d06c      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	d069      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	2b08      	cmp	r3, #8
 800aa00:	d066      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b0c      	cmp	r3, #12
 800aa06:	d063      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa10:	d10b      	bne.n	800aa2a <HAL_TIM_PWM_Start_DMA+0x56>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d05b      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d058      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b08      	cmp	r3, #8
 800aa22:	d055      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b0c      	cmp	r3, #12
 800aa28:	d052      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a8e      	ldr	r2, [pc, #568]	; (800ac68 <HAL_TIM_PWM_Start_DMA+0x294>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d10b      	bne.n	800aa4c <HAL_TIM_PWM_Start_DMA+0x78>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d04a      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d047      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b08      	cmp	r3, #8
 800aa44:	d044      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b0c      	cmp	r3, #12
 800aa4a:	d041      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a86      	ldr	r2, [pc, #536]	; (800ac6c <HAL_TIM_PWM_Start_DMA+0x298>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d10b      	bne.n	800aa6e <HAL_TIM_PWM_Start_DMA+0x9a>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d039      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d036      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d033      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2b0c      	cmp	r3, #12
 800aa6c:	d030      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a7f      	ldr	r2, [pc, #508]	; (800ac70 <HAL_TIM_PWM_Start_DMA+0x29c>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d10b      	bne.n	800aa90 <HAL_TIM_PWM_Start_DMA+0xbc>
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d028      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d025      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2b08      	cmp	r3, #8
 800aa88:	d022      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b0c      	cmp	r3, #12
 800aa8e:	d01f      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a77      	ldr	r2, [pc, #476]	; (800ac74 <HAL_TIM_PWM_Start_DMA+0x2a0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d105      	bne.n	800aaa6 <HAL_TIM_PWM_Start_DMA+0xd2>
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d017      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d014      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a73      	ldr	r2, [pc, #460]	; (800ac78 <HAL_TIM_PWM_Start_DMA+0x2a4>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d102      	bne.n	800aab6 <HAL_TIM_PWM_Start_DMA+0xe2>
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00c      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a70      	ldr	r2, [pc, #448]	; (800ac7c <HAL_TIM_PWM_Start_DMA+0x2a8>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d102      	bne.n	800aac6 <HAL_TIM_PWM_Start_DMA+0xf2>
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aac6:	f240 61b3 	movw	r1, #1715	; 0x6b3
 800aaca:	486d      	ldr	r0, [pc, #436]	; (800ac80 <HAL_TIM_PWM_Start_DMA+0x2ac>)
 800aacc:	f7f8 fd35 	bl	800353a <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d109      	bne.n	800aaea <HAL_TIM_PWM_Start_DMA+0x116>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	2b02      	cmp	r3, #2
 800aae0:	bf0c      	ite	eq
 800aae2:	2301      	moveq	r3, #1
 800aae4:	2300      	movne	r3, #0
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	e022      	b.n	800ab30 <HAL_TIM_PWM_Start_DMA+0x15c>
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b04      	cmp	r3, #4
 800aaee:	d109      	bne.n	800ab04 <HAL_TIM_PWM_Start_DMA+0x130>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b02      	cmp	r3, #2
 800aafa:	bf0c      	ite	eq
 800aafc:	2301      	moveq	r3, #1
 800aafe:	2300      	movne	r3, #0
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	e015      	b.n	800ab30 <HAL_TIM_PWM_Start_DMA+0x15c>
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2b08      	cmp	r3, #8
 800ab08:	d109      	bne.n	800ab1e <HAL_TIM_PWM_Start_DMA+0x14a>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	bf0c      	ite	eq
 800ab16:	2301      	moveq	r3, #1
 800ab18:	2300      	movne	r3, #0
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	e008      	b.n	800ab30 <HAL_TIM_PWM_Start_DMA+0x15c>
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	bf0c      	ite	eq
 800ab2a:	2301      	moveq	r3, #1
 800ab2c:	2300      	movne	r3, #0
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <HAL_TIM_PWM_Start_DMA+0x164>
  {
    return HAL_BUSY;
 800ab34:	2302      	movs	r3, #2
 800ab36:	e173      	b.n	800ae20 <HAL_TIM_PWM_Start_DMA+0x44c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d109      	bne.n	800ab52 <HAL_TIM_PWM_Start_DMA+0x17e>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	bf0c      	ite	eq
 800ab4a:	2301      	moveq	r3, #1
 800ab4c:	2300      	movne	r3, #0
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	e022      	b.n	800ab98 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d109      	bne.n	800ab6c <HAL_TIM_PWM_Start_DMA+0x198>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	bf0c      	ite	eq
 800ab64:	2301      	moveq	r3, #1
 800ab66:	2300      	movne	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	e015      	b.n	800ab98 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b08      	cmp	r3, #8
 800ab70:	d109      	bne.n	800ab86 <HAL_TIM_PWM_Start_DMA+0x1b2>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	bf0c      	ite	eq
 800ab7e:	2301      	moveq	r3, #1
 800ab80:	2300      	movne	r3, #0
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	e008      	b.n	800ab98 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	bf0c      	ite	eq
 800ab92:	2301      	moveq	r3, #1
 800ab94:	2300      	movne	r3, #0
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d024      	beq.n	800abe6 <HAL_TIM_PWM_Start_DMA+0x212>
  {
    if ((pData == NULL) && (Length > 0U))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d104      	bne.n	800abac <HAL_TIM_PWM_Start_DMA+0x1d8>
 800aba2:	887b      	ldrh	r3, [r7, #2]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <HAL_TIM_PWM_Start_DMA+0x1d8>
    {
      return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e139      	b.n	800ae20 <HAL_TIM_PWM_Start_DMA+0x44c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d104      	bne.n	800abbc <HAL_TIM_PWM_Start_DMA+0x1e8>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2202      	movs	r2, #2
 800abb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abba:	e016      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0x216>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d104      	bne.n	800abcc <HAL_TIM_PWM_Start_DMA+0x1f8>
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2202      	movs	r2, #2
 800abc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abca:	e00e      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0x216>
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2b08      	cmp	r3, #8
 800abd0:	d104      	bne.n	800abdc <HAL_TIM_PWM_Start_DMA+0x208>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2202      	movs	r2, #2
 800abd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abda:	e006      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0x216>
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abe4:	e001      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0x216>
    }
  }
  else
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e11a      	b.n	800ae20 <HAL_TIM_PWM_Start_DMA+0x44c>
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2b0c      	cmp	r3, #12
 800abee:	f200 80c4 	bhi.w	800ad7a <HAL_TIM_PWM_Start_DMA+0x3a6>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <HAL_TIM_PWM_Start_DMA+0x224>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac2d 	.word	0x0800ac2d
 800abfc:	0800ad7b 	.word	0x0800ad7b
 800ac00:	0800ad7b 	.word	0x0800ad7b
 800ac04:	0800ad7b 	.word	0x0800ad7b
 800ac08:	0800aca3 	.word	0x0800aca3
 800ac0c:	0800ad7b 	.word	0x0800ad7b
 800ac10:	0800ad7b 	.word	0x0800ad7b
 800ac14:	0800ad7b 	.word	0x0800ad7b
 800ac18:	0800aceb 	.word	0x0800aceb
 800ac1c:	0800ad7b 	.word	0x0800ad7b
 800ac20:	0800ad7b 	.word	0x0800ad7b
 800ac24:	0800ad7b 	.word	0x0800ad7b
 800ac28:	0800ad33 	.word	0x0800ad33
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	4a14      	ldr	r2, [pc, #80]	; (800ac84 <HAL_TIM_PWM_Start_DMA+0x2b0>)
 800ac32:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	4a13      	ldr	r2, [pc, #76]	; (800ac88 <HAL_TIM_PWM_Start_DMA+0x2b4>)
 800ac3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	4a12      	ldr	r2, [pc, #72]	; (800ac8c <HAL_TIM_PWM_Start_DMA+0x2b8>)
 800ac42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	3334      	adds	r3, #52	; 0x34
 800ac50:	461a      	mov	r2, r3
 800ac52:	887b      	ldrh	r3, [r7, #2]
 800ac54:	f7fa fc7a 	bl	800554c <HAL_DMA_Start_IT>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d018      	beq.n	800ac90 <HAL_TIM_PWM_Start_DMA+0x2bc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e0de      	b.n	800ae20 <HAL_TIM_PWM_Start_DMA+0x44c>
 800ac62:	bf00      	nop
 800ac64:	40010000 	.word	0x40010000
 800ac68:	40000400 	.word	0x40000400
 800ac6c:	40000800 	.word	0x40000800
 800ac70:	40000c00 	.word	0x40000c00
 800ac74:	40014000 	.word	0x40014000
 800ac78:	40014400 	.word	0x40014400
 800ac7c:	40014800 	.word	0x40014800
 800ac80:	08013930 	.word	0x08013930
 800ac84:	0800baff 	.word	0x0800baff
 800ac88:	0800bba7 	.word	0x0800bba7
 800ac8c:	0800ba6d 	.word	0x0800ba6d
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac9e:	60da      	str	r2, [r3, #12]
      break;
 800aca0:	e06e      	b.n	800ad80 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	4a60      	ldr	r2, [pc, #384]	; (800ae28 <HAL_TIM_PWM_Start_DMA+0x454>)
 800aca8:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acae:	4a5f      	ldr	r2, [pc, #380]	; (800ae2c <HAL_TIM_PWM_Start_DMA+0x458>)
 800acb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb6:	4a5e      	ldr	r2, [pc, #376]	; (800ae30 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800acb8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3338      	adds	r3, #56	; 0x38
 800acc6:	461a      	mov	r2, r3
 800acc8:	887b      	ldrh	r3, [r7, #2]
 800acca:	f7fa fc3f 	bl	800554c <HAL_DMA_Start_IT>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <HAL_TIM_PWM_Start_DMA+0x304>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e0a3      	b.n	800ae20 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ace6:	60da      	str	r2, [r3, #12]
      break;
 800ace8:	e04a      	b.n	800ad80 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	4a4e      	ldr	r2, [pc, #312]	; (800ae28 <HAL_TIM_PWM_Start_DMA+0x454>)
 800acf0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf6:	4a4d      	ldr	r2, [pc, #308]	; (800ae2c <HAL_TIM_PWM_Start_DMA+0x458>)
 800acf8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfe:	4a4c      	ldr	r2, [pc, #304]	; (800ae30 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800ad00:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	333c      	adds	r3, #60	; 0x3c
 800ad0e:	461a      	mov	r2, r3
 800ad10:	887b      	ldrh	r3, [r7, #2]
 800ad12:	f7fa fc1b 	bl	800554c <HAL_DMA_Start_IT>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <HAL_TIM_PWM_Start_DMA+0x34c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e07f      	b.n	800ae20 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad2e:	60da      	str	r2, [r3, #12]
      break;
 800ad30:	e026      	b.n	800ad80 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad36:	4a3c      	ldr	r2, [pc, #240]	; (800ae28 <HAL_TIM_PWM_Start_DMA+0x454>)
 800ad38:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad3e:	4a3b      	ldr	r2, [pc, #236]	; (800ae2c <HAL_TIM_PWM_Start_DMA+0x458>)
 800ad40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	4a3a      	ldr	r2, [pc, #232]	; (800ae30 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800ad48:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3340      	adds	r3, #64	; 0x40
 800ad56:	461a      	mov	r2, r3
 800ad58:	887b      	ldrh	r3, [r7, #2]
 800ad5a:	f7fa fbf7 	bl	800554c <HAL_DMA_Start_IT>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <HAL_TIM_PWM_Start_DMA+0x394>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e05b      	b.n	800ae20 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad76:	60da      	str	r2, [r3, #12]
      break;
 800ad78:	e002      	b.n	800ad80 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    default:
      status = HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad7e:	bf00      	nop
  }

  if (status == HAL_OK)
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d14b      	bne.n	800ae1e <HAL_TIM_PWM_Start_DMA+0x44a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	68b9      	ldr	r1, [r7, #8]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f001 fa6e 	bl	800c270 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a26      	ldr	r2, [pc, #152]	; (800ae34 <HAL_TIM_PWM_Start_DMA+0x460>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d107      	bne.n	800adae <HAL_TIM_PWM_Start_DMA+0x3da>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a20      	ldr	r2, [pc, #128]	; (800ae34 <HAL_TIM_PWM_Start_DMA+0x460>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d018      	beq.n	800adea <HAL_TIM_PWM_Start_DMA+0x416>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc0:	d013      	beq.n	800adea <HAL_TIM_PWM_Start_DMA+0x416>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a1c      	ldr	r2, [pc, #112]	; (800ae38 <HAL_TIM_PWM_Start_DMA+0x464>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d00e      	beq.n	800adea <HAL_TIM_PWM_Start_DMA+0x416>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a1a      	ldr	r2, [pc, #104]	; (800ae3c <HAL_TIM_PWM_Start_DMA+0x468>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d009      	beq.n	800adea <HAL_TIM_PWM_Start_DMA+0x416>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a19      	ldr	r2, [pc, #100]	; (800ae40 <HAL_TIM_PWM_Start_DMA+0x46c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d004      	beq.n	800adea <HAL_TIM_PWM_Start_DMA+0x416>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a17      	ldr	r2, [pc, #92]	; (800ae44 <HAL_TIM_PWM_Start_DMA+0x470>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d111      	bne.n	800ae0e <HAL_TIM_PWM_Start_DMA+0x43a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f003 0307 	and.w	r3, r3, #7
 800adf4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	2b06      	cmp	r3, #6
 800adfa:	d010      	beq.n	800ae1e <HAL_TIM_PWM_Start_DMA+0x44a>
      {
        __HAL_TIM_ENABLE(htim);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f042 0201 	orr.w	r2, r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae0c:	e007      	b.n	800ae1e <HAL_TIM_PWM_Start_DMA+0x44a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0201 	orr.w	r2, r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3718      	adds	r7, #24
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	0800baff 	.word	0x0800baff
 800ae2c:	0800bba7 	.word	0x0800bba7
 800ae30:	0800ba6d 	.word	0x0800ba6d
 800ae34:	40010000 	.word	0x40010000
 800ae38:	40000400 	.word	0x40000400
 800ae3c:	40000800 	.word	0x40000800
 800ae40:	40000c00 	.word	0x40000c00
 800ae44:	40014000 	.word	0x40014000

0800ae48 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae52:	2300      	movs	r3, #0
 800ae54:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a97      	ldr	r2, [pc, #604]	; (800b0b8 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10b      	bne.n	800ae78 <HAL_TIM_PWM_Stop_DMA+0x30>
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d06c      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d069      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	2b08      	cmp	r3, #8
 800ae70:	d066      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	2b0c      	cmp	r3, #12
 800ae76:	d063      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae80:	d10b      	bne.n	800ae9a <HAL_TIM_PWM_Stop_DMA+0x52>
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d05b      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d058      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b08      	cmp	r3, #8
 800ae92:	d055      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2b0c      	cmp	r3, #12
 800ae98:	d052      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a87      	ldr	r2, [pc, #540]	; (800b0bc <HAL_TIM_PWM_Stop_DMA+0x274>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d10b      	bne.n	800aebc <HAL_TIM_PWM_Stop_DMA+0x74>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d04a      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b04      	cmp	r3, #4
 800aeae:	d047      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b08      	cmp	r3, #8
 800aeb4:	d044      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b0c      	cmp	r3, #12
 800aeba:	d041      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a7f      	ldr	r2, [pc, #508]	; (800b0c0 <HAL_TIM_PWM_Stop_DMA+0x278>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d10b      	bne.n	800aede <HAL_TIM_PWM_Stop_DMA+0x96>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d039      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d036      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b08      	cmp	r3, #8
 800aed6:	d033      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b0c      	cmp	r3, #12
 800aedc:	d030      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a78      	ldr	r2, [pc, #480]	; (800b0c4 <HAL_TIM_PWM_Stop_DMA+0x27c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d10b      	bne.n	800af00 <HAL_TIM_PWM_Stop_DMA+0xb8>
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d028      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b04      	cmp	r3, #4
 800aef2:	d025      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b08      	cmp	r3, #8
 800aef8:	d022      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b0c      	cmp	r3, #12
 800aefe:	d01f      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a70      	ldr	r2, [pc, #448]	; (800b0c8 <HAL_TIM_PWM_Stop_DMA+0x280>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d105      	bne.n	800af16 <HAL_TIM_PWM_Stop_DMA+0xce>
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d017      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b04      	cmp	r3, #4
 800af14:	d014      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a6c      	ldr	r2, [pc, #432]	; (800b0cc <HAL_TIM_PWM_Stop_DMA+0x284>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d102      	bne.n	800af26 <HAL_TIM_PWM_Stop_DMA+0xde>
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00c      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a69      	ldr	r2, [pc, #420]	; (800b0d0 <HAL_TIM_PWM_Stop_DMA+0x288>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d102      	bne.n	800af36 <HAL_TIM_PWM_Stop_DMA+0xee>
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800af36:	f240 7154 	movw	r1, #1876	; 0x754
 800af3a:	4866      	ldr	r0, [pc, #408]	; (800b0d4 <HAL_TIM_PWM_Stop_DMA+0x28c>)
 800af3c:	f7f8 fafd 	bl	800353a <assert_failed>
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	2b0c      	cmp	r3, #12
 800af44:	d854      	bhi.n	800aff0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800af46:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <HAL_TIM_PWM_Stop_DMA+0x104>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800af81 	.word	0x0800af81
 800af50:	0800aff1 	.word	0x0800aff1
 800af54:	0800aff1 	.word	0x0800aff1
 800af58:	0800aff1 	.word	0x0800aff1
 800af5c:	0800af9d 	.word	0x0800af9d
 800af60:	0800aff1 	.word	0x0800aff1
 800af64:	0800aff1 	.word	0x0800aff1
 800af68:	0800aff1 	.word	0x0800aff1
 800af6c:	0800afb9 	.word	0x0800afb9
 800af70:	0800aff1 	.word	0x0800aff1
 800af74:	0800aff1 	.word	0x0800aff1
 800af78:	0800aff1 	.word	0x0800aff1
 800af7c:	0800afd5 	.word	0x0800afd5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	68da      	ldr	r2, [r3, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af94:	4618      	mov	r0, r3
 800af96:	f7fa fb3f 	bl	8005618 <HAL_DMA_Abort_IT>
      break;
 800af9a:	e02c      	b.n	800aff6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afaa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fa fb31 	bl	8005618 <HAL_DMA_Abort_IT>
      break;
 800afb6:	e01e      	b.n	800aff6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fa fb23 	bl	8005618 <HAL_DMA_Abort_IT>
      break;
 800afd2:	e010      	b.n	800aff6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800afe2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fa fb15 	bl	8005618 <HAL_DMA_Abort_IT>
      break;
 800afee:	e002      	b.n	800aff6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    default:
      status = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	73fb      	strb	r3, [r7, #15]
      break;
 800aff4:	bf00      	nop
  }

  if (status == HAL_OK)
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d157      	bne.n	800b0ac <HAL_TIM_PWM_Stop_DMA+0x264>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2200      	movs	r2, #0
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	4618      	mov	r0, r3
 800b006:	f001 f933 	bl	800c270 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a2a      	ldr	r2, [pc, #168]	; (800b0b8 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d117      	bne.n	800b044 <HAL_TIM_PWM_Stop_DMA+0x1fc>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6a1a      	ldr	r2, [r3, #32]
 800b01a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b01e:	4013      	ands	r3, r2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10f      	bne.n	800b044 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6a1a      	ldr	r2, [r3, #32]
 800b02a:	f240 4344 	movw	r3, #1092	; 0x444
 800b02e:	4013      	ands	r3, r2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d107      	bne.n	800b044 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b042:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6a1a      	ldr	r2, [r3, #32]
 800b04a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b04e:	4013      	ands	r3, r2
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10f      	bne.n	800b074 <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6a1a      	ldr	r2, [r3, #32]
 800b05a:	f240 4344 	movw	r3, #1092	; 0x444
 800b05e:	4013      	ands	r3, r2
 800b060:	2b00      	cmp	r3, #0
 800b062:	d107      	bne.n	800b074 <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f022 0201 	bic.w	r2, r2, #1
 800b072:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d104      	bne.n	800b084 <HAL_TIM_PWM_Stop_DMA+0x23c>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b082:	e013      	b.n	800b0ac <HAL_TIM_PWM_Stop_DMA+0x264>
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	2b04      	cmp	r3, #4
 800b088:	d104      	bne.n	800b094 <HAL_TIM_PWM_Stop_DMA+0x24c>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b092:	e00b      	b.n	800b0ac <HAL_TIM_PWM_Stop_DMA+0x264>
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b08      	cmp	r3, #8
 800b098:	d104      	bne.n	800b0a4 <HAL_TIM_PWM_Stop_DMA+0x25c>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0a2:	e003      	b.n	800b0ac <HAL_TIM_PWM_Stop_DMA+0x264>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	40010000 	.word	0x40010000
 800b0bc:	40000400 	.word	0x40000400
 800b0c0:	40000800 	.word	0x40000800
 800b0c4:	40000c00 	.word	0x40000c00
 800b0c8:	40014000 	.word	0x40014000
 800b0cc:	40014400 	.word	0x40014400
 800b0d0:	40014800 	.word	0x40014800
 800b0d4:	08013930 	.word	0x08013930

0800b0d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	d00d      	beq.n	800b110 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b08      	cmp	r3, #8
 800b0f8:	d00a      	beq.n	800b110 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b0c      	cmp	r3, #12
 800b0fe:	d007      	beq.n	800b110 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b3c      	cmp	r3, #60	; 0x3c
 800b104:	d004      	beq.n	800b110 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b106:	f241 0177 	movw	r1, #4215	; 0x1077
 800b10a:	4893      	ldr	r0, [pc, #588]	; (800b358 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b10c:	f7f8 fa15 	bl	800353a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b60      	cmp	r3, #96	; 0x60
 800b116:	d008      	beq.n	800b12a <HAL_TIM_PWM_ConfigChannel+0x52>
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2b70      	cmp	r3, #112	; 0x70
 800b11e:	d004      	beq.n	800b12a <HAL_TIM_PWM_ConfigChannel+0x52>
 800b120:	f241 0178 	movw	r1, #4216	; 0x1078
 800b124:	488c      	ldr	r0, [pc, #560]	; (800b358 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b126:	f7f8 fa08 	bl	800353a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d008      	beq.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	2b02      	cmp	r3, #2
 800b138:	d004      	beq.n	800b144 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800b13a:	f241 0179 	movw	r1, #4217	; 0x1079
 800b13e:	4886      	ldr	r0, [pc, #536]	; (800b358 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b140:	f7f8 f9fb 	bl	800353a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	691b      	ldr	r3, [r3, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d008      	beq.n	800b15e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	2b04      	cmp	r3, #4
 800b152:	d004      	beq.n	800b15e <HAL_TIM_PWM_ConfigChannel+0x86>
 800b154:	f241 017a 	movw	r1, #4218	; 0x107a
 800b158:	487f      	ldr	r0, [pc, #508]	; (800b358 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b15a:	f7f8 f9ee 	bl	800353a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b164:	2b01      	cmp	r3, #1
 800b166:	d101      	bne.n	800b16c <HAL_TIM_PWM_ConfigChannel+0x94>
 800b168:	2302      	movs	r3, #2
 800b16a:	e14c      	b.n	800b406 <HAL_TIM_PWM_ConfigChannel+0x32e>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b0c      	cmp	r3, #12
 800b178:	f200 813d 	bhi.w	800b3f6 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800b17c:	a201      	add	r2, pc, #4	; (adr r2, 800b184 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800b17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b182:	bf00      	nop
 800b184:	0800b1b9 	.word	0x0800b1b9
 800b188:	0800b3f7 	.word	0x0800b3f7
 800b18c:	0800b3f7 	.word	0x0800b3f7
 800b190:	0800b3f7 	.word	0x0800b3f7
 800b194:	0800b253 	.word	0x0800b253
 800b198:	0800b3f7 	.word	0x0800b3f7
 800b19c:	0800b3f7 	.word	0x0800b3f7
 800b1a0:	0800b3f7 	.word	0x0800b3f7
 800b1a4:	0800b2db 	.word	0x0800b2db
 800b1a8:	0800b3f7 	.word	0x0800b3f7
 800b1ac:	0800b3f7 	.word	0x0800b3f7
 800b1b0:	0800b3f7 	.word	0x0800b3f7
 800b1b4:	0800b379 	.word	0x0800b379
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a67      	ldr	r2, [pc, #412]	; (800b35c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d027      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ca:	d022      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a63      	ldr	r2, [pc, #396]	; (800b360 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d01d      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a62      	ldr	r2, [pc, #392]	; (800b364 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d018      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a60      	ldr	r2, [pc, #384]	; (800b368 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d013      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a5f      	ldr	r2, [pc, #380]	; (800b36c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d00e      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a5d      	ldr	r2, [pc, #372]	; (800b370 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d009      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a5c      	ldr	r2, [pc, #368]	; (800b374 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d004      	beq.n	800b212 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800b208:	f241 0184 	movw	r1, #4228	; 0x1084
 800b20c:	4852      	ldr	r0, [pc, #328]	; (800b358 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b20e:	f7f8 f994 	bl	800353a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 fd79 	bl	800bd10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	699a      	ldr	r2, [r3, #24]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f042 0208 	orr.w	r2, r2, #8
 800b22c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	699a      	ldr	r2, [r3, #24]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f022 0204 	bic.w	r2, r2, #4
 800b23c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6999      	ldr	r1, [r3, #24]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	691a      	ldr	r2, [r3, #16]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	430a      	orrs	r2, r1
 800b24e:	619a      	str	r2, [r3, #24]
      break;
 800b250:	e0d4      	b.n	800b3fc <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a41      	ldr	r2, [pc, #260]	; (800b35c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d01d      	beq.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b264:	d018      	beq.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a3d      	ldr	r2, [pc, #244]	; (800b360 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d013      	beq.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a3b      	ldr	r2, [pc, #236]	; (800b364 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d00e      	beq.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a3a      	ldr	r2, [pc, #232]	; (800b368 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d009      	beq.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a38      	ldr	r2, [pc, #224]	; (800b36c <HAL_TIM_PWM_ConfigChannel+0x294>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d004      	beq.n	800b298 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800b28e:	f241 0195 	movw	r1, #4245	; 0x1095
 800b292:	4831      	ldr	r0, [pc, #196]	; (800b358 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b294:	f7f8 f951 	bl	800353a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	68b9      	ldr	r1, [r7, #8]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fdc6 	bl	800be30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	699a      	ldr	r2, [r3, #24]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6999      	ldr	r1, [r3, #24]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	021a      	lsls	r2, r3, #8
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	430a      	orrs	r2, r1
 800b2d6:	619a      	str	r2, [r3, #24]
      break;
 800b2d8:	e090      	b.n	800b3fc <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a1f      	ldr	r2, [pc, #124]	; (800b35c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d018      	beq.n	800b316 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ec:	d013      	beq.n	800b316 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d00e      	beq.n	800b316 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a19      	ldr	r2, [pc, #100]	; (800b364 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d009      	beq.n	800b316 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a18      	ldr	r2, [pc, #96]	; (800b368 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d004      	beq.n	800b316 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800b30c:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800b310:	4811      	ldr	r0, [pc, #68]	; (800b358 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b312:	f7f8 f912 	bl	800353a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68b9      	ldr	r1, [r7, #8]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f000 fe1b 	bl	800bf58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69da      	ldr	r2, [r3, #28]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f042 0208 	orr.w	r2, r2, #8
 800b330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69da      	ldr	r2, [r3, #28]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 0204 	bic.w	r2, r2, #4
 800b340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	69d9      	ldr	r1, [r3, #28]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	691a      	ldr	r2, [r3, #16]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	430a      	orrs	r2, r1
 800b352:	61da      	str	r2, [r3, #28]
      break;
 800b354:	e052      	b.n	800b3fc <HAL_TIM_PWM_ConfigChannel+0x324>
 800b356:	bf00      	nop
 800b358:	08013930 	.word	0x08013930
 800b35c:	40010000 	.word	0x40010000
 800b360:	40000400 	.word	0x40000400
 800b364:	40000800 	.word	0x40000800
 800b368:	40000c00 	.word	0x40000c00
 800b36c:	40014000 	.word	0x40014000
 800b370:	40014400 	.word	0x40014400
 800b374:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a24      	ldr	r2, [pc, #144]	; (800b410 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d018      	beq.n	800b3b4 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38a:	d013      	beq.n	800b3b4 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a20      	ldr	r2, [pc, #128]	; (800b414 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00e      	beq.n	800b3b4 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a1f      	ldr	r2, [pc, #124]	; (800b418 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d009      	beq.n	800b3b4 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a1d      	ldr	r2, [pc, #116]	; (800b41c <HAL_TIM_PWM_ConfigChannel+0x344>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d004      	beq.n	800b3b4 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800b3aa:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800b3ae:	481c      	ldr	r0, [pc, #112]	; (800b420 <HAL_TIM_PWM_ConfigChannel+0x348>)
 800b3b0:	f7f8 f8c3 	bl	800353a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68b9      	ldr	r1, [r7, #8]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 fe60 	bl	800c080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	69da      	ldr	r2, [r3, #28]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	69da      	ldr	r2, [r3, #28]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	69d9      	ldr	r1, [r3, #28]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	021a      	lsls	r2, r3, #8
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	61da      	str	r2, [r3, #28]
      break;
 800b3f4:	e002      	b.n	800b3fc <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b3fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b404:	7dfb      	ldrb	r3, [r7, #23]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3718      	adds	r7, #24
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	40010000 	.word	0x40010000
 800b414:	40000400 	.word	0x40000400
 800b418:	40000800 	.word	0x40000800
 800b41c:	40000c00 	.word	0x40000c00
 800b420:	08013930 	.word	0x08013930

0800b424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b438:	2b01      	cmp	r3, #1
 800b43a:	d101      	bne.n	800b440 <HAL_TIM_ConfigClockSource+0x1c>
 800b43c:	2302      	movs	r3, #2
 800b43e:	e2f0      	b.n	800ba22 <HAL_TIM_ConfigClockSource+0x5fe>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2202      	movs	r2, #2
 800b44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b458:	d029      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b462:	d024      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d020      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b10      	cmp	r3, #16
 800b472:	d01c      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2b20      	cmp	r3, #32
 800b47a:	d018      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b30      	cmp	r3, #48	; 0x30
 800b482:	d014      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b40      	cmp	r3, #64	; 0x40
 800b48a:	d010      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b50      	cmp	r3, #80	; 0x50
 800b492:	d00c      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b60      	cmp	r3, #96	; 0x60
 800b49a:	d008      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b70      	cmp	r3, #112	; 0x70
 800b4a2:	d004      	beq.n	800b4ae <HAL_TIM_ConfigClockSource+0x8a>
 800b4a4:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800b4a8:	487c      	ldr	r0, [pc, #496]	; (800b69c <HAL_TIM_ConfigClockSource+0x278>)
 800b4aa:	f7f8 f846 	bl	800353a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b4bc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4c4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68ba      	ldr	r2, [r7, #8]
 800b4cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4d6:	f000 80f1 	beq.w	800b6bc <HAL_TIM_ConfigClockSource+0x298>
 800b4da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4de:	f200 8293 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b4e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e6:	d02d      	beq.n	800b544 <HAL_TIM_ConfigClockSource+0x120>
 800b4e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ec:	f200 828c 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b4f0:	2b70      	cmp	r3, #112	; 0x70
 800b4f2:	d05d      	beq.n	800b5b0 <HAL_TIM_ConfigClockSource+0x18c>
 800b4f4:	2b70      	cmp	r3, #112	; 0x70
 800b4f6:	f200 8287 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b4fa:	2b60      	cmp	r3, #96	; 0x60
 800b4fc:	f000 81a0 	beq.w	800b840 <HAL_TIM_ConfigClockSource+0x41c>
 800b500:	2b60      	cmp	r3, #96	; 0x60
 800b502:	f200 8281 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b506:	2b50      	cmp	r3, #80	; 0x50
 800b508:	f000 8144 	beq.w	800b794 <HAL_TIM_ConfigClockSource+0x370>
 800b50c:	2b50      	cmp	r3, #80	; 0x50
 800b50e:	f200 827b 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b512:	2b40      	cmp	r3, #64	; 0x40
 800b514:	f000 81f6 	beq.w	800b904 <HAL_TIM_ConfigClockSource+0x4e0>
 800b518:	2b40      	cmp	r3, #64	; 0x40
 800b51a:	f200 8275 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b51e:	2b30      	cmp	r3, #48	; 0x30
 800b520:	f000 8246 	beq.w	800b9b0 <HAL_TIM_ConfigClockSource+0x58c>
 800b524:	2b30      	cmp	r3, #48	; 0x30
 800b526:	f200 826f 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b52a:	2b20      	cmp	r3, #32
 800b52c:	f000 8240 	beq.w	800b9b0 <HAL_TIM_ConfigClockSource+0x58c>
 800b530:	2b20      	cmp	r3, #32
 800b532:	f200 8269 	bhi.w	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 823a 	beq.w	800b9b0 <HAL_TIM_ConfigClockSource+0x58c>
 800b53c:	2b10      	cmp	r3, #16
 800b53e:	f000 8237 	beq.w	800b9b0 <HAL_TIM_ConfigClockSource+0x58c>
 800b542:	e261      	b.n	800ba08 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a55      	ldr	r2, [pc, #340]	; (800b6a0 <HAL_TIM_ConfigClockSource+0x27c>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	f000 825f 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b558:	f000 8259 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a50      	ldr	r2, [pc, #320]	; (800b6a4 <HAL_TIM_ConfigClockSource+0x280>)
 800b562:	4293      	cmp	r3, r2
 800b564:	f000 8253 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a4e      	ldr	r2, [pc, #312]	; (800b6a8 <HAL_TIM_ConfigClockSource+0x284>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	f000 824d 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a4c      	ldr	r2, [pc, #304]	; (800b6ac <HAL_TIM_ConfigClockSource+0x288>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	f000 8247 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a4a      	ldr	r2, [pc, #296]	; (800b6b0 <HAL_TIM_ConfigClockSource+0x28c>)
 800b586:	4293      	cmp	r3, r2
 800b588:	f000 8241 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a48      	ldr	r2, [pc, #288]	; (800b6b4 <HAL_TIM_ConfigClockSource+0x290>)
 800b592:	4293      	cmp	r3, r2
 800b594:	f000 823b 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a46      	ldr	r2, [pc, #280]	; (800b6b8 <HAL_TIM_ConfigClockSource+0x294>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	f000 8235 	beq.w	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
 800b5a4:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800b5a8:	483c      	ldr	r0, [pc, #240]	; (800b69c <HAL_TIM_ConfigClockSource+0x278>)
 800b5aa:	f7f7 ffc6 	bl	800353a <assert_failed>
      break;
 800b5ae:	e22e      	b.n	800ba0e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a3a      	ldr	r2, [pc, #232]	; (800b6a0 <HAL_TIM_ConfigClockSource+0x27c>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d01d      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c2:	d018      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a36      	ldr	r2, [pc, #216]	; (800b6a4 <HAL_TIM_ConfigClockSource+0x280>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d013      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a35      	ldr	r2, [pc, #212]	; (800b6a8 <HAL_TIM_ConfigClockSource+0x284>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d00e      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a33      	ldr	r2, [pc, #204]	; (800b6ac <HAL_TIM_ConfigClockSource+0x288>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d009      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a32      	ldr	r2, [pc, #200]	; (800b6b0 <HAL_TIM_ConfigClockSource+0x28c>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d004      	beq.n	800b5f6 <HAL_TIM_ConfigClockSource+0x1d2>
 800b5ec:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800b5f0:	482a      	ldr	r0, [pc, #168]	; (800b69c <HAL_TIM_ConfigClockSource+0x278>)
 800b5f2:	f7f7 ffa2 	bl	800353a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d013      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x202>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b606:	d00e      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x202>
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b610:	d009      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x202>
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b61a:	d004      	beq.n	800b626 <HAL_TIM_ConfigClockSource+0x202>
 800b61c:	f241 41d1 	movw	r1, #5329	; 0x14d1
 800b620:	481e      	ldr	r0, [pc, #120]	; (800b69c <HAL_TIM_ConfigClockSource+0x278>)
 800b622:	f7f7 ff8a 	bl	800353a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b62e:	d014      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x236>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d010      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x236>
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00c      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x236>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d008      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x236>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	2b0a      	cmp	r3, #10
 800b64e:	d004      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x236>
 800b650:	f241 41d2 	movw	r1, #5330	; 0x14d2
 800b654:	4811      	ldr	r0, [pc, #68]	; (800b69c <HAL_TIM_ConfigClockSource+0x278>)
 800b656:	f7f7 ff70 	bl	800353a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	2b0f      	cmp	r3, #15
 800b660:	d904      	bls.n	800b66c <HAL_TIM_ConfigClockSource+0x248>
 800b662:	f241 41d3 	movw	r1, #5331	; 0x14d3
 800b666:	480d      	ldr	r0, [pc, #52]	; (800b69c <HAL_TIM_ConfigClockSource+0x278>)
 800b668:	f7f7 ff67 	bl	800353a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6818      	ldr	r0, [r3, #0]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	6899      	ldr	r1, [r3, #8]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	685a      	ldr	r2, [r3, #4]
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	f000 fdd8 	bl	800c230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b68e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	609a      	str	r2, [r3, #8]
      break;
 800b698:	e1ba      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x5ec>
 800b69a:	bf00      	nop
 800b69c:	08013930 	.word	0x08013930
 800b6a0:	40010000 	.word	0x40010000
 800b6a4:	40000400 	.word	0x40000400
 800b6a8:	40000800 	.word	0x40000800
 800b6ac:	40000c00 	.word	0x40000c00
 800b6b0:	40014000 	.word	0x40014000
 800b6b4:	40014400 	.word	0x40014400
 800b6b8:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a8a      	ldr	r2, [pc, #552]	; (800b8ec <HAL_TIM_ConfigClockSource+0x4c8>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d018      	beq.n	800b6f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ce:	d013      	beq.n	800b6f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a86      	ldr	r2, [pc, #536]	; (800b8f0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00e      	beq.n	800b6f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a85      	ldr	r2, [pc, #532]	; (800b8f4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d009      	beq.n	800b6f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a83      	ldr	r2, [pc, #524]	; (800b8f8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d004      	beq.n	800b6f8 <HAL_TIM_ConfigClockSource+0x2d4>
 800b6ee:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800b6f2:	4882      	ldr	r0, [pc, #520]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b6f4:	f7f7 ff21 	bl	800353a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d013      	beq.n	800b728 <HAL_TIM_ConfigClockSource+0x304>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b708:	d00e      	beq.n	800b728 <HAL_TIM_ConfigClockSource+0x304>
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b712:	d009      	beq.n	800b728 <HAL_TIM_ConfigClockSource+0x304>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b71c:	d004      	beq.n	800b728 <HAL_TIM_ConfigClockSource+0x304>
 800b71e:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800b722:	4876      	ldr	r0, [pc, #472]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b724:	f7f7 ff09 	bl	800353a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b730:	d014      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0x338>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d010      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0x338>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00c      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0x338>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	2b02      	cmp	r3, #2
 800b748:	d008      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0x338>
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	2b0a      	cmp	r3, #10
 800b750:	d004      	beq.n	800b75c <HAL_TIM_ConfigClockSource+0x338>
 800b752:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800b756:	4869      	ldr	r0, [pc, #420]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b758:	f7f7 feef 	bl	800353a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	2b0f      	cmp	r3, #15
 800b762:	d904      	bls.n	800b76e <HAL_TIM_ConfigClockSource+0x34a>
 800b764:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800b768:	4864      	ldr	r0, [pc, #400]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b76a:	f7f7 fee6 	bl	800353a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6899      	ldr	r1, [r3, #8]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	f000 fd57 	bl	800c230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b790:	609a      	str	r2, [r3, #8]
      break;
 800b792:	e13d      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a54      	ldr	r2, [pc, #336]	; (800b8ec <HAL_TIM_ConfigClockSource+0x4c8>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d01d      	beq.n	800b7da <HAL_TIM_ConfigClockSource+0x3b6>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7a6:	d018      	beq.n	800b7da <HAL_TIM_ConfigClockSource+0x3b6>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a50      	ldr	r2, [pc, #320]	; (800b8f0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d013      	beq.n	800b7da <HAL_TIM_ConfigClockSource+0x3b6>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a4f      	ldr	r2, [pc, #316]	; (800b8f4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d00e      	beq.n	800b7da <HAL_TIM_ConfigClockSource+0x3b6>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4a4d      	ldr	r2, [pc, #308]	; (800b8f8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d009      	beq.n	800b7da <HAL_TIM_ConfigClockSource+0x3b6>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a4d      	ldr	r2, [pc, #308]	; (800b900 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d004      	beq.n	800b7da <HAL_TIM_ConfigClockSource+0x3b6>
 800b7d0:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800b7d4:	4849      	ldr	r0, [pc, #292]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b7d6:	f7f7 feb0 	bl	800353a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e2:	d014      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x3ea>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d010      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x3ea>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00c      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x3ea>
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d008      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x3ea>
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	2b0a      	cmp	r3, #10
 800b802:	d004      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x3ea>
 800b804:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800b808:	483c      	ldr	r0, [pc, #240]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b80a:	f7f7 fe96 	bl	800353a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	2b0f      	cmp	r3, #15
 800b814:	d904      	bls.n	800b820 <HAL_TIM_ConfigClockSource+0x3fc>
 800b816:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800b81a:	4838      	ldr	r0, [pc, #224]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b81c:	f7f7 fe8d 	bl	800353a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6818      	ldr	r0, [r3, #0]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	6859      	ldr	r1, [r3, #4]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	461a      	mov	r2, r3
 800b82e:	f000 fc85 	bl	800c13c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2150      	movs	r1, #80	; 0x50
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 fcde 	bl	800c1fa <TIM_ITRx_SetConfig>
      break;
 800b83e:	e0e7      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a29      	ldr	r2, [pc, #164]	; (800b8ec <HAL_TIM_ConfigClockSource+0x4c8>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d01d      	beq.n	800b886 <HAL_TIM_ConfigClockSource+0x462>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b852:	d018      	beq.n	800b886 <HAL_TIM_ConfigClockSource+0x462>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a25      	ldr	r2, [pc, #148]	; (800b8f0 <HAL_TIM_ConfigClockSource+0x4cc>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d013      	beq.n	800b886 <HAL_TIM_ConfigClockSource+0x462>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a24      	ldr	r2, [pc, #144]	; (800b8f4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d00e      	beq.n	800b886 <HAL_TIM_ConfigClockSource+0x462>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a22      	ldr	r2, [pc, #136]	; (800b8f8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d009      	beq.n	800b886 <HAL_TIM_ConfigClockSource+0x462>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a22      	ldr	r2, [pc, #136]	; (800b900 <HAL_TIM_ConfigClockSource+0x4dc>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d004      	beq.n	800b886 <HAL_TIM_ConfigClockSource+0x462>
 800b87c:	f241 510a 	movw	r1, #5386	; 0x150a
 800b880:	481e      	ldr	r0, [pc, #120]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b882:	f7f7 fe5a 	bl	800353a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b88e:	d014      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x496>
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d010      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x496>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00c      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x496>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d008      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x496>
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	2b0a      	cmp	r3, #10
 800b8ae:	d004      	beq.n	800b8ba <HAL_TIM_ConfigClockSource+0x496>
 800b8b0:	f241 510d 	movw	r1, #5389	; 0x150d
 800b8b4:	4811      	ldr	r0, [pc, #68]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b8b6:	f7f7 fe40 	bl	800353a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	2b0f      	cmp	r3, #15
 800b8c0:	d904      	bls.n	800b8cc <HAL_TIM_ConfigClockSource+0x4a8>
 800b8c2:	f241 510e 	movw	r1, #5390	; 0x150e
 800b8c6:	480d      	ldr	r0, [pc, #52]	; (800b8fc <HAL_TIM_ConfigClockSource+0x4d8>)
 800b8c8:	f7f7 fe37 	bl	800353a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	6859      	ldr	r1, [r3, #4]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	f000 fc5e 	bl	800c19a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2160      	movs	r1, #96	; 0x60
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f000 fc88 	bl	800c1fa <TIM_ITRx_SetConfig>
      break;
 800b8ea:	e091      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x5ec>
 800b8ec:	40010000 	.word	0x40010000
 800b8f0:	40000400 	.word	0x40000400
 800b8f4:	40000800 	.word	0x40000800
 800b8f8:	40000c00 	.word	0x40000c00
 800b8fc:	08013930 	.word	0x08013930
 800b900:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a48      	ldr	r2, [pc, #288]	; (800ba2c <HAL_TIM_ConfigClockSource+0x608>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d01d      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0x526>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b916:	d018      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0x526>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a44      	ldr	r2, [pc, #272]	; (800ba30 <HAL_TIM_ConfigClockSource+0x60c>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d013      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0x526>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a43      	ldr	r2, [pc, #268]	; (800ba34 <HAL_TIM_ConfigClockSource+0x610>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d00e      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0x526>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a41      	ldr	r2, [pc, #260]	; (800ba38 <HAL_TIM_ConfigClockSource+0x614>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d009      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0x526>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a40      	ldr	r2, [pc, #256]	; (800ba3c <HAL_TIM_ConfigClockSource+0x618>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d004      	beq.n	800b94a <HAL_TIM_ConfigClockSource+0x526>
 800b940:	f241 511a 	movw	r1, #5402	; 0x151a
 800b944:	483e      	ldr	r0, [pc, #248]	; (800ba40 <HAL_TIM_ConfigClockSource+0x61c>)
 800b946:	f7f7 fdf8 	bl	800353a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b952:	d014      	beq.n	800b97e <HAL_TIM_ConfigClockSource+0x55a>
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d010      	beq.n	800b97e <HAL_TIM_ConfigClockSource+0x55a>
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00c      	beq.n	800b97e <HAL_TIM_ConfigClockSource+0x55a>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d008      	beq.n	800b97e <HAL_TIM_ConfigClockSource+0x55a>
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	2b0a      	cmp	r3, #10
 800b972:	d004      	beq.n	800b97e <HAL_TIM_ConfigClockSource+0x55a>
 800b974:	f241 511d 	movw	r1, #5405	; 0x151d
 800b978:	4831      	ldr	r0, [pc, #196]	; (800ba40 <HAL_TIM_ConfigClockSource+0x61c>)
 800b97a:	f7f7 fdde 	bl	800353a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	2b0f      	cmp	r3, #15
 800b984:	d904      	bls.n	800b990 <HAL_TIM_ConfigClockSource+0x56c>
 800b986:	f241 511e 	movw	r1, #5406	; 0x151e
 800b98a:	482d      	ldr	r0, [pc, #180]	; (800ba40 <HAL_TIM_ConfigClockSource+0x61c>)
 800b98c:	f7f7 fdd5 	bl	800353a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6818      	ldr	r0, [r3, #0]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	6859      	ldr	r1, [r3, #4]
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	461a      	mov	r2, r3
 800b99e:	f000 fbcd 	bl	800c13c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2140      	movs	r1, #64	; 0x40
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f000 fc26 	bl	800c1fa <TIM_ITRx_SetConfig>
      break;
 800b9ae:	e02f      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a1d      	ldr	r2, [pc, #116]	; (800ba2c <HAL_TIM_ConfigClockSource+0x608>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d01d      	beq.n	800b9f6 <HAL_TIM_ConfigClockSource+0x5d2>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9c2:	d018      	beq.n	800b9f6 <HAL_TIM_ConfigClockSource+0x5d2>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a19      	ldr	r2, [pc, #100]	; (800ba30 <HAL_TIM_ConfigClockSource+0x60c>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d013      	beq.n	800b9f6 <HAL_TIM_ConfigClockSource+0x5d2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	4a18      	ldr	r2, [pc, #96]	; (800ba34 <HAL_TIM_ConfigClockSource+0x610>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d00e      	beq.n	800b9f6 <HAL_TIM_ConfigClockSource+0x5d2>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a16      	ldr	r2, [pc, #88]	; (800ba38 <HAL_TIM_ConfigClockSource+0x614>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d009      	beq.n	800b9f6 <HAL_TIM_ConfigClockSource+0x5d2>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a15      	ldr	r2, [pc, #84]	; (800ba3c <HAL_TIM_ConfigClockSource+0x618>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d004      	beq.n	800b9f6 <HAL_TIM_ConfigClockSource+0x5d2>
 800b9ec:	f241 512d 	movw	r1, #5421	; 0x152d
 800b9f0:	4813      	ldr	r0, [pc, #76]	; (800ba40 <HAL_TIM_ConfigClockSource+0x61c>)
 800b9f2:	f7f7 fda2 	bl	800353a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4610      	mov	r0, r2
 800ba02:	f000 fbfa 	bl	800c1fa <TIM_ITRx_SetConfig>
      break;
 800ba06:	e003      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba0c:	e000      	b.n	800ba10 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800ba0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ba20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3710      	adds	r7, #16
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	40010000 	.word	0x40010000
 800ba30:	40000400 	.word	0x40000400
 800ba34:	40000800 	.word	0x40000800
 800ba38:	40000c00 	.word	0x40000c00
 800ba3c:	40014000 	.word	0x40014000
 800ba40:	08013930 	.word	0x08013930

0800ba44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d107      	bne.n	800ba94 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2201      	movs	r2, #1
 800ba88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba92:	e02a      	b.n	800baea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d107      	bne.n	800baae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2202      	movs	r2, #2
 800baa2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800baac:	e01d      	b.n	800baea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d107      	bne.n	800bac8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2204      	movs	r2, #4
 800babc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2201      	movs	r2, #1
 800bac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bac6:	e010      	b.n	800baea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d107      	bne.n	800bae2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2208      	movs	r2, #8
 800bad6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bae0:	e003      	b.n	800baea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff ffb4 	bl	800ba58 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2200      	movs	r2, #0
 800baf4:	771a      	strb	r2, [r3, #28]
}
 800baf6:	bf00      	nop
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b084      	sub	sp, #16
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d10b      	bne.n	800bb2e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	69db      	ldr	r3, [r3, #28]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d136      	bne.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb2c:	e031      	b.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d10b      	bne.n	800bb50 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	69db      	ldr	r3, [r3, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d125      	bne.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2201      	movs	r2, #1
 800bb4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb4e:	e020      	b.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d10b      	bne.n	800bb72 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	69db      	ldr	r3, [r3, #28]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d114      	bne.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb70:	e00f      	b.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d10a      	bne.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2208      	movs	r2, #8
 800bb80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d103      	bne.n	800bb92 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f7f7 f8be 	bl	8002d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	771a      	strb	r2, [r3, #28]
}
 800bb9e:	bf00      	nop
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b084      	sub	sp, #16
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbb2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d103      	bne.n	800bbc6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	771a      	strb	r2, [r3, #28]
 800bbc4:	e019      	b.n	800bbfa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d103      	bne.n	800bbd8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	771a      	strb	r2, [r3, #28]
 800bbd6:	e010      	b.n	800bbfa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d103      	bne.n	800bbea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2204      	movs	r2, #4
 800bbe6:	771a      	strb	r2, [r3, #28]
 800bbe8:	e007      	b.n	800bbfa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d102      	bne.n	800bbfa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2208      	movs	r2, #8
 800bbf8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f7ff ff22 	bl	800ba44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	771a      	strb	r2, [r3, #28]
}
 800bc06:	bf00      	nop
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a34      	ldr	r2, [pc, #208]	; (800bcf4 <TIM_Base_SetConfig+0xe4>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d00f      	beq.n	800bc48 <TIM_Base_SetConfig+0x38>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc2e:	d00b      	beq.n	800bc48 <TIM_Base_SetConfig+0x38>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a31      	ldr	r2, [pc, #196]	; (800bcf8 <TIM_Base_SetConfig+0xe8>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d007      	beq.n	800bc48 <TIM_Base_SetConfig+0x38>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a30      	ldr	r2, [pc, #192]	; (800bcfc <TIM_Base_SetConfig+0xec>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d003      	beq.n	800bc48 <TIM_Base_SetConfig+0x38>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a2f      	ldr	r2, [pc, #188]	; (800bd00 <TIM_Base_SetConfig+0xf0>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d108      	bne.n	800bc5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a25      	ldr	r2, [pc, #148]	; (800bcf4 <TIM_Base_SetConfig+0xe4>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d01b      	beq.n	800bc9a <TIM_Base_SetConfig+0x8a>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc68:	d017      	beq.n	800bc9a <TIM_Base_SetConfig+0x8a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a22      	ldr	r2, [pc, #136]	; (800bcf8 <TIM_Base_SetConfig+0xe8>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d013      	beq.n	800bc9a <TIM_Base_SetConfig+0x8a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a21      	ldr	r2, [pc, #132]	; (800bcfc <TIM_Base_SetConfig+0xec>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d00f      	beq.n	800bc9a <TIM_Base_SetConfig+0x8a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a20      	ldr	r2, [pc, #128]	; (800bd00 <TIM_Base_SetConfig+0xf0>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d00b      	beq.n	800bc9a <TIM_Base_SetConfig+0x8a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a1f      	ldr	r2, [pc, #124]	; (800bd04 <TIM_Base_SetConfig+0xf4>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d007      	beq.n	800bc9a <TIM_Base_SetConfig+0x8a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a1e      	ldr	r2, [pc, #120]	; (800bd08 <TIM_Base_SetConfig+0xf8>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d003      	beq.n	800bc9a <TIM_Base_SetConfig+0x8a>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a1d      	ldr	r2, [pc, #116]	; (800bd0c <TIM_Base_SetConfig+0xfc>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d108      	bne.n	800bcac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	689a      	ldr	r2, [r3, #8]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a08      	ldr	r2, [pc, #32]	; (800bcf4 <TIM_Base_SetConfig+0xe4>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d103      	bne.n	800bce0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	691a      	ldr	r2, [r3, #16]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	615a      	str	r2, [r3, #20]
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	40010000 	.word	0x40010000
 800bcf8:	40000400 	.word	0x40000400
 800bcfc:	40000800 	.word	0x40000800
 800bd00:	40000c00 	.word	0x40000c00
 800bd04:	40014000 	.word	0x40014000
 800bd08:	40014400 	.word	0x40014400
 800bd0c:	40014800 	.word	0x40014800

0800bd10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	f023 0201 	bic.w	r2, r3, #1
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	699b      	ldr	r3, [r3, #24]
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f023 0303 	bic.w	r3, r3, #3
 800bd46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f023 0302 	bic.w	r3, r3, #2
 800bd58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a30      	ldr	r2, [pc, #192]	; (800be28 <TIM_OC1_SetConfig+0x118>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d119      	bne.n	800bda0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d008      	beq.n	800bd86 <TIM_OC1_SetConfig+0x76>
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2b08      	cmp	r3, #8
 800bd7a:	d004      	beq.n	800bd86 <TIM_OC1_SetConfig+0x76>
 800bd7c:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800bd80:	482a      	ldr	r0, [pc, #168]	; (800be2c <TIM_OC1_SetConfig+0x11c>)
 800bd82:	f7f7 fbda 	bl	800353a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f023 0308 	bic.w	r3, r3, #8
 800bd8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	f023 0304 	bic.w	r3, r3, #4
 800bd9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a21      	ldr	r2, [pc, #132]	; (800be28 <TIM_OC1_SetConfig+0x118>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d12d      	bne.n	800be04 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdb0:	d008      	beq.n	800bdc4 <TIM_OC1_SetConfig+0xb4>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	699b      	ldr	r3, [r3, #24]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d004      	beq.n	800bdc4 <TIM_OC1_SetConfig+0xb4>
 800bdba:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800bdbe:	481b      	ldr	r0, [pc, #108]	; (800be2c <TIM_OC1_SetConfig+0x11c>)
 800bdc0:	f7f7 fbbb 	bl	800353a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdcc:	d008      	beq.n	800bde0 <TIM_OC1_SetConfig+0xd0>
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	695b      	ldr	r3, [r3, #20]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d004      	beq.n	800bde0 <TIM_OC1_SetConfig+0xd0>
 800bdd6:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800bdda:	4814      	ldr	r0, [pc, #80]	; (800be2c <TIM_OC1_SetConfig+0x11c>)
 800bddc:	f7f7 fbad 	bl	800353a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bde6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	693a      	ldr	r2, [r7, #16]
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4313      	orrs	r3, r2
 800be02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	685a      	ldr	r2, [r3, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	621a      	str	r2, [r3, #32]
}
 800be1e:	bf00      	nop
 800be20:	3718      	adds	r7, #24
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	40010000 	.word	0x40010000
 800be2c:	08013930 	.word	0x08013930

0800be30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	f023 0210 	bic.w	r2, r3, #16
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	021b      	lsls	r3, r3, #8
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	f023 0320 	bic.w	r3, r3, #32
 800be7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	011b      	lsls	r3, r3, #4
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	4313      	orrs	r3, r2
 800be86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	4a31      	ldr	r2, [pc, #196]	; (800bf50 <TIM_OC2_SetConfig+0x120>)
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d11a      	bne.n	800bec6 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d008      	beq.n	800beaa <TIM_OC2_SetConfig+0x7a>
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	2b08      	cmp	r3, #8
 800be9e:	d004      	beq.n	800beaa <TIM_OC2_SetConfig+0x7a>
 800bea0:	f641 3116 	movw	r1, #6934	; 0x1b16
 800bea4:	482b      	ldr	r0, [pc, #172]	; (800bf54 <TIM_OC2_SetConfig+0x124>)
 800bea6:	f7f7 fb48 	bl	800353a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	011b      	lsls	r3, r3, #4
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bec4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a21      	ldr	r2, [pc, #132]	; (800bf50 <TIM_OC2_SetConfig+0x120>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d12f      	bne.n	800bf2e <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bed6:	d008      	beq.n	800beea <TIM_OC2_SetConfig+0xba>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d004      	beq.n	800beea <TIM_OC2_SetConfig+0xba>
 800bee0:	f641 3124 	movw	r1, #6948	; 0x1b24
 800bee4:	481b      	ldr	r0, [pc, #108]	; (800bf54 <TIM_OC2_SetConfig+0x124>)
 800bee6:	f7f7 fb28 	bl	800353a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bef2:	d008      	beq.n	800bf06 <TIM_OC2_SetConfig+0xd6>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d004      	beq.n	800bf06 <TIM_OC2_SetConfig+0xd6>
 800befc:	f641 3125 	movw	r1, #6949	; 0x1b25
 800bf00:	4814      	ldr	r0, [pc, #80]	; (800bf54 <TIM_OC2_SetConfig+0x124>)
 800bf02:	f7f7 fb1a 	bl	800353a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	695b      	ldr	r3, [r3, #20]
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	693a      	ldr	r2, [r7, #16]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	685a      	ldr	r2, [r3, #4]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	621a      	str	r2, [r3, #32]
}
 800bf48:	bf00      	nop
 800bf4a:	3718      	adds	r7, #24
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	40010000 	.word	0x40010000
 800bf54:	08013930 	.word	0x08013930

0800bf58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a1b      	ldr	r3, [r3, #32]
 800bf66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	69db      	ldr	r3, [r3, #28]
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0303 	bic.w	r3, r3, #3
 800bf8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	021b      	lsls	r3, r3, #8
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a31      	ldr	r2, [pc, #196]	; (800c078 <TIM_OC3_SetConfig+0x120>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d11a      	bne.n	800bfec <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d008      	beq.n	800bfd0 <TIM_OC3_SetConfig+0x78>
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	68db      	ldr	r3, [r3, #12]
 800bfc2:	2b08      	cmp	r3, #8
 800bfc4:	d004      	beq.n	800bfd0 <TIM_OC3_SetConfig+0x78>
 800bfc6:	f641 3161 	movw	r1, #7009	; 0x1b61
 800bfca:	482c      	ldr	r0, [pc, #176]	; (800c07c <TIM_OC3_SetConfig+0x124>)
 800bfcc:	f7f7 fab5 	bl	800353a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	021b      	lsls	r3, r3, #8
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a22      	ldr	r2, [pc, #136]	; (800c078 <TIM_OC3_SetConfig+0x120>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d12f      	bne.n	800c054 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bffc:	d008      	beq.n	800c010 <TIM_OC3_SetConfig+0xb8>
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	699b      	ldr	r3, [r3, #24]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d004      	beq.n	800c010 <TIM_OC3_SetConfig+0xb8>
 800c006:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800c00a:	481c      	ldr	r0, [pc, #112]	; (800c07c <TIM_OC3_SetConfig+0x124>)
 800c00c:	f7f7 fa95 	bl	800353a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c018:	d008      	beq.n	800c02c <TIM_OC3_SetConfig+0xd4>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d004      	beq.n	800c02c <TIM_OC3_SetConfig+0xd4>
 800c022:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800c026:	4815      	ldr	r0, [pc, #84]	; (800c07c <TIM_OC3_SetConfig+0x124>)
 800c028:	f7f7 fa87 	bl	800353a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c03a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	695b      	ldr	r3, [r3, #20]
 800c040:	011b      	lsls	r3, r3, #4
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	4313      	orrs	r3, r2
 800c046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	011b      	lsls	r3, r3, #4
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	4313      	orrs	r3, r2
 800c052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	68fa      	ldr	r2, [r7, #12]
 800c05e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	621a      	str	r2, [r3, #32]
}
 800c06e:	bf00      	nop
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	40010000 	.word	0x40010000
 800c07c:	08013930 	.word	0x08013930

0800c080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b086      	sub	sp, #24
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	021b      	lsls	r3, r3, #8
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c0ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	031b      	lsls	r3, r3, #12
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a16      	ldr	r2, [pc, #88]	; (800c134 <TIM_OC4_SetConfig+0xb4>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d117      	bne.n	800c110 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e8:	d008      	beq.n	800c0fc <TIM_OC4_SetConfig+0x7c>
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	695b      	ldr	r3, [r3, #20]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d004      	beq.n	800c0fc <TIM_OC4_SetConfig+0x7c>
 800c0f2:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800c0f6:	4810      	ldr	r0, [pc, #64]	; (800c138 <TIM_OC4_SetConfig+0xb8>)
 800c0f8:	f7f7 fa1f 	bl	800353a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	019b      	lsls	r3, r3, #6
 800c10a:	697a      	ldr	r2, [r7, #20]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	621a      	str	r2, [r3, #32]
}
 800c12a:	bf00      	nop
 800c12c:	3718      	adds	r7, #24
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	40010000 	.word	0x40010000
 800c138:	08013930 	.word	0x08013930

0800c13c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a1b      	ldr	r3, [r3, #32]
 800c14c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	f023 0201 	bic.w	r2, r3, #1
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	699b      	ldr	r3, [r3, #24]
 800c15e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	011b      	lsls	r3, r3, #4
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	4313      	orrs	r3, r2
 800c170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f023 030a 	bic.w	r3, r3, #10
 800c178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	4313      	orrs	r3, r2
 800c180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	621a      	str	r2, [r3, #32]
}
 800c18e:	bf00      	nop
 800c190:	371c      	adds	r7, #28
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b087      	sub	sp, #28
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	60f8      	str	r0, [r7, #12]
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	f023 0210 	bic.w	r2, r3, #16
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6a1b      	ldr	r3, [r3, #32]
 800c1bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c1c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	031b      	lsls	r3, r3, #12
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c1d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	011b      	lsls	r3, r3, #4
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	621a      	str	r2, [r3, #32]
}
 800c1ee:	bf00      	nop
 800c1f0:	371c      	adds	r7, #28
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1fa:	b480      	push	{r7}
 800c1fc:	b085      	sub	sp, #20
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c212:	683a      	ldr	r2, [r7, #0]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4313      	orrs	r3, r2
 800c218:	f043 0307 	orr.w	r3, r3, #7
 800c21c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	609a      	str	r2, [r3, #8]
}
 800c224:	bf00      	nop
 800c226:	3714      	adds	r7, #20
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c230:	b480      	push	{r7}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
 800c23c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c24a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	021a      	lsls	r2, r3, #8
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	431a      	orrs	r2, r3
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	4313      	orrs	r3, r2
 800c258:	697a      	ldr	r2, [r7, #20]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	697a      	ldr	r2, [r7, #20]
 800c262:	609a      	str	r2, [r3, #8]
}
 800c264:	bf00      	nop
 800c266:	371c      	adds	r7, #28
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	4a2a      	ldr	r2, [pc, #168]	; (800c328 <TIM_CCxChannelCmd+0xb8>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d020      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c28a:	d01c      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4a27      	ldr	r2, [pc, #156]	; (800c32c <TIM_CCxChannelCmd+0xbc>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d018      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	4a26      	ldr	r2, [pc, #152]	; (800c330 <TIM_CCxChannelCmd+0xc0>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d014      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4a25      	ldr	r2, [pc, #148]	; (800c334 <TIM_CCxChannelCmd+0xc4>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d010      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4a24      	ldr	r2, [pc, #144]	; (800c338 <TIM_CCxChannelCmd+0xc8>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d00c      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4a23      	ldr	r2, [pc, #140]	; (800c33c <TIM_CCxChannelCmd+0xcc>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d008      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	4a22      	ldr	r2, [pc, #136]	; (800c340 <TIM_CCxChannelCmd+0xd0>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d004      	beq.n	800c2c6 <TIM_CCxChannelCmd+0x56>
 800c2bc:	f641 5198 	movw	r1, #7576	; 0x1d98
 800c2c0:	4820      	ldr	r0, [pc, #128]	; (800c344 <TIM_CCxChannelCmd+0xd4>)
 800c2c2:	f7f7 f93a 	bl	800353a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d010      	beq.n	800c2ee <TIM_CCxChannelCmd+0x7e>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d00d      	beq.n	800c2ee <TIM_CCxChannelCmd+0x7e>
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	2b08      	cmp	r3, #8
 800c2d6:	d00a      	beq.n	800c2ee <TIM_CCxChannelCmd+0x7e>
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2b0c      	cmp	r3, #12
 800c2dc:	d007      	beq.n	800c2ee <TIM_CCxChannelCmd+0x7e>
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	2b3c      	cmp	r3, #60	; 0x3c
 800c2e2:	d004      	beq.n	800c2ee <TIM_CCxChannelCmd+0x7e>
 800c2e4:	f641 5199 	movw	r1, #7577	; 0x1d99
 800c2e8:	4816      	ldr	r0, [pc, #88]	; (800c344 <TIM_CCxChannelCmd+0xd4>)
 800c2ea:	f7f7 f926 	bl	800353a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	f003 031f 	and.w	r3, r3, #31
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6a1a      	ldr	r2, [r3, #32]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	43db      	mvns	r3, r3
 800c304:	401a      	ands	r2, r3
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6a1a      	ldr	r2, [r3, #32]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	f003 031f 	and.w	r3, r3, #31
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	fa01 f303 	lsl.w	r3, r1, r3
 800c31a:	431a      	orrs	r2, r3
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	621a      	str	r2, [r3, #32]
}
 800c320:	bf00      	nop
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	40010000 	.word	0x40010000
 800c32c:	40000400 	.word	0x40000400
 800c330:	40000800 	.word	0x40000800
 800c334:	40000c00 	.word	0x40000c00
 800c338:	40014000 	.word	0x40014000
 800c33c:	40014400 	.word	0x40014400
 800c340:	40014800 	.word	0x40014800
 800c344:	08013930 	.word	0x08013930

0800c348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a55      	ldr	r2, [pc, #340]	; (800c4ac <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d018      	beq.n	800c38e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c364:	d013      	beq.n	800c38e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a51      	ldr	r2, [pc, #324]	; (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d00e      	beq.n	800c38e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a4f      	ldr	r2, [pc, #316]	; (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d009      	beq.n	800c38e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a4e      	ldr	r2, [pc, #312]	; (800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d004      	beq.n	800c38e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800c384:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800c388:	484c      	ldr	r0, [pc, #304]	; (800c4bc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c38a:	f7f7 f8d6 	bl	800353a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d020      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b10      	cmp	r3, #16
 800c39c:	d01c      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2b20      	cmp	r3, #32
 800c3a4:	d018      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b30      	cmp	r3, #48	; 0x30
 800c3ac:	d014      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b40      	cmp	r3, #64	; 0x40
 800c3b4:	d010      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b50      	cmp	r3, #80	; 0x50
 800c3bc:	d00c      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b60      	cmp	r3, #96	; 0x60
 800c3c4:	d008      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b70      	cmp	r3, #112	; 0x70
 800c3cc:	d004      	beq.n	800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800c3ce:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800c3d2:	483a      	ldr	r0, [pc, #232]	; (800c4bc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c3d4:	f7f7 f8b1 	bl	800353a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	2b80      	cmp	r3, #128	; 0x80
 800c3de:	d008      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d004      	beq.n	800c3f2 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800c3e8:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800c3ec:	4833      	ldr	r0, [pc, #204]	; (800c4bc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c3ee:	f7f7 f8a4 	bl	800353a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e050      	b.n	800c4a2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2202      	movs	r2, #2
 800c40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a1b      	ldr	r2, [pc, #108]	; (800c4ac <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d018      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44c:	d013      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a17      	ldr	r2, [pc, #92]	; (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d00e      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a15      	ldr	r2, [pc, #84]	; (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d009      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a14      	ldr	r2, [pc, #80]	; (800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d004      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a13      	ldr	r2, [pc, #76]	; (800c4c0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d10c      	bne.n	800c490 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c47c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	4313      	orrs	r3, r2
 800c486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	40010000 	.word	0x40010000
 800c4b0:	40000400 	.word	0x40000400
 800c4b4:	40000800 	.word	0x40000800
 800c4b8:	40000c00 	.word	0x40000c00
 800c4bc:	08013968 	.word	0x08013968
 800c4c0:	40014000 	.word	0x40014000

0800c4c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a5c      	ldr	r2, [pc, #368]	; (800c648 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d004      	beq.n	800c4e6 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 800c4dc:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800c4e0:	485a      	ldr	r0, [pc, #360]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c4e2:	f7f7 f82a 	bl	800353a <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c4ee:	d008      	beq.n	800c502 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800c4f8:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800c4fc:	4853      	ldr	r0, [pc, #332]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c4fe:	f7f7 f81c 	bl	800353a <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c50a:	d008      	beq.n	800c51e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800c514:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800c518:	484c      	ldr	r0, [pc, #304]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c51a:	f7f7 f80e 	bl	800353a <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d013      	beq.n	800c54e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	689b      	ldr	r3, [r3, #8]
 800c52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c52e:	d00e      	beq.n	800c54e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c538:	d009      	beq.n	800c54e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c542:	d004      	beq.n	800c54e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800c544:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800c548:	4840      	ldr	r0, [pc, #256]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c54a:	f7f6 fff6 	bl	800353a <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	2bff      	cmp	r3, #255	; 0xff
 800c554:	d904      	bls.n	800c560 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800c556:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800c55a:	483c      	ldr	r0, [pc, #240]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c55c:	f7f6 ffed 	bl	800353a <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c568:	d008      	beq.n	800c57c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d004      	beq.n	800c57c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c572:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800c576:	4835      	ldr	r0, [pc, #212]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c578:	f7f6 ffdf 	bl	800353a <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	695b      	ldr	r3, [r3, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d009      	beq.n	800c598 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c58c:	d004      	beq.n	800c598 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800c58e:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800c592:	482e      	ldr	r0, [pc, #184]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c594:	f7f6 ffd1 	bl	800353a <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	69db      	ldr	r3, [r3, #28]
 800c59c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5a0:	d008      	beq.n	800c5b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d004      	beq.n	800c5b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800c5aa:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800c5ae:	4827      	ldr	r0, [pc, #156]	; (800c64c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800c5b0:	f7f6 ffc3 	bl	800353a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d101      	bne.n	800c5c2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800c5be:	2302      	movs	r3, #2
 800c5c0:	e03d      	b.n	800c63e <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	695b      	ldr	r3, [r3, #20]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	69db      	ldr	r3, [r3, #28]
 800c628:	4313      	orrs	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	40010000 	.word	0x40010000
 800c64c:	08013968 	.word	0x08013968

0800c650 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c650:	b084      	sub	sp, #16
 800c652:	b580      	push	{r7, lr}
 800c654:	b084      	sub	sp, #16
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
 800c65a:	f107 001c 	add.w	r0, r7, #28
 800c65e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c664:	2b01      	cmp	r3, #1
 800c666:	d122      	bne.n	800c6ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c66c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c67c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c692:	2b01      	cmp	r3, #1
 800c694:	d105      	bne.n	800c6a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	68db      	ldr	r3, [r3, #12]
 800c69a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f9a0 	bl	800c9e8 <USB_CoreReset>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	73fb      	strb	r3, [r7, #15]
 800c6ac:	e01a      	b.n	800c6e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68db      	ldr	r3, [r3, #12]
 800c6b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 f994 	bl	800c9e8 <USB_CoreReset>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d106      	bne.n	800c6d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	639a      	str	r2, [r3, #56]	; 0x38
 800c6d6:	e005      	b.n	800c6e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d10b      	bne.n	800c702 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f043 0206 	orr.w	r2, r3, #6
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	f043 0220 	orr.w	r2, r3, #32
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c702:	7bfb      	ldrb	r3, [r7, #15]
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c70e:	b004      	add	sp, #16
 800c710:	4770      	bx	lr

0800c712 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	f043 0201 	orr.w	r2, r3, #1
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	f023 0201 	bic.w	r2, r3, #1
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	370c      	adds	r7, #12
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c762:	2300      	movs	r3, #0
 800c764:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c772:	78fb      	ldrb	r3, [r7, #3]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d115      	bne.n	800c7a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c784:	2001      	movs	r0, #1
 800c786:	f7f7 ff83 	bl	8004690 <HAL_Delay>
      ms++;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3301      	adds	r3, #1
 800c78e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f91a 	bl	800c9ca <USB_GetMode>
 800c796:	4603      	mov	r3, r0
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d01e      	beq.n	800c7da <USB_SetCurrentMode+0x84>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2b31      	cmp	r3, #49	; 0x31
 800c7a0:	d9f0      	bls.n	800c784 <USB_SetCurrentMode+0x2e>
 800c7a2:	e01a      	b.n	800c7da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c7a4:	78fb      	ldrb	r3, [r7, #3]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d115      	bne.n	800c7d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c7b6:	2001      	movs	r0, #1
 800c7b8:	f7f7 ff6a 	bl	8004690 <HAL_Delay>
      ms++;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f901 	bl	800c9ca <USB_GetMode>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d005      	beq.n	800c7da <USB_SetCurrentMode+0x84>
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b31      	cmp	r3, #49	; 0x31
 800c7d2:	d9f0      	bls.n	800c7b6 <USB_SetCurrentMode+0x60>
 800c7d4:	e001      	b.n	800c7da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e005      	b.n	800c7e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b32      	cmp	r3, #50	; 0x32
 800c7de:	d101      	bne.n	800c7e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e000      	b.n	800c7e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}
	...

0800c7f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	019b      	lsls	r3, r3, #6
 800c802:	f043 0220 	orr.w	r2, r3, #32
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	3301      	adds	r3, #1
 800c80e:	60fb      	str	r3, [r7, #12]
 800c810:	4a08      	ldr	r2, [pc, #32]	; (800c834 <USB_FlushTxFifo+0x44>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d901      	bls.n	800c81a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800c816:	2303      	movs	r3, #3
 800c818:	e006      	b.n	800c828 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	f003 0320 	and.w	r3, r3, #32
 800c822:	2b20      	cmp	r3, #32
 800c824:	d0f1      	beq.n	800c80a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c826:	2300      	movs	r3, #0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3714      	adds	r7, #20
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	00030d40 	.word	0x00030d40

0800c838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c840:	2300      	movs	r3, #0
 800c842:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2210      	movs	r2, #16
 800c848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3301      	adds	r3, #1
 800c84e:	60fb      	str	r3, [r7, #12]
 800c850:	4a08      	ldr	r2, [pc, #32]	; (800c874 <USB_FlushRxFifo+0x3c>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d901      	bls.n	800c85a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800c856:	2303      	movs	r3, #3
 800c858:	e006      	b.n	800c868 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	f003 0310 	and.w	r3, r3, #16
 800c862:	2b10      	cmp	r3, #16
 800c864:	d0f1      	beq.n	800c84a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3714      	adds	r7, #20
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	00030d40 	.word	0x00030d40

0800c878 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c878:	b480      	push	{r7}
 800c87a:	b089      	sub	sp, #36	; 0x24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	4611      	mov	r1, r2
 800c884:	461a      	mov	r2, r3
 800c886:	460b      	mov	r3, r1
 800c888:	71fb      	strb	r3, [r7, #7]
 800c88a:	4613      	mov	r3, r2
 800c88c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d123      	bne.n	800c8e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c89e:	88bb      	ldrh	r3, [r7, #4]
 800c8a0:	3303      	adds	r3, #3
 800c8a2:	089b      	lsrs	r3, r3, #2
 800c8a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	61bb      	str	r3, [r7, #24]
 800c8aa:	e018      	b.n	800c8de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c8ac:	79fb      	ldrb	r3, [r7, #7]
 800c8ae:	031a      	lsls	r2, r3, #12
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	61bb      	str	r3, [r7, #24]
 800c8de:	69ba      	ldr	r2, [r7, #24]
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d3e2      	bcc.n	800c8ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3724      	adds	r7, #36	; 0x24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b08b      	sub	sp, #44	; 0x2c
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	4613      	mov	r3, r2
 800c900:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	089b      	lsrs	r3, r3, #2
 800c90e:	b29b      	uxth	r3, r3
 800c910:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c912:	88fb      	ldrh	r3, [r7, #6]
 800c914:	f003 0303 	and.w	r3, r3, #3
 800c918:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c91a:	2300      	movs	r3, #0
 800c91c:	623b      	str	r3, [r7, #32]
 800c91e:	e014      	b.n	800c94a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	3301      	adds	r3, #1
 800c930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	3301      	adds	r3, #1
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	3301      	adds	r3, #1
 800c93c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c940:	3301      	adds	r3, #1
 800c942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	3301      	adds	r3, #1
 800c948:	623b      	str	r3, [r7, #32]
 800c94a:	6a3a      	ldr	r2, [r7, #32]
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d3e6      	bcc.n	800c920 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c952:	8bfb      	ldrh	r3, [r7, #30]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d01e      	beq.n	800c996 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c958:	2300      	movs	r3, #0
 800c95a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c962:	461a      	mov	r2, r3
 800c964:	f107 0310 	add.w	r3, r7, #16
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	00db      	lsls	r3, r3, #3
 800c974:	fa22 f303 	lsr.w	r3, r2, r3
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	701a      	strb	r2, [r3, #0]
      i++;
 800c97e:	6a3b      	ldr	r3, [r7, #32]
 800c980:	3301      	adds	r3, #1
 800c982:	623b      	str	r3, [r7, #32]
      pDest++;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	3301      	adds	r3, #1
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c98a:	8bfb      	ldrh	r3, [r7, #30]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c990:	8bfb      	ldrh	r3, [r7, #30]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1ea      	bne.n	800c96c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c998:	4618      	mov	r0, r3
 800c99a:	372c      	adds	r7, #44	; 0x2c
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	695b      	ldr	r3, [r3, #20]
 800c9b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	699b      	ldr	r3, [r3, #24]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	4013      	ands	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b083      	sub	sp, #12
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	f003 0301 	and.w	r3, r3, #1
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr
	...

0800c9e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	60fb      	str	r3, [r7, #12]
 800c9fa:	4a13      	ldr	r2, [pc, #76]	; (800ca48 <USB_CoreReset+0x60>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d901      	bls.n	800ca04 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e01a      	b.n	800ca3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	691b      	ldr	r3, [r3, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	daf3      	bge.n	800c9f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	f043 0201 	orr.w	r2, r3, #1
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60fb      	str	r3, [r7, #12]
 800ca22:	4a09      	ldr	r2, [pc, #36]	; (800ca48 <USB_CoreReset+0x60>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d901      	bls.n	800ca2c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e006      	b.n	800ca3a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d0f1      	beq.n	800ca1c <USB_CoreReset+0x34>

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	00030d40 	.word	0x00030d40

0800ca4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	b580      	push	{r7, lr}
 800ca50:	b084      	sub	sp, #16
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	f107 001c 	add.w	r0, r7, #28
 800ca5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca68:	461a      	mov	r2, r3
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d018      	beq.n	800cad0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d10a      	bne.n	800caba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cab2:	f043 0304 	orr.w	r3, r3, #4
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	e014      	b.n	800cae4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cac8:	f023 0304 	bic.w	r3, r3, #4
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	e009      	b.n	800cae4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cade:	f023 0304 	bic.w	r3, r3, #4
 800cae2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cae4:	2110      	movs	r1, #16
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff fe82 	bl	800c7f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f7ff fea3 	bl	800c838 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
 800caf6:	e015      	b.n	800cb24 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	015a      	lsls	r2, r3, #5
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	4413      	add	r3, r2
 800cb00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb04:	461a      	mov	r2, r3
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb0a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	015a      	lsls	r2, r3, #5
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	4413      	add	r3, r2
 800cb14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb18:	461a      	mov	r2, r3
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3301      	adds	r3, #1
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d3e5      	bcc.n	800caf8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb38:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00b      	beq.n	800cb5e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a13      	ldr	r2, [pc, #76]	; (800cba0 <USB_HostInit+0x154>)
 800cb52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a13      	ldr	r2, [pc, #76]	; (800cba4 <USB_HostInit+0x158>)
 800cb58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cb5c:	e009      	b.n	800cb72 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2280      	movs	r2, #128	; 0x80
 800cb62:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a10      	ldr	r2, [pc, #64]	; (800cba8 <USB_HostInit+0x15c>)
 800cb68:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a0f      	ldr	r2, [pc, #60]	; (800cbac <USB_HostInit+0x160>)
 800cb6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d105      	bne.n	800cb84 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	f043 0210 	orr.w	r2, r3, #16
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	699a      	ldr	r2, [r3, #24]
 800cb88:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <USB_HostInit+0x164>)
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb9c:	b004      	add	sp, #16
 800cb9e:	4770      	bx	lr
 800cba0:	01000200 	.word	0x01000200
 800cba4:	00e00300 	.word	0x00e00300
 800cba8:	00600080 	.word	0x00600080
 800cbac:	004000e0 	.word	0x004000e0
 800cbb0:	a3200008 	.word	0xa3200008

0800cbb4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cbd2:	f023 0303 	bic.w	r3, r3, #3
 800cbd6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	f003 0303 	and.w	r3, r3, #3
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cbec:	4313      	orrs	r3, r2
 800cbee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d107      	bne.n	800cc06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800cc02:	6053      	str	r3, [r2, #4]
 800cc04:	e009      	b.n	800cc1a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800cc06:	78fb      	ldrb	r3, [r7, #3]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d106      	bne.n	800cc1a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc12:	461a      	mov	r2, r3
 800cc14:	f241 7370 	movw	r3, #6000	; 0x1770
 800cc18:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3714      	adds	r7, #20
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cc48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc56:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cc58:	2064      	movs	r0, #100	; 0x64
 800cc5a:	f7f7 fd19 	bl	8004690 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cc66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc6a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cc6c:	200a      	movs	r0, #10
 800cc6e:	f7f7 fd0f 	bl	8004690 <HAL_Delay>

  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3710      	adds	r7, #16
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cca0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d109      	bne.n	800ccc0 <USB_DriveVbus+0x44>
 800ccac:	78fb      	ldrb	r3, [r7, #3]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d106      	bne.n	800ccc0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	68fa      	ldr	r2, [r7, #12]
 800ccb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ccba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ccbe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ccc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccca:	d109      	bne.n	800cce0 <USB_DriveVbus+0x64>
 800cccc:	78fb      	ldrb	r3, [r7, #3]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ccda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccde:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b085      	sub	sp, #20
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	0c5b      	lsrs	r3, r3, #17
 800cd0c:	f003 0303 	and.w	r3, r3, #3
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	b29b      	uxth	r3, r3
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3714      	adds	r7, #20
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
	...

0800cd40 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	4608      	mov	r0, r1
 800cd4a:	4611      	mov	r1, r2
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	4603      	mov	r3, r0
 800cd50:	70fb      	strb	r3, [r7, #3]
 800cd52:	460b      	mov	r3, r1
 800cd54:	70bb      	strb	r3, [r7, #2]
 800cd56:	4613      	mov	r3, r2
 800cd58:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cd62:	78fb      	ldrb	r3, [r7, #3]
 800cd64:	015a      	lsls	r2, r3, #5
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	4413      	add	r3, r2
 800cd6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd6e:	461a      	mov	r2, r3
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd74:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cd76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	d87e      	bhi.n	800ce7c <USB_HC_Init+0x13c>
 800cd7e:	a201      	add	r2, pc, #4	; (adr r2, 800cd84 <USB_HC_Init+0x44>)
 800cd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd84:	0800cd95 	.word	0x0800cd95
 800cd88:	0800ce3f 	.word	0x0800ce3f
 800cd8c:	0800cd95 	.word	0x0800cd95
 800cd90:	0800ce01 	.word	0x0800ce01
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cd94:	78fb      	ldrb	r3, [r7, #3]
 800cd96:	015a      	lsls	r2, r3, #5
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cda0:	461a      	mov	r2, r3
 800cda2:	f240 439d 	movw	r3, #1181	; 0x49d
 800cda6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cda8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	da10      	bge.n	800cdd2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cdb0:	78fb      	ldrb	r3, [r7, #3]
 800cdb2:	015a      	lsls	r2, r3, #5
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	78fa      	ldrb	r2, [r7, #3]
 800cdc0:	0151      	lsls	r1, r2, #5
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	440a      	add	r2, r1
 800cdc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cdd0:	e057      	b.n	800ce82 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d051      	beq.n	800ce82 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cdde:	78fb      	ldrb	r3, [r7, #3]
 800cde0:	015a      	lsls	r2, r3, #5
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	4413      	add	r3, r2
 800cde6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	78fa      	ldrb	r2, [r7, #3]
 800cdee:	0151      	lsls	r1, r2, #5
 800cdf0:	693a      	ldr	r2, [r7, #16]
 800cdf2:	440a      	add	r2, r1
 800cdf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cdfc:	60d3      	str	r3, [r2, #12]
      break;
 800cdfe:	e040      	b.n	800ce82 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce00:	78fb      	ldrb	r3, [r7, #3]
 800ce02:	015a      	lsls	r2, r3, #5
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	f240 639d 	movw	r3, #1693	; 0x69d
 800ce12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ce14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	da34      	bge.n	800ce86 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ce1c:	78fb      	ldrb	r3, [r7, #3]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce28:	68db      	ldr	r3, [r3, #12]
 800ce2a:	78fa      	ldrb	r2, [r7, #3]
 800ce2c:	0151      	lsls	r1, r2, #5
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	440a      	add	r2, r1
 800ce32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce3a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ce3c:	e023      	b.n	800ce86 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce3e:	78fb      	ldrb	r3, [r7, #3]
 800ce40:	015a      	lsls	r2, r3, #5
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	4413      	add	r3, r2
 800ce46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f240 2325 	movw	r3, #549	; 0x225
 800ce50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ce52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da17      	bge.n	800ce8a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ce5a:	78fb      	ldrb	r3, [r7, #3]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	78fa      	ldrb	r2, [r7, #3]
 800ce6a:	0151      	lsls	r1, r2, #5
 800ce6c:	693a      	ldr	r2, [r7, #16]
 800ce6e:	440a      	add	r2, r1
 800ce70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce74:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ce78:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ce7a:	e006      	b.n	800ce8a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	77fb      	strb	r3, [r7, #31]
      break;
 800ce80:	e004      	b.n	800ce8c <USB_HC_Init+0x14c>
      break;
 800ce82:	bf00      	nop
 800ce84:	e002      	b.n	800ce8c <USB_HC_Init+0x14c>
      break;
 800ce86:	bf00      	nop
 800ce88:	e000      	b.n	800ce8c <USB_HC_Init+0x14c>
      break;
 800ce8a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce92:	699a      	ldr	r2, [r3, #24]
 800ce94:	78fb      	ldrb	r3, [r7, #3]
 800ce96:	f003 030f 	and.w	r3, r3, #15
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cea0:	6939      	ldr	r1, [r7, #16]
 800cea2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cea6:	4313      	orrs	r3, r2
 800cea8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ceb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	da03      	bge.n	800cec6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cec2:	61bb      	str	r3, [r7, #24]
 800cec4:	e001      	b.n	800ceca <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800cec6:	2300      	movs	r3, #0
 800cec8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff ff0f 	bl	800ccee <USB_GetHostSpeed>
 800ced0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ced2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ced6:	2b02      	cmp	r3, #2
 800ced8:	d106      	bne.n	800cee8 <USB_HC_Init+0x1a8>
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2b02      	cmp	r3, #2
 800cede:	d003      	beq.n	800cee8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	e001      	b.n	800ceec <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cee8:	2300      	movs	r3, #0
 800ceea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ceec:	787b      	ldrb	r3, [r7, #1]
 800ceee:	059b      	lsls	r3, r3, #22
 800cef0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cef4:	78bb      	ldrb	r3, [r7, #2]
 800cef6:	02db      	lsls	r3, r3, #11
 800cef8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cefc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cefe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf02:	049b      	lsls	r3, r3, #18
 800cf04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cf08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cf0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cf10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	0159      	lsls	r1, r3, #5
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	440b      	add	r3, r1
 800cf1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf22:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cf28:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cf2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf2e:	2b03      	cmp	r3, #3
 800cf30:	d10f      	bne.n	800cf52 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cf32:	78fb      	ldrb	r3, [r7, #3]
 800cf34:	015a      	lsls	r2, r3, #5
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	4413      	add	r3, r2
 800cf3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	78fa      	ldrb	r2, [r7, #3]
 800cf42:	0151      	lsls	r1, r2, #5
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	440a      	add	r2, r1
 800cf48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf50:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cf52:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3720      	adds	r7, #32
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08c      	sub	sp, #48	; 0x30
 800cf60:	af02      	add	r7, sp, #8
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	785b      	ldrb	r3, [r3, #1]
 800cf72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800cf74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf78:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d02d      	beq.n	800cfe2 <USB_HC_StartXfer+0x86>
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	791b      	ldrb	r3, [r3, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d129      	bne.n	800cfe2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d117      	bne.n	800cfc4 <USB_HC_StartXfer+0x68>
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	79db      	ldrb	r3, [r3, #7]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d003      	beq.n	800cfa4 <USB_HC_StartXfer+0x48>
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	79db      	ldrb	r3, [r3, #7]
 800cfa0:	2b02      	cmp	r3, #2
 800cfa2:	d10f      	bne.n	800cfc4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	015a      	lsls	r2, r3, #5
 800cfa8:	6a3b      	ldr	r3, [r7, #32]
 800cfaa:	4413      	add	r3, r2
 800cfac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	69fa      	ldr	r2, [r7, #28]
 800cfb4:	0151      	lsls	r1, r2, #5
 800cfb6:	6a3a      	ldr	r2, [r7, #32]
 800cfb8:	440a      	add	r2, r1
 800cfba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfc2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800cfc4:	79fb      	ldrb	r3, [r7, #7]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10b      	bne.n	800cfe2 <USB_HC_StartXfer+0x86>
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	795b      	ldrb	r3, [r3, #5]
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d107      	bne.n	800cfe2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	785b      	ldrb	r3, [r3, #1]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 fa2f 	bl	800d43c <USB_DoPing>
      return HAL_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e0f8      	b.n	800d1d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d018      	beq.n	800d01c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	8912      	ldrh	r2, [r2, #8]
 800cff2:	4413      	add	r3, r2
 800cff4:	3b01      	subs	r3, #1
 800cff6:	68ba      	ldr	r2, [r7, #8]
 800cff8:	8912      	ldrh	r2, [r2, #8]
 800cffa:	fbb3 f3f2 	udiv	r3, r3, r2
 800cffe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d000:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d002:	8b7b      	ldrh	r3, [r7, #26]
 800d004:	429a      	cmp	r2, r3
 800d006:	d90b      	bls.n	800d020 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d008:	8b7b      	ldrh	r3, [r7, #26]
 800d00a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d00c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	8912      	ldrh	r2, [r2, #8]
 800d012:	fb02 f203 	mul.w	r2, r2, r3
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	611a      	str	r2, [r3, #16]
 800d01a:	e001      	b.n	800d020 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d01c:	2301      	movs	r3, #1
 800d01e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	78db      	ldrb	r3, [r3, #3]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d007      	beq.n	800d038 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	8912      	ldrh	r2, [r2, #8]
 800d02e:	fb02 f203 	mul.w	r2, r2, r3
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	611a      	str	r2, [r3, #16]
 800d036:	e003      	b.n	800d040 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	695a      	ldr	r2, [r3, #20]
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	691b      	ldr	r3, [r3, #16]
 800d044:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d04a:	04d9      	lsls	r1, r3, #19
 800d04c:	4b63      	ldr	r3, [pc, #396]	; (800d1dc <USB_HC_StartXfer+0x280>)
 800d04e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d050:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	7a9b      	ldrb	r3, [r3, #10]
 800d056:	075b      	lsls	r3, r3, #29
 800d058:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d05c:	69f9      	ldr	r1, [r7, #28]
 800d05e:	0148      	lsls	r0, r1, #5
 800d060:	6a39      	ldr	r1, [r7, #32]
 800d062:	4401      	add	r1, r0
 800d064:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d068:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d06a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d009      	beq.n	800d086 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	68d9      	ldr	r1, [r3, #12]
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	015a      	lsls	r2, r3, #5
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	4413      	add	r3, r2
 800d07e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d082:	460a      	mov	r2, r1
 800d084:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b00      	cmp	r3, #0
 800d094:	bf0c      	ite	eq
 800d096:	2301      	moveq	r3, #1
 800d098:	2300      	movne	r3, #0
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	015a      	lsls	r2, r3, #5
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	69fa      	ldr	r2, [r7, #28]
 800d0ae:	0151      	lsls	r1, r2, #5
 800d0b0:	6a3a      	ldr	r2, [r7, #32]
 800d0b2:	440a      	add	r2, r1
 800d0b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d0be:	69fb      	ldr	r3, [r7, #28]
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	7e7b      	ldrb	r3, [r7, #25]
 800d0ce:	075b      	lsls	r3, r3, #29
 800d0d0:	69f9      	ldr	r1, [r7, #28]
 800d0d2:	0148      	lsls	r0, r1, #5
 800d0d4:	6a39      	ldr	r1, [r7, #32]
 800d0d6:	4401      	add	r1, r0
 800d0d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	015a      	lsls	r2, r3, #5
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	78db      	ldrb	r3, [r3, #3]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d004      	beq.n	800d10a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d106:	613b      	str	r3, [r7, #16]
 800d108:	e003      	b.n	800d112 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d110:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d118:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	015a      	lsls	r2, r3, #5
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	4413      	add	r3, r2
 800d122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d126:	461a      	mov	r2, r3
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d001      	beq.n	800d136 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d132:	2300      	movs	r3, #0
 800d134:	e04e      	b.n	800d1d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	78db      	ldrb	r3, [r3, #3]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d149      	bne.n	800d1d2 <USB_HC_StartXfer+0x276>
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	695b      	ldr	r3, [r3, #20]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d045      	beq.n	800d1d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	79db      	ldrb	r3, [r3, #7]
 800d14a:	2b03      	cmp	r3, #3
 800d14c:	d830      	bhi.n	800d1b0 <USB_HC_StartXfer+0x254>
 800d14e:	a201      	add	r2, pc, #4	; (adr r2, 800d154 <USB_HC_StartXfer+0x1f8>)
 800d150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d154:	0800d165 	.word	0x0800d165
 800d158:	0800d189 	.word	0x0800d189
 800d15c:	0800d165 	.word	0x0800d165
 800d160:	0800d189 	.word	0x0800d189
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	695b      	ldr	r3, [r3, #20]
 800d168:	3303      	adds	r3, #3
 800d16a:	089b      	lsrs	r3, r3, #2
 800d16c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d16e:	8afa      	ldrh	r2, [r7, #22]
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d174:	b29b      	uxth	r3, r3
 800d176:	429a      	cmp	r2, r3
 800d178:	d91c      	bls.n	800d1b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	699b      	ldr	r3, [r3, #24]
 800d17e:	f043 0220 	orr.w	r2, r3, #32
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	619a      	str	r2, [r3, #24]
        }
        break;
 800d186:	e015      	b.n	800d1b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	3303      	adds	r3, #3
 800d18e:	089b      	lsrs	r3, r3, #2
 800d190:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d192:	8afa      	ldrh	r2, [r7, #22]
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d90a      	bls.n	800d1b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	619a      	str	r2, [r3, #24]
        }
        break;
 800d1ae:	e003      	b.n	800d1b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d1b0:	bf00      	nop
 800d1b2:	e002      	b.n	800d1ba <USB_HC_StartXfer+0x25e>
        break;
 800d1b4:	bf00      	nop
 800d1b6:	e000      	b.n	800d1ba <USB_HC_StartXfer+0x25e>
        break;
 800d1b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	68d9      	ldr	r1, [r3, #12]
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	785a      	ldrb	r2, [r3, #1]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	9000      	str	r0, [sp, #0]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f7ff fb53 	bl	800c878 <USB_WritePacket>
  }

  return HAL_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3728      	adds	r7, #40	; 0x28
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	1ff80000 	.word	0x1ff80000

0800d1e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1f2:	695b      	ldr	r3, [r3, #20]
 800d1f4:	b29b      	uxth	r3, r3
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3714      	adds	r7, #20
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr

0800d202 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d202:	b480      	push	{r7}
 800d204:	b089      	sub	sp, #36	; 0x24
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	460b      	mov	r3, r1
 800d20c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d212:	78fb      	ldrb	r3, [r7, #3]
 800d214:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d216:	2300      	movs	r3, #0
 800d218:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	015a      	lsls	r2, r3, #5
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	4413      	add	r3, r2
 800d222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	0c9b      	lsrs	r3, r3, #18
 800d22a:	f003 0303 	and.w	r3, r3, #3
 800d22e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	015a      	lsls	r2, r3, #5
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	4413      	add	r3, r2
 800d238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	0fdb      	lsrs	r3, r3, #31
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	f003 0320 	and.w	r3, r3, #32
 800d24e:	2b20      	cmp	r3, #32
 800d250:	d104      	bne.n	800d25c <USB_HC_Halt+0x5a>
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d258:	2300      	movs	r3, #0
 800d25a:	e0e8      	b.n	800d42e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d002      	beq.n	800d268 <USB_HC_Halt+0x66>
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	2b02      	cmp	r3, #2
 800d266:	d173      	bne.n	800d350 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	015a      	lsls	r2, r3, #5
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	4413      	add	r3, r2
 800d270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	0151      	lsls	r1, r2, #5
 800d27a:	69ba      	ldr	r2, [r7, #24]
 800d27c:	440a      	add	r2, r1
 800d27e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d282:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d286:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	f003 0320 	and.w	r3, r3, #32
 800d290:	2b00      	cmp	r3, #0
 800d292:	f040 80cb 	bne.w	800d42c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d143      	bne.n	800d32a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	015a      	lsls	r2, r3, #5
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	0151      	lsls	r1, r2, #5
 800d2b4:	69ba      	ldr	r2, [r7, #24]
 800d2b6:	440a      	add	r2, r1
 800d2b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	015a      	lsls	r2, r3, #5
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	697a      	ldr	r2, [r7, #20]
 800d2d2:	0151      	lsls	r1, r2, #5
 800d2d4:	69ba      	ldr	r2, [r7, #24]
 800d2d6:	440a      	add	r2, r1
 800d2d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d2e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	015a      	lsls	r2, r3, #5
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	697a      	ldr	r2, [r7, #20]
 800d2f2:	0151      	lsls	r1, r2, #5
 800d2f4:	69ba      	ldr	r2, [r7, #24]
 800d2f6:	440a      	add	r2, r1
 800d2f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d300:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	3301      	adds	r3, #1
 800d306:	61fb      	str	r3, [r7, #28]
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d30e:	d81d      	bhi.n	800d34c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	015a      	lsls	r2, r3, #5
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	4413      	add	r3, r2
 800d318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d326:	d0ec      	beq.n	800d302 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d328:	e080      	b.n	800d42c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	015a      	lsls	r2, r3, #5
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	4413      	add	r3, r2
 800d332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	697a      	ldr	r2, [r7, #20]
 800d33a:	0151      	lsls	r1, r2, #5
 800d33c:	69ba      	ldr	r2, [r7, #24]
 800d33e:	440a      	add	r2, r1
 800d340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d348:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d34a:	e06f      	b.n	800d42c <USB_HC_Halt+0x22a>
            break;
 800d34c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d34e:	e06d      	b.n	800d42c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	015a      	lsls	r2, r3, #5
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	4413      	add	r3, r2
 800d358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	0151      	lsls	r1, r2, #5
 800d362:	69ba      	ldr	r2, [r7, #24]
 800d364:	440a      	add	r2, r1
 800d366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d36a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d36e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d143      	bne.n	800d408 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	015a      	lsls	r2, r3, #5
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	4413      	add	r3, r2
 800d388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	0151      	lsls	r1, r2, #5
 800d392:	69ba      	ldr	r2, [r7, #24]
 800d394:	440a      	add	r2, r1
 800d396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d39a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d39e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	015a      	lsls	r2, r3, #5
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	0151      	lsls	r1, r2, #5
 800d3b2:	69ba      	ldr	r2, [r7, #24]
 800d3b4:	440a      	add	r2, r1
 800d3b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	015a      	lsls	r2, r3, #5
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	0151      	lsls	r1, r2, #5
 800d3d2:	69ba      	ldr	r2, [r7, #24]
 800d3d4:	440a      	add	r2, r1
 800d3d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d3de:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	61fb      	str	r3, [r7, #28]
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3ec:	d81d      	bhi.n	800d42a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	015a      	lsls	r2, r3, #5
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d404:	d0ec      	beq.n	800d3e0 <USB_HC_Halt+0x1de>
 800d406:	e011      	b.n	800d42c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	697a      	ldr	r2, [r7, #20]
 800d418:	0151      	lsls	r1, r2, #5
 800d41a:	69ba      	ldr	r2, [r7, #24]
 800d41c:	440a      	add	r2, r1
 800d41e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	e000      	b.n	800d42c <USB_HC_Halt+0x22a>
          break;
 800d42a:	bf00      	nop
    }
  }

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3724      	adds	r7, #36	; 0x24
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr
	...

0800d43c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d44c:	78fb      	ldrb	r3, [r7, #3]
 800d44e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d450:	2301      	movs	r3, #1
 800d452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	04da      	lsls	r2, r3, #19
 800d458:	4b15      	ldr	r3, [pc, #84]	; (800d4b0 <USB_DoPing+0x74>)
 800d45a:	4013      	ands	r3, r2
 800d45c:	693a      	ldr	r2, [r7, #16]
 800d45e:	0151      	lsls	r1, r2, #5
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	440a      	add	r2, r1
 800d464:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d468:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d46c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	015a      	lsls	r2, r3, #5
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	4413      	add	r3, r2
 800d476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d484:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d48c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	015a      	lsls	r2, r3, #5
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	4413      	add	r3, r2
 800d496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d49a:	461a      	mov	r2, r3
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	371c      	adds	r7, #28
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	1ff80000 	.word	0x1ff80000

0800d4b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f7ff f935 	bl	800c734 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d4ca:	2110      	movs	r1, #16
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7ff f98f 	bl	800c7f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7ff f9b0 	bl	800c838 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d4d8:	2300      	movs	r3, #0
 800d4da:	613b      	str	r3, [r7, #16]
 800d4dc:	e01f      	b.n	800d51e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	015a      	lsls	r2, r3, #5
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d504:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	015a      	lsls	r2, r3, #5
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	4413      	add	r3, r2
 800d50e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d512:	461a      	mov	r2, r3
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	3301      	adds	r3, #1
 800d51c:	613b      	str	r3, [r7, #16]
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	2b0f      	cmp	r3, #15
 800d522:	d9dc      	bls.n	800d4de <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d524:	2300      	movs	r3, #0
 800d526:	613b      	str	r3, [r7, #16]
 800d528:	e034      	b.n	800d594 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	015a      	lsls	r2, r3, #5
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	4413      	add	r3, r2
 800d532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d540:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d548:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d550:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	015a      	lsls	r2, r3, #5
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	4413      	add	r3, r2
 800d55a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d55e:	461a      	mov	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	3301      	adds	r3, #1
 800d568:	617b      	str	r3, [r7, #20]
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d570:	d80c      	bhi.n	800d58c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	015a      	lsls	r2, r3, #5
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	4413      	add	r3, r2
 800d57a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d588:	d0ec      	beq.n	800d564 <USB_StopHost+0xb0>
 800d58a:	e000      	b.n	800d58e <USB_StopHost+0xda>
        break;
 800d58c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	3301      	adds	r3, #1
 800d592:	613b      	str	r3, [r7, #16]
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	2b0f      	cmp	r3, #15
 800d598:	d9c7      	bls.n	800d52a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f7ff f8ae 	bl	800c712 <USB_EnableGlobalInt>

  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d5c0:	b590      	push	{r4, r7, lr}
 800d5c2:	b089      	sub	sp, #36	; 0x24
 800d5c4:	af04      	add	r7, sp, #16
 800d5c6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	2102      	movs	r1, #2
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fc66 	bl	800dea0 <USBH_FindInterface>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	2bff      	cmp	r3, #255	; 0xff
 800d5dc:	d002      	beq.n	800d5e4 <USBH_CDC_InterfaceInit+0x24>
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d901      	bls.n	800d5e8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d5e4:	2302      	movs	r3, #2
 800d5e6:	e13d      	b.n	800d864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d5e8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fc3b 	bl	800de68 <USBH_SelectInterface>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	e131      	b.n	800d864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d606:	2050      	movs	r0, #80	; 0x50
 800d608:	f002 fa00 	bl	800fa0c <malloc>
 800d60c:	4603      	mov	r3, r0
 800d60e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d616:	69db      	ldr	r3, [r3, #28]
 800d618:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d620:	2302      	movs	r3, #2
 800d622:	e11f      	b.n	800d864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d624:	2250      	movs	r2, #80	; 0x50
 800d626:	2100      	movs	r1, #0
 800d628:	68b8      	ldr	r0, [r7, #8]
 800d62a:	f002 f9ff 	bl	800fa2c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d62e:	7bfb      	ldrb	r3, [r7, #15]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	211a      	movs	r1, #26
 800d634:	fb01 f303 	mul.w	r3, r1, r3
 800d638:	4413      	add	r3, r2
 800d63a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	b25b      	sxtb	r3, r3
 800d642:	2b00      	cmp	r3, #0
 800d644:	da15      	bge.n	800d672 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d646:	7bfb      	ldrb	r3, [r7, #15]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	211a      	movs	r1, #26
 800d64c:	fb01 f303 	mul.w	r3, r1, r3
 800d650:	4413      	add	r3, r2
 800d652:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d656:	781a      	ldrb	r2, [r3, #0]
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	211a      	movs	r1, #26
 800d662:	fb01 f303 	mul.w	r3, r1, r3
 800d666:	4413      	add	r3, r2
 800d668:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d66c:	881a      	ldrh	r2, [r3, #0]
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	785b      	ldrb	r3, [r3, #1]
 800d676:	4619      	mov	r1, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f001 fe32 	bl	800f2e2 <USBH_AllocPipe>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	7819      	ldrb	r1, [r3, #0]
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	7858      	ldrb	r0, [r3, #1]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	8952      	ldrh	r2, [r2, #10]
 800d69e:	9202      	str	r2, [sp, #8]
 800d6a0:	2203      	movs	r2, #3
 800d6a2:	9201      	str	r2, [sp, #4]
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f001 fdea 	bl	800f284 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f002 f8f9 	bl	800f8b0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d6be:	2300      	movs	r3, #0
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	210a      	movs	r1, #10
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fbeb 	bl	800dea0 <USBH_FindInterface>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	2bff      	cmp	r3, #255	; 0xff
 800d6d2:	d002      	beq.n	800d6da <USBH_CDC_InterfaceInit+0x11a>
 800d6d4:	7bfb      	ldrb	r3, [r7, #15]
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d901      	bls.n	800d6de <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d6da:	2302      	movs	r3, #2
 800d6dc:	e0c2      	b.n	800d864 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	211a      	movs	r1, #26
 800d6e4:	fb01 f303 	mul.w	r3, r1, r3
 800d6e8:	4413      	add	r3, r2
 800d6ea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	b25b      	sxtb	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	da16      	bge.n	800d724 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	211a      	movs	r1, #26
 800d6fc:	fb01 f303 	mul.w	r3, r1, r3
 800d700:	4413      	add	r3, r2
 800d702:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d706:	781a      	ldrb	r2, [r3, #0]
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d70c:	7bfb      	ldrb	r3, [r7, #15]
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	211a      	movs	r1, #26
 800d712:	fb01 f303 	mul.w	r3, r1, r3
 800d716:	4413      	add	r3, r2
 800d718:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d71c:	881a      	ldrh	r2, [r3, #0]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	835a      	strh	r2, [r3, #26]
 800d722:	e015      	b.n	800d750 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d724:	7bfb      	ldrb	r3, [r7, #15]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	211a      	movs	r1, #26
 800d72a:	fb01 f303 	mul.w	r3, r1, r3
 800d72e:	4413      	add	r3, r2
 800d730:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d734:	781a      	ldrb	r2, [r3, #0]
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d73a:	7bfb      	ldrb	r3, [r7, #15]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	211a      	movs	r1, #26
 800d740:	fb01 f303 	mul.w	r3, r1, r3
 800d744:	4413      	add	r3, r2
 800d746:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d74a:	881a      	ldrh	r2, [r3, #0]
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d750:	7bfb      	ldrb	r3, [r7, #15]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	211a      	movs	r1, #26
 800d756:	fb01 f303 	mul.w	r3, r1, r3
 800d75a:	4413      	add	r3, r2
 800d75c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	b25b      	sxtb	r3, r3
 800d764:	2b00      	cmp	r3, #0
 800d766:	da16      	bge.n	800d796 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d768:	7bfb      	ldrb	r3, [r7, #15]
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	211a      	movs	r1, #26
 800d76e:	fb01 f303 	mul.w	r3, r1, r3
 800d772:	4413      	add	r3, r2
 800d774:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d778:	781a      	ldrb	r2, [r3, #0]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	211a      	movs	r1, #26
 800d784:	fb01 f303 	mul.w	r3, r1, r3
 800d788:	4413      	add	r3, r2
 800d78a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d78e:	881a      	ldrh	r2, [r3, #0]
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	835a      	strh	r2, [r3, #26]
 800d794:	e015      	b.n	800d7c2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d796:	7bfb      	ldrb	r3, [r7, #15]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	211a      	movs	r1, #26
 800d79c:	fb01 f303 	mul.w	r3, r1, r3
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d7a6:	781a      	ldrb	r2, [r3, #0]
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	211a      	movs	r1, #26
 800d7b2:	fb01 f303 	mul.w	r3, r1, r3
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d7bc:	881a      	ldrh	r2, [r3, #0]
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	7b9b      	ldrb	r3, [r3, #14]
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f001 fd8a 	bl	800f2e2 <USBH_AllocPipe>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	7bdb      	ldrb	r3, [r3, #15]
 800d7da:	4619      	mov	r1, r3
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f001 fd80 	bl	800f2e2 <USBH_AllocPipe>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	7b59      	ldrb	r1, [r3, #13]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	7b98      	ldrb	r0, [r3, #14]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	8b12      	ldrh	r2, [r2, #24]
 800d802:	9202      	str	r2, [sp, #8]
 800d804:	2202      	movs	r2, #2
 800d806:	9201      	str	r2, [sp, #4]
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	4623      	mov	r3, r4
 800d80c:	4602      	mov	r2, r0
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f001 fd38 	bl	800f284 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	7b19      	ldrb	r1, [r3, #12]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	7bd8      	ldrb	r0, [r3, #15]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	8b52      	ldrh	r2, [r2, #26]
 800d82c:	9202      	str	r2, [sp, #8]
 800d82e:	2202      	movs	r2, #2
 800d830:	9201      	str	r2, [sp, #4]
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	4623      	mov	r3, r4
 800d836:	4602      	mov	r2, r0
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f001 fd23 	bl	800f284 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2200      	movs	r2, #0
 800d842:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	7b5b      	ldrb	r3, [r3, #13]
 800d84a:	2200      	movs	r2, #0
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f002 f82e 	bl	800f8b0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	7b1b      	ldrb	r3, [r3, #12]
 800d858:	2200      	movs	r2, #0
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f002 f827 	bl	800f8b0 <USBH_LL_SetToggle>

  return USBH_OK;
 800d862:	2300      	movs	r3, #0
}
 800d864:	4618      	mov	r0, r3
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}

0800d86c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d87a:	69db      	ldr	r3, [r3, #28]
 800d87c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00e      	beq.n	800d8a4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f001 fd18 	bl	800f2c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	4619      	mov	r1, r3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f001 fd43 	bl	800f324 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	7b1b      	ldrb	r3, [r3, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00e      	beq.n	800d8ca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	7b1b      	ldrb	r3, [r3, #12]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f001 fd05 	bl	800f2c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	7b1b      	ldrb	r3, [r3, #12]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f001 fd30 	bl	800f324 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	7b5b      	ldrb	r3, [r3, #13]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00e      	beq.n	800d8f0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	7b5b      	ldrb	r3, [r3, #13]
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f001 fcf2 	bl	800f2c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	7b5b      	ldrb	r3, [r3, #13]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f001 fd1d 	bl	800f324 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8f6:	69db      	ldr	r3, [r3, #28]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00b      	beq.n	800d914 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d902:	69db      	ldr	r3, [r3, #28]
 800d904:	4618      	mov	r0, r3
 800d906:	f002 f889 	bl	800fa1c <free>
    phost->pActiveClass->pData = 0U;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d910:	2200      	movs	r2, #0
 800d912:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b084      	sub	sp, #16
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d92c:	69db      	ldr	r3, [r3, #28]
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	3340      	adds	r3, #64	; 0x40
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f8b1 	bl	800da9e <GetLineCoding>
 800d93c:	4603      	mov	r3, r0
 800d93e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d940:	7afb      	ldrb	r3, [r7, #11]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d105      	bne.n	800d952 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d94c:	2102      	movs	r1, #2
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d952:	7afb      	ldrb	r3, [r7, #11]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d964:	2301      	movs	r3, #1
 800d966:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d97c:	2b04      	cmp	r3, #4
 800d97e:	d877      	bhi.n	800da70 <USBH_CDC_Process+0x114>
 800d980:	a201      	add	r2, pc, #4	; (adr r2, 800d988 <USBH_CDC_Process+0x2c>)
 800d982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d986:	bf00      	nop
 800d988:	0800d99d 	.word	0x0800d99d
 800d98c:	0800d9a3 	.word	0x0800d9a3
 800d990:	0800d9d3 	.word	0x0800d9d3
 800d994:	0800da47 	.word	0x0800da47
 800d998:	0800da55 	.word	0x0800da55
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73fb      	strb	r3, [r7, #15]
      break;
 800d9a0:	e06d      	b.n	800da7e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 f897 	bl	800dadc <SetLineCoding>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d9b2:	7bbb      	ldrb	r3, [r7, #14]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d104      	bne.n	800d9c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	2202      	movs	r2, #2
 800d9bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d9c0:	e058      	b.n	800da74 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d9c2:	7bbb      	ldrb	r3, [r7, #14]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d055      	beq.n	800da74 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2204      	movs	r2, #4
 800d9cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d9d0:	e050      	b.n	800da74 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	3340      	adds	r3, #64	; 0x40
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 f860 	bl	800da9e <GetLineCoding>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d9e2:	7bbb      	ldrb	r3, [r7, #14]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d126      	bne.n	800da36 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9fa:	791b      	ldrb	r3, [r3, #4]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d13b      	bne.n	800da78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da0a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d133      	bne.n	800da78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da1a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d12b      	bne.n	800da78 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da28:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d124      	bne.n	800da78 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f958 	bl	800dce4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800da34:	e020      	b.n	800da78 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800da36:	7bbb      	ldrb	r3, [r7, #14]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d01d      	beq.n	800da78 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2204      	movs	r2, #4
 800da40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800da44:	e018      	b.n	800da78 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f867 	bl	800db1a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f8da 	bl	800dc06 <CDC_ProcessReception>
      break;
 800da52:	e014      	b.n	800da7e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800da54:	2100      	movs	r1, #0
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 ffe3 	bl	800ea22 <USBH_ClrFeature>
 800da5c:	4603      	mov	r3, r0
 800da5e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da60:	7bbb      	ldrb	r3, [r7, #14]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10a      	bne.n	800da7c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2200      	movs	r2, #0
 800da6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800da6e:	e005      	b.n	800da7c <USBH_CDC_Process+0x120>

    default:
      break;
 800da70:	bf00      	nop
 800da72:	e004      	b.n	800da7e <USBH_CDC_Process+0x122>
      break;
 800da74:	bf00      	nop
 800da76:	e002      	b.n	800da7e <USBH_CDC_Process+0x122>
      break;
 800da78:	bf00      	nop
 800da7a:	e000      	b.n	800da7e <USBH_CDC_Process+0x122>
      break;
 800da7c:	bf00      	nop

  }

  return status;
 800da7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3710      	adds	r7, #16
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b082      	sub	sp, #8
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	22a1      	movs	r2, #161	; 0xa1
 800daac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2221      	movs	r2, #33	; 0x21
 800dab2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2200      	movs	r2, #0
 800dab8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2207      	movs	r2, #7
 800dac4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2207      	movs	r2, #7
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f001 f988 	bl	800ede2 <USBH_CtlReq>
 800dad2:	4603      	mov	r3, r0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2221      	movs	r2, #33	; 0x21
 800daea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2220      	movs	r2, #32
 800daf0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2207      	movs	r2, #7
 800db02:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2207      	movs	r2, #7
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f001 f969 	bl	800ede2 <USBH_CtlReq>
 800db10:	4603      	mov	r3, r0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b086      	sub	sp, #24
 800db1e:	af02      	add	r7, sp, #8
 800db20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db28:	69db      	ldr	r3, [r3, #28]
 800db2a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800db2c:	2300      	movs	r3, #0
 800db2e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800db36:	2b01      	cmp	r3, #1
 800db38:	d002      	beq.n	800db40 <CDC_ProcessTransmission+0x26>
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d023      	beq.n	800db86 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800db3e:	e05e      	b.n	800dbfe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	8b12      	ldrh	r2, [r2, #24]
 800db48:	4293      	cmp	r3, r2
 800db4a:	d90b      	bls.n	800db64 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	69d9      	ldr	r1, [r3, #28]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	8b1a      	ldrh	r2, [r3, #24]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	7b5b      	ldrb	r3, [r3, #13]
 800db58:	2001      	movs	r0, #1
 800db5a:	9000      	str	r0, [sp, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f001 fb4e 	bl	800f1fe <USBH_BulkSendData>
 800db62:	e00b      	b.n	800db7c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	7b5b      	ldrb	r3, [r3, #13]
 800db72:	2001      	movs	r0, #1
 800db74:	9000      	str	r0, [sp, #0]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f001 fb41 	bl	800f1fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2202      	movs	r2, #2
 800db80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800db84:	e03b      	b.n	800dbfe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	7b5b      	ldrb	r3, [r3, #13]
 800db8a:	4619      	mov	r1, r3
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f001 fe65 	bl	800f85c <USBH_LL_GetURBState>
 800db92:	4603      	mov	r3, r0
 800db94:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800db96:	7afb      	ldrb	r3, [r7, #11]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d128      	bne.n	800dbee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	8b12      	ldrh	r2, [r2, #24]
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d90e      	bls.n	800dbc6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	68fa      	ldr	r2, [r7, #12]
 800dbae:	8b12      	ldrh	r2, [r2, #24]
 800dbb0:	1a9a      	subs	r2, r3, r2
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	69db      	ldr	r3, [r3, #28]
 800dbba:	68fa      	ldr	r2, [r7, #12]
 800dbbc:	8b12      	ldrh	r2, [r2, #24]
 800dbbe:	441a      	add	r2, r3
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	61da      	str	r2, [r3, #28]
 800dbc4:	e002      	b.n	800dbcc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d004      	beq.n	800dbde <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dbdc:	e00e      	b.n	800dbfc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 f868 	bl	800dcbc <USBH_CDC_TransmitCallback>
      break;
 800dbec:	e006      	b.n	800dbfc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800dbee:	7afb      	ldrb	r3, [r7, #11]
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	d103      	bne.n	800dbfc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dbfc:	bf00      	nop
  }
}
 800dbfe:	bf00      	nop
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b086      	sub	sp, #24
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc14:	69db      	ldr	r3, [r3, #28]
 800dc16:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dc22:	2b03      	cmp	r3, #3
 800dc24:	d002      	beq.n	800dc2c <CDC_ProcessReception+0x26>
 800dc26:	2b04      	cmp	r3, #4
 800dc28:	d00e      	beq.n	800dc48 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dc2a:	e043      	b.n	800dcb4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	6a19      	ldr	r1, [r3, #32]
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	8b5a      	ldrh	r2, [r3, #26]
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	7b1b      	ldrb	r3, [r3, #12]
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f001 fb05 	bl	800f248 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	2204      	movs	r2, #4
 800dc42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dc46:	e035      	b.n	800dcb4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	7b1b      	ldrb	r3, [r3, #12]
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f001 fe04 	bl	800f85c <USBH_LL_GetURBState>
 800dc54:	4603      	mov	r3, r0
 800dc56:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dc58:	7cfb      	ldrb	r3, [r7, #19]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d129      	bne.n	800dcb2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	7b1b      	ldrb	r3, [r3, #12]
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f001 fd67 	bl	800f738 <USBH_LL_GetLastXferSize>
 800dc6a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d016      	beq.n	800dca4 <CDC_ProcessReception+0x9e>
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	8b5b      	ldrh	r3, [r3, #26]
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d910      	bls.n	800dca4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	1ad2      	subs	r2, r2, r3
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	6a1a      	ldr	r2, [r3, #32]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	441a      	add	r2, r3
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	2203      	movs	r2, #3
 800dc9e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dca2:	e006      	b.n	800dcb2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f80f 	bl	800dcd0 <USBH_CDC_ReceiveCallback>
      break;
 800dcb2:	bf00      	nop
  }
}
 800dcb4:	bf00      	nop
 800dcb6:	3718      	adds	r7, #24
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}

0800dcbc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dcc4:	bf00      	nop
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dcd8:	bf00      	nop
 800dcda:	370c      	adds	r7, #12
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	4613      	mov	r3, r2
 800dd04:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	e029      	b.n	800dd64 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	79fa      	ldrb	r2, [r7, #7]
 800dd14:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f000 f81f 	bl	800dd6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d003      	beq.n	800dd5c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f001 fc37 	bl	800f5d0 <USBH_LL_Init>

  return USBH_OK;
 800dd62:	2300      	movs	r3, #0
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800dd74:	2300      	movs	r3, #0
 800dd76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e009      	b.n	800dd92 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	33e0      	adds	r3, #224	; 0xe0
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	2200      	movs	r2, #0
 800dd8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	3301      	adds	r3, #1
 800dd90:	60fb      	str	r3, [r7, #12]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b0e      	cmp	r3, #14
 800dd96:	d9f2      	bls.n	800dd7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800dd98:	2300      	movs	r3, #0
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	e009      	b.n	800ddb2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dda8:	2200      	movs	r2, #0
 800ddaa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	60fb      	str	r3, [r7, #12]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb8:	d3f1      	bcc.n	800dd9e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2201      	movs	r2, #1
 800ddd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2240      	movs	r2, #64	; 0x40
 800ddde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d016      	beq.n	800de56 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d10e      	bne.n	800de50 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800de38:	1c59      	adds	r1, r3, #1
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	33de      	adds	r3, #222	; 0xde
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]
 800de4e:	e004      	b.n	800de5a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800de50:	2302      	movs	r3, #2
 800de52:	73fb      	strb	r3, [r7, #15]
 800de54:	e001      	b.n	800de5a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800de56:	2302      	movs	r3, #2
 800de58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3714      	adds	r7, #20
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	460b      	mov	r3, r1
 800de72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800de7e:	78fa      	ldrb	r2, [r7, #3]
 800de80:	429a      	cmp	r2, r3
 800de82:	d204      	bcs.n	800de8e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	78fa      	ldrb	r2, [r7, #3]
 800de88:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800de8c:	e001      	b.n	800de92 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800de8e:	2302      	movs	r3, #2
 800de90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800de92:	7bfb      	ldrb	r3, [r7, #15]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3714      	adds	r7, #20
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	4608      	mov	r0, r1
 800deaa:	4611      	mov	r1, r2
 800deac:	461a      	mov	r2, r3
 800deae:	4603      	mov	r3, r0
 800deb0:	70fb      	strb	r3, [r7, #3]
 800deb2:	460b      	mov	r3, r1
 800deb4:	70bb      	strb	r3, [r7, #2]
 800deb6:	4613      	mov	r3, r2
 800deb8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800deba:	2300      	movs	r3, #0
 800debc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800debe:	2300      	movs	r3, #0
 800dec0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dec8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800deca:	e025      	b.n	800df18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800decc:	7dfb      	ldrb	r3, [r7, #23]
 800dece:	221a      	movs	r2, #26
 800ded0:	fb02 f303 	mul.w	r3, r2, r3
 800ded4:	3308      	adds	r3, #8
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	4413      	add	r3, r2
 800deda:	3302      	adds	r3, #2
 800dedc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	795b      	ldrb	r3, [r3, #5]
 800dee2:	78fa      	ldrb	r2, [r7, #3]
 800dee4:	429a      	cmp	r2, r3
 800dee6:	d002      	beq.n	800deee <USBH_FindInterface+0x4e>
 800dee8:	78fb      	ldrb	r3, [r7, #3]
 800deea:	2bff      	cmp	r3, #255	; 0xff
 800deec:	d111      	bne.n	800df12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800def2:	78ba      	ldrb	r2, [r7, #2]
 800def4:	429a      	cmp	r2, r3
 800def6:	d002      	beq.n	800defe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800def8:	78bb      	ldrb	r3, [r7, #2]
 800defa:	2bff      	cmp	r3, #255	; 0xff
 800defc:	d109      	bne.n	800df12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800df02:	787a      	ldrb	r2, [r7, #1]
 800df04:	429a      	cmp	r2, r3
 800df06:	d002      	beq.n	800df0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800df08:	787b      	ldrb	r3, [r7, #1]
 800df0a:	2bff      	cmp	r3, #255	; 0xff
 800df0c:	d101      	bne.n	800df12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800df0e:	7dfb      	ldrb	r3, [r7, #23]
 800df10:	e006      	b.n	800df20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800df12:	7dfb      	ldrb	r3, [r7, #23]
 800df14:	3301      	adds	r3, #1
 800df16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800df18:	7dfb      	ldrb	r3, [r7, #23]
 800df1a:	2b01      	cmp	r3, #1
 800df1c:	d9d6      	bls.n	800decc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800df1e:	23ff      	movs	r3, #255	; 0xff
}
 800df20:	4618      	mov	r0, r3
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f001 fb87 	bl	800f648 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800df3a:	2101      	movs	r1, #1
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f001 fca0 	bl	800f882 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b088      	sub	sp, #32
 800df50:	af04      	add	r7, sp, #16
 800df52:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800df54:	2302      	movs	r3, #2
 800df56:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800df58:	2300      	movs	r3, #0
 800df5a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800df62:	b2db      	uxtb	r3, r3
 800df64:	2b01      	cmp	r3, #1
 800df66:	d102      	bne.n	800df6e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2203      	movs	r2, #3
 800df6c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	b2db      	uxtb	r3, r3
 800df74:	2b0b      	cmp	r3, #11
 800df76:	f200 81b3 	bhi.w	800e2e0 <USBH_Process+0x394>
 800df7a:	a201      	add	r2, pc, #4	; (adr r2, 800df80 <USBH_Process+0x34>)
 800df7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df80:	0800dfb1 	.word	0x0800dfb1
 800df84:	0800dfe3 	.word	0x0800dfe3
 800df88:	0800e04b 	.word	0x0800e04b
 800df8c:	0800e27b 	.word	0x0800e27b
 800df90:	0800e2e1 	.word	0x0800e2e1
 800df94:	0800e0ef 	.word	0x0800e0ef
 800df98:	0800e221 	.word	0x0800e221
 800df9c:	0800e125 	.word	0x0800e125
 800dfa0:	0800e145 	.word	0x0800e145
 800dfa4:	0800e165 	.word	0x0800e165
 800dfa8:	0800e193 	.word	0x0800e193
 800dfac:	0800e263 	.word	0x0800e263
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 8193 	beq.w	800e2e4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800dfc4:	20c8      	movs	r0, #200	; 0xc8
 800dfc6:	f001 fca3 	bl	800f910 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f001 fb99 	bl	800f702 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800dfe0:	e180      	b.n	800e2e4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d107      	bne.n	800dffc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2202      	movs	r2, #2
 800dff8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800dffa:	e182      	b.n	800e302 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e006:	d914      	bls.n	800e032 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e00e:	3301      	adds	r3, #1
 800e010:	b2da      	uxtb	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e01e:	2b03      	cmp	r3, #3
 800e020:	d903      	bls.n	800e02a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	220d      	movs	r2, #13
 800e026:	701a      	strb	r2, [r3, #0]
      break;
 800e028:	e16b      	b.n	800e302 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	701a      	strb	r2, [r3, #0]
      break;
 800e030:	e167      	b.n	800e302 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e038:	f103 020a 	add.w	r2, r3, #10
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e042:	200a      	movs	r0, #10
 800e044:	f001 fc64 	bl	800f910 <USBH_Delay>
      break;
 800e048:	e15b      	b.n	800e302 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e050:	2b00      	cmp	r3, #0
 800e052:	d005      	beq.n	800e060 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e05a:	2104      	movs	r1, #4
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e060:	2064      	movs	r0, #100	; 0x64
 800e062:	f001 fc55 	bl	800f910 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f001 fb24 	bl	800f6b4 <USBH_LL_GetSpeed>
 800e06c:	4603      	mov	r3, r0
 800e06e:	461a      	mov	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2205      	movs	r2, #5
 800e07a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e07c:	2100      	movs	r1, #0
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f001 f92f 	bl	800f2e2 <USBH_AllocPipe>
 800e084:	4603      	mov	r3, r0
 800e086:	461a      	mov	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e08c:	2180      	movs	r1, #128	; 0x80
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f001 f927 	bl	800f2e2 <USBH_AllocPipe>
 800e094:	4603      	mov	r3, r0
 800e096:	461a      	mov	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	7919      	ldrb	r1, [r3, #4]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e0b0:	b292      	uxth	r2, r2
 800e0b2:	9202      	str	r2, [sp, #8]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	9201      	str	r2, [sp, #4]
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2280      	movs	r2, #128	; 0x80
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f001 f8e0 	bl	800f284 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7959      	ldrb	r1, [r3, #5]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e0d8:	b292      	uxth	r2, r2
 800e0da:	9202      	str	r2, [sp, #8]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	9201      	str	r2, [sp, #4]
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f001 f8cc 	bl	800f284 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e0ec:	e109      	b.n	800e302 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 f90c 	bl	800e30c <USBH_HandleEnum>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e0f8:	7bbb      	ldrb	r3, [r7, #14]
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f040 80f3 	bne.w	800e2e8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e110:	2b01      	cmp	r3, #1
 800e112:	d103      	bne.n	800e11c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2208      	movs	r2, #8
 800e118:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e11a:	e0e5      	b.n	800e2e8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2207      	movs	r2, #7
 800e120:	701a      	strb	r2, [r3, #0]
      break;
 800e122:	e0e1      	b.n	800e2e8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 80de 	beq.w	800e2ec <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e136:	2101      	movs	r1, #1
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2208      	movs	r2, #8
 800e140:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e142:	e0d3      	b.n	800e2ec <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	4619      	mov	r1, r3
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 fc20 	bl	800e994 <USBH_SetCfg>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	f040 80ca 	bne.w	800e2f0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2209      	movs	r2, #9
 800e160:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e162:	e0c5      	b.n	800e2f0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e16a:	f003 0320 	and.w	r3, r3, #32
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e172:	2101      	movs	r1, #1
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fc30 	bl	800e9da <USBH_SetFeature>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f040 80b9 	bne.w	800e2f4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	220a      	movs	r2, #10
 800e186:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e188:	e0b4      	b.n	800e2f4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	220a      	movs	r2, #10
 800e18e:	701a      	strb	r2, [r3, #0]
      break;
 800e190:	e0b0      	b.n	800e2f4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f000 80ad 	beq.w	800e2f8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	73fb      	strb	r3, [r7, #15]
 800e1aa:	e016      	b.n	800e1da <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e1ac:	7bfa      	ldrb	r2, [r7, #15]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	32de      	adds	r2, #222	; 0xde
 800e1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b6:	791a      	ldrb	r2, [r3, #4]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d108      	bne.n	800e1d4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e1c2:	7bfa      	ldrb	r2, [r7, #15]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	32de      	adds	r2, #222	; 0xde
 800e1c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e1d2:	e005      	b.n	800e1e0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	73fb      	strb	r3, [r7, #15]
 800e1da:	7bfb      	ldrb	r3, [r7, #15]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d0e5      	beq.n	800e1ac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d016      	beq.n	800e218 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1f0:	689b      	ldr	r3, [r3, #8]
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	4798      	blx	r3
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d109      	bne.n	800e210 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2206      	movs	r2, #6
 800e200:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e208:	2103      	movs	r1, #3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e20e:	e073      	b.n	800e2f8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	220d      	movs	r2, #13
 800e214:	701a      	strb	r2, [r3, #0]
      break;
 800e216:	e06f      	b.n	800e2f8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	220d      	movs	r2, #13
 800e21c:	701a      	strb	r2, [r3, #0]
      break;
 800e21e:	e06b      	b.n	800e2f8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e226:	2b00      	cmp	r3, #0
 800e228:	d017      	beq.n	800e25a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	4798      	blx	r3
 800e236:	4603      	mov	r3, r0
 800e238:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e23a:	7bbb      	ldrb	r3, [r7, #14]
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d103      	bne.n	800e24a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	220b      	movs	r2, #11
 800e246:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e248:	e058      	b.n	800e2fc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800e24a:	7bbb      	ldrb	r3, [r7, #14]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d154      	bne.n	800e2fc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	220d      	movs	r2, #13
 800e256:	701a      	strb	r2, [r3, #0]
      break;
 800e258:	e050      	b.n	800e2fc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	220d      	movs	r2, #13
 800e25e:	701a      	strb	r2, [r3, #0]
      break;
 800e260:	e04c      	b.n	800e2fc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d049      	beq.n	800e300 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e272:	695b      	ldr	r3, [r3, #20]
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	4798      	blx	r3
      }
      break;
 800e278:	e042      	b.n	800e300 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff fd72 	bl	800dd6c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d009      	beq.n	800e2a6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d005      	beq.n	800e2bc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2b6:	2105      	movs	r1, #5
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d107      	bne.n	800e2d8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff fe2b 	bl	800df2c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e2d6:	e014      	b.n	800e302 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f001 f9b5 	bl	800f648 <USBH_LL_Start>
      break;
 800e2de:	e010      	b.n	800e302 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e2e0:	bf00      	nop
 800e2e2:	e00e      	b.n	800e302 <USBH_Process+0x3b6>
      break;
 800e2e4:	bf00      	nop
 800e2e6:	e00c      	b.n	800e302 <USBH_Process+0x3b6>
      break;
 800e2e8:	bf00      	nop
 800e2ea:	e00a      	b.n	800e302 <USBH_Process+0x3b6>
    break;
 800e2ec:	bf00      	nop
 800e2ee:	e008      	b.n	800e302 <USBH_Process+0x3b6>
      break;
 800e2f0:	bf00      	nop
 800e2f2:	e006      	b.n	800e302 <USBH_Process+0x3b6>
      break;
 800e2f4:	bf00      	nop
 800e2f6:	e004      	b.n	800e302 <USBH_Process+0x3b6>
      break;
 800e2f8:	bf00      	nop
 800e2fa:	e002      	b.n	800e302 <USBH_Process+0x3b6>
      break;
 800e2fc:	bf00      	nop
 800e2fe:	e000      	b.n	800e302 <USBH_Process+0x3b6>
      break;
 800e300:	bf00      	nop
  }
  return USBH_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b088      	sub	sp, #32
 800e310:	af04      	add	r7, sp, #16
 800e312:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e314:	2301      	movs	r3, #1
 800e316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e318:	2301      	movs	r3, #1
 800e31a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	785b      	ldrb	r3, [r3, #1]
 800e320:	2b07      	cmp	r3, #7
 800e322:	f200 81c1 	bhi.w	800e6a8 <USBH_HandleEnum+0x39c>
 800e326:	a201      	add	r2, pc, #4	; (adr r2, 800e32c <USBH_HandleEnum+0x20>)
 800e328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e32c:	0800e34d 	.word	0x0800e34d
 800e330:	0800e40b 	.word	0x0800e40b
 800e334:	0800e475 	.word	0x0800e475
 800e338:	0800e503 	.word	0x0800e503
 800e33c:	0800e56d 	.word	0x0800e56d
 800e340:	0800e5dd 	.word	0x0800e5dd
 800e344:	0800e623 	.word	0x0800e623
 800e348:	0800e669 	.word	0x0800e669
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e34c:	2108      	movs	r1, #8
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f000 fa50 	bl	800e7f4 <USBH_Get_DevDesc>
 800e354:	4603      	mov	r3, r0
 800e356:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e358:	7bbb      	ldrb	r3, [r7, #14]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d130      	bne.n	800e3c0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	7919      	ldrb	r1, [r3, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e382:	b292      	uxth	r2, r2
 800e384:	9202      	str	r2, [sp, #8]
 800e386:	2200      	movs	r2, #0
 800e388:	9201      	str	r2, [sp, #4]
 800e38a:	9300      	str	r3, [sp, #0]
 800e38c:	4603      	mov	r3, r0
 800e38e:	2280      	movs	r2, #128	; 0x80
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 ff77 	bl	800f284 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	7959      	ldrb	r1, [r3, #5]
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e3aa:	b292      	uxth	r2, r2
 800e3ac:	9202      	str	r2, [sp, #8]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	9201      	str	r2, [sp, #4]
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 ff63 	bl	800f284 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e3be:	e175      	b.n	800e6ac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e3c0:	7bbb      	ldrb	r3, [r7, #14]
 800e3c2:	2b03      	cmp	r3, #3
 800e3c4:	f040 8172 	bne.w	800e6ac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e3de:	2b03      	cmp	r3, #3
 800e3e0:	d903      	bls.n	800e3ea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	220d      	movs	r2, #13
 800e3e6:	701a      	strb	r2, [r3, #0]
      break;
 800e3e8:	e160      	b.n	800e6ac <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	795b      	ldrb	r3, [r3, #5]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 ff97 	bl	800f324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	791b      	ldrb	r3, [r3, #4]
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 ff91 	bl	800f324 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	701a      	strb	r2, [r3, #0]
      break;
 800e408:	e150      	b.n	800e6ac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e40a:	2112      	movs	r1, #18
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 f9f1 	bl	800e7f4 <USBH_Get_DevDesc>
 800e412:	4603      	mov	r3, r0
 800e414:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e416:	7bbb      	ldrb	r3, [r7, #14]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d103      	bne.n	800e424 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2202      	movs	r2, #2
 800e420:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e422:	e145      	b.n	800e6b0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e424:	7bbb      	ldrb	r3, [r7, #14]
 800e426:	2b03      	cmp	r3, #3
 800e428:	f040 8142 	bne.w	800e6b0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e432:	3301      	adds	r3, #1
 800e434:	b2da      	uxtb	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e442:	2b03      	cmp	r3, #3
 800e444:	d903      	bls.n	800e44e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	220d      	movs	r2, #13
 800e44a:	701a      	strb	r2, [r3, #0]
      break;
 800e44c:	e130      	b.n	800e6b0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	795b      	ldrb	r3, [r3, #5]
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 ff65 	bl	800f324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	791b      	ldrb	r3, [r3, #4]
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 ff5f 	bl	800f324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2200      	movs	r2, #0
 800e46a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	701a      	strb	r2, [r3, #0]
      break;
 800e472:	e11d      	b.n	800e6b0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e474:	2101      	movs	r1, #1
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fa68 	bl	800e94c <USBH_SetAddress>
 800e47c:	4603      	mov	r3, r0
 800e47e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e480:	7bbb      	ldrb	r3, [r7, #14]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d132      	bne.n	800e4ec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e486:	2002      	movs	r0, #2
 800e488:	f001 fa42 	bl	800f910 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2203      	movs	r2, #3
 800e498:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	7919      	ldrb	r1, [r3, #4]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e4ae:	b292      	uxth	r2, r2
 800e4b0:	9202      	str	r2, [sp, #8]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	9201      	str	r2, [sp, #4]
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2280      	movs	r2, #128	; 0x80
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 fee1 	bl	800f284 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	7959      	ldrb	r1, [r3, #5]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4d6:	b292      	uxth	r2, r2
 800e4d8:	9202      	str	r2, [sp, #8]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	9201      	str	r2, [sp, #4]
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fecd 	bl	800f284 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e4ea:	e0e3      	b.n	800e6b4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4ec:	7bbb      	ldrb	r3, [r7, #14]
 800e4ee:	2b03      	cmp	r3, #3
 800e4f0:	f040 80e0 	bne.w	800e6b4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	220d      	movs	r2, #13
 800e4f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	705a      	strb	r2, [r3, #1]
      break;
 800e500:	e0d8      	b.n	800e6b4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e502:	2109      	movs	r1, #9
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 f99d 	bl	800e844 <USBH_Get_CfgDesc>
 800e50a:	4603      	mov	r3, r0
 800e50c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d103      	bne.n	800e51c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2204      	movs	r2, #4
 800e518:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e51a:	e0cd      	b.n	800e6b8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e51c:	7bbb      	ldrb	r3, [r7, #14]
 800e51e:	2b03      	cmp	r3, #3
 800e520:	f040 80ca 	bne.w	800e6b8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e52a:	3301      	adds	r3, #1
 800e52c:	b2da      	uxtb	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e53a:	2b03      	cmp	r3, #3
 800e53c:	d903      	bls.n	800e546 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	220d      	movs	r2, #13
 800e542:	701a      	strb	r2, [r3, #0]
      break;
 800e544:	e0b8      	b.n	800e6b8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	795b      	ldrb	r3, [r3, #5]
 800e54a:	4619      	mov	r1, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 fee9 	bl	800f324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	791b      	ldrb	r3, [r3, #4]
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f000 fee3 	bl	800f324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2200      	movs	r2, #0
 800e562:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	701a      	strb	r2, [r3, #0]
      break;
 800e56a:	e0a5      	b.n	800e6b8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e572:	4619      	mov	r1, r3
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 f965 	bl	800e844 <USBH_Get_CfgDesc>
 800e57a:	4603      	mov	r3, r0
 800e57c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e57e:	7bbb      	ldrb	r3, [r7, #14]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d103      	bne.n	800e58c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2205      	movs	r2, #5
 800e588:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e58a:	e097      	b.n	800e6bc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e58c:	7bbb      	ldrb	r3, [r7, #14]
 800e58e:	2b03      	cmp	r3, #3
 800e590:	f040 8094 	bne.w	800e6bc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e59a:	3301      	adds	r3, #1
 800e59c:	b2da      	uxtb	r2, r3
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	d903      	bls.n	800e5b6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	220d      	movs	r2, #13
 800e5b2:	701a      	strb	r2, [r3, #0]
      break;
 800e5b4:	e082      	b.n	800e6bc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	795b      	ldrb	r3, [r3, #5]
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 feb1 	bl	800f324 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	791b      	ldrb	r3, [r3, #4]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 feab 	bl	800f324 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	701a      	strb	r2, [r3, #0]
      break;
 800e5da:	e06f      	b.n	800e6bc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d019      	beq.n	800e61a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e5f2:	23ff      	movs	r3, #255	; 0xff
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f949 	bl	800e88c <USBH_Get_StringDesc>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e5fe:	7bbb      	ldrb	r3, [r7, #14]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d103      	bne.n	800e60c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2206      	movs	r2, #6
 800e608:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e60a:	e059      	b.n	800e6c0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e60c:	7bbb      	ldrb	r3, [r7, #14]
 800e60e:	2b03      	cmp	r3, #3
 800e610:	d156      	bne.n	800e6c0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2206      	movs	r2, #6
 800e616:	705a      	strb	r2, [r3, #1]
      break;
 800e618:	e052      	b.n	800e6c0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2206      	movs	r2, #6
 800e61e:	705a      	strb	r2, [r3, #1]
      break;
 800e620:	e04e      	b.n	800e6c0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d019      	beq.n	800e660 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e638:	23ff      	movs	r3, #255	; 0xff
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f926 	bl	800e88c <USBH_Get_StringDesc>
 800e640:	4603      	mov	r3, r0
 800e642:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e644:	7bbb      	ldrb	r3, [r7, #14]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d103      	bne.n	800e652 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2207      	movs	r2, #7
 800e64e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e650:	e038      	b.n	800e6c4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e652:	7bbb      	ldrb	r3, [r7, #14]
 800e654:	2b03      	cmp	r3, #3
 800e656:	d135      	bne.n	800e6c4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2207      	movs	r2, #7
 800e65c:	705a      	strb	r2, [r3, #1]
      break;
 800e65e:	e031      	b.n	800e6c4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2207      	movs	r2, #7
 800e664:	705a      	strb	r2, [r3, #1]
      break;
 800e666:	e02d      	b.n	800e6c4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d017      	beq.n	800e6a2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e67e:	23ff      	movs	r3, #255	; 0xff
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f000 f903 	bl	800e88c <USBH_Get_StringDesc>
 800e686:	4603      	mov	r3, r0
 800e688:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e68a:	7bbb      	ldrb	r3, [r7, #14]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e694:	e018      	b.n	800e6c8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e696:	7bbb      	ldrb	r3, [r7, #14]
 800e698:	2b03      	cmp	r3, #3
 800e69a:	d115      	bne.n	800e6c8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800e69c:	2300      	movs	r3, #0
 800e69e:	73fb      	strb	r3, [r7, #15]
      break;
 800e6a0:	e012      	b.n	800e6c8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e6a6:	e00f      	b.n	800e6c8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800e6a8:	bf00      	nop
 800e6aa:	e00e      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6ac:	bf00      	nop
 800e6ae:	e00c      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6b0:	bf00      	nop
 800e6b2:	e00a      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6b4:	bf00      	nop
 800e6b6:	e008      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6b8:	bf00      	nop
 800e6ba:	e006      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6bc:	bf00      	nop
 800e6be:	e004      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6c0:	bf00      	nop
 800e6c2:	e002      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6c4:	bf00      	nop
 800e6c6:	e000      	b.n	800e6ca <USBH_HandleEnum+0x3be>
      break;
 800e6c8:	bf00      	nop
  }
  return Status;
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b083      	sub	sp, #12
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e6e6:	bf00      	nop
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr

0800e6f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e700:	1c5a      	adds	r2, r3, #1
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f804 	bl	800e716 <USBH_HandleSof>
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b082      	sub	sp, #8
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b0b      	cmp	r3, #11
 800e726:	d10a      	bne.n	800e73e <USBH_HandleSof+0x28>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d005      	beq.n	800e73e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	4798      	blx	r3
  }
}
 800e73e:	bf00      	nop
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e746:	b480      	push	{r7}
 800e748:	b083      	sub	sp, #12
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2201      	movs	r2, #1
 800e752:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e756:	bf00      	nop
}
 800e758:	370c      	adds	r7, #12
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e762:	b480      	push	{r7}
 800e764:	b083      	sub	sp, #12
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e772:	bf00      	nop
}
 800e774:	370c      	adds	r7, #12
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e77e:	b480      	push	{r7}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2201      	movs	r2, #1
 800e78a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2200      	movs	r2, #0
 800e79a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 ff56 	bl	800f67e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	791b      	ldrb	r3, [r3, #4]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fda3 	bl	800f324 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	795b      	ldrb	r3, [r3, #5]
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fd9d 	bl	800f324 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af02      	add	r7, sp, #8
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e806:	78fb      	ldrb	r3, [r7, #3]
 800e808:	b29b      	uxth	r3, r3
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	4613      	mov	r3, r2
 800e80e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e812:	2100      	movs	r1, #0
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f864 	bl	800e8e2 <USBH_GetDescriptor>
 800e81a:	4603      	mov	r3, r0
 800e81c:	73fb      	strb	r3, [r7, #15]
 800e81e:	7bfb      	ldrb	r3, [r7, #15]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d10a      	bne.n	800e83a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f203 3026 	addw	r0, r3, #806	; 0x326
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e830:	78fa      	ldrb	r2, [r7, #3]
 800e832:	b292      	uxth	r2, r2
 800e834:	4619      	mov	r1, r3
 800e836:	f000 f918 	bl	800ea6a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af02      	add	r7, sp, #8
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	460b      	mov	r3, r1
 800e84e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	331c      	adds	r3, #28
 800e854:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e856:	887b      	ldrh	r3, [r7, #2]
 800e858:	9300      	str	r3, [sp, #0]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e860:	2100      	movs	r1, #0
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f83d 	bl	800e8e2 <USBH_GetDescriptor>
 800e868:	4603      	mov	r3, r0
 800e86a:	72fb      	strb	r3, [r7, #11]
 800e86c:	7afb      	ldrb	r3, [r7, #11]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d107      	bne.n	800e882 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e878:	887a      	ldrh	r2, [r7, #2]
 800e87a:	68f9      	ldr	r1, [r7, #12]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f000 f964 	bl	800eb4a <USBH_ParseCfgDesc>
  }

  return status;
 800e882:	7afb      	ldrb	r3, [r7, #11]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b088      	sub	sp, #32
 800e890:	af02      	add	r7, sp, #8
 800e892:	60f8      	str	r0, [r7, #12]
 800e894:	607a      	str	r2, [r7, #4]
 800e896:	461a      	mov	r2, r3
 800e898:	460b      	mov	r3, r1
 800e89a:	72fb      	strb	r3, [r7, #11]
 800e89c:	4613      	mov	r3, r2
 800e89e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800e8a0:	7afb      	ldrb	r3, [r7, #11]
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e8a8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e8b0:	893b      	ldrh	r3, [r7, #8]
 800e8b2:	9300      	str	r3, [sp, #0]
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	2100      	movs	r1, #0
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	f000 f812 	bl	800e8e2 <USBH_GetDescriptor>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	75fb      	strb	r3, [r7, #23]
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d107      	bne.n	800e8d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e8ce:	893a      	ldrh	r2, [r7, #8]
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fa37 	bl	800ed46 <USBH_ParseStringDesc>
  }

  return status;
 800e8d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b084      	sub	sp, #16
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	60f8      	str	r0, [r7, #12]
 800e8ea:	607b      	str	r3, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	72fb      	strb	r3, [r7, #11]
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	789b      	ldrb	r3, [r3, #2]
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d11c      	bne.n	800e936 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e8fc:	7afb      	ldrb	r3, [r7, #11]
 800e8fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e902:	b2da      	uxtb	r2, r3
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2206      	movs	r2, #6
 800e90c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	893a      	ldrh	r2, [r7, #8]
 800e912:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e914:	893b      	ldrh	r3, [r7, #8]
 800e916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e91a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e91e:	d104      	bne.n	800e92a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f240 4209 	movw	r2, #1033	; 0x409
 800e926:	829a      	strh	r2, [r3, #20]
 800e928:	e002      	b.n	800e930 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2200      	movs	r2, #0
 800e92e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	8b3a      	ldrh	r2, [r7, #24]
 800e934:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e936:	8b3b      	ldrh	r3, [r7, #24]
 800e938:	461a      	mov	r2, r3
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f000 fa50 	bl	800ede2 <USBH_CtlReq>
 800e942:	4603      	mov	r3, r0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	460b      	mov	r3, r1
 800e956:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	789b      	ldrb	r3, [r3, #2]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d10f      	bne.n	800e980 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2205      	movs	r2, #5
 800e96a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e96c:	78fb      	ldrb	r3, [r7, #3]
 800e96e:	b29a      	uxth	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2200      	movs	r2, #0
 800e978:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e980:	2200      	movs	r2, #0
 800e982:	2100      	movs	r1, #0
 800e984:	6878      	ldr	r0, [r7, #4]
 800e986:	f000 fa2c 	bl	800ede2 <USBH_CtlReq>
 800e98a:	4603      	mov	r3, r0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	460b      	mov	r3, r1
 800e99e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	789b      	ldrb	r3, [r3, #2]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d10e      	bne.n	800e9c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2209      	movs	r2, #9
 800e9b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	887a      	ldrh	r2, [r7, #2]
 800e9b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 fa09 	bl	800ede2 <USBH_CtlReq>
 800e9d0:	4603      	mov	r3, r0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b082      	sub	sp, #8
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	789b      	ldrb	r3, [r3, #2]
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d10f      	bne.n	800ea0e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2203      	movs	r2, #3
 800e9f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e9fa:	78fb      	ldrb	r3, [r7, #3]
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ea0e:	2200      	movs	r2, #0
 800ea10:	2100      	movs	r1, #0
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f9e5 	bl	800ede2 <USBH_CtlReq>
 800ea18:	4603      	mov	r3, r0
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}

0800ea22 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ea22:	b580      	push	{r7, lr}
 800ea24:	b082      	sub	sp, #8
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	789b      	ldrb	r3, [r3, #2]
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d10f      	bne.n	800ea56 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2202      	movs	r2, #2
 800ea3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ea48:	78fb      	ldrb	r3, [r7, #3]
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ea56:	2200      	movs	r2, #0
 800ea58:	2100      	movs	r1, #0
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 f9c1 	bl	800ede2 <USBH_CtlReq>
 800ea60:	4603      	mov	r3, r0
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ea6a:	b480      	push	{r7}
 800ea6c:	b085      	sub	sp, #20
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	60b9      	str	r1, [r7, #8]
 800ea74:	4613      	mov	r3, r2
 800ea76:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	781a      	ldrb	r2, [r3, #0]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	785a      	ldrb	r2, [r3, #1]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	3302      	adds	r3, #2
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	3303      	adds	r3, #3
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	021b      	lsls	r3, r3, #8
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	791a      	ldrb	r2, [r3, #4]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	795a      	ldrb	r2, [r3, #5]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	799a      	ldrb	r2, [r3, #6]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	79da      	ldrb	r2, [r3, #7]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800eac4:	88fb      	ldrh	r3, [r7, #6]
 800eac6:	2b08      	cmp	r3, #8
 800eac8:	d939      	bls.n	800eb3e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	3308      	adds	r3, #8
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	3309      	adds	r3, #9
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	b29b      	uxth	r3, r3
 800eada:	021b      	lsls	r3, r3, #8
 800eadc:	b29b      	uxth	r3, r3
 800eade:	4313      	orrs	r3, r2
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	330a      	adds	r3, #10
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	330b      	adds	r3, #11
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	021b      	lsls	r3, r3, #8
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	4313      	orrs	r3, r2
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	330c      	adds	r3, #12
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	b29a      	uxth	r2, r3
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	330d      	adds	r3, #13
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	021b      	lsls	r3, r3, #8
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	4313      	orrs	r3, r2
 800eb18:	b29a      	uxth	r2, r3
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	7b9a      	ldrb	r2, [r3, #14]
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	7bda      	ldrb	r2, [r3, #15]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	7c1a      	ldrb	r2, [r3, #16]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	7c5a      	ldrb	r2, [r3, #17]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	745a      	strb	r2, [r3, #17]
  }
}
 800eb3e:	bf00      	nop
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b08a      	sub	sp, #40	; 0x28
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	60b9      	str	r1, [r7, #8]
 800eb54:	4613      	mov	r3, r2
 800eb56:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800eb62:	2300      	movs	r3, #0
 800eb64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	781a      	ldrb	r2, [r3, #0]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	785a      	ldrb	r2, [r3, #1]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	3302      	adds	r3, #2
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	3303      	adds	r3, #3
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	021b      	lsls	r3, r3, #8
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	4313      	orrs	r3, r2
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	791a      	ldrb	r2, [r3, #4]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	795a      	ldrb	r2, [r3, #5]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	799a      	ldrb	r2, [r3, #6]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	79da      	ldrb	r2, [r3, #7]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	7a1a      	ldrb	r2, [r3, #8]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ebc0:	88fb      	ldrh	r3, [r7, #6]
 800ebc2:	2b09      	cmp	r3, #9
 800ebc4:	d95f      	bls.n	800ec86 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ebc6:	2309      	movs	r3, #9
 800ebc8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ebce:	e051      	b.n	800ec74 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ebd0:	f107 0316 	add.w	r3, r7, #22
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebd8:	f000 f8e8 	bl	800edac <USBH_GetNextDesc>
 800ebdc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe0:	785b      	ldrb	r3, [r3, #1]
 800ebe2:	2b04      	cmp	r3, #4
 800ebe4:	d146      	bne.n	800ec74 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ebe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ebea:	221a      	movs	r2, #26
 800ebec:	fb02 f303 	mul.w	r3, r2, r3
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	3302      	adds	r3, #2
 800ebf8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ebfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebfc:	69f8      	ldr	r0, [r7, #28]
 800ebfe:	f000 f846 	bl	800ec8e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ec02:	2300      	movs	r3, #0
 800ec04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ec0c:	e022      	b.n	800ec54 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ec0e:	f107 0316 	add.w	r3, r7, #22
 800ec12:	4619      	mov	r1, r3
 800ec14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec16:	f000 f8c9 	bl	800edac <USBH_GetNextDesc>
 800ec1a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	785b      	ldrb	r3, [r3, #1]
 800ec20:	2b05      	cmp	r3, #5
 800ec22:	d117      	bne.n	800ec54 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ec24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ec2c:	3201      	adds	r2, #1
 800ec2e:	00d2      	lsls	r2, r2, #3
 800ec30:	211a      	movs	r1, #26
 800ec32:	fb01 f303 	mul.w	r3, r1, r3
 800ec36:	4413      	add	r3, r2
 800ec38:	3308      	adds	r3, #8
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	3304      	adds	r3, #4
 800ec40:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ec42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec44:	69b8      	ldr	r0, [r7, #24]
 800ec46:	f000 f851 	bl	800ecec <USBH_ParseEPDesc>
            ep_ix++;
 800ec4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ec4e:	3301      	adds	r3, #1
 800ec50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	791b      	ldrb	r3, [r3, #4]
 800ec58:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d204      	bcs.n	800ec6a <USBH_ParseCfgDesc+0x120>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	885a      	ldrh	r2, [r3, #2]
 800ec64:	8afb      	ldrh	r3, [r7, #22]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d8d1      	bhi.n	800ec0e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800ec6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec6e:	3301      	adds	r3, #1
 800ec70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ec74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d804      	bhi.n	800ec86 <USBH_ParseCfgDesc+0x13c>
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	885a      	ldrh	r2, [r3, #2]
 800ec80:	8afb      	ldrh	r3, [r7, #22]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d8a4      	bhi.n	800ebd0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800ec86:	bf00      	nop
 800ec88:	3728      	adds	r7, #40	; 0x28
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b083      	sub	sp, #12
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	781a      	ldrb	r2, [r3, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	785a      	ldrb	r2, [r3, #1]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	789a      	ldrb	r2, [r3, #2]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	78da      	ldrb	r2, [r3, #3]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	791a      	ldrb	r2, [r3, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	795a      	ldrb	r2, [r3, #5]
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	799a      	ldrb	r2, [r3, #6]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	79da      	ldrb	r2, [r3, #7]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	7a1a      	ldrb	r2, [r3, #8]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	721a      	strb	r2, [r3, #8]
}
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	781a      	ldrb	r2, [r3, #0]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	785a      	ldrb	r2, [r3, #1]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	789a      	ldrb	r2, [r3, #2]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	78da      	ldrb	r2, [r3, #3]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	3304      	adds	r3, #4
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	b29a      	uxth	r2, r3
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	3305      	adds	r3, #5
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	b29a      	uxth	r2, r3
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	799a      	ldrb	r2, [r3, #6]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	719a      	strb	r2, [r3, #6]
}
 800ed3a:	bf00      	nop
 800ed3c:	370c      	adds	r7, #12
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr

0800ed46 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ed46:	b480      	push	{r7}
 800ed48:	b087      	sub	sp, #28
 800ed4a:	af00      	add	r7, sp, #0
 800ed4c:	60f8      	str	r0, [r7, #12]
 800ed4e:	60b9      	str	r1, [r7, #8]
 800ed50:	4613      	mov	r3, r2
 800ed52:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3301      	adds	r3, #1
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d120      	bne.n	800eda0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	1e9a      	subs	r2, r3, #2
 800ed64:	88fb      	ldrh	r3, [r7, #6]
 800ed66:	4293      	cmp	r3, r2
 800ed68:	bf28      	it	cs
 800ed6a:	4613      	movcs	r3, r2
 800ed6c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3302      	adds	r3, #2
 800ed72:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ed74:	2300      	movs	r3, #0
 800ed76:	82fb      	strh	r3, [r7, #22]
 800ed78:	e00b      	b.n	800ed92 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ed7a:	8afb      	ldrh	r3, [r7, #22]
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	4413      	add	r3, r2
 800ed80:	781a      	ldrb	r2, [r3, #0]
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ed8c:	8afb      	ldrh	r3, [r7, #22]
 800ed8e:	3302      	adds	r3, #2
 800ed90:	82fb      	strh	r3, [r7, #22]
 800ed92:	8afa      	ldrh	r2, [r7, #22]
 800ed94:	8abb      	ldrh	r3, [r7, #20]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d3ef      	bcc.n	800ed7a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	701a      	strb	r2, [r3, #0]
  }
}
 800eda0:	bf00      	nop
 800eda2:	371c      	adds	r7, #28
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800edac:	b480      	push	{r7}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	881a      	ldrh	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	4413      	add	r3, r2
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4413      	add	r3, r2
 800edd2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800edd4:	68fb      	ldr	r3, [r7, #12]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3714      	adds	r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede0:	4770      	bx	lr

0800ede2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b086      	sub	sp, #24
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	60f8      	str	r0, [r7, #12]
 800edea:	60b9      	str	r1, [r7, #8]
 800edec:	4613      	mov	r3, r2
 800edee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800edf0:	2301      	movs	r3, #1
 800edf2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	789b      	ldrb	r3, [r3, #2]
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d002      	beq.n	800ee02 <USBH_CtlReq+0x20>
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	d00f      	beq.n	800ee20 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ee00:	e027      	b.n	800ee52 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	68ba      	ldr	r2, [r7, #8]
 800ee06:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	88fa      	ldrh	r2, [r7, #6]
 800ee0c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2201      	movs	r2, #1
 800ee12:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2202      	movs	r2, #2
 800ee18:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ee1e:	e018      	b.n	800ee52 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 f81b 	bl	800ee5c <USBH_HandleControl>
 800ee26:	4603      	mov	r3, r0
 800ee28:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ee2a:	7dfb      	ldrb	r3, [r7, #23]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d002      	beq.n	800ee36 <USBH_CtlReq+0x54>
 800ee30:	7dfb      	ldrb	r3, [r7, #23]
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d106      	bne.n	800ee44 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	761a      	strb	r2, [r3, #24]
      break;
 800ee42:	e005      	b.n	800ee50 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ee44:	7dfb      	ldrb	r3, [r7, #23]
 800ee46:	2b02      	cmp	r3, #2
 800ee48:	d102      	bne.n	800ee50 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	709a      	strb	r2, [r3, #2]
      break;
 800ee50:	bf00      	nop
  }
  return status;
 800ee52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af02      	add	r7, sp, #8
 800ee62:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ee64:	2301      	movs	r3, #1
 800ee66:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	7e1b      	ldrb	r3, [r3, #24]
 800ee70:	3b01      	subs	r3, #1
 800ee72:	2b0a      	cmp	r3, #10
 800ee74:	f200 8156 	bhi.w	800f124 <USBH_HandleControl+0x2c8>
 800ee78:	a201      	add	r2, pc, #4	; (adr r2, 800ee80 <USBH_HandleControl+0x24>)
 800ee7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee7e:	bf00      	nop
 800ee80:	0800eead 	.word	0x0800eead
 800ee84:	0800eec7 	.word	0x0800eec7
 800ee88:	0800ef31 	.word	0x0800ef31
 800ee8c:	0800ef57 	.word	0x0800ef57
 800ee90:	0800ef8f 	.word	0x0800ef8f
 800ee94:	0800efb9 	.word	0x0800efb9
 800ee98:	0800f00b 	.word	0x0800f00b
 800ee9c:	0800f02d 	.word	0x0800f02d
 800eea0:	0800f069 	.word	0x0800f069
 800eea4:	0800f08f 	.word	0x0800f08f
 800eea8:	0800f0cd 	.word	0x0800f0cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f103 0110 	add.w	r1, r3, #16
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	795b      	ldrb	r3, [r3, #5]
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f943 	bl	800f144 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2202      	movs	r2, #2
 800eec2:	761a      	strb	r2, [r3, #24]
      break;
 800eec4:	e139      	b.n	800f13a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	795b      	ldrb	r3, [r3, #5]
 800eeca:	4619      	mov	r1, r3
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f000 fcc5 	bl	800f85c <USBH_LL_GetURBState>
 800eed2:	4603      	mov	r3, r0
 800eed4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800eed6:	7bbb      	ldrb	r3, [r7, #14]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d11e      	bne.n	800ef1a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	7c1b      	ldrb	r3, [r3, #16]
 800eee0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eee4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	8adb      	ldrh	r3, [r3, #22]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d00a      	beq.n	800ef04 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800eeee:	7b7b      	ldrb	r3, [r7, #13]
 800eef0:	2b80      	cmp	r3, #128	; 0x80
 800eef2:	d103      	bne.n	800eefc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2203      	movs	r2, #3
 800eef8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eefa:	e115      	b.n	800f128 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2205      	movs	r2, #5
 800ef00:	761a      	strb	r2, [r3, #24]
      break;
 800ef02:	e111      	b.n	800f128 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ef04:	7b7b      	ldrb	r3, [r7, #13]
 800ef06:	2b80      	cmp	r3, #128	; 0x80
 800ef08:	d103      	bne.n	800ef12 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2209      	movs	r2, #9
 800ef0e:	761a      	strb	r2, [r3, #24]
      break;
 800ef10:	e10a      	b.n	800f128 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2207      	movs	r2, #7
 800ef16:	761a      	strb	r2, [r3, #24]
      break;
 800ef18:	e106      	b.n	800f128 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ef1a:	7bbb      	ldrb	r3, [r7, #14]
 800ef1c:	2b04      	cmp	r3, #4
 800ef1e:	d003      	beq.n	800ef28 <USBH_HandleControl+0xcc>
 800ef20:	7bbb      	ldrb	r3, [r7, #14]
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	f040 8100 	bne.w	800f128 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	220b      	movs	r2, #11
 800ef2c:	761a      	strb	r2, [r3, #24]
      break;
 800ef2e:	e0fb      	b.n	800f128 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6899      	ldr	r1, [r3, #8]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	899a      	ldrh	r2, [r3, #12]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	791b      	ldrb	r3, [r3, #4]
 800ef48:	6878      	ldr	r0, [r7, #4]
 800ef4a:	f000 f93a 	bl	800f1c2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2204      	movs	r2, #4
 800ef52:	761a      	strb	r2, [r3, #24]
      break;
 800ef54:	e0f1      	b.n	800f13a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	791b      	ldrb	r3, [r3, #4]
 800ef5a:	4619      	mov	r1, r3
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fc7d 	bl	800f85c <USBH_LL_GetURBState>
 800ef62:	4603      	mov	r3, r0
 800ef64:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ef66:	7bbb      	ldrb	r3, [r7, #14]
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d102      	bne.n	800ef72 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2209      	movs	r2, #9
 800ef70:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ef72:	7bbb      	ldrb	r3, [r7, #14]
 800ef74:	2b05      	cmp	r3, #5
 800ef76:	d102      	bne.n	800ef7e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ef78:	2303      	movs	r3, #3
 800ef7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ef7c:	e0d6      	b.n	800f12c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ef7e:	7bbb      	ldrb	r3, [r7, #14]
 800ef80:	2b04      	cmp	r3, #4
 800ef82:	f040 80d3 	bne.w	800f12c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	220b      	movs	r2, #11
 800ef8a:	761a      	strb	r2, [r3, #24]
      break;
 800ef8c:	e0ce      	b.n	800f12c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6899      	ldr	r1, [r3, #8]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	899a      	ldrh	r2, [r3, #12]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	795b      	ldrb	r3, [r3, #5]
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	9000      	str	r0, [sp, #0]
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 f8ea 	bl	800f178 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2206      	movs	r2, #6
 800efb4:	761a      	strb	r2, [r3, #24]
      break;
 800efb6:	e0c0      	b.n	800f13a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	795b      	ldrb	r3, [r3, #5]
 800efbc:	4619      	mov	r1, r3
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f000 fc4c 	bl	800f85c <USBH_LL_GetURBState>
 800efc4:	4603      	mov	r3, r0
 800efc6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800efc8:	7bbb      	ldrb	r3, [r7, #14]
 800efca:	2b01      	cmp	r3, #1
 800efcc:	d103      	bne.n	800efd6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2207      	movs	r2, #7
 800efd2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800efd4:	e0ac      	b.n	800f130 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800efd6:	7bbb      	ldrb	r3, [r7, #14]
 800efd8:	2b05      	cmp	r3, #5
 800efda:	d105      	bne.n	800efe8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	220c      	movs	r2, #12
 800efe0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800efe2:	2303      	movs	r3, #3
 800efe4:	73fb      	strb	r3, [r7, #15]
      break;
 800efe6:	e0a3      	b.n	800f130 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800efe8:	7bbb      	ldrb	r3, [r7, #14]
 800efea:	2b02      	cmp	r3, #2
 800efec:	d103      	bne.n	800eff6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2205      	movs	r2, #5
 800eff2:	761a      	strb	r2, [r3, #24]
      break;
 800eff4:	e09c      	b.n	800f130 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800eff6:	7bbb      	ldrb	r3, [r7, #14]
 800eff8:	2b04      	cmp	r3, #4
 800effa:	f040 8099 	bne.w	800f130 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	220b      	movs	r2, #11
 800f002:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f004:	2302      	movs	r3, #2
 800f006:	73fb      	strb	r3, [r7, #15]
      break;
 800f008:	e092      	b.n	800f130 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	791b      	ldrb	r3, [r3, #4]
 800f00e:	2200      	movs	r2, #0
 800f010:	2100      	movs	r1, #0
 800f012:	6878      	ldr	r0, [r7, #4]
 800f014:	f000 f8d5 	bl	800f1c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f01e:	b29a      	uxth	r2, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2208      	movs	r2, #8
 800f028:	761a      	strb	r2, [r3, #24]

      break;
 800f02a:	e086      	b.n	800f13a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	791b      	ldrb	r3, [r3, #4]
 800f030:	4619      	mov	r1, r3
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 fc12 	bl	800f85c <USBH_LL_GetURBState>
 800f038:	4603      	mov	r3, r0
 800f03a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f03c:	7bbb      	ldrb	r3, [r7, #14]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d105      	bne.n	800f04e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	220d      	movs	r2, #13
 800f046:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f04c:	e072      	b.n	800f134 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f04e:	7bbb      	ldrb	r3, [r7, #14]
 800f050:	2b04      	cmp	r3, #4
 800f052:	d103      	bne.n	800f05c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	220b      	movs	r2, #11
 800f058:	761a      	strb	r2, [r3, #24]
      break;
 800f05a:	e06b      	b.n	800f134 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f05c:	7bbb      	ldrb	r3, [r7, #14]
 800f05e:	2b05      	cmp	r3, #5
 800f060:	d168      	bne.n	800f134 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f062:	2303      	movs	r3, #3
 800f064:	73fb      	strb	r3, [r7, #15]
      break;
 800f066:	e065      	b.n	800f134 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	795b      	ldrb	r3, [r3, #5]
 800f06c:	2201      	movs	r2, #1
 800f06e:	9200      	str	r2, [sp, #0]
 800f070:	2200      	movs	r2, #0
 800f072:	2100      	movs	r1, #0
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 f87f 	bl	800f178 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f080:	b29a      	uxth	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	220a      	movs	r2, #10
 800f08a:	761a      	strb	r2, [r3, #24]
      break;
 800f08c:	e055      	b.n	800f13a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	795b      	ldrb	r3, [r3, #5]
 800f092:	4619      	mov	r1, r3
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 fbe1 	bl	800f85c <USBH_LL_GetURBState>
 800f09a:	4603      	mov	r3, r0
 800f09c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f09e:	7bbb      	ldrb	r3, [r7, #14]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d105      	bne.n	800f0b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	220d      	movs	r2, #13
 800f0ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f0ae:	e043      	b.n	800f138 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f0b0:	7bbb      	ldrb	r3, [r7, #14]
 800f0b2:	2b02      	cmp	r3, #2
 800f0b4:	d103      	bne.n	800f0be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2209      	movs	r2, #9
 800f0ba:	761a      	strb	r2, [r3, #24]
      break;
 800f0bc:	e03c      	b.n	800f138 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f0be:	7bbb      	ldrb	r3, [r7, #14]
 800f0c0:	2b04      	cmp	r3, #4
 800f0c2:	d139      	bne.n	800f138 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	220b      	movs	r2, #11
 800f0c8:	761a      	strb	r2, [r3, #24]
      break;
 800f0ca:	e035      	b.n	800f138 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	7e5b      	ldrb	r3, [r3, #25]
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	b2da      	uxtb	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	765a      	strb	r2, [r3, #25]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	7e5b      	ldrb	r3, [r3, #25]
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d806      	bhi.n	800f0ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f0ec:	e025      	b.n	800f13a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f0f4:	2106      	movs	r1, #6
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	795b      	ldrb	r3, [r3, #5]
 800f104:	4619      	mov	r1, r3
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 f90c 	bl	800f324 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	791b      	ldrb	r3, [r3, #4]
 800f110:	4619      	mov	r1, r3
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 f906 	bl	800f324 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2200      	movs	r2, #0
 800f11c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f11e:	2302      	movs	r3, #2
 800f120:	73fb      	strb	r3, [r7, #15]
      break;
 800f122:	e00a      	b.n	800f13a <USBH_HandleControl+0x2de>

    default:
      break;
 800f124:	bf00      	nop
 800f126:	e008      	b.n	800f13a <USBH_HandleControl+0x2de>
      break;
 800f128:	bf00      	nop
 800f12a:	e006      	b.n	800f13a <USBH_HandleControl+0x2de>
      break;
 800f12c:	bf00      	nop
 800f12e:	e004      	b.n	800f13a <USBH_HandleControl+0x2de>
      break;
 800f130:	bf00      	nop
 800f132:	e002      	b.n	800f13a <USBH_HandleControl+0x2de>
      break;
 800f134:	bf00      	nop
 800f136:	e000      	b.n	800f13a <USBH_HandleControl+0x2de>
      break;
 800f138:	bf00      	nop
  }

  return status;
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b088      	sub	sp, #32
 800f148:	af04      	add	r7, sp, #16
 800f14a:	60f8      	str	r0, [r7, #12]
 800f14c:	60b9      	str	r1, [r7, #8]
 800f14e:	4613      	mov	r3, r2
 800f150:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f152:	79f9      	ldrb	r1, [r7, #7]
 800f154:	2300      	movs	r3, #0
 800f156:	9303      	str	r3, [sp, #12]
 800f158:	2308      	movs	r3, #8
 800f15a:	9302      	str	r3, [sp, #8]
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	9301      	str	r3, [sp, #4]
 800f160:	2300      	movs	r3, #0
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	2300      	movs	r3, #0
 800f166:	2200      	movs	r2, #0
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 fb46 	bl	800f7fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f16e:	2300      	movs	r3, #0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3710      	adds	r7, #16
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b088      	sub	sp, #32
 800f17c:	af04      	add	r7, sp, #16
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	4611      	mov	r1, r2
 800f184:	461a      	mov	r2, r3
 800f186:	460b      	mov	r3, r1
 800f188:	80fb      	strh	r3, [r7, #6]
 800f18a:	4613      	mov	r3, r2
 800f18c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f194:	2b00      	cmp	r3, #0
 800f196:	d001      	beq.n	800f19c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f198:	2300      	movs	r3, #0
 800f19a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f19c:	7979      	ldrb	r1, [r7, #5]
 800f19e:	7e3b      	ldrb	r3, [r7, #24]
 800f1a0:	9303      	str	r3, [sp, #12]
 800f1a2:	88fb      	ldrh	r3, [r7, #6]
 800f1a4:	9302      	str	r3, [sp, #8]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	9301      	str	r3, [sp, #4]
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	9300      	str	r3, [sp, #0]
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f000 fb21 	bl	800f7fa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b088      	sub	sp, #32
 800f1c6:	af04      	add	r7, sp, #16
 800f1c8:	60f8      	str	r0, [r7, #12]
 800f1ca:	60b9      	str	r1, [r7, #8]
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	80fb      	strh	r3, [r7, #6]
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f1d8:	7979      	ldrb	r1, [r7, #5]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	9303      	str	r3, [sp, #12]
 800f1de:	88fb      	ldrh	r3, [r7, #6]
 800f1e0:	9302      	str	r3, [sp, #8]
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f000 fb03 	bl	800f7fa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f1f4:	2300      	movs	r3, #0

}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b088      	sub	sp, #32
 800f202:	af04      	add	r7, sp, #16
 800f204:	60f8      	str	r0, [r7, #12]
 800f206:	60b9      	str	r1, [r7, #8]
 800f208:	4611      	mov	r1, r2
 800f20a:	461a      	mov	r2, r3
 800f20c:	460b      	mov	r3, r1
 800f20e:	80fb      	strh	r3, [r7, #6]
 800f210:	4613      	mov	r3, r2
 800f212:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f21e:	2300      	movs	r3, #0
 800f220:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f222:	7979      	ldrb	r1, [r7, #5]
 800f224:	7e3b      	ldrb	r3, [r7, #24]
 800f226:	9303      	str	r3, [sp, #12]
 800f228:	88fb      	ldrh	r3, [r7, #6]
 800f22a:	9302      	str	r3, [sp, #8]
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	2301      	movs	r3, #1
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	2302      	movs	r3, #2
 800f236:	2200      	movs	r2, #0
 800f238:	68f8      	ldr	r0, [r7, #12]
 800f23a:	f000 fade 	bl	800f7fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b088      	sub	sp, #32
 800f24c:	af04      	add	r7, sp, #16
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	4611      	mov	r1, r2
 800f254:	461a      	mov	r2, r3
 800f256:	460b      	mov	r3, r1
 800f258:	80fb      	strh	r3, [r7, #6]
 800f25a:	4613      	mov	r3, r2
 800f25c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f25e:	7979      	ldrb	r1, [r7, #5]
 800f260:	2300      	movs	r3, #0
 800f262:	9303      	str	r3, [sp, #12]
 800f264:	88fb      	ldrh	r3, [r7, #6]
 800f266:	9302      	str	r3, [sp, #8]
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	9301      	str	r3, [sp, #4]
 800f26c:	2301      	movs	r3, #1
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	2302      	movs	r3, #2
 800f272:	2201      	movs	r2, #1
 800f274:	68f8      	ldr	r0, [r7, #12]
 800f276:	f000 fac0 	bl	800f7fa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3710      	adds	r7, #16
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af04      	add	r7, sp, #16
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	4608      	mov	r0, r1
 800f28e:	4611      	mov	r1, r2
 800f290:	461a      	mov	r2, r3
 800f292:	4603      	mov	r3, r0
 800f294:	70fb      	strb	r3, [r7, #3]
 800f296:	460b      	mov	r3, r1
 800f298:	70bb      	strb	r3, [r7, #2]
 800f29a:	4613      	mov	r3, r2
 800f29c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f29e:	7878      	ldrb	r0, [r7, #1]
 800f2a0:	78ba      	ldrb	r2, [r7, #2]
 800f2a2:	78f9      	ldrb	r1, [r7, #3]
 800f2a4:	8b3b      	ldrh	r3, [r7, #24]
 800f2a6:	9302      	str	r3, [sp, #8]
 800f2a8:	7d3b      	ldrb	r3, [r7, #20]
 800f2aa:	9301      	str	r3, [sp, #4]
 800f2ac:	7c3b      	ldrb	r3, [r7, #16]
 800f2ae:	9300      	str	r3, [sp, #0]
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fa53 	bl	800f75e <USBH_LL_OpenPipe>

  return USBH_OK;
 800f2b8:	2300      	movs	r3, #0
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3708      	adds	r7, #8
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}

0800f2c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f2c2:	b580      	push	{r7, lr}
 800f2c4:	b082      	sub	sp, #8
 800f2c6:	af00      	add	r7, sp, #0
 800f2c8:	6078      	str	r0, [r7, #4]
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f2ce:	78fb      	ldrb	r3, [r7, #3]
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 fa72 	bl	800f7bc <USBH_LL_ClosePipe>

  return USBH_OK;
 800f2d8:	2300      	movs	r3, #0
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3708      	adds	r7, #8
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b084      	sub	sp, #16
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 f836 	bl	800f360 <USBH_GetFreePipe>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f2f8:	89fb      	ldrh	r3, [r7, #14]
 800f2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d00a      	beq.n	800f318 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f302:	78fa      	ldrb	r2, [r7, #3]
 800f304:	89fb      	ldrh	r3, [r7, #14]
 800f306:	f003 030f 	and.w	r3, r3, #15
 800f30a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f30e:	6879      	ldr	r1, [r7, #4]
 800f310:	33e0      	adds	r3, #224	; 0xe0
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	440b      	add	r3, r1
 800f316:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f318:	89fb      	ldrh	r3, [r7, #14]
 800f31a:	b2db      	uxtb	r3, r3
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	460b      	mov	r3, r1
 800f32e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f330:	78fb      	ldrb	r3, [r7, #3]
 800f332:	2b0a      	cmp	r3, #10
 800f334:	d80d      	bhi.n	800f352 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f336:	78fb      	ldrb	r3, [r7, #3]
 800f338:	687a      	ldr	r2, [r7, #4]
 800f33a:	33e0      	adds	r3, #224	; 0xe0
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	4413      	add	r3, r2
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	78fb      	ldrb	r3, [r7, #3]
 800f344:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f348:	6879      	ldr	r1, [r7, #4]
 800f34a:	33e0      	adds	r3, #224	; 0xe0
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	440b      	add	r3, r1
 800f350:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f352:	2300      	movs	r3, #0
}
 800f354:	4618      	mov	r0, r3
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr

0800f360 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f360:	b480      	push	{r7}
 800f362:	b085      	sub	sp, #20
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f368:	2300      	movs	r3, #0
 800f36a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f36c:	2300      	movs	r3, #0
 800f36e:	73fb      	strb	r3, [r7, #15]
 800f370:	e00f      	b.n	800f392 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f372:	7bfb      	ldrb	r3, [r7, #15]
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	33e0      	adds	r3, #224	; 0xe0
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	4413      	add	r3, r2
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d102      	bne.n	800f38c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f386:	7bfb      	ldrb	r3, [r7, #15]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	e007      	b.n	800f39c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f38c:	7bfb      	ldrb	r3, [r7, #15]
 800f38e:	3301      	adds	r3, #1
 800f390:	73fb      	strb	r3, [r7, #15]
 800f392:	7bfb      	ldrb	r3, [r7, #15]
 800f394:	2b0a      	cmp	r3, #10
 800f396:	d9ec      	bls.n	800f372 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f398:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3714      	adds	r7, #20
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	490e      	ldr	r1, [pc, #56]	; (800f3e8 <MX_USB_HOST_Init+0x40>)
 800f3b0:	480e      	ldr	r0, [pc, #56]	; (800f3ec <MX_USB_HOST_Init+0x44>)
 800f3b2:	f7fe fca1 	bl	800dcf8 <USBH_Init>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f3bc:	f7f4 f8b8 	bl	8003530 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f3c0:	490b      	ldr	r1, [pc, #44]	; (800f3f0 <MX_USB_HOST_Init+0x48>)
 800f3c2:	480a      	ldr	r0, [pc, #40]	; (800f3ec <MX_USB_HOST_Init+0x44>)
 800f3c4:	f7fe fd26 	bl	800de14 <USBH_RegisterClass>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f3ce:	f7f4 f8af 	bl	8003530 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f3d2:	4806      	ldr	r0, [pc, #24]	; (800f3ec <MX_USB_HOST_Init+0x44>)
 800f3d4:	f7fe fdaa 	bl	800df2c <USBH_Start>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d001      	beq.n	800f3e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f3de:	f7f4 f8a7 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f3e2:	bf00      	nop
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	0800f409 	.word	0x0800f409
 800f3ec:	20000e64 	.word	0x20000e64
 800f3f0:	200000e4 	.word	0x200000e4

0800f3f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f3f8:	4802      	ldr	r0, [pc, #8]	; (800f404 <MX_USB_HOST_Process+0x10>)
 800f3fa:	f7fe fda7 	bl	800df4c <USBH_Process>
}
 800f3fe:	bf00      	nop
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	20000e64 	.word	0x20000e64

0800f408 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	460b      	mov	r3, r1
 800f412:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f414:	78fb      	ldrb	r3, [r7, #3]
 800f416:	3b01      	subs	r3, #1
 800f418:	2b04      	cmp	r3, #4
 800f41a:	d819      	bhi.n	800f450 <USBH_UserProcess+0x48>
 800f41c:	a201      	add	r2, pc, #4	; (adr r2, 800f424 <USBH_UserProcess+0x1c>)
 800f41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f422:	bf00      	nop
 800f424:	0800f451 	.word	0x0800f451
 800f428:	0800f441 	.word	0x0800f441
 800f42c:	0800f451 	.word	0x0800f451
 800f430:	0800f449 	.word	0x0800f449
 800f434:	0800f439 	.word	0x0800f439
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f438:	4b09      	ldr	r3, [pc, #36]	; (800f460 <USBH_UserProcess+0x58>)
 800f43a:	2203      	movs	r2, #3
 800f43c:	701a      	strb	r2, [r3, #0]
  break;
 800f43e:	e008      	b.n	800f452 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f440:	4b07      	ldr	r3, [pc, #28]	; (800f460 <USBH_UserProcess+0x58>)
 800f442:	2202      	movs	r2, #2
 800f444:	701a      	strb	r2, [r3, #0]
  break;
 800f446:	e004      	b.n	800f452 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f448:	4b05      	ldr	r3, [pc, #20]	; (800f460 <USBH_UserProcess+0x58>)
 800f44a:	2201      	movs	r2, #1
 800f44c:	701a      	strb	r2, [r3, #0]
  break;
 800f44e:	e000      	b.n	800f452 <USBH_UserProcess+0x4a>

  default:
  break;
 800f450:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f452:	bf00      	nop
 800f454:	370c      	adds	r7, #12
 800f456:	46bd      	mov	sp, r7
 800f458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop
 800f460:	200003c8 	.word	0x200003c8

0800f464 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b08a      	sub	sp, #40	; 0x28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f46c:	f107 0314 	add.w	r3, r7, #20
 800f470:	2200      	movs	r2, #0
 800f472:	601a      	str	r2, [r3, #0]
 800f474:	605a      	str	r2, [r3, #4]
 800f476:	609a      	str	r2, [r3, #8]
 800f478:	60da      	str	r2, [r3, #12]
 800f47a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f484:	d147      	bne.n	800f516 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f486:	2300      	movs	r3, #0
 800f488:	613b      	str	r3, [r7, #16]
 800f48a:	4b25      	ldr	r3, [pc, #148]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f48e:	4a24      	ldr	r2, [pc, #144]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f490:	f043 0301 	orr.w	r3, r3, #1
 800f494:	6313      	str	r3, [r2, #48]	; 0x30
 800f496:	4b22      	ldr	r3, [pc, #136]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f49a:	f003 0301 	and.w	r3, r3, #1
 800f49e:	613b      	str	r3, [r7, #16]
 800f4a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800f4a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f4a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800f4b0:	f107 0314 	add.w	r3, r7, #20
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	481b      	ldr	r0, [pc, #108]	; (800f524 <HAL_HCD_MspInit+0xc0>)
 800f4b8:	f7f6 fb3a 	bl	8005b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800f4bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f4c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4ca:	2303      	movs	r3, #3
 800f4cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f4ce:	230a      	movs	r3, #10
 800f4d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4d2:	f107 0314 	add.w	r3, r7, #20
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	4812      	ldr	r0, [pc, #72]	; (800f524 <HAL_HCD_MspInit+0xc0>)
 800f4da:	f7f6 fb29 	bl	8005b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f4de:	4b10      	ldr	r3, [pc, #64]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4e2:	4a0f      	ldr	r2, [pc, #60]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4e8:	6353      	str	r3, [r2, #52]	; 0x34
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	60fb      	str	r3, [r7, #12]
 800f4ee:	4b0c      	ldr	r3, [pc, #48]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4f2:	4a0b      	ldr	r2, [pc, #44]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f4f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f4f8:	6453      	str	r3, [r2, #68]	; 0x44
 800f4fa:	4b09      	ldr	r3, [pc, #36]	; (800f520 <HAL_HCD_MspInit+0xbc>)
 800f4fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f502:	60fb      	str	r3, [r7, #12]
 800f504:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f506:	2200      	movs	r2, #0
 800f508:	2100      	movs	r1, #0
 800f50a:	2043      	movs	r0, #67	; 0x43
 800f50c:	f7f5 fdb2 	bl	8005074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f510:	2043      	movs	r0, #67	; 0x43
 800f512:	f7f5 fddb 	bl	80050cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f516:	bf00      	nop
 800f518:	3728      	adds	r7, #40	; 0x28
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	40023800 	.word	0x40023800
 800f524:	40020000 	.word	0x40020000

0800f528 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f536:	4618      	mov	r0, r3
 800f538:	f7ff f8db 	bl	800e6f2 <USBH_LL_IncTimer>
}
 800f53c:	bf00      	nop
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff f913 	bl	800e77e <USBH_LL_Connect>
}
 800f558:	bf00      	nop
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b082      	sub	sp, #8
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f56e:	4618      	mov	r0, r3
 800f570:	f7ff f91c 	bl	800e7ac <USBH_LL_Disconnect>
}
 800f574:	bf00      	nop
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	460b      	mov	r3, r1
 800f586:	70fb      	strb	r3, [r7, #3]
 800f588:	4613      	mov	r3, r2
 800f58a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f58c:	bf00      	nop
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7ff f8cd 	bl	800e746 <USBH_LL_PortEnabled>
}
 800f5ac:	bf00      	nop
 800f5ae:	3708      	adds	r7, #8
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7ff f8cd 	bl	800e762 <USBH_LL_PortDisabled>
}
 800f5c8:	bf00      	nop
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}

0800f5d0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	d12a      	bne.n	800f638 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f5e2:	4a18      	ldr	r2, [pc, #96]	; (800f644 <USBH_LL_Init+0x74>)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4a15      	ldr	r2, [pc, #84]	; (800f644 <USBH_LL_Init+0x74>)
 800f5ee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f5f2:	4b14      	ldr	r3, [pc, #80]	; (800f644 <USBH_LL_Init+0x74>)
 800f5f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f5f8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f5fa:	4b12      	ldr	r3, [pc, #72]	; (800f644 <USBH_LL_Init+0x74>)
 800f5fc:	2208      	movs	r2, #8
 800f5fe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f600:	4b10      	ldr	r3, [pc, #64]	; (800f644 <USBH_LL_Init+0x74>)
 800f602:	2201      	movs	r2, #1
 800f604:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f606:	4b0f      	ldr	r3, [pc, #60]	; (800f644 <USBH_LL_Init+0x74>)
 800f608:	2200      	movs	r2, #0
 800f60a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f60c:	4b0d      	ldr	r3, [pc, #52]	; (800f644 <USBH_LL_Init+0x74>)
 800f60e:	2202      	movs	r2, #2
 800f610:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f612:	4b0c      	ldr	r3, [pc, #48]	; (800f644 <USBH_LL_Init+0x74>)
 800f614:	2200      	movs	r2, #0
 800f616:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f618:	480a      	ldr	r0, [pc, #40]	; (800f644 <USBH_LL_Init+0x74>)
 800f61a:	f7f6 fe97 	bl	800634c <HAL_HCD_Init>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d001      	beq.n	800f628 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f624:	f7f3 ff84 	bl	8003530 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f628:	4806      	ldr	r0, [pc, #24]	; (800f644 <USBH_LL_Init+0x74>)
 800f62a:	f7f7 fa86 	bl	8006b3a <HAL_HCD_GetCurrentFrame>
 800f62e:	4603      	mov	r3, r0
 800f630:	4619      	mov	r1, r3
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f7ff f84e 	bl	800e6d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3708      	adds	r7, #8
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	2000123c 	.word	0x2000123c

0800f648 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f654:	2300      	movs	r3, #0
 800f656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f7 f9f5 	bl	8006a4e <HAL_HCD_Start>
 800f664:	4603      	mov	r3, r0
 800f666:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f668:	7bfb      	ldrb	r3, [r7, #15]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 f95c 	bl	800f928 <USBH_Get_USB_Status>
 800f670:	4603      	mov	r3, r0
 800f672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f674:	7bbb      	ldrb	r3, [r7, #14]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3710      	adds	r7, #16
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b084      	sub	sp, #16
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f686:	2300      	movs	r3, #0
 800f688:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f68a:	2300      	movs	r3, #0
 800f68c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f694:	4618      	mov	r0, r3
 800f696:	f7f7 f9fd 	bl	8006a94 <HAL_HCD_Stop>
 800f69a:	4603      	mov	r3, r0
 800f69c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f69e:	7bfb      	ldrb	r3, [r7, #15]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f000 f941 	bl	800f928 <USBH_Get_USB_Status>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7f7 fa45 	bl	8006b56 <HAL_HCD_GetCurrentSpeed>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	d00c      	beq.n	800f6ec <USBH_LL_GetSpeed+0x38>
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d80d      	bhi.n	800f6f2 <USBH_LL_GetSpeed+0x3e>
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d002      	beq.n	800f6e0 <USBH_LL_GetSpeed+0x2c>
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d003      	beq.n	800f6e6 <USBH_LL_GetSpeed+0x32>
 800f6de:	e008      	b.n	800f6f2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e4:	e008      	b.n	800f6f8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ea:	e005      	b.n	800f6f8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f6ec:	2302      	movs	r3, #2
 800f6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800f6f0:	e002      	b.n	800f6f8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800f6f6:	bf00      	nop
  }
  return  speed;
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3710      	adds	r7, #16
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f702:	b580      	push	{r7, lr}
 800f704:	b084      	sub	sp, #16
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f70a:	2300      	movs	r3, #0
 800f70c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f70e:	2300      	movs	r3, #0
 800f710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f718:	4618      	mov	r0, r3
 800f71a:	f7f7 f9d8 	bl	8006ace <HAL_HCD_ResetPort>
 800f71e:	4603      	mov	r3, r0
 800f720:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f722:	7bfb      	ldrb	r3, [r7, #15]
 800f724:	4618      	mov	r0, r3
 800f726:	f000 f8ff 	bl	800f928 <USBH_Get_USB_Status>
 800f72a:	4603      	mov	r3, r0
 800f72c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f72e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f730:	4618      	mov	r0, r3
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
 800f740:	460b      	mov	r3, r1
 800f742:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f74a:	78fa      	ldrb	r2, [r7, #3]
 800f74c:	4611      	mov	r1, r2
 800f74e:	4618      	mov	r0, r3
 800f750:	f7f7 f9df 	bl	8006b12 <HAL_HCD_HC_GetXferCount>
 800f754:	4603      	mov	r3, r0
}
 800f756:	4618      	mov	r0, r3
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f75e:	b590      	push	{r4, r7, lr}
 800f760:	b089      	sub	sp, #36	; 0x24
 800f762:	af04      	add	r7, sp, #16
 800f764:	6078      	str	r0, [r7, #4]
 800f766:	4608      	mov	r0, r1
 800f768:	4611      	mov	r1, r2
 800f76a:	461a      	mov	r2, r3
 800f76c:	4603      	mov	r3, r0
 800f76e:	70fb      	strb	r3, [r7, #3]
 800f770:	460b      	mov	r3, r1
 800f772:	70bb      	strb	r3, [r7, #2]
 800f774:	4613      	mov	r3, r2
 800f776:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f778:	2300      	movs	r3, #0
 800f77a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f786:	787c      	ldrb	r4, [r7, #1]
 800f788:	78ba      	ldrb	r2, [r7, #2]
 800f78a:	78f9      	ldrb	r1, [r7, #3]
 800f78c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f78e:	9302      	str	r3, [sp, #8]
 800f790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f794:	9301      	str	r3, [sp, #4]
 800f796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	4623      	mov	r3, r4
 800f79e:	f7f6 fe43 	bl	8006428 <HAL_HCD_HC_Init>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f7a6:	7bfb      	ldrb	r3, [r7, #15]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f000 f8bd 	bl	800f928 <USBH_Get_USB_Status>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3714      	adds	r7, #20
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd90      	pop	{r4, r7, pc}

0800f7bc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b084      	sub	sp, #16
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f7d6:	78fa      	ldrb	r2, [r7, #3]
 800f7d8:	4611      	mov	r1, r2
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7f6 feb3 	bl	8006546 <HAL_HCD_HC_Halt>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f7e4:	7bfb      	ldrb	r3, [r7, #15]
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f000 f89e 	bl	800f928 <USBH_Get_USB_Status>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f7fa:	b590      	push	{r4, r7, lr}
 800f7fc:	b089      	sub	sp, #36	; 0x24
 800f7fe:	af04      	add	r7, sp, #16
 800f800:	6078      	str	r0, [r7, #4]
 800f802:	4608      	mov	r0, r1
 800f804:	4611      	mov	r1, r2
 800f806:	461a      	mov	r2, r3
 800f808:	4603      	mov	r3, r0
 800f80a:	70fb      	strb	r3, [r7, #3]
 800f80c:	460b      	mov	r3, r1
 800f80e:	70bb      	strb	r3, [r7, #2]
 800f810:	4613      	mov	r3, r2
 800f812:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f814:	2300      	movs	r3, #0
 800f816:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f818:	2300      	movs	r3, #0
 800f81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f822:	787c      	ldrb	r4, [r7, #1]
 800f824:	78ba      	ldrb	r2, [r7, #2]
 800f826:	78f9      	ldrb	r1, [r7, #3]
 800f828:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f82c:	9303      	str	r3, [sp, #12]
 800f82e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f830:	9302      	str	r3, [sp, #8]
 800f832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f834:	9301      	str	r3, [sp, #4]
 800f836:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	4623      	mov	r3, r4
 800f83e:	f7f6 fea5 	bl	800658c <HAL_HCD_HC_SubmitRequest>
 800f842:	4603      	mov	r3, r0
 800f844:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f846:	7bfb      	ldrb	r3, [r7, #15]
 800f848:	4618      	mov	r0, r3
 800f84a:	f000 f86d 	bl	800f928 <USBH_Get_USB_Status>
 800f84e:	4603      	mov	r3, r0
 800f850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f852:	7bbb      	ldrb	r3, [r7, #14]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3714      	adds	r7, #20
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd90      	pop	{r4, r7, pc}

0800f85c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	460b      	mov	r3, r1
 800f866:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f86e:	78fa      	ldrb	r2, [r7, #3]
 800f870:	4611      	mov	r1, r2
 800f872:	4618      	mov	r0, r3
 800f874:	f7f7 f939 	bl	8006aea <HAL_HCD_HC_GetURBState>
 800f878:	4603      	mov	r3, r0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f882:	b580      	push	{r7, lr}
 800f884:	b082      	sub	sp, #8
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	460b      	mov	r3, r1
 800f88c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f894:	2b01      	cmp	r3, #1
 800f896:	d103      	bne.n	800f8a0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f898:	78fb      	ldrb	r3, [r7, #3]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 f870 	bl	800f980 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f8a0:	20c8      	movs	r0, #200	; 0xc8
 800f8a2:	f7f4 fef5 	bl	8004690 <HAL_Delay>
  return USBH_OK;
 800f8a6:	2300      	movs	r3, #0
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3708      	adds	r7, #8
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b085      	sub	sp, #20
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	70fb      	strb	r3, [r7, #3]
 800f8bc:	4613      	mov	r3, r2
 800f8be:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f8c6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f8c8:	78fb      	ldrb	r3, [r7, #3]
 800f8ca:	68fa      	ldr	r2, [r7, #12]
 800f8cc:	212c      	movs	r1, #44	; 0x2c
 800f8ce:	fb01 f303 	mul.w	r3, r1, r3
 800f8d2:	4413      	add	r3, r2
 800f8d4:	333b      	adds	r3, #59	; 0x3b
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d009      	beq.n	800f8f0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f8dc:	78fb      	ldrb	r3, [r7, #3]
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	212c      	movs	r1, #44	; 0x2c
 800f8e2:	fb01 f303 	mul.w	r3, r1, r3
 800f8e6:	4413      	add	r3, r2
 800f8e8:	3354      	adds	r3, #84	; 0x54
 800f8ea:	78ba      	ldrb	r2, [r7, #2]
 800f8ec:	701a      	strb	r2, [r3, #0]
 800f8ee:	e008      	b.n	800f902 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f8f0:	78fb      	ldrb	r3, [r7, #3]
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	212c      	movs	r1, #44	; 0x2c
 800f8f6:	fb01 f303 	mul.w	r3, r1, r3
 800f8fa:	4413      	add	r3, r2
 800f8fc:	3355      	adds	r3, #85	; 0x55
 800f8fe:	78ba      	ldrb	r2, [r7, #2]
 800f900:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f902:	2300      	movs	r3, #0
}
 800f904:	4618      	mov	r0, r3
 800f906:	3714      	adds	r7, #20
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f7f4 feb9 	bl	8004690 <HAL_Delay>
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
	...

0800f928 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f928:	b480      	push	{r7}
 800f92a:	b085      	sub	sp, #20
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	4603      	mov	r3, r0
 800f930:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f932:	2300      	movs	r3, #0
 800f934:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	2b03      	cmp	r3, #3
 800f93a:	d817      	bhi.n	800f96c <USBH_Get_USB_Status+0x44>
 800f93c:	a201      	add	r2, pc, #4	; (adr r2, 800f944 <USBH_Get_USB_Status+0x1c>)
 800f93e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f942:	bf00      	nop
 800f944:	0800f955 	.word	0x0800f955
 800f948:	0800f95b 	.word	0x0800f95b
 800f94c:	0800f961 	.word	0x0800f961
 800f950:	0800f967 	.word	0x0800f967
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f954:	2300      	movs	r3, #0
 800f956:	73fb      	strb	r3, [r7, #15]
    break;
 800f958:	e00b      	b.n	800f972 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f95a:	2302      	movs	r3, #2
 800f95c:	73fb      	strb	r3, [r7, #15]
    break;
 800f95e:	e008      	b.n	800f972 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f960:	2301      	movs	r3, #1
 800f962:	73fb      	strb	r3, [r7, #15]
    break;
 800f964:	e005      	b.n	800f972 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f966:	2302      	movs	r3, #2
 800f968:	73fb      	strb	r3, [r7, #15]
    break;
 800f96a:	e002      	b.n	800f972 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f96c:	2302      	movs	r3, #2
 800f96e:	73fb      	strb	r3, [r7, #15]
    break;
 800f970:	bf00      	nop
  }
  return usb_status;
 800f972:	7bfb      	ldrb	r3, [r7, #15]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3714      	adds	r7, #20
 800f978:	46bd      	mov	sp, r7
 800f97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97e:	4770      	bx	lr

0800f980 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	4603      	mov	r3, r0
 800f988:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f98a:	79fb      	ldrb	r3, [r7, #7]
 800f98c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f98e:	79fb      	ldrb	r3, [r7, #7]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d102      	bne.n	800f99a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800f994:	2301      	movs	r3, #1
 800f996:	73fb      	strb	r3, [r7, #15]
 800f998:	e001      	b.n	800f99e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f99a:	2300      	movs	r3, #0
 800f99c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f99e:	7bfb      	ldrb	r3, [r7, #15]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	2101      	movs	r1, #1
 800f9a4:	4803      	ldr	r0, [pc, #12]	; (800f9b4 <MX_DriverVbusFS+0x34>)
 800f9a6:	f7f6 fc87 	bl	80062b8 <HAL_GPIO_WritePin>
}
 800f9aa:	bf00      	nop
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	40020800 	.word	0x40020800

0800f9b8 <__errno>:
 800f9b8:	4b01      	ldr	r3, [pc, #4]	; (800f9c0 <__errno+0x8>)
 800f9ba:	6818      	ldr	r0, [r3, #0]
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	20000104 	.word	0x20000104

0800f9c4 <__libc_init_array>:
 800f9c4:	b570      	push	{r4, r5, r6, lr}
 800f9c6:	4d0d      	ldr	r5, [pc, #52]	; (800f9fc <__libc_init_array+0x38>)
 800f9c8:	4c0d      	ldr	r4, [pc, #52]	; (800fa00 <__libc_init_array+0x3c>)
 800f9ca:	1b64      	subs	r4, r4, r5
 800f9cc:	10a4      	asrs	r4, r4, #2
 800f9ce:	2600      	movs	r6, #0
 800f9d0:	42a6      	cmp	r6, r4
 800f9d2:	d109      	bne.n	800f9e8 <__libc_init_array+0x24>
 800f9d4:	4d0b      	ldr	r5, [pc, #44]	; (800fa04 <__libc_init_array+0x40>)
 800f9d6:	4c0c      	ldr	r4, [pc, #48]	; (800fa08 <__libc_init_array+0x44>)
 800f9d8:	f003 fe88 	bl	80136ec <_init>
 800f9dc:	1b64      	subs	r4, r4, r5
 800f9de:	10a4      	asrs	r4, r4, #2
 800f9e0:	2600      	movs	r6, #0
 800f9e2:	42a6      	cmp	r6, r4
 800f9e4:	d105      	bne.n	800f9f2 <__libc_init_array+0x2e>
 800f9e6:	bd70      	pop	{r4, r5, r6, pc}
 800f9e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9ec:	4798      	blx	r3
 800f9ee:	3601      	adds	r6, #1
 800f9f0:	e7ee      	b.n	800f9d0 <__libc_init_array+0xc>
 800f9f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9f6:	4798      	blx	r3
 800f9f8:	3601      	adds	r6, #1
 800f9fa:	e7f2      	b.n	800f9e2 <__libc_init_array+0x1e>
 800f9fc:	08014408 	.word	0x08014408
 800fa00:	08014408 	.word	0x08014408
 800fa04:	08014408 	.word	0x08014408
 800fa08:	0801440c 	.word	0x0801440c

0800fa0c <malloc>:
 800fa0c:	4b02      	ldr	r3, [pc, #8]	; (800fa18 <malloc+0xc>)
 800fa0e:	4601      	mov	r1, r0
 800fa10:	6818      	ldr	r0, [r3, #0]
 800fa12:	f000 b863 	b.w	800fadc <_malloc_r>
 800fa16:	bf00      	nop
 800fa18:	20000104 	.word	0x20000104

0800fa1c <free>:
 800fa1c:	4b02      	ldr	r3, [pc, #8]	; (800fa28 <free+0xc>)
 800fa1e:	4601      	mov	r1, r0
 800fa20:	6818      	ldr	r0, [r3, #0]
 800fa22:	f000 b80b 	b.w	800fa3c <_free_r>
 800fa26:	bf00      	nop
 800fa28:	20000104 	.word	0x20000104

0800fa2c <memset>:
 800fa2c:	4402      	add	r2, r0
 800fa2e:	4603      	mov	r3, r0
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d100      	bne.n	800fa36 <memset+0xa>
 800fa34:	4770      	bx	lr
 800fa36:	f803 1b01 	strb.w	r1, [r3], #1
 800fa3a:	e7f9      	b.n	800fa30 <memset+0x4>

0800fa3c <_free_r>:
 800fa3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa3e:	2900      	cmp	r1, #0
 800fa40:	d048      	beq.n	800fad4 <_free_r+0x98>
 800fa42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa46:	9001      	str	r0, [sp, #4]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f1a1 0404 	sub.w	r4, r1, #4
 800fa4e:	bfb8      	it	lt
 800fa50:	18e4      	addlt	r4, r4, r3
 800fa52:	f001 fbdb 	bl	801120c <__malloc_lock>
 800fa56:	4a20      	ldr	r2, [pc, #128]	; (800fad8 <_free_r+0x9c>)
 800fa58:	9801      	ldr	r0, [sp, #4]
 800fa5a:	6813      	ldr	r3, [r2, #0]
 800fa5c:	4615      	mov	r5, r2
 800fa5e:	b933      	cbnz	r3, 800fa6e <_free_r+0x32>
 800fa60:	6063      	str	r3, [r4, #4]
 800fa62:	6014      	str	r4, [r2, #0]
 800fa64:	b003      	add	sp, #12
 800fa66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa6a:	f001 bbd5 	b.w	8011218 <__malloc_unlock>
 800fa6e:	42a3      	cmp	r3, r4
 800fa70:	d90b      	bls.n	800fa8a <_free_r+0x4e>
 800fa72:	6821      	ldr	r1, [r4, #0]
 800fa74:	1862      	adds	r2, r4, r1
 800fa76:	4293      	cmp	r3, r2
 800fa78:	bf04      	itt	eq
 800fa7a:	681a      	ldreq	r2, [r3, #0]
 800fa7c:	685b      	ldreq	r3, [r3, #4]
 800fa7e:	6063      	str	r3, [r4, #4]
 800fa80:	bf04      	itt	eq
 800fa82:	1852      	addeq	r2, r2, r1
 800fa84:	6022      	streq	r2, [r4, #0]
 800fa86:	602c      	str	r4, [r5, #0]
 800fa88:	e7ec      	b.n	800fa64 <_free_r+0x28>
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	b10b      	cbz	r3, 800fa94 <_free_r+0x58>
 800fa90:	42a3      	cmp	r3, r4
 800fa92:	d9fa      	bls.n	800fa8a <_free_r+0x4e>
 800fa94:	6811      	ldr	r1, [r2, #0]
 800fa96:	1855      	adds	r5, r2, r1
 800fa98:	42a5      	cmp	r5, r4
 800fa9a:	d10b      	bne.n	800fab4 <_free_r+0x78>
 800fa9c:	6824      	ldr	r4, [r4, #0]
 800fa9e:	4421      	add	r1, r4
 800faa0:	1854      	adds	r4, r2, r1
 800faa2:	42a3      	cmp	r3, r4
 800faa4:	6011      	str	r1, [r2, #0]
 800faa6:	d1dd      	bne.n	800fa64 <_free_r+0x28>
 800faa8:	681c      	ldr	r4, [r3, #0]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	6053      	str	r3, [r2, #4]
 800faae:	4421      	add	r1, r4
 800fab0:	6011      	str	r1, [r2, #0]
 800fab2:	e7d7      	b.n	800fa64 <_free_r+0x28>
 800fab4:	d902      	bls.n	800fabc <_free_r+0x80>
 800fab6:	230c      	movs	r3, #12
 800fab8:	6003      	str	r3, [r0, #0]
 800faba:	e7d3      	b.n	800fa64 <_free_r+0x28>
 800fabc:	6825      	ldr	r5, [r4, #0]
 800fabe:	1961      	adds	r1, r4, r5
 800fac0:	428b      	cmp	r3, r1
 800fac2:	bf04      	itt	eq
 800fac4:	6819      	ldreq	r1, [r3, #0]
 800fac6:	685b      	ldreq	r3, [r3, #4]
 800fac8:	6063      	str	r3, [r4, #4]
 800faca:	bf04      	itt	eq
 800facc:	1949      	addeq	r1, r1, r5
 800face:	6021      	streq	r1, [r4, #0]
 800fad0:	6054      	str	r4, [r2, #4]
 800fad2:	e7c7      	b.n	800fa64 <_free_r+0x28>
 800fad4:	b003      	add	sp, #12
 800fad6:	bd30      	pop	{r4, r5, pc}
 800fad8:	200003cc 	.word	0x200003cc

0800fadc <_malloc_r>:
 800fadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fade:	1ccd      	adds	r5, r1, #3
 800fae0:	f025 0503 	bic.w	r5, r5, #3
 800fae4:	3508      	adds	r5, #8
 800fae6:	2d0c      	cmp	r5, #12
 800fae8:	bf38      	it	cc
 800faea:	250c      	movcc	r5, #12
 800faec:	2d00      	cmp	r5, #0
 800faee:	4606      	mov	r6, r0
 800faf0:	db01      	blt.n	800faf6 <_malloc_r+0x1a>
 800faf2:	42a9      	cmp	r1, r5
 800faf4:	d903      	bls.n	800fafe <_malloc_r+0x22>
 800faf6:	230c      	movs	r3, #12
 800faf8:	6033      	str	r3, [r6, #0]
 800fafa:	2000      	movs	r0, #0
 800fafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fafe:	f001 fb85 	bl	801120c <__malloc_lock>
 800fb02:	4921      	ldr	r1, [pc, #132]	; (800fb88 <_malloc_r+0xac>)
 800fb04:	680a      	ldr	r2, [r1, #0]
 800fb06:	4614      	mov	r4, r2
 800fb08:	b99c      	cbnz	r4, 800fb32 <_malloc_r+0x56>
 800fb0a:	4f20      	ldr	r7, [pc, #128]	; (800fb8c <_malloc_r+0xb0>)
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	b923      	cbnz	r3, 800fb1a <_malloc_r+0x3e>
 800fb10:	4621      	mov	r1, r4
 800fb12:	4630      	mov	r0, r6
 800fb14:	f000 fca6 	bl	8010464 <_sbrk_r>
 800fb18:	6038      	str	r0, [r7, #0]
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	f000 fca1 	bl	8010464 <_sbrk_r>
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	d123      	bne.n	800fb6e <_malloc_r+0x92>
 800fb26:	230c      	movs	r3, #12
 800fb28:	6033      	str	r3, [r6, #0]
 800fb2a:	4630      	mov	r0, r6
 800fb2c:	f001 fb74 	bl	8011218 <__malloc_unlock>
 800fb30:	e7e3      	b.n	800fafa <_malloc_r+0x1e>
 800fb32:	6823      	ldr	r3, [r4, #0]
 800fb34:	1b5b      	subs	r3, r3, r5
 800fb36:	d417      	bmi.n	800fb68 <_malloc_r+0x8c>
 800fb38:	2b0b      	cmp	r3, #11
 800fb3a:	d903      	bls.n	800fb44 <_malloc_r+0x68>
 800fb3c:	6023      	str	r3, [r4, #0]
 800fb3e:	441c      	add	r4, r3
 800fb40:	6025      	str	r5, [r4, #0]
 800fb42:	e004      	b.n	800fb4e <_malloc_r+0x72>
 800fb44:	6863      	ldr	r3, [r4, #4]
 800fb46:	42a2      	cmp	r2, r4
 800fb48:	bf0c      	ite	eq
 800fb4a:	600b      	streq	r3, [r1, #0]
 800fb4c:	6053      	strne	r3, [r2, #4]
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f001 fb62 	bl	8011218 <__malloc_unlock>
 800fb54:	f104 000b 	add.w	r0, r4, #11
 800fb58:	1d23      	adds	r3, r4, #4
 800fb5a:	f020 0007 	bic.w	r0, r0, #7
 800fb5e:	1ac2      	subs	r2, r0, r3
 800fb60:	d0cc      	beq.n	800fafc <_malloc_r+0x20>
 800fb62:	1a1b      	subs	r3, r3, r0
 800fb64:	50a3      	str	r3, [r4, r2]
 800fb66:	e7c9      	b.n	800fafc <_malloc_r+0x20>
 800fb68:	4622      	mov	r2, r4
 800fb6a:	6864      	ldr	r4, [r4, #4]
 800fb6c:	e7cc      	b.n	800fb08 <_malloc_r+0x2c>
 800fb6e:	1cc4      	adds	r4, r0, #3
 800fb70:	f024 0403 	bic.w	r4, r4, #3
 800fb74:	42a0      	cmp	r0, r4
 800fb76:	d0e3      	beq.n	800fb40 <_malloc_r+0x64>
 800fb78:	1a21      	subs	r1, r4, r0
 800fb7a:	4630      	mov	r0, r6
 800fb7c:	f000 fc72 	bl	8010464 <_sbrk_r>
 800fb80:	3001      	adds	r0, #1
 800fb82:	d1dd      	bne.n	800fb40 <_malloc_r+0x64>
 800fb84:	e7cf      	b.n	800fb26 <_malloc_r+0x4a>
 800fb86:	bf00      	nop
 800fb88:	200003cc 	.word	0x200003cc
 800fb8c:	200003d0 	.word	0x200003d0

0800fb90 <__cvt>:
 800fb90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb94:	ec55 4b10 	vmov	r4, r5, d0
 800fb98:	2d00      	cmp	r5, #0
 800fb9a:	460e      	mov	r6, r1
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	462b      	mov	r3, r5
 800fba0:	bfbb      	ittet	lt
 800fba2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fba6:	461d      	movlt	r5, r3
 800fba8:	2300      	movge	r3, #0
 800fbaa:	232d      	movlt	r3, #45	; 0x2d
 800fbac:	700b      	strb	r3, [r1, #0]
 800fbae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fbb4:	4691      	mov	r9, r2
 800fbb6:	f023 0820 	bic.w	r8, r3, #32
 800fbba:	bfbc      	itt	lt
 800fbbc:	4622      	movlt	r2, r4
 800fbbe:	4614      	movlt	r4, r2
 800fbc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fbc4:	d005      	beq.n	800fbd2 <__cvt+0x42>
 800fbc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fbca:	d100      	bne.n	800fbce <__cvt+0x3e>
 800fbcc:	3601      	adds	r6, #1
 800fbce:	2102      	movs	r1, #2
 800fbd0:	e000      	b.n	800fbd4 <__cvt+0x44>
 800fbd2:	2103      	movs	r1, #3
 800fbd4:	ab03      	add	r3, sp, #12
 800fbd6:	9301      	str	r3, [sp, #4]
 800fbd8:	ab02      	add	r3, sp, #8
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	ec45 4b10 	vmov	d0, r4, r5
 800fbe0:	4653      	mov	r3, sl
 800fbe2:	4632      	mov	r2, r6
 800fbe4:	f000 fd14 	bl	8010610 <_dtoa_r>
 800fbe8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fbec:	4607      	mov	r7, r0
 800fbee:	d102      	bne.n	800fbf6 <__cvt+0x66>
 800fbf0:	f019 0f01 	tst.w	r9, #1
 800fbf4:	d022      	beq.n	800fc3c <__cvt+0xac>
 800fbf6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fbfa:	eb07 0906 	add.w	r9, r7, r6
 800fbfe:	d110      	bne.n	800fc22 <__cvt+0x92>
 800fc00:	783b      	ldrb	r3, [r7, #0]
 800fc02:	2b30      	cmp	r3, #48	; 0x30
 800fc04:	d10a      	bne.n	800fc1c <__cvt+0x8c>
 800fc06:	2200      	movs	r2, #0
 800fc08:	2300      	movs	r3, #0
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	f7f0 ff63 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc12:	b918      	cbnz	r0, 800fc1c <__cvt+0x8c>
 800fc14:	f1c6 0601 	rsb	r6, r6, #1
 800fc18:	f8ca 6000 	str.w	r6, [sl]
 800fc1c:	f8da 3000 	ldr.w	r3, [sl]
 800fc20:	4499      	add	r9, r3
 800fc22:	2200      	movs	r2, #0
 800fc24:	2300      	movs	r3, #0
 800fc26:	4620      	mov	r0, r4
 800fc28:	4629      	mov	r1, r5
 800fc2a:	f7f0 ff55 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc2e:	b108      	cbz	r0, 800fc34 <__cvt+0xa4>
 800fc30:	f8cd 900c 	str.w	r9, [sp, #12]
 800fc34:	2230      	movs	r2, #48	; 0x30
 800fc36:	9b03      	ldr	r3, [sp, #12]
 800fc38:	454b      	cmp	r3, r9
 800fc3a:	d307      	bcc.n	800fc4c <__cvt+0xbc>
 800fc3c:	9b03      	ldr	r3, [sp, #12]
 800fc3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc40:	1bdb      	subs	r3, r3, r7
 800fc42:	4638      	mov	r0, r7
 800fc44:	6013      	str	r3, [r2, #0]
 800fc46:	b004      	add	sp, #16
 800fc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4c:	1c59      	adds	r1, r3, #1
 800fc4e:	9103      	str	r1, [sp, #12]
 800fc50:	701a      	strb	r2, [r3, #0]
 800fc52:	e7f0      	b.n	800fc36 <__cvt+0xa6>

0800fc54 <__exponent>:
 800fc54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc56:	4603      	mov	r3, r0
 800fc58:	2900      	cmp	r1, #0
 800fc5a:	bfb8      	it	lt
 800fc5c:	4249      	neglt	r1, r1
 800fc5e:	f803 2b02 	strb.w	r2, [r3], #2
 800fc62:	bfb4      	ite	lt
 800fc64:	222d      	movlt	r2, #45	; 0x2d
 800fc66:	222b      	movge	r2, #43	; 0x2b
 800fc68:	2909      	cmp	r1, #9
 800fc6a:	7042      	strb	r2, [r0, #1]
 800fc6c:	dd2a      	ble.n	800fcc4 <__exponent+0x70>
 800fc6e:	f10d 0407 	add.w	r4, sp, #7
 800fc72:	46a4      	mov	ip, r4
 800fc74:	270a      	movs	r7, #10
 800fc76:	46a6      	mov	lr, r4
 800fc78:	460a      	mov	r2, r1
 800fc7a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fc7e:	fb07 1516 	mls	r5, r7, r6, r1
 800fc82:	3530      	adds	r5, #48	; 0x30
 800fc84:	2a63      	cmp	r2, #99	; 0x63
 800fc86:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fc8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fc8e:	4631      	mov	r1, r6
 800fc90:	dcf1      	bgt.n	800fc76 <__exponent+0x22>
 800fc92:	3130      	adds	r1, #48	; 0x30
 800fc94:	f1ae 0502 	sub.w	r5, lr, #2
 800fc98:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fc9c:	1c44      	adds	r4, r0, #1
 800fc9e:	4629      	mov	r1, r5
 800fca0:	4561      	cmp	r1, ip
 800fca2:	d30a      	bcc.n	800fcba <__exponent+0x66>
 800fca4:	f10d 0209 	add.w	r2, sp, #9
 800fca8:	eba2 020e 	sub.w	r2, r2, lr
 800fcac:	4565      	cmp	r5, ip
 800fcae:	bf88      	it	hi
 800fcb0:	2200      	movhi	r2, #0
 800fcb2:	4413      	add	r3, r2
 800fcb4:	1a18      	subs	r0, r3, r0
 800fcb6:	b003      	add	sp, #12
 800fcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcbe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fcc2:	e7ed      	b.n	800fca0 <__exponent+0x4c>
 800fcc4:	2330      	movs	r3, #48	; 0x30
 800fcc6:	3130      	adds	r1, #48	; 0x30
 800fcc8:	7083      	strb	r3, [r0, #2]
 800fcca:	70c1      	strb	r1, [r0, #3]
 800fccc:	1d03      	adds	r3, r0, #4
 800fcce:	e7f1      	b.n	800fcb4 <__exponent+0x60>

0800fcd0 <_printf_float>:
 800fcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	ed2d 8b02 	vpush	{d8}
 800fcd8:	b08d      	sub	sp, #52	; 0x34
 800fcda:	460c      	mov	r4, r1
 800fcdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fce0:	4616      	mov	r6, r2
 800fce2:	461f      	mov	r7, r3
 800fce4:	4605      	mov	r5, r0
 800fce6:	f001 fa7f 	bl	80111e8 <_localeconv_r>
 800fcea:	f8d0 a000 	ldr.w	sl, [r0]
 800fcee:	4650      	mov	r0, sl
 800fcf0:	f7f0 fa76 	bl	80001e0 <strlen>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	930a      	str	r3, [sp, #40]	; 0x28
 800fcf8:	6823      	ldr	r3, [r4, #0]
 800fcfa:	9305      	str	r3, [sp, #20]
 800fcfc:	f8d8 3000 	ldr.w	r3, [r8]
 800fd00:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fd04:	3307      	adds	r3, #7
 800fd06:	f023 0307 	bic.w	r3, r3, #7
 800fd0a:	f103 0208 	add.w	r2, r3, #8
 800fd0e:	f8c8 2000 	str.w	r2, [r8]
 800fd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd22:	9307      	str	r3, [sp, #28]
 800fd24:	f8cd 8018 	str.w	r8, [sp, #24]
 800fd28:	ee08 0a10 	vmov	s16, r0
 800fd2c:	4b9f      	ldr	r3, [pc, #636]	; (800ffac <_printf_float+0x2dc>)
 800fd2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd36:	f7f0 ff01 	bl	8000b3c <__aeabi_dcmpun>
 800fd3a:	bb88      	cbnz	r0, 800fda0 <_printf_float+0xd0>
 800fd3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fd40:	4b9a      	ldr	r3, [pc, #616]	; (800ffac <_printf_float+0x2dc>)
 800fd42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd46:	f7f0 fedb 	bl	8000b00 <__aeabi_dcmple>
 800fd4a:	bb48      	cbnz	r0, 800fda0 <_printf_float+0xd0>
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	2300      	movs	r3, #0
 800fd50:	4640      	mov	r0, r8
 800fd52:	4649      	mov	r1, r9
 800fd54:	f7f0 feca 	bl	8000aec <__aeabi_dcmplt>
 800fd58:	b110      	cbz	r0, 800fd60 <_printf_float+0x90>
 800fd5a:	232d      	movs	r3, #45	; 0x2d
 800fd5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd60:	4b93      	ldr	r3, [pc, #588]	; (800ffb0 <_printf_float+0x2e0>)
 800fd62:	4894      	ldr	r0, [pc, #592]	; (800ffb4 <_printf_float+0x2e4>)
 800fd64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fd68:	bf94      	ite	ls
 800fd6a:	4698      	movls	r8, r3
 800fd6c:	4680      	movhi	r8, r0
 800fd6e:	2303      	movs	r3, #3
 800fd70:	6123      	str	r3, [r4, #16]
 800fd72:	9b05      	ldr	r3, [sp, #20]
 800fd74:	f023 0204 	bic.w	r2, r3, #4
 800fd78:	6022      	str	r2, [r4, #0]
 800fd7a:	f04f 0900 	mov.w	r9, #0
 800fd7e:	9700      	str	r7, [sp, #0]
 800fd80:	4633      	mov	r3, r6
 800fd82:	aa0b      	add	r2, sp, #44	; 0x2c
 800fd84:	4621      	mov	r1, r4
 800fd86:	4628      	mov	r0, r5
 800fd88:	f000 f9d8 	bl	801013c <_printf_common>
 800fd8c:	3001      	adds	r0, #1
 800fd8e:	f040 8090 	bne.w	800feb2 <_printf_float+0x1e2>
 800fd92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd96:	b00d      	add	sp, #52	; 0x34
 800fd98:	ecbd 8b02 	vpop	{d8}
 800fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda0:	4642      	mov	r2, r8
 800fda2:	464b      	mov	r3, r9
 800fda4:	4640      	mov	r0, r8
 800fda6:	4649      	mov	r1, r9
 800fda8:	f7f0 fec8 	bl	8000b3c <__aeabi_dcmpun>
 800fdac:	b140      	cbz	r0, 800fdc0 <_printf_float+0xf0>
 800fdae:	464b      	mov	r3, r9
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	bfbc      	itt	lt
 800fdb4:	232d      	movlt	r3, #45	; 0x2d
 800fdb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fdba:	487f      	ldr	r0, [pc, #508]	; (800ffb8 <_printf_float+0x2e8>)
 800fdbc:	4b7f      	ldr	r3, [pc, #508]	; (800ffbc <_printf_float+0x2ec>)
 800fdbe:	e7d1      	b.n	800fd64 <_printf_float+0x94>
 800fdc0:	6863      	ldr	r3, [r4, #4]
 800fdc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fdc6:	9206      	str	r2, [sp, #24]
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	d13f      	bne.n	800fe4c <_printf_float+0x17c>
 800fdcc:	2306      	movs	r3, #6
 800fdce:	6063      	str	r3, [r4, #4]
 800fdd0:	9b05      	ldr	r3, [sp, #20]
 800fdd2:	6861      	ldr	r1, [r4, #4]
 800fdd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fdd8:	2300      	movs	r3, #0
 800fdda:	9303      	str	r3, [sp, #12]
 800fddc:	ab0a      	add	r3, sp, #40	; 0x28
 800fdde:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fde2:	ab09      	add	r3, sp, #36	; 0x24
 800fde4:	ec49 8b10 	vmov	d0, r8, r9
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	6022      	str	r2, [r4, #0]
 800fdec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f7ff fecd 	bl	800fb90 <__cvt>
 800fdf6:	9b06      	ldr	r3, [sp, #24]
 800fdf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fdfa:	2b47      	cmp	r3, #71	; 0x47
 800fdfc:	4680      	mov	r8, r0
 800fdfe:	d108      	bne.n	800fe12 <_printf_float+0x142>
 800fe00:	1cc8      	adds	r0, r1, #3
 800fe02:	db02      	blt.n	800fe0a <_printf_float+0x13a>
 800fe04:	6863      	ldr	r3, [r4, #4]
 800fe06:	4299      	cmp	r1, r3
 800fe08:	dd41      	ble.n	800fe8e <_printf_float+0x1be>
 800fe0a:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe0e:	fa5f fb8b 	uxtb.w	fp, fp
 800fe12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe16:	d820      	bhi.n	800fe5a <_printf_float+0x18a>
 800fe18:	3901      	subs	r1, #1
 800fe1a:	465a      	mov	r2, fp
 800fe1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe20:	9109      	str	r1, [sp, #36]	; 0x24
 800fe22:	f7ff ff17 	bl	800fc54 <__exponent>
 800fe26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe28:	1813      	adds	r3, r2, r0
 800fe2a:	2a01      	cmp	r2, #1
 800fe2c:	4681      	mov	r9, r0
 800fe2e:	6123      	str	r3, [r4, #16]
 800fe30:	dc02      	bgt.n	800fe38 <_printf_float+0x168>
 800fe32:	6822      	ldr	r2, [r4, #0]
 800fe34:	07d2      	lsls	r2, r2, #31
 800fe36:	d501      	bpl.n	800fe3c <_printf_float+0x16c>
 800fe38:	3301      	adds	r3, #1
 800fe3a:	6123      	str	r3, [r4, #16]
 800fe3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d09c      	beq.n	800fd7e <_printf_float+0xae>
 800fe44:	232d      	movs	r3, #45	; 0x2d
 800fe46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe4a:	e798      	b.n	800fd7e <_printf_float+0xae>
 800fe4c:	9a06      	ldr	r2, [sp, #24]
 800fe4e:	2a47      	cmp	r2, #71	; 0x47
 800fe50:	d1be      	bne.n	800fdd0 <_printf_float+0x100>
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d1bc      	bne.n	800fdd0 <_printf_float+0x100>
 800fe56:	2301      	movs	r3, #1
 800fe58:	e7b9      	b.n	800fdce <_printf_float+0xfe>
 800fe5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fe5e:	d118      	bne.n	800fe92 <_printf_float+0x1c2>
 800fe60:	2900      	cmp	r1, #0
 800fe62:	6863      	ldr	r3, [r4, #4]
 800fe64:	dd0b      	ble.n	800fe7e <_printf_float+0x1ae>
 800fe66:	6121      	str	r1, [r4, #16]
 800fe68:	b913      	cbnz	r3, 800fe70 <_printf_float+0x1a0>
 800fe6a:	6822      	ldr	r2, [r4, #0]
 800fe6c:	07d0      	lsls	r0, r2, #31
 800fe6e:	d502      	bpl.n	800fe76 <_printf_float+0x1a6>
 800fe70:	3301      	adds	r3, #1
 800fe72:	440b      	add	r3, r1
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	65a1      	str	r1, [r4, #88]	; 0x58
 800fe78:	f04f 0900 	mov.w	r9, #0
 800fe7c:	e7de      	b.n	800fe3c <_printf_float+0x16c>
 800fe7e:	b913      	cbnz	r3, 800fe86 <_printf_float+0x1b6>
 800fe80:	6822      	ldr	r2, [r4, #0]
 800fe82:	07d2      	lsls	r2, r2, #31
 800fe84:	d501      	bpl.n	800fe8a <_printf_float+0x1ba>
 800fe86:	3302      	adds	r3, #2
 800fe88:	e7f4      	b.n	800fe74 <_printf_float+0x1a4>
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e7f2      	b.n	800fe74 <_printf_float+0x1a4>
 800fe8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fe92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe94:	4299      	cmp	r1, r3
 800fe96:	db05      	blt.n	800fea4 <_printf_float+0x1d4>
 800fe98:	6823      	ldr	r3, [r4, #0]
 800fe9a:	6121      	str	r1, [r4, #16]
 800fe9c:	07d8      	lsls	r0, r3, #31
 800fe9e:	d5ea      	bpl.n	800fe76 <_printf_float+0x1a6>
 800fea0:	1c4b      	adds	r3, r1, #1
 800fea2:	e7e7      	b.n	800fe74 <_printf_float+0x1a4>
 800fea4:	2900      	cmp	r1, #0
 800fea6:	bfd4      	ite	le
 800fea8:	f1c1 0202 	rsble	r2, r1, #2
 800feac:	2201      	movgt	r2, #1
 800feae:	4413      	add	r3, r2
 800feb0:	e7e0      	b.n	800fe74 <_printf_float+0x1a4>
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	055a      	lsls	r2, r3, #21
 800feb6:	d407      	bmi.n	800fec8 <_printf_float+0x1f8>
 800feb8:	6923      	ldr	r3, [r4, #16]
 800feba:	4642      	mov	r2, r8
 800febc:	4631      	mov	r1, r6
 800febe:	4628      	mov	r0, r5
 800fec0:	47b8      	blx	r7
 800fec2:	3001      	adds	r0, #1
 800fec4:	d12c      	bne.n	800ff20 <_printf_float+0x250>
 800fec6:	e764      	b.n	800fd92 <_printf_float+0xc2>
 800fec8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fecc:	f240 80e0 	bls.w	8010090 <_printf_float+0x3c0>
 800fed0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fed4:	2200      	movs	r2, #0
 800fed6:	2300      	movs	r3, #0
 800fed8:	f7f0 fdfe 	bl	8000ad8 <__aeabi_dcmpeq>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d034      	beq.n	800ff4a <_printf_float+0x27a>
 800fee0:	4a37      	ldr	r2, [pc, #220]	; (800ffc0 <_printf_float+0x2f0>)
 800fee2:	2301      	movs	r3, #1
 800fee4:	4631      	mov	r1, r6
 800fee6:	4628      	mov	r0, r5
 800fee8:	47b8      	blx	r7
 800feea:	3001      	adds	r0, #1
 800feec:	f43f af51 	beq.w	800fd92 <_printf_float+0xc2>
 800fef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fef4:	429a      	cmp	r2, r3
 800fef6:	db02      	blt.n	800fefe <_printf_float+0x22e>
 800fef8:	6823      	ldr	r3, [r4, #0]
 800fefa:	07d8      	lsls	r0, r3, #31
 800fefc:	d510      	bpl.n	800ff20 <_printf_float+0x250>
 800fefe:	ee18 3a10 	vmov	r3, s16
 800ff02:	4652      	mov	r2, sl
 800ff04:	4631      	mov	r1, r6
 800ff06:	4628      	mov	r0, r5
 800ff08:	47b8      	blx	r7
 800ff0a:	3001      	adds	r0, #1
 800ff0c:	f43f af41 	beq.w	800fd92 <_printf_float+0xc2>
 800ff10:	f04f 0800 	mov.w	r8, #0
 800ff14:	f104 091a 	add.w	r9, r4, #26
 800ff18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff1a:	3b01      	subs	r3, #1
 800ff1c:	4543      	cmp	r3, r8
 800ff1e:	dc09      	bgt.n	800ff34 <_printf_float+0x264>
 800ff20:	6823      	ldr	r3, [r4, #0]
 800ff22:	079b      	lsls	r3, r3, #30
 800ff24:	f100 8105 	bmi.w	8010132 <_printf_float+0x462>
 800ff28:	68e0      	ldr	r0, [r4, #12]
 800ff2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff2c:	4298      	cmp	r0, r3
 800ff2e:	bfb8      	it	lt
 800ff30:	4618      	movlt	r0, r3
 800ff32:	e730      	b.n	800fd96 <_printf_float+0xc6>
 800ff34:	2301      	movs	r3, #1
 800ff36:	464a      	mov	r2, r9
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b8      	blx	r7
 800ff3e:	3001      	adds	r0, #1
 800ff40:	f43f af27 	beq.w	800fd92 <_printf_float+0xc2>
 800ff44:	f108 0801 	add.w	r8, r8, #1
 800ff48:	e7e6      	b.n	800ff18 <_printf_float+0x248>
 800ff4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	dc39      	bgt.n	800ffc4 <_printf_float+0x2f4>
 800ff50:	4a1b      	ldr	r2, [pc, #108]	; (800ffc0 <_printf_float+0x2f0>)
 800ff52:	2301      	movs	r3, #1
 800ff54:	4631      	mov	r1, r6
 800ff56:	4628      	mov	r0, r5
 800ff58:	47b8      	blx	r7
 800ff5a:	3001      	adds	r0, #1
 800ff5c:	f43f af19 	beq.w	800fd92 <_printf_float+0xc2>
 800ff60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff64:	4313      	orrs	r3, r2
 800ff66:	d102      	bne.n	800ff6e <_printf_float+0x29e>
 800ff68:	6823      	ldr	r3, [r4, #0]
 800ff6a:	07d9      	lsls	r1, r3, #31
 800ff6c:	d5d8      	bpl.n	800ff20 <_printf_float+0x250>
 800ff6e:	ee18 3a10 	vmov	r3, s16
 800ff72:	4652      	mov	r2, sl
 800ff74:	4631      	mov	r1, r6
 800ff76:	4628      	mov	r0, r5
 800ff78:	47b8      	blx	r7
 800ff7a:	3001      	adds	r0, #1
 800ff7c:	f43f af09 	beq.w	800fd92 <_printf_float+0xc2>
 800ff80:	f04f 0900 	mov.w	r9, #0
 800ff84:	f104 0a1a 	add.w	sl, r4, #26
 800ff88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff8a:	425b      	negs	r3, r3
 800ff8c:	454b      	cmp	r3, r9
 800ff8e:	dc01      	bgt.n	800ff94 <_printf_float+0x2c4>
 800ff90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff92:	e792      	b.n	800feba <_printf_float+0x1ea>
 800ff94:	2301      	movs	r3, #1
 800ff96:	4652      	mov	r2, sl
 800ff98:	4631      	mov	r1, r6
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	47b8      	blx	r7
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	f43f aef7 	beq.w	800fd92 <_printf_float+0xc2>
 800ffa4:	f109 0901 	add.w	r9, r9, #1
 800ffa8:	e7ee      	b.n	800ff88 <_printf_float+0x2b8>
 800ffaa:	bf00      	nop
 800ffac:	7fefffff 	.word	0x7fefffff
 800ffb0:	080140e0 	.word	0x080140e0
 800ffb4:	080140e4 	.word	0x080140e4
 800ffb8:	080140ec 	.word	0x080140ec
 800ffbc:	080140e8 	.word	0x080140e8
 800ffc0:	080140f0 	.word	0x080140f0
 800ffc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ffc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	bfa8      	it	ge
 800ffcc:	461a      	movge	r2, r3
 800ffce:	2a00      	cmp	r2, #0
 800ffd0:	4691      	mov	r9, r2
 800ffd2:	dc37      	bgt.n	8010044 <_printf_float+0x374>
 800ffd4:	f04f 0b00 	mov.w	fp, #0
 800ffd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ffdc:	f104 021a 	add.w	r2, r4, #26
 800ffe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ffe2:	9305      	str	r3, [sp, #20]
 800ffe4:	eba3 0309 	sub.w	r3, r3, r9
 800ffe8:	455b      	cmp	r3, fp
 800ffea:	dc33      	bgt.n	8010054 <_printf_float+0x384>
 800ffec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fff0:	429a      	cmp	r2, r3
 800fff2:	db3b      	blt.n	801006c <_printf_float+0x39c>
 800fff4:	6823      	ldr	r3, [r4, #0]
 800fff6:	07da      	lsls	r2, r3, #31
 800fff8:	d438      	bmi.n	801006c <_printf_float+0x39c>
 800fffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fffc:	9b05      	ldr	r3, [sp, #20]
 800fffe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	eba2 0901 	sub.w	r9, r2, r1
 8010006:	4599      	cmp	r9, r3
 8010008:	bfa8      	it	ge
 801000a:	4699      	movge	r9, r3
 801000c:	f1b9 0f00 	cmp.w	r9, #0
 8010010:	dc35      	bgt.n	801007e <_printf_float+0x3ae>
 8010012:	f04f 0800 	mov.w	r8, #0
 8010016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801001a:	f104 0a1a 	add.w	sl, r4, #26
 801001e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010022:	1a9b      	subs	r3, r3, r2
 8010024:	eba3 0309 	sub.w	r3, r3, r9
 8010028:	4543      	cmp	r3, r8
 801002a:	f77f af79 	ble.w	800ff20 <_printf_float+0x250>
 801002e:	2301      	movs	r3, #1
 8010030:	4652      	mov	r2, sl
 8010032:	4631      	mov	r1, r6
 8010034:	4628      	mov	r0, r5
 8010036:	47b8      	blx	r7
 8010038:	3001      	adds	r0, #1
 801003a:	f43f aeaa 	beq.w	800fd92 <_printf_float+0xc2>
 801003e:	f108 0801 	add.w	r8, r8, #1
 8010042:	e7ec      	b.n	801001e <_printf_float+0x34e>
 8010044:	4613      	mov	r3, r2
 8010046:	4631      	mov	r1, r6
 8010048:	4642      	mov	r2, r8
 801004a:	4628      	mov	r0, r5
 801004c:	47b8      	blx	r7
 801004e:	3001      	adds	r0, #1
 8010050:	d1c0      	bne.n	800ffd4 <_printf_float+0x304>
 8010052:	e69e      	b.n	800fd92 <_printf_float+0xc2>
 8010054:	2301      	movs	r3, #1
 8010056:	4631      	mov	r1, r6
 8010058:	4628      	mov	r0, r5
 801005a:	9205      	str	r2, [sp, #20]
 801005c:	47b8      	blx	r7
 801005e:	3001      	adds	r0, #1
 8010060:	f43f ae97 	beq.w	800fd92 <_printf_float+0xc2>
 8010064:	9a05      	ldr	r2, [sp, #20]
 8010066:	f10b 0b01 	add.w	fp, fp, #1
 801006a:	e7b9      	b.n	800ffe0 <_printf_float+0x310>
 801006c:	ee18 3a10 	vmov	r3, s16
 8010070:	4652      	mov	r2, sl
 8010072:	4631      	mov	r1, r6
 8010074:	4628      	mov	r0, r5
 8010076:	47b8      	blx	r7
 8010078:	3001      	adds	r0, #1
 801007a:	d1be      	bne.n	800fffa <_printf_float+0x32a>
 801007c:	e689      	b.n	800fd92 <_printf_float+0xc2>
 801007e:	9a05      	ldr	r2, [sp, #20]
 8010080:	464b      	mov	r3, r9
 8010082:	4442      	add	r2, r8
 8010084:	4631      	mov	r1, r6
 8010086:	4628      	mov	r0, r5
 8010088:	47b8      	blx	r7
 801008a:	3001      	adds	r0, #1
 801008c:	d1c1      	bne.n	8010012 <_printf_float+0x342>
 801008e:	e680      	b.n	800fd92 <_printf_float+0xc2>
 8010090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010092:	2a01      	cmp	r2, #1
 8010094:	dc01      	bgt.n	801009a <_printf_float+0x3ca>
 8010096:	07db      	lsls	r3, r3, #31
 8010098:	d538      	bpl.n	801010c <_printf_float+0x43c>
 801009a:	2301      	movs	r3, #1
 801009c:	4642      	mov	r2, r8
 801009e:	4631      	mov	r1, r6
 80100a0:	4628      	mov	r0, r5
 80100a2:	47b8      	blx	r7
 80100a4:	3001      	adds	r0, #1
 80100a6:	f43f ae74 	beq.w	800fd92 <_printf_float+0xc2>
 80100aa:	ee18 3a10 	vmov	r3, s16
 80100ae:	4652      	mov	r2, sl
 80100b0:	4631      	mov	r1, r6
 80100b2:	4628      	mov	r0, r5
 80100b4:	47b8      	blx	r7
 80100b6:	3001      	adds	r0, #1
 80100b8:	f43f ae6b 	beq.w	800fd92 <_printf_float+0xc2>
 80100bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80100c0:	2200      	movs	r2, #0
 80100c2:	2300      	movs	r3, #0
 80100c4:	f7f0 fd08 	bl	8000ad8 <__aeabi_dcmpeq>
 80100c8:	b9d8      	cbnz	r0, 8010102 <_printf_float+0x432>
 80100ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100cc:	f108 0201 	add.w	r2, r8, #1
 80100d0:	3b01      	subs	r3, #1
 80100d2:	4631      	mov	r1, r6
 80100d4:	4628      	mov	r0, r5
 80100d6:	47b8      	blx	r7
 80100d8:	3001      	adds	r0, #1
 80100da:	d10e      	bne.n	80100fa <_printf_float+0x42a>
 80100dc:	e659      	b.n	800fd92 <_printf_float+0xc2>
 80100de:	2301      	movs	r3, #1
 80100e0:	4652      	mov	r2, sl
 80100e2:	4631      	mov	r1, r6
 80100e4:	4628      	mov	r0, r5
 80100e6:	47b8      	blx	r7
 80100e8:	3001      	adds	r0, #1
 80100ea:	f43f ae52 	beq.w	800fd92 <_printf_float+0xc2>
 80100ee:	f108 0801 	add.w	r8, r8, #1
 80100f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100f4:	3b01      	subs	r3, #1
 80100f6:	4543      	cmp	r3, r8
 80100f8:	dcf1      	bgt.n	80100de <_printf_float+0x40e>
 80100fa:	464b      	mov	r3, r9
 80100fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010100:	e6dc      	b.n	800febc <_printf_float+0x1ec>
 8010102:	f04f 0800 	mov.w	r8, #0
 8010106:	f104 0a1a 	add.w	sl, r4, #26
 801010a:	e7f2      	b.n	80100f2 <_printf_float+0x422>
 801010c:	2301      	movs	r3, #1
 801010e:	4642      	mov	r2, r8
 8010110:	e7df      	b.n	80100d2 <_printf_float+0x402>
 8010112:	2301      	movs	r3, #1
 8010114:	464a      	mov	r2, r9
 8010116:	4631      	mov	r1, r6
 8010118:	4628      	mov	r0, r5
 801011a:	47b8      	blx	r7
 801011c:	3001      	adds	r0, #1
 801011e:	f43f ae38 	beq.w	800fd92 <_printf_float+0xc2>
 8010122:	f108 0801 	add.w	r8, r8, #1
 8010126:	68e3      	ldr	r3, [r4, #12]
 8010128:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801012a:	1a5b      	subs	r3, r3, r1
 801012c:	4543      	cmp	r3, r8
 801012e:	dcf0      	bgt.n	8010112 <_printf_float+0x442>
 8010130:	e6fa      	b.n	800ff28 <_printf_float+0x258>
 8010132:	f04f 0800 	mov.w	r8, #0
 8010136:	f104 0919 	add.w	r9, r4, #25
 801013a:	e7f4      	b.n	8010126 <_printf_float+0x456>

0801013c <_printf_common>:
 801013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	4616      	mov	r6, r2
 8010142:	4699      	mov	r9, r3
 8010144:	688a      	ldr	r2, [r1, #8]
 8010146:	690b      	ldr	r3, [r1, #16]
 8010148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801014c:	4293      	cmp	r3, r2
 801014e:	bfb8      	it	lt
 8010150:	4613      	movlt	r3, r2
 8010152:	6033      	str	r3, [r6, #0]
 8010154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010158:	4607      	mov	r7, r0
 801015a:	460c      	mov	r4, r1
 801015c:	b10a      	cbz	r2, 8010162 <_printf_common+0x26>
 801015e:	3301      	adds	r3, #1
 8010160:	6033      	str	r3, [r6, #0]
 8010162:	6823      	ldr	r3, [r4, #0]
 8010164:	0699      	lsls	r1, r3, #26
 8010166:	bf42      	ittt	mi
 8010168:	6833      	ldrmi	r3, [r6, #0]
 801016a:	3302      	addmi	r3, #2
 801016c:	6033      	strmi	r3, [r6, #0]
 801016e:	6825      	ldr	r5, [r4, #0]
 8010170:	f015 0506 	ands.w	r5, r5, #6
 8010174:	d106      	bne.n	8010184 <_printf_common+0x48>
 8010176:	f104 0a19 	add.w	sl, r4, #25
 801017a:	68e3      	ldr	r3, [r4, #12]
 801017c:	6832      	ldr	r2, [r6, #0]
 801017e:	1a9b      	subs	r3, r3, r2
 8010180:	42ab      	cmp	r3, r5
 8010182:	dc26      	bgt.n	80101d2 <_printf_common+0x96>
 8010184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010188:	1e13      	subs	r3, r2, #0
 801018a:	6822      	ldr	r2, [r4, #0]
 801018c:	bf18      	it	ne
 801018e:	2301      	movne	r3, #1
 8010190:	0692      	lsls	r2, r2, #26
 8010192:	d42b      	bmi.n	80101ec <_printf_common+0xb0>
 8010194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010198:	4649      	mov	r1, r9
 801019a:	4638      	mov	r0, r7
 801019c:	47c0      	blx	r8
 801019e:	3001      	adds	r0, #1
 80101a0:	d01e      	beq.n	80101e0 <_printf_common+0xa4>
 80101a2:	6823      	ldr	r3, [r4, #0]
 80101a4:	68e5      	ldr	r5, [r4, #12]
 80101a6:	6832      	ldr	r2, [r6, #0]
 80101a8:	f003 0306 	and.w	r3, r3, #6
 80101ac:	2b04      	cmp	r3, #4
 80101ae:	bf08      	it	eq
 80101b0:	1aad      	subeq	r5, r5, r2
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	6922      	ldr	r2, [r4, #16]
 80101b6:	bf0c      	ite	eq
 80101b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80101bc:	2500      	movne	r5, #0
 80101be:	4293      	cmp	r3, r2
 80101c0:	bfc4      	itt	gt
 80101c2:	1a9b      	subgt	r3, r3, r2
 80101c4:	18ed      	addgt	r5, r5, r3
 80101c6:	2600      	movs	r6, #0
 80101c8:	341a      	adds	r4, #26
 80101ca:	42b5      	cmp	r5, r6
 80101cc:	d11a      	bne.n	8010204 <_printf_common+0xc8>
 80101ce:	2000      	movs	r0, #0
 80101d0:	e008      	b.n	80101e4 <_printf_common+0xa8>
 80101d2:	2301      	movs	r3, #1
 80101d4:	4652      	mov	r2, sl
 80101d6:	4649      	mov	r1, r9
 80101d8:	4638      	mov	r0, r7
 80101da:	47c0      	blx	r8
 80101dc:	3001      	adds	r0, #1
 80101de:	d103      	bne.n	80101e8 <_printf_common+0xac>
 80101e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101e8:	3501      	adds	r5, #1
 80101ea:	e7c6      	b.n	801017a <_printf_common+0x3e>
 80101ec:	18e1      	adds	r1, r4, r3
 80101ee:	1c5a      	adds	r2, r3, #1
 80101f0:	2030      	movs	r0, #48	; 0x30
 80101f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80101f6:	4422      	add	r2, r4
 80101f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80101fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010200:	3302      	adds	r3, #2
 8010202:	e7c7      	b.n	8010194 <_printf_common+0x58>
 8010204:	2301      	movs	r3, #1
 8010206:	4622      	mov	r2, r4
 8010208:	4649      	mov	r1, r9
 801020a:	4638      	mov	r0, r7
 801020c:	47c0      	blx	r8
 801020e:	3001      	adds	r0, #1
 8010210:	d0e6      	beq.n	80101e0 <_printf_common+0xa4>
 8010212:	3601      	adds	r6, #1
 8010214:	e7d9      	b.n	80101ca <_printf_common+0x8e>
	...

08010218 <_printf_i>:
 8010218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801021c:	460c      	mov	r4, r1
 801021e:	4691      	mov	r9, r2
 8010220:	7e27      	ldrb	r7, [r4, #24]
 8010222:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010224:	2f78      	cmp	r7, #120	; 0x78
 8010226:	4680      	mov	r8, r0
 8010228:	469a      	mov	sl, r3
 801022a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801022e:	d807      	bhi.n	8010240 <_printf_i+0x28>
 8010230:	2f62      	cmp	r7, #98	; 0x62
 8010232:	d80a      	bhi.n	801024a <_printf_i+0x32>
 8010234:	2f00      	cmp	r7, #0
 8010236:	f000 80d8 	beq.w	80103ea <_printf_i+0x1d2>
 801023a:	2f58      	cmp	r7, #88	; 0x58
 801023c:	f000 80a3 	beq.w	8010386 <_printf_i+0x16e>
 8010240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010248:	e03a      	b.n	80102c0 <_printf_i+0xa8>
 801024a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801024e:	2b15      	cmp	r3, #21
 8010250:	d8f6      	bhi.n	8010240 <_printf_i+0x28>
 8010252:	a001      	add	r0, pc, #4	; (adr r0, 8010258 <_printf_i+0x40>)
 8010254:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010258:	080102b1 	.word	0x080102b1
 801025c:	080102c5 	.word	0x080102c5
 8010260:	08010241 	.word	0x08010241
 8010264:	08010241 	.word	0x08010241
 8010268:	08010241 	.word	0x08010241
 801026c:	08010241 	.word	0x08010241
 8010270:	080102c5 	.word	0x080102c5
 8010274:	08010241 	.word	0x08010241
 8010278:	08010241 	.word	0x08010241
 801027c:	08010241 	.word	0x08010241
 8010280:	08010241 	.word	0x08010241
 8010284:	080103d1 	.word	0x080103d1
 8010288:	080102f5 	.word	0x080102f5
 801028c:	080103b3 	.word	0x080103b3
 8010290:	08010241 	.word	0x08010241
 8010294:	08010241 	.word	0x08010241
 8010298:	080103f3 	.word	0x080103f3
 801029c:	08010241 	.word	0x08010241
 80102a0:	080102f5 	.word	0x080102f5
 80102a4:	08010241 	.word	0x08010241
 80102a8:	08010241 	.word	0x08010241
 80102ac:	080103bb 	.word	0x080103bb
 80102b0:	680b      	ldr	r3, [r1, #0]
 80102b2:	1d1a      	adds	r2, r3, #4
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	600a      	str	r2, [r1, #0]
 80102b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80102bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102c0:	2301      	movs	r3, #1
 80102c2:	e0a3      	b.n	801040c <_printf_i+0x1f4>
 80102c4:	6825      	ldr	r5, [r4, #0]
 80102c6:	6808      	ldr	r0, [r1, #0]
 80102c8:	062e      	lsls	r6, r5, #24
 80102ca:	f100 0304 	add.w	r3, r0, #4
 80102ce:	d50a      	bpl.n	80102e6 <_printf_i+0xce>
 80102d0:	6805      	ldr	r5, [r0, #0]
 80102d2:	600b      	str	r3, [r1, #0]
 80102d4:	2d00      	cmp	r5, #0
 80102d6:	da03      	bge.n	80102e0 <_printf_i+0xc8>
 80102d8:	232d      	movs	r3, #45	; 0x2d
 80102da:	426d      	negs	r5, r5
 80102dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102e0:	485e      	ldr	r0, [pc, #376]	; (801045c <_printf_i+0x244>)
 80102e2:	230a      	movs	r3, #10
 80102e4:	e019      	b.n	801031a <_printf_i+0x102>
 80102e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80102ea:	6805      	ldr	r5, [r0, #0]
 80102ec:	600b      	str	r3, [r1, #0]
 80102ee:	bf18      	it	ne
 80102f0:	b22d      	sxthne	r5, r5
 80102f2:	e7ef      	b.n	80102d4 <_printf_i+0xbc>
 80102f4:	680b      	ldr	r3, [r1, #0]
 80102f6:	6825      	ldr	r5, [r4, #0]
 80102f8:	1d18      	adds	r0, r3, #4
 80102fa:	6008      	str	r0, [r1, #0]
 80102fc:	0628      	lsls	r0, r5, #24
 80102fe:	d501      	bpl.n	8010304 <_printf_i+0xec>
 8010300:	681d      	ldr	r5, [r3, #0]
 8010302:	e002      	b.n	801030a <_printf_i+0xf2>
 8010304:	0669      	lsls	r1, r5, #25
 8010306:	d5fb      	bpl.n	8010300 <_printf_i+0xe8>
 8010308:	881d      	ldrh	r5, [r3, #0]
 801030a:	4854      	ldr	r0, [pc, #336]	; (801045c <_printf_i+0x244>)
 801030c:	2f6f      	cmp	r7, #111	; 0x6f
 801030e:	bf0c      	ite	eq
 8010310:	2308      	moveq	r3, #8
 8010312:	230a      	movne	r3, #10
 8010314:	2100      	movs	r1, #0
 8010316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801031a:	6866      	ldr	r6, [r4, #4]
 801031c:	60a6      	str	r6, [r4, #8]
 801031e:	2e00      	cmp	r6, #0
 8010320:	bfa2      	ittt	ge
 8010322:	6821      	ldrge	r1, [r4, #0]
 8010324:	f021 0104 	bicge.w	r1, r1, #4
 8010328:	6021      	strge	r1, [r4, #0]
 801032a:	b90d      	cbnz	r5, 8010330 <_printf_i+0x118>
 801032c:	2e00      	cmp	r6, #0
 801032e:	d04d      	beq.n	80103cc <_printf_i+0x1b4>
 8010330:	4616      	mov	r6, r2
 8010332:	fbb5 f1f3 	udiv	r1, r5, r3
 8010336:	fb03 5711 	mls	r7, r3, r1, r5
 801033a:	5dc7      	ldrb	r7, [r0, r7]
 801033c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010340:	462f      	mov	r7, r5
 8010342:	42bb      	cmp	r3, r7
 8010344:	460d      	mov	r5, r1
 8010346:	d9f4      	bls.n	8010332 <_printf_i+0x11a>
 8010348:	2b08      	cmp	r3, #8
 801034a:	d10b      	bne.n	8010364 <_printf_i+0x14c>
 801034c:	6823      	ldr	r3, [r4, #0]
 801034e:	07df      	lsls	r7, r3, #31
 8010350:	d508      	bpl.n	8010364 <_printf_i+0x14c>
 8010352:	6923      	ldr	r3, [r4, #16]
 8010354:	6861      	ldr	r1, [r4, #4]
 8010356:	4299      	cmp	r1, r3
 8010358:	bfde      	ittt	le
 801035a:	2330      	movle	r3, #48	; 0x30
 801035c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010360:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010364:	1b92      	subs	r2, r2, r6
 8010366:	6122      	str	r2, [r4, #16]
 8010368:	f8cd a000 	str.w	sl, [sp]
 801036c:	464b      	mov	r3, r9
 801036e:	aa03      	add	r2, sp, #12
 8010370:	4621      	mov	r1, r4
 8010372:	4640      	mov	r0, r8
 8010374:	f7ff fee2 	bl	801013c <_printf_common>
 8010378:	3001      	adds	r0, #1
 801037a:	d14c      	bne.n	8010416 <_printf_i+0x1fe>
 801037c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010380:	b004      	add	sp, #16
 8010382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010386:	4835      	ldr	r0, [pc, #212]	; (801045c <_printf_i+0x244>)
 8010388:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801038c:	6823      	ldr	r3, [r4, #0]
 801038e:	680e      	ldr	r6, [r1, #0]
 8010390:	061f      	lsls	r7, r3, #24
 8010392:	f856 5b04 	ldr.w	r5, [r6], #4
 8010396:	600e      	str	r6, [r1, #0]
 8010398:	d514      	bpl.n	80103c4 <_printf_i+0x1ac>
 801039a:	07d9      	lsls	r1, r3, #31
 801039c:	bf44      	itt	mi
 801039e:	f043 0320 	orrmi.w	r3, r3, #32
 80103a2:	6023      	strmi	r3, [r4, #0]
 80103a4:	b91d      	cbnz	r5, 80103ae <_printf_i+0x196>
 80103a6:	6823      	ldr	r3, [r4, #0]
 80103a8:	f023 0320 	bic.w	r3, r3, #32
 80103ac:	6023      	str	r3, [r4, #0]
 80103ae:	2310      	movs	r3, #16
 80103b0:	e7b0      	b.n	8010314 <_printf_i+0xfc>
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	f043 0320 	orr.w	r3, r3, #32
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	2378      	movs	r3, #120	; 0x78
 80103bc:	4828      	ldr	r0, [pc, #160]	; (8010460 <_printf_i+0x248>)
 80103be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80103c2:	e7e3      	b.n	801038c <_printf_i+0x174>
 80103c4:	065e      	lsls	r6, r3, #25
 80103c6:	bf48      	it	mi
 80103c8:	b2ad      	uxthmi	r5, r5
 80103ca:	e7e6      	b.n	801039a <_printf_i+0x182>
 80103cc:	4616      	mov	r6, r2
 80103ce:	e7bb      	b.n	8010348 <_printf_i+0x130>
 80103d0:	680b      	ldr	r3, [r1, #0]
 80103d2:	6826      	ldr	r6, [r4, #0]
 80103d4:	6960      	ldr	r0, [r4, #20]
 80103d6:	1d1d      	adds	r5, r3, #4
 80103d8:	600d      	str	r5, [r1, #0]
 80103da:	0635      	lsls	r5, r6, #24
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	d501      	bpl.n	80103e4 <_printf_i+0x1cc>
 80103e0:	6018      	str	r0, [r3, #0]
 80103e2:	e002      	b.n	80103ea <_printf_i+0x1d2>
 80103e4:	0671      	lsls	r1, r6, #25
 80103e6:	d5fb      	bpl.n	80103e0 <_printf_i+0x1c8>
 80103e8:	8018      	strh	r0, [r3, #0]
 80103ea:	2300      	movs	r3, #0
 80103ec:	6123      	str	r3, [r4, #16]
 80103ee:	4616      	mov	r6, r2
 80103f0:	e7ba      	b.n	8010368 <_printf_i+0x150>
 80103f2:	680b      	ldr	r3, [r1, #0]
 80103f4:	1d1a      	adds	r2, r3, #4
 80103f6:	600a      	str	r2, [r1, #0]
 80103f8:	681e      	ldr	r6, [r3, #0]
 80103fa:	6862      	ldr	r2, [r4, #4]
 80103fc:	2100      	movs	r1, #0
 80103fe:	4630      	mov	r0, r6
 8010400:	f7ef fef6 	bl	80001f0 <memchr>
 8010404:	b108      	cbz	r0, 801040a <_printf_i+0x1f2>
 8010406:	1b80      	subs	r0, r0, r6
 8010408:	6060      	str	r0, [r4, #4]
 801040a:	6863      	ldr	r3, [r4, #4]
 801040c:	6123      	str	r3, [r4, #16]
 801040e:	2300      	movs	r3, #0
 8010410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010414:	e7a8      	b.n	8010368 <_printf_i+0x150>
 8010416:	6923      	ldr	r3, [r4, #16]
 8010418:	4632      	mov	r2, r6
 801041a:	4649      	mov	r1, r9
 801041c:	4640      	mov	r0, r8
 801041e:	47d0      	blx	sl
 8010420:	3001      	adds	r0, #1
 8010422:	d0ab      	beq.n	801037c <_printf_i+0x164>
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	079b      	lsls	r3, r3, #30
 8010428:	d413      	bmi.n	8010452 <_printf_i+0x23a>
 801042a:	68e0      	ldr	r0, [r4, #12]
 801042c:	9b03      	ldr	r3, [sp, #12]
 801042e:	4298      	cmp	r0, r3
 8010430:	bfb8      	it	lt
 8010432:	4618      	movlt	r0, r3
 8010434:	e7a4      	b.n	8010380 <_printf_i+0x168>
 8010436:	2301      	movs	r3, #1
 8010438:	4632      	mov	r2, r6
 801043a:	4649      	mov	r1, r9
 801043c:	4640      	mov	r0, r8
 801043e:	47d0      	blx	sl
 8010440:	3001      	adds	r0, #1
 8010442:	d09b      	beq.n	801037c <_printf_i+0x164>
 8010444:	3501      	adds	r5, #1
 8010446:	68e3      	ldr	r3, [r4, #12]
 8010448:	9903      	ldr	r1, [sp, #12]
 801044a:	1a5b      	subs	r3, r3, r1
 801044c:	42ab      	cmp	r3, r5
 801044e:	dcf2      	bgt.n	8010436 <_printf_i+0x21e>
 8010450:	e7eb      	b.n	801042a <_printf_i+0x212>
 8010452:	2500      	movs	r5, #0
 8010454:	f104 0619 	add.w	r6, r4, #25
 8010458:	e7f5      	b.n	8010446 <_printf_i+0x22e>
 801045a:	bf00      	nop
 801045c:	080140f2 	.word	0x080140f2
 8010460:	08014103 	.word	0x08014103

08010464 <_sbrk_r>:
 8010464:	b538      	push	{r3, r4, r5, lr}
 8010466:	4d06      	ldr	r5, [pc, #24]	; (8010480 <_sbrk_r+0x1c>)
 8010468:	2300      	movs	r3, #0
 801046a:	4604      	mov	r4, r0
 801046c:	4608      	mov	r0, r1
 801046e:	602b      	str	r3, [r5, #0]
 8010470:	f7f3 fefc 	bl	800426c <_sbrk>
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	d102      	bne.n	801047e <_sbrk_r+0x1a>
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	b103      	cbz	r3, 801047e <_sbrk_r+0x1a>
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	bd38      	pop	{r3, r4, r5, pc}
 8010480:	20001540 	.word	0x20001540

08010484 <_vsniprintf_r>:
 8010484:	b530      	push	{r4, r5, lr}
 8010486:	1e14      	subs	r4, r2, #0
 8010488:	4605      	mov	r5, r0
 801048a:	b09b      	sub	sp, #108	; 0x6c
 801048c:	4618      	mov	r0, r3
 801048e:	da05      	bge.n	801049c <_vsniprintf_r+0x18>
 8010490:	238b      	movs	r3, #139	; 0x8b
 8010492:	602b      	str	r3, [r5, #0]
 8010494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010498:	b01b      	add	sp, #108	; 0x6c
 801049a:	bd30      	pop	{r4, r5, pc}
 801049c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80104a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80104a4:	bf14      	ite	ne
 80104a6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80104aa:	4623      	moveq	r3, r4
 80104ac:	9302      	str	r3, [sp, #8]
 80104ae:	9305      	str	r3, [sp, #20]
 80104b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104b4:	9100      	str	r1, [sp, #0]
 80104b6:	9104      	str	r1, [sp, #16]
 80104b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80104bc:	4602      	mov	r2, r0
 80104be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80104c0:	4669      	mov	r1, sp
 80104c2:	4628      	mov	r0, r5
 80104c4:	f001 fa96 	bl	80119f4 <_svfiprintf_r>
 80104c8:	1c43      	adds	r3, r0, #1
 80104ca:	bfbc      	itt	lt
 80104cc:	238b      	movlt	r3, #139	; 0x8b
 80104ce:	602b      	strlt	r3, [r5, #0]
 80104d0:	2c00      	cmp	r4, #0
 80104d2:	d0e1      	beq.n	8010498 <_vsniprintf_r+0x14>
 80104d4:	9b00      	ldr	r3, [sp, #0]
 80104d6:	2200      	movs	r2, #0
 80104d8:	701a      	strb	r2, [r3, #0]
 80104da:	e7dd      	b.n	8010498 <_vsniprintf_r+0x14>

080104dc <vsniprintf>:
 80104dc:	b507      	push	{r0, r1, r2, lr}
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	4613      	mov	r3, r2
 80104e2:	460a      	mov	r2, r1
 80104e4:	4601      	mov	r1, r0
 80104e6:	4803      	ldr	r0, [pc, #12]	; (80104f4 <vsniprintf+0x18>)
 80104e8:	6800      	ldr	r0, [r0, #0]
 80104ea:	f7ff ffcb 	bl	8010484 <_vsniprintf_r>
 80104ee:	b003      	add	sp, #12
 80104f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80104f4:	20000104 	.word	0x20000104

080104f8 <quorem>:
 80104f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fc:	6903      	ldr	r3, [r0, #16]
 80104fe:	690c      	ldr	r4, [r1, #16]
 8010500:	42a3      	cmp	r3, r4
 8010502:	4607      	mov	r7, r0
 8010504:	f2c0 8081 	blt.w	801060a <quorem+0x112>
 8010508:	3c01      	subs	r4, #1
 801050a:	f101 0814 	add.w	r8, r1, #20
 801050e:	f100 0514 	add.w	r5, r0, #20
 8010512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010516:	9301      	str	r3, [sp, #4]
 8010518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801051c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010520:	3301      	adds	r3, #1
 8010522:	429a      	cmp	r2, r3
 8010524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801052c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010530:	d331      	bcc.n	8010596 <quorem+0x9e>
 8010532:	f04f 0e00 	mov.w	lr, #0
 8010536:	4640      	mov	r0, r8
 8010538:	46ac      	mov	ip, r5
 801053a:	46f2      	mov	sl, lr
 801053c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010540:	b293      	uxth	r3, r2
 8010542:	fb06 e303 	mla	r3, r6, r3, lr
 8010546:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801054a:	b29b      	uxth	r3, r3
 801054c:	ebaa 0303 	sub.w	r3, sl, r3
 8010550:	0c12      	lsrs	r2, r2, #16
 8010552:	f8dc a000 	ldr.w	sl, [ip]
 8010556:	fb06 e202 	mla	r2, r6, r2, lr
 801055a:	fa13 f38a 	uxtah	r3, r3, sl
 801055e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010562:	fa1f fa82 	uxth.w	sl, r2
 8010566:	f8dc 2000 	ldr.w	r2, [ip]
 801056a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801056e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010572:	b29b      	uxth	r3, r3
 8010574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010578:	4581      	cmp	r9, r0
 801057a:	f84c 3b04 	str.w	r3, [ip], #4
 801057e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010582:	d2db      	bcs.n	801053c <quorem+0x44>
 8010584:	f855 300b 	ldr.w	r3, [r5, fp]
 8010588:	b92b      	cbnz	r3, 8010596 <quorem+0x9e>
 801058a:	9b01      	ldr	r3, [sp, #4]
 801058c:	3b04      	subs	r3, #4
 801058e:	429d      	cmp	r5, r3
 8010590:	461a      	mov	r2, r3
 8010592:	d32e      	bcc.n	80105f2 <quorem+0xfa>
 8010594:	613c      	str	r4, [r7, #16]
 8010596:	4638      	mov	r0, r7
 8010598:	f001 f8c2 	bl	8011720 <__mcmp>
 801059c:	2800      	cmp	r0, #0
 801059e:	db24      	blt.n	80105ea <quorem+0xf2>
 80105a0:	3601      	adds	r6, #1
 80105a2:	4628      	mov	r0, r5
 80105a4:	f04f 0c00 	mov.w	ip, #0
 80105a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80105ac:	f8d0 e000 	ldr.w	lr, [r0]
 80105b0:	b293      	uxth	r3, r2
 80105b2:	ebac 0303 	sub.w	r3, ip, r3
 80105b6:	0c12      	lsrs	r2, r2, #16
 80105b8:	fa13 f38e 	uxtah	r3, r3, lr
 80105bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80105c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105ca:	45c1      	cmp	r9, r8
 80105cc:	f840 3b04 	str.w	r3, [r0], #4
 80105d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80105d4:	d2e8      	bcs.n	80105a8 <quorem+0xb0>
 80105d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105de:	b922      	cbnz	r2, 80105ea <quorem+0xf2>
 80105e0:	3b04      	subs	r3, #4
 80105e2:	429d      	cmp	r5, r3
 80105e4:	461a      	mov	r2, r3
 80105e6:	d30a      	bcc.n	80105fe <quorem+0x106>
 80105e8:	613c      	str	r4, [r7, #16]
 80105ea:	4630      	mov	r0, r6
 80105ec:	b003      	add	sp, #12
 80105ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f2:	6812      	ldr	r2, [r2, #0]
 80105f4:	3b04      	subs	r3, #4
 80105f6:	2a00      	cmp	r2, #0
 80105f8:	d1cc      	bne.n	8010594 <quorem+0x9c>
 80105fa:	3c01      	subs	r4, #1
 80105fc:	e7c7      	b.n	801058e <quorem+0x96>
 80105fe:	6812      	ldr	r2, [r2, #0]
 8010600:	3b04      	subs	r3, #4
 8010602:	2a00      	cmp	r2, #0
 8010604:	d1f0      	bne.n	80105e8 <quorem+0xf0>
 8010606:	3c01      	subs	r4, #1
 8010608:	e7eb      	b.n	80105e2 <quorem+0xea>
 801060a:	2000      	movs	r0, #0
 801060c:	e7ee      	b.n	80105ec <quorem+0xf4>
	...

08010610 <_dtoa_r>:
 8010610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010614:	ed2d 8b02 	vpush	{d8}
 8010618:	ec57 6b10 	vmov	r6, r7, d0
 801061c:	b095      	sub	sp, #84	; 0x54
 801061e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010624:	9105      	str	r1, [sp, #20]
 8010626:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801062a:	4604      	mov	r4, r0
 801062c:	9209      	str	r2, [sp, #36]	; 0x24
 801062e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010630:	b975      	cbnz	r5, 8010650 <_dtoa_r+0x40>
 8010632:	2010      	movs	r0, #16
 8010634:	f7ff f9ea 	bl	800fa0c <malloc>
 8010638:	4602      	mov	r2, r0
 801063a:	6260      	str	r0, [r4, #36]	; 0x24
 801063c:	b920      	cbnz	r0, 8010648 <_dtoa_r+0x38>
 801063e:	4bb2      	ldr	r3, [pc, #712]	; (8010908 <_dtoa_r+0x2f8>)
 8010640:	21ea      	movs	r1, #234	; 0xea
 8010642:	48b2      	ldr	r0, [pc, #712]	; (801090c <_dtoa_r+0x2fc>)
 8010644:	f001 fad6 	bl	8011bf4 <__assert_func>
 8010648:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801064c:	6005      	str	r5, [r0, #0]
 801064e:	60c5      	str	r5, [r0, #12]
 8010650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010652:	6819      	ldr	r1, [r3, #0]
 8010654:	b151      	cbz	r1, 801066c <_dtoa_r+0x5c>
 8010656:	685a      	ldr	r2, [r3, #4]
 8010658:	604a      	str	r2, [r1, #4]
 801065a:	2301      	movs	r3, #1
 801065c:	4093      	lsls	r3, r2
 801065e:	608b      	str	r3, [r1, #8]
 8010660:	4620      	mov	r0, r4
 8010662:	f000 fe1f 	bl	80112a4 <_Bfree>
 8010666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010668:	2200      	movs	r2, #0
 801066a:	601a      	str	r2, [r3, #0]
 801066c:	1e3b      	subs	r3, r7, #0
 801066e:	bfb9      	ittee	lt
 8010670:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010674:	9303      	strlt	r3, [sp, #12]
 8010676:	2300      	movge	r3, #0
 8010678:	f8c8 3000 	strge.w	r3, [r8]
 801067c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010680:	4ba3      	ldr	r3, [pc, #652]	; (8010910 <_dtoa_r+0x300>)
 8010682:	bfbc      	itt	lt
 8010684:	2201      	movlt	r2, #1
 8010686:	f8c8 2000 	strlt.w	r2, [r8]
 801068a:	ea33 0309 	bics.w	r3, r3, r9
 801068e:	d11b      	bne.n	80106c8 <_dtoa_r+0xb8>
 8010690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010692:	f242 730f 	movw	r3, #9999	; 0x270f
 8010696:	6013      	str	r3, [r2, #0]
 8010698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801069c:	4333      	orrs	r3, r6
 801069e:	f000 857a 	beq.w	8011196 <_dtoa_r+0xb86>
 80106a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106a4:	b963      	cbnz	r3, 80106c0 <_dtoa_r+0xb0>
 80106a6:	4b9b      	ldr	r3, [pc, #620]	; (8010914 <_dtoa_r+0x304>)
 80106a8:	e024      	b.n	80106f4 <_dtoa_r+0xe4>
 80106aa:	4b9b      	ldr	r3, [pc, #620]	; (8010918 <_dtoa_r+0x308>)
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	3308      	adds	r3, #8
 80106b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80106b2:	6013      	str	r3, [r2, #0]
 80106b4:	9800      	ldr	r0, [sp, #0]
 80106b6:	b015      	add	sp, #84	; 0x54
 80106b8:	ecbd 8b02 	vpop	{d8}
 80106bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c0:	4b94      	ldr	r3, [pc, #592]	; (8010914 <_dtoa_r+0x304>)
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	3303      	adds	r3, #3
 80106c6:	e7f3      	b.n	80106b0 <_dtoa_r+0xa0>
 80106c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106cc:	2200      	movs	r2, #0
 80106ce:	ec51 0b17 	vmov	r0, r1, d7
 80106d2:	2300      	movs	r3, #0
 80106d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80106d8:	f7f0 f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80106dc:	4680      	mov	r8, r0
 80106de:	b158      	cbz	r0, 80106f8 <_dtoa_r+0xe8>
 80106e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80106e2:	2301      	movs	r3, #1
 80106e4:	6013      	str	r3, [r2, #0]
 80106e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f000 8551 	beq.w	8011190 <_dtoa_r+0xb80>
 80106ee:	488b      	ldr	r0, [pc, #556]	; (801091c <_dtoa_r+0x30c>)
 80106f0:	6018      	str	r0, [r3, #0]
 80106f2:	1e43      	subs	r3, r0, #1
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	e7dd      	b.n	80106b4 <_dtoa_r+0xa4>
 80106f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80106fc:	aa12      	add	r2, sp, #72	; 0x48
 80106fe:	a913      	add	r1, sp, #76	; 0x4c
 8010700:	4620      	mov	r0, r4
 8010702:	f001 f8b1 	bl	8011868 <__d2b>
 8010706:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801070a:	4683      	mov	fp, r0
 801070c:	2d00      	cmp	r5, #0
 801070e:	d07c      	beq.n	801080a <_dtoa_r+0x1fa>
 8010710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010712:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801071a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801071e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010722:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801072a:	4b7d      	ldr	r3, [pc, #500]	; (8010920 <_dtoa_r+0x310>)
 801072c:	2200      	movs	r2, #0
 801072e:	4630      	mov	r0, r6
 8010730:	4639      	mov	r1, r7
 8010732:	f7ef fdb1 	bl	8000298 <__aeabi_dsub>
 8010736:	a36e      	add	r3, pc, #440	; (adr r3, 80108f0 <_dtoa_r+0x2e0>)
 8010738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073c:	f7ef ff64 	bl	8000608 <__aeabi_dmul>
 8010740:	a36d      	add	r3, pc, #436	; (adr r3, 80108f8 <_dtoa_r+0x2e8>)
 8010742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010746:	f7ef fda9 	bl	800029c <__adddf3>
 801074a:	4606      	mov	r6, r0
 801074c:	4628      	mov	r0, r5
 801074e:	460f      	mov	r7, r1
 8010750:	f7ef fef0 	bl	8000534 <__aeabi_i2d>
 8010754:	a36a      	add	r3, pc, #424	; (adr r3, 8010900 <_dtoa_r+0x2f0>)
 8010756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075a:	f7ef ff55 	bl	8000608 <__aeabi_dmul>
 801075e:	4602      	mov	r2, r0
 8010760:	460b      	mov	r3, r1
 8010762:	4630      	mov	r0, r6
 8010764:	4639      	mov	r1, r7
 8010766:	f7ef fd99 	bl	800029c <__adddf3>
 801076a:	4606      	mov	r6, r0
 801076c:	460f      	mov	r7, r1
 801076e:	f7f0 f9fb 	bl	8000b68 <__aeabi_d2iz>
 8010772:	2200      	movs	r2, #0
 8010774:	4682      	mov	sl, r0
 8010776:	2300      	movs	r3, #0
 8010778:	4630      	mov	r0, r6
 801077a:	4639      	mov	r1, r7
 801077c:	f7f0 f9b6 	bl	8000aec <__aeabi_dcmplt>
 8010780:	b148      	cbz	r0, 8010796 <_dtoa_r+0x186>
 8010782:	4650      	mov	r0, sl
 8010784:	f7ef fed6 	bl	8000534 <__aeabi_i2d>
 8010788:	4632      	mov	r2, r6
 801078a:	463b      	mov	r3, r7
 801078c:	f7f0 f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8010790:	b908      	cbnz	r0, 8010796 <_dtoa_r+0x186>
 8010792:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010796:	f1ba 0f16 	cmp.w	sl, #22
 801079a:	d854      	bhi.n	8010846 <_dtoa_r+0x236>
 801079c:	4b61      	ldr	r3, [pc, #388]	; (8010924 <_dtoa_r+0x314>)
 801079e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80107a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80107aa:	f7f0 f99f 	bl	8000aec <__aeabi_dcmplt>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d04b      	beq.n	801084a <_dtoa_r+0x23a>
 80107b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80107b6:	2300      	movs	r3, #0
 80107b8:	930e      	str	r3, [sp, #56]	; 0x38
 80107ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80107bc:	1b5d      	subs	r5, r3, r5
 80107be:	1e6b      	subs	r3, r5, #1
 80107c0:	9304      	str	r3, [sp, #16]
 80107c2:	bf43      	ittte	mi
 80107c4:	2300      	movmi	r3, #0
 80107c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80107ca:	9304      	strmi	r3, [sp, #16]
 80107cc:	f04f 0800 	movpl.w	r8, #0
 80107d0:	f1ba 0f00 	cmp.w	sl, #0
 80107d4:	db3b      	blt.n	801084e <_dtoa_r+0x23e>
 80107d6:	9b04      	ldr	r3, [sp, #16]
 80107d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80107dc:	4453      	add	r3, sl
 80107de:	9304      	str	r3, [sp, #16]
 80107e0:	2300      	movs	r3, #0
 80107e2:	9306      	str	r3, [sp, #24]
 80107e4:	9b05      	ldr	r3, [sp, #20]
 80107e6:	2b09      	cmp	r3, #9
 80107e8:	d869      	bhi.n	80108be <_dtoa_r+0x2ae>
 80107ea:	2b05      	cmp	r3, #5
 80107ec:	bfc4      	itt	gt
 80107ee:	3b04      	subgt	r3, #4
 80107f0:	9305      	strgt	r3, [sp, #20]
 80107f2:	9b05      	ldr	r3, [sp, #20]
 80107f4:	f1a3 0302 	sub.w	r3, r3, #2
 80107f8:	bfcc      	ite	gt
 80107fa:	2500      	movgt	r5, #0
 80107fc:	2501      	movle	r5, #1
 80107fe:	2b03      	cmp	r3, #3
 8010800:	d869      	bhi.n	80108d6 <_dtoa_r+0x2c6>
 8010802:	e8df f003 	tbb	[pc, r3]
 8010806:	4e2c      	.short	0x4e2c
 8010808:	5a4c      	.short	0x5a4c
 801080a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801080e:	441d      	add	r5, r3
 8010810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010814:	2b20      	cmp	r3, #32
 8010816:	bfc1      	itttt	gt
 8010818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801081c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010820:	fa09 f303 	lslgt.w	r3, r9, r3
 8010824:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010828:	bfda      	itte	le
 801082a:	f1c3 0320 	rsble	r3, r3, #32
 801082e:	fa06 f003 	lslle.w	r0, r6, r3
 8010832:	4318      	orrgt	r0, r3
 8010834:	f7ef fe6e 	bl	8000514 <__aeabi_ui2d>
 8010838:	2301      	movs	r3, #1
 801083a:	4606      	mov	r6, r0
 801083c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010840:	3d01      	subs	r5, #1
 8010842:	9310      	str	r3, [sp, #64]	; 0x40
 8010844:	e771      	b.n	801072a <_dtoa_r+0x11a>
 8010846:	2301      	movs	r3, #1
 8010848:	e7b6      	b.n	80107b8 <_dtoa_r+0x1a8>
 801084a:	900e      	str	r0, [sp, #56]	; 0x38
 801084c:	e7b5      	b.n	80107ba <_dtoa_r+0x1aa>
 801084e:	f1ca 0300 	rsb	r3, sl, #0
 8010852:	9306      	str	r3, [sp, #24]
 8010854:	2300      	movs	r3, #0
 8010856:	eba8 080a 	sub.w	r8, r8, sl
 801085a:	930d      	str	r3, [sp, #52]	; 0x34
 801085c:	e7c2      	b.n	80107e4 <_dtoa_r+0x1d4>
 801085e:	2300      	movs	r3, #0
 8010860:	9308      	str	r3, [sp, #32]
 8010862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	dc39      	bgt.n	80108dc <_dtoa_r+0x2cc>
 8010868:	f04f 0901 	mov.w	r9, #1
 801086c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010870:	464b      	mov	r3, r9
 8010872:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010876:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010878:	2200      	movs	r2, #0
 801087a:	6042      	str	r2, [r0, #4]
 801087c:	2204      	movs	r2, #4
 801087e:	f102 0614 	add.w	r6, r2, #20
 8010882:	429e      	cmp	r6, r3
 8010884:	6841      	ldr	r1, [r0, #4]
 8010886:	d92f      	bls.n	80108e8 <_dtoa_r+0x2d8>
 8010888:	4620      	mov	r0, r4
 801088a:	f000 fccb 	bl	8011224 <_Balloc>
 801088e:	9000      	str	r0, [sp, #0]
 8010890:	2800      	cmp	r0, #0
 8010892:	d14b      	bne.n	801092c <_dtoa_r+0x31c>
 8010894:	4b24      	ldr	r3, [pc, #144]	; (8010928 <_dtoa_r+0x318>)
 8010896:	4602      	mov	r2, r0
 8010898:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801089c:	e6d1      	b.n	8010642 <_dtoa_r+0x32>
 801089e:	2301      	movs	r3, #1
 80108a0:	e7de      	b.n	8010860 <_dtoa_r+0x250>
 80108a2:	2300      	movs	r3, #0
 80108a4:	9308      	str	r3, [sp, #32]
 80108a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108a8:	eb0a 0903 	add.w	r9, sl, r3
 80108ac:	f109 0301 	add.w	r3, r9, #1
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	9301      	str	r3, [sp, #4]
 80108b4:	bfb8      	it	lt
 80108b6:	2301      	movlt	r3, #1
 80108b8:	e7dd      	b.n	8010876 <_dtoa_r+0x266>
 80108ba:	2301      	movs	r3, #1
 80108bc:	e7f2      	b.n	80108a4 <_dtoa_r+0x294>
 80108be:	2501      	movs	r5, #1
 80108c0:	2300      	movs	r3, #0
 80108c2:	9305      	str	r3, [sp, #20]
 80108c4:	9508      	str	r5, [sp, #32]
 80108c6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80108ca:	2200      	movs	r2, #0
 80108cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80108d0:	2312      	movs	r3, #18
 80108d2:	9209      	str	r2, [sp, #36]	; 0x24
 80108d4:	e7cf      	b.n	8010876 <_dtoa_r+0x266>
 80108d6:	2301      	movs	r3, #1
 80108d8:	9308      	str	r3, [sp, #32]
 80108da:	e7f4      	b.n	80108c6 <_dtoa_r+0x2b6>
 80108dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80108e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80108e4:	464b      	mov	r3, r9
 80108e6:	e7c6      	b.n	8010876 <_dtoa_r+0x266>
 80108e8:	3101      	adds	r1, #1
 80108ea:	6041      	str	r1, [r0, #4]
 80108ec:	0052      	lsls	r2, r2, #1
 80108ee:	e7c6      	b.n	801087e <_dtoa_r+0x26e>
 80108f0:	636f4361 	.word	0x636f4361
 80108f4:	3fd287a7 	.word	0x3fd287a7
 80108f8:	8b60c8b3 	.word	0x8b60c8b3
 80108fc:	3fc68a28 	.word	0x3fc68a28
 8010900:	509f79fb 	.word	0x509f79fb
 8010904:	3fd34413 	.word	0x3fd34413
 8010908:	08014121 	.word	0x08014121
 801090c:	08014138 	.word	0x08014138
 8010910:	7ff00000 	.word	0x7ff00000
 8010914:	0801411d 	.word	0x0801411d
 8010918:	08014114 	.word	0x08014114
 801091c:	080140f1 	.word	0x080140f1
 8010920:	3ff80000 	.word	0x3ff80000
 8010924:	08014230 	.word	0x08014230
 8010928:	08014197 	.word	0x08014197
 801092c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801092e:	9a00      	ldr	r2, [sp, #0]
 8010930:	601a      	str	r2, [r3, #0]
 8010932:	9b01      	ldr	r3, [sp, #4]
 8010934:	2b0e      	cmp	r3, #14
 8010936:	f200 80ad 	bhi.w	8010a94 <_dtoa_r+0x484>
 801093a:	2d00      	cmp	r5, #0
 801093c:	f000 80aa 	beq.w	8010a94 <_dtoa_r+0x484>
 8010940:	f1ba 0f00 	cmp.w	sl, #0
 8010944:	dd36      	ble.n	80109b4 <_dtoa_r+0x3a4>
 8010946:	4ac3      	ldr	r2, [pc, #780]	; (8010c54 <_dtoa_r+0x644>)
 8010948:	f00a 030f 	and.w	r3, sl, #15
 801094c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010950:	ed93 7b00 	vldr	d7, [r3]
 8010954:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010958:	ea4f 172a 	mov.w	r7, sl, asr #4
 801095c:	eeb0 8a47 	vmov.f32	s16, s14
 8010960:	eef0 8a67 	vmov.f32	s17, s15
 8010964:	d016      	beq.n	8010994 <_dtoa_r+0x384>
 8010966:	4bbc      	ldr	r3, [pc, #752]	; (8010c58 <_dtoa_r+0x648>)
 8010968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801096c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010970:	f7ef ff74 	bl	800085c <__aeabi_ddiv>
 8010974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010978:	f007 070f 	and.w	r7, r7, #15
 801097c:	2503      	movs	r5, #3
 801097e:	4eb6      	ldr	r6, [pc, #728]	; (8010c58 <_dtoa_r+0x648>)
 8010980:	b957      	cbnz	r7, 8010998 <_dtoa_r+0x388>
 8010982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010986:	ec53 2b18 	vmov	r2, r3, d8
 801098a:	f7ef ff67 	bl	800085c <__aeabi_ddiv>
 801098e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010992:	e029      	b.n	80109e8 <_dtoa_r+0x3d8>
 8010994:	2502      	movs	r5, #2
 8010996:	e7f2      	b.n	801097e <_dtoa_r+0x36e>
 8010998:	07f9      	lsls	r1, r7, #31
 801099a:	d508      	bpl.n	80109ae <_dtoa_r+0x39e>
 801099c:	ec51 0b18 	vmov	r0, r1, d8
 80109a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80109a4:	f7ef fe30 	bl	8000608 <__aeabi_dmul>
 80109a8:	ec41 0b18 	vmov	d8, r0, r1
 80109ac:	3501      	adds	r5, #1
 80109ae:	107f      	asrs	r7, r7, #1
 80109b0:	3608      	adds	r6, #8
 80109b2:	e7e5      	b.n	8010980 <_dtoa_r+0x370>
 80109b4:	f000 80a6 	beq.w	8010b04 <_dtoa_r+0x4f4>
 80109b8:	f1ca 0600 	rsb	r6, sl, #0
 80109bc:	4ba5      	ldr	r3, [pc, #660]	; (8010c54 <_dtoa_r+0x644>)
 80109be:	4fa6      	ldr	r7, [pc, #664]	; (8010c58 <_dtoa_r+0x648>)
 80109c0:	f006 020f 	and.w	r2, r6, #15
 80109c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80109c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80109d0:	f7ef fe1a 	bl	8000608 <__aeabi_dmul>
 80109d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109d8:	1136      	asrs	r6, r6, #4
 80109da:	2300      	movs	r3, #0
 80109dc:	2502      	movs	r5, #2
 80109de:	2e00      	cmp	r6, #0
 80109e0:	f040 8085 	bne.w	8010aee <_dtoa_r+0x4de>
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d1d2      	bne.n	801098e <_dtoa_r+0x37e>
 80109e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f000 808c 	beq.w	8010b08 <_dtoa_r+0x4f8>
 80109f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80109f4:	4b99      	ldr	r3, [pc, #612]	; (8010c5c <_dtoa_r+0x64c>)
 80109f6:	2200      	movs	r2, #0
 80109f8:	4630      	mov	r0, r6
 80109fa:	4639      	mov	r1, r7
 80109fc:	f7f0 f876 	bl	8000aec <__aeabi_dcmplt>
 8010a00:	2800      	cmp	r0, #0
 8010a02:	f000 8081 	beq.w	8010b08 <_dtoa_r+0x4f8>
 8010a06:	9b01      	ldr	r3, [sp, #4]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d07d      	beq.n	8010b08 <_dtoa_r+0x4f8>
 8010a0c:	f1b9 0f00 	cmp.w	r9, #0
 8010a10:	dd3c      	ble.n	8010a8c <_dtoa_r+0x47c>
 8010a12:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010a16:	9307      	str	r3, [sp, #28]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	4b91      	ldr	r3, [pc, #580]	; (8010c60 <_dtoa_r+0x650>)
 8010a1c:	4630      	mov	r0, r6
 8010a1e:	4639      	mov	r1, r7
 8010a20:	f7ef fdf2 	bl	8000608 <__aeabi_dmul>
 8010a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a28:	3501      	adds	r5, #1
 8010a2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010a2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010a32:	4628      	mov	r0, r5
 8010a34:	f7ef fd7e 	bl	8000534 <__aeabi_i2d>
 8010a38:	4632      	mov	r2, r6
 8010a3a:	463b      	mov	r3, r7
 8010a3c:	f7ef fde4 	bl	8000608 <__aeabi_dmul>
 8010a40:	4b88      	ldr	r3, [pc, #544]	; (8010c64 <_dtoa_r+0x654>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	f7ef fc2a 	bl	800029c <__adddf3>
 8010a48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a50:	9303      	str	r3, [sp, #12]
 8010a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d15c      	bne.n	8010b12 <_dtoa_r+0x502>
 8010a58:	4b83      	ldr	r3, [pc, #524]	; (8010c68 <_dtoa_r+0x658>)
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	4630      	mov	r0, r6
 8010a5e:	4639      	mov	r1, r7
 8010a60:	f7ef fc1a 	bl	8000298 <__aeabi_dsub>
 8010a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a68:	4606      	mov	r6, r0
 8010a6a:	460f      	mov	r7, r1
 8010a6c:	f7f0 f85c 	bl	8000b28 <__aeabi_dcmpgt>
 8010a70:	2800      	cmp	r0, #0
 8010a72:	f040 8296 	bne.w	8010fa2 <_dtoa_r+0x992>
 8010a76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010a80:	4639      	mov	r1, r7
 8010a82:	f7f0 f833 	bl	8000aec <__aeabi_dcmplt>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	f040 8288 	bne.w	8010f9c <_dtoa_r+0x98c>
 8010a8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010a90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	f2c0 8158 	blt.w	8010d4c <_dtoa_r+0x73c>
 8010a9c:	f1ba 0f0e 	cmp.w	sl, #14
 8010aa0:	f300 8154 	bgt.w	8010d4c <_dtoa_r+0x73c>
 8010aa4:	4b6b      	ldr	r3, [pc, #428]	; (8010c54 <_dtoa_r+0x644>)
 8010aa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010aaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f280 80e3 	bge.w	8010c7c <_dtoa_r+0x66c>
 8010ab6:	9b01      	ldr	r3, [sp, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f300 80df 	bgt.w	8010c7c <_dtoa_r+0x66c>
 8010abe:	f040 826d 	bne.w	8010f9c <_dtoa_r+0x98c>
 8010ac2:	4b69      	ldr	r3, [pc, #420]	; (8010c68 <_dtoa_r+0x658>)
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	4640      	mov	r0, r8
 8010ac8:	4649      	mov	r1, r9
 8010aca:	f7ef fd9d 	bl	8000608 <__aeabi_dmul>
 8010ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ad2:	f7f0 f81f 	bl	8000b14 <__aeabi_dcmpge>
 8010ad6:	9e01      	ldr	r6, [sp, #4]
 8010ad8:	4637      	mov	r7, r6
 8010ada:	2800      	cmp	r0, #0
 8010adc:	f040 8243 	bne.w	8010f66 <_dtoa_r+0x956>
 8010ae0:	9d00      	ldr	r5, [sp, #0]
 8010ae2:	2331      	movs	r3, #49	; 0x31
 8010ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8010ae8:	f10a 0a01 	add.w	sl, sl, #1
 8010aec:	e23f      	b.n	8010f6e <_dtoa_r+0x95e>
 8010aee:	07f2      	lsls	r2, r6, #31
 8010af0:	d505      	bpl.n	8010afe <_dtoa_r+0x4ee>
 8010af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010af6:	f7ef fd87 	bl	8000608 <__aeabi_dmul>
 8010afa:	3501      	adds	r5, #1
 8010afc:	2301      	movs	r3, #1
 8010afe:	1076      	asrs	r6, r6, #1
 8010b00:	3708      	adds	r7, #8
 8010b02:	e76c      	b.n	80109de <_dtoa_r+0x3ce>
 8010b04:	2502      	movs	r5, #2
 8010b06:	e76f      	b.n	80109e8 <_dtoa_r+0x3d8>
 8010b08:	9b01      	ldr	r3, [sp, #4]
 8010b0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8010b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8010b10:	e78d      	b.n	8010a2e <_dtoa_r+0x41e>
 8010b12:	9900      	ldr	r1, [sp, #0]
 8010b14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b18:	4b4e      	ldr	r3, [pc, #312]	; (8010c54 <_dtoa_r+0x644>)
 8010b1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b1e:	4401      	add	r1, r0
 8010b20:	9102      	str	r1, [sp, #8]
 8010b22:	9908      	ldr	r1, [sp, #32]
 8010b24:	eeb0 8a47 	vmov.f32	s16, s14
 8010b28:	eef0 8a67 	vmov.f32	s17, s15
 8010b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010b30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010b34:	2900      	cmp	r1, #0
 8010b36:	d045      	beq.n	8010bc4 <_dtoa_r+0x5b4>
 8010b38:	494c      	ldr	r1, [pc, #304]	; (8010c6c <_dtoa_r+0x65c>)
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	f7ef fe8e 	bl	800085c <__aeabi_ddiv>
 8010b40:	ec53 2b18 	vmov	r2, r3, d8
 8010b44:	f7ef fba8 	bl	8000298 <__aeabi_dsub>
 8010b48:	9d00      	ldr	r5, [sp, #0]
 8010b4a:	ec41 0b18 	vmov	d8, r0, r1
 8010b4e:	4639      	mov	r1, r7
 8010b50:	4630      	mov	r0, r6
 8010b52:	f7f0 f809 	bl	8000b68 <__aeabi_d2iz>
 8010b56:	900c      	str	r0, [sp, #48]	; 0x30
 8010b58:	f7ef fcec 	bl	8000534 <__aeabi_i2d>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	460b      	mov	r3, r1
 8010b60:	4630      	mov	r0, r6
 8010b62:	4639      	mov	r1, r7
 8010b64:	f7ef fb98 	bl	8000298 <__aeabi_dsub>
 8010b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b6a:	3330      	adds	r3, #48	; 0x30
 8010b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8010b70:	ec53 2b18 	vmov	r2, r3, d8
 8010b74:	4606      	mov	r6, r0
 8010b76:	460f      	mov	r7, r1
 8010b78:	f7ef ffb8 	bl	8000aec <__aeabi_dcmplt>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	d165      	bne.n	8010c4c <_dtoa_r+0x63c>
 8010b80:	4632      	mov	r2, r6
 8010b82:	463b      	mov	r3, r7
 8010b84:	4935      	ldr	r1, [pc, #212]	; (8010c5c <_dtoa_r+0x64c>)
 8010b86:	2000      	movs	r0, #0
 8010b88:	f7ef fb86 	bl	8000298 <__aeabi_dsub>
 8010b8c:	ec53 2b18 	vmov	r2, r3, d8
 8010b90:	f7ef ffac 	bl	8000aec <__aeabi_dcmplt>
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f040 80b9 	bne.w	8010d0c <_dtoa_r+0x6fc>
 8010b9a:	9b02      	ldr	r3, [sp, #8]
 8010b9c:	429d      	cmp	r5, r3
 8010b9e:	f43f af75 	beq.w	8010a8c <_dtoa_r+0x47c>
 8010ba2:	4b2f      	ldr	r3, [pc, #188]	; (8010c60 <_dtoa_r+0x650>)
 8010ba4:	ec51 0b18 	vmov	r0, r1, d8
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f7ef fd2d 	bl	8000608 <__aeabi_dmul>
 8010bae:	4b2c      	ldr	r3, [pc, #176]	; (8010c60 <_dtoa_r+0x650>)
 8010bb0:	ec41 0b18 	vmov	d8, r0, r1
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	4639      	mov	r1, r7
 8010bba:	f7ef fd25 	bl	8000608 <__aeabi_dmul>
 8010bbe:	4606      	mov	r6, r0
 8010bc0:	460f      	mov	r7, r1
 8010bc2:	e7c4      	b.n	8010b4e <_dtoa_r+0x53e>
 8010bc4:	ec51 0b17 	vmov	r0, r1, d7
 8010bc8:	f7ef fd1e 	bl	8000608 <__aeabi_dmul>
 8010bcc:	9b02      	ldr	r3, [sp, #8]
 8010bce:	9d00      	ldr	r5, [sp, #0]
 8010bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8010bd2:	ec41 0b18 	vmov	d8, r0, r1
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f7ef ffc5 	bl	8000b68 <__aeabi_d2iz>
 8010bde:	9011      	str	r0, [sp, #68]	; 0x44
 8010be0:	f7ef fca8 	bl	8000534 <__aeabi_i2d>
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	4630      	mov	r0, r6
 8010bea:	4639      	mov	r1, r7
 8010bec:	f7ef fb54 	bl	8000298 <__aeabi_dsub>
 8010bf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010bf2:	3330      	adds	r3, #48	; 0x30
 8010bf4:	f805 3b01 	strb.w	r3, [r5], #1
 8010bf8:	9b02      	ldr	r3, [sp, #8]
 8010bfa:	429d      	cmp	r5, r3
 8010bfc:	4606      	mov	r6, r0
 8010bfe:	460f      	mov	r7, r1
 8010c00:	f04f 0200 	mov.w	r2, #0
 8010c04:	d134      	bne.n	8010c70 <_dtoa_r+0x660>
 8010c06:	4b19      	ldr	r3, [pc, #100]	; (8010c6c <_dtoa_r+0x65c>)
 8010c08:	ec51 0b18 	vmov	r0, r1, d8
 8010c0c:	f7ef fb46 	bl	800029c <__adddf3>
 8010c10:	4602      	mov	r2, r0
 8010c12:	460b      	mov	r3, r1
 8010c14:	4630      	mov	r0, r6
 8010c16:	4639      	mov	r1, r7
 8010c18:	f7ef ff86 	bl	8000b28 <__aeabi_dcmpgt>
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d175      	bne.n	8010d0c <_dtoa_r+0x6fc>
 8010c20:	ec53 2b18 	vmov	r2, r3, d8
 8010c24:	4911      	ldr	r1, [pc, #68]	; (8010c6c <_dtoa_r+0x65c>)
 8010c26:	2000      	movs	r0, #0
 8010c28:	f7ef fb36 	bl	8000298 <__aeabi_dsub>
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	460b      	mov	r3, r1
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	f7ef ff5a 	bl	8000aec <__aeabi_dcmplt>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	f43f af27 	beq.w	8010a8c <_dtoa_r+0x47c>
 8010c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010c40:	1e6b      	subs	r3, r5, #1
 8010c42:	930c      	str	r3, [sp, #48]	; 0x30
 8010c44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010c48:	2b30      	cmp	r3, #48	; 0x30
 8010c4a:	d0f8      	beq.n	8010c3e <_dtoa_r+0x62e>
 8010c4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010c50:	e04a      	b.n	8010ce8 <_dtoa_r+0x6d8>
 8010c52:	bf00      	nop
 8010c54:	08014230 	.word	0x08014230
 8010c58:	08014208 	.word	0x08014208
 8010c5c:	3ff00000 	.word	0x3ff00000
 8010c60:	40240000 	.word	0x40240000
 8010c64:	401c0000 	.word	0x401c0000
 8010c68:	40140000 	.word	0x40140000
 8010c6c:	3fe00000 	.word	0x3fe00000
 8010c70:	4baf      	ldr	r3, [pc, #700]	; (8010f30 <_dtoa_r+0x920>)
 8010c72:	f7ef fcc9 	bl	8000608 <__aeabi_dmul>
 8010c76:	4606      	mov	r6, r0
 8010c78:	460f      	mov	r7, r1
 8010c7a:	e7ac      	b.n	8010bd6 <_dtoa_r+0x5c6>
 8010c7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010c80:	9d00      	ldr	r5, [sp, #0]
 8010c82:	4642      	mov	r2, r8
 8010c84:	464b      	mov	r3, r9
 8010c86:	4630      	mov	r0, r6
 8010c88:	4639      	mov	r1, r7
 8010c8a:	f7ef fde7 	bl	800085c <__aeabi_ddiv>
 8010c8e:	f7ef ff6b 	bl	8000b68 <__aeabi_d2iz>
 8010c92:	9002      	str	r0, [sp, #8]
 8010c94:	f7ef fc4e 	bl	8000534 <__aeabi_i2d>
 8010c98:	4642      	mov	r2, r8
 8010c9a:	464b      	mov	r3, r9
 8010c9c:	f7ef fcb4 	bl	8000608 <__aeabi_dmul>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	f7ef faf6 	bl	8000298 <__aeabi_dsub>
 8010cac:	9e02      	ldr	r6, [sp, #8]
 8010cae:	9f01      	ldr	r7, [sp, #4]
 8010cb0:	3630      	adds	r6, #48	; 0x30
 8010cb2:	f805 6b01 	strb.w	r6, [r5], #1
 8010cb6:	9e00      	ldr	r6, [sp, #0]
 8010cb8:	1bae      	subs	r6, r5, r6
 8010cba:	42b7      	cmp	r7, r6
 8010cbc:	4602      	mov	r2, r0
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	d137      	bne.n	8010d32 <_dtoa_r+0x722>
 8010cc2:	f7ef faeb 	bl	800029c <__adddf3>
 8010cc6:	4642      	mov	r2, r8
 8010cc8:	464b      	mov	r3, r9
 8010cca:	4606      	mov	r6, r0
 8010ccc:	460f      	mov	r7, r1
 8010cce:	f7ef ff2b 	bl	8000b28 <__aeabi_dcmpgt>
 8010cd2:	b9c8      	cbnz	r0, 8010d08 <_dtoa_r+0x6f8>
 8010cd4:	4642      	mov	r2, r8
 8010cd6:	464b      	mov	r3, r9
 8010cd8:	4630      	mov	r0, r6
 8010cda:	4639      	mov	r1, r7
 8010cdc:	f7ef fefc 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ce0:	b110      	cbz	r0, 8010ce8 <_dtoa_r+0x6d8>
 8010ce2:	9b02      	ldr	r3, [sp, #8]
 8010ce4:	07d9      	lsls	r1, r3, #31
 8010ce6:	d40f      	bmi.n	8010d08 <_dtoa_r+0x6f8>
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4659      	mov	r1, fp
 8010cec:	f000 fada 	bl	80112a4 <_Bfree>
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	702b      	strb	r3, [r5, #0]
 8010cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cf6:	f10a 0001 	add.w	r0, sl, #1
 8010cfa:	6018      	str	r0, [r3, #0]
 8010cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	f43f acd8 	beq.w	80106b4 <_dtoa_r+0xa4>
 8010d04:	601d      	str	r5, [r3, #0]
 8010d06:	e4d5      	b.n	80106b4 <_dtoa_r+0xa4>
 8010d08:	f8cd a01c 	str.w	sl, [sp, #28]
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	461d      	mov	r5, r3
 8010d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d14:	2a39      	cmp	r2, #57	; 0x39
 8010d16:	d108      	bne.n	8010d2a <_dtoa_r+0x71a>
 8010d18:	9a00      	ldr	r2, [sp, #0]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d1f7      	bne.n	8010d0e <_dtoa_r+0x6fe>
 8010d1e:	9a07      	ldr	r2, [sp, #28]
 8010d20:	9900      	ldr	r1, [sp, #0]
 8010d22:	3201      	adds	r2, #1
 8010d24:	9207      	str	r2, [sp, #28]
 8010d26:	2230      	movs	r2, #48	; 0x30
 8010d28:	700a      	strb	r2, [r1, #0]
 8010d2a:	781a      	ldrb	r2, [r3, #0]
 8010d2c:	3201      	adds	r2, #1
 8010d2e:	701a      	strb	r2, [r3, #0]
 8010d30:	e78c      	b.n	8010c4c <_dtoa_r+0x63c>
 8010d32:	4b7f      	ldr	r3, [pc, #508]	; (8010f30 <_dtoa_r+0x920>)
 8010d34:	2200      	movs	r2, #0
 8010d36:	f7ef fc67 	bl	8000608 <__aeabi_dmul>
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4606      	mov	r6, r0
 8010d40:	460f      	mov	r7, r1
 8010d42:	f7ef fec9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010d46:	2800      	cmp	r0, #0
 8010d48:	d09b      	beq.n	8010c82 <_dtoa_r+0x672>
 8010d4a:	e7cd      	b.n	8010ce8 <_dtoa_r+0x6d8>
 8010d4c:	9a08      	ldr	r2, [sp, #32]
 8010d4e:	2a00      	cmp	r2, #0
 8010d50:	f000 80c4 	beq.w	8010edc <_dtoa_r+0x8cc>
 8010d54:	9a05      	ldr	r2, [sp, #20]
 8010d56:	2a01      	cmp	r2, #1
 8010d58:	f300 80a8 	bgt.w	8010eac <_dtoa_r+0x89c>
 8010d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d5e:	2a00      	cmp	r2, #0
 8010d60:	f000 80a0 	beq.w	8010ea4 <_dtoa_r+0x894>
 8010d64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010d68:	9e06      	ldr	r6, [sp, #24]
 8010d6a:	4645      	mov	r5, r8
 8010d6c:	9a04      	ldr	r2, [sp, #16]
 8010d6e:	2101      	movs	r1, #1
 8010d70:	441a      	add	r2, r3
 8010d72:	4620      	mov	r0, r4
 8010d74:	4498      	add	r8, r3
 8010d76:	9204      	str	r2, [sp, #16]
 8010d78:	f000 fb50 	bl	801141c <__i2b>
 8010d7c:	4607      	mov	r7, r0
 8010d7e:	2d00      	cmp	r5, #0
 8010d80:	dd0b      	ble.n	8010d9a <_dtoa_r+0x78a>
 8010d82:	9b04      	ldr	r3, [sp, #16]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	dd08      	ble.n	8010d9a <_dtoa_r+0x78a>
 8010d88:	42ab      	cmp	r3, r5
 8010d8a:	9a04      	ldr	r2, [sp, #16]
 8010d8c:	bfa8      	it	ge
 8010d8e:	462b      	movge	r3, r5
 8010d90:	eba8 0803 	sub.w	r8, r8, r3
 8010d94:	1aed      	subs	r5, r5, r3
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	9304      	str	r3, [sp, #16]
 8010d9a:	9b06      	ldr	r3, [sp, #24]
 8010d9c:	b1fb      	cbz	r3, 8010dde <_dtoa_r+0x7ce>
 8010d9e:	9b08      	ldr	r3, [sp, #32]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f000 809f 	beq.w	8010ee4 <_dtoa_r+0x8d4>
 8010da6:	2e00      	cmp	r6, #0
 8010da8:	dd11      	ble.n	8010dce <_dtoa_r+0x7be>
 8010daa:	4639      	mov	r1, r7
 8010dac:	4632      	mov	r2, r6
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 fbf0 	bl	8011594 <__pow5mult>
 8010db4:	465a      	mov	r2, fp
 8010db6:	4601      	mov	r1, r0
 8010db8:	4607      	mov	r7, r0
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f000 fb44 	bl	8011448 <__multiply>
 8010dc0:	4659      	mov	r1, fp
 8010dc2:	9007      	str	r0, [sp, #28]
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	f000 fa6d 	bl	80112a4 <_Bfree>
 8010dca:	9b07      	ldr	r3, [sp, #28]
 8010dcc:	469b      	mov	fp, r3
 8010dce:	9b06      	ldr	r3, [sp, #24]
 8010dd0:	1b9a      	subs	r2, r3, r6
 8010dd2:	d004      	beq.n	8010dde <_dtoa_r+0x7ce>
 8010dd4:	4659      	mov	r1, fp
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f000 fbdc 	bl	8011594 <__pow5mult>
 8010ddc:	4683      	mov	fp, r0
 8010dde:	2101      	movs	r1, #1
 8010de0:	4620      	mov	r0, r4
 8010de2:	f000 fb1b 	bl	801141c <__i2b>
 8010de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	4606      	mov	r6, r0
 8010dec:	dd7c      	ble.n	8010ee8 <_dtoa_r+0x8d8>
 8010dee:	461a      	mov	r2, r3
 8010df0:	4601      	mov	r1, r0
 8010df2:	4620      	mov	r0, r4
 8010df4:	f000 fbce 	bl	8011594 <__pow5mult>
 8010df8:	9b05      	ldr	r3, [sp, #20]
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	dd76      	ble.n	8010eee <_dtoa_r+0x8de>
 8010e00:	2300      	movs	r3, #0
 8010e02:	9306      	str	r3, [sp, #24]
 8010e04:	6933      	ldr	r3, [r6, #16]
 8010e06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010e0a:	6918      	ldr	r0, [r3, #16]
 8010e0c:	f000 fab6 	bl	801137c <__hi0bits>
 8010e10:	f1c0 0020 	rsb	r0, r0, #32
 8010e14:	9b04      	ldr	r3, [sp, #16]
 8010e16:	4418      	add	r0, r3
 8010e18:	f010 001f 	ands.w	r0, r0, #31
 8010e1c:	f000 8086 	beq.w	8010f2c <_dtoa_r+0x91c>
 8010e20:	f1c0 0320 	rsb	r3, r0, #32
 8010e24:	2b04      	cmp	r3, #4
 8010e26:	dd7f      	ble.n	8010f28 <_dtoa_r+0x918>
 8010e28:	f1c0 001c 	rsb	r0, r0, #28
 8010e2c:	9b04      	ldr	r3, [sp, #16]
 8010e2e:	4403      	add	r3, r0
 8010e30:	4480      	add	r8, r0
 8010e32:	4405      	add	r5, r0
 8010e34:	9304      	str	r3, [sp, #16]
 8010e36:	f1b8 0f00 	cmp.w	r8, #0
 8010e3a:	dd05      	ble.n	8010e48 <_dtoa_r+0x838>
 8010e3c:	4659      	mov	r1, fp
 8010e3e:	4642      	mov	r2, r8
 8010e40:	4620      	mov	r0, r4
 8010e42:	f000 fc01 	bl	8011648 <__lshift>
 8010e46:	4683      	mov	fp, r0
 8010e48:	9b04      	ldr	r3, [sp, #16]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	dd05      	ble.n	8010e5a <_dtoa_r+0x84a>
 8010e4e:	4631      	mov	r1, r6
 8010e50:	461a      	mov	r2, r3
 8010e52:	4620      	mov	r0, r4
 8010e54:	f000 fbf8 	bl	8011648 <__lshift>
 8010e58:	4606      	mov	r6, r0
 8010e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d069      	beq.n	8010f34 <_dtoa_r+0x924>
 8010e60:	4631      	mov	r1, r6
 8010e62:	4658      	mov	r0, fp
 8010e64:	f000 fc5c 	bl	8011720 <__mcmp>
 8010e68:	2800      	cmp	r0, #0
 8010e6a:	da63      	bge.n	8010f34 <_dtoa_r+0x924>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	4659      	mov	r1, fp
 8010e70:	220a      	movs	r2, #10
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 fa38 	bl	80112e8 <__multadd>
 8010e78:	9b08      	ldr	r3, [sp, #32]
 8010e7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010e7e:	4683      	mov	fp, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 818f 	beq.w	80111a4 <_dtoa_r+0xb94>
 8010e86:	4639      	mov	r1, r7
 8010e88:	2300      	movs	r3, #0
 8010e8a:	220a      	movs	r2, #10
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f000 fa2b 	bl	80112e8 <__multadd>
 8010e92:	f1b9 0f00 	cmp.w	r9, #0
 8010e96:	4607      	mov	r7, r0
 8010e98:	f300 808e 	bgt.w	8010fb8 <_dtoa_r+0x9a8>
 8010e9c:	9b05      	ldr	r3, [sp, #20]
 8010e9e:	2b02      	cmp	r3, #2
 8010ea0:	dc50      	bgt.n	8010f44 <_dtoa_r+0x934>
 8010ea2:	e089      	b.n	8010fb8 <_dtoa_r+0x9a8>
 8010ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ea6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010eaa:	e75d      	b.n	8010d68 <_dtoa_r+0x758>
 8010eac:	9b01      	ldr	r3, [sp, #4]
 8010eae:	1e5e      	subs	r6, r3, #1
 8010eb0:	9b06      	ldr	r3, [sp, #24]
 8010eb2:	42b3      	cmp	r3, r6
 8010eb4:	bfbf      	itttt	lt
 8010eb6:	9b06      	ldrlt	r3, [sp, #24]
 8010eb8:	9606      	strlt	r6, [sp, #24]
 8010eba:	1af2      	sublt	r2, r6, r3
 8010ebc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010ebe:	bfb6      	itet	lt
 8010ec0:	189b      	addlt	r3, r3, r2
 8010ec2:	1b9e      	subge	r6, r3, r6
 8010ec4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010ec6:	9b01      	ldr	r3, [sp, #4]
 8010ec8:	bfb8      	it	lt
 8010eca:	2600      	movlt	r6, #0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	bfb5      	itete	lt
 8010ed0:	eba8 0503 	sublt.w	r5, r8, r3
 8010ed4:	9b01      	ldrge	r3, [sp, #4]
 8010ed6:	2300      	movlt	r3, #0
 8010ed8:	4645      	movge	r5, r8
 8010eda:	e747      	b.n	8010d6c <_dtoa_r+0x75c>
 8010edc:	9e06      	ldr	r6, [sp, #24]
 8010ede:	9f08      	ldr	r7, [sp, #32]
 8010ee0:	4645      	mov	r5, r8
 8010ee2:	e74c      	b.n	8010d7e <_dtoa_r+0x76e>
 8010ee4:	9a06      	ldr	r2, [sp, #24]
 8010ee6:	e775      	b.n	8010dd4 <_dtoa_r+0x7c4>
 8010ee8:	9b05      	ldr	r3, [sp, #20]
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	dc18      	bgt.n	8010f20 <_dtoa_r+0x910>
 8010eee:	9b02      	ldr	r3, [sp, #8]
 8010ef0:	b9b3      	cbnz	r3, 8010f20 <_dtoa_r+0x910>
 8010ef2:	9b03      	ldr	r3, [sp, #12]
 8010ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ef8:	b9a3      	cbnz	r3, 8010f24 <_dtoa_r+0x914>
 8010efa:	9b03      	ldr	r3, [sp, #12]
 8010efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010f00:	0d1b      	lsrs	r3, r3, #20
 8010f02:	051b      	lsls	r3, r3, #20
 8010f04:	b12b      	cbz	r3, 8010f12 <_dtoa_r+0x902>
 8010f06:	9b04      	ldr	r3, [sp, #16]
 8010f08:	3301      	adds	r3, #1
 8010f0a:	9304      	str	r3, [sp, #16]
 8010f0c:	f108 0801 	add.w	r8, r8, #1
 8010f10:	2301      	movs	r3, #1
 8010f12:	9306      	str	r3, [sp, #24]
 8010f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f47f af74 	bne.w	8010e04 <_dtoa_r+0x7f4>
 8010f1c:	2001      	movs	r0, #1
 8010f1e:	e779      	b.n	8010e14 <_dtoa_r+0x804>
 8010f20:	2300      	movs	r3, #0
 8010f22:	e7f6      	b.n	8010f12 <_dtoa_r+0x902>
 8010f24:	9b02      	ldr	r3, [sp, #8]
 8010f26:	e7f4      	b.n	8010f12 <_dtoa_r+0x902>
 8010f28:	d085      	beq.n	8010e36 <_dtoa_r+0x826>
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	301c      	adds	r0, #28
 8010f2e:	e77d      	b.n	8010e2c <_dtoa_r+0x81c>
 8010f30:	40240000 	.word	0x40240000
 8010f34:	9b01      	ldr	r3, [sp, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	dc38      	bgt.n	8010fac <_dtoa_r+0x99c>
 8010f3a:	9b05      	ldr	r3, [sp, #20]
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	dd35      	ble.n	8010fac <_dtoa_r+0x99c>
 8010f40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010f44:	f1b9 0f00 	cmp.w	r9, #0
 8010f48:	d10d      	bne.n	8010f66 <_dtoa_r+0x956>
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	464b      	mov	r3, r9
 8010f4e:	2205      	movs	r2, #5
 8010f50:	4620      	mov	r0, r4
 8010f52:	f000 f9c9 	bl	80112e8 <__multadd>
 8010f56:	4601      	mov	r1, r0
 8010f58:	4606      	mov	r6, r0
 8010f5a:	4658      	mov	r0, fp
 8010f5c:	f000 fbe0 	bl	8011720 <__mcmp>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	f73f adbd 	bgt.w	8010ae0 <_dtoa_r+0x4d0>
 8010f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f68:	9d00      	ldr	r5, [sp, #0]
 8010f6a:	ea6f 0a03 	mvn.w	sl, r3
 8010f6e:	f04f 0800 	mov.w	r8, #0
 8010f72:	4631      	mov	r1, r6
 8010f74:	4620      	mov	r0, r4
 8010f76:	f000 f995 	bl	80112a4 <_Bfree>
 8010f7a:	2f00      	cmp	r7, #0
 8010f7c:	f43f aeb4 	beq.w	8010ce8 <_dtoa_r+0x6d8>
 8010f80:	f1b8 0f00 	cmp.w	r8, #0
 8010f84:	d005      	beq.n	8010f92 <_dtoa_r+0x982>
 8010f86:	45b8      	cmp	r8, r7
 8010f88:	d003      	beq.n	8010f92 <_dtoa_r+0x982>
 8010f8a:	4641      	mov	r1, r8
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f000 f989 	bl	80112a4 <_Bfree>
 8010f92:	4639      	mov	r1, r7
 8010f94:	4620      	mov	r0, r4
 8010f96:	f000 f985 	bl	80112a4 <_Bfree>
 8010f9a:	e6a5      	b.n	8010ce8 <_dtoa_r+0x6d8>
 8010f9c:	2600      	movs	r6, #0
 8010f9e:	4637      	mov	r7, r6
 8010fa0:	e7e1      	b.n	8010f66 <_dtoa_r+0x956>
 8010fa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010fa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010fa8:	4637      	mov	r7, r6
 8010faa:	e599      	b.n	8010ae0 <_dtoa_r+0x4d0>
 8010fac:	9b08      	ldr	r3, [sp, #32]
 8010fae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 80fd 	beq.w	80111b2 <_dtoa_r+0xba2>
 8010fb8:	2d00      	cmp	r5, #0
 8010fba:	dd05      	ble.n	8010fc8 <_dtoa_r+0x9b8>
 8010fbc:	4639      	mov	r1, r7
 8010fbe:	462a      	mov	r2, r5
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 fb41 	bl	8011648 <__lshift>
 8010fc6:	4607      	mov	r7, r0
 8010fc8:	9b06      	ldr	r3, [sp, #24]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d05c      	beq.n	8011088 <_dtoa_r+0xa78>
 8010fce:	6879      	ldr	r1, [r7, #4]
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f000 f927 	bl	8011224 <_Balloc>
 8010fd6:	4605      	mov	r5, r0
 8010fd8:	b928      	cbnz	r0, 8010fe6 <_dtoa_r+0x9d6>
 8010fda:	4b80      	ldr	r3, [pc, #512]	; (80111dc <_dtoa_r+0xbcc>)
 8010fdc:	4602      	mov	r2, r0
 8010fde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010fe2:	f7ff bb2e 	b.w	8010642 <_dtoa_r+0x32>
 8010fe6:	693a      	ldr	r2, [r7, #16]
 8010fe8:	3202      	adds	r2, #2
 8010fea:	0092      	lsls	r2, r2, #2
 8010fec:	f107 010c 	add.w	r1, r7, #12
 8010ff0:	300c      	adds	r0, #12
 8010ff2:	f000 f8fd 	bl	80111f0 <memcpy>
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f000 fb24 	bl	8011648 <__lshift>
 8011000:	9b00      	ldr	r3, [sp, #0]
 8011002:	3301      	adds	r3, #1
 8011004:	9301      	str	r3, [sp, #4]
 8011006:	9b00      	ldr	r3, [sp, #0]
 8011008:	444b      	add	r3, r9
 801100a:	9307      	str	r3, [sp, #28]
 801100c:	9b02      	ldr	r3, [sp, #8]
 801100e:	f003 0301 	and.w	r3, r3, #1
 8011012:	46b8      	mov	r8, r7
 8011014:	9306      	str	r3, [sp, #24]
 8011016:	4607      	mov	r7, r0
 8011018:	9b01      	ldr	r3, [sp, #4]
 801101a:	4631      	mov	r1, r6
 801101c:	3b01      	subs	r3, #1
 801101e:	4658      	mov	r0, fp
 8011020:	9302      	str	r3, [sp, #8]
 8011022:	f7ff fa69 	bl	80104f8 <quorem>
 8011026:	4603      	mov	r3, r0
 8011028:	3330      	adds	r3, #48	; 0x30
 801102a:	9004      	str	r0, [sp, #16]
 801102c:	4641      	mov	r1, r8
 801102e:	4658      	mov	r0, fp
 8011030:	9308      	str	r3, [sp, #32]
 8011032:	f000 fb75 	bl	8011720 <__mcmp>
 8011036:	463a      	mov	r2, r7
 8011038:	4681      	mov	r9, r0
 801103a:	4631      	mov	r1, r6
 801103c:	4620      	mov	r0, r4
 801103e:	f000 fb8b 	bl	8011758 <__mdiff>
 8011042:	68c2      	ldr	r2, [r0, #12]
 8011044:	9b08      	ldr	r3, [sp, #32]
 8011046:	4605      	mov	r5, r0
 8011048:	bb02      	cbnz	r2, 801108c <_dtoa_r+0xa7c>
 801104a:	4601      	mov	r1, r0
 801104c:	4658      	mov	r0, fp
 801104e:	f000 fb67 	bl	8011720 <__mcmp>
 8011052:	9b08      	ldr	r3, [sp, #32]
 8011054:	4602      	mov	r2, r0
 8011056:	4629      	mov	r1, r5
 8011058:	4620      	mov	r0, r4
 801105a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801105e:	f000 f921 	bl	80112a4 <_Bfree>
 8011062:	9b05      	ldr	r3, [sp, #20]
 8011064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011066:	9d01      	ldr	r5, [sp, #4]
 8011068:	ea43 0102 	orr.w	r1, r3, r2
 801106c:	9b06      	ldr	r3, [sp, #24]
 801106e:	430b      	orrs	r3, r1
 8011070:	9b08      	ldr	r3, [sp, #32]
 8011072:	d10d      	bne.n	8011090 <_dtoa_r+0xa80>
 8011074:	2b39      	cmp	r3, #57	; 0x39
 8011076:	d029      	beq.n	80110cc <_dtoa_r+0xabc>
 8011078:	f1b9 0f00 	cmp.w	r9, #0
 801107c:	dd01      	ble.n	8011082 <_dtoa_r+0xa72>
 801107e:	9b04      	ldr	r3, [sp, #16]
 8011080:	3331      	adds	r3, #49	; 0x31
 8011082:	9a02      	ldr	r2, [sp, #8]
 8011084:	7013      	strb	r3, [r2, #0]
 8011086:	e774      	b.n	8010f72 <_dtoa_r+0x962>
 8011088:	4638      	mov	r0, r7
 801108a:	e7b9      	b.n	8011000 <_dtoa_r+0x9f0>
 801108c:	2201      	movs	r2, #1
 801108e:	e7e2      	b.n	8011056 <_dtoa_r+0xa46>
 8011090:	f1b9 0f00 	cmp.w	r9, #0
 8011094:	db06      	blt.n	80110a4 <_dtoa_r+0xa94>
 8011096:	9905      	ldr	r1, [sp, #20]
 8011098:	ea41 0909 	orr.w	r9, r1, r9
 801109c:	9906      	ldr	r1, [sp, #24]
 801109e:	ea59 0101 	orrs.w	r1, r9, r1
 80110a2:	d120      	bne.n	80110e6 <_dtoa_r+0xad6>
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	ddec      	ble.n	8011082 <_dtoa_r+0xa72>
 80110a8:	4659      	mov	r1, fp
 80110aa:	2201      	movs	r2, #1
 80110ac:	4620      	mov	r0, r4
 80110ae:	9301      	str	r3, [sp, #4]
 80110b0:	f000 faca 	bl	8011648 <__lshift>
 80110b4:	4631      	mov	r1, r6
 80110b6:	4683      	mov	fp, r0
 80110b8:	f000 fb32 	bl	8011720 <__mcmp>
 80110bc:	2800      	cmp	r0, #0
 80110be:	9b01      	ldr	r3, [sp, #4]
 80110c0:	dc02      	bgt.n	80110c8 <_dtoa_r+0xab8>
 80110c2:	d1de      	bne.n	8011082 <_dtoa_r+0xa72>
 80110c4:	07da      	lsls	r2, r3, #31
 80110c6:	d5dc      	bpl.n	8011082 <_dtoa_r+0xa72>
 80110c8:	2b39      	cmp	r3, #57	; 0x39
 80110ca:	d1d8      	bne.n	801107e <_dtoa_r+0xa6e>
 80110cc:	9a02      	ldr	r2, [sp, #8]
 80110ce:	2339      	movs	r3, #57	; 0x39
 80110d0:	7013      	strb	r3, [r2, #0]
 80110d2:	462b      	mov	r3, r5
 80110d4:	461d      	mov	r5, r3
 80110d6:	3b01      	subs	r3, #1
 80110d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80110dc:	2a39      	cmp	r2, #57	; 0x39
 80110de:	d050      	beq.n	8011182 <_dtoa_r+0xb72>
 80110e0:	3201      	adds	r2, #1
 80110e2:	701a      	strb	r2, [r3, #0]
 80110e4:	e745      	b.n	8010f72 <_dtoa_r+0x962>
 80110e6:	2a00      	cmp	r2, #0
 80110e8:	dd03      	ble.n	80110f2 <_dtoa_r+0xae2>
 80110ea:	2b39      	cmp	r3, #57	; 0x39
 80110ec:	d0ee      	beq.n	80110cc <_dtoa_r+0xabc>
 80110ee:	3301      	adds	r3, #1
 80110f0:	e7c7      	b.n	8011082 <_dtoa_r+0xa72>
 80110f2:	9a01      	ldr	r2, [sp, #4]
 80110f4:	9907      	ldr	r1, [sp, #28]
 80110f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80110fa:	428a      	cmp	r2, r1
 80110fc:	d02a      	beq.n	8011154 <_dtoa_r+0xb44>
 80110fe:	4659      	mov	r1, fp
 8011100:	2300      	movs	r3, #0
 8011102:	220a      	movs	r2, #10
 8011104:	4620      	mov	r0, r4
 8011106:	f000 f8ef 	bl	80112e8 <__multadd>
 801110a:	45b8      	cmp	r8, r7
 801110c:	4683      	mov	fp, r0
 801110e:	f04f 0300 	mov.w	r3, #0
 8011112:	f04f 020a 	mov.w	r2, #10
 8011116:	4641      	mov	r1, r8
 8011118:	4620      	mov	r0, r4
 801111a:	d107      	bne.n	801112c <_dtoa_r+0xb1c>
 801111c:	f000 f8e4 	bl	80112e8 <__multadd>
 8011120:	4680      	mov	r8, r0
 8011122:	4607      	mov	r7, r0
 8011124:	9b01      	ldr	r3, [sp, #4]
 8011126:	3301      	adds	r3, #1
 8011128:	9301      	str	r3, [sp, #4]
 801112a:	e775      	b.n	8011018 <_dtoa_r+0xa08>
 801112c:	f000 f8dc 	bl	80112e8 <__multadd>
 8011130:	4639      	mov	r1, r7
 8011132:	4680      	mov	r8, r0
 8011134:	2300      	movs	r3, #0
 8011136:	220a      	movs	r2, #10
 8011138:	4620      	mov	r0, r4
 801113a:	f000 f8d5 	bl	80112e8 <__multadd>
 801113e:	4607      	mov	r7, r0
 8011140:	e7f0      	b.n	8011124 <_dtoa_r+0xb14>
 8011142:	f1b9 0f00 	cmp.w	r9, #0
 8011146:	9a00      	ldr	r2, [sp, #0]
 8011148:	bfcc      	ite	gt
 801114a:	464d      	movgt	r5, r9
 801114c:	2501      	movle	r5, #1
 801114e:	4415      	add	r5, r2
 8011150:	f04f 0800 	mov.w	r8, #0
 8011154:	4659      	mov	r1, fp
 8011156:	2201      	movs	r2, #1
 8011158:	4620      	mov	r0, r4
 801115a:	9301      	str	r3, [sp, #4]
 801115c:	f000 fa74 	bl	8011648 <__lshift>
 8011160:	4631      	mov	r1, r6
 8011162:	4683      	mov	fp, r0
 8011164:	f000 fadc 	bl	8011720 <__mcmp>
 8011168:	2800      	cmp	r0, #0
 801116a:	dcb2      	bgt.n	80110d2 <_dtoa_r+0xac2>
 801116c:	d102      	bne.n	8011174 <_dtoa_r+0xb64>
 801116e:	9b01      	ldr	r3, [sp, #4]
 8011170:	07db      	lsls	r3, r3, #31
 8011172:	d4ae      	bmi.n	80110d2 <_dtoa_r+0xac2>
 8011174:	462b      	mov	r3, r5
 8011176:	461d      	mov	r5, r3
 8011178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801117c:	2a30      	cmp	r2, #48	; 0x30
 801117e:	d0fa      	beq.n	8011176 <_dtoa_r+0xb66>
 8011180:	e6f7      	b.n	8010f72 <_dtoa_r+0x962>
 8011182:	9a00      	ldr	r2, [sp, #0]
 8011184:	429a      	cmp	r2, r3
 8011186:	d1a5      	bne.n	80110d4 <_dtoa_r+0xac4>
 8011188:	f10a 0a01 	add.w	sl, sl, #1
 801118c:	2331      	movs	r3, #49	; 0x31
 801118e:	e779      	b.n	8011084 <_dtoa_r+0xa74>
 8011190:	4b13      	ldr	r3, [pc, #76]	; (80111e0 <_dtoa_r+0xbd0>)
 8011192:	f7ff baaf 	b.w	80106f4 <_dtoa_r+0xe4>
 8011196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011198:	2b00      	cmp	r3, #0
 801119a:	f47f aa86 	bne.w	80106aa <_dtoa_r+0x9a>
 801119e:	4b11      	ldr	r3, [pc, #68]	; (80111e4 <_dtoa_r+0xbd4>)
 80111a0:	f7ff baa8 	b.w	80106f4 <_dtoa_r+0xe4>
 80111a4:	f1b9 0f00 	cmp.w	r9, #0
 80111a8:	dc03      	bgt.n	80111b2 <_dtoa_r+0xba2>
 80111aa:	9b05      	ldr	r3, [sp, #20]
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	f73f aec9 	bgt.w	8010f44 <_dtoa_r+0x934>
 80111b2:	9d00      	ldr	r5, [sp, #0]
 80111b4:	4631      	mov	r1, r6
 80111b6:	4658      	mov	r0, fp
 80111b8:	f7ff f99e 	bl	80104f8 <quorem>
 80111bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80111c0:	f805 3b01 	strb.w	r3, [r5], #1
 80111c4:	9a00      	ldr	r2, [sp, #0]
 80111c6:	1aaa      	subs	r2, r5, r2
 80111c8:	4591      	cmp	r9, r2
 80111ca:	ddba      	ble.n	8011142 <_dtoa_r+0xb32>
 80111cc:	4659      	mov	r1, fp
 80111ce:	2300      	movs	r3, #0
 80111d0:	220a      	movs	r2, #10
 80111d2:	4620      	mov	r0, r4
 80111d4:	f000 f888 	bl	80112e8 <__multadd>
 80111d8:	4683      	mov	fp, r0
 80111da:	e7eb      	b.n	80111b4 <_dtoa_r+0xba4>
 80111dc:	08014197 	.word	0x08014197
 80111e0:	080140f0 	.word	0x080140f0
 80111e4:	08014114 	.word	0x08014114

080111e8 <_localeconv_r>:
 80111e8:	4800      	ldr	r0, [pc, #0]	; (80111ec <_localeconv_r+0x4>)
 80111ea:	4770      	bx	lr
 80111ec:	20000258 	.word	0x20000258

080111f0 <memcpy>:
 80111f0:	440a      	add	r2, r1
 80111f2:	4291      	cmp	r1, r2
 80111f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80111f8:	d100      	bne.n	80111fc <memcpy+0xc>
 80111fa:	4770      	bx	lr
 80111fc:	b510      	push	{r4, lr}
 80111fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011206:	4291      	cmp	r1, r2
 8011208:	d1f9      	bne.n	80111fe <memcpy+0xe>
 801120a:	bd10      	pop	{r4, pc}

0801120c <__malloc_lock>:
 801120c:	4801      	ldr	r0, [pc, #4]	; (8011214 <__malloc_lock+0x8>)
 801120e:	f000 bd22 	b.w	8011c56 <__retarget_lock_acquire_recursive>
 8011212:	bf00      	nop
 8011214:	20001548 	.word	0x20001548

08011218 <__malloc_unlock>:
 8011218:	4801      	ldr	r0, [pc, #4]	; (8011220 <__malloc_unlock+0x8>)
 801121a:	f000 bd1d 	b.w	8011c58 <__retarget_lock_release_recursive>
 801121e:	bf00      	nop
 8011220:	20001548 	.word	0x20001548

08011224 <_Balloc>:
 8011224:	b570      	push	{r4, r5, r6, lr}
 8011226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011228:	4604      	mov	r4, r0
 801122a:	460d      	mov	r5, r1
 801122c:	b976      	cbnz	r6, 801124c <_Balloc+0x28>
 801122e:	2010      	movs	r0, #16
 8011230:	f7fe fbec 	bl	800fa0c <malloc>
 8011234:	4602      	mov	r2, r0
 8011236:	6260      	str	r0, [r4, #36]	; 0x24
 8011238:	b920      	cbnz	r0, 8011244 <_Balloc+0x20>
 801123a:	4b18      	ldr	r3, [pc, #96]	; (801129c <_Balloc+0x78>)
 801123c:	4818      	ldr	r0, [pc, #96]	; (80112a0 <_Balloc+0x7c>)
 801123e:	2166      	movs	r1, #102	; 0x66
 8011240:	f000 fcd8 	bl	8011bf4 <__assert_func>
 8011244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011248:	6006      	str	r6, [r0, #0]
 801124a:	60c6      	str	r6, [r0, #12]
 801124c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801124e:	68f3      	ldr	r3, [r6, #12]
 8011250:	b183      	cbz	r3, 8011274 <_Balloc+0x50>
 8011252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011254:	68db      	ldr	r3, [r3, #12]
 8011256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801125a:	b9b8      	cbnz	r0, 801128c <_Balloc+0x68>
 801125c:	2101      	movs	r1, #1
 801125e:	fa01 f605 	lsl.w	r6, r1, r5
 8011262:	1d72      	adds	r2, r6, #5
 8011264:	0092      	lsls	r2, r2, #2
 8011266:	4620      	mov	r0, r4
 8011268:	f000 fb5a 	bl	8011920 <_calloc_r>
 801126c:	b160      	cbz	r0, 8011288 <_Balloc+0x64>
 801126e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011272:	e00e      	b.n	8011292 <_Balloc+0x6e>
 8011274:	2221      	movs	r2, #33	; 0x21
 8011276:	2104      	movs	r1, #4
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fb51 	bl	8011920 <_calloc_r>
 801127e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011280:	60f0      	str	r0, [r6, #12]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d1e4      	bne.n	8011252 <_Balloc+0x2e>
 8011288:	2000      	movs	r0, #0
 801128a:	bd70      	pop	{r4, r5, r6, pc}
 801128c:	6802      	ldr	r2, [r0, #0]
 801128e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011292:	2300      	movs	r3, #0
 8011294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011298:	e7f7      	b.n	801128a <_Balloc+0x66>
 801129a:	bf00      	nop
 801129c:	08014121 	.word	0x08014121
 80112a0:	080141a8 	.word	0x080141a8

080112a4 <_Bfree>:
 80112a4:	b570      	push	{r4, r5, r6, lr}
 80112a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112a8:	4605      	mov	r5, r0
 80112aa:	460c      	mov	r4, r1
 80112ac:	b976      	cbnz	r6, 80112cc <_Bfree+0x28>
 80112ae:	2010      	movs	r0, #16
 80112b0:	f7fe fbac 	bl	800fa0c <malloc>
 80112b4:	4602      	mov	r2, r0
 80112b6:	6268      	str	r0, [r5, #36]	; 0x24
 80112b8:	b920      	cbnz	r0, 80112c4 <_Bfree+0x20>
 80112ba:	4b09      	ldr	r3, [pc, #36]	; (80112e0 <_Bfree+0x3c>)
 80112bc:	4809      	ldr	r0, [pc, #36]	; (80112e4 <_Bfree+0x40>)
 80112be:	218a      	movs	r1, #138	; 0x8a
 80112c0:	f000 fc98 	bl	8011bf4 <__assert_func>
 80112c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112c8:	6006      	str	r6, [r0, #0]
 80112ca:	60c6      	str	r6, [r0, #12]
 80112cc:	b13c      	cbz	r4, 80112de <_Bfree+0x3a>
 80112ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112d0:	6862      	ldr	r2, [r4, #4]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112d8:	6021      	str	r1, [r4, #0]
 80112da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112de:	bd70      	pop	{r4, r5, r6, pc}
 80112e0:	08014121 	.word	0x08014121
 80112e4:	080141a8 	.word	0x080141a8

080112e8 <__multadd>:
 80112e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112ec:	690e      	ldr	r6, [r1, #16]
 80112ee:	4607      	mov	r7, r0
 80112f0:	4698      	mov	r8, r3
 80112f2:	460c      	mov	r4, r1
 80112f4:	f101 0014 	add.w	r0, r1, #20
 80112f8:	2300      	movs	r3, #0
 80112fa:	6805      	ldr	r5, [r0, #0]
 80112fc:	b2a9      	uxth	r1, r5
 80112fe:	fb02 8101 	mla	r1, r2, r1, r8
 8011302:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011306:	0c2d      	lsrs	r5, r5, #16
 8011308:	fb02 c505 	mla	r5, r2, r5, ip
 801130c:	b289      	uxth	r1, r1
 801130e:	3301      	adds	r3, #1
 8011310:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011314:	429e      	cmp	r6, r3
 8011316:	f840 1b04 	str.w	r1, [r0], #4
 801131a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801131e:	dcec      	bgt.n	80112fa <__multadd+0x12>
 8011320:	f1b8 0f00 	cmp.w	r8, #0
 8011324:	d022      	beq.n	801136c <__multadd+0x84>
 8011326:	68a3      	ldr	r3, [r4, #8]
 8011328:	42b3      	cmp	r3, r6
 801132a:	dc19      	bgt.n	8011360 <__multadd+0x78>
 801132c:	6861      	ldr	r1, [r4, #4]
 801132e:	4638      	mov	r0, r7
 8011330:	3101      	adds	r1, #1
 8011332:	f7ff ff77 	bl	8011224 <_Balloc>
 8011336:	4605      	mov	r5, r0
 8011338:	b928      	cbnz	r0, 8011346 <__multadd+0x5e>
 801133a:	4602      	mov	r2, r0
 801133c:	4b0d      	ldr	r3, [pc, #52]	; (8011374 <__multadd+0x8c>)
 801133e:	480e      	ldr	r0, [pc, #56]	; (8011378 <__multadd+0x90>)
 8011340:	21b5      	movs	r1, #181	; 0xb5
 8011342:	f000 fc57 	bl	8011bf4 <__assert_func>
 8011346:	6922      	ldr	r2, [r4, #16]
 8011348:	3202      	adds	r2, #2
 801134a:	f104 010c 	add.w	r1, r4, #12
 801134e:	0092      	lsls	r2, r2, #2
 8011350:	300c      	adds	r0, #12
 8011352:	f7ff ff4d 	bl	80111f0 <memcpy>
 8011356:	4621      	mov	r1, r4
 8011358:	4638      	mov	r0, r7
 801135a:	f7ff ffa3 	bl	80112a4 <_Bfree>
 801135e:	462c      	mov	r4, r5
 8011360:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011364:	3601      	adds	r6, #1
 8011366:	f8c3 8014 	str.w	r8, [r3, #20]
 801136a:	6126      	str	r6, [r4, #16]
 801136c:	4620      	mov	r0, r4
 801136e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011372:	bf00      	nop
 8011374:	08014197 	.word	0x08014197
 8011378:	080141a8 	.word	0x080141a8

0801137c <__hi0bits>:
 801137c:	0c03      	lsrs	r3, r0, #16
 801137e:	041b      	lsls	r3, r3, #16
 8011380:	b9d3      	cbnz	r3, 80113b8 <__hi0bits+0x3c>
 8011382:	0400      	lsls	r0, r0, #16
 8011384:	2310      	movs	r3, #16
 8011386:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801138a:	bf04      	itt	eq
 801138c:	0200      	lsleq	r0, r0, #8
 801138e:	3308      	addeq	r3, #8
 8011390:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011394:	bf04      	itt	eq
 8011396:	0100      	lsleq	r0, r0, #4
 8011398:	3304      	addeq	r3, #4
 801139a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801139e:	bf04      	itt	eq
 80113a0:	0080      	lsleq	r0, r0, #2
 80113a2:	3302      	addeq	r3, #2
 80113a4:	2800      	cmp	r0, #0
 80113a6:	db05      	blt.n	80113b4 <__hi0bits+0x38>
 80113a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80113ac:	f103 0301 	add.w	r3, r3, #1
 80113b0:	bf08      	it	eq
 80113b2:	2320      	moveq	r3, #32
 80113b4:	4618      	mov	r0, r3
 80113b6:	4770      	bx	lr
 80113b8:	2300      	movs	r3, #0
 80113ba:	e7e4      	b.n	8011386 <__hi0bits+0xa>

080113bc <__lo0bits>:
 80113bc:	6803      	ldr	r3, [r0, #0]
 80113be:	f013 0207 	ands.w	r2, r3, #7
 80113c2:	4601      	mov	r1, r0
 80113c4:	d00b      	beq.n	80113de <__lo0bits+0x22>
 80113c6:	07da      	lsls	r2, r3, #31
 80113c8:	d424      	bmi.n	8011414 <__lo0bits+0x58>
 80113ca:	0798      	lsls	r0, r3, #30
 80113cc:	bf49      	itett	mi
 80113ce:	085b      	lsrmi	r3, r3, #1
 80113d0:	089b      	lsrpl	r3, r3, #2
 80113d2:	2001      	movmi	r0, #1
 80113d4:	600b      	strmi	r3, [r1, #0]
 80113d6:	bf5c      	itt	pl
 80113d8:	600b      	strpl	r3, [r1, #0]
 80113da:	2002      	movpl	r0, #2
 80113dc:	4770      	bx	lr
 80113de:	b298      	uxth	r0, r3
 80113e0:	b9b0      	cbnz	r0, 8011410 <__lo0bits+0x54>
 80113e2:	0c1b      	lsrs	r3, r3, #16
 80113e4:	2010      	movs	r0, #16
 80113e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80113ea:	bf04      	itt	eq
 80113ec:	0a1b      	lsreq	r3, r3, #8
 80113ee:	3008      	addeq	r0, #8
 80113f0:	071a      	lsls	r2, r3, #28
 80113f2:	bf04      	itt	eq
 80113f4:	091b      	lsreq	r3, r3, #4
 80113f6:	3004      	addeq	r0, #4
 80113f8:	079a      	lsls	r2, r3, #30
 80113fa:	bf04      	itt	eq
 80113fc:	089b      	lsreq	r3, r3, #2
 80113fe:	3002      	addeq	r0, #2
 8011400:	07da      	lsls	r2, r3, #31
 8011402:	d403      	bmi.n	801140c <__lo0bits+0x50>
 8011404:	085b      	lsrs	r3, r3, #1
 8011406:	f100 0001 	add.w	r0, r0, #1
 801140a:	d005      	beq.n	8011418 <__lo0bits+0x5c>
 801140c:	600b      	str	r3, [r1, #0]
 801140e:	4770      	bx	lr
 8011410:	4610      	mov	r0, r2
 8011412:	e7e8      	b.n	80113e6 <__lo0bits+0x2a>
 8011414:	2000      	movs	r0, #0
 8011416:	4770      	bx	lr
 8011418:	2020      	movs	r0, #32
 801141a:	4770      	bx	lr

0801141c <__i2b>:
 801141c:	b510      	push	{r4, lr}
 801141e:	460c      	mov	r4, r1
 8011420:	2101      	movs	r1, #1
 8011422:	f7ff feff 	bl	8011224 <_Balloc>
 8011426:	4602      	mov	r2, r0
 8011428:	b928      	cbnz	r0, 8011436 <__i2b+0x1a>
 801142a:	4b05      	ldr	r3, [pc, #20]	; (8011440 <__i2b+0x24>)
 801142c:	4805      	ldr	r0, [pc, #20]	; (8011444 <__i2b+0x28>)
 801142e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011432:	f000 fbdf 	bl	8011bf4 <__assert_func>
 8011436:	2301      	movs	r3, #1
 8011438:	6144      	str	r4, [r0, #20]
 801143a:	6103      	str	r3, [r0, #16]
 801143c:	bd10      	pop	{r4, pc}
 801143e:	bf00      	nop
 8011440:	08014197 	.word	0x08014197
 8011444:	080141a8 	.word	0x080141a8

08011448 <__multiply>:
 8011448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144c:	4614      	mov	r4, r2
 801144e:	690a      	ldr	r2, [r1, #16]
 8011450:	6923      	ldr	r3, [r4, #16]
 8011452:	429a      	cmp	r2, r3
 8011454:	bfb8      	it	lt
 8011456:	460b      	movlt	r3, r1
 8011458:	460d      	mov	r5, r1
 801145a:	bfbc      	itt	lt
 801145c:	4625      	movlt	r5, r4
 801145e:	461c      	movlt	r4, r3
 8011460:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011464:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011468:	68ab      	ldr	r3, [r5, #8]
 801146a:	6869      	ldr	r1, [r5, #4]
 801146c:	eb0a 0709 	add.w	r7, sl, r9
 8011470:	42bb      	cmp	r3, r7
 8011472:	b085      	sub	sp, #20
 8011474:	bfb8      	it	lt
 8011476:	3101      	addlt	r1, #1
 8011478:	f7ff fed4 	bl	8011224 <_Balloc>
 801147c:	b930      	cbnz	r0, 801148c <__multiply+0x44>
 801147e:	4602      	mov	r2, r0
 8011480:	4b42      	ldr	r3, [pc, #264]	; (801158c <__multiply+0x144>)
 8011482:	4843      	ldr	r0, [pc, #268]	; (8011590 <__multiply+0x148>)
 8011484:	f240 115d 	movw	r1, #349	; 0x15d
 8011488:	f000 fbb4 	bl	8011bf4 <__assert_func>
 801148c:	f100 0614 	add.w	r6, r0, #20
 8011490:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011494:	4633      	mov	r3, r6
 8011496:	2200      	movs	r2, #0
 8011498:	4543      	cmp	r3, r8
 801149a:	d31e      	bcc.n	80114da <__multiply+0x92>
 801149c:	f105 0c14 	add.w	ip, r5, #20
 80114a0:	f104 0314 	add.w	r3, r4, #20
 80114a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80114a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80114ac:	9202      	str	r2, [sp, #8]
 80114ae:	ebac 0205 	sub.w	r2, ip, r5
 80114b2:	3a15      	subs	r2, #21
 80114b4:	f022 0203 	bic.w	r2, r2, #3
 80114b8:	3204      	adds	r2, #4
 80114ba:	f105 0115 	add.w	r1, r5, #21
 80114be:	458c      	cmp	ip, r1
 80114c0:	bf38      	it	cc
 80114c2:	2204      	movcc	r2, #4
 80114c4:	9201      	str	r2, [sp, #4]
 80114c6:	9a02      	ldr	r2, [sp, #8]
 80114c8:	9303      	str	r3, [sp, #12]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d808      	bhi.n	80114e0 <__multiply+0x98>
 80114ce:	2f00      	cmp	r7, #0
 80114d0:	dc55      	bgt.n	801157e <__multiply+0x136>
 80114d2:	6107      	str	r7, [r0, #16]
 80114d4:	b005      	add	sp, #20
 80114d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114da:	f843 2b04 	str.w	r2, [r3], #4
 80114de:	e7db      	b.n	8011498 <__multiply+0x50>
 80114e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80114e4:	f1ba 0f00 	cmp.w	sl, #0
 80114e8:	d020      	beq.n	801152c <__multiply+0xe4>
 80114ea:	f105 0e14 	add.w	lr, r5, #20
 80114ee:	46b1      	mov	r9, r6
 80114f0:	2200      	movs	r2, #0
 80114f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80114f6:	f8d9 b000 	ldr.w	fp, [r9]
 80114fa:	b2a1      	uxth	r1, r4
 80114fc:	fa1f fb8b 	uxth.w	fp, fp
 8011500:	fb0a b101 	mla	r1, sl, r1, fp
 8011504:	4411      	add	r1, r2
 8011506:	f8d9 2000 	ldr.w	r2, [r9]
 801150a:	0c24      	lsrs	r4, r4, #16
 801150c:	0c12      	lsrs	r2, r2, #16
 801150e:	fb0a 2404 	mla	r4, sl, r4, r2
 8011512:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011516:	b289      	uxth	r1, r1
 8011518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801151c:	45f4      	cmp	ip, lr
 801151e:	f849 1b04 	str.w	r1, [r9], #4
 8011522:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011526:	d8e4      	bhi.n	80114f2 <__multiply+0xaa>
 8011528:	9901      	ldr	r1, [sp, #4]
 801152a:	5072      	str	r2, [r6, r1]
 801152c:	9a03      	ldr	r2, [sp, #12]
 801152e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011532:	3304      	adds	r3, #4
 8011534:	f1b9 0f00 	cmp.w	r9, #0
 8011538:	d01f      	beq.n	801157a <__multiply+0x132>
 801153a:	6834      	ldr	r4, [r6, #0]
 801153c:	f105 0114 	add.w	r1, r5, #20
 8011540:	46b6      	mov	lr, r6
 8011542:	f04f 0a00 	mov.w	sl, #0
 8011546:	880a      	ldrh	r2, [r1, #0]
 8011548:	f8be b002 	ldrh.w	fp, [lr, #2]
 801154c:	fb09 b202 	mla	r2, r9, r2, fp
 8011550:	4492      	add	sl, r2
 8011552:	b2a4      	uxth	r4, r4
 8011554:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011558:	f84e 4b04 	str.w	r4, [lr], #4
 801155c:	f851 4b04 	ldr.w	r4, [r1], #4
 8011560:	f8be 2000 	ldrh.w	r2, [lr]
 8011564:	0c24      	lsrs	r4, r4, #16
 8011566:	fb09 2404 	mla	r4, r9, r4, r2
 801156a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801156e:	458c      	cmp	ip, r1
 8011570:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011574:	d8e7      	bhi.n	8011546 <__multiply+0xfe>
 8011576:	9a01      	ldr	r2, [sp, #4]
 8011578:	50b4      	str	r4, [r6, r2]
 801157a:	3604      	adds	r6, #4
 801157c:	e7a3      	b.n	80114c6 <__multiply+0x7e>
 801157e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011582:	2b00      	cmp	r3, #0
 8011584:	d1a5      	bne.n	80114d2 <__multiply+0x8a>
 8011586:	3f01      	subs	r7, #1
 8011588:	e7a1      	b.n	80114ce <__multiply+0x86>
 801158a:	bf00      	nop
 801158c:	08014197 	.word	0x08014197
 8011590:	080141a8 	.word	0x080141a8

08011594 <__pow5mult>:
 8011594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011598:	4615      	mov	r5, r2
 801159a:	f012 0203 	ands.w	r2, r2, #3
 801159e:	4606      	mov	r6, r0
 80115a0:	460f      	mov	r7, r1
 80115a2:	d007      	beq.n	80115b4 <__pow5mult+0x20>
 80115a4:	4c25      	ldr	r4, [pc, #148]	; (801163c <__pow5mult+0xa8>)
 80115a6:	3a01      	subs	r2, #1
 80115a8:	2300      	movs	r3, #0
 80115aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115ae:	f7ff fe9b 	bl	80112e8 <__multadd>
 80115b2:	4607      	mov	r7, r0
 80115b4:	10ad      	asrs	r5, r5, #2
 80115b6:	d03d      	beq.n	8011634 <__pow5mult+0xa0>
 80115b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80115ba:	b97c      	cbnz	r4, 80115dc <__pow5mult+0x48>
 80115bc:	2010      	movs	r0, #16
 80115be:	f7fe fa25 	bl	800fa0c <malloc>
 80115c2:	4602      	mov	r2, r0
 80115c4:	6270      	str	r0, [r6, #36]	; 0x24
 80115c6:	b928      	cbnz	r0, 80115d4 <__pow5mult+0x40>
 80115c8:	4b1d      	ldr	r3, [pc, #116]	; (8011640 <__pow5mult+0xac>)
 80115ca:	481e      	ldr	r0, [pc, #120]	; (8011644 <__pow5mult+0xb0>)
 80115cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80115d0:	f000 fb10 	bl	8011bf4 <__assert_func>
 80115d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115d8:	6004      	str	r4, [r0, #0]
 80115da:	60c4      	str	r4, [r0, #12]
 80115dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115e4:	b94c      	cbnz	r4, 80115fa <__pow5mult+0x66>
 80115e6:	f240 2171 	movw	r1, #625	; 0x271
 80115ea:	4630      	mov	r0, r6
 80115ec:	f7ff ff16 	bl	801141c <__i2b>
 80115f0:	2300      	movs	r3, #0
 80115f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80115f6:	4604      	mov	r4, r0
 80115f8:	6003      	str	r3, [r0, #0]
 80115fa:	f04f 0900 	mov.w	r9, #0
 80115fe:	07eb      	lsls	r3, r5, #31
 8011600:	d50a      	bpl.n	8011618 <__pow5mult+0x84>
 8011602:	4639      	mov	r1, r7
 8011604:	4622      	mov	r2, r4
 8011606:	4630      	mov	r0, r6
 8011608:	f7ff ff1e 	bl	8011448 <__multiply>
 801160c:	4639      	mov	r1, r7
 801160e:	4680      	mov	r8, r0
 8011610:	4630      	mov	r0, r6
 8011612:	f7ff fe47 	bl	80112a4 <_Bfree>
 8011616:	4647      	mov	r7, r8
 8011618:	106d      	asrs	r5, r5, #1
 801161a:	d00b      	beq.n	8011634 <__pow5mult+0xa0>
 801161c:	6820      	ldr	r0, [r4, #0]
 801161e:	b938      	cbnz	r0, 8011630 <__pow5mult+0x9c>
 8011620:	4622      	mov	r2, r4
 8011622:	4621      	mov	r1, r4
 8011624:	4630      	mov	r0, r6
 8011626:	f7ff ff0f 	bl	8011448 <__multiply>
 801162a:	6020      	str	r0, [r4, #0]
 801162c:	f8c0 9000 	str.w	r9, [r0]
 8011630:	4604      	mov	r4, r0
 8011632:	e7e4      	b.n	80115fe <__pow5mult+0x6a>
 8011634:	4638      	mov	r0, r7
 8011636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801163a:	bf00      	nop
 801163c:	080142f8 	.word	0x080142f8
 8011640:	08014121 	.word	0x08014121
 8011644:	080141a8 	.word	0x080141a8

08011648 <__lshift>:
 8011648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801164c:	460c      	mov	r4, r1
 801164e:	6849      	ldr	r1, [r1, #4]
 8011650:	6923      	ldr	r3, [r4, #16]
 8011652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011656:	68a3      	ldr	r3, [r4, #8]
 8011658:	4607      	mov	r7, r0
 801165a:	4691      	mov	r9, r2
 801165c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011660:	f108 0601 	add.w	r6, r8, #1
 8011664:	42b3      	cmp	r3, r6
 8011666:	db0b      	blt.n	8011680 <__lshift+0x38>
 8011668:	4638      	mov	r0, r7
 801166a:	f7ff fddb 	bl	8011224 <_Balloc>
 801166e:	4605      	mov	r5, r0
 8011670:	b948      	cbnz	r0, 8011686 <__lshift+0x3e>
 8011672:	4602      	mov	r2, r0
 8011674:	4b28      	ldr	r3, [pc, #160]	; (8011718 <__lshift+0xd0>)
 8011676:	4829      	ldr	r0, [pc, #164]	; (801171c <__lshift+0xd4>)
 8011678:	f240 11d9 	movw	r1, #473	; 0x1d9
 801167c:	f000 faba 	bl	8011bf4 <__assert_func>
 8011680:	3101      	adds	r1, #1
 8011682:	005b      	lsls	r3, r3, #1
 8011684:	e7ee      	b.n	8011664 <__lshift+0x1c>
 8011686:	2300      	movs	r3, #0
 8011688:	f100 0114 	add.w	r1, r0, #20
 801168c:	f100 0210 	add.w	r2, r0, #16
 8011690:	4618      	mov	r0, r3
 8011692:	4553      	cmp	r3, sl
 8011694:	db33      	blt.n	80116fe <__lshift+0xb6>
 8011696:	6920      	ldr	r0, [r4, #16]
 8011698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801169c:	f104 0314 	add.w	r3, r4, #20
 80116a0:	f019 091f 	ands.w	r9, r9, #31
 80116a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80116ac:	d02b      	beq.n	8011706 <__lshift+0xbe>
 80116ae:	f1c9 0e20 	rsb	lr, r9, #32
 80116b2:	468a      	mov	sl, r1
 80116b4:	2200      	movs	r2, #0
 80116b6:	6818      	ldr	r0, [r3, #0]
 80116b8:	fa00 f009 	lsl.w	r0, r0, r9
 80116bc:	4302      	orrs	r2, r0
 80116be:	f84a 2b04 	str.w	r2, [sl], #4
 80116c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c6:	459c      	cmp	ip, r3
 80116c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80116cc:	d8f3      	bhi.n	80116b6 <__lshift+0x6e>
 80116ce:	ebac 0304 	sub.w	r3, ip, r4
 80116d2:	3b15      	subs	r3, #21
 80116d4:	f023 0303 	bic.w	r3, r3, #3
 80116d8:	3304      	adds	r3, #4
 80116da:	f104 0015 	add.w	r0, r4, #21
 80116de:	4584      	cmp	ip, r0
 80116e0:	bf38      	it	cc
 80116e2:	2304      	movcc	r3, #4
 80116e4:	50ca      	str	r2, [r1, r3]
 80116e6:	b10a      	cbz	r2, 80116ec <__lshift+0xa4>
 80116e8:	f108 0602 	add.w	r6, r8, #2
 80116ec:	3e01      	subs	r6, #1
 80116ee:	4638      	mov	r0, r7
 80116f0:	612e      	str	r6, [r5, #16]
 80116f2:	4621      	mov	r1, r4
 80116f4:	f7ff fdd6 	bl	80112a4 <_Bfree>
 80116f8:	4628      	mov	r0, r5
 80116fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8011702:	3301      	adds	r3, #1
 8011704:	e7c5      	b.n	8011692 <__lshift+0x4a>
 8011706:	3904      	subs	r1, #4
 8011708:	f853 2b04 	ldr.w	r2, [r3], #4
 801170c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011710:	459c      	cmp	ip, r3
 8011712:	d8f9      	bhi.n	8011708 <__lshift+0xc0>
 8011714:	e7ea      	b.n	80116ec <__lshift+0xa4>
 8011716:	bf00      	nop
 8011718:	08014197 	.word	0x08014197
 801171c:	080141a8 	.word	0x080141a8

08011720 <__mcmp>:
 8011720:	b530      	push	{r4, r5, lr}
 8011722:	6902      	ldr	r2, [r0, #16]
 8011724:	690c      	ldr	r4, [r1, #16]
 8011726:	1b12      	subs	r2, r2, r4
 8011728:	d10e      	bne.n	8011748 <__mcmp+0x28>
 801172a:	f100 0314 	add.w	r3, r0, #20
 801172e:	3114      	adds	r1, #20
 8011730:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011734:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011738:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801173c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011740:	42a5      	cmp	r5, r4
 8011742:	d003      	beq.n	801174c <__mcmp+0x2c>
 8011744:	d305      	bcc.n	8011752 <__mcmp+0x32>
 8011746:	2201      	movs	r2, #1
 8011748:	4610      	mov	r0, r2
 801174a:	bd30      	pop	{r4, r5, pc}
 801174c:	4283      	cmp	r3, r0
 801174e:	d3f3      	bcc.n	8011738 <__mcmp+0x18>
 8011750:	e7fa      	b.n	8011748 <__mcmp+0x28>
 8011752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011756:	e7f7      	b.n	8011748 <__mcmp+0x28>

08011758 <__mdiff>:
 8011758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	460c      	mov	r4, r1
 801175e:	4606      	mov	r6, r0
 8011760:	4611      	mov	r1, r2
 8011762:	4620      	mov	r0, r4
 8011764:	4617      	mov	r7, r2
 8011766:	f7ff ffdb 	bl	8011720 <__mcmp>
 801176a:	1e05      	subs	r5, r0, #0
 801176c:	d110      	bne.n	8011790 <__mdiff+0x38>
 801176e:	4629      	mov	r1, r5
 8011770:	4630      	mov	r0, r6
 8011772:	f7ff fd57 	bl	8011224 <_Balloc>
 8011776:	b930      	cbnz	r0, 8011786 <__mdiff+0x2e>
 8011778:	4b39      	ldr	r3, [pc, #228]	; (8011860 <__mdiff+0x108>)
 801177a:	4602      	mov	r2, r0
 801177c:	f240 2132 	movw	r1, #562	; 0x232
 8011780:	4838      	ldr	r0, [pc, #224]	; (8011864 <__mdiff+0x10c>)
 8011782:	f000 fa37 	bl	8011bf4 <__assert_func>
 8011786:	2301      	movs	r3, #1
 8011788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801178c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011790:	bfa4      	itt	ge
 8011792:	463b      	movge	r3, r7
 8011794:	4627      	movge	r7, r4
 8011796:	4630      	mov	r0, r6
 8011798:	6879      	ldr	r1, [r7, #4]
 801179a:	bfa6      	itte	ge
 801179c:	461c      	movge	r4, r3
 801179e:	2500      	movge	r5, #0
 80117a0:	2501      	movlt	r5, #1
 80117a2:	f7ff fd3f 	bl	8011224 <_Balloc>
 80117a6:	b920      	cbnz	r0, 80117b2 <__mdiff+0x5a>
 80117a8:	4b2d      	ldr	r3, [pc, #180]	; (8011860 <__mdiff+0x108>)
 80117aa:	4602      	mov	r2, r0
 80117ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80117b0:	e7e6      	b.n	8011780 <__mdiff+0x28>
 80117b2:	693e      	ldr	r6, [r7, #16]
 80117b4:	60c5      	str	r5, [r0, #12]
 80117b6:	6925      	ldr	r5, [r4, #16]
 80117b8:	f107 0114 	add.w	r1, r7, #20
 80117bc:	f104 0914 	add.w	r9, r4, #20
 80117c0:	f100 0e14 	add.w	lr, r0, #20
 80117c4:	f107 0210 	add.w	r2, r7, #16
 80117c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80117cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80117d0:	46f2      	mov	sl, lr
 80117d2:	2700      	movs	r7, #0
 80117d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80117d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80117dc:	fa1f f883 	uxth.w	r8, r3
 80117e0:	fa17 f78b 	uxtah	r7, r7, fp
 80117e4:	0c1b      	lsrs	r3, r3, #16
 80117e6:	eba7 0808 	sub.w	r8, r7, r8
 80117ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117f2:	fa1f f888 	uxth.w	r8, r8
 80117f6:	141f      	asrs	r7, r3, #16
 80117f8:	454d      	cmp	r5, r9
 80117fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117fe:	f84a 3b04 	str.w	r3, [sl], #4
 8011802:	d8e7      	bhi.n	80117d4 <__mdiff+0x7c>
 8011804:	1b2b      	subs	r3, r5, r4
 8011806:	3b15      	subs	r3, #21
 8011808:	f023 0303 	bic.w	r3, r3, #3
 801180c:	3304      	adds	r3, #4
 801180e:	3415      	adds	r4, #21
 8011810:	42a5      	cmp	r5, r4
 8011812:	bf38      	it	cc
 8011814:	2304      	movcc	r3, #4
 8011816:	4419      	add	r1, r3
 8011818:	4473      	add	r3, lr
 801181a:	469e      	mov	lr, r3
 801181c:	460d      	mov	r5, r1
 801181e:	4565      	cmp	r5, ip
 8011820:	d30e      	bcc.n	8011840 <__mdiff+0xe8>
 8011822:	f10c 0203 	add.w	r2, ip, #3
 8011826:	1a52      	subs	r2, r2, r1
 8011828:	f022 0203 	bic.w	r2, r2, #3
 801182c:	3903      	subs	r1, #3
 801182e:	458c      	cmp	ip, r1
 8011830:	bf38      	it	cc
 8011832:	2200      	movcc	r2, #0
 8011834:	441a      	add	r2, r3
 8011836:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801183a:	b17b      	cbz	r3, 801185c <__mdiff+0x104>
 801183c:	6106      	str	r6, [r0, #16]
 801183e:	e7a5      	b.n	801178c <__mdiff+0x34>
 8011840:	f855 8b04 	ldr.w	r8, [r5], #4
 8011844:	fa17 f488 	uxtah	r4, r7, r8
 8011848:	1422      	asrs	r2, r4, #16
 801184a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801184e:	b2a4      	uxth	r4, r4
 8011850:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011854:	f84e 4b04 	str.w	r4, [lr], #4
 8011858:	1417      	asrs	r7, r2, #16
 801185a:	e7e0      	b.n	801181e <__mdiff+0xc6>
 801185c:	3e01      	subs	r6, #1
 801185e:	e7ea      	b.n	8011836 <__mdiff+0xde>
 8011860:	08014197 	.word	0x08014197
 8011864:	080141a8 	.word	0x080141a8

08011868 <__d2b>:
 8011868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801186c:	4689      	mov	r9, r1
 801186e:	2101      	movs	r1, #1
 8011870:	ec57 6b10 	vmov	r6, r7, d0
 8011874:	4690      	mov	r8, r2
 8011876:	f7ff fcd5 	bl	8011224 <_Balloc>
 801187a:	4604      	mov	r4, r0
 801187c:	b930      	cbnz	r0, 801188c <__d2b+0x24>
 801187e:	4602      	mov	r2, r0
 8011880:	4b25      	ldr	r3, [pc, #148]	; (8011918 <__d2b+0xb0>)
 8011882:	4826      	ldr	r0, [pc, #152]	; (801191c <__d2b+0xb4>)
 8011884:	f240 310a 	movw	r1, #778	; 0x30a
 8011888:	f000 f9b4 	bl	8011bf4 <__assert_func>
 801188c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011894:	bb35      	cbnz	r5, 80118e4 <__d2b+0x7c>
 8011896:	2e00      	cmp	r6, #0
 8011898:	9301      	str	r3, [sp, #4]
 801189a:	d028      	beq.n	80118ee <__d2b+0x86>
 801189c:	4668      	mov	r0, sp
 801189e:	9600      	str	r6, [sp, #0]
 80118a0:	f7ff fd8c 	bl	80113bc <__lo0bits>
 80118a4:	9900      	ldr	r1, [sp, #0]
 80118a6:	b300      	cbz	r0, 80118ea <__d2b+0x82>
 80118a8:	9a01      	ldr	r2, [sp, #4]
 80118aa:	f1c0 0320 	rsb	r3, r0, #32
 80118ae:	fa02 f303 	lsl.w	r3, r2, r3
 80118b2:	430b      	orrs	r3, r1
 80118b4:	40c2      	lsrs	r2, r0
 80118b6:	6163      	str	r3, [r4, #20]
 80118b8:	9201      	str	r2, [sp, #4]
 80118ba:	9b01      	ldr	r3, [sp, #4]
 80118bc:	61a3      	str	r3, [r4, #24]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	bf14      	ite	ne
 80118c2:	2202      	movne	r2, #2
 80118c4:	2201      	moveq	r2, #1
 80118c6:	6122      	str	r2, [r4, #16]
 80118c8:	b1d5      	cbz	r5, 8011900 <__d2b+0x98>
 80118ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80118ce:	4405      	add	r5, r0
 80118d0:	f8c9 5000 	str.w	r5, [r9]
 80118d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118d8:	f8c8 0000 	str.w	r0, [r8]
 80118dc:	4620      	mov	r0, r4
 80118de:	b003      	add	sp, #12
 80118e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118e8:	e7d5      	b.n	8011896 <__d2b+0x2e>
 80118ea:	6161      	str	r1, [r4, #20]
 80118ec:	e7e5      	b.n	80118ba <__d2b+0x52>
 80118ee:	a801      	add	r0, sp, #4
 80118f0:	f7ff fd64 	bl	80113bc <__lo0bits>
 80118f4:	9b01      	ldr	r3, [sp, #4]
 80118f6:	6163      	str	r3, [r4, #20]
 80118f8:	2201      	movs	r2, #1
 80118fa:	6122      	str	r2, [r4, #16]
 80118fc:	3020      	adds	r0, #32
 80118fe:	e7e3      	b.n	80118c8 <__d2b+0x60>
 8011900:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011904:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011908:	f8c9 0000 	str.w	r0, [r9]
 801190c:	6918      	ldr	r0, [r3, #16]
 801190e:	f7ff fd35 	bl	801137c <__hi0bits>
 8011912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011916:	e7df      	b.n	80118d8 <__d2b+0x70>
 8011918:	08014197 	.word	0x08014197
 801191c:	080141a8 	.word	0x080141a8

08011920 <_calloc_r>:
 8011920:	b513      	push	{r0, r1, r4, lr}
 8011922:	434a      	muls	r2, r1
 8011924:	4611      	mov	r1, r2
 8011926:	9201      	str	r2, [sp, #4]
 8011928:	f7fe f8d8 	bl	800fadc <_malloc_r>
 801192c:	4604      	mov	r4, r0
 801192e:	b118      	cbz	r0, 8011938 <_calloc_r+0x18>
 8011930:	9a01      	ldr	r2, [sp, #4]
 8011932:	2100      	movs	r1, #0
 8011934:	f7fe f87a 	bl	800fa2c <memset>
 8011938:	4620      	mov	r0, r4
 801193a:	b002      	add	sp, #8
 801193c:	bd10      	pop	{r4, pc}

0801193e <__ssputs_r>:
 801193e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011942:	688e      	ldr	r6, [r1, #8]
 8011944:	429e      	cmp	r6, r3
 8011946:	4682      	mov	sl, r0
 8011948:	460c      	mov	r4, r1
 801194a:	4690      	mov	r8, r2
 801194c:	461f      	mov	r7, r3
 801194e:	d838      	bhi.n	80119c2 <__ssputs_r+0x84>
 8011950:	898a      	ldrh	r2, [r1, #12]
 8011952:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011956:	d032      	beq.n	80119be <__ssputs_r+0x80>
 8011958:	6825      	ldr	r5, [r4, #0]
 801195a:	6909      	ldr	r1, [r1, #16]
 801195c:	eba5 0901 	sub.w	r9, r5, r1
 8011960:	6965      	ldr	r5, [r4, #20]
 8011962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011966:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801196a:	3301      	adds	r3, #1
 801196c:	444b      	add	r3, r9
 801196e:	106d      	asrs	r5, r5, #1
 8011970:	429d      	cmp	r5, r3
 8011972:	bf38      	it	cc
 8011974:	461d      	movcc	r5, r3
 8011976:	0553      	lsls	r3, r2, #21
 8011978:	d531      	bpl.n	80119de <__ssputs_r+0xa0>
 801197a:	4629      	mov	r1, r5
 801197c:	f7fe f8ae 	bl	800fadc <_malloc_r>
 8011980:	4606      	mov	r6, r0
 8011982:	b950      	cbnz	r0, 801199a <__ssputs_r+0x5c>
 8011984:	230c      	movs	r3, #12
 8011986:	f8ca 3000 	str.w	r3, [sl]
 801198a:	89a3      	ldrh	r3, [r4, #12]
 801198c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011990:	81a3      	strh	r3, [r4, #12]
 8011992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801199a:	6921      	ldr	r1, [r4, #16]
 801199c:	464a      	mov	r2, r9
 801199e:	f7ff fc27 	bl	80111f0 <memcpy>
 80119a2:	89a3      	ldrh	r3, [r4, #12]
 80119a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80119a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119ac:	81a3      	strh	r3, [r4, #12]
 80119ae:	6126      	str	r6, [r4, #16]
 80119b0:	6165      	str	r5, [r4, #20]
 80119b2:	444e      	add	r6, r9
 80119b4:	eba5 0509 	sub.w	r5, r5, r9
 80119b8:	6026      	str	r6, [r4, #0]
 80119ba:	60a5      	str	r5, [r4, #8]
 80119bc:	463e      	mov	r6, r7
 80119be:	42be      	cmp	r6, r7
 80119c0:	d900      	bls.n	80119c4 <__ssputs_r+0x86>
 80119c2:	463e      	mov	r6, r7
 80119c4:	4632      	mov	r2, r6
 80119c6:	6820      	ldr	r0, [r4, #0]
 80119c8:	4641      	mov	r1, r8
 80119ca:	f000 f958 	bl	8011c7e <memmove>
 80119ce:	68a3      	ldr	r3, [r4, #8]
 80119d0:	6822      	ldr	r2, [r4, #0]
 80119d2:	1b9b      	subs	r3, r3, r6
 80119d4:	4432      	add	r2, r6
 80119d6:	60a3      	str	r3, [r4, #8]
 80119d8:	6022      	str	r2, [r4, #0]
 80119da:	2000      	movs	r0, #0
 80119dc:	e7db      	b.n	8011996 <__ssputs_r+0x58>
 80119de:	462a      	mov	r2, r5
 80119e0:	f000 f967 	bl	8011cb2 <_realloc_r>
 80119e4:	4606      	mov	r6, r0
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d1e1      	bne.n	80119ae <__ssputs_r+0x70>
 80119ea:	6921      	ldr	r1, [r4, #16]
 80119ec:	4650      	mov	r0, sl
 80119ee:	f7fe f825 	bl	800fa3c <_free_r>
 80119f2:	e7c7      	b.n	8011984 <__ssputs_r+0x46>

080119f4 <_svfiprintf_r>:
 80119f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f8:	4698      	mov	r8, r3
 80119fa:	898b      	ldrh	r3, [r1, #12]
 80119fc:	061b      	lsls	r3, r3, #24
 80119fe:	b09d      	sub	sp, #116	; 0x74
 8011a00:	4607      	mov	r7, r0
 8011a02:	460d      	mov	r5, r1
 8011a04:	4614      	mov	r4, r2
 8011a06:	d50e      	bpl.n	8011a26 <_svfiprintf_r+0x32>
 8011a08:	690b      	ldr	r3, [r1, #16]
 8011a0a:	b963      	cbnz	r3, 8011a26 <_svfiprintf_r+0x32>
 8011a0c:	2140      	movs	r1, #64	; 0x40
 8011a0e:	f7fe f865 	bl	800fadc <_malloc_r>
 8011a12:	6028      	str	r0, [r5, #0]
 8011a14:	6128      	str	r0, [r5, #16]
 8011a16:	b920      	cbnz	r0, 8011a22 <_svfiprintf_r+0x2e>
 8011a18:	230c      	movs	r3, #12
 8011a1a:	603b      	str	r3, [r7, #0]
 8011a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a20:	e0d1      	b.n	8011bc6 <_svfiprintf_r+0x1d2>
 8011a22:	2340      	movs	r3, #64	; 0x40
 8011a24:	616b      	str	r3, [r5, #20]
 8011a26:	2300      	movs	r3, #0
 8011a28:	9309      	str	r3, [sp, #36]	; 0x24
 8011a2a:	2320      	movs	r3, #32
 8011a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a30:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a34:	2330      	movs	r3, #48	; 0x30
 8011a36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011be0 <_svfiprintf_r+0x1ec>
 8011a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a3e:	f04f 0901 	mov.w	r9, #1
 8011a42:	4623      	mov	r3, r4
 8011a44:	469a      	mov	sl, r3
 8011a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a4a:	b10a      	cbz	r2, 8011a50 <_svfiprintf_r+0x5c>
 8011a4c:	2a25      	cmp	r2, #37	; 0x25
 8011a4e:	d1f9      	bne.n	8011a44 <_svfiprintf_r+0x50>
 8011a50:	ebba 0b04 	subs.w	fp, sl, r4
 8011a54:	d00b      	beq.n	8011a6e <_svfiprintf_r+0x7a>
 8011a56:	465b      	mov	r3, fp
 8011a58:	4622      	mov	r2, r4
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	4638      	mov	r0, r7
 8011a5e:	f7ff ff6e 	bl	801193e <__ssputs_r>
 8011a62:	3001      	adds	r0, #1
 8011a64:	f000 80aa 	beq.w	8011bbc <_svfiprintf_r+0x1c8>
 8011a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a6a:	445a      	add	r2, fp
 8011a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f000 80a2 	beq.w	8011bbc <_svfiprintf_r+0x1c8>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a82:	f10a 0a01 	add.w	sl, sl, #1
 8011a86:	9304      	str	r3, [sp, #16]
 8011a88:	9307      	str	r3, [sp, #28]
 8011a8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8011a90:	4654      	mov	r4, sl
 8011a92:	2205      	movs	r2, #5
 8011a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a98:	4851      	ldr	r0, [pc, #324]	; (8011be0 <_svfiprintf_r+0x1ec>)
 8011a9a:	f7ee fba9 	bl	80001f0 <memchr>
 8011a9e:	9a04      	ldr	r2, [sp, #16]
 8011aa0:	b9d8      	cbnz	r0, 8011ada <_svfiprintf_r+0xe6>
 8011aa2:	06d0      	lsls	r0, r2, #27
 8011aa4:	bf44      	itt	mi
 8011aa6:	2320      	movmi	r3, #32
 8011aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011aac:	0711      	lsls	r1, r2, #28
 8011aae:	bf44      	itt	mi
 8011ab0:	232b      	movmi	r3, #43	; 0x2b
 8011ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8011aba:	2b2a      	cmp	r3, #42	; 0x2a
 8011abc:	d015      	beq.n	8011aea <_svfiprintf_r+0xf6>
 8011abe:	9a07      	ldr	r2, [sp, #28]
 8011ac0:	4654      	mov	r4, sl
 8011ac2:	2000      	movs	r0, #0
 8011ac4:	f04f 0c0a 	mov.w	ip, #10
 8011ac8:	4621      	mov	r1, r4
 8011aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ace:	3b30      	subs	r3, #48	; 0x30
 8011ad0:	2b09      	cmp	r3, #9
 8011ad2:	d94e      	bls.n	8011b72 <_svfiprintf_r+0x17e>
 8011ad4:	b1b0      	cbz	r0, 8011b04 <_svfiprintf_r+0x110>
 8011ad6:	9207      	str	r2, [sp, #28]
 8011ad8:	e014      	b.n	8011b04 <_svfiprintf_r+0x110>
 8011ada:	eba0 0308 	sub.w	r3, r0, r8
 8011ade:	fa09 f303 	lsl.w	r3, r9, r3
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	9304      	str	r3, [sp, #16]
 8011ae6:	46a2      	mov	sl, r4
 8011ae8:	e7d2      	b.n	8011a90 <_svfiprintf_r+0x9c>
 8011aea:	9b03      	ldr	r3, [sp, #12]
 8011aec:	1d19      	adds	r1, r3, #4
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	9103      	str	r1, [sp, #12]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	bfbb      	ittet	lt
 8011af6:	425b      	neglt	r3, r3
 8011af8:	f042 0202 	orrlt.w	r2, r2, #2
 8011afc:	9307      	strge	r3, [sp, #28]
 8011afe:	9307      	strlt	r3, [sp, #28]
 8011b00:	bfb8      	it	lt
 8011b02:	9204      	strlt	r2, [sp, #16]
 8011b04:	7823      	ldrb	r3, [r4, #0]
 8011b06:	2b2e      	cmp	r3, #46	; 0x2e
 8011b08:	d10c      	bne.n	8011b24 <_svfiprintf_r+0x130>
 8011b0a:	7863      	ldrb	r3, [r4, #1]
 8011b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8011b0e:	d135      	bne.n	8011b7c <_svfiprintf_r+0x188>
 8011b10:	9b03      	ldr	r3, [sp, #12]
 8011b12:	1d1a      	adds	r2, r3, #4
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	9203      	str	r2, [sp, #12]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	bfb8      	it	lt
 8011b1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011b20:	3402      	adds	r4, #2
 8011b22:	9305      	str	r3, [sp, #20]
 8011b24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011bf0 <_svfiprintf_r+0x1fc>
 8011b28:	7821      	ldrb	r1, [r4, #0]
 8011b2a:	2203      	movs	r2, #3
 8011b2c:	4650      	mov	r0, sl
 8011b2e:	f7ee fb5f 	bl	80001f0 <memchr>
 8011b32:	b140      	cbz	r0, 8011b46 <_svfiprintf_r+0x152>
 8011b34:	2340      	movs	r3, #64	; 0x40
 8011b36:	eba0 000a 	sub.w	r0, r0, sl
 8011b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8011b3e:	9b04      	ldr	r3, [sp, #16]
 8011b40:	4303      	orrs	r3, r0
 8011b42:	3401      	adds	r4, #1
 8011b44:	9304      	str	r3, [sp, #16]
 8011b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b4a:	4826      	ldr	r0, [pc, #152]	; (8011be4 <_svfiprintf_r+0x1f0>)
 8011b4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b50:	2206      	movs	r2, #6
 8011b52:	f7ee fb4d 	bl	80001f0 <memchr>
 8011b56:	2800      	cmp	r0, #0
 8011b58:	d038      	beq.n	8011bcc <_svfiprintf_r+0x1d8>
 8011b5a:	4b23      	ldr	r3, [pc, #140]	; (8011be8 <_svfiprintf_r+0x1f4>)
 8011b5c:	bb1b      	cbnz	r3, 8011ba6 <_svfiprintf_r+0x1b2>
 8011b5e:	9b03      	ldr	r3, [sp, #12]
 8011b60:	3307      	adds	r3, #7
 8011b62:	f023 0307 	bic.w	r3, r3, #7
 8011b66:	3308      	adds	r3, #8
 8011b68:	9303      	str	r3, [sp, #12]
 8011b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b6c:	4433      	add	r3, r6
 8011b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b70:	e767      	b.n	8011a42 <_svfiprintf_r+0x4e>
 8011b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b76:	460c      	mov	r4, r1
 8011b78:	2001      	movs	r0, #1
 8011b7a:	e7a5      	b.n	8011ac8 <_svfiprintf_r+0xd4>
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	3401      	adds	r4, #1
 8011b80:	9305      	str	r3, [sp, #20]
 8011b82:	4619      	mov	r1, r3
 8011b84:	f04f 0c0a 	mov.w	ip, #10
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b8e:	3a30      	subs	r2, #48	; 0x30
 8011b90:	2a09      	cmp	r2, #9
 8011b92:	d903      	bls.n	8011b9c <_svfiprintf_r+0x1a8>
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d0c5      	beq.n	8011b24 <_svfiprintf_r+0x130>
 8011b98:	9105      	str	r1, [sp, #20]
 8011b9a:	e7c3      	b.n	8011b24 <_svfiprintf_r+0x130>
 8011b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e7f0      	b.n	8011b88 <_svfiprintf_r+0x194>
 8011ba6:	ab03      	add	r3, sp, #12
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	462a      	mov	r2, r5
 8011bac:	4b0f      	ldr	r3, [pc, #60]	; (8011bec <_svfiprintf_r+0x1f8>)
 8011bae:	a904      	add	r1, sp, #16
 8011bb0:	4638      	mov	r0, r7
 8011bb2:	f7fe f88d 	bl	800fcd0 <_printf_float>
 8011bb6:	1c42      	adds	r2, r0, #1
 8011bb8:	4606      	mov	r6, r0
 8011bba:	d1d6      	bne.n	8011b6a <_svfiprintf_r+0x176>
 8011bbc:	89ab      	ldrh	r3, [r5, #12]
 8011bbe:	065b      	lsls	r3, r3, #25
 8011bc0:	f53f af2c 	bmi.w	8011a1c <_svfiprintf_r+0x28>
 8011bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bc6:	b01d      	add	sp, #116	; 0x74
 8011bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bcc:	ab03      	add	r3, sp, #12
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	462a      	mov	r2, r5
 8011bd2:	4b06      	ldr	r3, [pc, #24]	; (8011bec <_svfiprintf_r+0x1f8>)
 8011bd4:	a904      	add	r1, sp, #16
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	f7fe fb1e 	bl	8010218 <_printf_i>
 8011bdc:	e7eb      	b.n	8011bb6 <_svfiprintf_r+0x1c2>
 8011bde:	bf00      	nop
 8011be0:	08014304 	.word	0x08014304
 8011be4:	0801430e 	.word	0x0801430e
 8011be8:	0800fcd1 	.word	0x0800fcd1
 8011bec:	0801193f 	.word	0x0801193f
 8011bf0:	0801430a 	.word	0x0801430a

08011bf4 <__assert_func>:
 8011bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bf6:	4614      	mov	r4, r2
 8011bf8:	461a      	mov	r2, r3
 8011bfa:	4b09      	ldr	r3, [pc, #36]	; (8011c20 <__assert_func+0x2c>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	4605      	mov	r5, r0
 8011c00:	68d8      	ldr	r0, [r3, #12]
 8011c02:	b14c      	cbz	r4, 8011c18 <__assert_func+0x24>
 8011c04:	4b07      	ldr	r3, [pc, #28]	; (8011c24 <__assert_func+0x30>)
 8011c06:	9100      	str	r1, [sp, #0]
 8011c08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c0c:	4906      	ldr	r1, [pc, #24]	; (8011c28 <__assert_func+0x34>)
 8011c0e:	462b      	mov	r3, r5
 8011c10:	f000 f80e 	bl	8011c30 <fiprintf>
 8011c14:	f000 fa9a 	bl	801214c <abort>
 8011c18:	4b04      	ldr	r3, [pc, #16]	; (8011c2c <__assert_func+0x38>)
 8011c1a:	461c      	mov	r4, r3
 8011c1c:	e7f3      	b.n	8011c06 <__assert_func+0x12>
 8011c1e:	bf00      	nop
 8011c20:	20000104 	.word	0x20000104
 8011c24:	08014315 	.word	0x08014315
 8011c28:	08014322 	.word	0x08014322
 8011c2c:	08014350 	.word	0x08014350

08011c30 <fiprintf>:
 8011c30:	b40e      	push	{r1, r2, r3}
 8011c32:	b503      	push	{r0, r1, lr}
 8011c34:	4601      	mov	r1, r0
 8011c36:	ab03      	add	r3, sp, #12
 8011c38:	4805      	ldr	r0, [pc, #20]	; (8011c50 <fiprintf+0x20>)
 8011c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c3e:	6800      	ldr	r0, [r0, #0]
 8011c40:	9301      	str	r3, [sp, #4]
 8011c42:	f000 f885 	bl	8011d50 <_vfiprintf_r>
 8011c46:	b002      	add	sp, #8
 8011c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c4c:	b003      	add	sp, #12
 8011c4e:	4770      	bx	lr
 8011c50:	20000104 	.word	0x20000104

08011c54 <__retarget_lock_init_recursive>:
 8011c54:	4770      	bx	lr

08011c56 <__retarget_lock_acquire_recursive>:
 8011c56:	4770      	bx	lr

08011c58 <__retarget_lock_release_recursive>:
 8011c58:	4770      	bx	lr

08011c5a <__ascii_mbtowc>:
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	b901      	cbnz	r1, 8011c60 <__ascii_mbtowc+0x6>
 8011c5e:	a901      	add	r1, sp, #4
 8011c60:	b142      	cbz	r2, 8011c74 <__ascii_mbtowc+0x1a>
 8011c62:	b14b      	cbz	r3, 8011c78 <__ascii_mbtowc+0x1e>
 8011c64:	7813      	ldrb	r3, [r2, #0]
 8011c66:	600b      	str	r3, [r1, #0]
 8011c68:	7812      	ldrb	r2, [r2, #0]
 8011c6a:	1e10      	subs	r0, r2, #0
 8011c6c:	bf18      	it	ne
 8011c6e:	2001      	movne	r0, #1
 8011c70:	b002      	add	sp, #8
 8011c72:	4770      	bx	lr
 8011c74:	4610      	mov	r0, r2
 8011c76:	e7fb      	b.n	8011c70 <__ascii_mbtowc+0x16>
 8011c78:	f06f 0001 	mvn.w	r0, #1
 8011c7c:	e7f8      	b.n	8011c70 <__ascii_mbtowc+0x16>

08011c7e <memmove>:
 8011c7e:	4288      	cmp	r0, r1
 8011c80:	b510      	push	{r4, lr}
 8011c82:	eb01 0402 	add.w	r4, r1, r2
 8011c86:	d902      	bls.n	8011c8e <memmove+0x10>
 8011c88:	4284      	cmp	r4, r0
 8011c8a:	4623      	mov	r3, r4
 8011c8c:	d807      	bhi.n	8011c9e <memmove+0x20>
 8011c8e:	1e43      	subs	r3, r0, #1
 8011c90:	42a1      	cmp	r1, r4
 8011c92:	d008      	beq.n	8011ca6 <memmove+0x28>
 8011c94:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c98:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c9c:	e7f8      	b.n	8011c90 <memmove+0x12>
 8011c9e:	4402      	add	r2, r0
 8011ca0:	4601      	mov	r1, r0
 8011ca2:	428a      	cmp	r2, r1
 8011ca4:	d100      	bne.n	8011ca8 <memmove+0x2a>
 8011ca6:	bd10      	pop	{r4, pc}
 8011ca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011cac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011cb0:	e7f7      	b.n	8011ca2 <memmove+0x24>

08011cb2 <_realloc_r>:
 8011cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cb4:	4607      	mov	r7, r0
 8011cb6:	4614      	mov	r4, r2
 8011cb8:	460e      	mov	r6, r1
 8011cba:	b921      	cbnz	r1, 8011cc6 <_realloc_r+0x14>
 8011cbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	f7fd bf0b 	b.w	800fadc <_malloc_r>
 8011cc6:	b922      	cbnz	r2, 8011cd2 <_realloc_r+0x20>
 8011cc8:	f7fd feb8 	bl	800fa3c <_free_r>
 8011ccc:	4625      	mov	r5, r4
 8011cce:	4628      	mov	r0, r5
 8011cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cd2:	f000 fc5f 	bl	8012594 <_malloc_usable_size_r>
 8011cd6:	42a0      	cmp	r0, r4
 8011cd8:	d20f      	bcs.n	8011cfa <_realloc_r+0x48>
 8011cda:	4621      	mov	r1, r4
 8011cdc:	4638      	mov	r0, r7
 8011cde:	f7fd fefd 	bl	800fadc <_malloc_r>
 8011ce2:	4605      	mov	r5, r0
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	d0f2      	beq.n	8011cce <_realloc_r+0x1c>
 8011ce8:	4631      	mov	r1, r6
 8011cea:	4622      	mov	r2, r4
 8011cec:	f7ff fa80 	bl	80111f0 <memcpy>
 8011cf0:	4631      	mov	r1, r6
 8011cf2:	4638      	mov	r0, r7
 8011cf4:	f7fd fea2 	bl	800fa3c <_free_r>
 8011cf8:	e7e9      	b.n	8011cce <_realloc_r+0x1c>
 8011cfa:	4635      	mov	r5, r6
 8011cfc:	e7e7      	b.n	8011cce <_realloc_r+0x1c>

08011cfe <__sfputc_r>:
 8011cfe:	6893      	ldr	r3, [r2, #8]
 8011d00:	3b01      	subs	r3, #1
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	b410      	push	{r4}
 8011d06:	6093      	str	r3, [r2, #8]
 8011d08:	da08      	bge.n	8011d1c <__sfputc_r+0x1e>
 8011d0a:	6994      	ldr	r4, [r2, #24]
 8011d0c:	42a3      	cmp	r3, r4
 8011d0e:	db01      	blt.n	8011d14 <__sfputc_r+0x16>
 8011d10:	290a      	cmp	r1, #10
 8011d12:	d103      	bne.n	8011d1c <__sfputc_r+0x1e>
 8011d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d18:	f000 b94a 	b.w	8011fb0 <__swbuf_r>
 8011d1c:	6813      	ldr	r3, [r2, #0]
 8011d1e:	1c58      	adds	r0, r3, #1
 8011d20:	6010      	str	r0, [r2, #0]
 8011d22:	7019      	strb	r1, [r3, #0]
 8011d24:	4608      	mov	r0, r1
 8011d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <__sfputs_r>:
 8011d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2e:	4606      	mov	r6, r0
 8011d30:	460f      	mov	r7, r1
 8011d32:	4614      	mov	r4, r2
 8011d34:	18d5      	adds	r5, r2, r3
 8011d36:	42ac      	cmp	r4, r5
 8011d38:	d101      	bne.n	8011d3e <__sfputs_r+0x12>
 8011d3a:	2000      	movs	r0, #0
 8011d3c:	e007      	b.n	8011d4e <__sfputs_r+0x22>
 8011d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d42:	463a      	mov	r2, r7
 8011d44:	4630      	mov	r0, r6
 8011d46:	f7ff ffda 	bl	8011cfe <__sfputc_r>
 8011d4a:	1c43      	adds	r3, r0, #1
 8011d4c:	d1f3      	bne.n	8011d36 <__sfputs_r+0xa>
 8011d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011d50 <_vfiprintf_r>:
 8011d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d54:	460d      	mov	r5, r1
 8011d56:	b09d      	sub	sp, #116	; 0x74
 8011d58:	4614      	mov	r4, r2
 8011d5a:	4698      	mov	r8, r3
 8011d5c:	4606      	mov	r6, r0
 8011d5e:	b118      	cbz	r0, 8011d68 <_vfiprintf_r+0x18>
 8011d60:	6983      	ldr	r3, [r0, #24]
 8011d62:	b90b      	cbnz	r3, 8011d68 <_vfiprintf_r+0x18>
 8011d64:	f000 fb14 	bl	8012390 <__sinit>
 8011d68:	4b89      	ldr	r3, [pc, #548]	; (8011f90 <_vfiprintf_r+0x240>)
 8011d6a:	429d      	cmp	r5, r3
 8011d6c:	d11b      	bne.n	8011da6 <_vfiprintf_r+0x56>
 8011d6e:	6875      	ldr	r5, [r6, #4]
 8011d70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d72:	07d9      	lsls	r1, r3, #31
 8011d74:	d405      	bmi.n	8011d82 <_vfiprintf_r+0x32>
 8011d76:	89ab      	ldrh	r3, [r5, #12]
 8011d78:	059a      	lsls	r2, r3, #22
 8011d7a:	d402      	bmi.n	8011d82 <_vfiprintf_r+0x32>
 8011d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d7e:	f7ff ff6a 	bl	8011c56 <__retarget_lock_acquire_recursive>
 8011d82:	89ab      	ldrh	r3, [r5, #12]
 8011d84:	071b      	lsls	r3, r3, #28
 8011d86:	d501      	bpl.n	8011d8c <_vfiprintf_r+0x3c>
 8011d88:	692b      	ldr	r3, [r5, #16]
 8011d8a:	b9eb      	cbnz	r3, 8011dc8 <_vfiprintf_r+0x78>
 8011d8c:	4629      	mov	r1, r5
 8011d8e:	4630      	mov	r0, r6
 8011d90:	f000 f96e 	bl	8012070 <__swsetup_r>
 8011d94:	b1c0      	cbz	r0, 8011dc8 <_vfiprintf_r+0x78>
 8011d96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d98:	07dc      	lsls	r4, r3, #31
 8011d9a:	d50e      	bpl.n	8011dba <_vfiprintf_r+0x6a>
 8011d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011da0:	b01d      	add	sp, #116	; 0x74
 8011da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da6:	4b7b      	ldr	r3, [pc, #492]	; (8011f94 <_vfiprintf_r+0x244>)
 8011da8:	429d      	cmp	r5, r3
 8011daa:	d101      	bne.n	8011db0 <_vfiprintf_r+0x60>
 8011dac:	68b5      	ldr	r5, [r6, #8]
 8011dae:	e7df      	b.n	8011d70 <_vfiprintf_r+0x20>
 8011db0:	4b79      	ldr	r3, [pc, #484]	; (8011f98 <_vfiprintf_r+0x248>)
 8011db2:	429d      	cmp	r5, r3
 8011db4:	bf08      	it	eq
 8011db6:	68f5      	ldreq	r5, [r6, #12]
 8011db8:	e7da      	b.n	8011d70 <_vfiprintf_r+0x20>
 8011dba:	89ab      	ldrh	r3, [r5, #12]
 8011dbc:	0598      	lsls	r0, r3, #22
 8011dbe:	d4ed      	bmi.n	8011d9c <_vfiprintf_r+0x4c>
 8011dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011dc2:	f7ff ff49 	bl	8011c58 <__retarget_lock_release_recursive>
 8011dc6:	e7e9      	b.n	8011d9c <_vfiprintf_r+0x4c>
 8011dc8:	2300      	movs	r3, #0
 8011dca:	9309      	str	r3, [sp, #36]	; 0x24
 8011dcc:	2320      	movs	r3, #32
 8011dce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011dd6:	2330      	movs	r3, #48	; 0x30
 8011dd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011f9c <_vfiprintf_r+0x24c>
 8011ddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011de0:	f04f 0901 	mov.w	r9, #1
 8011de4:	4623      	mov	r3, r4
 8011de6:	469a      	mov	sl, r3
 8011de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011dec:	b10a      	cbz	r2, 8011df2 <_vfiprintf_r+0xa2>
 8011dee:	2a25      	cmp	r2, #37	; 0x25
 8011df0:	d1f9      	bne.n	8011de6 <_vfiprintf_r+0x96>
 8011df2:	ebba 0b04 	subs.w	fp, sl, r4
 8011df6:	d00b      	beq.n	8011e10 <_vfiprintf_r+0xc0>
 8011df8:	465b      	mov	r3, fp
 8011dfa:	4622      	mov	r2, r4
 8011dfc:	4629      	mov	r1, r5
 8011dfe:	4630      	mov	r0, r6
 8011e00:	f7ff ff94 	bl	8011d2c <__sfputs_r>
 8011e04:	3001      	adds	r0, #1
 8011e06:	f000 80aa 	beq.w	8011f5e <_vfiprintf_r+0x20e>
 8011e0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e0c:	445a      	add	r2, fp
 8011e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8011e10:	f89a 3000 	ldrb.w	r3, [sl]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	f000 80a2 	beq.w	8011f5e <_vfiprintf_r+0x20e>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e24:	f10a 0a01 	add.w	sl, sl, #1
 8011e28:	9304      	str	r3, [sp, #16]
 8011e2a:	9307      	str	r3, [sp, #28]
 8011e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e30:	931a      	str	r3, [sp, #104]	; 0x68
 8011e32:	4654      	mov	r4, sl
 8011e34:	2205      	movs	r2, #5
 8011e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e3a:	4858      	ldr	r0, [pc, #352]	; (8011f9c <_vfiprintf_r+0x24c>)
 8011e3c:	f7ee f9d8 	bl	80001f0 <memchr>
 8011e40:	9a04      	ldr	r2, [sp, #16]
 8011e42:	b9d8      	cbnz	r0, 8011e7c <_vfiprintf_r+0x12c>
 8011e44:	06d1      	lsls	r1, r2, #27
 8011e46:	bf44      	itt	mi
 8011e48:	2320      	movmi	r3, #32
 8011e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e4e:	0713      	lsls	r3, r2, #28
 8011e50:	bf44      	itt	mi
 8011e52:	232b      	movmi	r3, #43	; 0x2b
 8011e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e58:	f89a 3000 	ldrb.w	r3, [sl]
 8011e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8011e5e:	d015      	beq.n	8011e8c <_vfiprintf_r+0x13c>
 8011e60:	9a07      	ldr	r2, [sp, #28]
 8011e62:	4654      	mov	r4, sl
 8011e64:	2000      	movs	r0, #0
 8011e66:	f04f 0c0a 	mov.w	ip, #10
 8011e6a:	4621      	mov	r1, r4
 8011e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e70:	3b30      	subs	r3, #48	; 0x30
 8011e72:	2b09      	cmp	r3, #9
 8011e74:	d94e      	bls.n	8011f14 <_vfiprintf_r+0x1c4>
 8011e76:	b1b0      	cbz	r0, 8011ea6 <_vfiprintf_r+0x156>
 8011e78:	9207      	str	r2, [sp, #28]
 8011e7a:	e014      	b.n	8011ea6 <_vfiprintf_r+0x156>
 8011e7c:	eba0 0308 	sub.w	r3, r0, r8
 8011e80:	fa09 f303 	lsl.w	r3, r9, r3
 8011e84:	4313      	orrs	r3, r2
 8011e86:	9304      	str	r3, [sp, #16]
 8011e88:	46a2      	mov	sl, r4
 8011e8a:	e7d2      	b.n	8011e32 <_vfiprintf_r+0xe2>
 8011e8c:	9b03      	ldr	r3, [sp, #12]
 8011e8e:	1d19      	adds	r1, r3, #4
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	9103      	str	r1, [sp, #12]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	bfbb      	ittet	lt
 8011e98:	425b      	neglt	r3, r3
 8011e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8011e9e:	9307      	strge	r3, [sp, #28]
 8011ea0:	9307      	strlt	r3, [sp, #28]
 8011ea2:	bfb8      	it	lt
 8011ea4:	9204      	strlt	r2, [sp, #16]
 8011ea6:	7823      	ldrb	r3, [r4, #0]
 8011ea8:	2b2e      	cmp	r3, #46	; 0x2e
 8011eaa:	d10c      	bne.n	8011ec6 <_vfiprintf_r+0x176>
 8011eac:	7863      	ldrb	r3, [r4, #1]
 8011eae:	2b2a      	cmp	r3, #42	; 0x2a
 8011eb0:	d135      	bne.n	8011f1e <_vfiprintf_r+0x1ce>
 8011eb2:	9b03      	ldr	r3, [sp, #12]
 8011eb4:	1d1a      	adds	r2, r3, #4
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	9203      	str	r2, [sp, #12]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	bfb8      	it	lt
 8011ebe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ec2:	3402      	adds	r4, #2
 8011ec4:	9305      	str	r3, [sp, #20]
 8011ec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011fac <_vfiprintf_r+0x25c>
 8011eca:	7821      	ldrb	r1, [r4, #0]
 8011ecc:	2203      	movs	r2, #3
 8011ece:	4650      	mov	r0, sl
 8011ed0:	f7ee f98e 	bl	80001f0 <memchr>
 8011ed4:	b140      	cbz	r0, 8011ee8 <_vfiprintf_r+0x198>
 8011ed6:	2340      	movs	r3, #64	; 0x40
 8011ed8:	eba0 000a 	sub.w	r0, r0, sl
 8011edc:	fa03 f000 	lsl.w	r0, r3, r0
 8011ee0:	9b04      	ldr	r3, [sp, #16]
 8011ee2:	4303      	orrs	r3, r0
 8011ee4:	3401      	adds	r4, #1
 8011ee6:	9304      	str	r3, [sp, #16]
 8011ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011eec:	482c      	ldr	r0, [pc, #176]	; (8011fa0 <_vfiprintf_r+0x250>)
 8011eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ef2:	2206      	movs	r2, #6
 8011ef4:	f7ee f97c 	bl	80001f0 <memchr>
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	d03f      	beq.n	8011f7c <_vfiprintf_r+0x22c>
 8011efc:	4b29      	ldr	r3, [pc, #164]	; (8011fa4 <_vfiprintf_r+0x254>)
 8011efe:	bb1b      	cbnz	r3, 8011f48 <_vfiprintf_r+0x1f8>
 8011f00:	9b03      	ldr	r3, [sp, #12]
 8011f02:	3307      	adds	r3, #7
 8011f04:	f023 0307 	bic.w	r3, r3, #7
 8011f08:	3308      	adds	r3, #8
 8011f0a:	9303      	str	r3, [sp, #12]
 8011f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f0e:	443b      	add	r3, r7
 8011f10:	9309      	str	r3, [sp, #36]	; 0x24
 8011f12:	e767      	b.n	8011de4 <_vfiprintf_r+0x94>
 8011f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f18:	460c      	mov	r4, r1
 8011f1a:	2001      	movs	r0, #1
 8011f1c:	e7a5      	b.n	8011e6a <_vfiprintf_r+0x11a>
 8011f1e:	2300      	movs	r3, #0
 8011f20:	3401      	adds	r4, #1
 8011f22:	9305      	str	r3, [sp, #20]
 8011f24:	4619      	mov	r1, r3
 8011f26:	f04f 0c0a 	mov.w	ip, #10
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f30:	3a30      	subs	r2, #48	; 0x30
 8011f32:	2a09      	cmp	r2, #9
 8011f34:	d903      	bls.n	8011f3e <_vfiprintf_r+0x1ee>
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d0c5      	beq.n	8011ec6 <_vfiprintf_r+0x176>
 8011f3a:	9105      	str	r1, [sp, #20]
 8011f3c:	e7c3      	b.n	8011ec6 <_vfiprintf_r+0x176>
 8011f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f42:	4604      	mov	r4, r0
 8011f44:	2301      	movs	r3, #1
 8011f46:	e7f0      	b.n	8011f2a <_vfiprintf_r+0x1da>
 8011f48:	ab03      	add	r3, sp, #12
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	462a      	mov	r2, r5
 8011f4e:	4b16      	ldr	r3, [pc, #88]	; (8011fa8 <_vfiprintf_r+0x258>)
 8011f50:	a904      	add	r1, sp, #16
 8011f52:	4630      	mov	r0, r6
 8011f54:	f7fd febc 	bl	800fcd0 <_printf_float>
 8011f58:	4607      	mov	r7, r0
 8011f5a:	1c78      	adds	r0, r7, #1
 8011f5c:	d1d6      	bne.n	8011f0c <_vfiprintf_r+0x1bc>
 8011f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f60:	07d9      	lsls	r1, r3, #31
 8011f62:	d405      	bmi.n	8011f70 <_vfiprintf_r+0x220>
 8011f64:	89ab      	ldrh	r3, [r5, #12]
 8011f66:	059a      	lsls	r2, r3, #22
 8011f68:	d402      	bmi.n	8011f70 <_vfiprintf_r+0x220>
 8011f6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f6c:	f7ff fe74 	bl	8011c58 <__retarget_lock_release_recursive>
 8011f70:	89ab      	ldrh	r3, [r5, #12]
 8011f72:	065b      	lsls	r3, r3, #25
 8011f74:	f53f af12 	bmi.w	8011d9c <_vfiprintf_r+0x4c>
 8011f78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f7a:	e711      	b.n	8011da0 <_vfiprintf_r+0x50>
 8011f7c:	ab03      	add	r3, sp, #12
 8011f7e:	9300      	str	r3, [sp, #0]
 8011f80:	462a      	mov	r2, r5
 8011f82:	4b09      	ldr	r3, [pc, #36]	; (8011fa8 <_vfiprintf_r+0x258>)
 8011f84:	a904      	add	r1, sp, #16
 8011f86:	4630      	mov	r0, r6
 8011f88:	f7fe f946 	bl	8010218 <_printf_i>
 8011f8c:	e7e4      	b.n	8011f58 <_vfiprintf_r+0x208>
 8011f8e:	bf00      	nop
 8011f90:	0801437c 	.word	0x0801437c
 8011f94:	0801439c 	.word	0x0801439c
 8011f98:	0801435c 	.word	0x0801435c
 8011f9c:	08014304 	.word	0x08014304
 8011fa0:	0801430e 	.word	0x0801430e
 8011fa4:	0800fcd1 	.word	0x0800fcd1
 8011fa8:	08011d2d 	.word	0x08011d2d
 8011fac:	0801430a 	.word	0x0801430a

08011fb0 <__swbuf_r>:
 8011fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb2:	460e      	mov	r6, r1
 8011fb4:	4614      	mov	r4, r2
 8011fb6:	4605      	mov	r5, r0
 8011fb8:	b118      	cbz	r0, 8011fc2 <__swbuf_r+0x12>
 8011fba:	6983      	ldr	r3, [r0, #24]
 8011fbc:	b90b      	cbnz	r3, 8011fc2 <__swbuf_r+0x12>
 8011fbe:	f000 f9e7 	bl	8012390 <__sinit>
 8011fc2:	4b21      	ldr	r3, [pc, #132]	; (8012048 <__swbuf_r+0x98>)
 8011fc4:	429c      	cmp	r4, r3
 8011fc6:	d12b      	bne.n	8012020 <__swbuf_r+0x70>
 8011fc8:	686c      	ldr	r4, [r5, #4]
 8011fca:	69a3      	ldr	r3, [r4, #24]
 8011fcc:	60a3      	str	r3, [r4, #8]
 8011fce:	89a3      	ldrh	r3, [r4, #12]
 8011fd0:	071a      	lsls	r2, r3, #28
 8011fd2:	d52f      	bpl.n	8012034 <__swbuf_r+0x84>
 8011fd4:	6923      	ldr	r3, [r4, #16]
 8011fd6:	b36b      	cbz	r3, 8012034 <__swbuf_r+0x84>
 8011fd8:	6923      	ldr	r3, [r4, #16]
 8011fda:	6820      	ldr	r0, [r4, #0]
 8011fdc:	1ac0      	subs	r0, r0, r3
 8011fde:	6963      	ldr	r3, [r4, #20]
 8011fe0:	b2f6      	uxtb	r6, r6
 8011fe2:	4283      	cmp	r3, r0
 8011fe4:	4637      	mov	r7, r6
 8011fe6:	dc04      	bgt.n	8011ff2 <__swbuf_r+0x42>
 8011fe8:	4621      	mov	r1, r4
 8011fea:	4628      	mov	r0, r5
 8011fec:	f000 f93c 	bl	8012268 <_fflush_r>
 8011ff0:	bb30      	cbnz	r0, 8012040 <__swbuf_r+0x90>
 8011ff2:	68a3      	ldr	r3, [r4, #8]
 8011ff4:	3b01      	subs	r3, #1
 8011ff6:	60a3      	str	r3, [r4, #8]
 8011ff8:	6823      	ldr	r3, [r4, #0]
 8011ffa:	1c5a      	adds	r2, r3, #1
 8011ffc:	6022      	str	r2, [r4, #0]
 8011ffe:	701e      	strb	r6, [r3, #0]
 8012000:	6963      	ldr	r3, [r4, #20]
 8012002:	3001      	adds	r0, #1
 8012004:	4283      	cmp	r3, r0
 8012006:	d004      	beq.n	8012012 <__swbuf_r+0x62>
 8012008:	89a3      	ldrh	r3, [r4, #12]
 801200a:	07db      	lsls	r3, r3, #31
 801200c:	d506      	bpl.n	801201c <__swbuf_r+0x6c>
 801200e:	2e0a      	cmp	r6, #10
 8012010:	d104      	bne.n	801201c <__swbuf_r+0x6c>
 8012012:	4621      	mov	r1, r4
 8012014:	4628      	mov	r0, r5
 8012016:	f000 f927 	bl	8012268 <_fflush_r>
 801201a:	b988      	cbnz	r0, 8012040 <__swbuf_r+0x90>
 801201c:	4638      	mov	r0, r7
 801201e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012020:	4b0a      	ldr	r3, [pc, #40]	; (801204c <__swbuf_r+0x9c>)
 8012022:	429c      	cmp	r4, r3
 8012024:	d101      	bne.n	801202a <__swbuf_r+0x7a>
 8012026:	68ac      	ldr	r4, [r5, #8]
 8012028:	e7cf      	b.n	8011fca <__swbuf_r+0x1a>
 801202a:	4b09      	ldr	r3, [pc, #36]	; (8012050 <__swbuf_r+0xa0>)
 801202c:	429c      	cmp	r4, r3
 801202e:	bf08      	it	eq
 8012030:	68ec      	ldreq	r4, [r5, #12]
 8012032:	e7ca      	b.n	8011fca <__swbuf_r+0x1a>
 8012034:	4621      	mov	r1, r4
 8012036:	4628      	mov	r0, r5
 8012038:	f000 f81a 	bl	8012070 <__swsetup_r>
 801203c:	2800      	cmp	r0, #0
 801203e:	d0cb      	beq.n	8011fd8 <__swbuf_r+0x28>
 8012040:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012044:	e7ea      	b.n	801201c <__swbuf_r+0x6c>
 8012046:	bf00      	nop
 8012048:	0801437c 	.word	0x0801437c
 801204c:	0801439c 	.word	0x0801439c
 8012050:	0801435c 	.word	0x0801435c

08012054 <__ascii_wctomb>:
 8012054:	b149      	cbz	r1, 801206a <__ascii_wctomb+0x16>
 8012056:	2aff      	cmp	r2, #255	; 0xff
 8012058:	bf85      	ittet	hi
 801205a:	238a      	movhi	r3, #138	; 0x8a
 801205c:	6003      	strhi	r3, [r0, #0]
 801205e:	700a      	strbls	r2, [r1, #0]
 8012060:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012064:	bf98      	it	ls
 8012066:	2001      	movls	r0, #1
 8012068:	4770      	bx	lr
 801206a:	4608      	mov	r0, r1
 801206c:	4770      	bx	lr
	...

08012070 <__swsetup_r>:
 8012070:	4b32      	ldr	r3, [pc, #200]	; (801213c <__swsetup_r+0xcc>)
 8012072:	b570      	push	{r4, r5, r6, lr}
 8012074:	681d      	ldr	r5, [r3, #0]
 8012076:	4606      	mov	r6, r0
 8012078:	460c      	mov	r4, r1
 801207a:	b125      	cbz	r5, 8012086 <__swsetup_r+0x16>
 801207c:	69ab      	ldr	r3, [r5, #24]
 801207e:	b913      	cbnz	r3, 8012086 <__swsetup_r+0x16>
 8012080:	4628      	mov	r0, r5
 8012082:	f000 f985 	bl	8012390 <__sinit>
 8012086:	4b2e      	ldr	r3, [pc, #184]	; (8012140 <__swsetup_r+0xd0>)
 8012088:	429c      	cmp	r4, r3
 801208a:	d10f      	bne.n	80120ac <__swsetup_r+0x3c>
 801208c:	686c      	ldr	r4, [r5, #4]
 801208e:	89a3      	ldrh	r3, [r4, #12]
 8012090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012094:	0719      	lsls	r1, r3, #28
 8012096:	d42c      	bmi.n	80120f2 <__swsetup_r+0x82>
 8012098:	06dd      	lsls	r5, r3, #27
 801209a:	d411      	bmi.n	80120c0 <__swsetup_r+0x50>
 801209c:	2309      	movs	r3, #9
 801209e:	6033      	str	r3, [r6, #0]
 80120a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80120a4:	81a3      	strh	r3, [r4, #12]
 80120a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120aa:	e03e      	b.n	801212a <__swsetup_r+0xba>
 80120ac:	4b25      	ldr	r3, [pc, #148]	; (8012144 <__swsetup_r+0xd4>)
 80120ae:	429c      	cmp	r4, r3
 80120b0:	d101      	bne.n	80120b6 <__swsetup_r+0x46>
 80120b2:	68ac      	ldr	r4, [r5, #8]
 80120b4:	e7eb      	b.n	801208e <__swsetup_r+0x1e>
 80120b6:	4b24      	ldr	r3, [pc, #144]	; (8012148 <__swsetup_r+0xd8>)
 80120b8:	429c      	cmp	r4, r3
 80120ba:	bf08      	it	eq
 80120bc:	68ec      	ldreq	r4, [r5, #12]
 80120be:	e7e6      	b.n	801208e <__swsetup_r+0x1e>
 80120c0:	0758      	lsls	r0, r3, #29
 80120c2:	d512      	bpl.n	80120ea <__swsetup_r+0x7a>
 80120c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120c6:	b141      	cbz	r1, 80120da <__swsetup_r+0x6a>
 80120c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120cc:	4299      	cmp	r1, r3
 80120ce:	d002      	beq.n	80120d6 <__swsetup_r+0x66>
 80120d0:	4630      	mov	r0, r6
 80120d2:	f7fd fcb3 	bl	800fa3c <_free_r>
 80120d6:	2300      	movs	r3, #0
 80120d8:	6363      	str	r3, [r4, #52]	; 0x34
 80120da:	89a3      	ldrh	r3, [r4, #12]
 80120dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80120e0:	81a3      	strh	r3, [r4, #12]
 80120e2:	2300      	movs	r3, #0
 80120e4:	6063      	str	r3, [r4, #4]
 80120e6:	6923      	ldr	r3, [r4, #16]
 80120e8:	6023      	str	r3, [r4, #0]
 80120ea:	89a3      	ldrh	r3, [r4, #12]
 80120ec:	f043 0308 	orr.w	r3, r3, #8
 80120f0:	81a3      	strh	r3, [r4, #12]
 80120f2:	6923      	ldr	r3, [r4, #16]
 80120f4:	b94b      	cbnz	r3, 801210a <__swsetup_r+0x9a>
 80120f6:	89a3      	ldrh	r3, [r4, #12]
 80120f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012100:	d003      	beq.n	801210a <__swsetup_r+0x9a>
 8012102:	4621      	mov	r1, r4
 8012104:	4630      	mov	r0, r6
 8012106:	f000 fa05 	bl	8012514 <__smakebuf_r>
 801210a:	89a0      	ldrh	r0, [r4, #12]
 801210c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012110:	f010 0301 	ands.w	r3, r0, #1
 8012114:	d00a      	beq.n	801212c <__swsetup_r+0xbc>
 8012116:	2300      	movs	r3, #0
 8012118:	60a3      	str	r3, [r4, #8]
 801211a:	6963      	ldr	r3, [r4, #20]
 801211c:	425b      	negs	r3, r3
 801211e:	61a3      	str	r3, [r4, #24]
 8012120:	6923      	ldr	r3, [r4, #16]
 8012122:	b943      	cbnz	r3, 8012136 <__swsetup_r+0xc6>
 8012124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012128:	d1ba      	bne.n	80120a0 <__swsetup_r+0x30>
 801212a:	bd70      	pop	{r4, r5, r6, pc}
 801212c:	0781      	lsls	r1, r0, #30
 801212e:	bf58      	it	pl
 8012130:	6963      	ldrpl	r3, [r4, #20]
 8012132:	60a3      	str	r3, [r4, #8]
 8012134:	e7f4      	b.n	8012120 <__swsetup_r+0xb0>
 8012136:	2000      	movs	r0, #0
 8012138:	e7f7      	b.n	801212a <__swsetup_r+0xba>
 801213a:	bf00      	nop
 801213c:	20000104 	.word	0x20000104
 8012140:	0801437c 	.word	0x0801437c
 8012144:	0801439c 	.word	0x0801439c
 8012148:	0801435c 	.word	0x0801435c

0801214c <abort>:
 801214c:	b508      	push	{r3, lr}
 801214e:	2006      	movs	r0, #6
 8012150:	f000 fa50 	bl	80125f4 <raise>
 8012154:	2001      	movs	r0, #1
 8012156:	f7f2 f811 	bl	800417c <_exit>
	...

0801215c <__sflush_r>:
 801215c:	898a      	ldrh	r2, [r1, #12]
 801215e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012162:	4605      	mov	r5, r0
 8012164:	0710      	lsls	r0, r2, #28
 8012166:	460c      	mov	r4, r1
 8012168:	d458      	bmi.n	801221c <__sflush_r+0xc0>
 801216a:	684b      	ldr	r3, [r1, #4]
 801216c:	2b00      	cmp	r3, #0
 801216e:	dc05      	bgt.n	801217c <__sflush_r+0x20>
 8012170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012172:	2b00      	cmp	r3, #0
 8012174:	dc02      	bgt.n	801217c <__sflush_r+0x20>
 8012176:	2000      	movs	r0, #0
 8012178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801217c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801217e:	2e00      	cmp	r6, #0
 8012180:	d0f9      	beq.n	8012176 <__sflush_r+0x1a>
 8012182:	2300      	movs	r3, #0
 8012184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012188:	682f      	ldr	r7, [r5, #0]
 801218a:	602b      	str	r3, [r5, #0]
 801218c:	d032      	beq.n	80121f4 <__sflush_r+0x98>
 801218e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012190:	89a3      	ldrh	r3, [r4, #12]
 8012192:	075a      	lsls	r2, r3, #29
 8012194:	d505      	bpl.n	80121a2 <__sflush_r+0x46>
 8012196:	6863      	ldr	r3, [r4, #4]
 8012198:	1ac0      	subs	r0, r0, r3
 801219a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801219c:	b10b      	cbz	r3, 80121a2 <__sflush_r+0x46>
 801219e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80121a0:	1ac0      	subs	r0, r0, r3
 80121a2:	2300      	movs	r3, #0
 80121a4:	4602      	mov	r2, r0
 80121a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121a8:	6a21      	ldr	r1, [r4, #32]
 80121aa:	4628      	mov	r0, r5
 80121ac:	47b0      	blx	r6
 80121ae:	1c43      	adds	r3, r0, #1
 80121b0:	89a3      	ldrh	r3, [r4, #12]
 80121b2:	d106      	bne.n	80121c2 <__sflush_r+0x66>
 80121b4:	6829      	ldr	r1, [r5, #0]
 80121b6:	291d      	cmp	r1, #29
 80121b8:	d82c      	bhi.n	8012214 <__sflush_r+0xb8>
 80121ba:	4a2a      	ldr	r2, [pc, #168]	; (8012264 <__sflush_r+0x108>)
 80121bc:	40ca      	lsrs	r2, r1
 80121be:	07d6      	lsls	r6, r2, #31
 80121c0:	d528      	bpl.n	8012214 <__sflush_r+0xb8>
 80121c2:	2200      	movs	r2, #0
 80121c4:	6062      	str	r2, [r4, #4]
 80121c6:	04d9      	lsls	r1, r3, #19
 80121c8:	6922      	ldr	r2, [r4, #16]
 80121ca:	6022      	str	r2, [r4, #0]
 80121cc:	d504      	bpl.n	80121d8 <__sflush_r+0x7c>
 80121ce:	1c42      	adds	r2, r0, #1
 80121d0:	d101      	bne.n	80121d6 <__sflush_r+0x7a>
 80121d2:	682b      	ldr	r3, [r5, #0]
 80121d4:	b903      	cbnz	r3, 80121d8 <__sflush_r+0x7c>
 80121d6:	6560      	str	r0, [r4, #84]	; 0x54
 80121d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121da:	602f      	str	r7, [r5, #0]
 80121dc:	2900      	cmp	r1, #0
 80121de:	d0ca      	beq.n	8012176 <__sflush_r+0x1a>
 80121e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121e4:	4299      	cmp	r1, r3
 80121e6:	d002      	beq.n	80121ee <__sflush_r+0x92>
 80121e8:	4628      	mov	r0, r5
 80121ea:	f7fd fc27 	bl	800fa3c <_free_r>
 80121ee:	2000      	movs	r0, #0
 80121f0:	6360      	str	r0, [r4, #52]	; 0x34
 80121f2:	e7c1      	b.n	8012178 <__sflush_r+0x1c>
 80121f4:	6a21      	ldr	r1, [r4, #32]
 80121f6:	2301      	movs	r3, #1
 80121f8:	4628      	mov	r0, r5
 80121fa:	47b0      	blx	r6
 80121fc:	1c41      	adds	r1, r0, #1
 80121fe:	d1c7      	bne.n	8012190 <__sflush_r+0x34>
 8012200:	682b      	ldr	r3, [r5, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d0c4      	beq.n	8012190 <__sflush_r+0x34>
 8012206:	2b1d      	cmp	r3, #29
 8012208:	d001      	beq.n	801220e <__sflush_r+0xb2>
 801220a:	2b16      	cmp	r3, #22
 801220c:	d101      	bne.n	8012212 <__sflush_r+0xb6>
 801220e:	602f      	str	r7, [r5, #0]
 8012210:	e7b1      	b.n	8012176 <__sflush_r+0x1a>
 8012212:	89a3      	ldrh	r3, [r4, #12]
 8012214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012218:	81a3      	strh	r3, [r4, #12]
 801221a:	e7ad      	b.n	8012178 <__sflush_r+0x1c>
 801221c:	690f      	ldr	r7, [r1, #16]
 801221e:	2f00      	cmp	r7, #0
 8012220:	d0a9      	beq.n	8012176 <__sflush_r+0x1a>
 8012222:	0793      	lsls	r3, r2, #30
 8012224:	680e      	ldr	r6, [r1, #0]
 8012226:	bf08      	it	eq
 8012228:	694b      	ldreq	r3, [r1, #20]
 801222a:	600f      	str	r7, [r1, #0]
 801222c:	bf18      	it	ne
 801222e:	2300      	movne	r3, #0
 8012230:	eba6 0807 	sub.w	r8, r6, r7
 8012234:	608b      	str	r3, [r1, #8]
 8012236:	f1b8 0f00 	cmp.w	r8, #0
 801223a:	dd9c      	ble.n	8012176 <__sflush_r+0x1a>
 801223c:	6a21      	ldr	r1, [r4, #32]
 801223e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012240:	4643      	mov	r3, r8
 8012242:	463a      	mov	r2, r7
 8012244:	4628      	mov	r0, r5
 8012246:	47b0      	blx	r6
 8012248:	2800      	cmp	r0, #0
 801224a:	dc06      	bgt.n	801225a <__sflush_r+0xfe>
 801224c:	89a3      	ldrh	r3, [r4, #12]
 801224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012252:	81a3      	strh	r3, [r4, #12]
 8012254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012258:	e78e      	b.n	8012178 <__sflush_r+0x1c>
 801225a:	4407      	add	r7, r0
 801225c:	eba8 0800 	sub.w	r8, r8, r0
 8012260:	e7e9      	b.n	8012236 <__sflush_r+0xda>
 8012262:	bf00      	nop
 8012264:	20400001 	.word	0x20400001

08012268 <_fflush_r>:
 8012268:	b538      	push	{r3, r4, r5, lr}
 801226a:	690b      	ldr	r3, [r1, #16]
 801226c:	4605      	mov	r5, r0
 801226e:	460c      	mov	r4, r1
 8012270:	b913      	cbnz	r3, 8012278 <_fflush_r+0x10>
 8012272:	2500      	movs	r5, #0
 8012274:	4628      	mov	r0, r5
 8012276:	bd38      	pop	{r3, r4, r5, pc}
 8012278:	b118      	cbz	r0, 8012282 <_fflush_r+0x1a>
 801227a:	6983      	ldr	r3, [r0, #24]
 801227c:	b90b      	cbnz	r3, 8012282 <_fflush_r+0x1a>
 801227e:	f000 f887 	bl	8012390 <__sinit>
 8012282:	4b14      	ldr	r3, [pc, #80]	; (80122d4 <_fflush_r+0x6c>)
 8012284:	429c      	cmp	r4, r3
 8012286:	d11b      	bne.n	80122c0 <_fflush_r+0x58>
 8012288:	686c      	ldr	r4, [r5, #4]
 801228a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d0ef      	beq.n	8012272 <_fflush_r+0xa>
 8012292:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012294:	07d0      	lsls	r0, r2, #31
 8012296:	d404      	bmi.n	80122a2 <_fflush_r+0x3a>
 8012298:	0599      	lsls	r1, r3, #22
 801229a:	d402      	bmi.n	80122a2 <_fflush_r+0x3a>
 801229c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801229e:	f7ff fcda 	bl	8011c56 <__retarget_lock_acquire_recursive>
 80122a2:	4628      	mov	r0, r5
 80122a4:	4621      	mov	r1, r4
 80122a6:	f7ff ff59 	bl	801215c <__sflush_r>
 80122aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122ac:	07da      	lsls	r2, r3, #31
 80122ae:	4605      	mov	r5, r0
 80122b0:	d4e0      	bmi.n	8012274 <_fflush_r+0xc>
 80122b2:	89a3      	ldrh	r3, [r4, #12]
 80122b4:	059b      	lsls	r3, r3, #22
 80122b6:	d4dd      	bmi.n	8012274 <_fflush_r+0xc>
 80122b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122ba:	f7ff fccd 	bl	8011c58 <__retarget_lock_release_recursive>
 80122be:	e7d9      	b.n	8012274 <_fflush_r+0xc>
 80122c0:	4b05      	ldr	r3, [pc, #20]	; (80122d8 <_fflush_r+0x70>)
 80122c2:	429c      	cmp	r4, r3
 80122c4:	d101      	bne.n	80122ca <_fflush_r+0x62>
 80122c6:	68ac      	ldr	r4, [r5, #8]
 80122c8:	e7df      	b.n	801228a <_fflush_r+0x22>
 80122ca:	4b04      	ldr	r3, [pc, #16]	; (80122dc <_fflush_r+0x74>)
 80122cc:	429c      	cmp	r4, r3
 80122ce:	bf08      	it	eq
 80122d0:	68ec      	ldreq	r4, [r5, #12]
 80122d2:	e7da      	b.n	801228a <_fflush_r+0x22>
 80122d4:	0801437c 	.word	0x0801437c
 80122d8:	0801439c 	.word	0x0801439c
 80122dc:	0801435c 	.word	0x0801435c

080122e0 <std>:
 80122e0:	2300      	movs	r3, #0
 80122e2:	b510      	push	{r4, lr}
 80122e4:	4604      	mov	r4, r0
 80122e6:	e9c0 3300 	strd	r3, r3, [r0]
 80122ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122ee:	6083      	str	r3, [r0, #8]
 80122f0:	8181      	strh	r1, [r0, #12]
 80122f2:	6643      	str	r3, [r0, #100]	; 0x64
 80122f4:	81c2      	strh	r2, [r0, #14]
 80122f6:	6183      	str	r3, [r0, #24]
 80122f8:	4619      	mov	r1, r3
 80122fa:	2208      	movs	r2, #8
 80122fc:	305c      	adds	r0, #92	; 0x5c
 80122fe:	f7fd fb95 	bl	800fa2c <memset>
 8012302:	4b05      	ldr	r3, [pc, #20]	; (8012318 <std+0x38>)
 8012304:	6263      	str	r3, [r4, #36]	; 0x24
 8012306:	4b05      	ldr	r3, [pc, #20]	; (801231c <std+0x3c>)
 8012308:	62a3      	str	r3, [r4, #40]	; 0x28
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <std+0x40>)
 801230c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801230e:	4b05      	ldr	r3, [pc, #20]	; (8012324 <std+0x44>)
 8012310:	6224      	str	r4, [r4, #32]
 8012312:	6323      	str	r3, [r4, #48]	; 0x30
 8012314:	bd10      	pop	{r4, pc}
 8012316:	bf00      	nop
 8012318:	0801262d 	.word	0x0801262d
 801231c:	0801264f 	.word	0x0801264f
 8012320:	08012687 	.word	0x08012687
 8012324:	080126ab 	.word	0x080126ab

08012328 <_cleanup_r>:
 8012328:	4901      	ldr	r1, [pc, #4]	; (8012330 <_cleanup_r+0x8>)
 801232a:	f000 b8af 	b.w	801248c <_fwalk_reent>
 801232e:	bf00      	nop
 8012330:	08012269 	.word	0x08012269

08012334 <__sfmoreglue>:
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	1e4a      	subs	r2, r1, #1
 8012338:	2568      	movs	r5, #104	; 0x68
 801233a:	4355      	muls	r5, r2
 801233c:	460e      	mov	r6, r1
 801233e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012342:	f7fd fbcb 	bl	800fadc <_malloc_r>
 8012346:	4604      	mov	r4, r0
 8012348:	b140      	cbz	r0, 801235c <__sfmoreglue+0x28>
 801234a:	2100      	movs	r1, #0
 801234c:	e9c0 1600 	strd	r1, r6, [r0]
 8012350:	300c      	adds	r0, #12
 8012352:	60a0      	str	r0, [r4, #8]
 8012354:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012358:	f7fd fb68 	bl	800fa2c <memset>
 801235c:	4620      	mov	r0, r4
 801235e:	bd70      	pop	{r4, r5, r6, pc}

08012360 <__sfp_lock_acquire>:
 8012360:	4801      	ldr	r0, [pc, #4]	; (8012368 <__sfp_lock_acquire+0x8>)
 8012362:	f7ff bc78 	b.w	8011c56 <__retarget_lock_acquire_recursive>
 8012366:	bf00      	nop
 8012368:	2000154c 	.word	0x2000154c

0801236c <__sfp_lock_release>:
 801236c:	4801      	ldr	r0, [pc, #4]	; (8012374 <__sfp_lock_release+0x8>)
 801236e:	f7ff bc73 	b.w	8011c58 <__retarget_lock_release_recursive>
 8012372:	bf00      	nop
 8012374:	2000154c 	.word	0x2000154c

08012378 <__sinit_lock_acquire>:
 8012378:	4801      	ldr	r0, [pc, #4]	; (8012380 <__sinit_lock_acquire+0x8>)
 801237a:	f7ff bc6c 	b.w	8011c56 <__retarget_lock_acquire_recursive>
 801237e:	bf00      	nop
 8012380:	20001547 	.word	0x20001547

08012384 <__sinit_lock_release>:
 8012384:	4801      	ldr	r0, [pc, #4]	; (801238c <__sinit_lock_release+0x8>)
 8012386:	f7ff bc67 	b.w	8011c58 <__retarget_lock_release_recursive>
 801238a:	bf00      	nop
 801238c:	20001547 	.word	0x20001547

08012390 <__sinit>:
 8012390:	b510      	push	{r4, lr}
 8012392:	4604      	mov	r4, r0
 8012394:	f7ff fff0 	bl	8012378 <__sinit_lock_acquire>
 8012398:	69a3      	ldr	r3, [r4, #24]
 801239a:	b11b      	cbz	r3, 80123a4 <__sinit+0x14>
 801239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123a0:	f7ff bff0 	b.w	8012384 <__sinit_lock_release>
 80123a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80123a8:	6523      	str	r3, [r4, #80]	; 0x50
 80123aa:	4b13      	ldr	r3, [pc, #76]	; (80123f8 <__sinit+0x68>)
 80123ac:	4a13      	ldr	r2, [pc, #76]	; (80123fc <__sinit+0x6c>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80123b2:	42a3      	cmp	r3, r4
 80123b4:	bf04      	itt	eq
 80123b6:	2301      	moveq	r3, #1
 80123b8:	61a3      	streq	r3, [r4, #24]
 80123ba:	4620      	mov	r0, r4
 80123bc:	f000 f820 	bl	8012400 <__sfp>
 80123c0:	6060      	str	r0, [r4, #4]
 80123c2:	4620      	mov	r0, r4
 80123c4:	f000 f81c 	bl	8012400 <__sfp>
 80123c8:	60a0      	str	r0, [r4, #8]
 80123ca:	4620      	mov	r0, r4
 80123cc:	f000 f818 	bl	8012400 <__sfp>
 80123d0:	2200      	movs	r2, #0
 80123d2:	60e0      	str	r0, [r4, #12]
 80123d4:	2104      	movs	r1, #4
 80123d6:	6860      	ldr	r0, [r4, #4]
 80123d8:	f7ff ff82 	bl	80122e0 <std>
 80123dc:	68a0      	ldr	r0, [r4, #8]
 80123de:	2201      	movs	r2, #1
 80123e0:	2109      	movs	r1, #9
 80123e2:	f7ff ff7d 	bl	80122e0 <std>
 80123e6:	68e0      	ldr	r0, [r4, #12]
 80123e8:	2202      	movs	r2, #2
 80123ea:	2112      	movs	r1, #18
 80123ec:	f7ff ff78 	bl	80122e0 <std>
 80123f0:	2301      	movs	r3, #1
 80123f2:	61a3      	str	r3, [r4, #24]
 80123f4:	e7d2      	b.n	801239c <__sinit+0xc>
 80123f6:	bf00      	nop
 80123f8:	080140dc 	.word	0x080140dc
 80123fc:	08012329 	.word	0x08012329

08012400 <__sfp>:
 8012400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012402:	4607      	mov	r7, r0
 8012404:	f7ff ffac 	bl	8012360 <__sfp_lock_acquire>
 8012408:	4b1e      	ldr	r3, [pc, #120]	; (8012484 <__sfp+0x84>)
 801240a:	681e      	ldr	r6, [r3, #0]
 801240c:	69b3      	ldr	r3, [r6, #24]
 801240e:	b913      	cbnz	r3, 8012416 <__sfp+0x16>
 8012410:	4630      	mov	r0, r6
 8012412:	f7ff ffbd 	bl	8012390 <__sinit>
 8012416:	3648      	adds	r6, #72	; 0x48
 8012418:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801241c:	3b01      	subs	r3, #1
 801241e:	d503      	bpl.n	8012428 <__sfp+0x28>
 8012420:	6833      	ldr	r3, [r6, #0]
 8012422:	b30b      	cbz	r3, 8012468 <__sfp+0x68>
 8012424:	6836      	ldr	r6, [r6, #0]
 8012426:	e7f7      	b.n	8012418 <__sfp+0x18>
 8012428:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801242c:	b9d5      	cbnz	r5, 8012464 <__sfp+0x64>
 801242e:	4b16      	ldr	r3, [pc, #88]	; (8012488 <__sfp+0x88>)
 8012430:	60e3      	str	r3, [r4, #12]
 8012432:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012436:	6665      	str	r5, [r4, #100]	; 0x64
 8012438:	f7ff fc0c 	bl	8011c54 <__retarget_lock_init_recursive>
 801243c:	f7ff ff96 	bl	801236c <__sfp_lock_release>
 8012440:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012444:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012448:	6025      	str	r5, [r4, #0]
 801244a:	61a5      	str	r5, [r4, #24]
 801244c:	2208      	movs	r2, #8
 801244e:	4629      	mov	r1, r5
 8012450:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012454:	f7fd faea 	bl	800fa2c <memset>
 8012458:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801245c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012460:	4620      	mov	r0, r4
 8012462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012464:	3468      	adds	r4, #104	; 0x68
 8012466:	e7d9      	b.n	801241c <__sfp+0x1c>
 8012468:	2104      	movs	r1, #4
 801246a:	4638      	mov	r0, r7
 801246c:	f7ff ff62 	bl	8012334 <__sfmoreglue>
 8012470:	4604      	mov	r4, r0
 8012472:	6030      	str	r0, [r6, #0]
 8012474:	2800      	cmp	r0, #0
 8012476:	d1d5      	bne.n	8012424 <__sfp+0x24>
 8012478:	f7ff ff78 	bl	801236c <__sfp_lock_release>
 801247c:	230c      	movs	r3, #12
 801247e:	603b      	str	r3, [r7, #0]
 8012480:	e7ee      	b.n	8012460 <__sfp+0x60>
 8012482:	bf00      	nop
 8012484:	080140dc 	.word	0x080140dc
 8012488:	ffff0001 	.word	0xffff0001

0801248c <_fwalk_reent>:
 801248c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012490:	4606      	mov	r6, r0
 8012492:	4688      	mov	r8, r1
 8012494:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012498:	2700      	movs	r7, #0
 801249a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801249e:	f1b9 0901 	subs.w	r9, r9, #1
 80124a2:	d505      	bpl.n	80124b0 <_fwalk_reent+0x24>
 80124a4:	6824      	ldr	r4, [r4, #0]
 80124a6:	2c00      	cmp	r4, #0
 80124a8:	d1f7      	bne.n	801249a <_fwalk_reent+0xe>
 80124aa:	4638      	mov	r0, r7
 80124ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b0:	89ab      	ldrh	r3, [r5, #12]
 80124b2:	2b01      	cmp	r3, #1
 80124b4:	d907      	bls.n	80124c6 <_fwalk_reent+0x3a>
 80124b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124ba:	3301      	adds	r3, #1
 80124bc:	d003      	beq.n	80124c6 <_fwalk_reent+0x3a>
 80124be:	4629      	mov	r1, r5
 80124c0:	4630      	mov	r0, r6
 80124c2:	47c0      	blx	r8
 80124c4:	4307      	orrs	r7, r0
 80124c6:	3568      	adds	r5, #104	; 0x68
 80124c8:	e7e9      	b.n	801249e <_fwalk_reent+0x12>

080124ca <__swhatbuf_r>:
 80124ca:	b570      	push	{r4, r5, r6, lr}
 80124cc:	460e      	mov	r6, r1
 80124ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124d2:	2900      	cmp	r1, #0
 80124d4:	b096      	sub	sp, #88	; 0x58
 80124d6:	4614      	mov	r4, r2
 80124d8:	461d      	mov	r5, r3
 80124da:	da07      	bge.n	80124ec <__swhatbuf_r+0x22>
 80124dc:	2300      	movs	r3, #0
 80124de:	602b      	str	r3, [r5, #0]
 80124e0:	89b3      	ldrh	r3, [r6, #12]
 80124e2:	061a      	lsls	r2, r3, #24
 80124e4:	d410      	bmi.n	8012508 <__swhatbuf_r+0x3e>
 80124e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124ea:	e00e      	b.n	801250a <__swhatbuf_r+0x40>
 80124ec:	466a      	mov	r2, sp
 80124ee:	f000 f903 	bl	80126f8 <_fstat_r>
 80124f2:	2800      	cmp	r0, #0
 80124f4:	dbf2      	blt.n	80124dc <__swhatbuf_r+0x12>
 80124f6:	9a01      	ldr	r2, [sp, #4]
 80124f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012500:	425a      	negs	r2, r3
 8012502:	415a      	adcs	r2, r3
 8012504:	602a      	str	r2, [r5, #0]
 8012506:	e7ee      	b.n	80124e6 <__swhatbuf_r+0x1c>
 8012508:	2340      	movs	r3, #64	; 0x40
 801250a:	2000      	movs	r0, #0
 801250c:	6023      	str	r3, [r4, #0]
 801250e:	b016      	add	sp, #88	; 0x58
 8012510:	bd70      	pop	{r4, r5, r6, pc}
	...

08012514 <__smakebuf_r>:
 8012514:	898b      	ldrh	r3, [r1, #12]
 8012516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012518:	079d      	lsls	r5, r3, #30
 801251a:	4606      	mov	r6, r0
 801251c:	460c      	mov	r4, r1
 801251e:	d507      	bpl.n	8012530 <__smakebuf_r+0x1c>
 8012520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012524:	6023      	str	r3, [r4, #0]
 8012526:	6123      	str	r3, [r4, #16]
 8012528:	2301      	movs	r3, #1
 801252a:	6163      	str	r3, [r4, #20]
 801252c:	b002      	add	sp, #8
 801252e:	bd70      	pop	{r4, r5, r6, pc}
 8012530:	ab01      	add	r3, sp, #4
 8012532:	466a      	mov	r2, sp
 8012534:	f7ff ffc9 	bl	80124ca <__swhatbuf_r>
 8012538:	9900      	ldr	r1, [sp, #0]
 801253a:	4605      	mov	r5, r0
 801253c:	4630      	mov	r0, r6
 801253e:	f7fd facd 	bl	800fadc <_malloc_r>
 8012542:	b948      	cbnz	r0, 8012558 <__smakebuf_r+0x44>
 8012544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012548:	059a      	lsls	r2, r3, #22
 801254a:	d4ef      	bmi.n	801252c <__smakebuf_r+0x18>
 801254c:	f023 0303 	bic.w	r3, r3, #3
 8012550:	f043 0302 	orr.w	r3, r3, #2
 8012554:	81a3      	strh	r3, [r4, #12]
 8012556:	e7e3      	b.n	8012520 <__smakebuf_r+0xc>
 8012558:	4b0d      	ldr	r3, [pc, #52]	; (8012590 <__smakebuf_r+0x7c>)
 801255a:	62b3      	str	r3, [r6, #40]	; 0x28
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	6020      	str	r0, [r4, #0]
 8012560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012564:	81a3      	strh	r3, [r4, #12]
 8012566:	9b00      	ldr	r3, [sp, #0]
 8012568:	6163      	str	r3, [r4, #20]
 801256a:	9b01      	ldr	r3, [sp, #4]
 801256c:	6120      	str	r0, [r4, #16]
 801256e:	b15b      	cbz	r3, 8012588 <__smakebuf_r+0x74>
 8012570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012574:	4630      	mov	r0, r6
 8012576:	f000 f8d1 	bl	801271c <_isatty_r>
 801257a:	b128      	cbz	r0, 8012588 <__smakebuf_r+0x74>
 801257c:	89a3      	ldrh	r3, [r4, #12]
 801257e:	f023 0303 	bic.w	r3, r3, #3
 8012582:	f043 0301 	orr.w	r3, r3, #1
 8012586:	81a3      	strh	r3, [r4, #12]
 8012588:	89a0      	ldrh	r0, [r4, #12]
 801258a:	4305      	orrs	r5, r0
 801258c:	81a5      	strh	r5, [r4, #12]
 801258e:	e7cd      	b.n	801252c <__smakebuf_r+0x18>
 8012590:	08012329 	.word	0x08012329

08012594 <_malloc_usable_size_r>:
 8012594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012598:	1f18      	subs	r0, r3, #4
 801259a:	2b00      	cmp	r3, #0
 801259c:	bfbc      	itt	lt
 801259e:	580b      	ldrlt	r3, [r1, r0]
 80125a0:	18c0      	addlt	r0, r0, r3
 80125a2:	4770      	bx	lr

080125a4 <_raise_r>:
 80125a4:	291f      	cmp	r1, #31
 80125a6:	b538      	push	{r3, r4, r5, lr}
 80125a8:	4604      	mov	r4, r0
 80125aa:	460d      	mov	r5, r1
 80125ac:	d904      	bls.n	80125b8 <_raise_r+0x14>
 80125ae:	2316      	movs	r3, #22
 80125b0:	6003      	str	r3, [r0, #0]
 80125b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80125ba:	b112      	cbz	r2, 80125c2 <_raise_r+0x1e>
 80125bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125c0:	b94b      	cbnz	r3, 80125d6 <_raise_r+0x32>
 80125c2:	4620      	mov	r0, r4
 80125c4:	f000 f830 	bl	8012628 <_getpid_r>
 80125c8:	462a      	mov	r2, r5
 80125ca:	4601      	mov	r1, r0
 80125cc:	4620      	mov	r0, r4
 80125ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125d2:	f000 b817 	b.w	8012604 <_kill_r>
 80125d6:	2b01      	cmp	r3, #1
 80125d8:	d00a      	beq.n	80125f0 <_raise_r+0x4c>
 80125da:	1c59      	adds	r1, r3, #1
 80125dc:	d103      	bne.n	80125e6 <_raise_r+0x42>
 80125de:	2316      	movs	r3, #22
 80125e0:	6003      	str	r3, [r0, #0]
 80125e2:	2001      	movs	r0, #1
 80125e4:	e7e7      	b.n	80125b6 <_raise_r+0x12>
 80125e6:	2400      	movs	r4, #0
 80125e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80125ec:	4628      	mov	r0, r5
 80125ee:	4798      	blx	r3
 80125f0:	2000      	movs	r0, #0
 80125f2:	e7e0      	b.n	80125b6 <_raise_r+0x12>

080125f4 <raise>:
 80125f4:	4b02      	ldr	r3, [pc, #8]	; (8012600 <raise+0xc>)
 80125f6:	4601      	mov	r1, r0
 80125f8:	6818      	ldr	r0, [r3, #0]
 80125fa:	f7ff bfd3 	b.w	80125a4 <_raise_r>
 80125fe:	bf00      	nop
 8012600:	20000104 	.word	0x20000104

08012604 <_kill_r>:
 8012604:	b538      	push	{r3, r4, r5, lr}
 8012606:	4d07      	ldr	r5, [pc, #28]	; (8012624 <_kill_r+0x20>)
 8012608:	2300      	movs	r3, #0
 801260a:	4604      	mov	r4, r0
 801260c:	4608      	mov	r0, r1
 801260e:	4611      	mov	r1, r2
 8012610:	602b      	str	r3, [r5, #0]
 8012612:	f7f1 fda3 	bl	800415c <_kill>
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	d102      	bne.n	8012620 <_kill_r+0x1c>
 801261a:	682b      	ldr	r3, [r5, #0]
 801261c:	b103      	cbz	r3, 8012620 <_kill_r+0x1c>
 801261e:	6023      	str	r3, [r4, #0]
 8012620:	bd38      	pop	{r3, r4, r5, pc}
 8012622:	bf00      	nop
 8012624:	20001540 	.word	0x20001540

08012628 <_getpid_r>:
 8012628:	f7f1 bd90 	b.w	800414c <_getpid>

0801262c <__sread>:
 801262c:	b510      	push	{r4, lr}
 801262e:	460c      	mov	r4, r1
 8012630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012634:	f000 f894 	bl	8012760 <_read_r>
 8012638:	2800      	cmp	r0, #0
 801263a:	bfab      	itete	ge
 801263c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801263e:	89a3      	ldrhlt	r3, [r4, #12]
 8012640:	181b      	addge	r3, r3, r0
 8012642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012646:	bfac      	ite	ge
 8012648:	6563      	strge	r3, [r4, #84]	; 0x54
 801264a:	81a3      	strhlt	r3, [r4, #12]
 801264c:	bd10      	pop	{r4, pc}

0801264e <__swrite>:
 801264e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012652:	461f      	mov	r7, r3
 8012654:	898b      	ldrh	r3, [r1, #12]
 8012656:	05db      	lsls	r3, r3, #23
 8012658:	4605      	mov	r5, r0
 801265a:	460c      	mov	r4, r1
 801265c:	4616      	mov	r6, r2
 801265e:	d505      	bpl.n	801266c <__swrite+0x1e>
 8012660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012664:	2302      	movs	r3, #2
 8012666:	2200      	movs	r2, #0
 8012668:	f000 f868 	bl	801273c <_lseek_r>
 801266c:	89a3      	ldrh	r3, [r4, #12]
 801266e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012676:	81a3      	strh	r3, [r4, #12]
 8012678:	4632      	mov	r2, r6
 801267a:	463b      	mov	r3, r7
 801267c:	4628      	mov	r0, r5
 801267e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012682:	f000 b817 	b.w	80126b4 <_write_r>

08012686 <__sseek>:
 8012686:	b510      	push	{r4, lr}
 8012688:	460c      	mov	r4, r1
 801268a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801268e:	f000 f855 	bl	801273c <_lseek_r>
 8012692:	1c43      	adds	r3, r0, #1
 8012694:	89a3      	ldrh	r3, [r4, #12]
 8012696:	bf15      	itete	ne
 8012698:	6560      	strne	r0, [r4, #84]	; 0x54
 801269a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801269e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80126a2:	81a3      	strheq	r3, [r4, #12]
 80126a4:	bf18      	it	ne
 80126a6:	81a3      	strhne	r3, [r4, #12]
 80126a8:	bd10      	pop	{r4, pc}

080126aa <__sclose>:
 80126aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ae:	f000 b813 	b.w	80126d8 <_close_r>
	...

080126b4 <_write_r>:
 80126b4:	b538      	push	{r3, r4, r5, lr}
 80126b6:	4d07      	ldr	r5, [pc, #28]	; (80126d4 <_write_r+0x20>)
 80126b8:	4604      	mov	r4, r0
 80126ba:	4608      	mov	r0, r1
 80126bc:	4611      	mov	r1, r2
 80126be:	2200      	movs	r2, #0
 80126c0:	602a      	str	r2, [r5, #0]
 80126c2:	461a      	mov	r2, r3
 80126c4:	f7f1 fd81 	bl	80041ca <_write>
 80126c8:	1c43      	adds	r3, r0, #1
 80126ca:	d102      	bne.n	80126d2 <_write_r+0x1e>
 80126cc:	682b      	ldr	r3, [r5, #0]
 80126ce:	b103      	cbz	r3, 80126d2 <_write_r+0x1e>
 80126d0:	6023      	str	r3, [r4, #0]
 80126d2:	bd38      	pop	{r3, r4, r5, pc}
 80126d4:	20001540 	.word	0x20001540

080126d8 <_close_r>:
 80126d8:	b538      	push	{r3, r4, r5, lr}
 80126da:	4d06      	ldr	r5, [pc, #24]	; (80126f4 <_close_r+0x1c>)
 80126dc:	2300      	movs	r3, #0
 80126de:	4604      	mov	r4, r0
 80126e0:	4608      	mov	r0, r1
 80126e2:	602b      	str	r3, [r5, #0]
 80126e4:	f7f1 fd8d 	bl	8004202 <_close>
 80126e8:	1c43      	adds	r3, r0, #1
 80126ea:	d102      	bne.n	80126f2 <_close_r+0x1a>
 80126ec:	682b      	ldr	r3, [r5, #0]
 80126ee:	b103      	cbz	r3, 80126f2 <_close_r+0x1a>
 80126f0:	6023      	str	r3, [r4, #0]
 80126f2:	bd38      	pop	{r3, r4, r5, pc}
 80126f4:	20001540 	.word	0x20001540

080126f8 <_fstat_r>:
 80126f8:	b538      	push	{r3, r4, r5, lr}
 80126fa:	4d07      	ldr	r5, [pc, #28]	; (8012718 <_fstat_r+0x20>)
 80126fc:	2300      	movs	r3, #0
 80126fe:	4604      	mov	r4, r0
 8012700:	4608      	mov	r0, r1
 8012702:	4611      	mov	r1, r2
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	f7f1 fd88 	bl	800421a <_fstat>
 801270a:	1c43      	adds	r3, r0, #1
 801270c:	d102      	bne.n	8012714 <_fstat_r+0x1c>
 801270e:	682b      	ldr	r3, [r5, #0]
 8012710:	b103      	cbz	r3, 8012714 <_fstat_r+0x1c>
 8012712:	6023      	str	r3, [r4, #0]
 8012714:	bd38      	pop	{r3, r4, r5, pc}
 8012716:	bf00      	nop
 8012718:	20001540 	.word	0x20001540

0801271c <_isatty_r>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	4d06      	ldr	r5, [pc, #24]	; (8012738 <_isatty_r+0x1c>)
 8012720:	2300      	movs	r3, #0
 8012722:	4604      	mov	r4, r0
 8012724:	4608      	mov	r0, r1
 8012726:	602b      	str	r3, [r5, #0]
 8012728:	f7f1 fd87 	bl	800423a <_isatty>
 801272c:	1c43      	adds	r3, r0, #1
 801272e:	d102      	bne.n	8012736 <_isatty_r+0x1a>
 8012730:	682b      	ldr	r3, [r5, #0]
 8012732:	b103      	cbz	r3, 8012736 <_isatty_r+0x1a>
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	bd38      	pop	{r3, r4, r5, pc}
 8012738:	20001540 	.word	0x20001540

0801273c <_lseek_r>:
 801273c:	b538      	push	{r3, r4, r5, lr}
 801273e:	4d07      	ldr	r5, [pc, #28]	; (801275c <_lseek_r+0x20>)
 8012740:	4604      	mov	r4, r0
 8012742:	4608      	mov	r0, r1
 8012744:	4611      	mov	r1, r2
 8012746:	2200      	movs	r2, #0
 8012748:	602a      	str	r2, [r5, #0]
 801274a:	461a      	mov	r2, r3
 801274c:	f7f1 fd80 	bl	8004250 <_lseek>
 8012750:	1c43      	adds	r3, r0, #1
 8012752:	d102      	bne.n	801275a <_lseek_r+0x1e>
 8012754:	682b      	ldr	r3, [r5, #0]
 8012756:	b103      	cbz	r3, 801275a <_lseek_r+0x1e>
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	bd38      	pop	{r3, r4, r5, pc}
 801275c:	20001540 	.word	0x20001540

08012760 <_read_r>:
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	4d07      	ldr	r5, [pc, #28]	; (8012780 <_read_r+0x20>)
 8012764:	4604      	mov	r4, r0
 8012766:	4608      	mov	r0, r1
 8012768:	4611      	mov	r1, r2
 801276a:	2200      	movs	r2, #0
 801276c:	602a      	str	r2, [r5, #0]
 801276e:	461a      	mov	r2, r3
 8012770:	f7f1 fd0e 	bl	8004190 <_read>
 8012774:	1c43      	adds	r3, r0, #1
 8012776:	d102      	bne.n	801277e <_read_r+0x1e>
 8012778:	682b      	ldr	r3, [r5, #0]
 801277a:	b103      	cbz	r3, 801277e <_read_r+0x1e>
 801277c:	6023      	str	r3, [r4, #0]
 801277e:	bd38      	pop	{r3, r4, r5, pc}
 8012780:	20001540 	.word	0x20001540

08012784 <pow>:
 8012784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012788:	ec59 8b10 	vmov	r8, r9, d0
 801278c:	ec57 6b11 	vmov	r6, r7, d1
 8012790:	f000 f8a6 	bl	80128e0 <__ieee754_pow>
 8012794:	4b4e      	ldr	r3, [pc, #312]	; (80128d0 <pow+0x14c>)
 8012796:	f993 3000 	ldrsb.w	r3, [r3]
 801279a:	3301      	adds	r3, #1
 801279c:	ec55 4b10 	vmov	r4, r5, d0
 80127a0:	d015      	beq.n	80127ce <pow+0x4a>
 80127a2:	4632      	mov	r2, r6
 80127a4:	463b      	mov	r3, r7
 80127a6:	4630      	mov	r0, r6
 80127a8:	4639      	mov	r1, r7
 80127aa:	f7ee f9c7 	bl	8000b3c <__aeabi_dcmpun>
 80127ae:	b970      	cbnz	r0, 80127ce <pow+0x4a>
 80127b0:	4642      	mov	r2, r8
 80127b2:	464b      	mov	r3, r9
 80127b4:	4640      	mov	r0, r8
 80127b6:	4649      	mov	r1, r9
 80127b8:	f7ee f9c0 	bl	8000b3c <__aeabi_dcmpun>
 80127bc:	2200      	movs	r2, #0
 80127be:	2300      	movs	r3, #0
 80127c0:	b148      	cbz	r0, 80127d6 <pow+0x52>
 80127c2:	4630      	mov	r0, r6
 80127c4:	4639      	mov	r1, r7
 80127c6:	f7ee f987 	bl	8000ad8 <__aeabi_dcmpeq>
 80127ca:	2800      	cmp	r0, #0
 80127cc:	d17d      	bne.n	80128ca <pow+0x146>
 80127ce:	ec45 4b10 	vmov	d0, r4, r5
 80127d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127d6:	4640      	mov	r0, r8
 80127d8:	4649      	mov	r1, r9
 80127da:	f7ee f97d 	bl	8000ad8 <__aeabi_dcmpeq>
 80127de:	b1e0      	cbz	r0, 801281a <pow+0x96>
 80127e0:	2200      	movs	r2, #0
 80127e2:	2300      	movs	r3, #0
 80127e4:	4630      	mov	r0, r6
 80127e6:	4639      	mov	r1, r7
 80127e8:	f7ee f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80127ec:	2800      	cmp	r0, #0
 80127ee:	d16c      	bne.n	80128ca <pow+0x146>
 80127f0:	ec47 6b10 	vmov	d0, r6, r7
 80127f4:	f000 fe53 	bl	801349e <finite>
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d0e8      	beq.n	80127ce <pow+0x4a>
 80127fc:	2200      	movs	r2, #0
 80127fe:	2300      	movs	r3, #0
 8012800:	4630      	mov	r0, r6
 8012802:	4639      	mov	r1, r7
 8012804:	f7ee f972 	bl	8000aec <__aeabi_dcmplt>
 8012808:	2800      	cmp	r0, #0
 801280a:	d0e0      	beq.n	80127ce <pow+0x4a>
 801280c:	f7fd f8d4 	bl	800f9b8 <__errno>
 8012810:	2321      	movs	r3, #33	; 0x21
 8012812:	6003      	str	r3, [r0, #0]
 8012814:	2400      	movs	r4, #0
 8012816:	4d2f      	ldr	r5, [pc, #188]	; (80128d4 <pow+0x150>)
 8012818:	e7d9      	b.n	80127ce <pow+0x4a>
 801281a:	ec45 4b10 	vmov	d0, r4, r5
 801281e:	f000 fe3e 	bl	801349e <finite>
 8012822:	bbb8      	cbnz	r0, 8012894 <pow+0x110>
 8012824:	ec49 8b10 	vmov	d0, r8, r9
 8012828:	f000 fe39 	bl	801349e <finite>
 801282c:	b390      	cbz	r0, 8012894 <pow+0x110>
 801282e:	ec47 6b10 	vmov	d0, r6, r7
 8012832:	f000 fe34 	bl	801349e <finite>
 8012836:	b368      	cbz	r0, 8012894 <pow+0x110>
 8012838:	4622      	mov	r2, r4
 801283a:	462b      	mov	r3, r5
 801283c:	4620      	mov	r0, r4
 801283e:	4629      	mov	r1, r5
 8012840:	f7ee f97c 	bl	8000b3c <__aeabi_dcmpun>
 8012844:	b160      	cbz	r0, 8012860 <pow+0xdc>
 8012846:	f7fd f8b7 	bl	800f9b8 <__errno>
 801284a:	2321      	movs	r3, #33	; 0x21
 801284c:	6003      	str	r3, [r0, #0]
 801284e:	2200      	movs	r2, #0
 8012850:	2300      	movs	r3, #0
 8012852:	4610      	mov	r0, r2
 8012854:	4619      	mov	r1, r3
 8012856:	f7ee f801 	bl	800085c <__aeabi_ddiv>
 801285a:	4604      	mov	r4, r0
 801285c:	460d      	mov	r5, r1
 801285e:	e7b6      	b.n	80127ce <pow+0x4a>
 8012860:	f7fd f8aa 	bl	800f9b8 <__errno>
 8012864:	2322      	movs	r3, #34	; 0x22
 8012866:	6003      	str	r3, [r0, #0]
 8012868:	2200      	movs	r2, #0
 801286a:	2300      	movs	r3, #0
 801286c:	4640      	mov	r0, r8
 801286e:	4649      	mov	r1, r9
 8012870:	f7ee f93c 	bl	8000aec <__aeabi_dcmplt>
 8012874:	2400      	movs	r4, #0
 8012876:	b158      	cbz	r0, 8012890 <pow+0x10c>
 8012878:	ec47 6b10 	vmov	d0, r6, r7
 801287c:	f000 fe24 	bl	80134c8 <rint>
 8012880:	4632      	mov	r2, r6
 8012882:	ec51 0b10 	vmov	r0, r1, d0
 8012886:	463b      	mov	r3, r7
 8012888:	f7ee f926 	bl	8000ad8 <__aeabi_dcmpeq>
 801288c:	2800      	cmp	r0, #0
 801288e:	d0c2      	beq.n	8012816 <pow+0x92>
 8012890:	4d11      	ldr	r5, [pc, #68]	; (80128d8 <pow+0x154>)
 8012892:	e79c      	b.n	80127ce <pow+0x4a>
 8012894:	2200      	movs	r2, #0
 8012896:	2300      	movs	r3, #0
 8012898:	4620      	mov	r0, r4
 801289a:	4629      	mov	r1, r5
 801289c:	f7ee f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80128a0:	2800      	cmp	r0, #0
 80128a2:	d094      	beq.n	80127ce <pow+0x4a>
 80128a4:	ec49 8b10 	vmov	d0, r8, r9
 80128a8:	f000 fdf9 	bl	801349e <finite>
 80128ac:	2800      	cmp	r0, #0
 80128ae:	d08e      	beq.n	80127ce <pow+0x4a>
 80128b0:	ec47 6b10 	vmov	d0, r6, r7
 80128b4:	f000 fdf3 	bl	801349e <finite>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d088      	beq.n	80127ce <pow+0x4a>
 80128bc:	f7fd f87c 	bl	800f9b8 <__errno>
 80128c0:	2322      	movs	r3, #34	; 0x22
 80128c2:	6003      	str	r3, [r0, #0]
 80128c4:	2400      	movs	r4, #0
 80128c6:	2500      	movs	r5, #0
 80128c8:	e781      	b.n	80127ce <pow+0x4a>
 80128ca:	4d04      	ldr	r5, [pc, #16]	; (80128dc <pow+0x158>)
 80128cc:	2400      	movs	r4, #0
 80128ce:	e77e      	b.n	80127ce <pow+0x4a>
 80128d0:	200002d4 	.word	0x200002d4
 80128d4:	fff00000 	.word	0xfff00000
 80128d8:	7ff00000 	.word	0x7ff00000
 80128dc:	3ff00000 	.word	0x3ff00000

080128e0 <__ieee754_pow>:
 80128e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e4:	ed2d 8b06 	vpush	{d8-d10}
 80128e8:	b08d      	sub	sp, #52	; 0x34
 80128ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 80128ee:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80128f2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80128f6:	ea56 0100 	orrs.w	r1, r6, r0
 80128fa:	ec53 2b10 	vmov	r2, r3, d0
 80128fe:	f000 84d1 	beq.w	80132a4 <__ieee754_pow+0x9c4>
 8012902:	497f      	ldr	r1, [pc, #508]	; (8012b00 <__ieee754_pow+0x220>)
 8012904:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012908:	428c      	cmp	r4, r1
 801290a:	ee10 8a10 	vmov	r8, s0
 801290e:	4699      	mov	r9, r3
 8012910:	dc09      	bgt.n	8012926 <__ieee754_pow+0x46>
 8012912:	d103      	bne.n	801291c <__ieee754_pow+0x3c>
 8012914:	b97a      	cbnz	r2, 8012936 <__ieee754_pow+0x56>
 8012916:	42a6      	cmp	r6, r4
 8012918:	dd02      	ble.n	8012920 <__ieee754_pow+0x40>
 801291a:	e00c      	b.n	8012936 <__ieee754_pow+0x56>
 801291c:	428e      	cmp	r6, r1
 801291e:	dc02      	bgt.n	8012926 <__ieee754_pow+0x46>
 8012920:	428e      	cmp	r6, r1
 8012922:	d110      	bne.n	8012946 <__ieee754_pow+0x66>
 8012924:	b178      	cbz	r0, 8012946 <__ieee754_pow+0x66>
 8012926:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801292a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801292e:	ea54 0308 	orrs.w	r3, r4, r8
 8012932:	f000 84b7 	beq.w	80132a4 <__ieee754_pow+0x9c4>
 8012936:	4873      	ldr	r0, [pc, #460]	; (8012b04 <__ieee754_pow+0x224>)
 8012938:	b00d      	add	sp, #52	; 0x34
 801293a:	ecbd 8b06 	vpop	{d8-d10}
 801293e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012942:	f000 bdb9 	b.w	80134b8 <nan>
 8012946:	f1b9 0f00 	cmp.w	r9, #0
 801294a:	da36      	bge.n	80129ba <__ieee754_pow+0xda>
 801294c:	496e      	ldr	r1, [pc, #440]	; (8012b08 <__ieee754_pow+0x228>)
 801294e:	428e      	cmp	r6, r1
 8012950:	dc51      	bgt.n	80129f6 <__ieee754_pow+0x116>
 8012952:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8012956:	428e      	cmp	r6, r1
 8012958:	f340 84af 	ble.w	80132ba <__ieee754_pow+0x9da>
 801295c:	1531      	asrs	r1, r6, #20
 801295e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012962:	2914      	cmp	r1, #20
 8012964:	dd0f      	ble.n	8012986 <__ieee754_pow+0xa6>
 8012966:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801296a:	fa20 fc01 	lsr.w	ip, r0, r1
 801296e:	fa0c f101 	lsl.w	r1, ip, r1
 8012972:	4281      	cmp	r1, r0
 8012974:	f040 84a1 	bne.w	80132ba <__ieee754_pow+0x9da>
 8012978:	f00c 0c01 	and.w	ip, ip, #1
 801297c:	f1cc 0102 	rsb	r1, ip, #2
 8012980:	9100      	str	r1, [sp, #0]
 8012982:	b180      	cbz	r0, 80129a6 <__ieee754_pow+0xc6>
 8012984:	e059      	b.n	8012a3a <__ieee754_pow+0x15a>
 8012986:	2800      	cmp	r0, #0
 8012988:	d155      	bne.n	8012a36 <__ieee754_pow+0x156>
 801298a:	f1c1 0114 	rsb	r1, r1, #20
 801298e:	fa46 fc01 	asr.w	ip, r6, r1
 8012992:	fa0c f101 	lsl.w	r1, ip, r1
 8012996:	42b1      	cmp	r1, r6
 8012998:	f040 848c 	bne.w	80132b4 <__ieee754_pow+0x9d4>
 801299c:	f00c 0c01 	and.w	ip, ip, #1
 80129a0:	f1cc 0102 	rsb	r1, ip, #2
 80129a4:	9100      	str	r1, [sp, #0]
 80129a6:	4959      	ldr	r1, [pc, #356]	; (8012b0c <__ieee754_pow+0x22c>)
 80129a8:	428e      	cmp	r6, r1
 80129aa:	d12d      	bne.n	8012a08 <__ieee754_pow+0x128>
 80129ac:	2f00      	cmp	r7, #0
 80129ae:	da79      	bge.n	8012aa4 <__ieee754_pow+0x1c4>
 80129b0:	4956      	ldr	r1, [pc, #344]	; (8012b0c <__ieee754_pow+0x22c>)
 80129b2:	2000      	movs	r0, #0
 80129b4:	f7ed ff52 	bl	800085c <__aeabi_ddiv>
 80129b8:	e016      	b.n	80129e8 <__ieee754_pow+0x108>
 80129ba:	2100      	movs	r1, #0
 80129bc:	9100      	str	r1, [sp, #0]
 80129be:	2800      	cmp	r0, #0
 80129c0:	d13b      	bne.n	8012a3a <__ieee754_pow+0x15a>
 80129c2:	494f      	ldr	r1, [pc, #316]	; (8012b00 <__ieee754_pow+0x220>)
 80129c4:	428e      	cmp	r6, r1
 80129c6:	d1ee      	bne.n	80129a6 <__ieee754_pow+0xc6>
 80129c8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80129cc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80129d0:	ea53 0308 	orrs.w	r3, r3, r8
 80129d4:	f000 8466 	beq.w	80132a4 <__ieee754_pow+0x9c4>
 80129d8:	4b4d      	ldr	r3, [pc, #308]	; (8012b10 <__ieee754_pow+0x230>)
 80129da:	429c      	cmp	r4, r3
 80129dc:	dd0d      	ble.n	80129fa <__ieee754_pow+0x11a>
 80129de:	2f00      	cmp	r7, #0
 80129e0:	f280 8464 	bge.w	80132ac <__ieee754_pow+0x9cc>
 80129e4:	2000      	movs	r0, #0
 80129e6:	2100      	movs	r1, #0
 80129e8:	ec41 0b10 	vmov	d0, r0, r1
 80129ec:	b00d      	add	sp, #52	; 0x34
 80129ee:	ecbd 8b06 	vpop	{d8-d10}
 80129f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f6:	2102      	movs	r1, #2
 80129f8:	e7e0      	b.n	80129bc <__ieee754_pow+0xdc>
 80129fa:	2f00      	cmp	r7, #0
 80129fc:	daf2      	bge.n	80129e4 <__ieee754_pow+0x104>
 80129fe:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8012a02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012a06:	e7ef      	b.n	80129e8 <__ieee754_pow+0x108>
 8012a08:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8012a0c:	d104      	bne.n	8012a18 <__ieee754_pow+0x138>
 8012a0e:	4610      	mov	r0, r2
 8012a10:	4619      	mov	r1, r3
 8012a12:	f7ed fdf9 	bl	8000608 <__aeabi_dmul>
 8012a16:	e7e7      	b.n	80129e8 <__ieee754_pow+0x108>
 8012a18:	493e      	ldr	r1, [pc, #248]	; (8012b14 <__ieee754_pow+0x234>)
 8012a1a:	428f      	cmp	r7, r1
 8012a1c:	d10d      	bne.n	8012a3a <__ieee754_pow+0x15a>
 8012a1e:	f1b9 0f00 	cmp.w	r9, #0
 8012a22:	db0a      	blt.n	8012a3a <__ieee754_pow+0x15a>
 8012a24:	ec43 2b10 	vmov	d0, r2, r3
 8012a28:	b00d      	add	sp, #52	; 0x34
 8012a2a:	ecbd 8b06 	vpop	{d8-d10}
 8012a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a32:	f000 bc77 	b.w	8013324 <__ieee754_sqrt>
 8012a36:	2100      	movs	r1, #0
 8012a38:	9100      	str	r1, [sp, #0]
 8012a3a:	ec43 2b10 	vmov	d0, r2, r3
 8012a3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012a42:	f000 fd23 	bl	801348c <fabs>
 8012a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a4a:	ec51 0b10 	vmov	r0, r1, d0
 8012a4e:	f1b8 0f00 	cmp.w	r8, #0
 8012a52:	d12a      	bne.n	8012aaa <__ieee754_pow+0x1ca>
 8012a54:	b12c      	cbz	r4, 8012a62 <__ieee754_pow+0x182>
 8012a56:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8012b0c <__ieee754_pow+0x22c>
 8012a5a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8012a5e:	45e6      	cmp	lr, ip
 8012a60:	d123      	bne.n	8012aaa <__ieee754_pow+0x1ca>
 8012a62:	2f00      	cmp	r7, #0
 8012a64:	da05      	bge.n	8012a72 <__ieee754_pow+0x192>
 8012a66:	4602      	mov	r2, r0
 8012a68:	460b      	mov	r3, r1
 8012a6a:	2000      	movs	r0, #0
 8012a6c:	4927      	ldr	r1, [pc, #156]	; (8012b0c <__ieee754_pow+0x22c>)
 8012a6e:	f7ed fef5 	bl	800085c <__aeabi_ddiv>
 8012a72:	f1b9 0f00 	cmp.w	r9, #0
 8012a76:	dab7      	bge.n	80129e8 <__ieee754_pow+0x108>
 8012a78:	9b00      	ldr	r3, [sp, #0]
 8012a7a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012a7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012a82:	4323      	orrs	r3, r4
 8012a84:	d108      	bne.n	8012a98 <__ieee754_pow+0x1b8>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	4610      	mov	r0, r2
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	f7ed fc03 	bl	8000298 <__aeabi_dsub>
 8012a92:	4602      	mov	r2, r0
 8012a94:	460b      	mov	r3, r1
 8012a96:	e78d      	b.n	80129b4 <__ieee754_pow+0xd4>
 8012a98:	9b00      	ldr	r3, [sp, #0]
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d1a4      	bne.n	80129e8 <__ieee754_pow+0x108>
 8012a9e:	4602      	mov	r2, r0
 8012aa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012aa4:	4610      	mov	r0, r2
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	e79e      	b.n	80129e8 <__ieee754_pow+0x108>
 8012aaa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8012aae:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8012ab2:	950a      	str	r5, [sp, #40]	; 0x28
 8012ab4:	9d00      	ldr	r5, [sp, #0]
 8012ab6:	46ac      	mov	ip, r5
 8012ab8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8012aba:	ea5c 0505 	orrs.w	r5, ip, r5
 8012abe:	d0e4      	beq.n	8012a8a <__ieee754_pow+0x1aa>
 8012ac0:	4b15      	ldr	r3, [pc, #84]	; (8012b18 <__ieee754_pow+0x238>)
 8012ac2:	429e      	cmp	r6, r3
 8012ac4:	f340 80fc 	ble.w	8012cc0 <__ieee754_pow+0x3e0>
 8012ac8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012acc:	429e      	cmp	r6, r3
 8012ace:	4b10      	ldr	r3, [pc, #64]	; (8012b10 <__ieee754_pow+0x230>)
 8012ad0:	dd07      	ble.n	8012ae2 <__ieee754_pow+0x202>
 8012ad2:	429c      	cmp	r4, r3
 8012ad4:	dc0a      	bgt.n	8012aec <__ieee754_pow+0x20c>
 8012ad6:	2f00      	cmp	r7, #0
 8012ad8:	da84      	bge.n	80129e4 <__ieee754_pow+0x104>
 8012ada:	a307      	add	r3, pc, #28	; (adr r3, 8012af8 <__ieee754_pow+0x218>)
 8012adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae0:	e795      	b.n	8012a0e <__ieee754_pow+0x12e>
 8012ae2:	429c      	cmp	r4, r3
 8012ae4:	dbf7      	blt.n	8012ad6 <__ieee754_pow+0x1f6>
 8012ae6:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <__ieee754_pow+0x22c>)
 8012ae8:	429c      	cmp	r4, r3
 8012aea:	dd17      	ble.n	8012b1c <__ieee754_pow+0x23c>
 8012aec:	2f00      	cmp	r7, #0
 8012aee:	dcf4      	bgt.n	8012ada <__ieee754_pow+0x1fa>
 8012af0:	e778      	b.n	80129e4 <__ieee754_pow+0x104>
 8012af2:	bf00      	nop
 8012af4:	f3af 8000 	nop.w
 8012af8:	8800759c 	.word	0x8800759c
 8012afc:	7e37e43c 	.word	0x7e37e43c
 8012b00:	7ff00000 	.word	0x7ff00000
 8012b04:	08014350 	.word	0x08014350
 8012b08:	433fffff 	.word	0x433fffff
 8012b0c:	3ff00000 	.word	0x3ff00000
 8012b10:	3fefffff 	.word	0x3fefffff
 8012b14:	3fe00000 	.word	0x3fe00000
 8012b18:	41e00000 	.word	0x41e00000
 8012b1c:	4b64      	ldr	r3, [pc, #400]	; (8012cb0 <__ieee754_pow+0x3d0>)
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f7ed fbba 	bl	8000298 <__aeabi_dsub>
 8012b24:	a356      	add	r3, pc, #344	; (adr r3, 8012c80 <__ieee754_pow+0x3a0>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	460d      	mov	r5, r1
 8012b2e:	f7ed fd6b 	bl	8000608 <__aeabi_dmul>
 8012b32:	a355      	add	r3, pc, #340	; (adr r3, 8012c88 <__ieee754_pow+0x3a8>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	4606      	mov	r6, r0
 8012b3a:	460f      	mov	r7, r1
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	4629      	mov	r1, r5
 8012b40:	f7ed fd62 	bl	8000608 <__aeabi_dmul>
 8012b44:	4b5b      	ldr	r3, [pc, #364]	; (8012cb4 <__ieee754_pow+0x3d4>)
 8012b46:	4682      	mov	sl, r0
 8012b48:	468b      	mov	fp, r1
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	4629      	mov	r1, r5
 8012b50:	f7ed fd5a 	bl	8000608 <__aeabi_dmul>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	a14d      	add	r1, pc, #308	; (adr r1, 8012c90 <__ieee754_pow+0x3b0>)
 8012b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b5e:	f7ed fb9b 	bl	8000298 <__aeabi_dsub>
 8012b62:	4622      	mov	r2, r4
 8012b64:	462b      	mov	r3, r5
 8012b66:	f7ed fd4f 	bl	8000608 <__aeabi_dmul>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	2000      	movs	r0, #0
 8012b70:	4951      	ldr	r1, [pc, #324]	; (8012cb8 <__ieee754_pow+0x3d8>)
 8012b72:	f7ed fb91 	bl	8000298 <__aeabi_dsub>
 8012b76:	4622      	mov	r2, r4
 8012b78:	4680      	mov	r8, r0
 8012b7a:	4689      	mov	r9, r1
 8012b7c:	462b      	mov	r3, r5
 8012b7e:	4620      	mov	r0, r4
 8012b80:	4629      	mov	r1, r5
 8012b82:	f7ed fd41 	bl	8000608 <__aeabi_dmul>
 8012b86:	4602      	mov	r2, r0
 8012b88:	460b      	mov	r3, r1
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	4649      	mov	r1, r9
 8012b8e:	f7ed fd3b 	bl	8000608 <__aeabi_dmul>
 8012b92:	a341      	add	r3, pc, #260	; (adr r3, 8012c98 <__ieee754_pow+0x3b8>)
 8012b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b98:	f7ed fd36 	bl	8000608 <__aeabi_dmul>
 8012b9c:	4602      	mov	r2, r0
 8012b9e:	460b      	mov	r3, r1
 8012ba0:	4650      	mov	r0, sl
 8012ba2:	4659      	mov	r1, fp
 8012ba4:	f7ed fb78 	bl	8000298 <__aeabi_dsub>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	460b      	mov	r3, r1
 8012bac:	4680      	mov	r8, r0
 8012bae:	4689      	mov	r9, r1
 8012bb0:	4630      	mov	r0, r6
 8012bb2:	4639      	mov	r1, r7
 8012bb4:	f7ed fb72 	bl	800029c <__adddf3>
 8012bb8:	2400      	movs	r4, #0
 8012bba:	4632      	mov	r2, r6
 8012bbc:	463b      	mov	r3, r7
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	460d      	mov	r5, r1
 8012bc2:	f7ed fb69 	bl	8000298 <__aeabi_dsub>
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	460b      	mov	r3, r1
 8012bca:	4640      	mov	r0, r8
 8012bcc:	4649      	mov	r1, r9
 8012bce:	f7ed fb63 	bl	8000298 <__aeabi_dsub>
 8012bd2:	9b00      	ldr	r3, [sp, #0]
 8012bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	4313      	orrs	r3, r2
 8012bda:	4682      	mov	sl, r0
 8012bdc:	468b      	mov	fp, r1
 8012bde:	f040 81f1 	bne.w	8012fc4 <__ieee754_pow+0x6e4>
 8012be2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012ca0 <__ieee754_pow+0x3c0>
 8012be6:	eeb0 8a47 	vmov.f32	s16, s14
 8012bea:	eef0 8a67 	vmov.f32	s17, s15
 8012bee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012bf2:	2600      	movs	r6, #0
 8012bf4:	4632      	mov	r2, r6
 8012bf6:	463b      	mov	r3, r7
 8012bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012bfc:	f7ed fb4c 	bl	8000298 <__aeabi_dsub>
 8012c00:	4622      	mov	r2, r4
 8012c02:	462b      	mov	r3, r5
 8012c04:	f7ed fd00 	bl	8000608 <__aeabi_dmul>
 8012c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c0c:	4680      	mov	r8, r0
 8012c0e:	4689      	mov	r9, r1
 8012c10:	4650      	mov	r0, sl
 8012c12:	4659      	mov	r1, fp
 8012c14:	f7ed fcf8 	bl	8000608 <__aeabi_dmul>
 8012c18:	4602      	mov	r2, r0
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	4640      	mov	r0, r8
 8012c1e:	4649      	mov	r1, r9
 8012c20:	f7ed fb3c 	bl	800029c <__adddf3>
 8012c24:	4632      	mov	r2, r6
 8012c26:	463b      	mov	r3, r7
 8012c28:	4680      	mov	r8, r0
 8012c2a:	4689      	mov	r9, r1
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	4629      	mov	r1, r5
 8012c30:	f7ed fcea 	bl	8000608 <__aeabi_dmul>
 8012c34:	460b      	mov	r3, r1
 8012c36:	4604      	mov	r4, r0
 8012c38:	460d      	mov	r5, r1
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	4649      	mov	r1, r9
 8012c3e:	4640      	mov	r0, r8
 8012c40:	f7ed fb2c 	bl	800029c <__adddf3>
 8012c44:	4b1d      	ldr	r3, [pc, #116]	; (8012cbc <__ieee754_pow+0x3dc>)
 8012c46:	4299      	cmp	r1, r3
 8012c48:	ec45 4b19 	vmov	d9, r4, r5
 8012c4c:	4606      	mov	r6, r0
 8012c4e:	460f      	mov	r7, r1
 8012c50:	468b      	mov	fp, r1
 8012c52:	f340 82fe 	ble.w	8013252 <__ieee754_pow+0x972>
 8012c56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012c5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012c5e:	4303      	orrs	r3, r0
 8012c60:	f000 81f0 	beq.w	8013044 <__ieee754_pow+0x764>
 8012c64:	a310      	add	r3, pc, #64	; (adr r3, 8012ca8 <__ieee754_pow+0x3c8>)
 8012c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6a:	ec51 0b18 	vmov	r0, r1, d8
 8012c6e:	f7ed fccb 	bl	8000608 <__aeabi_dmul>
 8012c72:	a30d      	add	r3, pc, #52	; (adr r3, 8012ca8 <__ieee754_pow+0x3c8>)
 8012c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c78:	e6cb      	b.n	8012a12 <__ieee754_pow+0x132>
 8012c7a:	bf00      	nop
 8012c7c:	f3af 8000 	nop.w
 8012c80:	60000000 	.word	0x60000000
 8012c84:	3ff71547 	.word	0x3ff71547
 8012c88:	f85ddf44 	.word	0xf85ddf44
 8012c8c:	3e54ae0b 	.word	0x3e54ae0b
 8012c90:	55555555 	.word	0x55555555
 8012c94:	3fd55555 	.word	0x3fd55555
 8012c98:	652b82fe 	.word	0x652b82fe
 8012c9c:	3ff71547 	.word	0x3ff71547
 8012ca0:	00000000 	.word	0x00000000
 8012ca4:	bff00000 	.word	0xbff00000
 8012ca8:	8800759c 	.word	0x8800759c
 8012cac:	7e37e43c 	.word	0x7e37e43c
 8012cb0:	3ff00000 	.word	0x3ff00000
 8012cb4:	3fd00000 	.word	0x3fd00000
 8012cb8:	3fe00000 	.word	0x3fe00000
 8012cbc:	408fffff 	.word	0x408fffff
 8012cc0:	4bd7      	ldr	r3, [pc, #860]	; (8013020 <__ieee754_pow+0x740>)
 8012cc2:	ea03 0309 	and.w	r3, r3, r9
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	b92b      	cbnz	r3, 8012cd6 <__ieee754_pow+0x3f6>
 8012cca:	4bd6      	ldr	r3, [pc, #856]	; (8013024 <__ieee754_pow+0x744>)
 8012ccc:	f7ed fc9c 	bl	8000608 <__aeabi_dmul>
 8012cd0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012cd4:	460c      	mov	r4, r1
 8012cd6:	1523      	asrs	r3, r4, #20
 8012cd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012cdc:	4413      	add	r3, r2
 8012cde:	9309      	str	r3, [sp, #36]	; 0x24
 8012ce0:	4bd1      	ldr	r3, [pc, #836]	; (8013028 <__ieee754_pow+0x748>)
 8012ce2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012ce6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012cea:	429c      	cmp	r4, r3
 8012cec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012cf0:	dd08      	ble.n	8012d04 <__ieee754_pow+0x424>
 8012cf2:	4bce      	ldr	r3, [pc, #824]	; (801302c <__ieee754_pow+0x74c>)
 8012cf4:	429c      	cmp	r4, r3
 8012cf6:	f340 8163 	ble.w	8012fc0 <__ieee754_pow+0x6e0>
 8012cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8012d00:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012d04:	2400      	movs	r4, #0
 8012d06:	00e3      	lsls	r3, r4, #3
 8012d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d0a:	4bc9      	ldr	r3, [pc, #804]	; (8013030 <__ieee754_pow+0x750>)
 8012d0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012d10:	ed93 7b00 	vldr	d7, [r3]
 8012d14:	4629      	mov	r1, r5
 8012d16:	ec53 2b17 	vmov	r2, r3, d7
 8012d1a:	eeb0 8a47 	vmov.f32	s16, s14
 8012d1e:	eef0 8a67 	vmov.f32	s17, s15
 8012d22:	4682      	mov	sl, r0
 8012d24:	f7ed fab8 	bl	8000298 <__aeabi_dsub>
 8012d28:	4652      	mov	r2, sl
 8012d2a:	4606      	mov	r6, r0
 8012d2c:	460f      	mov	r7, r1
 8012d2e:	462b      	mov	r3, r5
 8012d30:	ec51 0b18 	vmov	r0, r1, d8
 8012d34:	f7ed fab2 	bl	800029c <__adddf3>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	49bd      	ldr	r1, [pc, #756]	; (8013034 <__ieee754_pow+0x754>)
 8012d40:	f7ed fd8c 	bl	800085c <__aeabi_ddiv>
 8012d44:	ec41 0b19 	vmov	d9, r0, r1
 8012d48:	4602      	mov	r2, r0
 8012d4a:	460b      	mov	r3, r1
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	4639      	mov	r1, r7
 8012d50:	f7ed fc5a 	bl	8000608 <__aeabi_dmul>
 8012d54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012d5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012d60:	2300      	movs	r3, #0
 8012d62:	9304      	str	r3, [sp, #16]
 8012d64:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012d68:	46ab      	mov	fp, r5
 8012d6a:	106d      	asrs	r5, r5, #1
 8012d6c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012d70:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012d74:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012d78:	2200      	movs	r2, #0
 8012d7a:	4640      	mov	r0, r8
 8012d7c:	4649      	mov	r1, r9
 8012d7e:	4614      	mov	r4, r2
 8012d80:	461d      	mov	r5, r3
 8012d82:	f7ed fc41 	bl	8000608 <__aeabi_dmul>
 8012d86:	4602      	mov	r2, r0
 8012d88:	460b      	mov	r3, r1
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	4639      	mov	r1, r7
 8012d8e:	f7ed fa83 	bl	8000298 <__aeabi_dsub>
 8012d92:	ec53 2b18 	vmov	r2, r3, d8
 8012d96:	4606      	mov	r6, r0
 8012d98:	460f      	mov	r7, r1
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	4629      	mov	r1, r5
 8012d9e:	f7ed fa7b 	bl	8000298 <__aeabi_dsub>
 8012da2:	4602      	mov	r2, r0
 8012da4:	460b      	mov	r3, r1
 8012da6:	4650      	mov	r0, sl
 8012da8:	4659      	mov	r1, fp
 8012daa:	f7ed fa75 	bl	8000298 <__aeabi_dsub>
 8012dae:	4642      	mov	r2, r8
 8012db0:	464b      	mov	r3, r9
 8012db2:	f7ed fc29 	bl	8000608 <__aeabi_dmul>
 8012db6:	4602      	mov	r2, r0
 8012db8:	460b      	mov	r3, r1
 8012dba:	4630      	mov	r0, r6
 8012dbc:	4639      	mov	r1, r7
 8012dbe:	f7ed fa6b 	bl	8000298 <__aeabi_dsub>
 8012dc2:	ec53 2b19 	vmov	r2, r3, d9
 8012dc6:	f7ed fc1f 	bl	8000608 <__aeabi_dmul>
 8012dca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012dce:	ec41 0b18 	vmov	d8, r0, r1
 8012dd2:	4610      	mov	r0, r2
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	f7ed fc17 	bl	8000608 <__aeabi_dmul>
 8012dda:	a37d      	add	r3, pc, #500	; (adr r3, 8012fd0 <__ieee754_pow+0x6f0>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	4604      	mov	r4, r0
 8012de2:	460d      	mov	r5, r1
 8012de4:	f7ed fc10 	bl	8000608 <__aeabi_dmul>
 8012de8:	a37b      	add	r3, pc, #492	; (adr r3, 8012fd8 <__ieee754_pow+0x6f8>)
 8012dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dee:	f7ed fa55 	bl	800029c <__adddf3>
 8012df2:	4622      	mov	r2, r4
 8012df4:	462b      	mov	r3, r5
 8012df6:	f7ed fc07 	bl	8000608 <__aeabi_dmul>
 8012dfa:	a379      	add	r3, pc, #484	; (adr r3, 8012fe0 <__ieee754_pow+0x700>)
 8012dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e00:	f7ed fa4c 	bl	800029c <__adddf3>
 8012e04:	4622      	mov	r2, r4
 8012e06:	462b      	mov	r3, r5
 8012e08:	f7ed fbfe 	bl	8000608 <__aeabi_dmul>
 8012e0c:	a376      	add	r3, pc, #472	; (adr r3, 8012fe8 <__ieee754_pow+0x708>)
 8012e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e12:	f7ed fa43 	bl	800029c <__adddf3>
 8012e16:	4622      	mov	r2, r4
 8012e18:	462b      	mov	r3, r5
 8012e1a:	f7ed fbf5 	bl	8000608 <__aeabi_dmul>
 8012e1e:	a374      	add	r3, pc, #464	; (adr r3, 8012ff0 <__ieee754_pow+0x710>)
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	f7ed fa3a 	bl	800029c <__adddf3>
 8012e28:	4622      	mov	r2, r4
 8012e2a:	462b      	mov	r3, r5
 8012e2c:	f7ed fbec 	bl	8000608 <__aeabi_dmul>
 8012e30:	a371      	add	r3, pc, #452	; (adr r3, 8012ff8 <__ieee754_pow+0x718>)
 8012e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e36:	f7ed fa31 	bl	800029c <__adddf3>
 8012e3a:	4622      	mov	r2, r4
 8012e3c:	4606      	mov	r6, r0
 8012e3e:	460f      	mov	r7, r1
 8012e40:	462b      	mov	r3, r5
 8012e42:	4620      	mov	r0, r4
 8012e44:	4629      	mov	r1, r5
 8012e46:	f7ed fbdf 	bl	8000608 <__aeabi_dmul>
 8012e4a:	4602      	mov	r2, r0
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	4630      	mov	r0, r6
 8012e50:	4639      	mov	r1, r7
 8012e52:	f7ed fbd9 	bl	8000608 <__aeabi_dmul>
 8012e56:	4642      	mov	r2, r8
 8012e58:	4604      	mov	r4, r0
 8012e5a:	460d      	mov	r5, r1
 8012e5c:	464b      	mov	r3, r9
 8012e5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e62:	f7ed fa1b 	bl	800029c <__adddf3>
 8012e66:	ec53 2b18 	vmov	r2, r3, d8
 8012e6a:	f7ed fbcd 	bl	8000608 <__aeabi_dmul>
 8012e6e:	4622      	mov	r2, r4
 8012e70:	462b      	mov	r3, r5
 8012e72:	f7ed fa13 	bl	800029c <__adddf3>
 8012e76:	4642      	mov	r2, r8
 8012e78:	4682      	mov	sl, r0
 8012e7a:	468b      	mov	fp, r1
 8012e7c:	464b      	mov	r3, r9
 8012e7e:	4640      	mov	r0, r8
 8012e80:	4649      	mov	r1, r9
 8012e82:	f7ed fbc1 	bl	8000608 <__aeabi_dmul>
 8012e86:	4b6c      	ldr	r3, [pc, #432]	; (8013038 <__ieee754_pow+0x758>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	4606      	mov	r6, r0
 8012e8c:	460f      	mov	r7, r1
 8012e8e:	f7ed fa05 	bl	800029c <__adddf3>
 8012e92:	4652      	mov	r2, sl
 8012e94:	465b      	mov	r3, fp
 8012e96:	f7ed fa01 	bl	800029c <__adddf3>
 8012e9a:	9c04      	ldr	r4, [sp, #16]
 8012e9c:	460d      	mov	r5, r1
 8012e9e:	4622      	mov	r2, r4
 8012ea0:	460b      	mov	r3, r1
 8012ea2:	4640      	mov	r0, r8
 8012ea4:	4649      	mov	r1, r9
 8012ea6:	f7ed fbaf 	bl	8000608 <__aeabi_dmul>
 8012eaa:	4b63      	ldr	r3, [pc, #396]	; (8013038 <__ieee754_pow+0x758>)
 8012eac:	4680      	mov	r8, r0
 8012eae:	4689      	mov	r9, r1
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	4629      	mov	r1, r5
 8012eb6:	f7ed f9ef 	bl	8000298 <__aeabi_dsub>
 8012eba:	4632      	mov	r2, r6
 8012ebc:	463b      	mov	r3, r7
 8012ebe:	f7ed f9eb 	bl	8000298 <__aeabi_dsub>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	4650      	mov	r0, sl
 8012ec8:	4659      	mov	r1, fp
 8012eca:	f7ed f9e5 	bl	8000298 <__aeabi_dsub>
 8012ece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012ed2:	f7ed fb99 	bl	8000608 <__aeabi_dmul>
 8012ed6:	4622      	mov	r2, r4
 8012ed8:	4606      	mov	r6, r0
 8012eda:	460f      	mov	r7, r1
 8012edc:	462b      	mov	r3, r5
 8012ede:	ec51 0b18 	vmov	r0, r1, d8
 8012ee2:	f7ed fb91 	bl	8000608 <__aeabi_dmul>
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	460b      	mov	r3, r1
 8012eea:	4630      	mov	r0, r6
 8012eec:	4639      	mov	r1, r7
 8012eee:	f7ed f9d5 	bl	800029c <__adddf3>
 8012ef2:	4606      	mov	r6, r0
 8012ef4:	460f      	mov	r7, r1
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	460b      	mov	r3, r1
 8012efa:	4640      	mov	r0, r8
 8012efc:	4649      	mov	r1, r9
 8012efe:	f7ed f9cd 	bl	800029c <__adddf3>
 8012f02:	9c04      	ldr	r4, [sp, #16]
 8012f04:	a33e      	add	r3, pc, #248	; (adr r3, 8013000 <__ieee754_pow+0x720>)
 8012f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	460d      	mov	r5, r1
 8012f0e:	f7ed fb7b 	bl	8000608 <__aeabi_dmul>
 8012f12:	4642      	mov	r2, r8
 8012f14:	ec41 0b18 	vmov	d8, r0, r1
 8012f18:	464b      	mov	r3, r9
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	4629      	mov	r1, r5
 8012f1e:	f7ed f9bb 	bl	8000298 <__aeabi_dsub>
 8012f22:	4602      	mov	r2, r0
 8012f24:	460b      	mov	r3, r1
 8012f26:	4630      	mov	r0, r6
 8012f28:	4639      	mov	r1, r7
 8012f2a:	f7ed f9b5 	bl	8000298 <__aeabi_dsub>
 8012f2e:	a336      	add	r3, pc, #216	; (adr r3, 8013008 <__ieee754_pow+0x728>)
 8012f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f34:	f7ed fb68 	bl	8000608 <__aeabi_dmul>
 8012f38:	a335      	add	r3, pc, #212	; (adr r3, 8013010 <__ieee754_pow+0x730>)
 8012f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3e:	4606      	mov	r6, r0
 8012f40:	460f      	mov	r7, r1
 8012f42:	4620      	mov	r0, r4
 8012f44:	4629      	mov	r1, r5
 8012f46:	f7ed fb5f 	bl	8000608 <__aeabi_dmul>
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	4630      	mov	r0, r6
 8012f50:	4639      	mov	r1, r7
 8012f52:	f7ed f9a3 	bl	800029c <__adddf3>
 8012f56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f58:	4b38      	ldr	r3, [pc, #224]	; (801303c <__ieee754_pow+0x75c>)
 8012f5a:	4413      	add	r3, r2
 8012f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f60:	f7ed f99c 	bl	800029c <__adddf3>
 8012f64:	4682      	mov	sl, r0
 8012f66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f68:	468b      	mov	fp, r1
 8012f6a:	f7ed fae3 	bl	8000534 <__aeabi_i2d>
 8012f6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012f70:	4b33      	ldr	r3, [pc, #204]	; (8013040 <__ieee754_pow+0x760>)
 8012f72:	4413      	add	r3, r2
 8012f74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012f78:	4606      	mov	r6, r0
 8012f7a:	460f      	mov	r7, r1
 8012f7c:	4652      	mov	r2, sl
 8012f7e:	465b      	mov	r3, fp
 8012f80:	ec51 0b18 	vmov	r0, r1, d8
 8012f84:	f7ed f98a 	bl	800029c <__adddf3>
 8012f88:	4642      	mov	r2, r8
 8012f8a:	464b      	mov	r3, r9
 8012f8c:	f7ed f986 	bl	800029c <__adddf3>
 8012f90:	4632      	mov	r2, r6
 8012f92:	463b      	mov	r3, r7
 8012f94:	f7ed f982 	bl	800029c <__adddf3>
 8012f98:	9c04      	ldr	r4, [sp, #16]
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	463b      	mov	r3, r7
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	f7ed f979 	bl	8000298 <__aeabi_dsub>
 8012fa6:	4642      	mov	r2, r8
 8012fa8:	464b      	mov	r3, r9
 8012faa:	f7ed f975 	bl	8000298 <__aeabi_dsub>
 8012fae:	ec53 2b18 	vmov	r2, r3, d8
 8012fb2:	f7ed f971 	bl	8000298 <__aeabi_dsub>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	4650      	mov	r0, sl
 8012fbc:	4659      	mov	r1, fp
 8012fbe:	e606      	b.n	8012bce <__ieee754_pow+0x2ee>
 8012fc0:	2401      	movs	r4, #1
 8012fc2:	e6a0      	b.n	8012d06 <__ieee754_pow+0x426>
 8012fc4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013018 <__ieee754_pow+0x738>
 8012fc8:	e60d      	b.n	8012be6 <__ieee754_pow+0x306>
 8012fca:	bf00      	nop
 8012fcc:	f3af 8000 	nop.w
 8012fd0:	4a454eef 	.word	0x4a454eef
 8012fd4:	3fca7e28 	.word	0x3fca7e28
 8012fd8:	93c9db65 	.word	0x93c9db65
 8012fdc:	3fcd864a 	.word	0x3fcd864a
 8012fe0:	a91d4101 	.word	0xa91d4101
 8012fe4:	3fd17460 	.word	0x3fd17460
 8012fe8:	518f264d 	.word	0x518f264d
 8012fec:	3fd55555 	.word	0x3fd55555
 8012ff0:	db6fabff 	.word	0xdb6fabff
 8012ff4:	3fdb6db6 	.word	0x3fdb6db6
 8012ff8:	33333303 	.word	0x33333303
 8012ffc:	3fe33333 	.word	0x3fe33333
 8013000:	e0000000 	.word	0xe0000000
 8013004:	3feec709 	.word	0x3feec709
 8013008:	dc3a03fd 	.word	0xdc3a03fd
 801300c:	3feec709 	.word	0x3feec709
 8013010:	145b01f5 	.word	0x145b01f5
 8013014:	be3e2fe0 	.word	0xbe3e2fe0
 8013018:	00000000 	.word	0x00000000
 801301c:	3ff00000 	.word	0x3ff00000
 8013020:	7ff00000 	.word	0x7ff00000
 8013024:	43400000 	.word	0x43400000
 8013028:	0003988e 	.word	0x0003988e
 801302c:	000bb679 	.word	0x000bb679
 8013030:	080143c0 	.word	0x080143c0
 8013034:	3ff00000 	.word	0x3ff00000
 8013038:	40080000 	.word	0x40080000
 801303c:	080143e0 	.word	0x080143e0
 8013040:	080143d0 	.word	0x080143d0
 8013044:	a3b5      	add	r3, pc, #724	; (adr r3, 801331c <__ieee754_pow+0xa3c>)
 8013046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304a:	4640      	mov	r0, r8
 801304c:	4649      	mov	r1, r9
 801304e:	f7ed f925 	bl	800029c <__adddf3>
 8013052:	4622      	mov	r2, r4
 8013054:	ec41 0b1a 	vmov	d10, r0, r1
 8013058:	462b      	mov	r3, r5
 801305a:	4630      	mov	r0, r6
 801305c:	4639      	mov	r1, r7
 801305e:	f7ed f91b 	bl	8000298 <__aeabi_dsub>
 8013062:	4602      	mov	r2, r0
 8013064:	460b      	mov	r3, r1
 8013066:	ec51 0b1a 	vmov	r0, r1, d10
 801306a:	f7ed fd5d 	bl	8000b28 <__aeabi_dcmpgt>
 801306e:	2800      	cmp	r0, #0
 8013070:	f47f adf8 	bne.w	8012c64 <__ieee754_pow+0x384>
 8013074:	4aa4      	ldr	r2, [pc, #656]	; (8013308 <__ieee754_pow+0xa28>)
 8013076:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801307a:	4293      	cmp	r3, r2
 801307c:	f340 810b 	ble.w	8013296 <__ieee754_pow+0x9b6>
 8013080:	151b      	asrs	r3, r3, #20
 8013082:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013086:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801308a:	fa4a f303 	asr.w	r3, sl, r3
 801308e:	445b      	add	r3, fp
 8013090:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013094:	4e9d      	ldr	r6, [pc, #628]	; (801330c <__ieee754_pow+0xa2c>)
 8013096:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801309a:	4116      	asrs	r6, r2
 801309c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80130a0:	2000      	movs	r0, #0
 80130a2:	ea23 0106 	bic.w	r1, r3, r6
 80130a6:	f1c2 0214 	rsb	r2, r2, #20
 80130aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80130ae:	fa4a fa02 	asr.w	sl, sl, r2
 80130b2:	f1bb 0f00 	cmp.w	fp, #0
 80130b6:	4602      	mov	r2, r0
 80130b8:	460b      	mov	r3, r1
 80130ba:	4620      	mov	r0, r4
 80130bc:	4629      	mov	r1, r5
 80130be:	bfb8      	it	lt
 80130c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80130c4:	f7ed f8e8 	bl	8000298 <__aeabi_dsub>
 80130c8:	ec41 0b19 	vmov	d9, r0, r1
 80130cc:	4642      	mov	r2, r8
 80130ce:	464b      	mov	r3, r9
 80130d0:	ec51 0b19 	vmov	r0, r1, d9
 80130d4:	f7ed f8e2 	bl	800029c <__adddf3>
 80130d8:	2400      	movs	r4, #0
 80130da:	a379      	add	r3, pc, #484	; (adr r3, 80132c0 <__ieee754_pow+0x9e0>)
 80130dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e0:	4620      	mov	r0, r4
 80130e2:	460d      	mov	r5, r1
 80130e4:	f7ed fa90 	bl	8000608 <__aeabi_dmul>
 80130e8:	ec53 2b19 	vmov	r2, r3, d9
 80130ec:	4606      	mov	r6, r0
 80130ee:	460f      	mov	r7, r1
 80130f0:	4620      	mov	r0, r4
 80130f2:	4629      	mov	r1, r5
 80130f4:	f7ed f8d0 	bl	8000298 <__aeabi_dsub>
 80130f8:	4602      	mov	r2, r0
 80130fa:	460b      	mov	r3, r1
 80130fc:	4640      	mov	r0, r8
 80130fe:	4649      	mov	r1, r9
 8013100:	f7ed f8ca 	bl	8000298 <__aeabi_dsub>
 8013104:	a370      	add	r3, pc, #448	; (adr r3, 80132c8 <__ieee754_pow+0x9e8>)
 8013106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310a:	f7ed fa7d 	bl	8000608 <__aeabi_dmul>
 801310e:	a370      	add	r3, pc, #448	; (adr r3, 80132d0 <__ieee754_pow+0x9f0>)
 8013110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013114:	4680      	mov	r8, r0
 8013116:	4689      	mov	r9, r1
 8013118:	4620      	mov	r0, r4
 801311a:	4629      	mov	r1, r5
 801311c:	f7ed fa74 	bl	8000608 <__aeabi_dmul>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4640      	mov	r0, r8
 8013126:	4649      	mov	r1, r9
 8013128:	f7ed f8b8 	bl	800029c <__adddf3>
 801312c:	4604      	mov	r4, r0
 801312e:	460d      	mov	r5, r1
 8013130:	4602      	mov	r2, r0
 8013132:	460b      	mov	r3, r1
 8013134:	4630      	mov	r0, r6
 8013136:	4639      	mov	r1, r7
 8013138:	f7ed f8b0 	bl	800029c <__adddf3>
 801313c:	4632      	mov	r2, r6
 801313e:	463b      	mov	r3, r7
 8013140:	4680      	mov	r8, r0
 8013142:	4689      	mov	r9, r1
 8013144:	f7ed f8a8 	bl	8000298 <__aeabi_dsub>
 8013148:	4602      	mov	r2, r0
 801314a:	460b      	mov	r3, r1
 801314c:	4620      	mov	r0, r4
 801314e:	4629      	mov	r1, r5
 8013150:	f7ed f8a2 	bl	8000298 <__aeabi_dsub>
 8013154:	4642      	mov	r2, r8
 8013156:	4606      	mov	r6, r0
 8013158:	460f      	mov	r7, r1
 801315a:	464b      	mov	r3, r9
 801315c:	4640      	mov	r0, r8
 801315e:	4649      	mov	r1, r9
 8013160:	f7ed fa52 	bl	8000608 <__aeabi_dmul>
 8013164:	a35c      	add	r3, pc, #368	; (adr r3, 80132d8 <__ieee754_pow+0x9f8>)
 8013166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316a:	4604      	mov	r4, r0
 801316c:	460d      	mov	r5, r1
 801316e:	f7ed fa4b 	bl	8000608 <__aeabi_dmul>
 8013172:	a35b      	add	r3, pc, #364	; (adr r3, 80132e0 <__ieee754_pow+0xa00>)
 8013174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013178:	f7ed f88e 	bl	8000298 <__aeabi_dsub>
 801317c:	4622      	mov	r2, r4
 801317e:	462b      	mov	r3, r5
 8013180:	f7ed fa42 	bl	8000608 <__aeabi_dmul>
 8013184:	a358      	add	r3, pc, #352	; (adr r3, 80132e8 <__ieee754_pow+0xa08>)
 8013186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318a:	f7ed f887 	bl	800029c <__adddf3>
 801318e:	4622      	mov	r2, r4
 8013190:	462b      	mov	r3, r5
 8013192:	f7ed fa39 	bl	8000608 <__aeabi_dmul>
 8013196:	a356      	add	r3, pc, #344	; (adr r3, 80132f0 <__ieee754_pow+0xa10>)
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	f7ed f87c 	bl	8000298 <__aeabi_dsub>
 80131a0:	4622      	mov	r2, r4
 80131a2:	462b      	mov	r3, r5
 80131a4:	f7ed fa30 	bl	8000608 <__aeabi_dmul>
 80131a8:	a353      	add	r3, pc, #332	; (adr r3, 80132f8 <__ieee754_pow+0xa18>)
 80131aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ae:	f7ed f875 	bl	800029c <__adddf3>
 80131b2:	4622      	mov	r2, r4
 80131b4:	462b      	mov	r3, r5
 80131b6:	f7ed fa27 	bl	8000608 <__aeabi_dmul>
 80131ba:	4602      	mov	r2, r0
 80131bc:	460b      	mov	r3, r1
 80131be:	4640      	mov	r0, r8
 80131c0:	4649      	mov	r1, r9
 80131c2:	f7ed f869 	bl	8000298 <__aeabi_dsub>
 80131c6:	4604      	mov	r4, r0
 80131c8:	460d      	mov	r5, r1
 80131ca:	4602      	mov	r2, r0
 80131cc:	460b      	mov	r3, r1
 80131ce:	4640      	mov	r0, r8
 80131d0:	4649      	mov	r1, r9
 80131d2:	f7ed fa19 	bl	8000608 <__aeabi_dmul>
 80131d6:	2200      	movs	r2, #0
 80131d8:	ec41 0b19 	vmov	d9, r0, r1
 80131dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80131e0:	4620      	mov	r0, r4
 80131e2:	4629      	mov	r1, r5
 80131e4:	f7ed f858 	bl	8000298 <__aeabi_dsub>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	ec51 0b19 	vmov	r0, r1, d9
 80131f0:	f7ed fb34 	bl	800085c <__aeabi_ddiv>
 80131f4:	4632      	mov	r2, r6
 80131f6:	4604      	mov	r4, r0
 80131f8:	460d      	mov	r5, r1
 80131fa:	463b      	mov	r3, r7
 80131fc:	4640      	mov	r0, r8
 80131fe:	4649      	mov	r1, r9
 8013200:	f7ed fa02 	bl	8000608 <__aeabi_dmul>
 8013204:	4632      	mov	r2, r6
 8013206:	463b      	mov	r3, r7
 8013208:	f7ed f848 	bl	800029c <__adddf3>
 801320c:	4602      	mov	r2, r0
 801320e:	460b      	mov	r3, r1
 8013210:	4620      	mov	r0, r4
 8013212:	4629      	mov	r1, r5
 8013214:	f7ed f840 	bl	8000298 <__aeabi_dsub>
 8013218:	4642      	mov	r2, r8
 801321a:	464b      	mov	r3, r9
 801321c:	f7ed f83c 	bl	8000298 <__aeabi_dsub>
 8013220:	460b      	mov	r3, r1
 8013222:	4602      	mov	r2, r0
 8013224:	493a      	ldr	r1, [pc, #232]	; (8013310 <__ieee754_pow+0xa30>)
 8013226:	2000      	movs	r0, #0
 8013228:	f7ed f836 	bl	8000298 <__aeabi_dsub>
 801322c:	e9cd 0100 	strd	r0, r1, [sp]
 8013230:	9b01      	ldr	r3, [sp, #4]
 8013232:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8013236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801323a:	da2f      	bge.n	801329c <__ieee754_pow+0x9bc>
 801323c:	4650      	mov	r0, sl
 801323e:	ed9d 0b00 	vldr	d0, [sp]
 8013242:	f000 f9cd 	bl	80135e0 <scalbn>
 8013246:	ec51 0b10 	vmov	r0, r1, d0
 801324a:	ec53 2b18 	vmov	r2, r3, d8
 801324e:	f7ff bbe0 	b.w	8012a12 <__ieee754_pow+0x132>
 8013252:	4b30      	ldr	r3, [pc, #192]	; (8013314 <__ieee754_pow+0xa34>)
 8013254:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013258:	429e      	cmp	r6, r3
 801325a:	f77f af0b 	ble.w	8013074 <__ieee754_pow+0x794>
 801325e:	4b2e      	ldr	r3, [pc, #184]	; (8013318 <__ieee754_pow+0xa38>)
 8013260:	440b      	add	r3, r1
 8013262:	4303      	orrs	r3, r0
 8013264:	d00b      	beq.n	801327e <__ieee754_pow+0x99e>
 8013266:	a326      	add	r3, pc, #152	; (adr r3, 8013300 <__ieee754_pow+0xa20>)
 8013268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326c:	ec51 0b18 	vmov	r0, r1, d8
 8013270:	f7ed f9ca 	bl	8000608 <__aeabi_dmul>
 8013274:	a322      	add	r3, pc, #136	; (adr r3, 8013300 <__ieee754_pow+0xa20>)
 8013276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327a:	f7ff bbca 	b.w	8012a12 <__ieee754_pow+0x132>
 801327e:	4622      	mov	r2, r4
 8013280:	462b      	mov	r3, r5
 8013282:	f7ed f809 	bl	8000298 <__aeabi_dsub>
 8013286:	4642      	mov	r2, r8
 8013288:	464b      	mov	r3, r9
 801328a:	f7ed fc43 	bl	8000b14 <__aeabi_dcmpge>
 801328e:	2800      	cmp	r0, #0
 8013290:	f43f aef0 	beq.w	8013074 <__ieee754_pow+0x794>
 8013294:	e7e7      	b.n	8013266 <__ieee754_pow+0x986>
 8013296:	f04f 0a00 	mov.w	sl, #0
 801329a:	e717      	b.n	80130cc <__ieee754_pow+0x7ec>
 801329c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132a0:	4619      	mov	r1, r3
 80132a2:	e7d2      	b.n	801324a <__ieee754_pow+0x96a>
 80132a4:	491a      	ldr	r1, [pc, #104]	; (8013310 <__ieee754_pow+0xa30>)
 80132a6:	2000      	movs	r0, #0
 80132a8:	f7ff bb9e 	b.w	80129e8 <__ieee754_pow+0x108>
 80132ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132b0:	f7ff bb9a 	b.w	80129e8 <__ieee754_pow+0x108>
 80132b4:	9000      	str	r0, [sp, #0]
 80132b6:	f7ff bb76 	b.w	80129a6 <__ieee754_pow+0xc6>
 80132ba:	2100      	movs	r1, #0
 80132bc:	f7ff bb60 	b.w	8012980 <__ieee754_pow+0xa0>
 80132c0:	00000000 	.word	0x00000000
 80132c4:	3fe62e43 	.word	0x3fe62e43
 80132c8:	fefa39ef 	.word	0xfefa39ef
 80132cc:	3fe62e42 	.word	0x3fe62e42
 80132d0:	0ca86c39 	.word	0x0ca86c39
 80132d4:	be205c61 	.word	0xbe205c61
 80132d8:	72bea4d0 	.word	0x72bea4d0
 80132dc:	3e663769 	.word	0x3e663769
 80132e0:	c5d26bf1 	.word	0xc5d26bf1
 80132e4:	3ebbbd41 	.word	0x3ebbbd41
 80132e8:	af25de2c 	.word	0xaf25de2c
 80132ec:	3f11566a 	.word	0x3f11566a
 80132f0:	16bebd93 	.word	0x16bebd93
 80132f4:	3f66c16c 	.word	0x3f66c16c
 80132f8:	5555553e 	.word	0x5555553e
 80132fc:	3fc55555 	.word	0x3fc55555
 8013300:	c2f8f359 	.word	0xc2f8f359
 8013304:	01a56e1f 	.word	0x01a56e1f
 8013308:	3fe00000 	.word	0x3fe00000
 801330c:	000fffff 	.word	0x000fffff
 8013310:	3ff00000 	.word	0x3ff00000
 8013314:	4090cbff 	.word	0x4090cbff
 8013318:	3f6f3400 	.word	0x3f6f3400
 801331c:	652b82fe 	.word	0x652b82fe
 8013320:	3c971547 	.word	0x3c971547

08013324 <__ieee754_sqrt>:
 8013324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013328:	ec55 4b10 	vmov	r4, r5, d0
 801332c:	4e56      	ldr	r6, [pc, #344]	; (8013488 <__ieee754_sqrt+0x164>)
 801332e:	43ae      	bics	r6, r5
 8013330:	ee10 0a10 	vmov	r0, s0
 8013334:	ee10 3a10 	vmov	r3, s0
 8013338:	4629      	mov	r1, r5
 801333a:	462a      	mov	r2, r5
 801333c:	d110      	bne.n	8013360 <__ieee754_sqrt+0x3c>
 801333e:	ee10 2a10 	vmov	r2, s0
 8013342:	462b      	mov	r3, r5
 8013344:	f7ed f960 	bl	8000608 <__aeabi_dmul>
 8013348:	4602      	mov	r2, r0
 801334a:	460b      	mov	r3, r1
 801334c:	4620      	mov	r0, r4
 801334e:	4629      	mov	r1, r5
 8013350:	f7ec ffa4 	bl	800029c <__adddf3>
 8013354:	4604      	mov	r4, r0
 8013356:	460d      	mov	r5, r1
 8013358:	ec45 4b10 	vmov	d0, r4, r5
 801335c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013360:	2d00      	cmp	r5, #0
 8013362:	dc10      	bgt.n	8013386 <__ieee754_sqrt+0x62>
 8013364:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013368:	4330      	orrs	r0, r6
 801336a:	d0f5      	beq.n	8013358 <__ieee754_sqrt+0x34>
 801336c:	b15d      	cbz	r5, 8013386 <__ieee754_sqrt+0x62>
 801336e:	ee10 2a10 	vmov	r2, s0
 8013372:	462b      	mov	r3, r5
 8013374:	ee10 0a10 	vmov	r0, s0
 8013378:	f7ec ff8e 	bl	8000298 <__aeabi_dsub>
 801337c:	4602      	mov	r2, r0
 801337e:	460b      	mov	r3, r1
 8013380:	f7ed fa6c 	bl	800085c <__aeabi_ddiv>
 8013384:	e7e6      	b.n	8013354 <__ieee754_sqrt+0x30>
 8013386:	1509      	asrs	r1, r1, #20
 8013388:	d076      	beq.n	8013478 <__ieee754_sqrt+0x154>
 801338a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801338e:	07ce      	lsls	r6, r1, #31
 8013390:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8013394:	bf5e      	ittt	pl
 8013396:	0fda      	lsrpl	r2, r3, #31
 8013398:	005b      	lslpl	r3, r3, #1
 801339a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801339e:	0fda      	lsrs	r2, r3, #31
 80133a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80133a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80133a8:	2000      	movs	r0, #0
 80133aa:	106d      	asrs	r5, r5, #1
 80133ac:	005b      	lsls	r3, r3, #1
 80133ae:	f04f 0e16 	mov.w	lr, #22
 80133b2:	4684      	mov	ip, r0
 80133b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80133b8:	eb0c 0401 	add.w	r4, ip, r1
 80133bc:	4294      	cmp	r4, r2
 80133be:	bfde      	ittt	le
 80133c0:	1b12      	suble	r2, r2, r4
 80133c2:	eb04 0c01 	addle.w	ip, r4, r1
 80133c6:	1840      	addle	r0, r0, r1
 80133c8:	0052      	lsls	r2, r2, #1
 80133ca:	f1be 0e01 	subs.w	lr, lr, #1
 80133ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80133d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80133d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80133da:	d1ed      	bne.n	80133b8 <__ieee754_sqrt+0x94>
 80133dc:	4671      	mov	r1, lr
 80133de:	2720      	movs	r7, #32
 80133e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80133e4:	4562      	cmp	r2, ip
 80133e6:	eb04 060e 	add.w	r6, r4, lr
 80133ea:	dc02      	bgt.n	80133f2 <__ieee754_sqrt+0xce>
 80133ec:	d113      	bne.n	8013416 <__ieee754_sqrt+0xf2>
 80133ee:	429e      	cmp	r6, r3
 80133f0:	d811      	bhi.n	8013416 <__ieee754_sqrt+0xf2>
 80133f2:	2e00      	cmp	r6, #0
 80133f4:	eb06 0e04 	add.w	lr, r6, r4
 80133f8:	da43      	bge.n	8013482 <__ieee754_sqrt+0x15e>
 80133fa:	f1be 0f00 	cmp.w	lr, #0
 80133fe:	db40      	blt.n	8013482 <__ieee754_sqrt+0x15e>
 8013400:	f10c 0801 	add.w	r8, ip, #1
 8013404:	eba2 020c 	sub.w	r2, r2, ip
 8013408:	429e      	cmp	r6, r3
 801340a:	bf88      	it	hi
 801340c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8013410:	1b9b      	subs	r3, r3, r6
 8013412:	4421      	add	r1, r4
 8013414:	46c4      	mov	ip, r8
 8013416:	0052      	lsls	r2, r2, #1
 8013418:	3f01      	subs	r7, #1
 801341a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801341e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013422:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013426:	d1dd      	bne.n	80133e4 <__ieee754_sqrt+0xc0>
 8013428:	4313      	orrs	r3, r2
 801342a:	d006      	beq.n	801343a <__ieee754_sqrt+0x116>
 801342c:	1c4c      	adds	r4, r1, #1
 801342e:	bf13      	iteet	ne
 8013430:	3101      	addne	r1, #1
 8013432:	3001      	addeq	r0, #1
 8013434:	4639      	moveq	r1, r7
 8013436:	f021 0101 	bicne.w	r1, r1, #1
 801343a:	1043      	asrs	r3, r0, #1
 801343c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013440:	0849      	lsrs	r1, r1, #1
 8013442:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013446:	07c2      	lsls	r2, r0, #31
 8013448:	bf48      	it	mi
 801344a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801344e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8013452:	460c      	mov	r4, r1
 8013454:	463d      	mov	r5, r7
 8013456:	e77f      	b.n	8013358 <__ieee754_sqrt+0x34>
 8013458:	0ada      	lsrs	r2, r3, #11
 801345a:	3815      	subs	r0, #21
 801345c:	055b      	lsls	r3, r3, #21
 801345e:	2a00      	cmp	r2, #0
 8013460:	d0fa      	beq.n	8013458 <__ieee754_sqrt+0x134>
 8013462:	02d7      	lsls	r7, r2, #11
 8013464:	d50a      	bpl.n	801347c <__ieee754_sqrt+0x158>
 8013466:	f1c1 0420 	rsb	r4, r1, #32
 801346a:	fa23 f404 	lsr.w	r4, r3, r4
 801346e:	1e4d      	subs	r5, r1, #1
 8013470:	408b      	lsls	r3, r1
 8013472:	4322      	orrs	r2, r4
 8013474:	1b41      	subs	r1, r0, r5
 8013476:	e788      	b.n	801338a <__ieee754_sqrt+0x66>
 8013478:	4608      	mov	r0, r1
 801347a:	e7f0      	b.n	801345e <__ieee754_sqrt+0x13a>
 801347c:	0052      	lsls	r2, r2, #1
 801347e:	3101      	adds	r1, #1
 8013480:	e7ef      	b.n	8013462 <__ieee754_sqrt+0x13e>
 8013482:	46e0      	mov	r8, ip
 8013484:	e7be      	b.n	8013404 <__ieee754_sqrt+0xe0>
 8013486:	bf00      	nop
 8013488:	7ff00000 	.word	0x7ff00000

0801348c <fabs>:
 801348c:	ec51 0b10 	vmov	r0, r1, d0
 8013490:	ee10 2a10 	vmov	r2, s0
 8013494:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013498:	ec43 2b10 	vmov	d0, r2, r3
 801349c:	4770      	bx	lr

0801349e <finite>:
 801349e:	b082      	sub	sp, #8
 80134a0:	ed8d 0b00 	vstr	d0, [sp]
 80134a4:	9801      	ldr	r0, [sp, #4]
 80134a6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80134aa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80134ae:	0fc0      	lsrs	r0, r0, #31
 80134b0:	b002      	add	sp, #8
 80134b2:	4770      	bx	lr
 80134b4:	0000      	movs	r0, r0
	...

080134b8 <nan>:
 80134b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80134c0 <nan+0x8>
 80134bc:	4770      	bx	lr
 80134be:	bf00      	nop
 80134c0:	00000000 	.word	0x00000000
 80134c4:	7ff80000 	.word	0x7ff80000

080134c8 <rint>:
 80134c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134ca:	ec51 0b10 	vmov	r0, r1, d0
 80134ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80134d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80134d6:	2e13      	cmp	r6, #19
 80134d8:	ee10 4a10 	vmov	r4, s0
 80134dc:	460b      	mov	r3, r1
 80134de:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80134e2:	dc58      	bgt.n	8013596 <rint+0xce>
 80134e4:	2e00      	cmp	r6, #0
 80134e6:	da2b      	bge.n	8013540 <rint+0x78>
 80134e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80134ec:	4302      	orrs	r2, r0
 80134ee:	d023      	beq.n	8013538 <rint+0x70>
 80134f0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80134f4:	4302      	orrs	r2, r0
 80134f6:	4254      	negs	r4, r2
 80134f8:	4314      	orrs	r4, r2
 80134fa:	0c4b      	lsrs	r3, r1, #17
 80134fc:	0b24      	lsrs	r4, r4, #12
 80134fe:	045b      	lsls	r3, r3, #17
 8013500:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013504:	ea44 0103 	orr.w	r1, r4, r3
 8013508:	4b32      	ldr	r3, [pc, #200]	; (80135d4 <rint+0x10c>)
 801350a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801350e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	4630      	mov	r0, r6
 8013518:	4639      	mov	r1, r7
 801351a:	f7ec febf 	bl	800029c <__adddf3>
 801351e:	e9cd 0100 	strd	r0, r1, [sp]
 8013522:	463b      	mov	r3, r7
 8013524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013528:	4632      	mov	r2, r6
 801352a:	f7ec feb5 	bl	8000298 <__aeabi_dsub>
 801352e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013532:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013536:	4639      	mov	r1, r7
 8013538:	ec41 0b10 	vmov	d0, r0, r1
 801353c:	b003      	add	sp, #12
 801353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013540:	4a25      	ldr	r2, [pc, #148]	; (80135d8 <rint+0x110>)
 8013542:	4132      	asrs	r2, r6
 8013544:	ea01 0702 	and.w	r7, r1, r2
 8013548:	4307      	orrs	r7, r0
 801354a:	d0f5      	beq.n	8013538 <rint+0x70>
 801354c:	0851      	lsrs	r1, r2, #1
 801354e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8013552:	4314      	orrs	r4, r2
 8013554:	d00c      	beq.n	8013570 <rint+0xa8>
 8013556:	ea23 0201 	bic.w	r2, r3, r1
 801355a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801355e:	2e13      	cmp	r6, #19
 8013560:	fa43 f606 	asr.w	r6, r3, r6
 8013564:	bf0c      	ite	eq
 8013566:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801356a:	2400      	movne	r4, #0
 801356c:	ea42 0306 	orr.w	r3, r2, r6
 8013570:	4918      	ldr	r1, [pc, #96]	; (80135d4 <rint+0x10c>)
 8013572:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8013576:	4622      	mov	r2, r4
 8013578:	e9d5 4500 	ldrd	r4, r5, [r5]
 801357c:	4620      	mov	r0, r4
 801357e:	4629      	mov	r1, r5
 8013580:	f7ec fe8c 	bl	800029c <__adddf3>
 8013584:	e9cd 0100 	strd	r0, r1, [sp]
 8013588:	e9dd 0100 	ldrd	r0, r1, [sp]
 801358c:	4622      	mov	r2, r4
 801358e:	462b      	mov	r3, r5
 8013590:	f7ec fe82 	bl	8000298 <__aeabi_dsub>
 8013594:	e7d0      	b.n	8013538 <rint+0x70>
 8013596:	2e33      	cmp	r6, #51	; 0x33
 8013598:	dd07      	ble.n	80135aa <rint+0xe2>
 801359a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801359e:	d1cb      	bne.n	8013538 <rint+0x70>
 80135a0:	ee10 2a10 	vmov	r2, s0
 80135a4:	f7ec fe7a 	bl	800029c <__adddf3>
 80135a8:	e7c6      	b.n	8013538 <rint+0x70>
 80135aa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80135ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80135b2:	40d6      	lsrs	r6, r2
 80135b4:	4230      	tst	r0, r6
 80135b6:	d0bf      	beq.n	8013538 <rint+0x70>
 80135b8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80135bc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80135c0:	bf1f      	itttt	ne
 80135c2:	ea24 0101 	bicne.w	r1, r4, r1
 80135c6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80135ca:	fa44 f202 	asrne.w	r2, r4, r2
 80135ce:	ea41 0402 	orrne.w	r4, r1, r2
 80135d2:	e7cd      	b.n	8013570 <rint+0xa8>
 80135d4:	080143f0 	.word	0x080143f0
 80135d8:	000fffff 	.word	0x000fffff
 80135dc:	00000000 	.word	0x00000000

080135e0 <scalbn>:
 80135e0:	b570      	push	{r4, r5, r6, lr}
 80135e2:	ec55 4b10 	vmov	r4, r5, d0
 80135e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80135ea:	4606      	mov	r6, r0
 80135ec:	462b      	mov	r3, r5
 80135ee:	b99a      	cbnz	r2, 8013618 <scalbn+0x38>
 80135f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80135f4:	4323      	orrs	r3, r4
 80135f6:	d036      	beq.n	8013666 <scalbn+0x86>
 80135f8:	4b39      	ldr	r3, [pc, #228]	; (80136e0 <scalbn+0x100>)
 80135fa:	4629      	mov	r1, r5
 80135fc:	ee10 0a10 	vmov	r0, s0
 8013600:	2200      	movs	r2, #0
 8013602:	f7ed f801 	bl	8000608 <__aeabi_dmul>
 8013606:	4b37      	ldr	r3, [pc, #220]	; (80136e4 <scalbn+0x104>)
 8013608:	429e      	cmp	r6, r3
 801360a:	4604      	mov	r4, r0
 801360c:	460d      	mov	r5, r1
 801360e:	da10      	bge.n	8013632 <scalbn+0x52>
 8013610:	a32b      	add	r3, pc, #172	; (adr r3, 80136c0 <scalbn+0xe0>)
 8013612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013616:	e03a      	b.n	801368e <scalbn+0xae>
 8013618:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801361c:	428a      	cmp	r2, r1
 801361e:	d10c      	bne.n	801363a <scalbn+0x5a>
 8013620:	ee10 2a10 	vmov	r2, s0
 8013624:	4620      	mov	r0, r4
 8013626:	4629      	mov	r1, r5
 8013628:	f7ec fe38 	bl	800029c <__adddf3>
 801362c:	4604      	mov	r4, r0
 801362e:	460d      	mov	r5, r1
 8013630:	e019      	b.n	8013666 <scalbn+0x86>
 8013632:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013636:	460b      	mov	r3, r1
 8013638:	3a36      	subs	r2, #54	; 0x36
 801363a:	4432      	add	r2, r6
 801363c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013640:	428a      	cmp	r2, r1
 8013642:	dd08      	ble.n	8013656 <scalbn+0x76>
 8013644:	2d00      	cmp	r5, #0
 8013646:	a120      	add	r1, pc, #128	; (adr r1, 80136c8 <scalbn+0xe8>)
 8013648:	e9d1 0100 	ldrd	r0, r1, [r1]
 801364c:	da1c      	bge.n	8013688 <scalbn+0xa8>
 801364e:	a120      	add	r1, pc, #128	; (adr r1, 80136d0 <scalbn+0xf0>)
 8013650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013654:	e018      	b.n	8013688 <scalbn+0xa8>
 8013656:	2a00      	cmp	r2, #0
 8013658:	dd08      	ble.n	801366c <scalbn+0x8c>
 801365a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801365e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013662:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013666:	ec45 4b10 	vmov	d0, r4, r5
 801366a:	bd70      	pop	{r4, r5, r6, pc}
 801366c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013670:	da19      	bge.n	80136a6 <scalbn+0xc6>
 8013672:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013676:	429e      	cmp	r6, r3
 8013678:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801367c:	dd0a      	ble.n	8013694 <scalbn+0xb4>
 801367e:	a112      	add	r1, pc, #72	; (adr r1, 80136c8 <scalbn+0xe8>)
 8013680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d1e2      	bne.n	801364e <scalbn+0x6e>
 8013688:	a30f      	add	r3, pc, #60	; (adr r3, 80136c8 <scalbn+0xe8>)
 801368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801368e:	f7ec ffbb 	bl	8000608 <__aeabi_dmul>
 8013692:	e7cb      	b.n	801362c <scalbn+0x4c>
 8013694:	a10a      	add	r1, pc, #40	; (adr r1, 80136c0 <scalbn+0xe0>)
 8013696:	e9d1 0100 	ldrd	r0, r1, [r1]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d0b8      	beq.n	8013610 <scalbn+0x30>
 801369e:	a10e      	add	r1, pc, #56	; (adr r1, 80136d8 <scalbn+0xf8>)
 80136a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136a4:	e7b4      	b.n	8013610 <scalbn+0x30>
 80136a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80136aa:	3236      	adds	r2, #54	; 0x36
 80136ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80136b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80136b4:	4620      	mov	r0, r4
 80136b6:	4b0c      	ldr	r3, [pc, #48]	; (80136e8 <scalbn+0x108>)
 80136b8:	2200      	movs	r2, #0
 80136ba:	e7e8      	b.n	801368e <scalbn+0xae>
 80136bc:	f3af 8000 	nop.w
 80136c0:	c2f8f359 	.word	0xc2f8f359
 80136c4:	01a56e1f 	.word	0x01a56e1f
 80136c8:	8800759c 	.word	0x8800759c
 80136cc:	7e37e43c 	.word	0x7e37e43c
 80136d0:	8800759c 	.word	0x8800759c
 80136d4:	fe37e43c 	.word	0xfe37e43c
 80136d8:	c2f8f359 	.word	0xc2f8f359
 80136dc:	81a56e1f 	.word	0x81a56e1f
 80136e0:	43500000 	.word	0x43500000
 80136e4:	ffff3cb0 	.word	0xffff3cb0
 80136e8:	3c900000 	.word	0x3c900000

080136ec <_init>:
 80136ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ee:	bf00      	nop
 80136f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136f2:	bc08      	pop	{r3}
 80136f4:	469e      	mov	lr, r3
 80136f6:	4770      	bx	lr

080136f8 <_fini>:
 80136f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fa:	bf00      	nop
 80136fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136fe:	bc08      	pop	{r3}
 8013700:	469e      	mov	lr, r3
 8013702:	4770      	bx	lr
