
project_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013134  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c94  080132d8  080132d8  000232d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f6c  08013f6c  000302d4  2**0
                  CONTENTS
  4 .ARM          00000008  08013f6c  08013f6c  00023f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f74  08013f74  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f74  08013f74  00023f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f78  08013f78  00023f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08013f7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e8  200002d4  08014250  000302d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  08014250  000315bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7fb  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fcf  00000000  00000000  0005aaff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00060ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b98  00000000  00000000  000628a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df2e  00000000  00000000  00064438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c93  00000000  00000000  00082366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaa0c  00000000  00000000  000aaff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155a05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c18  00000000  00000000  00155a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d4 	.word	0x200002d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080132bc 	.word	0x080132bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d8 	.word	0x200002d8
 80001dc:	080132bc 	.word	0x080132bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000f5e:	f002 fd4b 	bl	80039f8 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fd8b 	bl	8003a8c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000f80:	f107 030f 	add.w	r3, r7, #15
 8000f84:	2201      	movs	r2, #1
 8000f86:	2123      	movs	r1, #35	; 0x23
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fd7f 	bl	8003a8c <GYRO_IO_Write>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000faa:	f002 fd25 	bl	80039f8 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fd9b 	bl	8003af0 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2124      	movs	r1, #36	; 0x24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fd8d 	bl	8003af0 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2124      	movs	r1, #36	; 0x24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fd50 	bl	8003a8c <GYRO_IO_Write>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8001008:	f107 030f 	add.w	r3, r7, #15
 800100c:	2201      	movs	r2, #1
 800100e:	2120      	movs	r1, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fd3b 	bl	8003a8c <GYRO_IO_Write>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	2300      	movs	r3, #0
 800102e:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001030:	f107 030f 	add.w	r3, r7, #15
 8001034:	2201      	movs	r2, #1
 8001036:	2130      	movs	r1, #48	; 0x30
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fd59 	bl	8003af0 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800103e:	f107 030e 	add.w	r3, r7, #14
 8001042:	2201      	movs	r2, #1
 8001044:	2122      	movs	r1, #34	; 0x22
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fd52 	bl	8003af0 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	121b      	asrs	r3, r3, #8
 800105c:	b25a      	sxtb	r2, r3
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f023 0320 	bic.w	r3, r3, #32
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	4313      	orrs	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fcff 	bl	8003a8c <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	2201      	movs	r2, #1
 8001094:	2122      	movs	r1, #34	; 0x22
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fcf8 	bl	8003a8c <GYRO_IO_Write>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80010ae:	f107 030f 	add.w	r3, r7, #15
 80010b2:	2201      	movs	r2, #1
 80010b4:	2122      	movs	r1, #34	; 0x22
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fd1a 	bl	8003af0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e00c      	b.n	80010f2 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d109      	bne.n	80010f2 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	f023 0308 	bic.w	r3, r3, #8
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80010f2:	f107 030f 	add.w	r3, r7, #15
 80010f6:	2201      	movs	r2, #1
 80010f8:	2122      	movs	r1, #34	; 0x22
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fcc6 	bl	8003a8c <GYRO_IO_Write>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001112:	f107 030f 	add.w	r3, r7, #15
 8001116:	2201      	movs	r2, #1
 8001118:	2122      	movs	r1, #34	; 0x22
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fce8 	bl	8003af0 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e009      	b.n	800114a <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f023 0308 	bic.w	r3, r3, #8
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800114a:	f107 030f 	add.w	r3, r7, #15
 800114e:	2201      	movs	r2, #1
 8001150:	2122      	movs	r1, #34	; 0x22
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fc9a 	bl	8003a8c <GYRO_IO_Write>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800116a:	f107 030f 	add.w	r3, r7, #15
 800116e:	2201      	movs	r2, #1
 8001170:	2121      	movs	r1, #33	; 0x21
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fcbc 	bl	8003af0 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4313      	orrs	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	2121      	movs	r1, #33	; 0x21
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fc79 	bl	8003a8c <GYRO_IO_Write>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80011ac:	f107 030f 	add.w	r3, r7, #15
 80011b0:	2201      	movs	r2, #1
 80011b2:	2124      	movs	r1, #36	; 0x24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fc9b 	bl	8003af0 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f023 0310 	bic.w	r3, r3, #16
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80011ce:	f107 030f 	add.w	r3, r7, #15
 80011d2:	2201      	movs	r2, #1
 80011d4:	2124      	movs	r1, #36	; 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fc58 	bl	8003a8c <GYRO_IO_Write>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	2300      	movs	r3, #0
 80011f2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800120c:	f107 030f 	add.w	r3, r7, #15
 8001210:	2201      	movs	r2, #1
 8001212:	2123      	movs	r1, #35	; 0x23
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fc6b 	bl	8003af0 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	2206      	movs	r2, #6
 8001220:	2128      	movs	r1, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fc64 	bl	8003af0 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d126      	bne.n	8001280 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	e01f      	b.n	8001278 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	3301      	adds	r3, #1
 800123e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001242:	4413      	add	r3, r2
 8001244:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001248:	b29b      	uxth	r3, r3
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b29a      	uxth	r2, r3
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001256:	440b      	add	r3, r1
 8001258:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	b21a      	sxth	r2, r3
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800126c:	440b      	add	r3, r1
 800126e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	3301      	adds	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2b02      	cmp	r3, #2
 800127c:	dddc      	ble.n	8001238 <I3G4250D_ReadXYZAngRate+0x54>
 800127e:	e025      	b.n	80012cc <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	e01f      	b.n	80012c6 <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800128e:	4413      	add	r3, r2
 8001290:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001294:	b29b      	uxth	r3, r3
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b29a      	uxth	r2, r3
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3301      	adds	r3, #1
 80012a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a4:	440b      	add	r3, r1
 80012a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012ba:	440b      	add	r3, r1
 80012bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3301      	adds	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	dddc      	ble.n	8001286 <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d00c      	beq.n	80012f0 <I3G4250D_ReadXYZAngRate+0x10c>
 80012d6:	2b20      	cmp	r3, #32
 80012d8:	dc0d      	bgt.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <I3G4250D_ReadXYZAngRate+0x100>
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d003      	beq.n	80012ea <I3G4250D_ReadXYZAngRate+0x106>
 80012e2:	e008      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <I3G4250D_ReadXYZAngRate+0x158>)
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012e8:	e005      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <I3G4250D_ReadXYZAngRate+0x15c>)
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012ee:	e002      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <I3G4250D_ReadXYZAngRate+0x160>)
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012f4:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	e017      	b.n	800132c <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001304:	4413      	add	r3, r2
 8001306:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	3301      	adds	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b02      	cmp	r3, #2
 8001330:	dde4      	ble.n	80012fc <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	410c0000 	.word	0x410c0000
 8001340:	418c0000 	.word	0x418c0000
 8001344:	428c0000 	.word	0x428c0000

08001348 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001356:	f002 fb4f 	bl	80039f8 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001360:	f107 030f 	add.w	r3, r7, #15
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fb8f 	bl	8003a8c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b29b      	uxth	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001378:	f107 030f 	add.w	r3, r7, #15
 800137c:	2201      	movs	r2, #1
 800137e:	2123      	movs	r1, #35	; 0x23
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fb83 	bl	8003a8c <GYRO_IO_Write>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80013a2:	f002 fb29 	bl	80039f8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2201      	movs	r2, #1
 80013aa:	210f      	movs	r1, #15
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fb9f 	bl	8003af0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	2201      	movs	r2, #1
 80013c6:	2124      	movs	r1, #36	; 0x24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fb91 	bl	8003af0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	2201      	movs	r2, #1
 80013dc:	2124      	movs	r1, #36	; 0x24
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fb54 	bl	8003a8c <GYRO_IO_Write>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	2201      	movs	r2, #1
 8001406:	2120      	movs	r1, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fb3f 	bl	8003a8c <GYRO_IO_Write>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	2300      	movs	r3, #0
 8001426:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001428:	f107 030f 	add.w	r3, r7, #15
 800142c:	2201      	movs	r2, #1
 800142e:	2130      	movs	r1, #48	; 0x30
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fb5d 	bl	8003af0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001436:	f107 030e 	add.w	r3, r7, #14
 800143a:	2201      	movs	r2, #1
 800143c:	2122      	movs	r1, #34	; 0x22
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fb56 	bl	8003af0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	121b      	asrs	r3, r3, #8
 8001454:	b25a      	sxtb	r2, r3
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	f023 0320 	bic.w	r3, r3, #32
 8001468:	b2db      	uxtb	r3, r3
 800146a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4313      	orrs	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001478:	f107 030f 	add.w	r3, r7, #15
 800147c:	2201      	movs	r2, #1
 800147e:	2130      	movs	r1, #48	; 0x30
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fb03 	bl	8003a8c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001486:	f107 030e 	add.w	r3, r7, #14
 800148a:	2201      	movs	r2, #1
 800148c:	2122      	movs	r1, #34	; 0x22
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fafc 	bl	8003a8c <GYRO_IO_Write>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80014a6:	f107 030f 	add.w	r3, r7, #15
 80014aa:	2201      	movs	r2, #1
 80014ac:	2122      	movs	r1, #34	; 0x22
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fb1e 	bl	8003af0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e00c      	b.n	80014ea <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d109      	bne.n	80014ea <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	f023 0308 	bic.w	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80014ea:	f107 030f 	add.w	r3, r7, #15
 80014ee:	2201      	movs	r2, #1
 80014f0:	2122      	movs	r1, #34	; 0x22
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 faca 	bl	8003a8c <GYRO_IO_Write>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800150a:	f107 030f 	add.w	r3, r7, #15
 800150e:	2201      	movs	r2, #1
 8001510:	2122      	movs	r1, #34	; 0x22
 8001512:	4618      	mov	r0, r3
 8001514:	f002 faec 	bl	8003af0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001524:	b2db      	uxtb	r3, r3
 8001526:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e009      	b.n	8001542 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f023 0308 	bic.w	r3, r3, #8
 800153a:	b2db      	uxtb	r3, r3
 800153c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001542:	f107 030f 	add.w	r3, r7, #15
 8001546:	2201      	movs	r2, #1
 8001548:	2122      	movs	r1, #34	; 0x22
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fa9e 	bl	8003a8c <GYRO_IO_Write>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001562:	f107 030f 	add.w	r3, r7, #15
 8001566:	2201      	movs	r2, #1
 8001568:	2121      	movs	r1, #33	; 0x21
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fac0 	bl	8003af0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001584:	f107 030f 	add.w	r3, r7, #15
 8001588:	2201      	movs	r2, #1
 800158a:	2121      	movs	r1, #33	; 0x21
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fa7d 	bl	8003a8c <GYRO_IO_Write>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80015a4:	f107 030f 	add.w	r3, r7, #15
 80015a8:	2201      	movs	r2, #1
 80015aa:	2124      	movs	r1, #36	; 0x24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fa9f 	bl	8003af0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	f023 0310 	bic.w	r3, r3, #16
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80015c6:	f107 030f 	add.w	r3, r7, #15
 80015ca:	2201      	movs	r2, #1
 80015cc:	2124      	movs	r1, #36	; 0x24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fa5c 	bl	8003a8c <GYRO_IO_Write>
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	2300      	movs	r3, #0
 80015ea:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001604:	f107 030f 	add.w	r3, r7, #15
 8001608:	2201      	movs	r2, #1
 800160a:	2123      	movs	r1, #35	; 0x23
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fa6f 	bl	8003af0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2206      	movs	r2, #6
 8001618:	2128      	movs	r1, #40	; 0x28
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fa68 	bl	8003af0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d126      	bne.n	8001678 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	e01f      	b.n	8001670 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	3301      	adds	r3, #1
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001640:	b29b      	uxth	r3, r3
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b29a      	uxth	r2, r3
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800164e:	440b      	add	r3, r1
 8001650:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	b21a      	sxth	r2, r3
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001664:	440b      	add	r3, r1
 8001666:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	2b02      	cmp	r3, #2
 8001674:	dddc      	ble.n	8001630 <L3GD20_ReadXYZAngRate+0x54>
 8001676:	e025      	b.n	80016c4 <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	e01f      	b.n	80016be <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001686:	4413      	add	r3, r2
 8001688:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800168c:	b29b      	uxth	r3, r3
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b29a      	uxth	r2, r3
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3301      	adds	r3, #1
 8001698:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800169c:	440b      	add	r3, r1
 800169e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016b2:	440b      	add	r3, r1
 80016b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	3301      	adds	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	dddc      	ble.n	800167e <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d00c      	beq.n	80016e8 <L3GD20_ReadXYZAngRate+0x10c>
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	dc0d      	bgt.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <L3GD20_ReadXYZAngRate+0x100>
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d003      	beq.n	80016e2 <L3GD20_ReadXYZAngRate+0x106>
 80016da:	e008      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <L3GD20_ReadXYZAngRate+0x158>)
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016e0:	e005      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <L3GD20_ReadXYZAngRate+0x15c>)
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016e6:	e002      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <L3GD20_ReadXYZAngRate+0x160>)
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016ec:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
 80016f2:	e017      	b.n	8001724 <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016fc:	4413      	add	r3, r2
 80016fe:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	3301      	adds	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b02      	cmp	r3, #2
 8001728:	dde4      	ble.n	80016f4 <L3GD20_ReadXYZAngRate+0x118>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	410c0000 	.word	0x410c0000
 8001738:	418c0000 	.word	0x418c0000
 800173c:	428c0000 	.word	0x428c0000

08001740 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800174e:	f002 fa09 	bl	8003b64 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	461a      	mov	r2, r3
 800175a:	2120      	movs	r1, #32
 800175c:	2032      	movs	r0, #50	; 0x32
 800175e:	f002 fa59 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	461a      	mov	r2, r3
 800176a:	2123      	movs	r1, #35	; 0x23
 800176c:	2032      	movs	r0, #50	; 0x32
 800176e:	f002 fa51 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001792:	f002 f9e7 	bl	8003b64 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001796:	210f      	movs	r1, #15
 8001798:	2032      	movs	r0, #50	; 0x32
 800179a:	f002 fa4e 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80017b2:	2124      	movs	r1, #36	; 0x24
 80017b4:	2032      	movs	r0, #50	; 0x32
 80017b6:	f002 fa40 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	461a      	mov	r2, r3
 80017ca:	2124      	movs	r1, #36	; 0x24
 80017cc:	2032      	movs	r0, #50	; 0x32
 80017ce:	f002 fa21 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80017e4:	2121      	movs	r1, #33	; 0x21
 80017e6:	2032      	movs	r0, #50	; 0x32
 80017e8:	f002 fa27 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	461a      	mov	r2, r3
 8001804:	2121      	movs	r1, #33	; 0x21
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f002 fa04 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800181e:	2121      	movs	r1, #33	; 0x21
 8001820:	2032      	movs	r0, #50	; 0x32
 8001822:	f002 fa0a 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f023 0308 	bic.w	r3, r3, #8
 8001830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4313      	orrs	r3, r2
 8001838:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	461a      	mov	r2, r3
 800183e:	2121      	movs	r1, #33	; 0x21
 8001840:	2032      	movs	r0, #50	; 0x32
 8001842:	f002 f9e7 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b088      	sub	sp, #32
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001856:	2300      	movs	r3, #0
 8001858:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800185e:	2301      	movs	r3, #1
 8001860:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001862:	2123      	movs	r1, #35	; 0x23
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f002 f9e8 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 800186a:	4603      	mov	r3, r0
 800186c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800186e:	2124      	movs	r1, #36	; 0x24
 8001870:	2032      	movs	r0, #50	; 0x32
 8001872:	f002 f9e2 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001876:	4603      	mov	r3, r0
 8001878:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800187a:	2128      	movs	r1, #40	; 0x28
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f002 f9dc 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001882:	4603      	mov	r3, r0
 8001884:	b25b      	sxtb	r3, r3
 8001886:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001888:	2129      	movs	r1, #41	; 0x29
 800188a:	2032      	movs	r0, #50	; 0x32
 800188c:	f002 f9d5 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001890:	4603      	mov	r3, r0
 8001892:	b25b      	sxtb	r3, r3
 8001894:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001896:	212a      	movs	r1, #42	; 0x2a
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f002 f9ce 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 800189e:	4603      	mov	r3, r0
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80018a4:	212b      	movs	r1, #43	; 0x2b
 80018a6:	2032      	movs	r0, #50	; 0x32
 80018a8:	f002 f9c7 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	2032      	movs	r0, #50	; 0x32
 80018b6:	f002 f9c0 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 80018c0:	212d      	movs	r1, #45	; 0x2d
 80018c2:	2032      	movs	r0, #50	; 0x32
 80018c4:	f002 f9b9 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 80018ce:	7d3b      	ldrb	r3, [r7, #20]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d126      	bne.n	8001926 <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
 80018dc:	e01f      	b.n	800191e <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	3301      	adds	r3, #1
 80018e4:	f107 0220 	add.w	r2, r7, #32
 80018e8:	4413      	add	r3, r2
 80018ea:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f107 0120 	add.w	r1, r7, #32
 80018fc:	440b      	add	r3, r1
 80018fe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b29a      	uxth	r2, r3
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	b212      	sxth	r2, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	f107 0120 	add.w	r1, r7, #32
 8001912:	440b      	add	r3, r1
 8001914:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	3301      	adds	r3, #1
 800191c:	77fb      	strb	r3, [r7, #31]
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d9dc      	bls.n	80018de <LSM303AGR_AccReadXYZ+0x90>
 8001924:	e025      	b.n	8001972 <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	77fb      	strb	r3, [r7, #31]
 800192a:	e01f      	b.n	800196c <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	f107 0220 	add.w	r2, r7, #32
 8001934:	4413      	add	r3, r2
 8001936:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800193a:	b29b      	uxth	r3, r3
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b29a      	uxth	r2, r3
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	3301      	adds	r3, #1
 8001946:	f107 0120 	add.w	r1, r7, #32
 800194a:	440b      	add	r3, r1
 800194c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29a      	uxth	r2, r3
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	b212      	sxth	r2, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	f107 0120 	add.w	r1, r7, #32
 8001960:	440b      	add	r3, r1
 8001962:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	3301      	adds	r3, #1
 800196a:	77fb      	strb	r3, [r7, #31]
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d9dc      	bls.n	800192c <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001972:	7d3b      	ldrb	r3, [r7, #20]
 8001974:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001978:	2b30      	cmp	r3, #48	; 0x30
 800197a:	d013      	beq.n	80019a4 <LSM303AGR_AccReadXYZ+0x156>
 800197c:	2b30      	cmp	r3, #48	; 0x30
 800197e:	dc14      	bgt.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
 8001980:	2b20      	cmp	r3, #32
 8001982:	d00c      	beq.n	800199e <LSM303AGR_AccReadXYZ+0x150>
 8001984:	2b20      	cmp	r3, #32
 8001986:	dc10      	bgt.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <LSM303AGR_AccReadXYZ+0x144>
 800198c:	2b10      	cmp	r3, #16
 800198e:	d003      	beq.n	8001998 <LSM303AGR_AccReadXYZ+0x14a>
 8001990:	e00b      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001992:	2301      	movs	r3, #1
 8001994:	77bb      	strb	r3, [r7, #30]
    break;
 8001996:	e008      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001998:	2302      	movs	r3, #2
 800199a:	77bb      	strb	r3, [r7, #30]
    break;
 800199c:	e005      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800199e:	2304      	movs	r3, #4
 80019a0:	77bb      	strb	r3, [r7, #30]
    break;
 80019a2:	e002      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80019a4:	230c      	movs	r3, #12
 80019a6:	77bb      	strb	r3, [r7, #30]
    break;
 80019a8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	e015      	b.n	80019dc <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	f107 0220 	add.w	r2, r7, #32
 80019b8:	4413      	add	r3, r2
 80019ba:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	7fbb      	ldrb	r3, [r7, #30]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	fb12 f303 	smulbb	r3, r2, r3
 80019c8:	b299      	uxth	r1, r3
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	b20a      	sxth	r2, r1
 80019d4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	3301      	adds	r3, #1
 80019da:	77fb      	strb	r3, [r7, #31]
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d9e6      	bls.n	80019b0 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80019fa:	2121      	movs	r1, #33	; 0x21
 80019fc:	2032      	movs	r0, #50	; 0x32
 80019fe:	f002 f91c 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2121      	movs	r1, #33	; 0x21
 8001a1c:	2032      	movs	r0, #50	; 0x32
 8001a1e:	f002 f8f9 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001a38:	2122      	movs	r1, #34	; 0x22
 8001a3a:	2032      	movs	r0, #50	; 0x32
 8001a3c:	f002 f8fd 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2122      	movs	r1, #34	; 0x22
 8001a52:	2032      	movs	r0, #50	; 0x32
 8001a54:	f002 f8de 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001a6e:	2138      	movs	r1, #56	; 0x38
 8001a70:	2032      	movs	r0, #50	; 0x32
 8001a72:	f002 f8e2 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	461a      	mov	r2, r3
 8001a86:	2138      	movs	r1, #56	; 0x38
 8001a88:	2032      	movs	r0, #50	; 0x32
 8001a8a:	f002 f8c3 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	461a      	mov	r2, r3
 8001a96:	213a      	movs	r1, #58	; 0x3a
 8001a98:	2032      	movs	r0, #50	; 0x32
 8001a9a:	f002 f8bb 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	213b      	movs	r1, #59	; 0x3b
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f002 f8b3 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	213c      	movs	r1, #60	; 0x3c
 8001ab4:	2032      	movs	r0, #50	; 0x32
 8001ab6:	f002 f8ad 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001aba:	2332      	movs	r3, #50	; 0x32
 8001abc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	213d      	movs	r1, #61	; 0x3d
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f002 f8a5 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001ad6:	f002 f86d 	bl	8003bb4 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001ada:	2080      	movs	r0, #128	; 0x80
 8001adc:	f7ff ffa5 	bl	8001a2a <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff ff83 	bl	80019ec <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8001ae6:	2010      	movs	r0, #16
 8001ae8:	f7ff ffba 	bl	8001a60 <LSM303AGR_AccClickITEnable>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001afe:	f002 f831 	bl	8003b64 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	2032      	movs	r0, #50	; 0x32
 8001b0e:	f002 f881 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2123      	movs	r1, #35	; 0x23
 8001b1c:	2032      	movs	r0, #50	; 0x32
 8001b1e:	f002 f879 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001b42:	f002 f80f 	bl	8003b64 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001b46:	210f      	movs	r1, #15
 8001b48:	2032      	movs	r0, #50	; 0x32
 8001b4a:	f002 f876 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001b62:	2124      	movs	r1, #36	; 0x24
 8001b64:	2032      	movs	r0, #50	; 0x32
 8001b66:	f002 f868 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b74:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2124      	movs	r1, #36	; 0x24
 8001b7c:	2032      	movs	r0, #50	; 0x32
 8001b7e:	f002 f849 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001b94:	2121      	movs	r1, #33	; 0x21
 8001b96:	2032      	movs	r0, #50	; 0x32
 8001b98:	f002 f84f 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2121      	movs	r1, #33	; 0x21
 8001bb6:	2032      	movs	r0, #50	; 0x32
 8001bb8:	f002 f82c 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001bce:	2121      	movs	r1, #33	; 0x21
 8001bd0:	2032      	movs	r0, #50	; 0x32
 8001bd2:	f002 f832 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	f023 0308 	bic.w	r3, r3, #8
 8001be0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2121      	movs	r1, #33	; 0x21
 8001bf0:	2032      	movs	r0, #50	; 0x32
 8001bf2:	f002 f80f 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001c06:	2300      	movs	r3, #0
 8001c08:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001c12:	2123      	movs	r1, #35	; 0x23
 8001c14:	2032      	movs	r0, #50	; 0x32
 8001c16:	f002 f810 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001c1e:	2124      	movs	r1, #36	; 0x24
 8001c20:	2032      	movs	r0, #50	; 0x32
 8001c22:	f002 f80a 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001c2a:	2128      	movs	r1, #40	; 0x28
 8001c2c:	2032      	movs	r0, #50	; 0x32
 8001c2e:	f002 f804 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001c38:	2129      	movs	r1, #41	; 0x29
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f001 fffd 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001c46:	212a      	movs	r1, #42	; 0x2a
 8001c48:	2032      	movs	r0, #50	; 0x32
 8001c4a:	f001 fff6 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001c54:	212b      	movs	r1, #43	; 0x2b
 8001c56:	2032      	movs	r0, #50	; 0x32
 8001c58:	f001 ffef 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f001 ffe8 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001c70:	212d      	movs	r1, #45	; 0x2d
 8001c72:	2032      	movs	r0, #50	; 0x32
 8001c74:	f001 ffe1 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001c7e:	7d3b      	ldrb	r3, [r7, #20]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d126      	bne.n	8001cd6 <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
 8001c8c:	e01f      	b.n	8001cce <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3301      	adds	r3, #1
 8001c94:	f107 0220 	add.w	r2, r7, #32
 8001c98:	4413      	add	r3, r2
 8001c9a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	f107 0120 	add.w	r1, r7, #32
 8001cac:	440b      	add	r3, r1
 8001cae:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	b212      	sxth	r2, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	f107 0120 	add.w	r1, r7, #32
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	77fb      	strb	r3, [r7, #31]
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d9dc      	bls.n	8001c8e <LSM303DLHC_AccReadXYZ+0x90>
 8001cd4:	e025      	b.n	8001d22 <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]
 8001cda:	e01f      	b.n	8001d1c <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001cdc:	7ffb      	ldrb	r3, [r7, #31]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	f107 0220 	add.w	r2, r7, #32
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f107 0120 	add.w	r1, r7, #32
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	b212      	sxth	r2, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	f107 0120 	add.w	r1, r7, #32
 8001d10:	440b      	add	r3, r1
 8001d12:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	77fb      	strb	r3, [r7, #31]
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d9dc      	bls.n	8001cdc <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001d22:	7d3b      	ldrb	r3, [r7, #20]
 8001d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d28:	2b30      	cmp	r3, #48	; 0x30
 8001d2a:	d013      	beq.n	8001d54 <LSM303DLHC_AccReadXYZ+0x156>
 8001d2c:	2b30      	cmp	r3, #48	; 0x30
 8001d2e:	dc14      	bgt.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d00c      	beq.n	8001d4e <LSM303DLHC_AccReadXYZ+0x150>
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	dc10      	bgt.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <LSM303DLHC_AccReadXYZ+0x144>
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d003      	beq.n	8001d48 <LSM303DLHC_AccReadXYZ+0x14a>
 8001d40:	e00b      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77bb      	strb	r3, [r7, #30]
    break;
 8001d46:	e008      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	77bb      	strb	r3, [r7, #30]
    break;
 8001d4c:	e005      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	77bb      	strb	r3, [r7, #30]
    break;
 8001d52:	e002      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001d54:	230c      	movs	r3, #12
 8001d56:	77bb      	strb	r3, [r7, #30]
    break;
 8001d58:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	77fb      	strb	r3, [r7, #31]
 8001d5e:	e015      	b.n	8001d8c <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	f107 0220 	add.w	r2, r7, #32
 8001d68:	4413      	add	r3, r2
 8001d6a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	7fbb      	ldrb	r3, [r7, #30]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	fb12 f303 	smulbb	r3, r2, r3
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	b20a      	sxth	r2, r1
 8001d84:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	77fb      	strb	r3, [r7, #31]
 8001d8c:	7ffb      	ldrb	r3, [r7, #31]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d9e6      	bls.n	8001d60 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001daa:	2121      	movs	r1, #33	; 0x21
 8001dac:	2032      	movs	r0, #50	; 0x32
 8001dae:	f001 ff44 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2121      	movs	r1, #33	; 0x21
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f001 ff21 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001de8:	2122      	movs	r1, #34	; 0x22
 8001dea:	2032      	movs	r0, #50	; 0x32
 8001dec:	f001 ff25 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2122      	movs	r1, #34	; 0x22
 8001e02:	2032      	movs	r0, #50	; 0x32
 8001e04:	f001 ff06 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001e1e:	2138      	movs	r1, #56	; 0x38
 8001e20:	2032      	movs	r0, #50	; 0x32
 8001e22:	f001 ff0a 	bl	8003c3a <COMPASSACCELERO_IO_Read>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	461a      	mov	r2, r3
 8001e36:	2138      	movs	r1, #56	; 0x38
 8001e38:	2032      	movs	r0, #50	; 0x32
 8001e3a:	f001 feeb 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001e3e:	230a      	movs	r3, #10
 8001e40:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	461a      	mov	r2, r3
 8001e46:	213a      	movs	r1, #58	; 0x3a
 8001e48:	2032      	movs	r0, #50	; 0x32
 8001e4a:	f001 fee3 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	461a      	mov	r2, r3
 8001e56:	213b      	movs	r1, #59	; 0x3b
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f001 fedb 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	461a      	mov	r2, r3
 8001e62:	213c      	movs	r1, #60	; 0x3c
 8001e64:	2032      	movs	r0, #50	; 0x32
 8001e66:	f001 fed5 	bl	8003c14 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001e6a:	2332      	movs	r3, #50	; 0x32
 8001e6c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	461a      	mov	r2, r3
 8001e72:	213d      	movs	r1, #61	; 0x3d
 8001e74:	2032      	movs	r0, #50	; 0x32
 8001e76:	f001 fecd 	bl	8003c14 <COMPASSACCELERO_IO_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001e86:	f001 fe95 	bl	8003bb4 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001e8a:	2080      	movs	r0, #128	; 0x80
 8001e8c:	f7ff ffa5 	bl	8001dda <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001e90:	2004      	movs	r0, #4
 8001e92:	f7ff ff83 	bl	8001d9c <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001e96:	2010      	movs	r0, #16
 8001e98:	f7ff ffba 	bl	8001e10 <LSM303DLHC_AccClickITEnable>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <MX_ADC1_Init+0xb8>)
 8001eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <MX_ADC1_Init+0xbc>)
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001efe:	4815      	ldr	r0, [pc, #84]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f00:	f002 fc0c 	bl	800471c <HAL_ADC_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f0a:	f001 fac3 	bl	8003494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f16:	2307      	movs	r3, #7
 8001f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f20:	f002 fd5a 	bl	80049d8 <HAL_ADC_ConfigChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f2a:	f001 fab3 	bl	8003494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f32:	2302      	movs	r3, #2
 8001f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f3c:	f002 fd4c 	bl	80049d8 <HAL_ADC_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001f46:	f001 faa5 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200003e0 	.word	0x200003e0
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	0f000001 	.word	0x0f000001

08001f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	; (800203c <HAL_ADC_MspInit+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d157      	bne.n	8002032 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001fba:	2306      	movs	r3, #6
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	481d      	ldr	r0, [pc, #116]	; (8002044 <HAL_ADC_MspInit+0xe4>)
 8001fce:	f003 fdd1 	bl	8005b74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_ADC_MspInit+0xec>)
 8001fd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002000:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002008:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002016:	480c      	ldr	r0, [pc, #48]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002018:	f003 f89e 	bl	8005158 <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002022:	f001 fa37 	bl	8003494 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40012000 	.word	0x40012000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000
 8002048:	20000428 	.word	0x20000428
 800204c:	40026410 	.word	0x40026410

08002050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_DMA_Init+0x4c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <MX_DMA_Init+0x4c>)
 8002060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <MX_DMA_Init+0x4c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2038      	movs	r0, #56	; 0x38
 8002078:	f003 f81e 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800207c:	2038      	movs	r0, #56	; 0x38
 800207e:	f003 f847 	bl	8005110 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2039      	movs	r0, #57	; 0x39
 8002088:	f003 f816 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800208c:	2039      	movs	r0, #57	; 0x39
 800208e:	f003 f83f 	bl	8005110 <HAL_NVIC_EnableIRQ>

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a8e      	ldr	r2, [pc, #568]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a87      	ldr	r2, [pc, #540]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a80      	ldr	r2, [pc, #512]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <MX_GPIO_Init+0x258>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <MX_GPIO_Init+0x258>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a72      	ldr	r2, [pc, #456]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a6b      	ldr	r2, [pc, #428]	; (80022f8 <MX_GPIO_Init+0x258>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2108      	movs	r1, #8
 8002162:	4866      	ldr	r0, [pc, #408]	; (80022fc <MX_GPIO_Init+0x25c>)
 8002164:	f004 f8a4 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2101      	movs	r1, #1
 800216c:	4864      	ldr	r0, [pc, #400]	; (8002300 <MX_GPIO_Init+0x260>)
 800216e:	f004 f89f 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	f244 0182 	movw	r1, #16514	; 0x4082
 8002178:	4862      	ldr	r0, [pc, #392]	; (8002304 <MX_GPIO_Init+0x264>)
 800217a:	f004 f899 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800217e:	2200      	movs	r2, #0
 8002180:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002184:	4860      	ldr	r0, [pc, #384]	; (8002308 <MX_GPIO_Init+0x268>)
 8002186:	f004 f893 	bl	80062b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800218a:	2304      	movs	r3, #4
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4857      	ldr	r0, [pc, #348]	; (80022fc <MX_GPIO_Init+0x25c>)
 800219e:	f003 fce9 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80021a2:	2308      	movs	r3, #8
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	4850      	ldr	r0, [pc, #320]	; (80022fc <MX_GPIO_Init+0x25c>)
 80021ba:	f003 fcdb 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80021be:	2332      	movs	r3, #50	; 0x32
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	484a      	ldr	r0, [pc, #296]	; (80022fc <MX_GPIO_Init+0x25c>)
 80021d4:	f003 fcce 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4844      	ldr	r0, [pc, #272]	; (8002300 <MX_GPIO_Init+0x260>)
 80021f0:	f003 fcc0 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80021f4:	2308      	movs	r3, #8
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002204:	2305      	movs	r3, #5
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	483c      	ldr	r0, [pc, #240]	; (8002300 <MX_GPIO_Init+0x260>)
 8002210:	f003 fcb0 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002214:	2301      	movs	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4839      	ldr	r0, [pc, #228]	; (800230c <MX_GPIO_Init+0x26c>)
 8002228:	f003 fca4 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800222c:	2310      	movs	r3, #16
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800223c:	2306      	movs	r3, #6
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	4831      	ldr	r0, [pc, #196]	; (800230c <MX_GPIO_Init+0x26c>)
 8002248:	f003 fc94 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin;
 800224c:	f244 0382 	movw	r3, #16514	; 0x4082
 8002250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4827      	ldr	r0, [pc, #156]	; (8002304 <MX_GPIO_Init+0x264>)
 8002266:	f003 fc85 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800226a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800226e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002270:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4821      	ldr	r0, [pc, #132]	; (8002308 <MX_GPIO_Init+0x268>)
 8002282:	f003 fc77 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002286:	f24f 0310 	movw	r3, #61456	; 0xf010
 800228a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	481a      	ldr	r0, [pc, #104]	; (8002308 <MX_GPIO_Init+0x268>)
 80022a0:	f003 fc68 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80022a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022b6:	2306      	movs	r3, #6
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	480f      	ldr	r0, [pc, #60]	; (8002300 <MX_GPIO_Init+0x260>)
 80022c2:	f003 fc57 	bl	8005b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022c6:	2320      	movs	r3, #32
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <MX_GPIO_Init+0x268>)
 80022da:	f003 fc4b 	bl	8005b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	2017      	movs	r0, #23
 80022e4:	f002 fee8 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022e8:	2017      	movs	r0, #23
 80022ea:	f002 ff11 	bl	8005110 <HAL_NVIC_EnableIRQ>

}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	; 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40020800 	.word	0x40020800
 8002304:	40020400 	.word	0x40020400
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40020000 	.word	0x40020000

08002310 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <MX_I2C1_Init+0x50>)
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <MX_I2C1_Init+0x54>)
 8002318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_I2C1_Init+0x50>)
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <MX_I2C1_Init+0x58>)
 800231e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_I2C1_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_I2C1_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_I2C1_Init+0x50>)
 800232e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <MX_I2C1_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_I2C1_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <MX_I2C1_Init+0x50>)
 800234e:	f005 fd75 	bl	8007e3c <HAL_I2C_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002358:	f001 f89c 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000488 	.word	0x20000488
 8002364:	40005400 	.word	0x40005400
 8002368:	000186a0 	.word	0x000186a0

0800236c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_I2C_MspInit+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12c      	bne.n	80023e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_I2C_MspInit+0x88>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a17      	ldr	r2, [pc, #92]	; (80023f4 <HAL_I2C_MspInit+0x88>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_I2C_MspInit+0x88>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80023aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b0:	2312      	movs	r3, #18
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023bc:	2304      	movs	r3, #4
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	480c      	ldr	r0, [pc, #48]	; (80023f8 <HAL_I2C_MspInit+0x8c>)
 80023c8:	f003 fbd4 	bl	8005b74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_I2C_MspInit+0x88>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_I2C_MspInit+0x88>)
 80023d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023da:	6413      	str	r3, [r2, #64]	; 0x40
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_I2C_MspInit+0x88>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40005400 	.word	0x40005400
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020400 	.word	0x40020400

080023fc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_I2C_MspDeInit+0x38>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10e      	bne.n	800242c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_I2C_MspDeInit+0x3c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_I2C_MspDeInit+0x3c>)
 8002414:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	4807      	ldr	r0, [pc, #28]	; (800243c <HAL_I2C_MspDeInit+0x40>)
 800241e:	f003 fe45 	bl	80060ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8002422:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <HAL_I2C_MspDeInit+0x40>)
 8002428:	f003 fe40 	bl	80060ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40005400 	.word	0x40005400
 8002438:	40023800 	.word	0x40023800
 800243c:	40020400 	.word	0x40020400

08002440 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fbdb 	bl	8002c06 <LCD5110_refresh_ll>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f503 7205 	add.w	r2, r3, #532	; 0x214
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f880 	bl	8002574 <LCD5110_wset_cursor>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f95f 	bl	800274a <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	2100      	movs	r1, #0
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff ffe1 	bl	8002458 <LCD5110_set_cursor>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 800249e:	b580      	push	{r7, lr}
 80024a0:	b084      	sub	sp, #16
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f893 	bl	80025e0 <LCD5110_wprint>
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	b08b      	sub	sp, #44	; 0x2c
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db41      	blt.n	8002562 <LCD5110_wputchar+0x9e>
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db3c      	blt.n	8002562 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80024ee:	461a      	mov	r2, r3
 80024f0:	2306      	movs	r3, #6
 80024f2:	4413      	add	r3, r2
 80024f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d833      	bhi.n	8002566 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002504:	461a      	mov	r2, r3
 8002506:	2308      	movs	r3, #8
 8002508:	4413      	add	r3, r2
 800250a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8002510:	4293      	cmp	r3, r2
 8002512:	d828      	bhi.n	8002566 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <LCD5110_wputchar+0xac>)
 8002516:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251e:	461a      	mov	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	18d0      	adds	r0, r2, r3
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800252a:	461a      	mov	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	18d1      	adds	r1, r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2206      	movs	r2, #6
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	441a      	add	r2, r3
 800253c:	2306      	movs	r3, #6
 800253e:	461e      	mov	r6, r3
 8002540:	2308      	movs	r3, #8
 8002542:	461c      	mov	r4, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461d      	mov	r5, r3
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	9501      	str	r5, [sp, #4]
 8002558:	9400      	str	r4, [sp, #0]
 800255a:	4633      	mov	r3, r6
 800255c:	f000 f950 	bl	8002800 <LCD5110_drawBitmap>
 8002560:	e002      	b.n	8002568 <LCD5110_wputchar+0xa4>
		return;
 8002562:	bf00      	nop
 8002564:	e000      	b.n	8002568 <LCD5110_wputchar+0xa4>
		return;
 8002566:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800256e:	bf00      	nop
 8002570:	08013554 	.word	0x08013554

08002574 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b21a      	sxth	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	b21a      	sxth	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	815a      	strh	r2, [r3, #10]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	2308      	movs	r3, #8
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4413      	add	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b21a      	sxth	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2202      	movs	r2, #2
 80025c6:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7b1b      	ldrb	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 80025d0:	6838      	ldr	r0, [r7, #0]
 80025d2:	f7ff ff35 	bl	8002440 <LCD5110_refresh>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 80025ee:	e053      	b.n	8002698 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b0a      	cmp	r3, #10
 80025f6:	d010      	beq.n	800261a <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025fe:	4618      	mov	r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002606:	4619      	mov	r1, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f7ff ff55 	bl	80024c4 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002620:	b29a      	uxth	r2, r3
 8002622:	2306      	movs	r3, #6
 8002624:	b29b      	uxth	r3, r3
 8002626:	4413      	add	r3, r2
 8002628:	b29b      	uxth	r3, r3
 800262a:	b21a      	sxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002636:	461a      	mov	r2, r3
 8002638:	2306      	movs	r3, #6
 800263a:	4413      	add	r3, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002642:	4293      	cmp	r3, r2
 8002644:	d904      	bls.n	8002650 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3301      	adds	r3, #1
 800264a:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 800264c:	2b0a      	cmp	r3, #10
 800264e:	d103      	bne.n	8002658 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b0a      	cmp	r3, #10
 8002656:	d111      	bne.n	800267c <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8002658:	6839      	ldr	r1, [r7, #0]
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff ff9f 	bl	800259e <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3301      	adds	r3, #1
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3301      	adds	r3, #1
 8002668:	4a10      	ldr	r2, [pc, #64]	; (80026ac <LCD5110_wprint+0xcc>)
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <LCD5110_wprint+0x9c>
				++str;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3301      	adds	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002682:	461a      	mov	r2, r3
 8002684:	2308      	movs	r3, #8
 8002686:	4413      	add	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800268e:	4293      	cmp	r3, r2
 8002690:	d807      	bhi.n	80026a2 <LCD5110_wprint+0xc2>
			break;
		str++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3301      	adds	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1a7      	bne.n	80025f0 <LCD5110_wprint+0x10>

	}
}
 80026a0:	e000      	b.n	80026a4 <LCD5110_wprint+0xc4>
			break;
 80026a2:	bf00      	nop
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	08013b84 	.word	0x08013b84

080026b0 <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 80026b0:	b40c      	push	{r2, r3}
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b09e      	sub	sp, #120	; 0x78
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 80026bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80026c0:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 80026c2:	f107 0010 	add.w	r0, r7, #16
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80026cc:	2164      	movs	r1, #100	; 0x64
 80026ce:	f00e fca1 	bl	8011014 <vsniprintf>
 80026d2:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6839      	ldr	r1, [r7, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fede 	bl	800249e <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff fea7 	bl	8002440 <LCD5110_refresh>

	va_end(vargs);

	return res;
 80026f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3778      	adds	r7, #120	; 0x78
 80026f8:	46bd      	mov	sp, r7
 80026fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026fe:	b002      	add	sp, #8
 8002700:	4770      	bx	lr

08002702 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8002702:	b480      	push	{r7}
 8002704:	b087      	sub	sp, #28
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	10db      	asrs	r3, r3, #3
 8002712:	2254      	movs	r2, #84	; 0x54
 8002714:	fb02 f203 	mul.w	r2, r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4413      	add	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	2201      	movs	r2, #1
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	753b      	strb	r3, [r7, #20]

	return res;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	461a      	mov	r2, r3
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	e893 0003 	ldmia.w	r3, {r0, r1}
 800273a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e008      	b.n	800276a <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	331c      	adds	r3, #28
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3301      	adds	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002770:	dbf2      	blt.n	8002758 <LCD5110_clrscr+0xe>
	}
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db31      	blt.n	80027f8 <LCD5110_putpix+0x78>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db2e      	blt.n	80027f8 <LCD5110_putpix+0x78>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b53      	cmp	r3, #83	; 0x53
 800279e:	dc2b      	bgt.n	80027f8 <LCD5110_putpix+0x78>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b2f      	cmp	r3, #47	; 0x2f
 80027a4:	dc28      	bgt.n	80027f8 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	68f9      	ldr	r1, [r7, #12]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ffa7 	bl	8002702 <xy_to_pix>

	if (color)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	7f19      	ldrb	r1, [r3, #28]
 80027c2:	7d3a      	ldrb	r2, [r7, #20]
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	b2d1      	uxtb	r1, r2
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	460a      	mov	r2, r1
 80027d0:	771a      	strb	r2, [r3, #28]
 80027d2:	e012      	b.n	80027fa <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	7f1b      	ldrb	r3, [r3, #28]
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	7d3b      	ldrb	r3, [r7, #20]
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4013      	ands	r3, r2
 80027e8:	b25a      	sxtb	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	b2d1      	uxtb	r1, r2
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	460a      	mov	r2, r1
 80027f4:	771a      	strb	r2, [r3, #28]
 80027f6:	e000      	b.n	80027fa <LCD5110_putpix+0x7a>
		return;
 80027f8:	bf00      	nop
}
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	e042      	b.n	800289a <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e038      	b.n	800288c <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da00      	bge.n	8002822 <LCD5110_drawBitmap+0x22>
 8002820:	3307      	adds	r3, #7
 8002822:	10db      	asrs	r3, r3, #3
 8002824:	461a      	mov	r2, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	fb03 f202 	mul.w	r2, r3, r2
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	461a      	mov	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	425a      	negs	r2, r3
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	f002 0207 	and.w	r2, r2, #7
 8002846:	bf58      	it	pl
 8002848:	4253      	negpl	r3, r2
 800284a:	2201      	movs	r2, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	b25a      	sxtb	r2, r3
 8002852:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002856:	4013      	ands	r3, r2
 8002858:	b25b      	sxtb	r3, r3
 800285a:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	18d0      	adds	r0, r2, r3
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	18d1      	adds	r1, r2, r3
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d007      	beq.n	800287e <LCD5110_drawBitmap+0x7e>
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b00      	cmp	r3, #0
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	e000      	b.n	8002880 <LCD5110_drawBitmap+0x80>
 800287e:	7dfa      	ldrb	r2, [r7, #23]
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	f7ff ff7d 	bl	8002780 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	3301      	adds	r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	429a      	cmp	r2, r3
 8002892:	dbc2      	blt.n	800281a <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dbb8      	blt.n	8002814 <LCD5110_drawBitmap+0x14>
		}
	}
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	1df9      	adds	r1, r7, #7
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	2201      	movs	r2, #1
 80028c4:	f007 fb1a 	bl	8009efc <HAL_SPI_Transmit>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	460b      	mov	r3, r1
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	897a      	ldrh	r2, [r7, #10]
 80028e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ea:	68f9      	ldr	r1, [r7, #12]
 80028ec:	f007 fb06 	bl	8009efc <HAL_SPI_Transmit>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6898      	ldr	r0, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	889b      	ldrh	r3, [r3, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	4619      	mov	r1, r3
 800290e:	f003 fccf 	bl	80062b0 <HAL_GPIO_WritePin>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6998      	ldr	r0, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8a9b      	ldrh	r3, [r3, #20]
 800292a:	2201      	movs	r2, #1
 800292c:	4619      	mov	r1, r3
 800292e:	f003 fcbf 	bl	80062b0 <HAL_GPIO_WritePin>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6998      	ldr	r0, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8a9b      	ldrh	r3, [r3, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	4619      	mov	r1, r3
 800294e:	f003 fcaf 	bl	80062b0 <HAL_GPIO_WritePin>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6918      	ldr	r0, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	899b      	ldrh	r3, [r3, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	4619      	mov	r1, r3
 800296e:	f003 fc9f 	bl	80062b0 <HAL_GPIO_WritePin>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6918      	ldr	r0, [r3, #16]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	899b      	ldrh	r3, [r3, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	4619      	mov	r1, r3
 800298e:	f003 fc8f 	bl	80062b0 <HAL_GPIO_WritePin>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4603      	mov	r3, r0
 80029a2:	6039      	str	r1, [r7, #0]
 80029a4:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f023 0320 	bic.w	r3, r3, #32
 80029ac:	2b07      	cmp	r3, #7
 80029ae:	dd01      	ble.n	80029b4 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e008      	b.n	80029c6 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f043 0320 	orr.w	r3, r3, #32
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	6839      	ldr	r1, [r7, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ff74 	bl	80028ac <send_byte_to_LCD5110>
	return LCD5110_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	4603      	mov	r3, r0
 80029d6:	6039      	str	r1, [r7, #0]
 80029d8:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f023 030d 	bic.w	r3, r3, #13
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 80029e4:	2302      	movs	r3, #2
 80029e6:	e005      	b.n	80029f4 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	6839      	ldr	r1, [r7, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <send_byte_to_LCD5110>
	return LCD5110_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	da01      	bge.n	8002a14 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e008      	b.n	8002a26 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ff44 	bl	80028ac <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	6039      	str	r1, [r7, #0]
 8002a38:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d901      	bls.n	8002a44 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8002a40:	2304      	movs	r3, #4
 8002a42:	e008      	b.n	8002a56 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff2c 	bl	80028ac <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	6039      	str	r1, [r7, #0]
 8002a68:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b07      	cmp	r3, #7
 8002a6e:	d901      	bls.n	8002a74 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8002a70:	2305      	movs	r3, #5
 8002a72:	e008      	b.n	8002a86 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	f043 0310 	orr.w	r3, r3, #16
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ff14 	bl	80028ac <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	6039      	str	r1, [r7, #0]
 8002a98:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8002a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db03      	blt.n	8002aaa <LCD5110_set_X_base+0x1c>
 8002aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa6:	2b53      	cmp	r3, #83	; 0x53
 8002aa8:	dd01      	ble.n	8002aae <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8002aaa:	2307      	movs	r3, #7
 8002aac:	e00a      	b.n	8002ac4 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ab6:	b25b      	sxtb	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fef5 	bl	80028ac <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8002ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db03      	blt.n	8002ae8 <LCD5110_set_Y_base+0x1c>
 8002ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	dd01      	ble.n	8002aec <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8002ae8:	2307      	movs	r3, #7
 8002aea:	e00a      	b.n	8002b02 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	6839      	ldr	r1, [r7, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fed6 	bl	80028ac <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	603a      	str	r2, [r7, #0]
 8002b14:	80fb      	strh	r3, [r7, #6]
 8002b16:	460b      	mov	r3, r1
 8002b18:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8002b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ffb4 	bl	8002a8e <LCD5110_set_X_base>
 8002b26:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <LCD5110_set_XY_base+0x28>
		return res;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	e00c      	b.n	8002b4c <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8002b32:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b36:	6839      	ldr	r1, [r7, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ffc7 	bl	8002acc <LCD5110_set_Y_base>
 8002b3e:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <LCD5110_set_XY_base+0x40>
		return res;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	e000      	b.n	8002b4c <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	70fb      	strb	r3, [r7, #3]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	70bb      	strb	r3, [r7, #2]
 8002b92:	4613      	mov	r3, r2
 8002b94:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff ffdc 	bl	8002b54 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff feac 	bl	80028fa <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fee9 	bl	800297a <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8002ba8:	2364      	movs	r3, #100	; 0x64
 8002baa:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8002bac:	bf00      	nop
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1fa      	bne.n	8002bae <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff fece 	bl	800295a <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff febb 	bl	800293a <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f7ff fee7 	bl	800299a <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8002bcc:	78bb      	ldrb	r3, [r7, #2]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff13 	bl	80029fc <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8002bd6:	787b      	ldrb	r3, [r7, #1]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff27 	bl	8002a2e <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8002be0:	7e3b      	ldrb	r3, [r7, #24]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff3a 	bl	8002a5e <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7ff fed4 	bl	800299a <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fee9 	bl	80029ce <LCD5110_set_mode_base>

	return LCD5110_OK;
 8002bfc:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fe73 	bl	80028fa <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fe90 	bl	800293a <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7ff ff73 	bl	8002b0a <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fe78 	bl	800291a <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	331c      	adds	r3, #28
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fe4c 	bl	80028d2 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_GPIO_EXTI_Callback>:
volatile int pressed = 0;
volatile int button_is_pressed = 0;
volatile int loop_counter = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]

 if (GPIO_Pin == GPIO_PIN_8) {
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c54:	d129      	bne.n	8002caa <HAL_GPIO_EXTI_Callback+0x66>

  static uint32_t last_change_tick;
  if (HAL_GetTick() - last_change_tick < 50) {
 8002c56:	f001 fd31 	bl	80046bc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b43      	ldr	r3, [pc, #268]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x128>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b31      	cmp	r3, #49	; 0x31
 8002c64:	d97a      	bls.n	8002d5c <HAL_GPIO_EXTI_Callback+0x118>
	  return;
  }

  last_change_tick = HAL_GetTick();
 8002c66:	f001 fd29 	bl	80046bc <HAL_GetTick>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4a3f      	ldr	r2, [pc, #252]	; (8002d6c <HAL_GPIO_EXTI_Callback+0x128>)
 8002c6e:	6013      	str	r3, [r2, #0]

  if (button_is_pressed) {
 8002c70:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_GPIO_EXTI_Callback+0x60>
	  button_is_pressed = 0;
 8002c78:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
	  ++pressed;
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x130>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	4a3b      	ldr	r2, [pc, #236]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x130>)
 8002c86:	6013      	str	r3, [r2, #0]
	  if (light == -1) {
 8002c88:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c90:	d103      	bne.n	8002c9a <HAL_GPIO_EXTI_Callback+0x56>
		  light = 0;
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	e007      	b.n	8002caa <HAL_GPIO_EXTI_Callback+0x66>
	  } else {
		  light = -1;
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e002      	b.n	8002caa <HAL_GPIO_EXTI_Callback+0x66>
	  }
  } else {
	  button_is_pressed = 1;
 8002ca4:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }
 }


 if (GPIO_Pin == GPIO_PIN_9) {
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb0:	d127      	bne.n	8002d02 <HAL_GPIO_EXTI_Callback+0xbe>

	 static uint32_t last_change_tick;

	 if( HAL_GetTick() - last_change_tick < 50) {
 8002cb2:	f001 fd03 	bl	80046bc <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_GPIO_EXTI_Callback+0x138>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b31      	cmp	r3, #49	; 0x31
 8002cc0:	d94e      	bls.n	8002d60 <HAL_GPIO_EXTI_Callback+0x11c>
		 return;
	 }
	 last_change_tick = HAL_GetTick();
 8002cc2:	f001 fcfb 	bl	80046bc <HAL_GetTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <HAL_GPIO_EXTI_Callback+0x138>)
 8002cca:	6013      	str	r3, [r2, #0]

	 if (button_is_pressed)
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d013      	beq.n	8002cfc <HAL_GPIO_EXTI_Callback+0xb8>
	 {
	   button_is_pressed = 0;
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
	   ++pressed;
 8002cda:	4b26      	ldr	r3, [pc, #152]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x130>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x130>)
 8002ce2:	6013      	str	r3, [r2, #0]
	   if (light == 1) {
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d103      	bne.n	8002cf4 <HAL_GPIO_EXTI_Callback+0xb0>
		   light = 0;
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	e006      	b.n	8002d02 <HAL_GPIO_EXTI_Callback+0xbe>
	   } else {
		   light = 1;
 8002cf4:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_EXTI_Callback+0xbe>
	   }
	 } else {
		 button_is_pressed = 1;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
	 }
 }

 if (GPIO_Pin == GPIO_PIN_10) {
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d08:	d12d      	bne.n	8002d66 <HAL_GPIO_EXTI_Callback+0x122>
	 static uint32_t last_change_tick;

	 if (HAL_GetTick() - last_change_tick < 50) {
 8002d0a:	f001 fcd7 	bl	80046bc <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b31      	cmp	r3, #49	; 0x31
 8002d18:	d924      	bls.n	8002d64 <HAL_GPIO_EXTI_Callback+0x120>
		 return;
	 }
	 last_change_tick = HAL_GetTick();
 8002d1a:	f001 fccf 	bl	80046bc <HAL_GetTick>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002d22:	6013      	str	r3, [r2, #0]

	 if (button_is_pressed) {
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d013      	beq.n	8002d54 <HAL_GPIO_EXTI_Callback+0x110>
		 button_is_pressed = 0;
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
		 ++pressed;
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x130>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <HAL_GPIO_EXTI_Callback+0x130>)
 8002d3a:	6013      	str	r3, [r2, #0]

		 if (light == 2) {
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d103      	bne.n	8002d4c <HAL_GPIO_EXTI_Callback+0x108>
			 light = 0;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e00c      	b.n	8002d66 <HAL_GPIO_EXTI_Callback+0x122>
		 } else {
			 light = 2;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_GPIO_EXTI_Callback+0x134>)
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e008      	b.n	8002d66 <HAL_GPIO_EXTI_Callback+0x122>
		 }
	 } else {
		 button_is_pressed = 1;
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_GPIO_EXTI_Callback+0x12c>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_EXTI_Callback+0x122>
	  return;
 8002d5c:	bf00      	nop
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_EXTI_Callback+0x122>
		 return;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_EXTI_Callback+0x122>
		 return;
 8002d64:	bf00      	nop
	 }
 }
}
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000310 	.word	0x20000310
 8002d70:	200002f8 	.word	0x200002f8
 8002d74:	200002f4 	.word	0x200002f4
 8002d78:	200002f0 	.word	0x200002f0
 8002d7c:	20000314 	.word	0x20000314
 8002d80:	20000318 	.word	0x20000318

08002d84 <HAL_TIM_PeriodElapsedCallback>:
int16_t Gyro_Y_RAW = 0;
int16_t Gyro_Z_RAW = 0;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  if (htim -> Instance == TIM10) {
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a06      	ldr	r2, [pc, #24]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d106      	bne.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x20>
	  MPU6050_Read_Accel();
 8002d96:	f000 f929 	bl	8002fec <MPU6050_Read_Accel>
	  ++tim10_overflows;
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a03      	ldr	r2, [pc, #12]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002da2:	6013      	str	r3, [r2, #0]
  }

}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40014400 	.word	0x40014400
 8002db0:	20000300 	.word	0x20000300

08002db4 <TIM10_reinit>:

static inline void TIM10_reinit() {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(&htim10);
 8002db8:	4807      	ldr	r0, [pc, #28]	; (8002dd8 <TIM10_reinit+0x24>)
 8002dba:	f007 fd37 	bl	800a82c <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER( &htim10, 0 );
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <TIM10_reinit+0x24>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
	tim10_overflows = 0;
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <TIM10_reinit+0x28>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <TIM10_reinit+0x24>)
 8002dce:	f007 fd8f 	bl	800a8f0 <HAL_TIM_Base_Start_IT>

}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000e3c 	.word	0x20000e3c
 8002ddc:	20000300 	.word	0x20000300

08002de0 <HAL_TIM_PWM_PulseFinishedCallback>:

	while( get_tim10_us() < before+useconds){}

}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {  // callback when dma finished data transfering
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);  // stop dma, when data transfering has finished
 8002de8:	2100      	movs	r1, #0
 8002dea:	4805      	ldr	r0, [pc, #20]	; (8002e00 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002dec:	f008 f91c 	bl	800b028 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000e84 	.word	0x20000e84
 8002e04:	20000304 	.word	0x20000304

08002e08 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]

	LED_Data[LEDnum][0] = LEDnum;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	b2d9      	uxtb	r1, r3
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <Set_LED+0x58>)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	b2d9      	uxtb	r1, r3
 8002e26:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <Set_LED+0x58>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	460a      	mov	r2, r1
 8002e30:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	b2d9      	uxtb	r1, r3
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <Set_LED+0x58>)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	460a      	mov	r2, r1
 8002e40:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	b2d9      	uxtb	r1, r3
 8002e46:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <Set_LED+0x58>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	460a      	mov	r2, r1
 8002e50:	70da      	strb	r2, [r3, #3]

}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000704 	.word	0x20000704

08002e64 <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50]; // 24 bits leds + 50 eset code

void WS2812_Send (void) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0

	uint32_t indx=0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	e036      	b.n	8002ee2 <WS2812_Send+0x7e>

		#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
		#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8002e74:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <WS2812_Send+0xcc>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	785b      	ldrb	r3, [r3, #1]
 8002e7e:	041a      	lsls	r2, r3, #16
 8002e80:	492b      	ldr	r1, [pc, #172]	; (8002f30 <WS2812_Send+0xcc>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	789b      	ldrb	r3, [r3, #2]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	4928      	ldr	r1, [pc, #160]	; (8002f30 <WS2812_Send+0xcc>)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	78db      	ldrb	r3, [r3, #3]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	607b      	str	r3, [r7, #4]
		#endif

		for (int i = 23; i >= 0; i--) {
 8002e9c:	2317      	movs	r3, #23
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	e019      	b.n	8002ed6 <WS2812_Send+0x72>

			if (color&(1 << i)) {
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <WS2812_Send+0x5c>
				pwmData[indx] = 57; // duty cycle is 64% from datasheet
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <WS2812_Send+0xd0>)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2139      	movs	r1, #57	; 0x39
 8002eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002ebe:	e004      	b.n	8002eca <WS2812_Send+0x66>
			}

			else pwmData[indx] = 28;  // if the bit is 0, the duty cycle is 32%
 8002ec0:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <WS2812_Send+0xd0>)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	211c      	movs	r1, #28
 8002ec6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	dae2      	bge.n	8002ea2 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b19      	cmp	r3, #25
 8002ee6:	ddc5      	ble.n	8002e74 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++) { // reset code
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	e00a      	b.n	8002f04 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8002eee:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <WS2812_Send+0xd0>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) { // reset code
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	3301      	adds	r3, #1
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b31      	cmp	r3, #49	; 0x31
 8002f08:	ddf1      	ble.n	8002eee <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send to dma
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <WS2812_Send+0xd0>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	4809      	ldr	r0, [pc, #36]	; (8002f38 <WS2812_Send+0xd4>)
 8002f14:	f007 fe4e 	bl	800abb4 <HAL_TIM_PWM_Start_DMA>

	while (!datasentflag){};  // set flag when data has been transmitted
 8002f18:	bf00      	nop
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <WS2812_Send+0xd8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0fb      	beq.n	8002f1a <WS2812_Send+0xb6>
	datasentflag = 0;
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <WS2812_Send+0xd8>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

}
 8002f28:	bf00      	nop
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000704 	.word	0x20000704
 8002f34:	200007dc 	.word	0x200007dc
 8002f38:	20000e84 	.word	0x20000e84
 8002f3c:	20000304 	.word	0x20000304

08002f40 <MPU6050_Init>:


void MPU6050_Init (void) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af04      	add	r7, sp, #16

	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	1dfb      	adds	r3, r7, #7
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2301      	movs	r3, #1
 8002f56:	2275      	movs	r2, #117	; 0x75
 8002f58:	21d0      	movs	r1, #208	; 0xd0
 8002f5a:	4823      	ldr	r0, [pc, #140]	; (8002fe8 <MPU6050_Init+0xa8>)
 8002f5c:	f005 fa8c 	bl	8008478 <HAL_I2C_Mem_Read>

	if (check == 104) { // 0x68 will be returned by the sensor if everything goes well
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b68      	cmp	r3, #104	; 0x68
 8002f64:	d13b      	bne.n	8002fde <MPU6050_Init+0x9e>
    // power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8002f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6e:	9302      	str	r3, [sp, #8]
 8002f70:	2301      	movs	r3, #1
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	1dbb      	adds	r3, r7, #6
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	226b      	movs	r2, #107	; 0x6b
 8002f7c:	21d0      	movs	r1, #208	; 0xd0
 8002f7e:	481a      	ldr	r0, [pc, #104]	; (8002fe8 <MPU6050_Init+0xa8>)
 8002f80:	f005 f974 	bl	800826c <HAL_I2C_Mem_Write>

    // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002f84:	2307      	movs	r3, #7
 8002f86:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f8c:	9302      	str	r3, [sp, #8]
 8002f8e:	2301      	movs	r3, #1
 8002f90:	9301      	str	r3, [sp, #4]
 8002f92:	1dbb      	adds	r3, r7, #6
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2301      	movs	r3, #1
 8002f98:	2219      	movs	r2, #25
 8002f9a:	21d0      	movs	r1, #208	; 0xd0
 8002f9c:	4812      	ldr	r0, [pc, #72]	; (8002fe8 <MPU6050_Init+0xa8>)
 8002f9e:	f005 f965 	bl	800826c <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002faa:	9302      	str	r3, [sp, #8]
 8002fac:	2301      	movs	r3, #1
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	1dbb      	adds	r3, r7, #6
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	221c      	movs	r2, #28
 8002fb8:	21d0      	movs	r1, #208	; 0xd0
 8002fba:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <MPU6050_Init+0xa8>)
 8002fbc:	f005 f956 	bl	800826c <HAL_I2C_Mem_Write>

    // Set Gyroscopic configuration in GYRO_CONFIG Register
    // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
    	Data = 0x00;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fc8:	9302      	str	r3, [sp, #8]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	1dbb      	adds	r3, r7, #6
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	221b      	movs	r2, #27
 8002fd6:	21d0      	movs	r1, #208	; 0xd0
 8002fd8:	4803      	ldr	r0, [pc, #12]	; (8002fe8 <MPU6050_Init+0xa8>)
 8002fda:	f005 f947 	bl	800826c <HAL_I2C_Mem_Write>
	}

}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000488 	.word	0x20000488

08002fec <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2301      	movs	r3, #1
 8003002:	223b      	movs	r2, #59	; 0x3b
 8003004:	21d0      	movs	r1, #208	; 0xd0
 8003006:	4831      	ldr	r0, [pc, #196]	; (80030cc <MPU6050_Read_Accel+0xe0>)
 8003008:	f005 fa36 	bl	8008478 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800300c:	783b      	ldrb	r3, [r7, #0]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	b21a      	sxth	r2, r3
 8003012:	787b      	ldrb	r3, [r7, #1]
 8003014:	b21b      	sxth	r3, r3
 8003016:	4313      	orrs	r3, r2
 8003018:	b21a      	sxth	r2, r3
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <MPU6050_Read_Accel+0xe4>)
 800301c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800301e:	78bb      	ldrb	r3, [r7, #2]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	b21a      	sxth	r2, r3
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	b21b      	sxth	r3, r3
 8003028:	4313      	orrs	r3, r2
 800302a:	b21a      	sxth	r2, r3
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <MPU6050_Read_Accel+0xe8>)
 800302e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003030:	793b      	ldrb	r3, [r7, #4]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	b21a      	sxth	r2, r3
 8003036:	797b      	ldrb	r3, [r7, #5]
 8003038:	b21b      	sxth	r3, r3
 800303a:	4313      	orrs	r3, r2
 800303c:	b21a      	sxth	r2, r3
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <MPU6050_Read_Accel+0xec>)
 8003040:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
       we have to divide according to the Full scale value set in FS_SEL
       I have configured FS_SEL = 0. So I am dividing by 16384.0
       for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <MPU6050_Read_Accel+0xe4>)
 8003044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fa73 	bl	8000534 <__aeabi_i2d>
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <MPU6050_Read_Accel+0xf0>)
 8003054:	f7fd fc02 	bl	800085c <__aeabi_ddiv>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fdaa 	bl	8000bb8 <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <MPU6050_Read_Accel+0xf4>)
 8003068:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <MPU6050_Read_Accel+0xe8>)
 800306c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fa5f 	bl	8000534 <__aeabi_i2d>
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MPU6050_Read_Accel+0xf0>)
 800307c:	f7fd fbee 	bl	800085c <__aeabi_ddiv>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fd96 	bl	8000bb8 <__aeabi_d2f>
 800308c:	4603      	mov	r3, r0
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <MPU6050_Read_Accel+0xf8>)
 8003090:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/16384.0;
 8003092:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <MPU6050_Read_Accel+0xec>)
 8003094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa4b 	bl	8000534 <__aeabi_i2d>
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <MPU6050_Read_Accel+0xf0>)
 80030a4:	f7fd fbda 	bl	800085c <__aeabi_ddiv>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fd82 	bl	8000bb8 <__aeabi_d2f>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <MPU6050_Read_Accel+0xfc>)
 80030b8:	6013      	str	r3, [r2, #0]

	loop_counter++;
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <MPU6050_Read_Accel+0x100>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <MPU6050_Read_Accel+0x100>)
 80030c2:	6013      	str	r3, [r2, #0]

}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000488 	.word	0x20000488
 80030d0:	20000308 	.word	0x20000308
 80030d4:	2000030a 	.word	0x2000030a
 80030d8:	2000030c 	.word	0x2000030c
 80030dc:	40d00000 	.word	0x40d00000
 80030e0:	20000d20 	.word	0x20000d20
 80030e4:	200007d4 	.word	0x200007d4
 80030e8:	20000d24 	.word	0x20000d24
 80030ec:	200002fc 	.word	0x200002fc

080030f0 <attention_signal.10446>:
  * @retval int
  */

int main(void) {
  /* USER CODE BEGIN 1 */
	  void attention_signal() {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	f8c7 c004 	str.w	ip, [r7, #4]

		  for (int i = 0; i < 30; i++) {
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e008      	b.n	8003112 <attention_signal.10446+0x22>
			  Set_LED(i, 139, 0, 0);
 8003100:	2300      	movs	r3, #0
 8003102:	2200      	movs	r2, #0
 8003104:	218b      	movs	r1, #139	; 0x8b
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff fe7e 	bl	8002e08 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3301      	adds	r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b1d      	cmp	r3, #29
 8003116:	ddf3      	ble.n	8003100 <attention_signal.10446+0x10>
		  }

		  WS2812_Send();
 8003118:	f7ff fea4 	bl	8002e64 <WS2812_Send>
		  HAL_Delay(700);
 800311c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003120:	f001 fad8 	bl	80046d4 <HAL_Delay>

		  for (int i = 0; i < 30; i++) {
 8003124:	2300      	movs	r3, #0
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	e008      	b.n	800313c <attention_signal.10446+0x4c>
			  Set_LED(i, 0, 0, 0);
 800312a:	2300      	movs	r3, #0
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	68b8      	ldr	r0, [r7, #8]
 8003132:	f7ff fe69 	bl	8002e08 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	3301      	adds	r3, #1
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b1d      	cmp	r3, #29
 8003140:	ddf3      	ble.n	800312a <attention_signal.10446+0x3a>
		  }

		  WS2812_Send();
 8003142:	f7ff fe8f 	bl	8002e64 <WS2812_Send>
		  HAL_Delay(550);
 8003146:	f240 2026 	movw	r0, #550	; 0x226
 800314a:	f001 fac3 	bl	80046d4 <HAL_Delay>

	  };
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <main>:
int main(void) {
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b087      	sub	sp, #28
 800315c:	af02      	add	r7, sp, #8
 800315e:	f107 0320 	add.w	r3, r7, #32
 8003162:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003164:	f001 fa44 	bl	80045f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003168:	f000 f92c 	bl	80033c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800316c:	f7fe ff98 	bl	80020a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003170:	f7ff f8ce 	bl	8002310 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003174:	f000 f99e 	bl	80034b4 <MX_SPI1_Init>
  MX_DMA_Init();
 8003178:	f7fe ff6a 	bl	8002050 <MX_DMA_Init>
  MX_USB_HOST_Init();
 800317c:	f00c feb0 	bl	800fee0 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8003180:	f001 f848 	bl	8004214 <MX_TIM1_Init>
  MX_ADC1_Init();
 8003184:	f7fe fe8c 	bl	8001ea0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003188:	f000 f9ca 	bl	8003520 <MX_SPI2_Init>
  MX_TIM10_Init();
 800318c:	f001 f8e2 	bl	8004354 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


  lcd1.hw_conf.spi_handle = &hspi2;
 8003190:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <main+0x198>)
 8003192:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <main+0x19c>)
 8003194:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 8003196:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <main+0x198>)
 8003198:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800319c:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 800319e:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <main+0x198>)
 80031a0:	4a55      	ldr	r2, [pc, #340]	; (80032f8 <main+0x1a0>)
 80031a2:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 80031a4:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <main+0x198>)
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 80031aa:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <main+0x198>)
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <main+0x1a0>)
 80031ae:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <main+0x198>)
 80031b2:	2202      	movs	r2, #2
 80031b4:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 80031b6:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <main+0x198>)
 80031b8:	4a4f      	ldr	r2, [pc, #316]	; (80032f8 <main+0x1a0>)
 80031ba:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 80031bc:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <main+0x198>)
 80031be:	4a4f      	ldr	r2, [pc, #316]	; (80032fc <main+0x1a4>)
 80031c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031c4:	4614      	mov	r4, r2
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	6861      	ldr	r1, [r4, #4]
 80031ca:	68a2      	ldr	r2, [r4, #8]
 80031cc:	c307      	stmia	r3!, {r0, r1, r2}
 80031ce:	89a2      	ldrh	r2, [r4, #12]
 80031d0:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 80031d2:	2303      	movs	r3, #3
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2302      	movs	r3, #2
 80031d8:	2240      	movs	r2, #64	; 0x40
 80031da:	210c      	movs	r1, #12
 80031dc:	4844      	ldr	r0, [pc, #272]	; (80032f0 <main+0x198>)
 80031de:	f7ff fccd 	bl	8002b7c <LCD5110_init>

  if (BSP_ACCELERO_Init() != HAL_OK) {
 80031e2:	f000 fd3d 	bl	8003c60 <BSP_ACCELERO_Init>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <main+0xa0>
    /* Initialization Error */
	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 80031ec:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <main+0x198>)
 80031ee:	2101      	movs	r1, #1
 80031f0:	4843      	ldr	r0, [pc, #268]	; (8003300 <main+0x1a8>)
 80031f2:	f7ff f954 	bl	800249e <LCD5110_print>
	  while(1){}
 80031f6:	e7fe      	b.n	80031f6 <main+0x9e>
  }

  if (BSP_GYRO_Init() != HAL_OK) {
 80031f8:	f000 fdf4 	bl	8003de4 <BSP_GYRO_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <main+0xb6>
	  /* Initialization Error */
	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 8003202:	4a3b      	ldr	r2, [pc, #236]	; (80032f0 <main+0x198>)
 8003204:	2101      	movs	r1, #1
 8003206:	483e      	ldr	r0, [pc, #248]	; (8003300 <main+0x1a8>)
 8003208:	f7ff f949 	bl	800249e <LCD5110_print>
	  while(1){}
 800320c:	e7fe      	b.n	800320c <main+0xb4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  int16_t buffer[3] = {0};
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	809a      	strh	r2, [r3, #4]

  MPU6050_Init();
 8003216:	f7ff fe93 	bl	8002f40 <MPU6050_Init>
  TIM10_reinit();
 800321a:	f7ff fdcb 	bl	8002db4 <TIM10_reinit>
//			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
//			   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
//		   }
		  };

	  if (Az > 0.8) {
 800321e:	4b39      	ldr	r3, [pc, #228]	; (8003304 <main+0x1ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd f998 	bl	8000558 <__aeabi_f2d>
 8003228:	a32f      	add	r3, pc, #188	; (adr r3, 80032e8 <main+0x190>)
 800322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322e:	f7fd fc7b 	bl	8000b28 <__aeabi_dcmpgt>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <main+0xec>
		  turn_signal(1);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	469c      	mov	ip, r3
 800323c:	2001      	movs	r0, #1
 800323e:	f000 f871 	bl	8003324 <turn_signal.10457>
 8003242:	e017      	b.n	8003274 <main+0x11c>
	  } else if (Ax > 0.8) {
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <main+0x1b0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd f985 	bl	8000558 <__aeabi_f2d>
 800324e:	a326      	add	r3, pc, #152	; (adr r3, 80032e8 <main+0x190>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd fc68 	bl	8000b28 <__aeabi_dcmpgt>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <main+0x114>
		  turn_signal(-1);
 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	469c      	mov	ip, r3
 8003262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003266:	f000 f85d 	bl	8003324 <turn_signal.10457>
 800326a:	e003      	b.n	8003274 <main+0x11c>
		} else {
			attention_signal();
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	469c      	mov	ip, r3
 8003270:	f7ff ff3e 	bl	80030f0 <attention_signal.10446>
		}

//	 MPU6050_Read_Accel();
	 LCD5110_printf(&lcd1, BLACK, "Ax=%f \n", Ax);
 8003274:	4b24      	ldr	r3, [pc, #144]	; (8003308 <main+0x1b0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd f96d 	bl	8000558 <__aeabi_f2d>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	e9cd 2300 	strd	r2, r3, [sp]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <main+0x1b4>)
 8003288:	2101      	movs	r1, #1
 800328a:	4819      	ldr	r0, [pc, #100]	; (80032f0 <main+0x198>)
 800328c:	f7ff fa10 	bl	80026b0 <LCD5110_printf>
	 LCD5110_printf(&lcd1, BLACK, "Ay=%f \n", Ay);
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <main+0x1b8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f95f 	bl	8000558 <__aeabi_f2d>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	e9cd 2300 	strd	r2, r3, [sp]
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <main+0x1bc>)
 80032a4:	2101      	movs	r1, #1
 80032a6:	4812      	ldr	r0, [pc, #72]	; (80032f0 <main+0x198>)
 80032a8:	f7ff fa02 	bl	80026b0 <LCD5110_printf>
	 LCD5110_printf(&lcd1, BLACK, "Az=%f \n", Az);
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <main+0x1ac>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f951 	bl	8000558 <__aeabi_f2d>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	e9cd 2300 	strd	r2, r3, [sp]
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <main+0x1c0>)
 80032c0:	2101      	movs	r1, #1
 80032c2:	480b      	ldr	r0, [pc, #44]	; (80032f0 <main+0x198>)
 80032c4:	f7ff f9f4 	bl	80026b0 <LCD5110_printf>
	 LCD5110_printf(&lcd1, BLACK, "Count=%i \n", loop_counter);
 80032c8:	4b14      	ldr	r3, [pc, #80]	; (800331c <main+0x1c4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <main+0x1c8>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	4807      	ldr	r0, [pc, #28]	; (80032f0 <main+0x198>)
 80032d2:	f7ff f9ed 	bl	80026b0 <LCD5110_printf>
//	 HAL_Delay(100);

	 LCD5110_clear_scr(&lcd1);
 80032d6:	4806      	ldr	r0, [pc, #24]	; (80032f0 <main+0x198>)
 80032d8:	f7ff f8d0 	bl	800247c <LCD5110_clear_scr>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80032dc:	f00c fe26 	bl	800ff2c <MX_USB_HOST_Process>
  {
 80032e0:	e79d      	b.n	800321e <main+0xc6>
 80032e2:	bf00      	nop
 80032e4:	f3af 8000 	nop.w
 80032e8:	9999999a 	.word	0x9999999a
 80032ec:	3fe99999 	.word	0x3fe99999
 80032f0:	200004e0 	.word	0x200004e0
 80032f4:	20000d2c 	.word	0x20000d2c
 80032f8:	40020400 	.word	0x40020400
 80032fc:	08013b54 	.word	0x08013b54
 8003300:	080132d8 	.word	0x080132d8
 8003304:	20000d24 	.word	0x20000d24
 8003308:	20000d20 	.word	0x20000d20
 800330c:	080132f0 	.word	0x080132f0
 8003310:	200007d4 	.word	0x200007d4
 8003314:	080132f8 	.word	0x080132f8
 8003318:	08013300 	.word	0x08013300
 800331c:	200002fc 	.word	0x200002fc
 8003320:	08013308 	.word	0x08013308

08003324 <turn_signal.10457>:
	  void turn_signal (int direction) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	f8c7 c000 	str.w	ip, [r7]
		  int mid = MAX_LED / 2;
 8003330:	230d      	movs	r3, #13
 8003332:	60bb      	str	r3, [r7, #8]
		  if (direction == -1) {
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800333a:	d113      	bne.n	8003364 <turn_signal.10457+0x40>
			  for (int i = mid; i >= 0; i--) {
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	e00d      	b.n	800335e <turn_signal.10457+0x3a>
				  Set_LED(i, 255, 69, 0);
 8003342:	2300      	movs	r3, #0
 8003344:	2245      	movs	r2, #69	; 0x45
 8003346:	21ff      	movs	r1, #255	; 0xff
 8003348:	6978      	ldr	r0, [r7, #20]
 800334a:	f7ff fd5d 	bl	8002e08 <Set_LED>
				  WS2812_Send();
 800334e:	f7ff fd89 	bl	8002e64 <WS2812_Send>
				  HAL_Delay(30);
 8003352:	201e      	movs	r0, #30
 8003354:	f001 f9be 	bl	80046d4 <HAL_Delay>
			  for (int i = mid; i >= 0; i--) {
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	3b01      	subs	r3, #1
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2b00      	cmp	r3, #0
 8003362:	daee      	bge.n	8003342 <turn_signal.10457+0x1e>
		  if (direction == 1) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d113      	bne.n	8003392 <turn_signal.10457+0x6e>
			  for (int i = mid; i < MAX_LED; i++) {
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	e00d      	b.n	800338c <turn_signal.10457+0x68>
				  Set_LED(i, 255, 69, 0);
 8003370:	2300      	movs	r3, #0
 8003372:	2245      	movs	r2, #69	; 0x45
 8003374:	21ff      	movs	r1, #255	; 0xff
 8003376:	6938      	ldr	r0, [r7, #16]
 8003378:	f7ff fd46 	bl	8002e08 <Set_LED>
				  WS2812_Send();
 800337c:	f7ff fd72 	bl	8002e64 <WS2812_Send>
				  HAL_Delay(30);
 8003380:	201e      	movs	r0, #30
 8003382:	f001 f9a7 	bl	80046d4 <HAL_Delay>
			  for (int i = mid; i < MAX_LED; i++) {
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3301      	adds	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b19      	cmp	r3, #25
 8003390:	ddee      	ble.n	8003370 <turn_signal.10457+0x4c>
		 for (int i = 0; i < MAX_LED; i++) {
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e008      	b.n	80033aa <turn_signal.10457+0x86>
			 Set_LED(i, 0, 0, 0);
 8003398:	2300      	movs	r3, #0
 800339a:	2200      	movs	r2, #0
 800339c:	2100      	movs	r1, #0
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff fd32 	bl	8002e08 <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b19      	cmp	r3, #25
 80033ae:	ddf3      	ble.n	8003398 <turn_signal.10457+0x74>
		 HAL_Delay(120);
 80033b0:	2078      	movs	r0, #120	; 0x78
 80033b2:	f001 f98f 	bl	80046d4 <HAL_Delay>
		 WS2812_Send();
 80033b6:	f7ff fd55 	bl	8002e64 <WS2812_Send>
	  };
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b094      	sub	sp, #80	; 0x50
 80033c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ca:	f107 0320 	add.w	r3, r7, #32
 80033ce:	2230      	movs	r2, #48	; 0x30
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f00d f8c6 	bl	8010564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <SystemClock_Config+0xc8>)
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	4a26      	ldr	r2, [pc, #152]	; (800348c <SystemClock_Config+0xc8>)
 80033f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f6:	6413      	str	r3, [r2, #64]	; 0x40
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <SystemClock_Config+0xc8>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003404:	2300      	movs	r3, #0
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	4b21      	ldr	r3, [pc, #132]	; (8003490 <SystemClock_Config+0xcc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a20      	ldr	r2, [pc, #128]	; (8003490 <SystemClock_Config+0xcc>)
 800340e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <SystemClock_Config+0xcc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003420:	2301      	movs	r3, #1
 8003422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800342a:	2302      	movs	r3, #2
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800342e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003434:	2304      	movs	r3, #4
 8003436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003438:	2348      	movs	r3, #72	; 0x48
 800343a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800343c:	2302      	movs	r3, #2
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003440:	2303      	movs	r3, #3
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003444:	f107 0320 	add.w	r3, r7, #32
 8003448:	4618      	mov	r0, r3
 800344a:	f005 fdb1 	bl	8008fb0 <HAL_RCC_OscConfig>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003454:	f000 f81e 	bl	8003494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003458:	230f      	movs	r3, #15
 800345a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800345c:	2302      	movs	r3, #2
 800345e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003468:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800346e:	f107 030c 	add.w	r3, r7, #12
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f006 f8c3 	bl	8009600 <HAL_RCC_ClockConfig>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003480:	f000 f808 	bl	8003494 <Error_Handler>
  }
}
 8003484:	bf00      	nop
 8003486:	3750      	adds	r7, #80	; 0x50
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	40007000 	.word	0x40007000

08003494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003498:	b672      	cpsid	i
}
 800349a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800349c:	e7fe      	b.n	800349c <Error_Handler+0x8>

0800349e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <MX_SPI1_Init+0x64>)
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <MX_SPI1_Init+0x68>)
 80034bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <MX_SPI1_Init+0x64>)
 80034c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <MX_SPI1_Init+0x64>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <MX_SPI1_Init+0x64>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <MX_SPI1_Init+0x64>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <MX_SPI1_Init+0x64>)
 80034da:	2200      	movs	r2, #0
 80034dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034de:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <MX_SPI1_Init+0x64>)
 80034e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <MX_SPI1_Init+0x64>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <MX_SPI1_Init+0x64>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <MX_SPI1_Init+0x64>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <MX_SPI1_Init+0x64>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <MX_SPI1_Init+0x64>)
 8003500:	220a      	movs	r2, #10
 8003502:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003504:	4804      	ldr	r0, [pc, #16]	; (8003518 <MX_SPI1_Init+0x64>)
 8003506:	f006 fb0b 	bl	8009b20 <HAL_SPI_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003510:	f7ff ffc0 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000d84 	.word	0x20000d84
 800351c:	40013000 	.word	0x40013000

08003520 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <MX_SPI2_Init+0x64>)
 8003526:	4a18      	ldr	r2, [pc, #96]	; (8003588 <MX_SPI2_Init+0x68>)
 8003528:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <MX_SPI2_Init+0x64>)
 800352c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003530:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003532:	4b14      	ldr	r3, [pc, #80]	; (8003584 <MX_SPI2_Init+0x64>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <MX_SPI2_Init+0x64>)
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800353e:	4b11      	ldr	r3, [pc, #68]	; (8003584 <MX_SPI2_Init+0x64>)
 8003540:	2200      	movs	r2, #0
 8003542:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <MX_SPI2_Init+0x64>)
 8003546:	2200      	movs	r2, #0
 8003548:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <MX_SPI2_Init+0x64>)
 800354c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003550:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <MX_SPI2_Init+0x64>)
 8003554:	2210      	movs	r2, #16
 8003556:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <MX_SPI2_Init+0x64>)
 800355a:	2200      	movs	r2, #0
 800355c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <MX_SPI2_Init+0x64>)
 8003560:	2200      	movs	r2, #0
 8003562:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003564:	4b07      	ldr	r3, [pc, #28]	; (8003584 <MX_SPI2_Init+0x64>)
 8003566:	2200      	movs	r2, #0
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <MX_SPI2_Init+0x64>)
 800356c:	220a      	movs	r2, #10
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003570:	4804      	ldr	r0, [pc, #16]	; (8003584 <MX_SPI2_Init+0x64>)
 8003572:	f006 fad5 	bl	8009b20 <HAL_SPI_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800357c:	f7ff ff8a 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000d2c 	.word	0x20000d2c
 8003588:	40003800 	.word	0x40003800

0800358c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08c      	sub	sp, #48	; 0x30
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 031c 	add.w	r3, r7, #28
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a32      	ldr	r2, [pc, #200]	; (8003674 <HAL_SPI_MspInit+0xe8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12c      	bne.n	8003608 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <HAL_SPI_MspInit+0xec>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a30      	ldr	r2, [pc, #192]	; (8003678 <HAL_SPI_MspInit+0xec>)
 80035b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b2e      	ldr	r3, [pc, #184]	; (8003678 <HAL_SPI_MspInit+0xec>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_SPI_MspInit+0xec>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a29      	ldr	r2, [pc, #164]	; (8003678 <HAL_SPI_MspInit+0xec>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_SPI_MspInit+0xec>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80035e6:	23e0      	movs	r3, #224	; 0xe0
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f2:	2303      	movs	r3, #3
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035f6:	2305      	movs	r3, #5
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fa:	f107 031c 	add.w	r3, r7, #28
 80035fe:	4619      	mov	r1, r3
 8003600:	481e      	ldr	r0, [pc, #120]	; (800367c <HAL_SPI_MspInit+0xf0>)
 8003602:	f002 fab7 	bl	8005b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003606:	e031      	b.n	800366c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_SPI_MspInit+0xf4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d12c      	bne.n	800366c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_SPI_MspInit+0xec>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <HAL_SPI_MspInit+0xec>)
 800361c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_SPI_MspInit+0xec>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <HAL_SPI_MspInit+0xec>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a10      	ldr	r2, [pc, #64]	; (8003678 <HAL_SPI_MspInit+0xec>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <HAL_SPI_MspInit+0xec>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800364a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800364e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003658:	2303      	movs	r3, #3
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800365c:	2305      	movs	r3, #5
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	4619      	mov	r1, r3
 8003666:	4807      	ldr	r0, [pc, #28]	; (8003684 <HAL_SPI_MspInit+0xf8>)
 8003668:	f002 fa84 	bl	8005b74 <HAL_GPIO_Init>
}
 800366c:	bf00      	nop
 800366e:	3730      	adds	r7, #48	; 0x30
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40013000 	.word	0x40013000
 8003678:	40023800 	.word	0x40023800
 800367c:	40020000 	.word	0x40020000
 8003680:	40003800 	.word	0x40003800
 8003684:	40020400 	.word	0x40020400

08003688 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_SPI_MspDeInit+0x50>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10a      	bne.n	80036b0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_SPI_MspDeInit+0x54>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <HAL_SPI_MspDeInit+0x54>)
 80036a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80036a6:	21e0      	movs	r1, #224	; 0xe0
 80036a8:	480d      	ldr	r0, [pc, #52]	; (80036e0 <HAL_SPI_MspDeInit+0x58>)
 80036aa:	f002 fcff 	bl	80060ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80036ae:	e00f      	b.n	80036d0 <HAL_SPI_MspDeInit+0x48>
  else if(spiHandle->Instance==SPI2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <HAL_SPI_MspDeInit+0x5c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10a      	bne.n	80036d0 <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_SPI_MspDeInit+0x54>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a07      	ldr	r2, [pc, #28]	; (80036dc <HAL_SPI_MspDeInit+0x54>)
 80036c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 80036c6:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80036ca:	4807      	ldr	r0, [pc, #28]	; (80036e8 <HAL_SPI_MspDeInit+0x60>)
 80036cc:	f002 fcee 	bl	80060ac <HAL_GPIO_DeInit>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40013000 	.word	0x40013000
 80036dc:	40023800 	.word	0x40023800
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40003800 	.word	0x40003800
 80036e8:	40020400 	.word	0x40020400

080036ec <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80036f0:	4814      	ldr	r0, [pc, #80]	; (8003744 <I2Cx_Init+0x58>)
 80036f2:	f005 f8f3 	bl	80088dc <HAL_I2C_GetState>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d121      	bne.n	8003740 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <I2Cx_Init+0x58>)
 80036fe:	4a12      	ldr	r2, [pc, #72]	; (8003748 <I2Cx_Init+0x5c>)
 8003700:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <I2Cx_Init+0x58>)
 8003704:	2243      	movs	r2, #67	; 0x43
 8003706:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <I2Cx_Init+0x58>)
 800370a:	4a10      	ldr	r2, [pc, #64]	; (800374c <I2Cx_Init+0x60>)
 800370c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <I2Cx_Init+0x58>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <I2Cx_Init+0x58>)
 8003716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800371a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <I2Cx_Init+0x58>)
 800371e:	2200      	movs	r2, #0
 8003720:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <I2Cx_Init+0x58>)
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <I2Cx_Init+0x58>)
 800372a:	2200      	movs	r2, #0
 800372c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <I2Cx_Init+0x58>)
 8003730:	2200      	movs	r2, #0
 8003732:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003734:	4803      	ldr	r0, [pc, #12]	; (8003744 <I2Cx_Init+0x58>)
 8003736:	f000 f86b 	bl	8003810 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800373a:	4802      	ldr	r0, [pc, #8]	; (8003744 <I2Cx_Init+0x58>)
 800373c:	f004 fb7e 	bl	8007e3c <HAL_I2C_Init>
  }
}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}
 8003744:	2000031c 	.word	0x2000031c
 8003748:	40005400 	.word	0x40005400
 800374c:	000186a0 	.word	0x000186a0

08003750 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af04      	add	r7, sp, #16
 8003756:	4603      	mov	r3, r0
 8003758:	80fb      	strh	r3, [r7, #6]
 800375a:	460b      	mov	r3, r1
 800375c:	717b      	strb	r3, [r7, #5]
 800375e:	4613      	mov	r3, r2
 8003760:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8003766:	797b      	ldrb	r3, [r7, #5]
 8003768:	b29a      	uxth	r2, r3
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <I2Cx_WriteData+0x48>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	88f9      	ldrh	r1, [r7, #6]
 8003770:	9302      	str	r3, [sp, #8]
 8003772:	2301      	movs	r3, #1
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2301      	movs	r3, #1
 800377c:	4807      	ldr	r0, [pc, #28]	; (800379c <I2Cx_WriteData+0x4c>)
 800377e:	f004 fd75 	bl	800826c <HAL_I2C_Mem_Write>
 8003782:	4603      	mov	r3, r0
 8003784:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800378c:	f000 f834 	bl	80037f8 <I2Cx_Error>
  }
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	200000d0 	.word	0x200000d0
 800379c:	2000031c 	.word	0x2000031c

080037a0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af04      	add	r7, sp, #16
 80037a6:	4603      	mov	r3, r0
 80037a8:	460a      	mov	r2, r1
 80037aa:	80fb      	strh	r3, [r7, #6]
 80037ac:	4613      	mov	r3, r2
 80037ae:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80037b8:	797b      	ldrb	r3, [r7, #5]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <I2Cx_ReadData+0x50>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	88f9      	ldrh	r1, [r7, #6]
 80037c2:	9302      	str	r3, [sp, #8]
 80037c4:	2301      	movs	r3, #1
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	f107 030e 	add.w	r3, r7, #14
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2301      	movs	r3, #1
 80037d0:	4808      	ldr	r0, [pc, #32]	; (80037f4 <I2Cx_ReadData+0x54>)
 80037d2:	f004 fe51 	bl	8008478 <HAL_I2C_Mem_Read>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80037e0:	f000 f80a 	bl	80037f8 <I2Cx_Error>
  }
  return value;
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	200000d0 	.word	0x200000d0
 80037f4:	2000031c 	.word	0x2000031c

080037f8 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80037fc:	4803      	ldr	r0, [pc, #12]	; (800380c <I2Cx_Error+0x14>)
 80037fe:	f004 fce9 	bl	80081d4 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8003802:	f7ff ff73 	bl	80036ec <I2Cx_Init>
}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000031c 	.word	0x2000031c

08003810 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <I2Cx_MspInit+0xa4>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <I2Cx_MspInit+0xa4>)
 8003822:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003826:	6413      	str	r3, [r2, #64]	; 0x40
 8003828:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <I2Cx_MspInit+0xa4>)
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8003834:	2300      	movs	r3, #0
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <I2Cx_MspInit+0xa4>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <I2Cx_MspInit+0xa4>)
 800383e:	f043 0302 	orr.w	r3, r3, #2
 8003842:	6313      	str	r3, [r2, #48]	; 0x30
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <I2Cx_MspInit+0xa4>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8003850:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003854:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8003856:	2312      	movs	r3, #18
 8003858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800385e:	2302      	movs	r3, #2
 8003860:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8003862:	2304      	movs	r3, #4
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	4619      	mov	r1, r3
 800386c:	4812      	ldr	r0, [pc, #72]	; (80038b8 <I2Cx_MspInit+0xa8>)
 800386e:	f002 f981 	bl	8005b74 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <I2Cx_MspInit+0xa4>)
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <I2Cx_MspInit+0xa4>)
 8003878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800387c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800387e:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <I2Cx_MspInit+0xa4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a0c      	ldr	r2, [pc, #48]	; (80038b4 <I2Cx_MspInit+0xa4>)
 8003884:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003888:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	210f      	movs	r1, #15
 800388e:	201f      	movs	r0, #31
 8003890:	f001 fc12 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003894:	201f      	movs	r0, #31
 8003896:	f001 fc3b 	bl	8005110 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	210f      	movs	r1, #15
 800389e:	2020      	movs	r0, #32
 80038a0:	f001 fc0a 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 80038a4:	2020      	movs	r0, #32
 80038a6:	f001 fc33 	bl	8005110 <HAL_NVIC_EnableIRQ>
}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40020400 	.word	0x40020400

080038bc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization.
  */
static void SPIx_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80038c0:	4819      	ldr	r0, [pc, #100]	; (8003928 <SPIx_Init+0x6c>)
 80038c2:	f006 fe15 	bl	800a4f0 <HAL_SPI_GetState>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d12b      	bne.n	8003924 <SPIx_Init+0x68>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80038cc:	4b16      	ldr	r3, [pc, #88]	; (8003928 <SPIx_Init+0x6c>)
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <SPIx_Init+0x70>)
 80038d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <SPIx_Init+0x6c>)
 80038d4:	2210      	movs	r2, #16
 80038d6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <SPIx_Init+0x6c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038de:	4b12      	ldr	r3, [pc, #72]	; (8003928 <SPIx_Init+0x6c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038e4:	4b10      	ldr	r3, [pc, #64]	; (8003928 <SPIx_Init+0x6c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <SPIx_Init+0x6c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <SPIx_Init+0x6c>)
 80038f2:	2207      	movs	r2, #7
 80038f4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <SPIx_Init+0x6c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <SPIx_Init+0x6c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <SPIx_Init+0x6c>)
 8003904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003908:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <SPIx_Init+0x6c>)
 800390c:	2200      	movs	r2, #0
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <SPIx_Init+0x6c>)
 8003912:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003916:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit(&SpiHandle);
 8003918:	4803      	ldr	r0, [pc, #12]	; (8003928 <SPIx_Init+0x6c>)
 800391a:	f000 f835 	bl	8003988 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800391e:	4802      	ldr	r0, [pc, #8]	; (8003928 <SPIx_Init+0x6c>)
 8003920:	f006 f8fe 	bl	8009b20 <HAL_SPI_Init>
  }
}
 8003924:	bf00      	nop
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000370 	.word	0x20000370
 800392c:	40013000 	.word	0x40013000

08003930 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af02      	add	r7, sp, #8
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800393e:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <SPIx_WriteRead+0x38>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f107 020f 	add.w	r2, r7, #15
 8003946:	1df9      	adds	r1, r7, #7
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2301      	movs	r3, #1
 800394c:	4807      	ldr	r0, [pc, #28]	; (800396c <SPIx_WriteRead+0x3c>)
 800394e:	f006 fc21 	bl	800a194 <HAL_SPI_TransmitReceive>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8003958:	f000 f80a 	bl	8003970 <SPIx_Error>
  }
  
  return receivedbyte;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200000d4 	.word	0x200000d4
 800396c:	20000370 	.word	0x20000370

08003970 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error (void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <SPIx_Error+0x14>)
 8003976:	f006 fa6f 	bl	8009e58 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 800397a:	f7ff ff9f 	bl	80038bc <SPIx_Init>
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000370 	.word	0x20000370

08003988 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	4b16      	ldr	r3, [pc, #88]	; (80039f0 <SPIx_MspInit+0x68>)
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <SPIx_MspInit+0x68>)
 800399a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800399e:	6453      	str	r3, [r2, #68]	; 0x44
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <SPIx_MspInit+0x68>)
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	693b      	ldr	r3, [r7, #16]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <SPIx_MspInit+0x68>)
 80039b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b4:	4a0e      	ldr	r2, [pc, #56]	; (80039f0 <SPIx_MspInit+0x68>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6313      	str	r3, [r2, #48]	; 0x30
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <SPIx_MspInit+0x68>)
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80039c8:	23e0      	movs	r3, #224	; 0xe0
 80039ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80039d0:	2302      	movs	r3, #2
 80039d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80039d4:	2301      	movs	r3, #1
 80039d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80039d8:	2305      	movs	r3, #5
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80039dc:	f107 0314 	add.w	r3, r7, #20
 80039e0:	4619      	mov	r1, r3
 80039e2:	4804      	ldr	r0, [pc, #16]	; (80039f4 <SPIx_MspInit+0x6c>)
 80039e4:	f002 f8c6 	bl	8005b74 <HAL_GPIO_Init>
}
 80039e8:	bf00      	nop
 80039ea:	3728      	adds	r7, #40	; 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020000 	.word	0x40020000

080039f8 <GYRO_IO_Init>:
/********************************* LINK GYROSCOPE *****************************/
/**
  * @brief  Configures the GYRO SPI interface.
  */
void GYRO_IO_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <GYRO_IO_Init+0x8c>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <GYRO_IO_Init+0x8c>)
 8003a08:	f043 0310 	orr.w	r3, r3, #16
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <GYRO_IO_Init+0x8c>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8003a2a:	f107 030c 	add.w	r3, r7, #12
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4815      	ldr	r0, [pc, #84]	; (8003a88 <GYRO_IO_Init+0x90>)
 8003a32:	f002 f89f 	bl	8005b74 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8003a36:	2201      	movs	r2, #1
 8003a38:	2108      	movs	r1, #8
 8003a3a:	4813      	ldr	r0, [pc, #76]	; (8003a88 <GYRO_IO_Init+0x90>)
 8003a3c:	f002 fc38 	bl	80062b0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8003a40:	2300      	movs	r3, #0
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <GYRO_IO_Init+0x8c>)
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <GYRO_IO_Init+0x8c>)
 8003a4a:	f043 0310 	orr.w	r3, r3, #16
 8003a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <GYRO_IO_Init+0x8c>)
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003a64:	2302      	movs	r3, #2
 8003a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	4619      	mov	r1, r3
 8003a72:	4805      	ldr	r0, [pc, #20]	; (8003a88 <GYRO_IO_Init+0x90>)
 8003a74:	f002 f87e 	bl	8005b74 <HAL_GPIO_Init>
  
  SPIx_Init();
 8003a78:	f7ff ff20 	bl	80038bc <SPIx_Init>
}
 8003a7c:	bf00      	nop
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40021000 	.word	0x40021000

08003a8c <GYRO_IO_Write>:
  * @param  pBuffer: pointer to the buffer  containing the data to be written to the GYRO.
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8003a9c:	883b      	ldrh	r3, [r7, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d903      	bls.n	8003aaa <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2108      	movs	r1, #8
 8003aae:	480f      	ldr	r0, [pc, #60]	; (8003aec <GYRO_IO_Write+0x60>)
 8003ab0:	f002 fbfe 	bl	80062b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff3a 	bl	8003930 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8003abc:	e00a      	b.n	8003ad4 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ff34 	bl	8003930 <SPIx_WriteRead>
    NumByteToWrite--;
 8003ac8:	883b      	ldrh	r3, [r7, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8003ad4:	883b      	ldrh	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f1      	bne.n	8003abe <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003ada:	2201      	movs	r2, #1
 8003adc:	2108      	movs	r1, #8
 8003ade:	4803      	ldr	r0, [pc, #12]	; (8003aec <GYRO_IO_Write+0x60>)
 8003ae0:	f002 fbe6 	bl	80062b0 <HAL_GPIO_WritePin>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000

08003af0 <GYRO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the GYRO.
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
 8003afc:	4613      	mov	r3, r2
 8003afe:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8003b00:	883b      	ldrh	r3, [r7, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d904      	bls.n	8003b10 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003b0c:	70fb      	strb	r3, [r7, #3]
 8003b0e:	e003      	b.n	8003b18 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b16:	70fb      	strb	r3, [r7, #3]
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2108      	movs	r1, #8
 8003b1c:	4810      	ldr	r0, [pc, #64]	; (8003b60 <GYRO_IO_Read+0x70>)
 8003b1e:	f002 fbc7 	bl	80062b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff03 	bl	8003930 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8003b2a:	e00c      	b.n	8003b46 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYRO (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7ff feff 	bl	8003930 <SPIx_WriteRead>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8003b3a:	883b      	ldrh	r3, [r7, #0]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3301      	adds	r3, #1
 8003b44:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8003b46:	883b      	ldrh	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ef      	bne.n	8003b2c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2108      	movs	r1, #8
 8003b50:	4803      	ldr	r0, [pc, #12]	; (8003b60 <GYRO_IO_Read+0x70>)
 8003b52:	f002 fbad 	bl	80062b0 <HAL_GPIO_WritePin>
}  
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <COMPASSACCELERO_IO_Init+0x48>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <COMPASSACCELERO_IO_Init+0x48>)
 8003b74:	f043 0310 	orr.w	r3, r3, #16
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <COMPASSACCELERO_IO_Init+0x48>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8003b86:	2304      	movs	r3, #4
 8003b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003b92:	2302      	movs	r3, #2
 8003b94:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <COMPASSACCELERO_IO_Init+0x4c>)
 8003b9c:	f001 ffea 	bl	8005b74 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8003ba0:	f7ff fda4 	bl	80036ec <I2Cx_Init>
}
 8003ba4:	bf00      	nop
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003bc4:	f043 0310 	orr.w	r3, r3, #16
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8003bd6:	2330      	movs	r3, #48	; 0x30
 8003bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8003bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003be0:	2302      	movs	r3, #2
 8003be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4808      	ldr	r0, [pc, #32]	; (8003c10 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8003bee:	f001 ffc1 	bl	8005b74 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	210f      	movs	r1, #15
 8003bf6:	200a      	movs	r0, #10
 8003bf8:	f001 fa5e 	bl	80050b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8003bfc:	200a      	movs	r0, #10
 8003bfe:	f001 fa87 	bl	8005110 <HAL_NVIC_EnableIRQ>
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40021000 	.word	0x40021000

08003c14 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	80fb      	strh	r3, [r7, #6]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	717b      	strb	r3, [r7, #5]
 8003c22:	4613      	mov	r3, r2
 8003c24:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8003c26:	793a      	ldrb	r2, [r7, #4]
 8003c28:	7979      	ldrb	r1, [r7, #5]
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff fd8f 	bl	8003750 <I2Cx_WriteData>
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	460a      	mov	r2, r1
 8003c44:	80fb      	strh	r3, [r7, #6]
 8003c46:	4613      	mov	r3, r2
 8003c48:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8003c4a:	797a      	ldrb	r2, [r7, #5]
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff fda5 	bl	80037a0 <I2Cx_ReadData>
 8003c56:	4603      	mov	r3, r0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8003c76:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <BSP_ACCELERO_Init+0x178>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4798      	blx	r3
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b33      	cmp	r3, #51	; 0x33
 8003c80:	d14f      	bne.n	8003d22 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8003c82:	4b56      	ldr	r3, [pc, #344]	; (8003ddc <BSP_ACCELERO_Init+0x17c>)
 8003c84:	4a54      	ldr	r2, [pc, #336]	; (8003dd8 <BSP_ACCELERO_Init+0x178>)
 8003c86:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8003c90:	2307      	movs	r3, #7
 8003c92:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8003c94:	2300      	movs	r3, #0
 8003c96:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003ca4:	7b3a      	ldrb	r2, [r7, #12]
 8003ca6:	7b7b      	ldrb	r3, [r7, #13]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003cac:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	8abb      	ldrh	r3, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003cba:	7c3a      	ldrb	r2, [r7, #16]
 8003cbc:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	7cbb      	ldrb	r3, [r7, #18]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003cd0:	b21a      	sxth	r2, r3
 8003cd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	b21b      	sxth	r3, r3
 8003cda:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003cdc:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <BSP_ACCELERO_Init+0x17c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	8aba      	ldrh	r2, [r7, #20]
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8003cec:	2310      	movs	r3, #16
 8003cee:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003cf8:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003cfa:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003d00:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003d02:	4313      	orrs	r3, r2
 8003d04:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003d06:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <BSP_ACCELERO_Init+0x17c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	8aba      	ldrh	r2, [r7, #20]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]
 8003d20:	e054      	b.n	8003dcc <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8003d22:	4b2f      	ldr	r3, [pc, #188]	; (8003de0 <BSP_ACCELERO_Init+0x180>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	4798      	blx	r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b33      	cmp	r3, #51	; 0x33
 8003d2c:	d14e      	bne.n	8003dcc <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8003d2e:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <BSP_ACCELERO_Init+0x17c>)
 8003d30:	4a2b      	ldr	r2, [pc, #172]	; (8003de0 <BSP_ACCELERO_Init+0x180>)
 8003d32:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8003d38:	2340      	movs	r3, #64	; 0x40
 8003d3a:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8003d3c:	2307      	movs	r3, #7
 8003d3e:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8003d40:	2300      	movs	r3, #0
 8003d42:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8003d44:	2300      	movs	r3, #0
 8003d46:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003d50:	7b3a      	ldrb	r2, [r7, #12]
 8003d52:	7b7b      	ldrb	r3, [r7, #13]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003d58:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	8abb      	ldrh	r3, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003d66:	7c3a      	ldrb	r2, [r7, #16]
 8003d68:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	7cbb      	ldrb	r3, [r7, #18]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003d7c:	b21a      	sxth	r2, r3
 8003d7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	b21b      	sxth	r3, r3
 8003d86:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003d88:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <BSP_ACCELERO_Init+0x17c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	8aba      	ldrh	r2, [r7, #20]
 8003d90:	4610      	mov	r0, r2
 8003d92:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8003d98:	2310      	movs	r3, #16
 8003d9a:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003da4:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003da6:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003da8:	4313      	orrs	r3, r2
 8003daa:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003dac:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003dae:	4313      	orrs	r3, r2
 8003db0:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003db2:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <BSP_ACCELERO_Init+0x17c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	8aba      	ldrh	r2, [r7, #20]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000009c 	.word	0x2000009c
 8003ddc:	200003c8 	.word	0x200003c8
 8003de0:	20000068 	.word	0x20000068

08003de4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003dee:	2300      	movs	r3, #0
 8003df0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003df2:	2300      	movs	r3, #0
 8003df4:	703b      	strb	r3, [r7, #0]
 8003df6:	2300      	movs	r3, #0
 8003df8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003dfa:	4b52      	ldr	r3, [pc, #328]	; (8003f44 <BSP_GYRO_Init+0x160>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	4798      	blx	r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	2bd4      	cmp	r3, #212	; 0xd4
 8003e04:	d005      	beq.n	8003e12 <BSP_GYRO_Init+0x2e>
 8003e06:	4b4f      	ldr	r3, [pc, #316]	; (8003f44 <BSP_GYRO_Init+0x160>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4798      	blx	r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2bd5      	cmp	r3, #213	; 0xd5
 8003e10:	d146      	bne.n	8003ea0 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003e12:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003e14:	4a4b      	ldr	r2, [pc, #300]	; (8003f44 <BSP_GYRO_Init+0x160>)
 8003e16:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003e18:	2308      	movs	r3, #8
 8003e1a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003e20:	2307      	movs	r3, #7
 8003e22:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003e24:	2330      	movs	r3, #48	; 0x30
 8003e26:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003e30:	2310      	movs	r3, #16
 8003e32:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003e34:	793a      	ldrb	r2, [r7, #4]
 8003e36:	797b      	ldrb	r3, [r7, #5]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003e3c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003e42:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003e4a:	7a3a      	ldrb	r2, [r7, #8]
 8003e4c:	7a7b      	ldrb	r3, [r7, #9]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003e52:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003e54:	4313      	orrs	r3, r2
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	89bb      	ldrh	r3, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003e64:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	89ba      	ldrh	r2, [r7, #12]
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8003e70:	2300      	movs	r3, #0
 8003e72:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003e78:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003e7a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8003e82:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	89ba      	ldrh	r2, [r7, #12]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	2010      	movs	r0, #16
 8003e98:	4798      	blx	r3

    ret = GYRO_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
 8003e9e:	e04b      	b.n	8003f38 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8003ea0:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <BSP_GYRO_Init+0x168>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4798      	blx	r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2bd3      	cmp	r3, #211	; 0xd3
 8003eaa:	d145      	bne.n	8003f38 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8003eac:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003eae:	4a27      	ldr	r2, [pc, #156]	; (8003f4c <BSP_GYRO_Init+0x168>)
 8003eb0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8003eb2:	2308      	movs	r3, #8
 8003eb4:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8003eba:	2307      	movs	r3, #7
 8003ebc:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8003ebe:	2330      	movs	r3, #48	; 0x30
 8003ec0:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8003eca:	2310      	movs	r3, #16
 8003ecc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ece:	793a      	ldrb	r2, [r7, #4]
 8003ed0:	797b      	ldrb	r3, [r7, #5]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003ed6:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003edc:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003ee4:	7a3a      	ldrb	r2, [r7, #8]
 8003ee6:	7a7b      	ldrb	r3, [r7, #9]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8003eec:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	89bb      	ldrh	r3, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8003efe:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	89ba      	ldrh	r2, [r7, #12]
 8003f06:	4610      	mov	r0, r2
 8003f08:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003f12:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8003f14:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	89ba      	ldrh	r2, [r7, #12]
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	4610      	mov	r0, r2
 8003f28:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8003f2a:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <BSP_GYRO_Init+0x164>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	2010      	movs	r0, #16
 8003f32:	4798      	blx	r3

    ret = GYRO_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000034 	.word	0x20000034
 8003f48:	200003cc 	.word	0x200003cc
 8003f4c:	20000000 	.word	0x20000000

08003f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_MspInit+0x4c>)
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <HAL_MspInit+0x4c>)
 8003f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f64:	6453      	str	r3, [r2, #68]	; 0x44
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <HAL_MspInit+0x4c>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6e:	607b      	str	r3, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <HAL_MspInit+0x4c>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <HAL_MspInit+0x4c>)
 8003f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	; 0x40
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_MspInit+0x4c>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f8e:	2007      	movs	r0, #7
 8003f90:	f001 f872 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40023800 	.word	0x40023800

08003fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fa4:	e7fe      	b.n	8003fa4 <NMI_Handler+0x4>

08003fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003faa:	e7fe      	b.n	8003faa <HardFault_Handler+0x4>

08003fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fb0:	e7fe      	b.n	8003fb0 <MemManage_Handler+0x4>

08003fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fb6:	e7fe      	b.n	8003fb6 <BusFault_Handler+0x4>

08003fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fbc:	e7fe      	b.n	8003fbc <UsageFault_Handler+0x4>

08003fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003fec:	f000 fb52 	bl	8004694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003ff8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ffc:	f002 f98a 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004000:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004004:	f002 f986 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004008:	bf00      	nop
 800400a:	bd80      	pop	{r7, pc}

0800400c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004010:	4803      	ldr	r0, [pc, #12]	; (8004020 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004012:	f007 fa21 	bl	800b458 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004016:	4803      	ldr	r0, [pc, #12]	; (8004024 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004018:	f007 fa1e 	bl	800b458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000e84 	.word	0x20000e84
 8004024:	20000e3c 	.word	0x20000e3c

08004028 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800402c:	4802      	ldr	r0, [pc, #8]	; (8004038 <DMA2_Stream0_IRQHandler+0x10>)
 800402e:	f001 fb37 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000428 	.word	0x20000428

0800403c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004040:	4802      	ldr	r0, [pc, #8]	; (800404c <DMA2_Stream1_IRQHandler+0x10>)
 8004042:	f001 fb2d 	bl	80056a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000ddc 	.word	0x20000ddc

08004050 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004054:	4802      	ldr	r0, [pc, #8]	; (8004060 <OTG_FS_IRQHandler+0x10>)
 8004056:	f002 fbeb 	bl	8006830 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200012a8 	.word	0x200012a8

08004064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	return 1;
 8004068:	2301      	movs	r3, #1
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <_kill>:

int _kill(int pid, int sig)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800407e:	f00c fa37 	bl	80104f0 <__errno>
 8004082:	4603      	mov	r3, r0
 8004084:	2216      	movs	r2, #22
 8004086:	601a      	str	r2, [r3, #0]
	return -1;
 8004088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <_exit>:

void _exit (int status)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800409c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ffe7 	bl	8004074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040a6:	e7fe      	b.n	80040a6 <_exit+0x12>

080040a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e00a      	b.n	80040d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040ba:	f3af 8000 	nop.w
 80040be:	4601      	mov	r1, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	60ba      	str	r2, [r7, #8]
 80040c6:	b2ca      	uxtb	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3301      	adds	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	dbf0      	blt.n	80040ba <_read+0x12>
	}

return len;
 80040d8:	687b      	ldr	r3, [r7, #4]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	e009      	b.n	8004108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	60ba      	str	r2, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	3301      	adds	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	dbf1      	blt.n	80040f4 <_write+0x12>
	}
	return len;
 8004110:	687b      	ldr	r3, [r7, #4]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <_close>:

int _close(int file)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
	return -1;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004142:	605a      	str	r2, [r3, #4]
	return 0;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <_isatty>:

int _isatty(int file)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
	return 1;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
	return 0;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <_sbrk+0x5c>)
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <_sbrk+0x60>)
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <_sbrk+0x64>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <_sbrk+0x64>)
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <_sbrk+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d207      	bcs.n	80041c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b4:	f00c f99c 	bl	80104f0 <__errno>
 80041b8:	4603      	mov	r3, r0
 80041ba:	220c      	movs	r2, #12
 80041bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c2:	e009      	b.n	80041d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <_sbrk+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <_sbrk+0x64>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <_sbrk+0x64>)
 80041d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20020000 	.word	0x20020000
 80041e4:	00000400 	.word	0x00000400
 80041e8:	200003d0 	.word	0x200003d0
 80041ec:	200015c0 	.word	0x200015c0

080041f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SystemInit+0x20>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	4a05      	ldr	r2, [pc, #20]	; (8004210 <SystemInit+0x20>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b096      	sub	sp, #88	; 0x58
 8004218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800421a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	609a      	str	r2, [r3, #8]
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	615a      	str	r2, [r3, #20]
 8004244:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004246:	1d3b      	adds	r3, r7, #4
 8004248:	2220      	movs	r2, #32
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f00c f989 	bl	8010564 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004252:	4b3e      	ldr	r3, [pc, #248]	; (800434c <MX_TIM1_Init+0x138>)
 8004254:	4a3e      	ldr	r2, [pc, #248]	; (8004350 <MX_TIM1_Init+0x13c>)
 8004256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004258:	4b3c      	ldr	r3, [pc, #240]	; (800434c <MX_TIM1_Init+0x138>)
 800425a:	2200      	movs	r2, #0
 800425c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425e:	4b3b      	ldr	r3, [pc, #236]	; (800434c <MX_TIM1_Init+0x138>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8004264:	4b39      	ldr	r3, [pc, #228]	; (800434c <MX_TIM1_Init+0x138>)
 8004266:	2259      	movs	r2, #89	; 0x59
 8004268:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426a:	4b38      	ldr	r3, [pc, #224]	; (800434c <MX_TIM1_Init+0x138>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004270:	4b36      	ldr	r3, [pc, #216]	; (800434c <MX_TIM1_Init+0x138>)
 8004272:	2200      	movs	r2, #0
 8004274:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004276:	4b35      	ldr	r3, [pc, #212]	; (800434c <MX_TIM1_Init+0x138>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800427c:	4833      	ldr	r0, [pc, #204]	; (800434c <MX_TIM1_Init+0x138>)
 800427e:	f006 fa0f 	bl	800a6a0 <HAL_TIM_Base_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004288:	f7ff f904 	bl	8003494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004296:	4619      	mov	r1, r3
 8004298:	482c      	ldr	r0, [pc, #176]	; (800434c <MX_TIM1_Init+0x138>)
 800429a:	f007 fd0f 	bl	800bcbc <HAL_TIM_ConfigClockSource>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80042a4:	f7ff f8f6 	bl	8003494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042a8:	4828      	ldr	r0, [pc, #160]	; (800434c <MX_TIM1_Init+0x138>)
 80042aa:	f006 fbb3 	bl	800aa14 <HAL_TIM_PWM_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80042b4:	f7ff f8ee 	bl	8003494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042c4:	4619      	mov	r1, r3
 80042c6:	4821      	ldr	r0, [pc, #132]	; (800434c <MX_TIM1_Init+0x138>)
 80042c8:	f008 fdc6 	bl	800ce58 <HAL_TIMEx_MasterConfigSynchronization>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80042d2:	f7ff f8df 	bl	8003494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042d6:	2360      	movs	r3, #96	; 0x60
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042de:	2300      	movs	r3, #0
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80042e2:	2300      	movs	r3, #0
 80042e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f6:	2200      	movs	r2, #0
 80042f8:	4619      	mov	r1, r3
 80042fa:	4814      	ldr	r0, [pc, #80]	; (800434c <MX_TIM1_Init+0x138>)
 80042fc:	f007 fb38 	bl	800b970 <HAL_TIM_PWM_ConfigChannel>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8004306:	f7ff f8c5 	bl	8003494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800431a:	2300      	movs	r3, #0
 800431c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800431e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004322:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4807      	ldr	r0, [pc, #28]	; (800434c <MX_TIM1_Init+0x138>)
 800432e:	f008 fe51 	bl	800cfd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004338:	f7ff f8ac 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800433c:	4803      	ldr	r0, [pc, #12]	; (800434c <MX_TIM1_Init+0x138>)
 800433e:	f000 f8f3 	bl	8004528 <HAL_TIM_MspPostInit>

}
 8004342:	bf00      	nop
 8004344:	3758      	adds	r7, #88	; 0x58
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000e84 	.word	0x20000e84
 8004350:	40010000 	.word	0x40010000

08004354 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800435a:	463b      	mov	r3, r7
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <MX_TIM10_Init+0x88>)
 8004368:	4a1d      	ldr	r2, [pc, #116]	; (80043e0 <MX_TIM10_Init+0x8c>)
 800436a:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 800436c:	4b1b      	ldr	r3, [pc, #108]	; (80043dc <MX_TIM10_Init+0x88>)
 800436e:	2247      	movs	r2, #71	; 0x47
 8004370:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <MX_TIM10_Init+0x88>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004378:	4b18      	ldr	r3, [pc, #96]	; (80043dc <MX_TIM10_Init+0x88>)
 800437a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800437e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004380:	4b16      	ldr	r3, [pc, #88]	; (80043dc <MX_TIM10_Init+0x88>)
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004386:	4b15      	ldr	r3, [pc, #84]	; (80043dc <MX_TIM10_Init+0x88>)
 8004388:	2200      	movs	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800438c:	4813      	ldr	r0, [pc, #76]	; (80043dc <MX_TIM10_Init+0x88>)
 800438e:	f006 f987 	bl	800a6a0 <HAL_TIM_Base_Init>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8004398:	f7ff f87c 	bl	8003494 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 800439c:	480f      	ldr	r0, [pc, #60]	; (80043dc <MX_TIM10_Init+0x88>)
 800439e:	f006 ff8b 	bl	800b2b8 <HAL_TIM_IC_Init>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 80043a8:	f7ff f874 	bl	8003494 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80043ac:	2300      	movs	r3, #0
 80043ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80043b0:	2301      	movs	r3, #1
 80043b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80043b4:	2300      	movs	r3, #0
 80043b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80043bc:	463b      	mov	r3, r7
 80043be:	2200      	movs	r2, #0
 80043c0:	4619      	mov	r1, r3
 80043c2:	4806      	ldr	r0, [pc, #24]	; (80043dc <MX_TIM10_Init+0x88>)
 80043c4:	f007 f950 	bl	800b668 <HAL_TIM_IC_ConfigChannel>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 80043ce:	f7ff f861 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000e3c 	.word	0x20000e3c
 80043e0:	40014400 	.word	0x40014400

080043e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 0314 	add.w	r3, r7, #20
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a43      	ldr	r2, [pc, #268]	; (8004510 <HAL_TIM_Base_MspInit+0x12c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d146      	bne.n	8004494 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	4b42      	ldr	r3, [pc, #264]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	4a41      	ldr	r2, [pc, #260]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6453      	str	r3, [r2, #68]	; 0x44
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8004422:	4b3d      	ldr	r3, [pc, #244]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 8004424:	4a3d      	ldr	r2, [pc, #244]	; (800451c <HAL_TIM_Base_MspInit+0x138>)
 8004426:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8004428:	4b3b      	ldr	r3, [pc, #236]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 800442a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800442e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004430:	4b39      	ldr	r3, [pc, #228]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 8004432:	2240      	movs	r2, #64	; 0x40
 8004434:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004436:	4b38      	ldr	r3, [pc, #224]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 8004438:	2200      	movs	r2, #0
 800443a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800443c:	4b36      	ldr	r3, [pc, #216]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 800443e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004442:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004444:	4b34      	ldr	r3, [pc, #208]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 8004446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800444c:	4b32      	ldr	r3, [pc, #200]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 800444e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004452:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004454:	4b30      	ldr	r3, [pc, #192]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800445a:	4b2f      	ldr	r3, [pc, #188]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 800445c:	2200      	movs	r2, #0
 800445e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 8004462:	2200      	movs	r2, #0
 8004464:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004466:	482c      	ldr	r0, [pc, #176]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 8004468:	f000 fe76 	bl	8005158 <HAL_DMA_Init>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_TIM_Base_MspInit+0x92>
    {
      Error_Handler();
 8004472:	f7ff f80f 	bl	8003494 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a27      	ldr	r2, [pc, #156]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
 800447c:	4a26      	ldr	r2, [pc, #152]	; (8004518 <HAL_TIM_Base_MspInit+0x134>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004482:	2200      	movs	r2, #0
 8004484:	2100      	movs	r1, #0
 8004486:	2019      	movs	r0, #25
 8004488:	f000 fe16 	bl	80050b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800448c:	2019      	movs	r0, #25
 800448e:	f000 fe3f 	bl	8005110 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004492:	e039      	b.n	8004508 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM10)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_TIM_Base_MspInit+0x13c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d134      	bne.n	8004508 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a1b      	ldr	r2, [pc, #108]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 80044a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a14      	ldr	r2, [pc, #80]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b12      	ldr	r3, [pc, #72]	; (8004514 <HAL_TIM_Base_MspInit+0x130>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80044d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044dc:	2302      	movs	r3, #2
 80044de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e4:	2300      	movs	r3, #0
 80044e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80044e8:	2303      	movs	r3, #3
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4619      	mov	r1, r3
 80044f2:	480c      	ldr	r0, [pc, #48]	; (8004524 <HAL_TIM_Base_MspInit+0x140>)
 80044f4:	f001 fb3e 	bl	8005b74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80044f8:	2200      	movs	r2, #0
 80044fa:	2100      	movs	r1, #0
 80044fc:	2019      	movs	r0, #25
 80044fe:	f000 fddb 	bl	80050b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004502:	2019      	movs	r0, #25
 8004504:	f000 fe04 	bl	8005110 <HAL_NVIC_EnableIRQ>
}
 8004508:	bf00      	nop
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40010000 	.word	0x40010000
 8004514:	40023800 	.word	0x40023800
 8004518:	20000ddc 	.word	0x20000ddc
 800451c:	40026428 	.word	0x40026428
 8004520:	40014400 	.word	0x40014400
 8004524:	40020400 	.word	0x40020400

08004528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004530:	f107 030c 	add.w	r3, r7, #12
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	609a      	str	r2, [r3, #8]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a12      	ldr	r2, [pc, #72]	; (8004590 <HAL_TIM_MspPostInit+0x68>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d11e      	bne.n	8004588 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <HAL_TIM_MspPostInit+0x6c>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <HAL_TIM_MspPostInit+0x6c>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	6313      	str	r3, [r2, #48]	; 0x30
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_TIM_MspPostInit+0x6c>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800456a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456c:	2302      	movs	r3, #2
 800456e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004578:	2301      	movs	r3, #1
 800457a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800457c:	f107 030c 	add.w	r3, r7, #12
 8004580:	4619      	mov	r1, r3
 8004582:	4805      	ldr	r0, [pc, #20]	; (8004598 <HAL_TIM_MspPostInit+0x70>)
 8004584:	f001 faf6 	bl	8005b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004588:	bf00      	nop
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40010000 	.word	0x40010000
 8004594:	40023800 	.word	0x40023800
 8004598:	40020000 	.word	0x40020000

0800459c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800459c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045a0:	480d      	ldr	r0, [pc, #52]	; (80045d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045a2:	490e      	ldr	r1, [pc, #56]	; (80045dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045a4:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045a8:	e002      	b.n	80045b0 <LoopCopyDataInit>

080045aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ae:	3304      	adds	r3, #4

080045b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045b4:	d3f9      	bcc.n	80045aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045b6:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045b8:	4c0b      	ldr	r4, [pc, #44]	; (80045e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045bc:	e001      	b.n	80045c2 <LoopFillZerobss>

080045be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045c0:	3204      	adds	r2, #4

080045c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045c4:	d3fb      	bcc.n	80045be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045c6:	f7ff fe13 	bl	80041f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ca:	f00b ff97 	bl	80104fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ce:	f7fe fdc3 	bl	8003158 <main>
  bx  lr    
 80045d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80045d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045dc:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80045e0:	08013f7c 	.word	0x08013f7c
  ldr r2, =_sbss
 80045e4:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80045e8:	200015bc 	.word	0x200015bc

080045ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045ec:	e7fe      	b.n	80045ec <ADC_IRQHandler>
	...

080045f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045f4:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_Init+0x40>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_Init+0x40>)
 80045fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004600:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_Init+0x40>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <HAL_Init+0x40>)
 8004606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800460a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_Init+0x40>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a07      	ldr	r2, [pc, #28]	; (8004630 <HAL_Init+0x40>)
 8004612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004618:	2003      	movs	r0, #3
 800461a:	f000 fd2d 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800461e:	2000      	movs	r0, #0
 8004620:	f000 f808 	bl	8004634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004624:	f7ff fc94 	bl	8003f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	40023c00 	.word	0x40023c00

08004634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800463c:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_InitTick+0x54>)
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_InitTick+0x58>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	4619      	mov	r1, r3
 8004646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800464a:	fbb3 f3f1 	udiv	r3, r3, r1
 800464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fd74 	bl	8005140 <HAL_SYSTICK_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e00e      	b.n	8004680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b0f      	cmp	r3, #15
 8004666:	d80a      	bhi.n	800467e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004668:	2200      	movs	r2, #0
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004670:	f000 fd22 	bl	80050b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <HAL_InitTick+0x5c>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	e000      	b.n	8004680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200000d8 	.word	0x200000d8
 800468c:	200000e0 	.word	0x200000e0
 8004690:	200000dc 	.word	0x200000dc

08004694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_IncTick+0x20>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <HAL_IncTick+0x24>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4413      	add	r3, r2
 80046a4:	4a04      	ldr	r2, [pc, #16]	; (80046b8 <HAL_IncTick+0x24>)
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	200000e0 	.word	0x200000e0
 80046b8:	20000ecc 	.word	0x20000ecc

080046bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return uwTick;
 80046c0:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <HAL_GetTick+0x14>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000ecc 	.word	0x20000ecc

080046d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046dc:	f7ff ffee 	bl	80046bc <HAL_GetTick>
 80046e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ec:	d005      	beq.n	80046fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_Delay+0x44>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046fa:	bf00      	nop
 80046fc:	f7ff ffde 	bl	80046bc <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d8f7      	bhi.n	80046fc <HAL_Delay+0x28>
  {
  }
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200000e0 	.word	0x200000e0

0800471c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e147      	b.n	80049c2 <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4aa5      	ldr	r2, [pc, #660]	; (80049cc <HAL_ADC_Init+0x2b0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d004      	beq.n	8004746 <HAL_ADC_Init+0x2a>
 800473c:	f240 1143 	movw	r1, #323	; 0x143
 8004740:	48a3      	ldr	r0, [pc, #652]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 8004742:	f7fe feac 	bl	800349e <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d013      	beq.n	8004776 <HAL_ADC_Init+0x5a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004756:	d00e      	beq.n	8004776 <HAL_ADC_Init+0x5a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004760:	d009      	beq.n	8004776 <HAL_ADC_Init+0x5a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800476a:	d004      	beq.n	8004776 <HAL_ADC_Init+0x5a>
 800476c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004770:	4897      	ldr	r0, [pc, #604]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 8004772:	f7fe fe94 	bl	800349e <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d013      	beq.n	80047a6 <HAL_ADC_Init+0x8a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004786:	d00e      	beq.n	80047a6 <HAL_ADC_Init+0x8a>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004790:	d009      	beq.n	80047a6 <HAL_ADC_Init+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800479a:	d004      	beq.n	80047a6 <HAL_ADC_Init+0x8a>
 800479c:	f240 1145 	movw	r1, #325	; 0x145
 80047a0:	488b      	ldr	r0, [pc, #556]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 80047a2:	f7fe fe7c 	bl	800349e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_ADC_Init+0xa4>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d004      	beq.n	80047c0 <HAL_ADC_Init+0xa4>
 80047b6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80047ba:	4885      	ldr	r0, [pc, #532]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 80047bc:	f7fe fe6f 	bl	800349e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	7e1b      	ldrb	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_ADC_Init+0xbe>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7e1b      	ldrb	r3, [r3, #24]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d004      	beq.n	80047da <HAL_ADC_Init+0xbe>
 80047d0:	f240 1147 	movw	r1, #327	; 0x147
 80047d4:	487e      	ldr	r0, [pc, #504]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 80047d6:	f7fe fe62 	bl	800349e <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d054      	beq.n	800488c <HAL_ADC_Init+0x170>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ea:	d04f      	beq.n	800488c <HAL_ADC_Init+0x170>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f4:	d04a      	beq.n	800488c <HAL_ADC_Init+0x170>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047fe:	d045      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004808:	d040      	beq.n	800488c <HAL_ADC_Init+0x170>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004812:	d03b      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800481c:	d036      	beq.n	800488c <HAL_ADC_Init+0x170>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8004826:	d031      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004830:	d02c      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800483a:	d027      	beq.n	800488c <HAL_ADC_Init+0x170>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004844:	d022      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800484e:	d01d      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004858:	d018      	beq.n	800488c <HAL_ADC_Init+0x170>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8004862:	d013      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800486c:	d00e      	beq.n	800488c <HAL_ADC_Init+0x170>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004876:	d009      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	4a55      	ldr	r2, [pc, #340]	; (80049d4 <HAL_ADC_Init+0x2b8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_ADC_Init+0x170>
 8004882:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004886:	4852      	ldr	r0, [pc, #328]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 8004888:	f7fe fe09 	bl	800349e <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_ADC_Init+0x18c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489c:	d004      	beq.n	80048a8 <HAL_ADC_Init+0x18c>
 800489e:	f240 1149 	movw	r1, #329	; 0x149
 80048a2:	484b      	ldr	r0, [pc, #300]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 80048a4:	f7fe fdfb 	bl	800349e <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_ADC_Init+0x19c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d904      	bls.n	80048c2 <HAL_ADC_Init+0x1a6>
 80048b8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80048bc:	4844      	ldr	r0, [pc, #272]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 80048be:	f7fe fdee 	bl	800349e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d009      	beq.n	80048e0 <HAL_ADC_Init+0x1c4>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d004      	beq.n	80048e0 <HAL_ADC_Init+0x1c4>
 80048d6:	f240 114b 	movw	r1, #331	; 0x14b
 80048da:	483d      	ldr	r0, [pc, #244]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 80048dc:	f7fe fddf 	bl	800349e <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d00c      	beq.n	8004902 <HAL_ADC_Init+0x1e6>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_ADC_Init+0x1e6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d004      	beq.n	8004902 <HAL_ADC_Init+0x1e6>
 80048f8:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80048fc:	4834      	ldr	r0, [pc, #208]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 80048fe:	f7fe fdce 	bl	800349e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d009      	beq.n	8004920 <HAL_ADC_Init+0x204>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d004      	beq.n	8004920 <HAL_ADC_Init+0x204>
 8004916:	f240 114d 	movw	r1, #333	; 0x14d
 800491a:	482d      	ldr	r0, [pc, #180]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 800491c:	f7fe fdbf 	bl	800349e <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	4a2b      	ldr	r2, [pc, #172]	; (80049d4 <HAL_ADC_Init+0x2b8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d017      	beq.n	800495a <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	2b00      	cmp	r3, #0
 8004930:	d013      	beq.n	800495a <HAL_ADC_Init+0x23e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800493a:	d00e      	beq.n	800495a <HAL_ADC_Init+0x23e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004944:	d009      	beq.n	800495a <HAL_ADC_Init+0x23e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800494e:	d004      	beq.n	800495a <HAL_ADC_Init+0x23e>
 8004950:	f240 1151 	movw	r1, #337	; 0x151
 8004954:	481e      	ldr	r0, [pc, #120]	; (80049d0 <HAL_ADC_Init+0x2b4>)
 8004956:	f7fe fda2 	bl	800349e <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd fafc 	bl	8001f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	d118      	bne.n	80049b4 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800498a:	f023 0302 	bic.w	r3, r3, #2
 800498e:	f043 0202 	orr.w	r2, r3, #2
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f994 	bl	8004cc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	f043 0201 	orr.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
 80049b2:	e001      	b.n	80049b8 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40012000 	.word	0x40012000
 80049d0:	08013314 	.word	0x08013314
 80049d4:	0f000001 	.word	0x0f000001

080049d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b12      	cmp	r3, #18
 80049ec:	d909      	bls.n	8004a02 <HAL_ADC_ConfigChannel+0x2a>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a72      	ldr	r2, [pc, #456]	; (8004bbc <HAL_ADC_ConfigChannel+0x1e4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x2a>
 80049f8:	f240 6189 	movw	r1, #1673	; 0x689
 80049fc:	4870      	ldr	r0, [pc, #448]	; (8004bc0 <HAL_ADC_ConfigChannel+0x1e8>)
 80049fe:	f7fe fd4e 	bl	800349e <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_ADC_ConfigChannel+0x3a>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d904      	bls.n	8004a1c <HAL_ADC_ConfigChannel+0x44>
 8004a12:	f240 618a 	movw	r1, #1674	; 0x68a
 8004a16:	486a      	ldr	r0, [pc, #424]	; (8004bc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004a18:	f7fe fd41 	bl	800349e <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d01c      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d018      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d014      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d010      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b05      	cmp	r3, #5
 8004a4a:	d00c      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b06      	cmp	r3, #6
 8004a52:	d008      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d004      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x8e>
 8004a5c:	f240 618b 	movw	r1, #1675	; 0x68b
 8004a60:	4857      	ldr	r0, [pc, #348]	; (8004bc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004a62:	f7fe fd1c 	bl	800349e <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x9c>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e118      	b.n	8004ca6 <HAL_ADC_ConfigChannel+0x2ce>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b09      	cmp	r3, #9
 8004a82:	d925      	bls.n	8004ad0 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68d9      	ldr	r1, [r3, #12]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	4613      	mov	r3, r2
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	3b1e      	subs	r3, #30
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68d9      	ldr	r1, [r3, #12]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4618      	mov	r0, r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4403      	add	r3, r0
 8004ac2:	3b1e      	subs	r3, #30
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	e022      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6919      	ldr	r1, [r3, #16]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	4613      	mov	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43da      	mvns	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	400a      	ands	r2, r1
 8004af2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6919      	ldr	r1, [r3, #16]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	4618      	mov	r0, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4403      	add	r3, r0
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d824      	bhi.n	8004b68 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3b05      	subs	r3, #5
 8004b30:	221f      	movs	r2, #31
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43da      	mvns	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	3b05      	subs	r3, #5
 8004b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	635a      	str	r2, [r3, #52]	; 0x34
 8004b66:	e051      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d829      	bhi.n	8004bc4 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b23      	subs	r3, #35	; 0x23
 8004b82:	221f      	movs	r2, #31
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	43da      	mvns	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	400a      	ands	r2, r1
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	3b23      	subs	r3, #35	; 0x23
 8004bac:	fa00 f203 	lsl.w	r2, r0, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb8:	e028      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x234>
 8004bba:	bf00      	nop
 8004bbc:	10000012 	.word	0x10000012
 8004bc0:	08013314 	.word	0x08013314
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3b41      	subs	r3, #65	; 0x41
 8004bd6:	221f      	movs	r2, #31
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	400a      	ands	r2, r1
 8004be4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3b41      	subs	r3, #65	; 0x41
 8004c00:	fa00 f203 	lsl.w	r2, r0, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c0c:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <HAL_ADC_ConfigChannel+0x2d8>)
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <HAL_ADC_ConfigChannel+0x2dc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d10f      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x262>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b12      	cmp	r3, #18
 8004c20:	d10b      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_ADC_ConfigChannel+0x2dc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d12b      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x2c4>
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_ADC_ConfigChannel+0x2e0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x27e>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b11      	cmp	r3, #17
 8004c54:	d122      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <HAL_ADC_ConfigChannel+0x2e0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d111      	bne.n	8004c9c <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c78:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <HAL_ADC_ConfigChannel+0x2e4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a10      	ldr	r2, [pc, #64]	; (8004cc0 <HAL_ADC_ConfigChannel+0x2e8>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0c9a      	lsrs	r2, r3, #18
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c8e:	e002      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f9      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40012300 	.word	0x40012300
 8004cb4:	40012000 	.word	0x40012000
 8004cb8:	10000012 	.word	0x10000012
 8004cbc:	200000d8 	.word	0x200000d8
 8004cc0:	431bde83 	.word	0x431bde83

08004cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ccc:	4b7f      	ldr	r3, [pc, #508]	; (8004ecc <ADC_Init+0x208>)
 8004cce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	021a      	lsls	r2, r3, #8
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6899      	ldr	r1, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <ADC_Init+0x20c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d022      	beq.n	8004da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6899      	ldr	r1, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
 8004da0:	e00f      	b.n	8004dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0202 	bic.w	r2, r2, #2
 8004dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7e1b      	ldrb	r3, [r3, #24]
 8004ddc:	005a      	lsls	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d028      	beq.n	8004e42 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <ADC_Init+0x13c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d904      	bls.n	8004e0a <ADC_Init+0x146>
 8004e00:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8004e04:	4833      	ldr	r0, [pc, #204]	; (8004ed4 <ADC_Init+0x210>)
 8004e06:	f7fe fb4a 	bl	800349e <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e18:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e28:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6859      	ldr	r1, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	3b01      	subs	r3, #1
 8004e36:	035a      	lsls	r2, r3, #13
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	e007      	b.n	8004e52 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e50:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	051a      	lsls	r2, r3, #20
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6899      	ldr	r1, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e94:	025a      	lsls	r2, r3, #9
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6899      	ldr	r1, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	029a      	lsls	r2, r3, #10
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	609a      	str	r2, [r3, #8]
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40012300 	.word	0x40012300
 8004ed0:	0f000001 	.word	0x0f000001
 8004ed4:	08013314 	.word	0x08013314

08004ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0a:	4a04      	ldr	r2, [pc, #16]	; (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	60d3      	str	r3, [r2, #12]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <__NVIC_GetPriorityGrouping+0x18>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 0307 	and.w	r3, r3, #7
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db0b      	blt.n	8004f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	f003 021f 	and.w	r2, r3, #31
 8004f54:	4907      	ldr	r1, [pc, #28]	; (8004f74 <__NVIC_EnableIRQ+0x38>)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f1c3 0307 	rsb	r3, r3, #7
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	bf28      	it	cs
 8004fea:	2304      	movcs	r3, #4
 8004fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d902      	bls.n	8004ffc <NVIC_EncodePriority+0x30>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3b03      	subs	r3, #3
 8004ffa:	e000      	b.n	8004ffe <NVIC_EncodePriority+0x32>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43da      	mvns	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	401a      	ands	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	43d9      	mvns	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005024:	4313      	orrs	r3, r2
         );
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005044:	d301      	bcc.n	800504a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005046:	2301      	movs	r3, #1
 8005048:	e00f      	b.n	800506a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <SysTick_Config+0x40>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005052:	210f      	movs	r1, #15
 8005054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005058:	f7ff ff8e 	bl	8004f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <SysTick_Config+0x40>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <SysTick_Config+0x40>)
 8005064:	2207      	movs	r2, #7
 8005066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000e010 	.word	0xe000e010

08005078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b07      	cmp	r3, #7
 8005084:	d00f      	beq.n	80050a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b06      	cmp	r3, #6
 800508a:	d00c      	beq.n	80050a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b05      	cmp	r3, #5
 8005090:	d009      	beq.n	80050a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d006      	beq.n	80050a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d003      	beq.n	80050a6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800509e:	2192      	movs	r1, #146	; 0x92
 80050a0:	4804      	ldr	r0, [pc, #16]	; (80050b4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80050a2:	f7fe f9fc 	bl	800349e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff ff16 	bl	8004ed8 <__NVIC_SetPriorityGrouping>
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	0801334c 	.word	0x0801334c

080050b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b0f      	cmp	r3, #15
 80050ce:	d903      	bls.n	80050d8 <HAL_NVIC_SetPriority+0x20>
 80050d0:	21aa      	movs	r1, #170	; 0xaa
 80050d2:	480e      	ldr	r0, [pc, #56]	; (800510c <HAL_NVIC_SetPriority+0x54>)
 80050d4:	f7fe f9e3 	bl	800349e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	d903      	bls.n	80050e6 <HAL_NVIC_SetPriority+0x2e>
 80050de:	21ab      	movs	r1, #171	; 0xab
 80050e0:	480a      	ldr	r0, [pc, #40]	; (800510c <HAL_NVIC_SetPriority+0x54>)
 80050e2:	f7fe f9dc 	bl	800349e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e6:	f7ff ff1b 	bl	8004f20 <__NVIC_GetPriorityGrouping>
 80050ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	6978      	ldr	r0, [r7, #20]
 80050f2:	f7ff ff6b 	bl	8004fcc <NVIC_EncodePriority>
 80050f6:	4602      	mov	r2, r0
 80050f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff ff3a 	bl	8004f78 <__NVIC_SetPriority>
}
 8005104:	bf00      	nop
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	0801334c 	.word	0x0801334c

08005110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	4603      	mov	r3, r0
 8005118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800511a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511e:	2b00      	cmp	r3, #0
 8005120:	da03      	bge.n	800512a <HAL_NVIC_EnableIRQ+0x1a>
 8005122:	21be      	movs	r1, #190	; 0xbe
 8005124:	4805      	ldr	r0, [pc, #20]	; (800513c <HAL_NVIC_EnableIRQ+0x2c>)
 8005126:	f7fe f9ba 	bl	800349e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800512a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ff04 	bl	8004f3c <__NVIC_EnableIRQ>
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	0801334c 	.word	0x0801334c

08005140 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff73 	bl	8005034 <SysTick_Config>
 800514e:	4603      	mov	r3, r0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005164:	f7ff faaa 	bl	80046bc <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e204      	b.n	800557e <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a97      	ldr	r2, [pc, #604]	; (80053d8 <HAL_DMA_Init+0x280>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d04e      	beq.n	800521c <HAL_DMA_Init+0xc4>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a96      	ldr	r2, [pc, #600]	; (80053dc <HAL_DMA_Init+0x284>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d049      	beq.n	800521c <HAL_DMA_Init+0xc4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a94      	ldr	r2, [pc, #592]	; (80053e0 <HAL_DMA_Init+0x288>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d044      	beq.n	800521c <HAL_DMA_Init+0xc4>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a93      	ldr	r2, [pc, #588]	; (80053e4 <HAL_DMA_Init+0x28c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d03f      	beq.n	800521c <HAL_DMA_Init+0xc4>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a91      	ldr	r2, [pc, #580]	; (80053e8 <HAL_DMA_Init+0x290>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d03a      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a90      	ldr	r2, [pc, #576]	; (80053ec <HAL_DMA_Init+0x294>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d035      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a8e      	ldr	r2, [pc, #568]	; (80053f0 <HAL_DMA_Init+0x298>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d030      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a8d      	ldr	r2, [pc, #564]	; (80053f4 <HAL_DMA_Init+0x29c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d02b      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a8b      	ldr	r2, [pc, #556]	; (80053f8 <HAL_DMA_Init+0x2a0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d026      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a8a      	ldr	r2, [pc, #552]	; (80053fc <HAL_DMA_Init+0x2a4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d021      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a88      	ldr	r2, [pc, #544]	; (8005400 <HAL_DMA_Init+0x2a8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01c      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a87      	ldr	r2, [pc, #540]	; (8005404 <HAL_DMA_Init+0x2ac>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d017      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a85      	ldr	r2, [pc, #532]	; (8005408 <HAL_DMA_Init+0x2b0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d012      	beq.n	800521c <HAL_DMA_Init+0xc4>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a84      	ldr	r2, [pc, #528]	; (800540c <HAL_DMA_Init+0x2b4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00d      	beq.n	800521c <HAL_DMA_Init+0xc4>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a82      	ldr	r2, [pc, #520]	; (8005410 <HAL_DMA_Init+0x2b8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d008      	beq.n	800521c <HAL_DMA_Init+0xc4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a81      	ldr	r2, [pc, #516]	; (8005414 <HAL_DMA_Init+0x2bc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <HAL_DMA_Init+0xc4>
 8005214:	21b8      	movs	r1, #184	; 0xb8
 8005216:	4880      	ldr	r0, [pc, #512]	; (8005418 <HAL_DMA_Init+0x2c0>)
 8005218:	f7fe f941 	bl	800349e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d026      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800522c:	d021      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005236:	d01c      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005240:	d017      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800524a:	d012      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005254:	d00d      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800525e:	d008      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005268:	d003      	beq.n	8005272 <HAL_DMA_Init+0x11a>
 800526a:	21b9      	movs	r1, #185	; 0xb9
 800526c:	486a      	ldr	r0, [pc, #424]	; (8005418 <HAL_DMA_Init+0x2c0>)
 800526e:	f7fe f916 	bl	800349e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_DMA_Init+0x13a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d007      	beq.n	8005292 <HAL_DMA_Init+0x13a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b80      	cmp	r3, #128	; 0x80
 8005288:	d003      	beq.n	8005292 <HAL_DMA_Init+0x13a>
 800528a:	21ba      	movs	r1, #186	; 0xba
 800528c:	4862      	ldr	r0, [pc, #392]	; (8005418 <HAL_DMA_Init+0x2c0>)
 800528e:	f7fe f906 	bl	800349e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529a:	d007      	beq.n	80052ac <HAL_DMA_Init+0x154>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <HAL_DMA_Init+0x154>
 80052a4:	21bb      	movs	r1, #187	; 0xbb
 80052a6:	485c      	ldr	r0, [pc, #368]	; (8005418 <HAL_DMA_Init+0x2c0>)
 80052a8:	f7fe f8f9 	bl	800349e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b4:	d007      	beq.n	80052c6 <HAL_DMA_Init+0x16e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_DMA_Init+0x16e>
 80052be:	21bc      	movs	r1, #188	; 0xbc
 80052c0:	4855      	ldr	r0, [pc, #340]	; (8005418 <HAL_DMA_Init+0x2c0>)
 80052c2:	f7fe f8ec 	bl	800349e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <HAL_DMA_Init+0x192>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d6:	d008      	beq.n	80052ea <HAL_DMA_Init+0x192>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e0:	d003      	beq.n	80052ea <HAL_DMA_Init+0x192>
 80052e2:	21bd      	movs	r1, #189	; 0xbd
 80052e4:	484c      	ldr	r0, [pc, #304]	; (8005418 <HAL_DMA_Init+0x2c0>)
 80052e6:	f7fe f8da 	bl	800349e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00d      	beq.n	800530e <HAL_DMA_Init+0x1b6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fa:	d008      	beq.n	800530e <HAL_DMA_Init+0x1b6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005304:	d003      	beq.n	800530e <HAL_DMA_Init+0x1b6>
 8005306:	21be      	movs	r1, #190	; 0xbe
 8005308:	4843      	ldr	r0, [pc, #268]	; (8005418 <HAL_DMA_Init+0x2c0>)
 800530a:	f7fe f8c8 	bl	800349e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <HAL_DMA_Init+0x1d8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531e:	d007      	beq.n	8005330 <HAL_DMA_Init+0x1d8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	2b20      	cmp	r3, #32
 8005326:	d003      	beq.n	8005330 <HAL_DMA_Init+0x1d8>
 8005328:	21bf      	movs	r1, #191	; 0xbf
 800532a:	483b      	ldr	r0, [pc, #236]	; (8005418 <HAL_DMA_Init+0x2c0>)
 800532c:	f7fe f8b7 	bl	800349e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <HAL_DMA_Init+0x206>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005340:	d00d      	beq.n	800535e <HAL_DMA_Init+0x206>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800534a:	d008      	beq.n	800535e <HAL_DMA_Init+0x206>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005354:	d003      	beq.n	800535e <HAL_DMA_Init+0x206>
 8005356:	21c0      	movs	r1, #192	; 0xc0
 8005358:	482f      	ldr	r0, [pc, #188]	; (8005418 <HAL_DMA_Init+0x2c0>)
 800535a:	f7fe f8a0 	bl	800349e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_DMA_Init+0x21e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b04      	cmp	r3, #4
 800536c:	d003      	beq.n	8005376 <HAL_DMA_Init+0x21e>
 800536e:	21c1      	movs	r1, #193	; 0xc1
 8005370:	4829      	ldr	r0, [pc, #164]	; (8005418 <HAL_DMA_Init+0x2c0>)
 8005372:	f7fe f894 	bl	800349e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d065      	beq.n	800544a <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00f      	beq.n	80053a6 <HAL_DMA_Init+0x24e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	2b01      	cmp	r3, #1
 800538c:	d00b      	beq.n	80053a6 <HAL_DMA_Init+0x24e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	2b02      	cmp	r3, #2
 8005394:	d007      	beq.n	80053a6 <HAL_DMA_Init+0x24e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	2b03      	cmp	r3, #3
 800539c:	d003      	beq.n	80053a6 <HAL_DMA_Init+0x24e>
 800539e:	21c6      	movs	r1, #198	; 0xc6
 80053a0:	481d      	ldr	r0, [pc, #116]	; (8005418 <HAL_DMA_Init+0x2c0>)
 80053a2:	f7fe f87c 	bl	800349e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d036      	beq.n	800541c <HAL_DMA_Init+0x2c4>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053b6:	d031      	beq.n	800541c <HAL_DMA_Init+0x2c4>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053c0:	d02c      	beq.n	800541c <HAL_DMA_Init+0x2c4>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ca:	d027      	beq.n	800541c <HAL_DMA_Init+0x2c4>
 80053cc:	21c7      	movs	r1, #199	; 0xc7
 80053ce:	4812      	ldr	r0, [pc, #72]	; (8005418 <HAL_DMA_Init+0x2c0>)
 80053d0:	f7fe f865 	bl	800349e <assert_failed>
 80053d4:	e022      	b.n	800541c <HAL_DMA_Init+0x2c4>
 80053d6:	bf00      	nop
 80053d8:	40026010 	.word	0x40026010
 80053dc:	40026028 	.word	0x40026028
 80053e0:	40026040 	.word	0x40026040
 80053e4:	40026058 	.word	0x40026058
 80053e8:	40026070 	.word	0x40026070
 80053ec:	40026088 	.word	0x40026088
 80053f0:	400260a0 	.word	0x400260a0
 80053f4:	400260b8 	.word	0x400260b8
 80053f8:	40026410 	.word	0x40026410
 80053fc:	40026428 	.word	0x40026428
 8005400:	40026440 	.word	0x40026440
 8005404:	40026458 	.word	0x40026458
 8005408:	40026470 	.word	0x40026470
 800540c:	40026488 	.word	0x40026488
 8005410:	400264a0 	.word	0x400264a0
 8005414:	400264b8 	.word	0x400264b8
 8005418:	08013388 	.word	0x08013388
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d012      	beq.n	800544a <HAL_DMA_Init+0x2f2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800542c:	d00d      	beq.n	800544a <HAL_DMA_Init+0x2f2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005436:	d008      	beq.n	800544a <HAL_DMA_Init+0x2f2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005440:	d003      	beq.n	800544a <HAL_DMA_Init+0x2f2>
 8005442:	21c8      	movs	r1, #200	; 0xc8
 8005444:	4850      	ldr	r0, [pc, #320]	; (8005588 <HAL_DMA_Init+0x430>)
 8005446:	f7fe f82a 	bl	800349e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800546a:	e00f      	b.n	800548c <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800546c:	f7ff f926 	bl	80046bc <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b05      	cmp	r3, #5
 8005478:	d908      	bls.n	800548c <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2203      	movs	r2, #3
 8005484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e078      	b.n	800557e <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1e8      	bne.n	800546c <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4b39      	ldr	r3, [pc, #228]	; (800558c <HAL_DMA_Init+0x434>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d107      	bne.n	80054f6 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	4313      	orrs	r3, r2
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 0307 	bic.w	r3, r3, #7
 800550c:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b04      	cmp	r3, #4
 800551e:	d117      	bne.n	8005550 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00e      	beq.n	8005550 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 faa2 	bl	8005a7c <DMA_CheckFifoParam>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d008      	beq.n	8005550 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2240      	movs	r2, #64	; 0x40
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800554c:	2301      	movs	r3, #1
 800554e:	e016      	b.n	800557e <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa59 	bl	8005a10 <DMA_CalcBaseAndBitshift>
 800555e:	4603      	mov	r3, r0
 8005560:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	223f      	movs	r2, #63	; 0x3f
 8005568:	409a      	lsls	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	08013388 	.word	0x08013388
 800558c:	f010803f 	.word	0xf010803f

08005590 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_DMA_Start_IT+0x26>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d304      	bcc.n	80055c0 <HAL_DMA_Start_IT+0x30>
 80055b6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80055ba:	4827      	ldr	r0, [pc, #156]	; (8005658 <HAL_DMA_Start_IT+0xc8>)
 80055bc:	f7fd ff6f 	bl	800349e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_DMA_Start_IT+0x3e>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e040      	b.n	8005650 <HAL_DMA_Start_IT+0xc0>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d12f      	bne.n	8005642 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f9dc 	bl	80059b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005600:	223f      	movs	r2, #63	; 0x3f
 8005602:	409a      	lsls	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0216 	orr.w	r2, r2, #22
 8005616:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d007      	beq.n	8005630 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0208 	orr.w	r2, r2, #8
 800562e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	e005      	b.n	800564e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800564e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	08013388 	.word	0x08013388

0800565c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d004      	beq.n	800567a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e00c      	b.n	8005694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2205      	movs	r2, #5
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056ac:	4b92      	ldr	r3, [pc, #584]	; (80058f8 <HAL_DMA_IRQHandler+0x258>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a92      	ldr	r2, [pc, #584]	; (80058fc <HAL_DMA_IRQHandler+0x25c>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ca:	2208      	movs	r2, #8
 80056cc:	409a      	lsls	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01a      	beq.n	800570c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d013      	beq.n	800570c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0204 	bic.w	r2, r2, #4
 80056f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f8:	2208      	movs	r2, #8
 80056fa:	409a      	lsls	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	f043 0201 	orr.w	r2, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005710:	2201      	movs	r2, #1
 8005712:	409a      	lsls	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4013      	ands	r3, r2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d012      	beq.n	8005742 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572e:	2201      	movs	r2, #1
 8005730:	409a      	lsls	r2, r3
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f043 0202 	orr.w	r2, r3, #2
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	2204      	movs	r2, #4
 8005748:	409a      	lsls	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00b      	beq.n	8005778 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005764:	2204      	movs	r2, #4
 8005766:	409a      	lsls	r2, r3
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	f043 0204 	orr.w	r2, r3, #4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577c:	2210      	movs	r2, #16
 800577e:	409a      	lsls	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d043      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03c      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579a:	2210      	movs	r2, #16
 800579c:	409a      	lsls	r2, r3
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d108      	bne.n	80057d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d024      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	e01f      	b.n	8005810 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01b      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
 80057e0:	e016      	b.n	8005810 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d107      	bne.n	8005800 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0208 	bic.w	r2, r2, #8
 80057fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005814:	2220      	movs	r2, #32
 8005816:	409a      	lsls	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4013      	ands	r3, r2
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 808e 	beq.w	800593e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8086 	beq.w	800593e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005836:	2220      	movs	r2, #32
 8005838:	409a      	lsls	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b05      	cmp	r3, #5
 8005848:	d136      	bne.n	80058b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0216 	bic.w	r2, r2, #22
 8005858:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005868:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <HAL_DMA_IRQHandler+0x1da>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0208 	bic.w	r2, r2, #8
 8005888:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588e:	223f      	movs	r2, #63	; 0x3f
 8005890:	409a      	lsls	r2, r3
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d07d      	beq.n	80059aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
        }
        return;
 80058b6:	e078      	b.n	80059aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d01c      	beq.n	8005900 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d030      	beq.n	800593e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	4798      	blx	r3
 80058e4:	e02b      	b.n	800593e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d027      	beq.n	800593e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
 80058f6:	e022      	b.n	800593e <HAL_DMA_IRQHandler+0x29e>
 80058f8:	200000d8 	.word	0x200000d8
 80058fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10f      	bne.n	800592e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0210 	bic.w	r2, r2, #16
 800591c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	2b00      	cmp	r3, #0
 8005944:	d032      	beq.n	80059ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d022      	beq.n	8005998 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2205      	movs	r2, #5
 8005956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0201 	bic.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	3301      	adds	r3, #1
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	429a      	cmp	r2, r3
 8005974:	d307      	bcc.n	8005986 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f2      	bne.n	800596a <HAL_DMA_IRQHandler+0x2ca>
 8005984:	e000      	b.n	8005988 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005986:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	4798      	blx	r3
 80059a8:	e000      	b.n	80059ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80059aa:	bf00      	nop
    }
  }
}
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop

080059b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d108      	bne.n	80059f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059f2:	e007      	b.n	8005a04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	60da      	str	r2, [r3, #12]
}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	3b10      	subs	r3, #16
 8005a20:	4a14      	ldr	r2, [pc, #80]	; (8005a74 <DMA_CalcBaseAndBitshift+0x64>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a2a:	4a13      	ldr	r2, [pc, #76]	; (8005a78 <DMA_CalcBaseAndBitshift+0x68>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d909      	bls.n	8005a52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8005a50:	e007      	b.n	8005a62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	aaaaaaab 	.word	0xaaaaaaab
 8005a78:	08013b7c 	.word	0x08013b7c

08005a7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d11f      	bne.n	8005ad6 <DMA_CheckFifoParam+0x5a>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d856      	bhi.n	8005b4a <DMA_CheckFifoParam+0xce>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <DMA_CheckFifoParam+0x28>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005ac7 	.word	0x08005ac7
 8005aac:	08005ab5 	.word	0x08005ab5
 8005ab0:	08005b4b 	.word	0x08005b4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d046      	beq.n	8005b4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac4:	e043      	b.n	8005b4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ace:	d140      	bne.n	8005b52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad4:	e03d      	b.n	8005b52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ade:	d121      	bne.n	8005b24 <DMA_CheckFifoParam+0xa8>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d837      	bhi.n	8005b56 <DMA_CheckFifoParam+0xda>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <DMA_CheckFifoParam+0x70>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b03 	.word	0x08005b03
 8005af4:	08005afd 	.word	0x08005afd
 8005af8:	08005b15 	.word	0x08005b15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	73fb      	strb	r3, [r7, #15]
      break;
 8005b00:	e030      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d025      	beq.n	8005b5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b12:	e022      	b.n	8005b5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b1c:	d11f      	bne.n	8005b5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b22:	e01c      	b.n	8005b5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d903      	bls.n	8005b32 <DMA_CheckFifoParam+0xb6>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d003      	beq.n	8005b38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b30:	e018      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
      break;
 8005b36:	e015      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00e      	beq.n	8005b62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      break;
 8005b48:	e00b      	b.n	8005b62 <DMA_CheckFifoParam+0xe6>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e00a      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e008      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      break;
 8005b52:	bf00      	nop
 8005b54:	e006      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      break;
 8005b56:	bf00      	nop
 8005b58:	e004      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      break;
 8005b5a:	bf00      	nop
 8005b5c:	e002      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b5e:	bf00      	nop
 8005b60:	e000      	b.n	8005b64 <DMA_CheckFifoParam+0xe8>
      break;
 8005b62:	bf00      	nop
    }
  } 
  
  return status; 
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop

08005b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	; (8005c5c <HAL_GPIO_Init+0xe8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d017      	beq.n	8005bc2 <HAL_GPIO_Init+0x4e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a32      	ldr	r2, [pc, #200]	; (8005c60 <HAL_GPIO_Init+0xec>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_GPIO_Init+0x4e>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a31      	ldr	r2, [pc, #196]	; (8005c64 <HAL_GPIO_Init+0xf0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d00f      	beq.n	8005bc2 <HAL_GPIO_Init+0x4e>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a30      	ldr	r2, [pc, #192]	; (8005c68 <HAL_GPIO_Init+0xf4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00b      	beq.n	8005bc2 <HAL_GPIO_Init+0x4e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2f      	ldr	r2, [pc, #188]	; (8005c6c <HAL_GPIO_Init+0xf8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d007      	beq.n	8005bc2 <HAL_GPIO_Init+0x4e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2e      	ldr	r2, [pc, #184]	; (8005c70 <HAL_GPIO_Init+0xfc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d003      	beq.n	8005bc2 <HAL_GPIO_Init+0x4e>
 8005bba:	21ac      	movs	r1, #172	; 0xac
 8005bbc:	482d      	ldr	r0, [pc, #180]	; (8005c74 <HAL_GPIO_Init+0x100>)
 8005bbe:	f7fd fc6e 	bl	800349e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_GPIO_Init+0x64>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	0c1b      	lsrs	r3, r3, #16
 8005bd2:	041b      	lsls	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_GPIO_Init+0x6c>
 8005bd8:	21ad      	movs	r1, #173	; 0xad
 8005bda:	4826      	ldr	r0, [pc, #152]	; (8005c74 <HAL_GPIO_Init+0x100>)
 8005bdc:	f7fd fc5f 	bl	800349e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d035      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d031      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b11      	cmp	r3, #17
 8005bf6:	d02d      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d029      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b12      	cmp	r3, #18
 8005c06:	d025      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005c10:	d020      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005c1a:	d01b      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005c24:	d016      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005c2e:	d011      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005c38:	d00c      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005c42:	d007      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d003      	beq.n	8005c54 <HAL_GPIO_Init+0xe0>
 8005c4c:	21ae      	movs	r1, #174	; 0xae
 8005c4e:	4809      	ldr	r0, [pc, #36]	; (8005c74 <HAL_GPIO_Init+0x100>)
 8005c50:	f7fd fc25 	bl	800349e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e211      	b.n	800607e <HAL_GPIO_Init+0x50a>
 8005c5a:	bf00      	nop
 8005c5c:	40020000 	.word	0x40020000
 8005c60:	40020400 	.word	0x40020400
 8005c64:	40020800 	.word	0x40020800
 8005c68:	40020c00 	.word	0x40020c00
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	40021c00 	.word	0x40021c00
 8005c74:	080133c0 	.word	0x080133c0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c78:	2201      	movs	r2, #1
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	f040 81f1 	bne.w	8006078 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d005      	beq.n	8005cae <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d144      	bne.n	8005d38 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00f      	beq.n	8005cd6 <HAL_GPIO_Init+0x162>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_GPIO_Init+0x162>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d007      	beq.n	8005cd6 <HAL_GPIO_Init+0x162>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d003      	beq.n	8005cd6 <HAL_GPIO_Init+0x162>
 8005cce:	21c0      	movs	r1, #192	; 0xc0
 8005cd0:	489f      	ldr	r0, [pc, #636]	; (8005f50 <HAL_GPIO_Init+0x3dc>)
 8005cd2:	f7fd fbe4 	bl	800349e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	2203      	movs	r2, #3
 8005ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	4013      	ands	r3, r2
 8005cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4013      	ands	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	091b      	lsrs	r3, r3, #4
 8005d22:	f003 0201 	and.w	r2, r3, #1
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d027      	beq.n	8005d94 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00b      	beq.n	8005d64 <HAL_GPIO_Init+0x1f0>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d007      	beq.n	8005d64 <HAL_GPIO_Init+0x1f0>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d003      	beq.n	8005d64 <HAL_GPIO_Init+0x1f0>
 8005d5c:	21d1      	movs	r1, #209	; 0xd1
 8005d5e:	487c      	ldr	r0, [pc, #496]	; (8005f50 <HAL_GPIO_Init+0x3dc>)
 8005d60:	f7fd fb9d 	bl	800349e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	2203      	movs	r2, #3
 8005d70:	fa02 f303 	lsl.w	r3, r2, r3
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0303 	and.w	r3, r3, #3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	f040 80a0 	bne.w	8005ee2 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d077      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b09      	cmp	r3, #9
 8005db0:	d073      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d06f      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d06b      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d067      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d063      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d05f      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d05b      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d057      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d053      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d04f      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d04b      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d047      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d043      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d03f      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d03b      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d037      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	d033      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b06      	cmp	r3, #6
 8005e38:	d02f      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d02b      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d027      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b07      	cmp	r3, #7
 8005e50:	d023      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b07      	cmp	r3, #7
 8005e58:	d01f      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b07      	cmp	r3, #7
 8005e60:	d01b      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d017      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b0a      	cmp	r3, #10
 8005e70:	d013      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b09      	cmp	r3, #9
 8005e78:	d00f      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d00b      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b0c      	cmp	r3, #12
 8005e88:	d007      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b0f      	cmp	r3, #15
 8005e90:	d003      	beq.n	8005e9a <HAL_GPIO_Init+0x326>
 8005e92:	21de      	movs	r1, #222	; 0xde
 8005e94:	482e      	ldr	r0, [pc, #184]	; (8005f50 <HAL_GPIO_Init+0x3dc>)
 8005e96:	f7fd fb02 	bl	800349e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	08da      	lsrs	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	220f      	movs	r2, #15
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43db      	mvns	r3, r3
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	08da      	lsrs	r2, r3, #3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3208      	adds	r2, #8
 8005edc:	69b9      	ldr	r1, [r7, #24]
 8005ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	2203      	movs	r2, #3
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f003 0203 	and.w	r2, r3, #3
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80aa 	beq.w	8006078 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_GPIO_Init+0x3e0>)
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	4a09      	ldr	r2, [pc, #36]	; (8005f54 <HAL_GPIO_Init+0x3e0>)
 8005f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f32:	6453      	str	r3, [r2, #68]	; 0x44
 8005f34:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <HAL_GPIO_Init+0x3e0>)
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f40:	4a05      	ldr	r2, [pc, #20]	; (8005f58 <HAL_GPIO_Init+0x3e4>)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	089b      	lsrs	r3, r3, #2
 8005f46:	3302      	adds	r3, #2
 8005f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4c:	e006      	b.n	8005f5c <HAL_GPIO_Init+0x3e8>
 8005f4e:	bf00      	nop
 8005f50:	080133c0 	.word	0x080133c0
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40013800 	.word	0x40013800
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	220f      	movs	r2, #15
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	43db      	mvns	r3, r3
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	4013      	ands	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a46      	ldr	r2, [pc, #280]	; (8006090 <HAL_GPIO_Init+0x51c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d019      	beq.n	8005fb0 <HAL_GPIO_Init+0x43c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a45      	ldr	r2, [pc, #276]	; (8006094 <HAL_GPIO_Init+0x520>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <HAL_GPIO_Init+0x438>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a44      	ldr	r2, [pc, #272]	; (8006098 <HAL_GPIO_Init+0x524>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_GPIO_Init+0x434>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a43      	ldr	r2, [pc, #268]	; (800609c <HAL_GPIO_Init+0x528>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d007      	beq.n	8005fa4 <HAL_GPIO_Init+0x430>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a42      	ldr	r2, [pc, #264]	; (80060a0 <HAL_GPIO_Init+0x52c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d101      	bne.n	8005fa0 <HAL_GPIO_Init+0x42c>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	e008      	b.n	8005fb2 <HAL_GPIO_Init+0x43e>
 8005fa0:	2307      	movs	r3, #7
 8005fa2:	e006      	b.n	8005fb2 <HAL_GPIO_Init+0x43e>
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e004      	b.n	8005fb2 <HAL_GPIO_Init+0x43e>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e002      	b.n	8005fb2 <HAL_GPIO_Init+0x43e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <HAL_GPIO_Init+0x43e>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	f002 0203 	and.w	r2, r2, #3
 8005fb8:	0092      	lsls	r2, r2, #2
 8005fba:	4093      	lsls	r3, r2
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fc2:	4938      	ldr	r1, [pc, #224]	; (80060a4 <HAL_GPIO_Init+0x530>)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	089b      	lsrs	r3, r3, #2
 8005fc8:	3302      	adds	r3, #2
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fd0:	4b35      	ldr	r3, [pc, #212]	; (80060a8 <HAL_GPIO_Init+0x534>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ff4:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <HAL_GPIO_Init+0x534>)
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ffa:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <HAL_GPIO_Init+0x534>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	43db      	mvns	r3, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800601e:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <HAL_GPIO_Init+0x534>)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006024:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <HAL_GPIO_Init+0x534>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006048:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <HAL_GPIO_Init+0x534>)
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800604e:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <HAL_GPIO_Init+0x534>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006072:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <HAL_GPIO_Init+0x534>)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3301      	adds	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b0f      	cmp	r3, #15
 8006082:	f67f adf9 	bls.w	8005c78 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8006086:	bf00      	nop
 8006088:	bf00      	nop
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40020000 	.word	0x40020000
 8006094:	40020400 	.word	0x40020400
 8006098:	40020800 	.word	0x40020800
 800609c:	40020c00 	.word	0x40020c00
 80060a0:	40021000 	.word	0x40021000
 80060a4:	40013800 	.word	0x40013800
 80060a8:	40013c00 	.word	0x40013c00

080060ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a71      	ldr	r2, [pc, #452]	; (800628c <HAL_GPIO_DeInit+0x1e0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d018      	beq.n	80060fc <HAL_GPIO_DeInit+0x50>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a70      	ldr	r2, [pc, #448]	; (8006290 <HAL_GPIO_DeInit+0x1e4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d014      	beq.n	80060fc <HAL_GPIO_DeInit+0x50>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a6f      	ldr	r2, [pc, #444]	; (8006294 <HAL_GPIO_DeInit+0x1e8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d010      	beq.n	80060fc <HAL_GPIO_DeInit+0x50>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a6e      	ldr	r2, [pc, #440]	; (8006298 <HAL_GPIO_DeInit+0x1ec>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00c      	beq.n	80060fc <HAL_GPIO_DeInit+0x50>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a6d      	ldr	r2, [pc, #436]	; (800629c <HAL_GPIO_DeInit+0x1f0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d008      	beq.n	80060fc <HAL_GPIO_DeInit+0x50>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a6c      	ldr	r2, [pc, #432]	; (80062a0 <HAL_GPIO_DeInit+0x1f4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_GPIO_DeInit+0x50>
 80060f2:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80060f6:	486b      	ldr	r0, [pc, #428]	; (80062a4 <HAL_GPIO_DeInit+0x1f8>)
 80060f8:	f7fd f9d1 	bl	800349e <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	e0bb      	b.n	800627a <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006102:	2201      	movs	r2, #1
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4013      	ands	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	429a      	cmp	r2, r3
 800611a:	f040 80ab 	bne.w	8006274 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800611e:	4a62      	ldr	r2, [pc, #392]	; (80062a8 <HAL_GPIO_DeInit+0x1fc>)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	089b      	lsrs	r3, r3, #2
 8006124:	3302      	adds	r3, #2
 8006126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	220f      	movs	r2, #15
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	4013      	ands	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a52      	ldr	r2, [pc, #328]	; (800628c <HAL_GPIO_DeInit+0x1e0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d019      	beq.n	800617c <HAL_GPIO_DeInit+0xd0>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a51      	ldr	r2, [pc, #324]	; (8006290 <HAL_GPIO_DeInit+0x1e4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_GPIO_DeInit+0xcc>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a50      	ldr	r2, [pc, #320]	; (8006294 <HAL_GPIO_DeInit+0x1e8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00d      	beq.n	8006174 <HAL_GPIO_DeInit+0xc8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a4f      	ldr	r2, [pc, #316]	; (8006298 <HAL_GPIO_DeInit+0x1ec>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <HAL_GPIO_DeInit+0xc4>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a4e      	ldr	r2, [pc, #312]	; (800629c <HAL_GPIO_DeInit+0x1f0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <HAL_GPIO_DeInit+0xc0>
 8006168:	2304      	movs	r3, #4
 800616a:	e008      	b.n	800617e <HAL_GPIO_DeInit+0xd2>
 800616c:	2307      	movs	r3, #7
 800616e:	e006      	b.n	800617e <HAL_GPIO_DeInit+0xd2>
 8006170:	2303      	movs	r3, #3
 8006172:	e004      	b.n	800617e <HAL_GPIO_DeInit+0xd2>
 8006174:	2302      	movs	r3, #2
 8006176:	e002      	b.n	800617e <HAL_GPIO_DeInit+0xd2>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_GPIO_DeInit+0xd2>
 800617c:	2300      	movs	r3, #0
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	f002 0203 	and.w	r2, r2, #3
 8006184:	0092      	lsls	r2, r2, #2
 8006186:	4093      	lsls	r3, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d132      	bne.n	80061f4 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800618e:	4b47      	ldr	r3, [pc, #284]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	43db      	mvns	r3, r3
 8006196:	4945      	ldr	r1, [pc, #276]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 8006198:	4013      	ands	r3, r2
 800619a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800619c:	4b43      	ldr	r3, [pc, #268]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	4941      	ldr	r1, [pc, #260]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80061aa:	4b40      	ldr	r3, [pc, #256]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	493e      	ldr	r1, [pc, #248]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80061b8:	4b3c      	ldr	r3, [pc, #240]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	43db      	mvns	r3, r3
 80061c0:	493a      	ldr	r1, [pc, #232]	; (80062ac <HAL_GPIO_DeInit+0x200>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	220f      	movs	r2, #15
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80061d6:	4a34      	ldr	r2, [pc, #208]	; (80062a8 <HAL_GPIO_DeInit+0x1fc>)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	089b      	lsrs	r3, r3, #2
 80061dc:	3302      	adds	r3, #2
 80061de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	43da      	mvns	r2, r3
 80061e6:	4830      	ldr	r0, [pc, #192]	; (80062a8 <HAL_GPIO_DeInit+0x1fc>)
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	400a      	ands	r2, r1
 80061ee:	3302      	adds	r3, #2
 80061f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	2103      	movs	r1, #3
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	401a      	ands	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	08da      	lsrs	r2, r3, #3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3208      	adds	r2, #8
 8006212:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	220f      	movs	r2, #15
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	43db      	mvns	r3, r3
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	08d2      	lsrs	r2, r2, #3
 800622a:	4019      	ands	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3208      	adds	r2, #8
 8006230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	2103      	movs	r1, #3
 800623e:	fa01 f303 	lsl.w	r3, r1, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	401a      	ands	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685a      	ldr	r2, [r3, #4]
 800624e:	2101      	movs	r1, #1
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	43db      	mvns	r3, r3
 8006258:	401a      	ands	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	2103      	movs	r1, #3
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	43db      	mvns	r3, r3
 800626e:	401a      	ands	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	3301      	adds	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b0f      	cmp	r3, #15
 800627e:	f67f af40 	bls.w	8006102 <HAL_GPIO_DeInit+0x56>
    }
  }
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40020000 	.word	0x40020000
 8006290:	40020400 	.word	0x40020400
 8006294:	40020800 	.word	0x40020800
 8006298:	40020c00 	.word	0x40020c00
 800629c:	40021000 	.word	0x40021000
 80062a0:	40021c00 	.word	0x40021c00
 80062a4:	080133c0 	.word	0x080133c0
 80062a8:	40013800 	.word	0x40013800
 80062ac:	40013c00 	.word	0x40013c00

080062b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
 80062bc:	4613      	mov	r3, r2
 80062be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80062c0:	887b      	ldrh	r3, [r7, #2]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d004      	beq.n	80062d0 <HAL_GPIO_WritePin+0x20>
 80062c6:	887b      	ldrh	r3, [r7, #2]
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <HAL_GPIO_WritePin+0x2a>
 80062d0:	f240 119d 	movw	r1, #413	; 0x19d
 80062d4:	480e      	ldr	r0, [pc, #56]	; (8006310 <HAL_GPIO_WritePin+0x60>)
 80062d6:	f7fd f8e2 	bl	800349e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80062da:	787b      	ldrb	r3, [r7, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <HAL_GPIO_WritePin+0x40>
 80062e0:	787b      	ldrb	r3, [r7, #1]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d004      	beq.n	80062f0 <HAL_GPIO_WritePin+0x40>
 80062e6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80062ea:	4809      	ldr	r0, [pc, #36]	; (8006310 <HAL_GPIO_WritePin+0x60>)
 80062ec:	f7fd f8d7 	bl	800349e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80062f0:	787b      	ldrb	r3, [r7, #1]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062fc:	e003      	b.n	8006306 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	041a      	lsls	r2, r3, #16
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	619a      	str	r2, [r3, #24]
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	080133c0 	.word	0x080133c0

08006314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800631e:	4b08      	ldr	r3, [pc, #32]	; (8006340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006320:	695a      	ldr	r2, [r3, #20]
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	4013      	ands	r3, r2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800632a:	4a05      	ldr	r2, [pc, #20]	; (8006340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	4618      	mov	r0, r3
 8006334:	f7fc fc86 	bl	8002c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40013c00 	.word	0x40013c00

08006344 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006346:	b08f      	sub	sp, #60	; 0x3c
 8006348:	af0a      	add	r7, sp, #40	; 0x28
 800634a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e05d      	b.n	8006412 <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800635e:	d003      	beq.n	8006368 <HAL_HCD_Init+0x24>
 8006360:	2179      	movs	r1, #121	; 0x79
 8006362:	482e      	ldr	r0, [pc, #184]	; (800641c <HAL_HCD_Init+0xd8>)
 8006364:	f7fd f89b 	bl	800349e <assert_failed>

  USBx = hhcd->Instance;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f009 fe0a 	bl	800ff9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2203      	movs	r2, #3
 800638c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f006 ff60 	bl	800d26c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	603b      	str	r3, [r7, #0]
 80063b2:	687e      	ldr	r6, [r7, #4]
 80063b4:	466d      	mov	r5, sp
 80063b6:	f106 0410 	add.w	r4, r6, #16
 80063ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80063ca:	1d33      	adds	r3, r6, #4
 80063cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063ce:	6838      	ldr	r0, [r7, #0]
 80063d0:	f006 feda 	bl	800d188 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2101      	movs	r1, #1
 80063da:	4618      	mov	r0, r3
 80063dc:	f006 ff57 	bl	800d28e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	687e      	ldr	r6, [r7, #4]
 80063e8:	466d      	mov	r5, sp
 80063ea:	f106 0410 	add.w	r4, r6, #16
 80063ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80063fe:	1d33      	adds	r3, r6, #4
 8006400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006402:	6838      	ldr	r0, [r7, #0]
 8006404:	f007 f8be 	bl	800d584 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800641a:	bf00      	nop
 800641c:	080133fc 	.word	0x080133fc

08006420 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b089      	sub	sp, #36	; 0x24
 8006424:	af04      	add	r7, sp, #16
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	4603      	mov	r3, r0
 8006430:	70fb      	strb	r3, [r7, #3]
 8006432:	460b      	mov	r3, r1
 8006434:	70bb      	strb	r3, [r7, #2]
 8006436:	4613      	mov	r3, r2
 8006438:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006440:	2b01      	cmp	r3, #1
 8006442:	d101      	bne.n	8006448 <HAL_HCD_HC_Init+0x28>
 8006444:	2302      	movs	r3, #2
 8006446:	e076      	b.n	8006536 <HAL_HCD_HC_Init+0x116>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	212c      	movs	r1, #44	; 0x2c
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4413      	add	r3, r2
 800645c:	333d      	adds	r3, #61	; 0x3d
 800645e:	2200      	movs	r2, #0
 8006460:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	212c      	movs	r1, #44	; 0x2c
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	4413      	add	r3, r2
 800646e:	3338      	adds	r3, #56	; 0x38
 8006470:	787a      	ldrb	r2, [r7, #1]
 8006472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	212c      	movs	r1, #44	; 0x2c
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	4413      	add	r3, r2
 8006480:	3340      	adds	r3, #64	; 0x40
 8006482:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006484:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	212c      	movs	r1, #44	; 0x2c
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	4413      	add	r3, r2
 8006492:	3339      	adds	r3, #57	; 0x39
 8006494:	78fa      	ldrb	r2, [r7, #3]
 8006496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	212c      	movs	r1, #44	; 0x2c
 800649e:	fb01 f303 	mul.w	r3, r1, r3
 80064a2:	4413      	add	r3, r2
 80064a4:	333f      	adds	r3, #63	; 0x3f
 80064a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80064aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	78ba      	ldrb	r2, [r7, #2]
 80064b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064b4:	b2d0      	uxtb	r0, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	212c      	movs	r1, #44	; 0x2c
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	333a      	adds	r3, #58	; 0x3a
 80064c2:	4602      	mov	r2, r0
 80064c4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80064c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da09      	bge.n	80064e2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	212c      	movs	r1, #44	; 0x2c
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	4413      	add	r3, r2
 80064da:	333b      	adds	r3, #59	; 0x3b
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	e008      	b.n	80064f4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	212c      	movs	r1, #44	; 0x2c
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	4413      	add	r3, r2
 80064ee:	333b      	adds	r3, #59	; 0x3b
 80064f0:	2200      	movs	r2, #0
 80064f2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	212c      	movs	r1, #44	; 0x2c
 80064fa:	fb01 f303 	mul.w	r3, r1, r3
 80064fe:	4413      	add	r3, r2
 8006500:	333c      	adds	r3, #60	; 0x3c
 8006502:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006506:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	787c      	ldrb	r4, [r7, #1]
 800650e:	78ba      	ldrb	r2, [r7, #2]
 8006510:	78f9      	ldrb	r1, [r7, #3]
 8006512:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006514:	9302      	str	r3, [sp, #8]
 8006516:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	4623      	mov	r3, r4
 8006524:	f007 f9a8 	bl	800d878 <USB_HC_Init>
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	bd90      	pop	{r4, r7, pc}

0800653e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_HCD_HC_Halt+0x1e>
 8006558:	2302      	movs	r3, #2
 800655a:	e00f      	b.n	800657c <HAL_HCD_HC_Halt+0x3e>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	4611      	mov	r1, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f007 fbe4 	bl	800dd3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	461a      	mov	r2, r3
 8006592:	4603      	mov	r3, r0
 8006594:	70fb      	strb	r3, [r7, #3]
 8006596:	460b      	mov	r3, r1
 8006598:	70bb      	strb	r3, [r7, #2]
 800659a:	4613      	mov	r3, r2
 800659c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800659e:	78fb      	ldrb	r3, [r7, #3]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	212c      	movs	r1, #44	; 0x2c
 80065a4:	fb01 f303 	mul.w	r3, r1, r3
 80065a8:	4413      	add	r3, r2
 80065aa:	333b      	adds	r3, #59	; 0x3b
 80065ac:	78ba      	ldrb	r2, [r7, #2]
 80065ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	212c      	movs	r1, #44	; 0x2c
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	333f      	adds	r3, #63	; 0x3f
 80065be:	787a      	ldrb	r2, [r7, #1]
 80065c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80065c2:	7c3b      	ldrb	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d112      	bne.n	80065ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80065c8:	78fb      	ldrb	r3, [r7, #3]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	212c      	movs	r1, #44	; 0x2c
 80065ce:	fb01 f303 	mul.w	r3, r1, r3
 80065d2:	4413      	add	r3, r2
 80065d4:	3342      	adds	r3, #66	; 0x42
 80065d6:	2203      	movs	r2, #3
 80065d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	212c      	movs	r1, #44	; 0x2c
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	333d      	adds	r3, #61	; 0x3d
 80065e8:	7f3a      	ldrb	r2, [r7, #28]
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e008      	b.n	8006600 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065ee:	78fb      	ldrb	r3, [r7, #3]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	212c      	movs	r1, #44	; 0x2c
 80065f4:	fb01 f303 	mul.w	r3, r1, r3
 80065f8:	4413      	add	r3, r2
 80065fa:	3342      	adds	r3, #66	; 0x42
 80065fc:	2202      	movs	r2, #2
 80065fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006600:	787b      	ldrb	r3, [r7, #1]
 8006602:	2b03      	cmp	r3, #3
 8006604:	f200 80c6 	bhi.w	8006794 <HAL_HCD_HC_SubmitRequest+0x210>
 8006608:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660e:	bf00      	nop
 8006610:	08006621 	.word	0x08006621
 8006614:	08006781 	.word	0x08006781
 8006618:	08006685 	.word	0x08006685
 800661c:	08006703 	.word	0x08006703
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006620:	7c3b      	ldrb	r3, [r7, #16]
 8006622:	2b01      	cmp	r3, #1
 8006624:	f040 80b8 	bne.w	8006798 <HAL_HCD_HC_SubmitRequest+0x214>
 8006628:	78bb      	ldrb	r3, [r7, #2]
 800662a:	2b00      	cmp	r3, #0
 800662c:	f040 80b4 	bne.w	8006798 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006630:	8b3b      	ldrh	r3, [r7, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d108      	bne.n	8006648 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	212c      	movs	r1, #44	; 0x2c
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	3355      	adds	r3, #85	; 0x55
 8006644:	2201      	movs	r2, #1
 8006646:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	212c      	movs	r1, #44	; 0x2c
 800664e:	fb01 f303 	mul.w	r3, r1, r3
 8006652:	4413      	add	r3, r2
 8006654:	3355      	adds	r3, #85	; 0x55
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d109      	bne.n	8006670 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	212c      	movs	r1, #44	; 0x2c
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	4413      	add	r3, r2
 8006668:	3342      	adds	r3, #66	; 0x42
 800666a:	2200      	movs	r2, #0
 800666c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800666e:	e093      	b.n	8006798 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	212c      	movs	r1, #44	; 0x2c
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4413      	add	r3, r2
 800667c:	3342      	adds	r3, #66	; 0x42
 800667e:	2202      	movs	r2, #2
 8006680:	701a      	strb	r2, [r3, #0]
      break;
 8006682:	e089      	b.n	8006798 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006684:	78bb      	ldrb	r3, [r7, #2]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11d      	bne.n	80066c6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	212c      	movs	r1, #44	; 0x2c
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	4413      	add	r3, r2
 8006696:	3355      	adds	r3, #85	; 0x55
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	212c      	movs	r1, #44	; 0x2c
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	3342      	adds	r3, #66	; 0x42
 80066ac:	2200      	movs	r2, #0
 80066ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80066b0:	e073      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066b2:	78fb      	ldrb	r3, [r7, #3]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	212c      	movs	r1, #44	; 0x2c
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	4413      	add	r3, r2
 80066be:	3342      	adds	r3, #66	; 0x42
 80066c0:	2202      	movs	r2, #2
 80066c2:	701a      	strb	r2, [r3, #0]
      break;
 80066c4:	e069      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	212c      	movs	r1, #44	; 0x2c
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	4413      	add	r3, r2
 80066d2:	3354      	adds	r3, #84	; 0x54
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	212c      	movs	r1, #44	; 0x2c
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	3342      	adds	r3, #66	; 0x42
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
      break;
 80066ec:	e055      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	212c      	movs	r1, #44	; 0x2c
 80066f4:	fb01 f303 	mul.w	r3, r1, r3
 80066f8:	4413      	add	r3, r2
 80066fa:	3342      	adds	r3, #66	; 0x42
 80066fc:	2202      	movs	r2, #2
 80066fe:	701a      	strb	r2, [r3, #0]
      break;
 8006700:	e04b      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006702:	78bb      	ldrb	r3, [r7, #2]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d11d      	bne.n	8006744 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	212c      	movs	r1, #44	; 0x2c
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	3355      	adds	r3, #85	; 0x55
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	212c      	movs	r1, #44	; 0x2c
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	3342      	adds	r3, #66	; 0x42
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800672e:	e034      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	212c      	movs	r1, #44	; 0x2c
 8006736:	fb01 f303 	mul.w	r3, r1, r3
 800673a:	4413      	add	r3, r2
 800673c:	3342      	adds	r3, #66	; 0x42
 800673e:	2202      	movs	r2, #2
 8006740:	701a      	strb	r2, [r3, #0]
      break;
 8006742:	e02a      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	212c      	movs	r1, #44	; 0x2c
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	4413      	add	r3, r2
 8006750:	3354      	adds	r3, #84	; 0x54
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	212c      	movs	r1, #44	; 0x2c
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	4413      	add	r3, r2
 8006764:	3342      	adds	r3, #66	; 0x42
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
      break;
 800676a:	e016      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	212c      	movs	r1, #44	; 0x2c
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	3342      	adds	r3, #66	; 0x42
 800677a:	2202      	movs	r2, #2
 800677c:	701a      	strb	r2, [r3, #0]
      break;
 800677e:	e00c      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	212c      	movs	r1, #44	; 0x2c
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	3342      	adds	r3, #66	; 0x42
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
      break;
 8006792:	e002      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006794:	bf00      	nop
 8006796:	e000      	b.n	800679a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006798:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	212c      	movs	r1, #44	; 0x2c
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	4413      	add	r3, r2
 80067a6:	3344      	adds	r3, #68	; 0x44
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	8b3a      	ldrh	r2, [r7, #24]
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	202c      	movs	r0, #44	; 0x2c
 80067b4:	fb00 f303 	mul.w	r3, r0, r3
 80067b8:	440b      	add	r3, r1
 80067ba:	334c      	adds	r3, #76	; 0x4c
 80067bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80067be:	78fb      	ldrb	r3, [r7, #3]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	212c      	movs	r1, #44	; 0x2c
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	3360      	adds	r3, #96	; 0x60
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	212c      	movs	r1, #44	; 0x2c
 80067d6:	fb01 f303 	mul.w	r3, r1, r3
 80067da:	4413      	add	r3, r2
 80067dc:	3350      	adds	r3, #80	; 0x50
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	212c      	movs	r1, #44	; 0x2c
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	4413      	add	r3, r2
 80067ee:	3339      	adds	r3, #57	; 0x39
 80067f0:	78fa      	ldrb	r2, [r7, #3]
 80067f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	212c      	movs	r1, #44	; 0x2c
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	4413      	add	r3, r2
 8006800:	3361      	adds	r3, #97	; 0x61
 8006802:	2200      	movs	r2, #0
 8006804:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	222c      	movs	r2, #44	; 0x2c
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	3338      	adds	r3, #56	; 0x38
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	18d1      	adds	r1, r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	f007 f938 	bl	800da94 <USB_HC_StartXfer>
 8006824:	4603      	mov	r3, r0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f006 fe5b 	bl	800d502 <USB_GetMode>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	f040 80f6 	bne.w	8006a40 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f006 fe3f 	bl	800d4dc <USB_ReadInterrupts>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 80ec 	beq.w	8006a3e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f006 fe36 	bl	800d4dc <USB_ReadInterrupts>
 8006870:	4603      	mov	r3, r0
 8006872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800687a:	d104      	bne.n	8006886 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006884:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f006 fe26 	bl	800d4dc <USB_ReadInterrupts>
 8006890:	4603      	mov	r3, r0
 8006892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	d104      	bne.n	80068a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80068a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f006 fe16 	bl	800d4dc <USB_ReadInterrupts>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ba:	d104      	bne.n	80068c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80068c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f006 fe06 	bl	800d4dc <USB_ReadInterrupts>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d103      	bne.n	80068e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2202      	movs	r2, #2
 80068e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f006 fdf8 	bl	800d4dc <USB_ReadInterrupts>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f6:	d11c      	bne.n	8006932 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006900:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10f      	bne.n	8006932 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006912:	2110      	movs	r1, #16
 8006914:	6938      	ldr	r0, [r7, #16]
 8006916:	f006 fd07 	bl	800d328 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800691a:	6938      	ldr	r0, [r7, #16]
 800691c:	f006 fd28 	bl	800d370 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2101      	movs	r1, #1
 8006926:	4618      	mov	r0, r3
 8006928:	f006 fee0 	bl	800d6ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f009 fbb3 	bl	8010098 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f006 fdd0 	bl	800d4dc <USB_ReadInterrupts>
 800693c:	4603      	mov	r3, r0
 800693e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006942:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006946:	d102      	bne.n	800694e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fa03 	bl	8007d54 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f006 fdc2 	bl	800d4dc <USB_ReadInterrupts>
 8006958:	4603      	mov	r3, r0
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b08      	cmp	r3, #8
 8006960:	d106      	bne.n	8006970 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f009 fb7c 	bl	8010060 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2208      	movs	r2, #8
 800696e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f006 fdb1 	bl	800d4dc <USB_ReadInterrupts>
 800697a:	4603      	mov	r3, r0
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b10      	cmp	r3, #16
 8006982:	d101      	bne.n	8006988 <HAL_HCD_IRQHandler+0x158>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <HAL_HCD_IRQHandler+0x15a>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d012      	beq.n	80069b4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699a      	ldr	r2, [r3, #24]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0210 	bic.w	r2, r2, #16
 800699c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 f906 	bl	8007bb0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0210 	orr.w	r2, r2, #16
 80069b2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f006 fd8f 	bl	800d4dc <USB_ReadInterrupts>
 80069be:	4603      	mov	r3, r0
 80069c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069c8:	d13a      	bne.n	8006a40 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f007 f9a2 	bl	800dd18 <USB_HC_ReadInterrupt>
 80069d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
 80069da:	e025      	b.n	8006a28 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	fa22 f303 	lsr.w	r3, r2, r3
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d018      	beq.n	8006a22 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a06:	d106      	bne.n	8006a16 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f8ab 	bl	8006b6a <HCD_HC_IN_IRQHandler>
 8006a14:	e005      	b.n	8006a22 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fcc6 	bl	80073ae <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	3301      	adds	r3, #1
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3d4      	bcc.n	80069dc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a3a:	615a      	str	r2, [r3, #20]
 8006a3c:	e000      	b.n	8006a40 <HAL_HCD_IRQHandler+0x210>
      return;
 8006a3e:	bf00      	nop
    }
  }
}
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_HCD_Start+0x16>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e013      	b.n	8006a84 <HAL_HCD_Start+0x3e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f006 fea2 	bl	800d7b4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f006 fbe8 	bl	800d24a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_HCD_Stop+0x16>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e00d      	b.n	8006abe <HAL_HCD_Stop+0x32>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f007 fa9c 	bl	800dfec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f006 fe44 	bl	800d760 <USB_ResetPort>
 8006ad8:	4603      	mov	r3, r0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	212c      	movs	r1, #44	; 0x2c
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	4413      	add	r3, r2
 8006afa:	3360      	adds	r3, #96	; 0x60
 8006afc:	781b      	ldrb	r3, [r3, #0]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006b16:	78fb      	ldrb	r3, [r7, #3]
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	212c      	movs	r1, #44	; 0x2c
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	3350      	adds	r3, #80	; 0x50
 8006b24:	681b      	ldr	r3, [r3, #0]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f006 fe88 	bl	800d854 <USB_GetCurrentFrame>
 8006b44:	4603      	mov	r3, r0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f006 fe63 	bl	800d826 <USB_GetHostSpeed>
 8006b60:	4603      	mov	r3, r0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d119      	bne.n	8006bce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2304      	movs	r3, #4
 8006baa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc6:	f043 0302 	orr.w	r3, r3, #2
 8006bca:	60d3      	str	r3, [r2, #12]
 8006bcc:	e101      	b.n	8006dd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be4:	d12b      	bne.n	8006c3e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	212c      	movs	r1, #44	; 0x2c
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	3361      	adds	r3, #97	; 0x61
 8006c08:	2207      	movs	r2, #7
 8006c0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c26:	f043 0302 	orr.w	r3, r3, #2
 8006c2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	4611      	mov	r1, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f007 f87f 	bl	800dd3a <USB_HC_Halt>
 8006c3c:	e0c9      	b.n	8006dd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 0320 	and.w	r3, r3, #32
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d109      	bne.n	8006c68 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c60:	461a      	mov	r2, r3
 8006c62:	2320      	movs	r3, #32
 8006c64:	6093      	str	r3, [r2, #8]
 8006c66:	e0b4      	b.n	8006dd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d133      	bne.n	8006ce6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	212c      	movs	r1, #44	; 0x2c
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	4413      	add	r3, r2
 8006caa:	3361      	adds	r3, #97	; 0x61
 8006cac:	2205      	movs	r2, #5
 8006cae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2310      	movs	r3, #16
 8006cc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cce:	461a      	mov	r2, r3
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f007 f82b 	bl	800dd3a <USB_HC_Halt>
 8006ce4:	e075      	b.n	8006dd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfc:	d134      	bne.n	8006d68 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d18:	f043 0302 	orr.w	r3, r3, #2
 8006d1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	212c      	movs	r1, #44	; 0x2c
 8006d24:	fb01 f303 	mul.w	r3, r1, r3
 8006d28:	4413      	add	r3, r2
 8006d2a:	3361      	adds	r3, #97	; 0x61
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	2310      	movs	r3, #16
 8006d40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	4611      	mov	r1, r2
 8006d60:	4618      	mov	r0, r3
 8006d62:	f006 ffea 	bl	800dd3a <USB_HC_Halt>
 8006d66:	e034      	b.n	8006dd2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7a:	2b80      	cmp	r3, #128	; 0x80
 8006d7c:	d129      	bne.n	8006dd2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	212c      	movs	r1, #44	; 0x2c
 8006da4:	fb01 f303 	mul.w	r3, r1, r3
 8006da8:	4413      	add	r3, r2
 8006daa:	3361      	adds	r3, #97	; 0x61
 8006dac:	2206      	movs	r2, #6
 8006dae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f006 ffbd 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de8:	d122      	bne.n	8006e30 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e04:	f043 0302 	orr.w	r3, r3, #2
 8006e08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	4611      	mov	r1, r2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f006 ff90 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e26:	461a      	mov	r2, r3
 8006e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006e2e:	e2ba      	b.n	80073a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	f040 811b 	bne.w	800707e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	212c      	movs	r1, #44	; 0x2c
 8006e56:	fb01 f303 	mul.w	r3, r1, r3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	3348      	adds	r3, #72	; 0x48
 8006e5e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	0159      	lsls	r1, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	440b      	add	r3, r1
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006e72:	1ad2      	subs	r2, r2, r3
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	202c      	movs	r0, #44	; 0x2c
 8006e7a:	fb00 f303 	mul.w	r3, r0, r3
 8006e7e:	440b      	add	r3, r1
 8006e80:	3350      	adds	r3, #80	; 0x50
 8006e82:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	212c      	movs	r1, #44	; 0x2c
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	4413      	add	r3, r2
 8006e90:	3361      	adds	r3, #97	; 0x61
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	212c      	movs	r1, #44	; 0x2c
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	335c      	adds	r3, #92	; 0x5c
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	212c      	movs	r1, #44	; 0x2c
 8006ec0:	fb01 f303 	mul.w	r3, r1, r3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	333f      	adds	r3, #63	; 0x3f
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	212c      	movs	r1, #44	; 0x2c
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	4413      	add	r3, r2
 8006eda:	333f      	adds	r3, #63	; 0x3f
 8006edc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d121      	bne.n	8006f26 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efc:	f043 0302 	orr.w	r3, r3, #2
 8006f00:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f006 ff14 	bl	800dd3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2310      	movs	r3, #16
 8006f22:	6093      	str	r3, [r2, #8]
 8006f24:	e066      	b.n	8006ff4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	212c      	movs	r1, #44	; 0x2c
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	4413      	add	r3, r2
 8006f32:	333f      	adds	r3, #63	; 0x3f
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d127      	bne.n	8006f8a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f58:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	212c      	movs	r1, #44	; 0x2c
 8006f60:	fb01 f303 	mul.w	r3, r1, r3
 8006f64:	4413      	add	r3, r2
 8006f66:	3360      	adds	r3, #96	; 0x60
 8006f68:	2201      	movs	r2, #1
 8006f6a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	b2d9      	uxtb	r1, r3
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	202c      	movs	r0, #44	; 0x2c
 8006f76:	fb00 f303 	mul.w	r3, r0, r3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	3360      	adds	r3, #96	; 0x60
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f009 f896 	bl	80100b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006f88:	e034      	b.n	8006ff4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	212c      	movs	r1, #44	; 0x2c
 8006f90:	fb01 f303 	mul.w	r3, r1, r3
 8006f94:	4413      	add	r3, r2
 8006f96:	333f      	adds	r3, #63	; 0x3f
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d12a      	bne.n	8006ff4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	212c      	movs	r1, #44	; 0x2c
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	4413      	add	r3, r2
 8006faa:	3360      	adds	r3, #96	; 0x60
 8006fac:	2201      	movs	r2, #1
 8006fae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	212c      	movs	r1, #44	; 0x2c
 8006fb6:	fb01 f303 	mul.w	r3, r1, r3
 8006fba:	4413      	add	r3, r2
 8006fbc:	3354      	adds	r3, #84	; 0x54
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	f083 0301 	eor.w	r3, r3, #1
 8006fc4:	b2d8      	uxtb	r0, r3
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	212c      	movs	r1, #44	; 0x2c
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	3354      	adds	r3, #84	; 0x54
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	b2d9      	uxtb	r1, r3
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	202c      	movs	r0, #44	; 0x2c
 8006fe2:	fb00 f303 	mul.w	r3, r0, r3
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3360      	adds	r3, #96	; 0x60
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f009 f860 	bl	80100b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d12b      	bne.n	8007054 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	212c      	movs	r1, #44	; 0x2c
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	3348      	adds	r3, #72	; 0x48
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	202c      	movs	r0, #44	; 0x2c
 8007012:	fb00 f202 	mul.w	r2, r0, r2
 8007016:	440a      	add	r2, r1
 8007018:	3240      	adds	r2, #64	; 0x40
 800701a:	8812      	ldrh	r2, [r2, #0]
 800701c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 81be 	beq.w	80073a6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	212c      	movs	r1, #44	; 0x2c
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	4413      	add	r3, r2
 8007036:	3354      	adds	r3, #84	; 0x54
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f083 0301 	eor.w	r3, r3, #1
 800703e:	b2d8      	uxtb	r0, r3
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	212c      	movs	r1, #44	; 0x2c
 8007046:	fb01 f303 	mul.w	r3, r1, r3
 800704a:	4413      	add	r3, r2
 800704c:	3354      	adds	r3, #84	; 0x54
 800704e:	4602      	mov	r2, r0
 8007050:	701a      	strb	r2, [r3, #0]
}
 8007052:	e1a8      	b.n	80073a6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	212c      	movs	r1, #44	; 0x2c
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	3354      	adds	r3, #84	; 0x54
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f083 0301 	eor.w	r3, r3, #1
 8007068:	b2d8      	uxtb	r0, r3
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	212c      	movs	r1, #44	; 0x2c
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	4413      	add	r3, r2
 8007076:	3354      	adds	r3, #84	; 0x54
 8007078:	4602      	mov	r2, r0
 800707a:	701a      	strb	r2, [r3, #0]
}
 800707c:	e193      	b.n	80073a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	f040 8106 	bne.w	80072a2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b0:	f023 0302 	bic.w	r3, r3, #2
 80070b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	212c      	movs	r1, #44	; 0x2c
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	3361      	adds	r3, #97	; 0x61
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d109      	bne.n	80070de <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	212c      	movs	r1, #44	; 0x2c
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	3360      	adds	r3, #96	; 0x60
 80070d8:	2201      	movs	r2, #1
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	e0c9      	b.n	8007272 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	212c      	movs	r1, #44	; 0x2c
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	3361      	adds	r3, #97	; 0x61
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	d109      	bne.n	8007106 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	212c      	movs	r1, #44	; 0x2c
 80070f8:	fb01 f303 	mul.w	r3, r1, r3
 80070fc:	4413      	add	r3, r2
 80070fe:	3360      	adds	r3, #96	; 0x60
 8007100:	2205      	movs	r2, #5
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e0b5      	b.n	8007272 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	212c      	movs	r1, #44	; 0x2c
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	4413      	add	r3, r2
 8007112:	3361      	adds	r3, #97	; 0x61
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b06      	cmp	r3, #6
 8007118:	d009      	beq.n	800712e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	212c      	movs	r1, #44	; 0x2c
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	4413      	add	r3, r2
 8007126:	3361      	adds	r3, #97	; 0x61
 8007128:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800712a:	2b08      	cmp	r3, #8
 800712c:	d150      	bne.n	80071d0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	212c      	movs	r1, #44	; 0x2c
 8007134:	fb01 f303 	mul.w	r3, r1, r3
 8007138:	4413      	add	r3, r2
 800713a:	335c      	adds	r3, #92	; 0x5c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	202c      	movs	r0, #44	; 0x2c
 8007146:	fb00 f303 	mul.w	r3, r0, r3
 800714a:	440b      	add	r3, r1
 800714c:	335c      	adds	r3, #92	; 0x5c
 800714e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	212c      	movs	r1, #44	; 0x2c
 8007156:	fb01 f303 	mul.w	r3, r1, r3
 800715a:	4413      	add	r3, r2
 800715c:	335c      	adds	r3, #92	; 0x5c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d912      	bls.n	800718a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	212c      	movs	r1, #44	; 0x2c
 800716a:	fb01 f303 	mul.w	r3, r1, r3
 800716e:	4413      	add	r3, r2
 8007170:	335c      	adds	r3, #92	; 0x5c
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	212c      	movs	r1, #44	; 0x2c
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	3360      	adds	r3, #96	; 0x60
 8007184:	2204      	movs	r2, #4
 8007186:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007188:	e073      	b.n	8007272 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	212c      	movs	r1, #44	; 0x2c
 8007190:	fb01 f303 	mul.w	r3, r1, r3
 8007194:	4413      	add	r3, r2
 8007196:	3360      	adds	r3, #96	; 0x60
 8007198:	2202      	movs	r2, #2
 800719a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071b2:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ba:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80071ce:	e050      	b.n	8007272 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	212c      	movs	r1, #44	; 0x2c
 80071d6:	fb01 f303 	mul.w	r3, r1, r3
 80071da:	4413      	add	r3, r2
 80071dc:	3361      	adds	r3, #97	; 0x61
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b03      	cmp	r3, #3
 80071e2:	d122      	bne.n	800722a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	212c      	movs	r1, #44	; 0x2c
 80071ea:	fb01 f303 	mul.w	r3, r1, r3
 80071ee:	4413      	add	r3, r2
 80071f0:	3360      	adds	r3, #96	; 0x60
 80071f2:	2202      	movs	r2, #2
 80071f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800720c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007214:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007222:	461a      	mov	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	e023      	b.n	8007272 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	212c      	movs	r1, #44	; 0x2c
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	4413      	add	r3, r2
 8007236:	3361      	adds	r3, #97	; 0x61
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b07      	cmp	r3, #7
 800723c:	d119      	bne.n	8007272 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	212c      	movs	r1, #44	; 0x2c
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	4413      	add	r3, r2
 800724a:	335c      	adds	r3, #92	; 0x5c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	202c      	movs	r0, #44	; 0x2c
 8007256:	fb00 f303 	mul.w	r3, r0, r3
 800725a:	440b      	add	r3, r1
 800725c:	335c      	adds	r3, #92	; 0x5c
 800725e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	212c      	movs	r1, #44	; 0x2c
 8007266:	fb01 f303 	mul.w	r3, r1, r3
 800726a:	4413      	add	r3, r2
 800726c:	3360      	adds	r3, #96	; 0x60
 800726e:	2204      	movs	r2, #4
 8007270:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	4413      	add	r3, r2
 800727a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727e:	461a      	mov	r2, r3
 8007280:	2302      	movs	r3, #2
 8007282:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	b2d9      	uxtb	r1, r3
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	202c      	movs	r0, #44	; 0x2c
 800728e:	fb00 f303 	mul.w	r3, r0, r3
 8007292:	4413      	add	r3, r2
 8007294:	3360      	adds	r3, #96	; 0x60
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f008 ff0a 	bl	80100b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80072a0:	e081      	b.n	80073a6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b10      	cmp	r3, #16
 80072b6:	d176      	bne.n	80073a6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	212c      	movs	r1, #44	; 0x2c
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	333f      	adds	r3, #63	; 0x3f
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d121      	bne.n	8007310 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	212c      	movs	r1, #44	; 0x2c
 80072d2:	fb01 f303 	mul.w	r3, r1, r3
 80072d6:	4413      	add	r3, r2
 80072d8:	335c      	adds	r3, #92	; 0x5c
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	0151      	lsls	r1, r2, #5
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	440a      	add	r2, r1
 80072f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	4611      	mov	r1, r2
 8007308:	4618      	mov	r0, r3
 800730a:	f006 fd16 	bl	800dd3a <USB_HC_Halt>
 800730e:	e041      	b.n	8007394 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	212c      	movs	r1, #44	; 0x2c
 8007316:	fb01 f303 	mul.w	r3, r1, r3
 800731a:	4413      	add	r3, r2
 800731c:	333f      	adds	r3, #63	; 0x3f
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	212c      	movs	r1, #44	; 0x2c
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	4413      	add	r3, r2
 8007330:	333f      	adds	r3, #63	; 0x3f
 8007332:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007334:	2b02      	cmp	r3, #2
 8007336:	d12d      	bne.n	8007394 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	212c      	movs	r1, #44	; 0x2c
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	4413      	add	r3, r2
 8007344:	335c      	adds	r3, #92	; 0x5c
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d120      	bne.n	8007394 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	212c      	movs	r1, #44	; 0x2c
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	3361      	adds	r3, #97	; 0x61
 8007360:	2203      	movs	r2, #3
 8007362:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	0151      	lsls	r1, r2, #5
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	440a      	add	r2, r1
 800737a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800737e:	f043 0302 	orr.w	r3, r3, #2
 8007382:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f006 fcd3 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a0:	461a      	mov	r2, r3
 80073a2:	2310      	movs	r3, #16
 80073a4:	6093      	str	r3, [r2, #8]
}
 80073a6:	bf00      	nop
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b088      	sub	sp, #32
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80073c4:	78fb      	ldrb	r3, [r7, #3]
 80073c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d119      	bne.n	8007412 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ea:	461a      	mov	r2, r3
 80073ec:	2304      	movs	r3, #4
 80073ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	440a      	add	r2, r1
 8007406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800740a:	f043 0302 	orr.w	r3, r3, #2
 800740e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007410:	e3ca      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b20      	cmp	r3, #32
 8007426:	d13e      	bne.n	80074a6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	4413      	add	r3, r2
 8007430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007434:	461a      	mov	r2, r3
 8007436:	2320      	movs	r3, #32
 8007438:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	212c      	movs	r1, #44	; 0x2c
 8007440:	fb01 f303 	mul.w	r3, r1, r3
 8007444:	4413      	add	r3, r2
 8007446:	333d      	adds	r3, #61	; 0x3d
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b01      	cmp	r3, #1
 800744c:	f040 83ac 	bne.w	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	212c      	movs	r1, #44	; 0x2c
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	4413      	add	r3, r2
 800745c:	333d      	adds	r3, #61	; 0x3d
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	212c      	movs	r1, #44	; 0x2c
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	4413      	add	r3, r2
 800746e:	3360      	adds	r3, #96	; 0x60
 8007470:	2202      	movs	r2, #2
 8007472:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4413      	add	r3, r2
 800747c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	440a      	add	r2, r1
 800748a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800748e:	f043 0302 	orr.w	r3, r3, #2
 8007492:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f006 fc4b 	bl	800dd3a <USB_HC_Halt>
}
 80074a4:	e380      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074bc:	d122      	bne.n	8007504 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d8:	f043 0302 	orr.w	r3, r3, #2
 80074dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f006 fc26 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	015a      	lsls	r2, r3, #5
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	4413      	add	r3, r2
 80074f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074fa:	461a      	mov	r2, r3
 80074fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007500:	6093      	str	r3, [r2, #8]
}
 8007502:	e351      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	4413      	add	r3, r2
 800750c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b01      	cmp	r3, #1
 8007518:	d150      	bne.n	80075bc <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	212c      	movs	r1, #44	; 0x2c
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	335c      	adds	r3, #92	; 0x5c
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	4413      	add	r3, r2
 8007534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b40      	cmp	r3, #64	; 0x40
 8007540:	d111      	bne.n	8007566 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	212c      	movs	r1, #44	; 0x2c
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	4413      	add	r3, r2
 800754e:	333d      	adds	r3, #61	; 0x3d
 8007550:	2201      	movs	r2, #1
 8007552:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	4413      	add	r3, r2
 800755c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007560:	461a      	mov	r2, r3
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	4413      	add	r3, r2
 800756e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	440a      	add	r2, r1
 800757c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007580:	f043 0302 	orr.w	r3, r3, #2
 8007584:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f006 fbd2 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	4413      	add	r3, r2
 800759e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a2:	461a      	mov	r2, r3
 80075a4:	2301      	movs	r3, #1
 80075a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	212c      	movs	r1, #44	; 0x2c
 80075ae:	fb01 f303 	mul.w	r3, r1, r3
 80075b2:	4413      	add	r3, r2
 80075b4:	3361      	adds	r3, #97	; 0x61
 80075b6:	2201      	movs	r2, #1
 80075b8:	701a      	strb	r2, [r3, #0]
}
 80075ba:	e2f5      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ce:	2b40      	cmp	r3, #64	; 0x40
 80075d0:	d13c      	bne.n	800764c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	212c      	movs	r1, #44	; 0x2c
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	4413      	add	r3, r2
 80075de:	3361      	adds	r3, #97	; 0x61
 80075e0:	2204      	movs	r2, #4
 80075e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	212c      	movs	r1, #44	; 0x2c
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	333d      	adds	r3, #61	; 0x3d
 80075f2:	2201      	movs	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	212c      	movs	r1, #44	; 0x2c
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	335c      	adds	r3, #92	; 0x5c
 8007604:	2200      	movs	r2, #0
 8007606:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	4413      	add	r3, r2
 8007610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	69ba      	ldr	r2, [r7, #24]
 800761c:	440a      	add	r2, r1
 800761e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007622:	f043 0302 	orr.w	r3, r3, #2
 8007626:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f006 fb81 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	4413      	add	r3, r2
 8007640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007644:	461a      	mov	r2, r3
 8007646:	2340      	movs	r3, #64	; 0x40
 8007648:	6093      	str	r3, [r2, #8]
}
 800764a:	e2ad      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	4413      	add	r3, r2
 8007654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b08      	cmp	r3, #8
 8007660:	d12a      	bne.n	80076b8 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	461a      	mov	r2, r3
 8007670:	2308      	movs	r3, #8
 8007672:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	4413      	add	r3, r2
 800767c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	0151      	lsls	r1, r2, #5
 8007686:	69ba      	ldr	r2, [r7, #24]
 8007688:	440a      	add	r2, r1
 800768a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800768e:	f043 0302 	orr.w	r3, r3, #2
 8007692:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	4611      	mov	r1, r2
 800769e:	4618      	mov	r0, r3
 80076a0:	f006 fb4b 	bl	800dd3a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	212c      	movs	r1, #44	; 0x2c
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	3361      	adds	r3, #97	; 0x61
 80076b2:	2205      	movs	r2, #5
 80076b4:	701a      	strb	r2, [r3, #0]
}
 80076b6:	e277      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 0310 	and.w	r3, r3, #16
 80076ca:	2b10      	cmp	r3, #16
 80076cc:	d150      	bne.n	8007770 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	212c      	movs	r1, #44	; 0x2c
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	4413      	add	r3, r2
 80076da:	335c      	adds	r3, #92	; 0x5c
 80076dc:	2200      	movs	r2, #0
 80076de:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	212c      	movs	r1, #44	; 0x2c
 80076e6:	fb01 f303 	mul.w	r3, r1, r3
 80076ea:	4413      	add	r3, r2
 80076ec:	3361      	adds	r3, #97	; 0x61
 80076ee:	2203      	movs	r2, #3
 80076f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	212c      	movs	r1, #44	; 0x2c
 80076f8:	fb01 f303 	mul.w	r3, r1, r3
 80076fc:	4413      	add	r3, r2
 80076fe:	333d      	adds	r3, #61	; 0x3d
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d112      	bne.n	800772c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	212c      	movs	r1, #44	; 0x2c
 800770c:	fb01 f303 	mul.w	r3, r1, r3
 8007710:	4413      	add	r3, r2
 8007712:	333c      	adds	r3, #60	; 0x3c
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d108      	bne.n	800772c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	212c      	movs	r1, #44	; 0x2c
 8007720:	fb01 f303 	mul.w	r3, r1, r3
 8007724:	4413      	add	r3, r2
 8007726:	333d      	adds	r3, #61	; 0x3d
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	4413      	add	r3, r2
 8007734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	440a      	add	r2, r1
 8007742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007746:	f043 0302 	orr.w	r3, r3, #2
 800774a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f006 faef 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	4413      	add	r3, r2
 8007764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007768:	461a      	mov	r2, r3
 800776a:	2310      	movs	r3, #16
 800776c:	6093      	str	r3, [r2, #8]
}
 800776e:	e21b      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b80      	cmp	r3, #128	; 0x80
 8007784:	d174      	bne.n	8007870 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d121      	bne.n	80077d2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	212c      	movs	r1, #44	; 0x2c
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	4413      	add	r3, r2
 800779a:	3361      	adds	r3, #97	; 0x61
 800779c:	2206      	movs	r2, #6
 800779e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077ba:	f043 0302 	orr.w	r3, r3, #2
 80077be:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	4611      	mov	r1, r2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f006 fab5 	bl	800dd3a <USB_HC_Halt>
 80077d0:	e044      	b.n	800785c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	212c      	movs	r1, #44	; 0x2c
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	335c      	adds	r3, #92	; 0x5c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	202c      	movs	r0, #44	; 0x2c
 80077ea:	fb00 f303 	mul.w	r3, r0, r3
 80077ee:	440b      	add	r3, r1
 80077f0:	335c      	adds	r3, #92	; 0x5c
 80077f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	212c      	movs	r1, #44	; 0x2c
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	4413      	add	r3, r2
 8007800:	335c      	adds	r3, #92	; 0x5c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d920      	bls.n	800784a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	212c      	movs	r1, #44	; 0x2c
 800780e:	fb01 f303 	mul.w	r3, r1, r3
 8007812:	4413      	add	r3, r2
 8007814:	335c      	adds	r3, #92	; 0x5c
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	212c      	movs	r1, #44	; 0x2c
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	4413      	add	r3, r2
 8007826:	3360      	adds	r3, #96	; 0x60
 8007828:	2204      	movs	r2, #4
 800782a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	b2d9      	uxtb	r1, r3
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	202c      	movs	r0, #44	; 0x2c
 8007836:	fb00 f303 	mul.w	r3, r0, r3
 800783a:	4413      	add	r3, r2
 800783c:	3360      	adds	r3, #96	; 0x60
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f008 fc36 	bl	80100b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007848:	e008      	b.n	800785c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	212c      	movs	r1, #44	; 0x2c
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	3360      	adds	r3, #96	; 0x60
 8007858:	2202      	movs	r2, #2
 800785a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	4413      	add	r3, r2
 8007864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007868:	461a      	mov	r2, r3
 800786a:	2380      	movs	r3, #128	; 0x80
 800786c:	6093      	str	r3, [r2, #8]
}
 800786e:	e19b      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	4413      	add	r3, r2
 8007878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007886:	d134      	bne.n	80078f2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	4413      	add	r3, r2
 8007890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	440a      	add	r2, r1
 800789e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078a2:	f043 0302 	orr.w	r3, r3, #2
 80078a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f006 fa41 	bl	800dd3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c4:	461a      	mov	r2, r3
 80078c6:	2310      	movs	r3, #16
 80078c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d6:	461a      	mov	r2, r3
 80078d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	212c      	movs	r1, #44	; 0x2c
 80078e4:	fb01 f303 	mul.w	r3, r1, r3
 80078e8:	4413      	add	r3, r2
 80078ea:	3361      	adds	r3, #97	; 0x61
 80078ec:	2208      	movs	r2, #8
 80078ee:	701a      	strb	r2, [r3, #0]
}
 80078f0:	e15a      	b.n	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b02      	cmp	r3, #2
 8007906:	f040 814f 	bne.w	8007ba8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	4413      	add	r3, r2
 8007912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	69ba      	ldr	r2, [r7, #24]
 800791e:	440a      	add	r2, r1
 8007920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007924:	f023 0302 	bic.w	r3, r3, #2
 8007928:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	212c      	movs	r1, #44	; 0x2c
 8007930:	fb01 f303 	mul.w	r3, r1, r3
 8007934:	4413      	add	r3, r2
 8007936:	3361      	adds	r3, #97	; 0x61
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d17d      	bne.n	8007a3a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	212c      	movs	r1, #44	; 0x2c
 8007944:	fb01 f303 	mul.w	r3, r1, r3
 8007948:	4413      	add	r3, r2
 800794a:	3360      	adds	r3, #96	; 0x60
 800794c:	2201      	movs	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	212c      	movs	r1, #44	; 0x2c
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	4413      	add	r3, r2
 800795c:	333f      	adds	r3, #63	; 0x3f
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d00a      	beq.n	800797a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	212c      	movs	r1, #44	; 0x2c
 800796a:	fb01 f303 	mul.w	r3, r1, r3
 800796e:	4413      	add	r3, r2
 8007970:	333f      	adds	r3, #63	; 0x3f
 8007972:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007974:	2b03      	cmp	r3, #3
 8007976:	f040 8100 	bne.w	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d113      	bne.n	80079aa <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	212c      	movs	r1, #44	; 0x2c
 8007988:	fb01 f303 	mul.w	r3, r1, r3
 800798c:	4413      	add	r3, r2
 800798e:	3355      	adds	r3, #85	; 0x55
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f083 0301 	eor.w	r3, r3, #1
 8007996:	b2d8      	uxtb	r0, r3
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	212c      	movs	r1, #44	; 0x2c
 800799e:	fb01 f303 	mul.w	r3, r1, r3
 80079a2:	4413      	add	r3, r2
 80079a4:	3355      	adds	r3, #85	; 0x55
 80079a6:	4602      	mov	r2, r0
 80079a8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	f040 80e3 	bne.w	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	212c      	movs	r1, #44	; 0x2c
 80079ba:	fb01 f303 	mul.w	r3, r1, r3
 80079be:	4413      	add	r3, r2
 80079c0:	334c      	adds	r3, #76	; 0x4c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80d8 	beq.w	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	212c      	movs	r1, #44	; 0x2c
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	4413      	add	r3, r2
 80079d6:	334c      	adds	r3, #76	; 0x4c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	202c      	movs	r0, #44	; 0x2c
 80079e0:	fb00 f202 	mul.w	r2, r0, r2
 80079e4:	440a      	add	r2, r1
 80079e6:	3240      	adds	r2, #64	; 0x40
 80079e8:	8812      	ldrh	r2, [r2, #0]
 80079ea:	4413      	add	r3, r2
 80079ec:	3b01      	subs	r3, #1
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	202c      	movs	r0, #44	; 0x2c
 80079f4:	fb00 f202 	mul.w	r2, r0, r2
 80079f8:	440a      	add	r2, r1
 80079fa:	3240      	adds	r2, #64	; 0x40
 80079fc:	8812      	ldrh	r2, [r2, #0]
 80079fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 80b5 	beq.w	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	212c      	movs	r1, #44	; 0x2c
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3355      	adds	r3, #85	; 0x55
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	f083 0301 	eor.w	r3, r3, #1
 8007a24:	b2d8      	uxtb	r0, r3
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	212c      	movs	r1, #44	; 0x2c
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	3355      	adds	r3, #85	; 0x55
 8007a34:	4602      	mov	r2, r0
 8007a36:	701a      	strb	r2, [r3, #0]
 8007a38:	e09f      	b.n	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	212c      	movs	r1, #44	; 0x2c
 8007a40:	fb01 f303 	mul.w	r3, r1, r3
 8007a44:	4413      	add	r3, r2
 8007a46:	3361      	adds	r3, #97	; 0x61
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d109      	bne.n	8007a62 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	212c      	movs	r1, #44	; 0x2c
 8007a54:	fb01 f303 	mul.w	r3, r1, r3
 8007a58:	4413      	add	r3, r2
 8007a5a:	3360      	adds	r3, #96	; 0x60
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	e08b      	b.n	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	212c      	movs	r1, #44	; 0x2c
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3361      	adds	r3, #97	; 0x61
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d109      	bne.n	8007a8a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	212c      	movs	r1, #44	; 0x2c
 8007a7c:	fb01 f303 	mul.w	r3, r1, r3
 8007a80:	4413      	add	r3, r2
 8007a82:	3360      	adds	r3, #96	; 0x60
 8007a84:	2202      	movs	r2, #2
 8007a86:	701a      	strb	r2, [r3, #0]
 8007a88:	e077      	b.n	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	212c      	movs	r1, #44	; 0x2c
 8007a90:	fb01 f303 	mul.w	r3, r1, r3
 8007a94:	4413      	add	r3, r2
 8007a96:	3361      	adds	r3, #97	; 0x61
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b05      	cmp	r3, #5
 8007a9c:	d109      	bne.n	8007ab2 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	212c      	movs	r1, #44	; 0x2c
 8007aa4:	fb01 f303 	mul.w	r3, r1, r3
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3360      	adds	r3, #96	; 0x60
 8007aac:	2205      	movs	r2, #5
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	e063      	b.n	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	212c      	movs	r1, #44	; 0x2c
 8007ab8:	fb01 f303 	mul.w	r3, r1, r3
 8007abc:	4413      	add	r3, r2
 8007abe:	3361      	adds	r3, #97	; 0x61
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b06      	cmp	r3, #6
 8007ac4:	d009      	beq.n	8007ada <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	212c      	movs	r1, #44	; 0x2c
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3361      	adds	r3, #97	; 0x61
 8007ad4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d14f      	bne.n	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	212c      	movs	r1, #44	; 0x2c
 8007ae0:	fb01 f303 	mul.w	r3, r1, r3
 8007ae4:	4413      	add	r3, r2
 8007ae6:	335c      	adds	r3, #92	; 0x5c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	202c      	movs	r0, #44	; 0x2c
 8007af2:	fb00 f303 	mul.w	r3, r0, r3
 8007af6:	440b      	add	r3, r1
 8007af8:	335c      	adds	r3, #92	; 0x5c
 8007afa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	212c      	movs	r1, #44	; 0x2c
 8007b02:	fb01 f303 	mul.w	r3, r1, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	335c      	adds	r3, #92	; 0x5c
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d912      	bls.n	8007b36 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	212c      	movs	r1, #44	; 0x2c
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	4413      	add	r3, r2
 8007b1c:	335c      	adds	r3, #92	; 0x5c
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	212c      	movs	r1, #44	; 0x2c
 8007b28:	fb01 f303 	mul.w	r3, r1, r3
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3360      	adds	r3, #96	; 0x60
 8007b30:	2204      	movs	r2, #4
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e021      	b.n	8007b7a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	212c      	movs	r1, #44	; 0x2c
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	4413      	add	r3, r2
 8007b42:	3360      	adds	r3, #96	; 0x60
 8007b44:	2202      	movs	r2, #2
 8007b46:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b5e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b66:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b74:	461a      	mov	r2, r3
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b86:	461a      	mov	r2, r3
 8007b88:	2302      	movs	r3, #2
 8007b8a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	b2d9      	uxtb	r1, r3
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	202c      	movs	r0, #44	; 0x2c
 8007b96:	fb00 f303 	mul.w	r3, r0, r3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	3360      	adds	r3, #96	; 0x60
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f008 fa86 	bl	80100b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007ba8:	bf00      	nop
 8007baa:	3720      	adds	r7, #32
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b08a      	sub	sp, #40	; 0x28
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	0c5b      	lsrs	r3, r3, #17
 8007bd6:	f003 030f 	and.w	r3, r3, #15
 8007bda:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	091b      	lsrs	r3, r3, #4
 8007be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007be4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d004      	beq.n	8007bf6 <HCD_RXQLVL_IRQHandler+0x46>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	f000 80a9 	beq.w	8007d46 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007bf4:	e0aa      	b.n	8007d4c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 80a6 	beq.w	8007d4a <HCD_RXQLVL_IRQHandler+0x19a>
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	212c      	movs	r1, #44	; 0x2c
 8007c04:	fb01 f303 	mul.w	r3, r1, r3
 8007c08:	4413      	add	r3, r2
 8007c0a:	3344      	adds	r3, #68	; 0x44
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 809b 	beq.w	8007d4a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	212c      	movs	r1, #44	; 0x2c
 8007c1a:	fb01 f303 	mul.w	r3, r1, r3
 8007c1e:	4413      	add	r3, r2
 8007c20:	3350      	adds	r3, #80	; 0x50
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	441a      	add	r2, r3
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	202c      	movs	r0, #44	; 0x2c
 8007c2e:	fb00 f303 	mul.w	r3, r0, r3
 8007c32:	440b      	add	r3, r1
 8007c34:	334c      	adds	r3, #76	; 0x4c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d87a      	bhi.n	8007d32 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6818      	ldr	r0, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	212c      	movs	r1, #44	; 0x2c
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	3344      	adds	r3, #68	; 0x44
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	b292      	uxth	r2, r2
 8007c54:	4619      	mov	r1, r3
 8007c56:	f005 fbe9 	bl	800d42c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	212c      	movs	r1, #44	; 0x2c
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	4413      	add	r3, r2
 8007c66:	3344      	adds	r3, #68	; 0x44
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	441a      	add	r2, r3
 8007c6e:	6879      	ldr	r1, [r7, #4]
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	202c      	movs	r0, #44	; 0x2c
 8007c74:	fb00 f303 	mul.w	r3, r0, r3
 8007c78:	440b      	add	r3, r1
 8007c7a:	3344      	adds	r3, #68	; 0x44
 8007c7c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	212c      	movs	r1, #44	; 0x2c
 8007c84:	fb01 f303 	mul.w	r3, r1, r3
 8007c88:	4413      	add	r3, r2
 8007c8a:	3350      	adds	r3, #80	; 0x50
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	441a      	add	r2, r3
 8007c92:	6879      	ldr	r1, [r7, #4]
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	202c      	movs	r0, #44	; 0x2c
 8007c98:	fb00 f303 	mul.w	r3, r0, r3
 8007c9c:	440b      	add	r3, r1
 8007c9e:	3350      	adds	r3, #80	; 0x50
 8007ca0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	0cdb      	lsrs	r3, r3, #19
 8007cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	212c      	movs	r1, #44	; 0x2c
 8007cbe:	fb01 f303 	mul.w	r3, r1, r3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	3340      	adds	r3, #64	; 0x40
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d13c      	bne.n	8007d4a <HCD_RXQLVL_IRQHandler+0x19a>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d039      	beq.n	8007d4a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cec:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cf4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d02:	461a      	mov	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	212c      	movs	r1, #44	; 0x2c
 8007d0e:	fb01 f303 	mul.w	r3, r1, r3
 8007d12:	4413      	add	r3, r2
 8007d14:	3354      	adds	r3, #84	; 0x54
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f083 0301 	eor.w	r3, r3, #1
 8007d1c:	b2d8      	uxtb	r0, r3
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	212c      	movs	r1, #44	; 0x2c
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	4413      	add	r3, r2
 8007d2a:	3354      	adds	r3, #84	; 0x54
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	701a      	strb	r2, [r3, #0]
      break;
 8007d30:	e00b      	b.n	8007d4a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	212c      	movs	r1, #44	; 0x2c
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3360      	adds	r3, #96	; 0x60
 8007d40:	2204      	movs	r2, #4
 8007d42:	701a      	strb	r2, [r3, #0]
      break;
 8007d44:	e001      	b.n	8007d4a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007d46:	bf00      	nop
 8007d48:	e000      	b.n	8007d4c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007d4a:	bf00      	nop
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3728      	adds	r7, #40	; 0x28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007d80:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d10b      	bne.n	8007da4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d102      	bne.n	8007d9c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f008 f970 	bl	801007c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f043 0302 	orr.w	r3, r3, #2
 8007da2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b08      	cmp	r3, #8
 8007dac:	d132      	bne.n	8007e14 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	f043 0308 	orr.w	r3, r3, #8
 8007db4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d126      	bne.n	8007e0e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d113      	bne.n	8007df0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd2:	d106      	bne.n	8007de2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2102      	movs	r1, #2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f005 fc86 	bl	800d6ec <USB_InitFSLSPClkSel>
 8007de0:	e011      	b.n	8007e06 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2101      	movs	r1, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f005 fc7f 	bl	800d6ec <USB_InitFSLSPClkSel>
 8007dee:	e00a      	b.n	8007e06 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d106      	bne.n	8007e06 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007e04:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f008 f962 	bl	80100d0 <HAL_HCD_PortEnabled_Callback>
 8007e0c:	e002      	b.n	8007e14 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f008 f96c 	bl	80100ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	d103      	bne.n	8007e26 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f043 0320 	orr.w	r3, r3, #32
 8007e24:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6013      	str	r3, [r2, #0]
}
 8007e32:	bf00      	nop
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
	...

08007e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e1be      	b.n	80081cc <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a9f      	ldr	r2, [pc, #636]	; (80080d0 <HAL_I2C_Init+0x294>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00e      	beq.n	8007e76 <HAL_I2C_Init+0x3a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a9d      	ldr	r2, [pc, #628]	; (80080d4 <HAL_I2C_Init+0x298>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d009      	beq.n	8007e76 <HAL_I2C_Init+0x3a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a9c      	ldr	r2, [pc, #624]	; (80080d8 <HAL_I2C_Init+0x29c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d004      	beq.n	8007e76 <HAL_I2C_Init+0x3a>
 8007e6c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8007e70:	489a      	ldr	r0, [pc, #616]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007e72:	f7fb fb14 	bl	800349e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d004      	beq.n	8007e88 <HAL_I2C_Init+0x4c>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	4a97      	ldr	r2, [pc, #604]	; (80080e0 <HAL_I2C_Init+0x2a4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d904      	bls.n	8007e92 <HAL_I2C_Init+0x56>
 8007e88:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007e8c:	4893      	ldr	r0, [pc, #588]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007e8e:	f7fb fb06 	bl	800349e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <HAL_I2C_Init+0x72>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea2:	d004      	beq.n	8007eae <HAL_I2C_Init+0x72>
 8007ea4:	f240 11c1 	movw	r1, #449	; 0x1c1
 8007ea8:	488c      	ldr	r0, [pc, #560]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007eaa:	f7fb faf8 	bl	800349e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <HAL_I2C_Init+0x8c>
 8007ebe:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8007ec2:	4886      	ldr	r0, [pc, #536]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007ec4:	f7fb faeb 	bl	800349e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ed0:	d009      	beq.n	8007ee6 <HAL_I2C_Init+0xaa>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007eda:	d004      	beq.n	8007ee6 <HAL_I2C_Init+0xaa>
 8007edc:	f240 11c3 	movw	r1, #451	; 0x1c3
 8007ee0:	487e      	ldr	r0, [pc, #504]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007ee2:	f7fb fadc 	bl	800349e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d008      	beq.n	8007f00 <HAL_I2C_Init+0xc4>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d004      	beq.n	8007f00 <HAL_I2C_Init+0xc4>
 8007ef6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8007efa:	4878      	ldr	r0, [pc, #480]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007efc:	f7fb facf 	bl	800349e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <HAL_I2C_Init+0xda>
 8007f0c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8007f10:	4872      	ldr	r0, [pc, #456]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007f12:	f7fb fac4 	bl	800349e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d008      	beq.n	8007f30 <HAL_I2C_Init+0xf4>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d004      	beq.n	8007f30 <HAL_I2C_Init+0xf4>
 8007f26:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8007f2a:	486c      	ldr	r0, [pc, #432]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007f2c:	f7fb fab7 	bl	800349e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_I2C_Init+0x10e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a1b      	ldr	r3, [r3, #32]
 8007f3c:	2b80      	cmp	r3, #128	; 0x80
 8007f3e:	d004      	beq.n	8007f4a <HAL_I2C_Init+0x10e>
 8007f40:	f240 11c7 	movw	r1, #455	; 0x1c7
 8007f44:	4865      	ldr	r0, [pc, #404]	; (80080dc <HAL_I2C_Init+0x2a0>)
 8007f46:	f7fb faaa 	bl	800349e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fa fa04 	bl	800236c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2224      	movs	r2, #36	; 0x24
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0201 	bic.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007f9c:	f001 fdac 	bl	8009af8 <HAL_RCC_GetPCLK1Freq>
 8007fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	4a4f      	ldr	r2, [pc, #316]	; (80080e4 <HAL_I2C_Init+0x2a8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d807      	bhi.n	8007fbc <HAL_I2C_Init+0x180>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4a4e      	ldr	r2, [pc, #312]	; (80080e8 <HAL_I2C_Init+0x2ac>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	bf94      	ite	ls
 8007fb4:	2301      	movls	r3, #1
 8007fb6:	2300      	movhi	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e006      	b.n	8007fca <HAL_I2C_Init+0x18e>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a4b      	ldr	r2, [pc, #300]	; (80080ec <HAL_I2C_Init+0x2b0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	bf94      	ite	ls
 8007fc4:	2301      	movls	r3, #1
 8007fc6:	2300      	movhi	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e0fc      	b.n	80081cc <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a46      	ldr	r2, [pc, #280]	; (80080f0 <HAL_I2C_Init+0x2b4>)
 8007fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fda:	0c9b      	lsrs	r3, r3, #18
 8007fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4a38      	ldr	r2, [pc, #224]	; (80080e4 <HAL_I2C_Init+0x2a8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d802      	bhi.n	800800c <HAL_I2C_Init+0x1d0>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3301      	adds	r3, #1
 800800a:	e009      	b.n	8008020 <HAL_I2C_Init+0x1e4>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008012:	fb02 f303 	mul.w	r3, r2, r3
 8008016:	4a37      	ldr	r2, [pc, #220]	; (80080f4 <HAL_I2C_Init+0x2b8>)
 8008018:	fba2 2303 	umull	r2, r3, r2, r3
 800801c:	099b      	lsrs	r3, r3, #6
 800801e:	3301      	adds	r3, #1
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	430b      	orrs	r3, r1
 8008026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	492a      	ldr	r1, [pc, #168]	; (80080e4 <HAL_I2C_Init+0x2a8>)
 800803c:	428b      	cmp	r3, r1
 800803e:	d819      	bhi.n	8008074 <HAL_I2C_Init+0x238>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	1e59      	subs	r1, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	fbb1 f3f3 	udiv	r3, r1, r3
 800804e:	1c59      	adds	r1, r3, #1
 8008050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008054:	400b      	ands	r3, r1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <HAL_I2C_Init+0x234>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	1e59      	subs	r1, r3, #1
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	fbb1 f3f3 	udiv	r3, r1, r3
 8008068:	3301      	adds	r3, #1
 800806a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800806e:	e066      	b.n	800813e <HAL_I2C_Init+0x302>
 8008070:	2304      	movs	r3, #4
 8008072:	e064      	b.n	800813e <HAL_I2C_Init+0x302>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d111      	bne.n	80080a0 <HAL_I2C_Init+0x264>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	1e58      	subs	r0, r3, #1
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6859      	ldr	r1, [r3, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	005b      	lsls	r3, r3, #1
 8008088:	440b      	add	r3, r1
 800808a:	fbb0 f3f3 	udiv	r3, r0, r3
 800808e:	3301      	adds	r3, #1
 8008090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008094:	2b00      	cmp	r3, #0
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	e012      	b.n	80080c6 <HAL_I2C_Init+0x28a>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	1e58      	subs	r0, r3, #1
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6859      	ldr	r1, [r3, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	0099      	lsls	r1, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80080b6:	3301      	adds	r3, #1
 80080b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d016      	beq.n	80080f8 <HAL_I2C_Init+0x2bc>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e037      	b.n	800813e <HAL_I2C_Init+0x302>
 80080ce:	bf00      	nop
 80080d0:	40005400 	.word	0x40005400
 80080d4:	40005800 	.word	0x40005800
 80080d8:	40005c00 	.word	0x40005c00
 80080dc:	08013434 	.word	0x08013434
 80080e0:	00061a80 	.word	0x00061a80
 80080e4:	000186a0 	.word	0x000186a0
 80080e8:	001e847f 	.word	0x001e847f
 80080ec:	003d08ff 	.word	0x003d08ff
 80080f0:	431bde83 	.word	0x431bde83
 80080f4:	10624dd3 	.word	0x10624dd3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10e      	bne.n	800811e <HAL_I2C_Init+0x2e2>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	1e58      	subs	r0, r3, #1
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6859      	ldr	r1, [r3, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	440b      	add	r3, r1
 800810e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008112:	3301      	adds	r3, #1
 8008114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811c:	e00f      	b.n	800813e <HAL_I2C_Init+0x302>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1e58      	subs	r0, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6859      	ldr	r1, [r3, #4]
 8008126:	460b      	mov	r3, r1
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	0099      	lsls	r1, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	fbb0 f3f3 	udiv	r3, r0, r3
 8008134:	3301      	adds	r3, #1
 8008136:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800813a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800813e:	6879      	ldr	r1, [r7, #4]
 8008140:	6809      	ldr	r1, [r1, #0]
 8008142:	4313      	orrs	r3, r2
 8008144:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800816c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6911      	ldr	r1, [r2, #16]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	68d2      	ldr	r2, [r2, #12]
 8008178:	4311      	orrs	r1, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6812      	ldr	r2, [r2, #0]
 800817e:	430b      	orrs	r3, r1
 8008180:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	695a      	ldr	r2, [r3, #20]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0201 	orr.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e035      	b.n	8008252 <HAL_I2C_DeInit+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1c      	ldr	r2, [pc, #112]	; (800825c <HAL_I2C_DeInit+0x88>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_I2C_DeInit+0x3a>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1a      	ldr	r2, [pc, #104]	; (8008260 <HAL_I2C_DeInit+0x8c>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_I2C_DeInit+0x3a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a19      	ldr	r2, [pc, #100]	; (8008264 <HAL_I2C_DeInit+0x90>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_I2C_DeInit+0x3a>
 8008204:	f240 212f 	movw	r1, #559	; 0x22f
 8008208:	4817      	ldr	r0, [pc, #92]	; (8008268 <HAL_I2C_DeInit+0x94>)
 800820a:	f7fb f948 	bl	800349e <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2224      	movs	r2, #36	; 0x24
 8008212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0201 	bic.w	r2, r2, #1
 8008224:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7fa f8e8 	bl	80023fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	40005400 	.word	0x40005400
 8008260:	40005800 	.word	0x40005800
 8008264:	40005c00 	.word	0x40005c00
 8008268:	08013434 	.word	0x08013434

0800826c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b088      	sub	sp, #32
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	4608      	mov	r0, r1
 8008276:	4611      	mov	r1, r2
 8008278:	461a      	mov	r2, r3
 800827a:	4603      	mov	r3, r0
 800827c:	817b      	strh	r3, [r7, #10]
 800827e:	460b      	mov	r3, r1
 8008280:	813b      	strh	r3, [r7, #8]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008286:	f7fc fa19 	bl	80046bc <HAL_GetTick>
 800828a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d007      	beq.n	80082a2 <HAL_I2C_Mem_Write+0x36>
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	2b10      	cmp	r3, #16
 8008296:	d004      	beq.n	80082a2 <HAL_I2C_Mem_Write+0x36>
 8008298:	f640 11ba 	movw	r1, #2490	; 0x9ba
 800829c:	4873      	ldr	r0, [pc, #460]	; (800846c <HAL_I2C_Mem_Write+0x200>)
 800829e:	f7fb f8fe 	bl	800349e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	f040 80d9 	bne.w	8008462 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	2319      	movs	r3, #25
 80082b6:	2201      	movs	r2, #1
 80082b8:	496d      	ldr	r1, [pc, #436]	; (8008470 <HAL_I2C_Mem_Write+0x204>)
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fc9a 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
 80082c8:	e0cc      	b.n	8008464 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d101      	bne.n	80082d8 <HAL_I2C_Mem_Write+0x6c>
 80082d4:	2302      	movs	r3, #2
 80082d6:	e0c5      	b.n	8008464 <HAL_I2C_Mem_Write+0x1f8>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d007      	beq.n	80082fe <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f042 0201 	orr.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800830c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2221      	movs	r2, #33	; 0x21
 8008312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2240      	movs	r2, #64	; 0x40
 800831a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a3a      	ldr	r2, [r7, #32]
 8008328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800832e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4a4d      	ldr	r2, [pc, #308]	; (8008474 <HAL_I2C_Mem_Write+0x208>)
 800833e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008340:	88f8      	ldrh	r0, [r7, #6]
 8008342:	893a      	ldrh	r2, [r7, #8]
 8008344:	8979      	ldrh	r1, [r7, #10]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4603      	mov	r3, r0
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fad1 	bl	80088f8 <I2C_RequestMemoryWrite>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d052      	beq.n	8008402 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e081      	b.n	8008464 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fd1b 	bl	8008da0 <I2C_WaitOnTXEFlagUntilTimeout>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00d      	beq.n	800838c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	2b04      	cmp	r3, #4
 8008376:	d107      	bne.n	8008388 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008386:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e06b      	b.n	8008464 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	1c5a      	adds	r2, r3, #1
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d11b      	bne.n	8008402 <HAL_I2C_Mem_Write+0x196>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d017      	beq.n	8008402 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d6:	781a      	ldrb	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ec:	3b01      	subs	r3, #1
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	3b01      	subs	r3, #1
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1aa      	bne.n	8008360 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f000 fd07 	bl	8008e22 <I2C_WaitOnBTFFlagUntilTimeout>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00d      	beq.n	8008436 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	2b04      	cmp	r3, #4
 8008420:	d107      	bne.n	8008432 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008430:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e016      	b.n	8008464 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008444:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	e000      	b.n	8008464 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8008462:	2302      	movs	r3, #2
  }
}
 8008464:	4618      	mov	r0, r3
 8008466:	3718      	adds	r7, #24
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	08013434 	.word	0x08013434
 8008470:	00100002 	.word	0x00100002
 8008474:	ffff0000 	.word	0xffff0000

08008478 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b08c      	sub	sp, #48	; 0x30
 800847c:	af02      	add	r7, sp, #8
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	461a      	mov	r2, r3
 8008486:	4603      	mov	r3, r0
 8008488:	817b      	strh	r3, [r7, #10]
 800848a:	460b      	mov	r3, r1
 800848c:	813b      	strh	r3, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008492:	f7fc f913 	bl	80046bc <HAL_GetTick>
 8008496:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008498:	88fb      	ldrh	r3, [r7, #6]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d007      	beq.n	80084ae <HAL_I2C_Mem_Read+0x36>
 800849e:	88fb      	ldrh	r3, [r7, #6]
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d004      	beq.n	80084ae <HAL_I2C_Mem_Read+0x36>
 80084a4:	f640 2135 	movw	r1, #2613	; 0xa35
 80084a8:	4881      	ldr	r0, [pc, #516]	; (80086b0 <HAL_I2C_Mem_Read+0x238>)
 80084aa:	f7fa fff8 	bl	800349e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	f040 8209 	bne.w	80088ce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2319      	movs	r3, #25
 80084c2:	2201      	movs	r2, #1
 80084c4:	497b      	ldr	r1, [pc, #492]	; (80086b4 <HAL_I2C_Mem_Read+0x23c>)
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fb94 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80084d2:	2302      	movs	r3, #2
 80084d4:	e1fc      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_I2C_Mem_Read+0x6c>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e1f5      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d007      	beq.n	800850a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f042 0201 	orr.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008518:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2222      	movs	r2, #34	; 0x22
 800851e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2240      	movs	r2, #64	; 0x40
 8008526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800853a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4a5b      	ldr	r2, [pc, #364]	; (80086b8 <HAL_I2C_Mem_Read+0x240>)
 800854a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800854c:	88f8      	ldrh	r0, [r7, #6]
 800854e:	893a      	ldrh	r2, [r7, #8]
 8008550:	8979      	ldrh	r1, [r7, #10]
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	9301      	str	r3, [sp, #4]
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	4603      	mov	r3, r0
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 fa61 	bl	8008a24 <I2C_RequestMemoryRead>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d001      	beq.n	800856c <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e1b1      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008570:	2b00      	cmp	r3, #0
 8008572:	d113      	bne.n	800859c <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008574:	2300      	movs	r3, #0
 8008576:	623b      	str	r3, [r7, #32]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	623b      	str	r3, [r7, #32]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	623b      	str	r3, [r7, #32]
 8008588:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	e185      	b.n	80088a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d11b      	bne.n	80085dc <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085b2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085b4:	2300      	movs	r3, #0
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	61fb      	str	r3, [r7, #28]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	61fb      	str	r3, [r7, #28]
 80085c8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e165      	b.n	80088a8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d11b      	bne.n	800861c <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085f2:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008602:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008604:	2300      	movs	r3, #0
 8008606:	61bb      	str	r3, [r7, #24]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	61bb      	str	r3, [r7, #24]
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	e145      	b.n	80088a8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008632:	e139      	b.n	80088a8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008638:	2b03      	cmp	r3, #3
 800863a:	f200 80f2 	bhi.w	8008822 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008642:	2b01      	cmp	r3, #1
 8008644:	d123      	bne.n	800868e <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008648:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fc2a 	bl	8008ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e13a      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	691a      	ldr	r2, [r3, #16]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	b2d2      	uxtb	r2, r2
 8008666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008682:	b29b      	uxth	r3, r3
 8008684:	3b01      	subs	r3, #1
 8008686:	b29a      	uxth	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800868c:	e10c      	b.n	80088a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008692:	2b02      	cmp	r3, #2
 8008694:	d14f      	bne.n	8008736 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	2200      	movs	r2, #0
 800869e:	4907      	ldr	r1, [pc, #28]	; (80086bc <HAL_I2C_Mem_Read+0x244>)
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 faa7 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d009      	beq.n	80086c0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e10f      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
 80086b0:	08013434 	.word	0x08013434
 80086b4:	00100002 	.word	0x00100002
 80086b8:	ffff0000 	.word	0xffff0000
 80086bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691a      	ldr	r2, [r3, #16]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	3b01      	subs	r3, #1
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691a      	ldr	r2, [r3, #16]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	b2d2      	uxtb	r2, r2
 800870e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871e:	3b01      	subs	r3, #1
 8008720:	b29a      	uxth	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b01      	subs	r3, #1
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008734:	e0b8      	b.n	80088a8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	2200      	movs	r2, #0
 800873e:	4966      	ldr	r1, [pc, #408]	; (80088d8 <HAL_I2C_Mem_Read+0x460>)
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fa57 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e0bf      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800875e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691a      	ldr	r2, [r3, #16]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800877c:	3b01      	subs	r3, #1
 800877e:	b29a      	uxth	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	2200      	movs	r2, #0
 800879a:	494f      	ldr	r1, [pc, #316]	; (80088d8 <HAL_I2C_Mem_Read+0x460>)
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f000 fa29 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e091      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d8:	3b01      	subs	r3, #1
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	3b01      	subs	r3, #1
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	b2d2      	uxtb	r2, r2
 80087fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800880a:	3b01      	subs	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008816:	b29b      	uxth	r3, r3
 8008818:	3b01      	subs	r3, #1
 800881a:	b29a      	uxth	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008820:	e042      	b.n	80088a8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fb3c 	bl	8008ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e04c      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	b2d2      	uxtb	r2, r2
 8008842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008852:	3b01      	subs	r3, #1
 8008854:	b29a      	uxth	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885e:	b29b      	uxth	r3, r3
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d118      	bne.n	80088a8 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691a      	ldr	r2, [r3, #16]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008892:	3b01      	subs	r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b01      	subs	r3, #1
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f47f aec1 	bne.w	8008634 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2220      	movs	r2, #32
 80088b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	e000      	b.n	80088d0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80088ce:	2302      	movs	r3, #2
  }
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3728      	adds	r7, #40	; 0x28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	00010004 	.word	0x00010004

080088dc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ea:	b2db      	uxtb	r3, r3
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	461a      	mov	r2, r3
 8008906:	4603      	mov	r3, r0
 8008908:	817b      	strh	r3, [r7, #10]
 800890a:	460b      	mov	r3, r1
 800890c:	813b      	strh	r3, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	2200      	movs	r2, #0
 800892a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 f960 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00d      	beq.n	8008956 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008948:	d103      	bne.n	8008952 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e05f      	b.n	8008a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008956:	897b      	ldrh	r3, [r7, #10]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	6a3a      	ldr	r2, [r7, #32]
 800896a:	492d      	ldr	r1, [pc, #180]	; (8008a20 <I2C_RequestMemoryWrite+0x128>)
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f998 	bl	8008ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e04c      	b.n	8008a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008994:	6a39      	ldr	r1, [r7, #32]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fa02 	bl	8008da0 <I2C_WaitOnTXEFlagUntilTimeout>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00d      	beq.n	80089be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d107      	bne.n	80089ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e02b      	b.n	8008a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089be:	88fb      	ldrh	r3, [r7, #6]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d105      	bne.n	80089d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089c4:	893b      	ldrh	r3, [r7, #8]
 80089c6:	b2da      	uxtb	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	611a      	str	r2, [r3, #16]
 80089ce:	e021      	b.n	8008a14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80089d0:	893b      	ldrh	r3, [r7, #8]
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e0:	6a39      	ldr	r1, [r7, #32]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f9dc 	bl	8008da0 <I2C_WaitOnTXEFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d107      	bne.n	8008a06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e005      	b.n	8008a16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a0a:	893b      	ldrh	r3, [r7, #8]
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	00010002 	.word	0x00010002

08008a24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b088      	sub	sp, #32
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	4608      	mov	r0, r1
 8008a2e:	4611      	mov	r1, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	817b      	strh	r3, [r7, #10]
 8008a36:	460b      	mov	r3, r1
 8008a38:	813b      	strh	r3, [r7, #8]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 f8c2 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00d      	beq.n	8008a92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a84:	d103      	bne.n	8008a8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e0aa      	b.n	8008be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a92:	897b      	ldrh	r3, [r7, #10]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	461a      	mov	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008aa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	6a3a      	ldr	r2, [r7, #32]
 8008aa6:	4952      	ldr	r1, [pc, #328]	; (8008bf0 <I2C_RequestMemoryRead+0x1cc>)
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 f8fa 	bl	8008ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e097      	b.n	8008be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad0:	6a39      	ldr	r1, [r7, #32]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f964 	bl	8008da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00d      	beq.n	8008afa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d107      	bne.n	8008af6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008af4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e076      	b.n	8008be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d105      	bne.n	8008b0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b00:	893b      	ldrh	r3, [r7, #8]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	611a      	str	r2, [r3, #16]
 8008b0a:	e021      	b.n	8008b50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b0c:	893b      	ldrh	r3, [r7, #8]
 8008b0e:	0a1b      	lsrs	r3, r3, #8
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1c:	6a39      	ldr	r1, [r7, #32]
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f93e 	bl	8008da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00d      	beq.n	8008b46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d107      	bne.n	8008b42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e050      	b.n	8008be8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b46:	893b      	ldrh	r3, [r7, #8]
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b52:	6a39      	ldr	r1, [r7, #32]
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 f923 	bl	8008da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00d      	beq.n	8008b7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d107      	bne.n	8008b78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e035      	b.n	8008be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f82b 	bl	8008bf4 <I2C_WaitOnFlagUntilTimeout>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00d      	beq.n	8008bc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bb2:	d103      	bne.n	8008bbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e013      	b.n	8008be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008bc0:	897b      	ldrh	r3, [r7, #10]
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f043 0301 	orr.w	r3, r3, #1
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	6a3a      	ldr	r2, [r7, #32]
 8008bd4:	4906      	ldr	r1, [pc, #24]	; (8008bf0 <I2C_RequestMemoryRead+0x1cc>)
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 f863 	bl	8008ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e000      	b.n	8008be8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	00010002 	.word	0x00010002

08008bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c04:	e025      	b.n	8008c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c0c:	d021      	beq.n	8008c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c0e:	f7fb fd55 	bl	80046bc <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d302      	bcc.n	8008c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d116      	bne.n	8008c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f043 0220 	orr.w	r2, r3, #32
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e023      	b.n	8008c9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d10d      	bne.n	8008c78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	43da      	mvns	r2, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4013      	ands	r3, r2
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	bf0c      	ite	eq
 8008c6e:	2301      	moveq	r3, #1
 8008c70:	2300      	movne	r3, #0
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	461a      	mov	r2, r3
 8008c76:	e00c      	b.n	8008c92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	43da      	mvns	r2, r3
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	4013      	ands	r3, r2
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bf0c      	ite	eq
 8008c8a:	2301      	moveq	r3, #1
 8008c8c:	2300      	movne	r3, #0
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d0b6      	beq.n	8008c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cb0:	e051      	b.n	8008d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cc0:	d123      	bne.n	8008d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008cda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	f043 0204 	orr.w	r2, r3, #4
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e046      	b.n	8008d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d10:	d021      	beq.n	8008d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d12:	f7fb fcd3 	bl	80046bc <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d302      	bcc.n	8008d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d116      	bne.n	8008d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d42:	f043 0220 	orr.w	r2, r3, #32
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e020      	b.n	8008d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d10c      	bne.n	8008d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	43da      	mvns	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	bf14      	ite	ne
 8008d72:	2301      	movne	r3, #1
 8008d74:	2300      	moveq	r3, #0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	e00b      	b.n	8008d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	43da      	mvns	r2, r3
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	4013      	ands	r3, r2
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bf14      	ite	ne
 8008d8c:	2301      	movne	r3, #1
 8008d8e:	2300      	moveq	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d18d      	bne.n	8008cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008dac:	e02d      	b.n	8008e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 f8ce 	bl	8008f50 <I2C_IsAcknowledgeFailed>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e02d      	b.n	8008e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dc4:	d021      	beq.n	8008e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc6:	f7fb fc79 	bl	80046bc <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d116      	bne.n	8008e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	f043 0220 	orr.w	r2, r3, #32
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e007      	b.n	8008e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e14:	2b80      	cmp	r3, #128	; 0x80
 8008e16:	d1ca      	bne.n	8008dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	60f8      	str	r0, [r7, #12]
 8008e2a:	60b9      	str	r1, [r7, #8]
 8008e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e2e:	e02d      	b.n	8008e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f88d 	bl	8008f50 <I2C_IsAcknowledgeFailed>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e02d      	b.n	8008e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e46:	d021      	beq.n	8008e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e48:	f7fb fc38 	bl	80046bc <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d302      	bcc.n	8008e5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d116      	bne.n	8008e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	f043 0220 	orr.w	r2, r3, #32
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e007      	b.n	8008e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d1ca      	bne.n	8008e30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008eb0:	e042      	b.n	8008f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	f003 0310 	and.w	r3, r3, #16
 8008ebc:	2b10      	cmp	r3, #16
 8008ebe:	d119      	bne.n	8008ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0210 	mvn.w	r2, #16
 8008ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e029      	b.n	8008f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef4:	f7fb fbe2 	bl	80046bc <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d302      	bcc.n	8008f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d116      	bne.n	8008f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f24:	f043 0220 	orr.w	r2, r3, #32
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e007      	b.n	8008f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f42:	2b40      	cmp	r3, #64	; 0x40
 8008f44:	d1b5      	bne.n	8008eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f66:	d11b      	bne.n	8008fa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	f043 0204 	orr.w	r2, r3, #4
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e000      	b.n	8008fa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
	...

08008fb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d101      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e316      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b0f      	cmp	r3, #15
 8008fc8:	d903      	bls.n	8008fd2 <HAL_RCC_OscConfig+0x22>
 8008fca:	21e8      	movs	r1, #232	; 0xe8
 8008fcc:	48a3      	ldr	r0, [pc, #652]	; (800925c <HAL_RCC_OscConfig+0x2ac>)
 8008fce:	f7fa fa66 	bl	800349e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 8088 	beq.w	80090f0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00d      	beq.n	8009004 <HAL_RCC_OscConfig+0x54>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff0:	d008      	beq.n	8009004 <HAL_RCC_OscConfig+0x54>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ffa:	d003      	beq.n	8009004 <HAL_RCC_OscConfig+0x54>
 8008ffc:	21ed      	movs	r1, #237	; 0xed
 8008ffe:	4897      	ldr	r0, [pc, #604]	; (800925c <HAL_RCC_OscConfig+0x2ac>)
 8009000:	f7fa fa4d 	bl	800349e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009004:	4b96      	ldr	r3, [pc, #600]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f003 030c 	and.w	r3, r3, #12
 800900c:	2b04      	cmp	r3, #4
 800900e:	d00c      	beq.n	800902a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009010:	4b93      	ldr	r3, [pc, #588]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009018:	2b08      	cmp	r3, #8
 800901a:	d112      	bne.n	8009042 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800901c:	4b90      	ldr	r3, [pc, #576]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009028:	d10b      	bne.n	8009042 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800902a:	4b8d      	ldr	r3, [pc, #564]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d05b      	beq.n	80090ee <HAL_RCC_OscConfig+0x13e>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d157      	bne.n	80090ee <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e2d6      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800904a:	d106      	bne.n	800905a <HAL_RCC_OscConfig+0xaa>
 800904c:	4b84      	ldr	r3, [pc, #528]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a83      	ldr	r2, [pc, #524]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e01d      	b.n	8009096 <HAL_RCC_OscConfig+0xe6>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009062:	d10c      	bne.n	800907e <HAL_RCC_OscConfig+0xce>
 8009064:	4b7e      	ldr	r3, [pc, #504]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a7d      	ldr	r2, [pc, #500]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 800906a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	4b7b      	ldr	r3, [pc, #492]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a7a      	ldr	r2, [pc, #488]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	e00b      	b.n	8009096 <HAL_RCC_OscConfig+0xe6>
 800907e:	4b78      	ldr	r3, [pc, #480]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a77      	ldr	r2, [pc, #476]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	4b75      	ldr	r3, [pc, #468]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a74      	ldr	r2, [pc, #464]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009094:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800909e:	f7fb fb0d 	bl	80046bc <HAL_GetTick>
 80090a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090a4:	e008      	b.n	80090b8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090a6:	f7fb fb09 	bl	80046bc <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	2b64      	cmp	r3, #100	; 0x64
 80090b2:	d901      	bls.n	80090b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e29b      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090b8:	4b69      	ldr	r3, [pc, #420]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0f0      	beq.n	80090a6 <HAL_RCC_OscConfig+0xf6>
 80090c4:	e014      	b.n	80090f0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c6:	f7fb faf9 	bl	80046bc <HAL_GetTick>
 80090ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090cc:	e008      	b.n	80090e0 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090ce:	f7fb faf5 	bl	80046bc <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b64      	cmp	r3, #100	; 0x64
 80090da:	d901      	bls.n	80090e0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e287      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090e0:	4b5f      	ldr	r3, [pc, #380]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1f0      	bne.n	80090ce <HAL_RCC_OscConfig+0x11e>
 80090ec:	e000      	b.n	80090f0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d079      	beq.n	80091f0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d008      	beq.n	8009116 <HAL_RCC_OscConfig+0x166>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d004      	beq.n	8009116 <HAL_RCC_OscConfig+0x166>
 800910c:	f240 111f 	movw	r1, #287	; 0x11f
 8009110:	4852      	ldr	r0, [pc, #328]	; (800925c <HAL_RCC_OscConfig+0x2ac>)
 8009112:	f7fa f9c4 	bl	800349e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b1f      	cmp	r3, #31
 800911c:	d904      	bls.n	8009128 <HAL_RCC_OscConfig+0x178>
 800911e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8009122:	484e      	ldr	r0, [pc, #312]	; (800925c <HAL_RCC_OscConfig+0x2ac>)
 8009124:	f7fa f9bb 	bl	800349e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009128:	4b4d      	ldr	r3, [pc, #308]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f003 030c 	and.w	r3, r3, #12
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009134:	4b4a      	ldr	r3, [pc, #296]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800913c:	2b08      	cmp	r3, #8
 800913e:	d11c      	bne.n	800917a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009140:	4b47      	ldr	r3, [pc, #284]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d116      	bne.n	800917a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800914c:	4b44      	ldr	r3, [pc, #272]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_RCC_OscConfig+0x1b4>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d001      	beq.n	8009164 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e245      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009164:	4b3e      	ldr	r3, [pc, #248]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	493b      	ldr	r1, [pc, #236]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009174:	4313      	orrs	r3, r2
 8009176:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009178:	e03a      	b.n	80091f0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d020      	beq.n	80091c4 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009182:	4b38      	ldr	r3, [pc, #224]	; (8009264 <HAL_RCC_OscConfig+0x2b4>)
 8009184:	2201      	movs	r2, #1
 8009186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009188:	f7fb fa98 	bl	80046bc <HAL_GetTick>
 800918c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009190:	f7fb fa94 	bl	80046bc <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e226      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a2:	4b2f      	ldr	r3, [pc, #188]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f0      	beq.n	8009190 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091ae:	4b2c      	ldr	r3, [pc, #176]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	00db      	lsls	r3, r3, #3
 80091bc:	4928      	ldr	r1, [pc, #160]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	600b      	str	r3, [r1, #0]
 80091c2:	e015      	b.n	80091f0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091c4:	4b27      	ldr	r3, [pc, #156]	; (8009264 <HAL_RCC_OscConfig+0x2b4>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ca:	f7fb fa77 	bl	80046bc <HAL_GetTick>
 80091ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091d2:	f7fb fa73 	bl	80046bc <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e205      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091e4:	4b1e      	ldr	r3, [pc, #120]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1f0      	bne.n	80091d2 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d046      	beq.n	800928a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <HAL_RCC_OscConfig+0x266>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d004      	beq.n	8009216 <HAL_RCC_OscConfig+0x266>
 800920c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8009210:	4812      	ldr	r0, [pc, #72]	; (800925c <HAL_RCC_OscConfig+0x2ac>)
 8009212:	f7fa f944 	bl	800349e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d016      	beq.n	800924c <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800921e:	4b12      	ldr	r3, [pc, #72]	; (8009268 <HAL_RCC_OscConfig+0x2b8>)
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009224:	f7fb fa4a 	bl	80046bc <HAL_GetTick>
 8009228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800922a:	e008      	b.n	800923e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800922c:	f7fb fa46 	bl	80046bc <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	2b02      	cmp	r3, #2
 8009238:	d901      	bls.n	800923e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e1d8      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800923e:	4b08      	ldr	r3, [pc, #32]	; (8009260 <HAL_RCC_OscConfig+0x2b0>)
 8009240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009242:	f003 0302 	and.w	r3, r3, #2
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0f0      	beq.n	800922c <HAL_RCC_OscConfig+0x27c>
 800924a:	e01e      	b.n	800928a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800924c:	4b06      	ldr	r3, [pc, #24]	; (8009268 <HAL_RCC_OscConfig+0x2b8>)
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009252:	f7fb fa33 	bl	80046bc <HAL_GetTick>
 8009256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009258:	e011      	b.n	800927e <HAL_RCC_OscConfig+0x2ce>
 800925a:	bf00      	nop
 800925c:	0801346c 	.word	0x0801346c
 8009260:	40023800 	.word	0x40023800
 8009264:	42470000 	.word	0x42470000
 8009268:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800926c:	f7fb fa26 	bl	80046bc <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b02      	cmp	r3, #2
 8009278:	d901      	bls.n	800927e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e1b8      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800927e:	4b97      	ldr	r3, [pc, #604]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009282:	f003 0302 	and.w	r3, r3, #2
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f0      	bne.n	800926c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0304 	and.w	r3, r3, #4
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80a8 	beq.w	80093e8 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009298:	2300      	movs	r3, #0
 800929a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00c      	beq.n	80092be <HAL_RCC_OscConfig+0x30e>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d008      	beq.n	80092be <HAL_RCC_OscConfig+0x30e>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	2b05      	cmp	r3, #5
 80092b2:	d004      	beq.n	80092be <HAL_RCC_OscConfig+0x30e>
 80092b4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80092b8:	4889      	ldr	r0, [pc, #548]	; (80094e0 <HAL_RCC_OscConfig+0x530>)
 80092ba:	f7fa f8f0 	bl	800349e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092be:	4b87      	ldr	r3, [pc, #540]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d10f      	bne.n	80092ea <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092ca:	2300      	movs	r3, #0
 80092cc:	60bb      	str	r3, [r7, #8]
 80092ce:	4b83      	ldr	r3, [pc, #524]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80092d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d2:	4a82      	ldr	r2, [pc, #520]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80092d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092d8:	6413      	str	r3, [r2, #64]	; 0x40
 80092da:	4b80      	ldr	r3, [pc, #512]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80092dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092e2:	60bb      	str	r3, [r7, #8]
 80092e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092e6:	2301      	movs	r3, #1
 80092e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092ea:	4b7e      	ldr	r3, [pc, #504]	; (80094e4 <HAL_RCC_OscConfig+0x534>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d118      	bne.n	8009328 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092f6:	4b7b      	ldr	r3, [pc, #492]	; (80094e4 <HAL_RCC_OscConfig+0x534>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a7a      	ldr	r2, [pc, #488]	; (80094e4 <HAL_RCC_OscConfig+0x534>)
 80092fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009300:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009302:	f7fb f9db 	bl	80046bc <HAL_GetTick>
 8009306:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009308:	e008      	b.n	800931c <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800930a:	f7fb f9d7 	bl	80046bc <HAL_GetTick>
 800930e:	4602      	mov	r2, r0
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	1ad3      	subs	r3, r2, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d901      	bls.n	800931c <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e169      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800931c:	4b71      	ldr	r3, [pc, #452]	; (80094e4 <HAL_RCC_OscConfig+0x534>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0f0      	beq.n	800930a <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d106      	bne.n	800933e <HAL_RCC_OscConfig+0x38e>
 8009330:	4b6a      	ldr	r3, [pc, #424]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009334:	4a69      	ldr	r2, [pc, #420]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	6713      	str	r3, [r2, #112]	; 0x70
 800933c:	e01c      	b.n	8009378 <HAL_RCC_OscConfig+0x3c8>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	2b05      	cmp	r3, #5
 8009344:	d10c      	bne.n	8009360 <HAL_RCC_OscConfig+0x3b0>
 8009346:	4b65      	ldr	r3, [pc, #404]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934a:	4a64      	ldr	r2, [pc, #400]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 800934c:	f043 0304 	orr.w	r3, r3, #4
 8009350:	6713      	str	r3, [r2, #112]	; 0x70
 8009352:	4b62      	ldr	r3, [pc, #392]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	4a61      	ldr	r2, [pc, #388]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009358:	f043 0301 	orr.w	r3, r3, #1
 800935c:	6713      	str	r3, [r2, #112]	; 0x70
 800935e:	e00b      	b.n	8009378 <HAL_RCC_OscConfig+0x3c8>
 8009360:	4b5e      	ldr	r3, [pc, #376]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009364:	4a5d      	ldr	r2, [pc, #372]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009366:	f023 0301 	bic.w	r3, r3, #1
 800936a:	6713      	str	r3, [r2, #112]	; 0x70
 800936c:	4b5b      	ldr	r3, [pc, #364]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 800936e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009370:	4a5a      	ldr	r2, [pc, #360]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009372:	f023 0304 	bic.w	r3, r3, #4
 8009376:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d015      	beq.n	80093ac <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009380:	f7fb f99c 	bl	80046bc <HAL_GetTick>
 8009384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009386:	e00a      	b.n	800939e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009388:	f7fb f998 	bl	80046bc <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	f241 3288 	movw	r2, #5000	; 0x1388
 8009396:	4293      	cmp	r3, r2
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e128      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800939e:	4b4f      	ldr	r3, [pc, #316]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80093a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d0ee      	beq.n	8009388 <HAL_RCC_OscConfig+0x3d8>
 80093aa:	e014      	b.n	80093d6 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093ac:	f7fb f986 	bl	80046bc <HAL_GetTick>
 80093b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093b2:	e00a      	b.n	80093ca <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093b4:	f7fb f982 	bl	80046bc <HAL_GetTick>
 80093b8:	4602      	mov	r2, r0
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e112      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093ca:	4b44      	ldr	r3, [pc, #272]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	f003 0302 	and.w	r3, r3, #2
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1ee      	bne.n	80093b4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d105      	bne.n	80093e8 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093dc:	4b3f      	ldr	r3, [pc, #252]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80093de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e0:	4a3e      	ldr	r2, [pc, #248]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 80093e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00c      	beq.n	800940a <HAL_RCC_OscConfig+0x45a>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d008      	beq.n	800940a <HAL_RCC_OscConfig+0x45a>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d004      	beq.n	800940a <HAL_RCC_OscConfig+0x45a>
 8009400:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009404:	4836      	ldr	r0, [pc, #216]	; (80094e0 <HAL_RCC_OscConfig+0x530>)
 8009406:	f7fa f84a 	bl	800349e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80ed 	beq.w	80095ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009414:	4b31      	ldr	r3, [pc, #196]	; (80094dc <HAL_RCC_OscConfig+0x52c>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f003 030c 	and.w	r3, r3, #12
 800941c:	2b08      	cmp	r3, #8
 800941e:	f000 80ae 	beq.w	800957e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	2b02      	cmp	r3, #2
 8009428:	f040 8092 	bne.w	8009550 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d009      	beq.n	8009448 <HAL_RCC_OscConfig+0x498>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	69db      	ldr	r3, [r3, #28]
 8009438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800943c:	d004      	beq.n	8009448 <HAL_RCC_OscConfig+0x498>
 800943e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8009442:	4827      	ldr	r0, [pc, #156]	; (80094e0 <HAL_RCC_OscConfig+0x530>)
 8009444:	f7fa f82b 	bl	800349e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	2b3f      	cmp	r3, #63	; 0x3f
 800944e:	d904      	bls.n	800945a <HAL_RCC_OscConfig+0x4aa>
 8009450:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009454:	4822      	ldr	r0, [pc, #136]	; (80094e0 <HAL_RCC_OscConfig+0x530>)
 8009456:	f7fa f822 	bl	800349e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	2b31      	cmp	r3, #49	; 0x31
 8009460:	d904      	bls.n	800946c <HAL_RCC_OscConfig+0x4bc>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800946a:	d904      	bls.n	8009476 <HAL_RCC_OscConfig+0x4c6>
 800946c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009470:	481b      	ldr	r0, [pc, #108]	; (80094e0 <HAL_RCC_OscConfig+0x530>)
 8009472:	f7fa f814 	bl	800349e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947a:	2b02      	cmp	r3, #2
 800947c:	d010      	beq.n	80094a0 <HAL_RCC_OscConfig+0x4f0>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009482:	2b04      	cmp	r3, #4
 8009484:	d00c      	beq.n	80094a0 <HAL_RCC_OscConfig+0x4f0>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	2b06      	cmp	r3, #6
 800948c:	d008      	beq.n	80094a0 <HAL_RCC_OscConfig+0x4f0>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	2b08      	cmp	r3, #8
 8009494:	d004      	beq.n	80094a0 <HAL_RCC_OscConfig+0x4f0>
 8009496:	f240 11db 	movw	r1, #475	; 0x1db
 800949a:	4811      	ldr	r0, [pc, #68]	; (80094e0 <HAL_RCC_OscConfig+0x530>)
 800949c:	f7f9 ffff 	bl	800349e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d903      	bls.n	80094b0 <HAL_RCC_OscConfig+0x500>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ac:	2b0f      	cmp	r3, #15
 80094ae:	d904      	bls.n	80094ba <HAL_RCC_OscConfig+0x50a>
 80094b0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80094b4:	480a      	ldr	r0, [pc, #40]	; (80094e0 <HAL_RCC_OscConfig+0x530>)
 80094b6:	f7f9 fff2 	bl	800349e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094ba:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <HAL_RCC_OscConfig+0x538>)
 80094bc:	2200      	movs	r2, #0
 80094be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094c0:	f7fb f8fc 	bl	80046bc <HAL_GetTick>
 80094c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094c6:	e011      	b.n	80094ec <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094c8:	f7fb f8f8 	bl	80046bc <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d90a      	bls.n	80094ec <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e08a      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
 80094da:	bf00      	nop
 80094dc:	40023800 	.word	0x40023800
 80094e0:	0801346c 	.word	0x0801346c
 80094e4:	40007000 	.word	0x40007000
 80094e8:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ec:	4b42      	ldr	r3, [pc, #264]	; (80095f8 <HAL_RCC_OscConfig+0x648>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e7      	bne.n	80094c8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	69da      	ldr	r2, [r3, #28]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	019b      	lsls	r3, r3, #6
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	3b01      	subs	r3, #1
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	4936      	ldr	r1, [pc, #216]	; (80095f8 <HAL_RCC_OscConfig+0x648>)
 800951e:	4313      	orrs	r3, r2
 8009520:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009522:	4b36      	ldr	r3, [pc, #216]	; (80095fc <HAL_RCC_OscConfig+0x64c>)
 8009524:	2201      	movs	r2, #1
 8009526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009528:	f7fb f8c8 	bl	80046bc <HAL_GetTick>
 800952c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800952e:	e008      	b.n	8009542 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009530:	f7fb f8c4 	bl	80046bc <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	2b02      	cmp	r3, #2
 800953c:	d901      	bls.n	8009542 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e056      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009542:	4b2d      	ldr	r3, [pc, #180]	; (80095f8 <HAL_RCC_OscConfig+0x648>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0f0      	beq.n	8009530 <HAL_RCC_OscConfig+0x580>
 800954e:	e04e      	b.n	80095ee <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009550:	4b2a      	ldr	r3, [pc, #168]	; (80095fc <HAL_RCC_OscConfig+0x64c>)
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009556:	f7fb f8b1 	bl	80046bc <HAL_GetTick>
 800955a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800955c:	e008      	b.n	8009570 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800955e:	f7fb f8ad 	bl	80046bc <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d901      	bls.n	8009570 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e03f      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009570:	4b21      	ldr	r3, [pc, #132]	; (80095f8 <HAL_RCC_OscConfig+0x648>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1f0      	bne.n	800955e <HAL_RCC_OscConfig+0x5ae>
 800957c:	e037      	b.n	80095ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d101      	bne.n	800958a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e032      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800958a:	4b1b      	ldr	r3, [pc, #108]	; (80095f8 <HAL_RCC_OscConfig+0x648>)
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d028      	beq.n	80095ea <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d121      	bne.n	80095ea <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d11a      	bne.n	80095ea <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095ba:	4013      	ands	r3, r2
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d111      	bne.n	80095ea <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	085b      	lsrs	r3, r3, #1
 80095d2:	3b01      	subs	r3, #1
 80095d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d107      	bne.n	80095ea <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d001      	beq.n	80095ee <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e000      	b.n	80095f0 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	40023800 	.word	0x40023800
 80095fc:	42470060 	.word	0x42470060

08009600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e174      	b.n	80098fe <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <HAL_RCC_ClockConfig+0x24>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b0f      	cmp	r3, #15
 8009622:	d904      	bls.n	800962e <HAL_RCC_ClockConfig+0x2e>
 8009624:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8009628:	487b      	ldr	r0, [pc, #492]	; (8009818 <HAL_RCC_ClockConfig+0x218>)
 800962a:	f7f9 ff38 	bl	800349e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d019      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d016      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d013      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b03      	cmp	r3, #3
 8009644:	d010      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b04      	cmp	r3, #4
 800964a:	d00d      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b05      	cmp	r3, #5
 8009650:	d00a      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b06      	cmp	r3, #6
 8009656:	d007      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2b07      	cmp	r3, #7
 800965c:	d004      	beq.n	8009668 <HAL_RCC_ClockConfig+0x68>
 800965e:	f240 215d 	movw	r1, #605	; 0x25d
 8009662:	486d      	ldr	r0, [pc, #436]	; (8009818 <HAL_RCC_ClockConfig+0x218>)
 8009664:	f7f9 ff1b 	bl	800349e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009668:	4b6c      	ldr	r3, [pc, #432]	; (800981c <HAL_RCC_ClockConfig+0x21c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0307 	and.w	r3, r3, #7
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d90c      	bls.n	8009690 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009676:	4b69      	ldr	r3, [pc, #420]	; (800981c <HAL_RCC_ClockConfig+0x21c>)
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800967e:	4b67      	ldr	r3, [pc, #412]	; (800981c <HAL_RCC_ClockConfig+0x21c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	d001      	beq.n	8009690 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e136      	b.n	80098fe <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d049      	beq.n	8009730 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d005      	beq.n	80096b4 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096a8:	4b5d      	ldr	r3, [pc, #372]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	4a5c      	ldr	r2, [pc, #368]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80096ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0308 	and.w	r3, r3, #8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d005      	beq.n	80096cc <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096c0:	4b57      	ldr	r3, [pc, #348]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4a56      	ldr	r2, [pc, #344]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80096c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d024      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b80      	cmp	r3, #128	; 0x80
 80096da:	d020      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b90      	cmp	r3, #144	; 0x90
 80096e2:	d01c      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2ba0      	cmp	r3, #160	; 0xa0
 80096ea:	d018      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2bb0      	cmp	r3, #176	; 0xb0
 80096f2:	d014      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2bc0      	cmp	r3, #192	; 0xc0
 80096fa:	d010      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	2bd0      	cmp	r3, #208	; 0xd0
 8009702:	d00c      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2be0      	cmp	r3, #224	; 0xe0
 800970a:	d008      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	2bf0      	cmp	r3, #240	; 0xf0
 8009712:	d004      	beq.n	800971e <HAL_RCC_ClockConfig+0x11e>
 8009714:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009718:	483f      	ldr	r0, [pc, #252]	; (8009818 <HAL_RCC_ClockConfig+0x218>)
 800971a:	f7f9 fec0 	bl	800349e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800971e:	4b40      	ldr	r3, [pc, #256]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	493d      	ldr	r1, [pc, #244]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 800972c:	4313      	orrs	r3, r2
 800972e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	2b00      	cmp	r3, #0
 800973a:	d059      	beq.n	80097f0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d010      	beq.n	8009766 <HAL_RCC_ClockConfig+0x166>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d00c      	beq.n	8009766 <HAL_RCC_ClockConfig+0x166>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d008      	beq.n	8009766 <HAL_RCC_ClockConfig+0x166>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d004      	beq.n	8009766 <HAL_RCC_ClockConfig+0x166>
 800975c:	f240 2187 	movw	r1, #647	; 0x287
 8009760:	482d      	ldr	r0, [pc, #180]	; (8009818 <HAL_RCC_ClockConfig+0x218>)
 8009762:	f7f9 fe9c 	bl	800349e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d107      	bne.n	800977e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800976e:	4b2c      	ldr	r3, [pc, #176]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d119      	bne.n	80097ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e0bf      	b.n	80098fe <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2b02      	cmp	r3, #2
 8009784:	d003      	beq.n	800978e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800978a:	2b03      	cmp	r3, #3
 800978c:	d107      	bne.n	800979e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800978e:	4b24      	ldr	r3, [pc, #144]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e0af      	b.n	80098fe <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800979e:	4b20      	ldr	r3, [pc, #128]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d101      	bne.n	80097ae <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e0a7      	b.n	80098fe <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097ae:	4b1c      	ldr	r3, [pc, #112]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f023 0203 	bic.w	r2, r3, #3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	4919      	ldr	r1, [pc, #100]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097c0:	f7fa ff7c 	bl	80046bc <HAL_GetTick>
 80097c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097c6:	e00a      	b.n	80097de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097c8:	f7fa ff78 	bl	80046bc <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d901      	bls.n	80097de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e08f      	b.n	80098fe <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <HAL_RCC_ClockConfig+0x220>)
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f003 020c 	and.w	r2, r3, #12
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d1eb      	bne.n	80097c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <HAL_RCC_ClockConfig+0x21c>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0307 	and.w	r3, r3, #7
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d212      	bcs.n	8009824 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097fe:	4b07      	ldr	r3, [pc, #28]	; (800981c <HAL_RCC_ClockConfig+0x21c>)
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	b2d2      	uxtb	r2, r2
 8009804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009806:	4b05      	ldr	r3, [pc, #20]	; (800981c <HAL_RCC_ClockConfig+0x21c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	683a      	ldr	r2, [r7, #0]
 8009810:	429a      	cmp	r2, r3
 8009812:	d007      	beq.n	8009824 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e072      	b.n	80098fe <HAL_RCC_ClockConfig+0x2fe>
 8009818:	0801346c 	.word	0x0801346c
 800981c:	40023c00 	.word	0x40023c00
 8009820:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0304 	and.w	r3, r3, #4
 800982c:	2b00      	cmp	r3, #0
 800982e:	d025      	beq.n	800987c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d018      	beq.n	800986a <HAL_RCC_ClockConfig+0x26a>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009840:	d013      	beq.n	800986a <HAL_RCC_ClockConfig+0x26a>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800984a:	d00e      	beq.n	800986a <HAL_RCC_ClockConfig+0x26a>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	68db      	ldr	r3, [r3, #12]
 8009850:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009854:	d009      	beq.n	800986a <HAL_RCC_ClockConfig+0x26a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800985e:	d004      	beq.n	800986a <HAL_RCC_ClockConfig+0x26a>
 8009860:	f240 21c5 	movw	r1, #709	; 0x2c5
 8009864:	4828      	ldr	r0, [pc, #160]	; (8009908 <HAL_RCC_ClockConfig+0x308>)
 8009866:	f7f9 fe1a 	bl	800349e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800986a:	4b28      	ldr	r3, [pc, #160]	; (800990c <HAL_RCC_ClockConfig+0x30c>)
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	4925      	ldr	r1, [pc, #148]	; (800990c <HAL_RCC_ClockConfig+0x30c>)
 8009878:	4313      	orrs	r3, r2
 800987a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d026      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d018      	beq.n	80098c2 <HAL_RCC_ClockConfig+0x2c2>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009898:	d013      	beq.n	80098c2 <HAL_RCC_ClockConfig+0x2c2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80098a2:	d00e      	beq.n	80098c2 <HAL_RCC_ClockConfig+0x2c2>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80098ac:	d009      	beq.n	80098c2 <HAL_RCC_ClockConfig+0x2c2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80098b6:	d004      	beq.n	80098c2 <HAL_RCC_ClockConfig+0x2c2>
 80098b8:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 80098bc:	4812      	ldr	r0, [pc, #72]	; (8009908 <HAL_RCC_ClockConfig+0x308>)
 80098be:	f7f9 fdee 	bl	800349e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098c2:	4b12      	ldr	r3, [pc, #72]	; (800990c <HAL_RCC_ClockConfig+0x30c>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	490e      	ldr	r1, [pc, #56]	; (800990c <HAL_RCC_ClockConfig+0x30c>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80098d6:	f000 f821 	bl	800991c <HAL_RCC_GetSysClockFreq>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b0b      	ldr	r3, [pc, #44]	; (800990c <HAL_RCC_ClockConfig+0x30c>)
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	091b      	lsrs	r3, r3, #4
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	490a      	ldr	r1, [pc, #40]	; (8009910 <HAL_RCC_ClockConfig+0x310>)
 80098e8:	5ccb      	ldrb	r3, [r1, r3]
 80098ea:	fa22 f303 	lsr.w	r3, r2, r3
 80098ee:	4a09      	ldr	r2, [pc, #36]	; (8009914 <HAL_RCC_ClockConfig+0x314>)
 80098f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <HAL_RCC_ClockConfig+0x318>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fa fe9c 	bl	8004634 <HAL_InitTick>

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	0801346c 	.word	0x0801346c
 800990c:	40023800 	.word	0x40023800
 8009910:	08013b64 	.word	0x08013b64
 8009914:	200000d8 	.word	0x200000d8
 8009918:	200000dc 	.word	0x200000dc

0800991c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800991c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009920:	b084      	sub	sp, #16
 8009922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	607b      	str	r3, [r7, #4]
 8009928:	2300      	movs	r3, #0
 800992a:	60fb      	str	r3, [r7, #12]
 800992c:	2300      	movs	r3, #0
 800992e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009934:	4b67      	ldr	r3, [pc, #412]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f003 030c 	and.w	r3, r3, #12
 800993c:	2b08      	cmp	r3, #8
 800993e:	d00d      	beq.n	800995c <HAL_RCC_GetSysClockFreq+0x40>
 8009940:	2b08      	cmp	r3, #8
 8009942:	f200 80bd 	bhi.w	8009ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d002      	beq.n	8009950 <HAL_RCC_GetSysClockFreq+0x34>
 800994a:	2b04      	cmp	r3, #4
 800994c:	d003      	beq.n	8009956 <HAL_RCC_GetSysClockFreq+0x3a>
 800994e:	e0b7      	b.n	8009ac0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009950:	4b61      	ldr	r3, [pc, #388]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009952:	60bb      	str	r3, [r7, #8]
       break;
 8009954:	e0b7      	b.n	8009ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009956:	4b61      	ldr	r3, [pc, #388]	; (8009adc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009958:	60bb      	str	r3, [r7, #8]
      break;
 800995a:	e0b4      	b.n	8009ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800995c:	4b5d      	ldr	r3, [pc, #372]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009964:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009966:	4b5b      	ldr	r3, [pc, #364]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d04d      	beq.n	8009a0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009972:	4b58      	ldr	r3, [pc, #352]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	099b      	lsrs	r3, r3, #6
 8009978:	461a      	mov	r2, r3
 800997a:	f04f 0300 	mov.w	r3, #0
 800997e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009982:	f04f 0100 	mov.w	r1, #0
 8009986:	ea02 0800 	and.w	r8, r2, r0
 800998a:	ea03 0901 	and.w	r9, r3, r1
 800998e:	4640      	mov	r0, r8
 8009990:	4649      	mov	r1, r9
 8009992:	f04f 0200 	mov.w	r2, #0
 8009996:	f04f 0300 	mov.w	r3, #0
 800999a:	014b      	lsls	r3, r1, #5
 800999c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80099a0:	0142      	lsls	r2, r0, #5
 80099a2:	4610      	mov	r0, r2
 80099a4:	4619      	mov	r1, r3
 80099a6:	ebb0 0008 	subs.w	r0, r0, r8
 80099aa:	eb61 0109 	sbc.w	r1, r1, r9
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	f04f 0300 	mov.w	r3, #0
 80099b6:	018b      	lsls	r3, r1, #6
 80099b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80099bc:	0182      	lsls	r2, r0, #6
 80099be:	1a12      	subs	r2, r2, r0
 80099c0:	eb63 0301 	sbc.w	r3, r3, r1
 80099c4:	f04f 0000 	mov.w	r0, #0
 80099c8:	f04f 0100 	mov.w	r1, #0
 80099cc:	00d9      	lsls	r1, r3, #3
 80099ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099d2:	00d0      	lsls	r0, r2, #3
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	eb12 0208 	adds.w	r2, r2, r8
 80099dc:	eb43 0309 	adc.w	r3, r3, r9
 80099e0:	f04f 0000 	mov.w	r0, #0
 80099e4:	f04f 0100 	mov.w	r1, #0
 80099e8:	0259      	lsls	r1, r3, #9
 80099ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80099ee:	0250      	lsls	r0, r2, #9
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4610      	mov	r0, r2
 80099f6:	4619      	mov	r1, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	f7f7 f92a 	bl	8000c58 <__aeabi_uldivmod>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4613      	mov	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	e04a      	b.n	8009aa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a0e:	4b31      	ldr	r3, [pc, #196]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	099b      	lsrs	r3, r3, #6
 8009a14:	461a      	mov	r2, r3
 8009a16:	f04f 0300 	mov.w	r3, #0
 8009a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009a1e:	f04f 0100 	mov.w	r1, #0
 8009a22:	ea02 0400 	and.w	r4, r2, r0
 8009a26:	ea03 0501 	and.w	r5, r3, r1
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f04f 0200 	mov.w	r2, #0
 8009a32:	f04f 0300 	mov.w	r3, #0
 8009a36:	014b      	lsls	r3, r1, #5
 8009a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a3c:	0142      	lsls	r2, r0, #5
 8009a3e:	4610      	mov	r0, r2
 8009a40:	4619      	mov	r1, r3
 8009a42:	1b00      	subs	r0, r0, r4
 8009a44:	eb61 0105 	sbc.w	r1, r1, r5
 8009a48:	f04f 0200 	mov.w	r2, #0
 8009a4c:	f04f 0300 	mov.w	r3, #0
 8009a50:	018b      	lsls	r3, r1, #6
 8009a52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009a56:	0182      	lsls	r2, r0, #6
 8009a58:	1a12      	subs	r2, r2, r0
 8009a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8009a5e:	f04f 0000 	mov.w	r0, #0
 8009a62:	f04f 0100 	mov.w	r1, #0
 8009a66:	00d9      	lsls	r1, r3, #3
 8009a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a6c:	00d0      	lsls	r0, r2, #3
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	1912      	adds	r2, r2, r4
 8009a74:	eb45 0303 	adc.w	r3, r5, r3
 8009a78:	f04f 0000 	mov.w	r0, #0
 8009a7c:	f04f 0100 	mov.w	r1, #0
 8009a80:	0299      	lsls	r1, r3, #10
 8009a82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009a86:	0290      	lsls	r0, r2, #10
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4619      	mov	r1, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	461a      	mov	r2, r3
 8009a94:	f04f 0300 	mov.w	r3, #0
 8009a98:	f7f7 f8de 	bl	8000c58 <__aeabi_uldivmod>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009aa4:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	0c1b      	lsrs	r3, r3, #16
 8009aaa:	f003 0303 	and.w	r3, r3, #3
 8009aae:	3301      	adds	r3, #1
 8009ab0:	005b      	lsls	r3, r3, #1
 8009ab2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abc:	60bb      	str	r3, [r7, #8]
      break;
 8009abe:	e002      	b.n	8009ac6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ac0:	4b05      	ldr	r3, [pc, #20]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009ac2:	60bb      	str	r3, [r7, #8]
      break;
 8009ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009ad2:	bf00      	nop
 8009ad4:	40023800 	.word	0x40023800
 8009ad8:	00f42400 	.word	0x00f42400
 8009adc:	007a1200 	.word	0x007a1200

08009ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ae4:	4b03      	ldr	r3, [pc, #12]	; (8009af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	200000d8 	.word	0x200000d8

08009af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009afc:	f7ff fff0 	bl	8009ae0 <HAL_RCC_GetHCLKFreq>
 8009b00:	4602      	mov	r2, r0
 8009b02:	4b05      	ldr	r3, [pc, #20]	; (8009b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	0a9b      	lsrs	r3, r3, #10
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	4903      	ldr	r1, [pc, #12]	; (8009b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b0e:	5ccb      	ldrb	r3, [r1, r3]
 8009b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	40023800 	.word	0x40023800
 8009b1c:	08013b74 	.word	0x08013b74

08009b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e18c      	b.n	8009e4c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a75      	ldr	r2, [pc, #468]	; (8009d0c <HAL_SPI_Init+0x1ec>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d018      	beq.n	8009b6e <HAL_SPI_Init+0x4e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a73      	ldr	r2, [pc, #460]	; (8009d10 <HAL_SPI_Init+0x1f0>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <HAL_SPI_Init+0x4e>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a72      	ldr	r2, [pc, #456]	; (8009d14 <HAL_SPI_Init+0x1f4>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00e      	beq.n	8009b6e <HAL_SPI_Init+0x4e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a70      	ldr	r2, [pc, #448]	; (8009d18 <HAL_SPI_Init+0x1f8>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d009      	beq.n	8009b6e <HAL_SPI_Init+0x4e>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a6f      	ldr	r2, [pc, #444]	; (8009d1c <HAL_SPI_Init+0x1fc>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d004      	beq.n	8009b6e <HAL_SPI_Init+0x4e>
 8009b64:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009b68:	486d      	ldr	r0, [pc, #436]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009b6a:	f7f9 fc98 	bl	800349e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d009      	beq.n	8009b8a <HAL_SPI_Init+0x6a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b7e:	d004      	beq.n	8009b8a <HAL_SPI_Init+0x6a>
 8009b80:	f240 1143 	movw	r1, #323	; 0x143
 8009b84:	4866      	ldr	r0, [pc, #408]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009b86:	f7f9 fc8a 	bl	800349e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00e      	beq.n	8009bb0 <HAL_SPI_Init+0x90>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b9a:	d009      	beq.n	8009bb0 <HAL_SPI_Init+0x90>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba4:	d004      	beq.n	8009bb0 <HAL_SPI_Init+0x90>
 8009ba6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009baa:	485d      	ldr	r0, [pc, #372]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009bac:	f7f9 fc77 	bl	800349e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bb8:	d008      	beq.n	8009bcc <HAL_SPI_Init+0xac>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d004      	beq.n	8009bcc <HAL_SPI_Init+0xac>
 8009bc2:	f240 1145 	movw	r1, #325	; 0x145
 8009bc6:	4856      	ldr	r0, [pc, #344]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009bc8:	f7f9 fc69 	bl	800349e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bd4:	d00d      	beq.n	8009bf2 <HAL_SPI_Init+0xd2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d009      	beq.n	8009bf2 <HAL_SPI_Init+0xd2>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009be6:	d004      	beq.n	8009bf2 <HAL_SPI_Init+0xd2>
 8009be8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8009bec:	484c      	ldr	r0, [pc, #304]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009bee:	f7f9 fc56 	bl	800349e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d020      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	d01c      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	2b10      	cmp	r3, #16
 8009c08:	d018      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	2b18      	cmp	r3, #24
 8009c10:	d014      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	d010      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	2b28      	cmp	r3, #40	; 0x28
 8009c20:	d00c      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69db      	ldr	r3, [r3, #28]
 8009c26:	2b30      	cmp	r3, #48	; 0x30
 8009c28:	d008      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	2b38      	cmp	r3, #56	; 0x38
 8009c30:	d004      	beq.n	8009c3c <HAL_SPI_Init+0x11c>
 8009c32:	f240 1147 	movw	r1, #327	; 0x147
 8009c36:	483a      	ldr	r0, [pc, #232]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009c38:	f7f9 fc31 	bl	800349e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d008      	beq.n	8009c56 <HAL_SPI_Init+0x136>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a1b      	ldr	r3, [r3, #32]
 8009c48:	2b80      	cmp	r3, #128	; 0x80
 8009c4a:	d004      	beq.n	8009c56 <HAL_SPI_Init+0x136>
 8009c4c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009c50:	4833      	ldr	r0, [pc, #204]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009c52:	f7f9 fc24 	bl	800349e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d008      	beq.n	8009c70 <HAL_SPI_Init+0x150>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b10      	cmp	r3, #16
 8009c64:	d004      	beq.n	8009c70 <HAL_SPI_Init+0x150>
 8009c66:	f240 1149 	movw	r1, #329	; 0x149
 8009c6a:	482d      	ldr	r0, [pc, #180]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009c6c:	f7f9 fc17 	bl	800349e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d155      	bne.n	8009d24 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d008      	beq.n	8009c92 <HAL_SPI_Init+0x172>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d004      	beq.n	8009c92 <HAL_SPI_Init+0x172>
 8009c88:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8009c8c:	4824      	ldr	r0, [pc, #144]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009c8e:	f7f9 fc06 	bl	800349e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d008      	beq.n	8009cac <HAL_SPI_Init+0x18c>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d004      	beq.n	8009cac <HAL_SPI_Init+0x18c>
 8009ca2:	f240 114d 	movw	r1, #333	; 0x14d
 8009ca6:	481e      	ldr	r0, [pc, #120]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009ca8:	f7f9 fbf9 	bl	800349e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cb4:	d125      	bne.n	8009d02 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d05d      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	69db      	ldr	r3, [r3, #28]
 8009cc2:	2b08      	cmp	r3, #8
 8009cc4:	d059      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	2b10      	cmp	r3, #16
 8009ccc:	d055      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	2b18      	cmp	r3, #24
 8009cd4:	d051      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d04d      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	2b28      	cmp	r3, #40	; 0x28
 8009ce4:	d049      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	69db      	ldr	r3, [r3, #28]
 8009cea:	2b30      	cmp	r3, #48	; 0x30
 8009cec:	d045      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	2b38      	cmp	r3, #56	; 0x38
 8009cf4:	d041      	beq.n	8009d7a <HAL_SPI_Init+0x25a>
 8009cf6:	f240 1151 	movw	r1, #337	; 0x151
 8009cfa:	4809      	ldr	r0, [pc, #36]	; (8009d20 <HAL_SPI_Init+0x200>)
 8009cfc:	f7f9 fbcf 	bl	800349e <assert_failed>
 8009d00:	e03b      	b.n	8009d7a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	61da      	str	r2, [r3, #28]
 8009d08:	e037      	b.n	8009d7a <HAL_SPI_Init+0x25a>
 8009d0a:	bf00      	nop
 8009d0c:	40013000 	.word	0x40013000
 8009d10:	40003800 	.word	0x40003800
 8009d14:	40003c00 	.word	0x40003c00
 8009d18:	40013400 	.word	0x40013400
 8009d1c:	40015000 	.word	0x40015000
 8009d20:	080134a4 	.word	0x080134a4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d020      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d01c      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	d018      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	69db      	ldr	r3, [r3, #28]
 8009d40:	2b18      	cmp	r3, #24
 8009d42:	d014      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	69db      	ldr	r3, [r3, #28]
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	d010      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	2b28      	cmp	r3, #40	; 0x28
 8009d52:	d00c      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	69db      	ldr	r3, [r3, #28]
 8009d58:	2b30      	cmp	r3, #48	; 0x30
 8009d5a:	d008      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	2b38      	cmp	r3, #56	; 0x38
 8009d62:	d004      	beq.n	8009d6e <HAL_SPI_Init+0x24e>
 8009d64:	f240 115b 	movw	r1, #347	; 0x15b
 8009d68:	483a      	ldr	r0, [pc, #232]	; (8009e54 <HAL_SPI_Init+0x334>)
 8009d6a:	f7f9 fb98 	bl	800349e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d106      	bne.n	8009d9a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7f9 fbf9 	bl	800358c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2202      	movs	r2, #2
 8009d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009db0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	431a      	orrs	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dea:	431a      	orrs	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a1b      	ldr	r3, [r3, #32]
 8009dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfe:	ea42 0103 	orr.w	r1, r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	430a      	orrs	r2, r1
 8009e10:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	0c1b      	lsrs	r3, r3, #16
 8009e18:	f003 0104 	and.w	r1, r3, #4
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	f003 0210 	and.w	r2, r3, #16
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	69da      	ldr	r2, [r3, #28]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	080134a4 	.word	0x080134a4

08009e58 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e038      	b.n	8009edc <HAL_SPI_DeInit+0x84>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <HAL_SPI_DeInit+0x8c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d018      	beq.n	8009ea6 <HAL_SPI_DeInit+0x4e>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a1b      	ldr	r2, [pc, #108]	; (8009ee8 <HAL_SPI_DeInit+0x90>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d013      	beq.n	8009ea6 <HAL_SPI_DeInit+0x4e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a1a      	ldr	r2, [pc, #104]	; (8009eec <HAL_SPI_DeInit+0x94>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d00e      	beq.n	8009ea6 <HAL_SPI_DeInit+0x4e>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a18      	ldr	r2, [pc, #96]	; (8009ef0 <HAL_SPI_DeInit+0x98>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d009      	beq.n	8009ea6 <HAL_SPI_DeInit+0x4e>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a17      	ldr	r2, [pc, #92]	; (8009ef4 <HAL_SPI_DeInit+0x9c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d004      	beq.n	8009ea6 <HAL_SPI_DeInit+0x4e>
 8009e9c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009ea0:	4815      	ldr	r0, [pc, #84]	; (8009ef8 <HAL_SPI_DeInit+0xa0>)
 8009ea2:	f7f9 fafc 	bl	800349e <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ebc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7f9 fbe2 	bl	8003688 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	40013000 	.word	0x40013000
 8009ee8:	40003800 	.word	0x40003800
 8009eec:	40003c00 	.word	0x40003c00
 8009ef0:	40013400 	.word	0x40013400
 8009ef4:	40015000 	.word	0x40015000
 8009ef8:	080134a4 	.word	0x080134a4

08009efc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d009      	beq.n	8009f2c <HAL_SPI_Transmit+0x30>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f20:	d004      	beq.n	8009f2c <HAL_SPI_Transmit+0x30>
 8009f22:	f240 310a 	movw	r1, #778	; 0x30a
 8009f26:	4893      	ldr	r0, [pc, #588]	; (800a174 <HAL_SPI_Transmit+0x278>)
 8009f28:	f7f9 fab9 	bl	800349e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d101      	bne.n	8009f3a <HAL_SPI_Transmit+0x3e>
 8009f36:	2302      	movs	r3, #2
 8009f38:	e128      	b.n	800a18c <HAL_SPI_Transmit+0x290>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f42:	f7fa fbbb 	bl	80046bc <HAL_GetTick>
 8009f46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009f48:	88fb      	ldrh	r3, [r7, #6]
 8009f4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d002      	beq.n	8009f5e <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 8009f58:	2302      	movs	r3, #2
 8009f5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f5c:	e10d      	b.n	800a17a <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <HAL_SPI_Transmit+0x6e>
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d102      	bne.n	8009f70 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009f6e:	e104      	b.n	800a17a <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2203      	movs	r2, #3
 8009f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	88fa      	ldrh	r2, [r7, #6]
 8009f88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	88fa      	ldrh	r2, [r7, #6]
 8009f8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fb6:	d10f      	bne.n	8009fd8 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe2:	2b40      	cmp	r3, #64	; 0x40
 8009fe4:	d007      	beq.n	8009ff6 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ffe:	d14b      	bne.n	800a098 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <HAL_SPI_Transmit+0x112>
 800a008:	8afb      	ldrh	r3, [r7, #22]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d13e      	bne.n	800a08c <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a012:	881a      	ldrh	r2, [r3, #0]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	1c9a      	adds	r2, r3, #2
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a028:	b29b      	uxth	r3, r3
 800a02a:	3b01      	subs	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a032:	e02b      	b.n	800a08c <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d112      	bne.n	800a068 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a046:	881a      	ldrh	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a052:	1c9a      	adds	r2, r3, #2
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	3b01      	subs	r3, #1
 800a060:	b29a      	uxth	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	86da      	strh	r2, [r3, #54]	; 0x36
 800a066:	e011      	b.n	800a08c <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a068:	f7fa fb28 	bl	80046bc <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	683a      	ldr	r2, [r7, #0]
 800a074:	429a      	cmp	r2, r3
 800a076:	d803      	bhi.n	800a080 <HAL_SPI_Transmit+0x184>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a07e:	d102      	bne.n	800a086 <HAL_SPI_Transmit+0x18a>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d102      	bne.n	800a08c <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a08a:	e076      	b.n	800a17a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a090:	b29b      	uxth	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1ce      	bne.n	800a034 <HAL_SPI_Transmit+0x138>
 800a096:	e04c      	b.n	800a132 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <HAL_SPI_Transmit+0x1aa>
 800a0a0:	8afb      	ldrh	r3, [r7, #22]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d140      	bne.n	800a128 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	330c      	adds	r3, #12
 800a0b0:	7812      	ldrb	r2, [r2, #0]
 800a0b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a0cc:	e02c      	b.n	800a128 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d113      	bne.n	800a104 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	7812      	ldrb	r2, [r2, #0]
 800a0e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ee:	1c5a      	adds	r2, r3, #1
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	86da      	strh	r2, [r3, #54]	; 0x36
 800a102:	e011      	b.n	800a128 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a104:	f7fa fada 	bl	80046bc <HAL_GetTick>
 800a108:	4602      	mov	r2, r0
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	429a      	cmp	r2, r3
 800a112:	d803      	bhi.n	800a11c <HAL_SPI_Transmit+0x220>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a11a:	d102      	bne.n	800a122 <HAL_SPI_Transmit+0x226>
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a126:	e028      	b.n	800a17a <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1cd      	bne.n	800a0ce <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f000 fa70 	bl	800a61c <SPI_EndRxTxTransaction>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2220      	movs	r2, #32
 800a146:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10a      	bne.n	800a166 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a150:	2300      	movs	r3, #0
 800a152:	613b      	str	r3, [r7, #16]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	613b      	str	r3, [r7, #16]
 800a164:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d004      	beq.n	800a178 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	77fb      	strb	r3, [r7, #31]
 800a172:	e002      	b.n	800a17a <HAL_SPI_Transmit+0x27e>
 800a174:	080134a4 	.word	0x080134a4
  }

error:
 800a178:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a18a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3720      	adds	r7, #32
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d004      	beq.n	800a1be <HAL_SPI_TransmitReceive+0x2a>
 800a1b4:	f240 417e 	movw	r1, #1150	; 0x47e
 800a1b8:	4884      	ldr	r0, [pc, #528]	; (800a3cc <HAL_SPI_TransmitReceive+0x238>)
 800a1ba:	f7f9 f970 	bl	800349e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d101      	bne.n	800a1cc <HAL_SPI_TransmitReceive+0x38>
 800a1c8:	2302      	movs	r3, #2
 800a1ca:	e18d      	b.n	800a4e8 <HAL_SPI_TransmitReceive+0x354>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1d4:	f7fa fa72 	bl	80046bc <HAL_GetTick>
 800a1d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a1ea:	887b      	ldrh	r3, [r7, #2]
 800a1ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d00f      	beq.n	800a216 <HAL_SPI_TransmitReceive+0x82>
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1fc:	d107      	bne.n	800a20e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d103      	bne.n	800a20e <HAL_SPI_TransmitReceive+0x7a>
 800a206:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a20a:	2b04      	cmp	r3, #4
 800a20c:	d003      	beq.n	800a216 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800a20e:	2302      	movs	r3, #2
 800a210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a214:	e15e      	b.n	800a4d4 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <HAL_SPI_TransmitReceive+0x94>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <HAL_SPI_TransmitReceive+0x94>
 800a222:	887b      	ldrh	r3, [r7, #2]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d103      	bne.n	800a230 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a22e:	e151      	b.n	800a4d4 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a236:	b2db      	uxtb	r3, r3
 800a238:	2b04      	cmp	r3, #4
 800a23a:	d003      	beq.n	800a244 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2205      	movs	r2, #5
 800a240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	887a      	ldrh	r2, [r7, #2]
 800a254:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	887a      	ldrh	r2, [r7, #2]
 800a25a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	887a      	ldrh	r2, [r7, #2]
 800a266:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	887a      	ldrh	r2, [r7, #2]
 800a26c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a284:	2b40      	cmp	r3, #64	; 0x40
 800a286:	d007      	beq.n	800a298 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a296:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2a0:	d178      	bne.n	800a394 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <HAL_SPI_TransmitReceive+0x11c>
 800a2aa:	8b7b      	ldrh	r3, [r7, #26]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d166      	bne.n	800a37e <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	881a      	ldrh	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c0:	1c9a      	adds	r2, r3, #2
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2d4:	e053      	b.n	800a37e <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d11b      	bne.n	800a31c <HAL_SPI_TransmitReceive+0x188>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d016      	beq.n	800a31c <HAL_SPI_TransmitReceive+0x188>
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d113      	bne.n	800a31c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	881a      	ldrh	r2, [r3, #0]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a304:	1c9a      	adds	r2, r3, #2
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3b01      	subs	r3, #1
 800a312:	b29a      	uxth	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f003 0301 	and.w	r3, r3, #1
 800a326:	2b01      	cmp	r3, #1
 800a328:	d119      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x1ca>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	d014      	beq.n	800a35e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	b292      	uxth	r2, r2
 800a340:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a346:	1c9a      	adds	r2, r3, #2
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a350:	b29b      	uxth	r3, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a35a:	2301      	movs	r3, #1
 800a35c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a35e:	f7fa f9ad 	bl	80046bc <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d807      	bhi.n	800a37e <HAL_SPI_TransmitReceive+0x1ea>
 800a36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a374:	d003      	beq.n	800a37e <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a37c:	e0aa      	b.n	800a4d4 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a382:	b29b      	uxth	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1a6      	bne.n	800a2d6 <HAL_SPI_TransmitReceive+0x142>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1a1      	bne.n	800a2d6 <HAL_SPI_TransmitReceive+0x142>
 800a392:	e07f      	b.n	800a494 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <HAL_SPI_TransmitReceive+0x20e>
 800a39c:	8b7b      	ldrh	r3, [r7, #26]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d16e      	bne.n	800a480 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	330c      	adds	r3, #12
 800a3ac:	7812      	ldrb	r2, [r2, #0]
 800a3ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3c8:	e05a      	b.n	800a480 <HAL_SPI_TransmitReceive+0x2ec>
 800a3ca:	bf00      	nop
 800a3cc:	080134a4 	.word	0x080134a4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d11c      	bne.n	800a418 <HAL_SPI_TransmitReceive+0x284>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d017      	beq.n	800a418 <HAL_SPI_TransmitReceive+0x284>
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d114      	bne.n	800a418 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	330c      	adds	r3, #12
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	b29a      	uxth	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b01      	cmp	r3, #1
 800a424:	d119      	bne.n	800a45a <HAL_SPI_TransmitReceive+0x2c6>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d014      	beq.n	800a45a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43a:	b2d2      	uxtb	r2, r2
 800a43c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	b29a      	uxth	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a456:	2301      	movs	r3, #1
 800a458:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a45a:	f7fa f92f 	bl	80046bc <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a466:	429a      	cmp	r2, r3
 800a468:	d803      	bhi.n	800a472 <HAL_SPI_TransmitReceive+0x2de>
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a470:	d102      	bne.n	800a478 <HAL_SPI_TransmitReceive+0x2e4>
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a47e:	e029      	b.n	800a4d4 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1a2      	bne.n	800a3d0 <HAL_SPI_TransmitReceive+0x23c>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b00      	cmp	r3, #0
 800a492:	d19d      	bne.n	800a3d0 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a496:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a498:	68f8      	ldr	r0, [r7, #12]
 800a49a:	f000 f8bf 	bl	800a61c <SPI_EndRxTxTransaction>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d006      	beq.n	800a4b2 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a4b0:	e010      	b.n	800a4d4 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	e000      	b.n	800a4d4 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800a4d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a4e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3730      	adds	r7, #48	; 0x30
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4fe:	b2db      	uxtb	r3, r3
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	603b      	str	r3, [r7, #0]
 800a518:	4613      	mov	r3, r2
 800a51a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a51c:	f7fa f8ce 	bl	80046bc <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	1a9b      	subs	r3, r3, r2
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	4413      	add	r3, r2
 800a52a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a52c:	f7fa f8c6 	bl	80046bc <HAL_GetTick>
 800a530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a532:	4b39      	ldr	r3, [pc, #228]	; (800a618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	015b      	lsls	r3, r3, #5
 800a538:	0d1b      	lsrs	r3, r3, #20
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	fb02 f303 	mul.w	r3, r2, r3
 800a540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a542:	e054      	b.n	800a5ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a54a:	d050      	beq.n	800a5ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a54c:	f7fa f8b6 	bl	80046bc <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d902      	bls.n	800a562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d13d      	bne.n	800a5de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a57a:	d111      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a584:	d004      	beq.n	800a590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a58e:	d107      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a59e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a8:	d10f      	bne.n	800a5ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	e017      	b.n	800a60e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	3b01      	subs	r3, #1
 800a5ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689a      	ldr	r2, [r3, #8]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	bf0c      	ite	eq
 800a5fe:	2301      	moveq	r3, #1
 800a600:	2300      	movne	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d19b      	bne.n	800a544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3720      	adds	r7, #32
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	200000d8 	.word	0x200000d8

0800a61c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af02      	add	r7, sp, #8
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a628:	4b1b      	ldr	r3, [pc, #108]	; (800a698 <SPI_EndRxTxTransaction+0x7c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a1b      	ldr	r2, [pc, #108]	; (800a69c <SPI_EndRxTxTransaction+0x80>)
 800a62e:	fba2 2303 	umull	r2, r3, r2, r3
 800a632:	0d5b      	lsrs	r3, r3, #21
 800a634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a638:	fb02 f303 	mul.w	r3, r2, r3
 800a63c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a646:	d112      	bne.n	800a66e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2200      	movs	r2, #0
 800a650:	2180      	movs	r1, #128	; 0x80
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff ff5a 	bl	800a50c <SPI_WaitFlagStateUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d016      	beq.n	800a68c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a662:	f043 0220 	orr.w	r2, r3, #32
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e00f      	b.n	800a68e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	3b01      	subs	r3, #1
 800a678:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a684:	2b80      	cmp	r3, #128	; 0x80
 800a686:	d0f2      	beq.n	800a66e <SPI_EndRxTxTransaction+0x52>
 800a688:	e000      	b.n	800a68c <SPI_EndRxTxTransaction+0x70>
        break;
 800a68a:	bf00      	nop
  }

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	200000d8 	.word	0x200000d8
 800a69c:	165e9f81 	.word	0x165e9f81

0800a6a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d101      	bne.n	800a6b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e0a7      	b.n	800a802 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a55      	ldr	r2, [pc, #340]	; (800a80c <HAL_TIM_Base_Init+0x16c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d027      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c4:	d022      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a51      	ldr	r2, [pc, #324]	; (800a810 <HAL_TIM_Base_Init+0x170>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d01d      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a4f      	ldr	r2, [pc, #316]	; (800a814 <HAL_TIM_Base_Init+0x174>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d018      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a4e      	ldr	r2, [pc, #312]	; (800a818 <HAL_TIM_Base_Init+0x178>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d013      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a4c      	ldr	r2, [pc, #304]	; (800a81c <HAL_TIM_Base_Init+0x17c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00e      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a4b      	ldr	r2, [pc, #300]	; (800a820 <HAL_TIM_Base_Init+0x180>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d009      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a49      	ldr	r2, [pc, #292]	; (800a824 <HAL_TIM_Base_Init+0x184>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d004      	beq.n	800a70c <HAL_TIM_Base_Init+0x6c>
 800a702:	f240 1113 	movw	r1, #275	; 0x113
 800a706:	4848      	ldr	r0, [pc, #288]	; (800a828 <HAL_TIM_Base_Init+0x188>)
 800a708:	f7f8 fec9 	bl	800349e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d014      	beq.n	800a73e <HAL_TIM_Base_Init+0x9e>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d010      	beq.n	800a73e <HAL_TIM_Base_Init+0x9e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	2b20      	cmp	r3, #32
 800a722:	d00c      	beq.n	800a73e <HAL_TIM_Base_Init+0x9e>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	2b40      	cmp	r3, #64	; 0x40
 800a72a:	d008      	beq.n	800a73e <HAL_TIM_Base_Init+0x9e>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	2b60      	cmp	r3, #96	; 0x60
 800a732:	d004      	beq.n	800a73e <HAL_TIM_Base_Init+0x9e>
 800a734:	f44f 718a 	mov.w	r1, #276	; 0x114
 800a738:	483b      	ldr	r0, [pc, #236]	; (800a828 <HAL_TIM_Base_Init+0x188>)
 800a73a:	f7f8 feb0 	bl	800349e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00e      	beq.n	800a764 <HAL_TIM_Base_Init+0xc4>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a74e:	d009      	beq.n	800a764 <HAL_TIM_Base_Init+0xc4>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a758:	d004      	beq.n	800a764 <HAL_TIM_Base_Init+0xc4>
 800a75a:	f240 1115 	movw	r1, #277	; 0x115
 800a75e:	4832      	ldr	r0, [pc, #200]	; (800a828 <HAL_TIM_Base_Init+0x188>)
 800a760:	f7f8 fe9d 	bl	800349e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <HAL_TIM_Base_Init+0xde>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	2b80      	cmp	r3, #128	; 0x80
 800a772:	d004      	beq.n	800a77e <HAL_TIM_Base_Init+0xde>
 800a774:	f44f 718b 	mov.w	r1, #278	; 0x116
 800a778:	482b      	ldr	r0, [pc, #172]	; (800a828 <HAL_TIM_Base_Init+0x188>)
 800a77a:	f7f8 fe90 	bl	800349e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d106      	bne.n	800a798 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7f9 fe26 	bl	80043e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2202      	movs	r2, #2
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f001 fe9a 	bl	800c4e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	40010000 	.word	0x40010000
 800a810:	40000400 	.word	0x40000400
 800a814:	40000800 	.word	0x40000800
 800a818:	40000c00 	.word	0x40000c00
 800a81c:	40014000 	.word	0x40014000
 800a820:	40014400 	.word	0x40014400
 800a824:	40014800 	.word	0x40014800
 800a828:	080134dc 	.word	0x080134dc

0800a82c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a25      	ldr	r2, [pc, #148]	; (800a8d0 <HAL_TIM_Base_Stop+0xa4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d027      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a846:	d022      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a21      	ldr	r2, [pc, #132]	; (800a8d4 <HAL_TIM_Base_Stop+0xa8>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d01d      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a20      	ldr	r2, [pc, #128]	; (800a8d8 <HAL_TIM_Base_Stop+0xac>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d018      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a1e      	ldr	r2, [pc, #120]	; (800a8dc <HAL_TIM_Base_Stop+0xb0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d013      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a1d      	ldr	r2, [pc, #116]	; (800a8e0 <HAL_TIM_Base_Stop+0xb4>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00e      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a1b      	ldr	r2, [pc, #108]	; (800a8e4 <HAL_TIM_Base_Stop+0xb8>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d009      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a1a      	ldr	r2, [pc, #104]	; (800a8e8 <HAL_TIM_Base_Stop+0xbc>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d004      	beq.n	800a88e <HAL_TIM_Base_Stop+0x62>
 800a884:	f240 11b9 	movw	r1, #441	; 0x1b9
 800a888:	4818      	ldr	r0, [pc, #96]	; (800a8ec <HAL_TIM_Base_Stop+0xc0>)
 800a88a:	f7f8 fe08 	bl	800349e <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6a1a      	ldr	r2, [r3, #32]
 800a894:	f241 1311 	movw	r3, #4369	; 0x1111
 800a898:	4013      	ands	r3, r2
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10f      	bne.n	800a8be <HAL_TIM_Base_Stop+0x92>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6a1a      	ldr	r2, [r3, #32]
 800a8a4:	f240 4344 	movw	r3, #1092	; 0x444
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d107      	bne.n	800a8be <HAL_TIM_Base_Stop+0x92>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 0201 	bic.w	r2, r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	40010000 	.word	0x40010000
 800a8d4:	40000400 	.word	0x40000400
 800a8d8:	40000800 	.word	0x40000800
 800a8dc:	40000c00 	.word	0x40000c00
 800a8e0:	40014000 	.word	0x40014000
 800a8e4:	40014400 	.word	0x40014400
 800a8e8:	40014800 	.word	0x40014800
 800a8ec:	080134dc 	.word	0x080134dc

0800a8f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a3d      	ldr	r2, [pc, #244]	; (800a9f4 <HAL_TIM_Base_Start_IT+0x104>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d027      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90a:	d022      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a39      	ldr	r2, [pc, #228]	; (800a9f8 <HAL_TIM_Base_Start_IT+0x108>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d01d      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a38      	ldr	r2, [pc, #224]	; (800a9fc <HAL_TIM_Base_Start_IT+0x10c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d018      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a36      	ldr	r2, [pc, #216]	; (800aa00 <HAL_TIM_Base_Start_IT+0x110>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d013      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a35      	ldr	r2, [pc, #212]	; (800aa04 <HAL_TIM_Base_Start_IT+0x114>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d00e      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a33      	ldr	r2, [pc, #204]	; (800aa08 <HAL_TIM_Base_Start_IT+0x118>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d009      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a32      	ldr	r2, [pc, #200]	; (800aa0c <HAL_TIM_Base_Start_IT+0x11c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d004      	beq.n	800a952 <HAL_TIM_Base_Start_IT+0x62>
 800a948:	f240 11cf 	movw	r1, #463	; 0x1cf
 800a94c:	4830      	ldr	r0, [pc, #192]	; (800aa10 <HAL_TIM_Base_Start_IT+0x120>)
 800a94e:	f7f8 fda6 	bl	800349e <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d001      	beq.n	800a962 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e044      	b.n	800a9ec <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2202      	movs	r2, #2
 800a966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f042 0201 	orr.w	r2, r2, #1
 800a978:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a1d      	ldr	r2, [pc, #116]	; (800a9f4 <HAL_TIM_Base_Start_IT+0x104>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d018      	beq.n	800a9b6 <HAL_TIM_Base_Start_IT+0xc6>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a98c:	d013      	beq.n	800a9b6 <HAL_TIM_Base_Start_IT+0xc6>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a19      	ldr	r2, [pc, #100]	; (800a9f8 <HAL_TIM_Base_Start_IT+0x108>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d00e      	beq.n	800a9b6 <HAL_TIM_Base_Start_IT+0xc6>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a17      	ldr	r2, [pc, #92]	; (800a9fc <HAL_TIM_Base_Start_IT+0x10c>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d009      	beq.n	800a9b6 <HAL_TIM_Base_Start_IT+0xc6>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a16      	ldr	r2, [pc, #88]	; (800aa00 <HAL_TIM_Base_Start_IT+0x110>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d004      	beq.n	800a9b6 <HAL_TIM_Base_Start_IT+0xc6>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a14      	ldr	r2, [pc, #80]	; (800aa04 <HAL_TIM_Base_Start_IT+0x114>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d111      	bne.n	800a9da <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f003 0307 	and.w	r3, r3, #7
 800a9c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b06      	cmp	r3, #6
 800a9c6:	d010      	beq.n	800a9ea <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f042 0201 	orr.w	r2, r2, #1
 800a9d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9d8:	e007      	b.n	800a9ea <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f042 0201 	orr.w	r2, r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40000400 	.word	0x40000400
 800a9fc:	40000800 	.word	0x40000800
 800aa00:	40000c00 	.word	0x40000c00
 800aa04:	40014000 	.word	0x40014000
 800aa08:	40014400 	.word	0x40014400
 800aa0c:	40014800 	.word	0x40014800
 800aa10:	080134dc 	.word	0x080134dc

0800aa14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d101      	bne.n	800aa26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e0a7      	b.n	800ab76 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a55      	ldr	r2, [pc, #340]	; (800ab80 <HAL_TIM_PWM_Init+0x16c>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d027      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa38:	d022      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a51      	ldr	r2, [pc, #324]	; (800ab84 <HAL_TIM_PWM_Init+0x170>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d01d      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a4f      	ldr	r2, [pc, #316]	; (800ab88 <HAL_TIM_PWM_Init+0x174>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d018      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a4e      	ldr	r2, [pc, #312]	; (800ab8c <HAL_TIM_PWM_Init+0x178>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d013      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a4c      	ldr	r2, [pc, #304]	; (800ab90 <HAL_TIM_PWM_Init+0x17c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00e      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a4b      	ldr	r2, [pc, #300]	; (800ab94 <HAL_TIM_PWM_Init+0x180>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d009      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a49      	ldr	r2, [pc, #292]	; (800ab98 <HAL_TIM_PWM_Init+0x184>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <HAL_TIM_PWM_Init+0x6c>
 800aa76:	f240 5129 	movw	r1, #1321	; 0x529
 800aa7a:	4848      	ldr	r0, [pc, #288]	; (800ab9c <HAL_TIM_PWM_Init+0x188>)
 800aa7c:	f7f8 fd0f 	bl	800349e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d014      	beq.n	800aab2 <HAL_TIM_PWM_Init+0x9e>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	2b10      	cmp	r3, #16
 800aa8e:	d010      	beq.n	800aab2 <HAL_TIM_PWM_Init+0x9e>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	d00c      	beq.n	800aab2 <HAL_TIM_PWM_Init+0x9e>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	2b40      	cmp	r3, #64	; 0x40
 800aa9e:	d008      	beq.n	800aab2 <HAL_TIM_PWM_Init+0x9e>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	2b60      	cmp	r3, #96	; 0x60
 800aaa6:	d004      	beq.n	800aab2 <HAL_TIM_PWM_Init+0x9e>
 800aaa8:	f240 512a 	movw	r1, #1322	; 0x52a
 800aaac:	483b      	ldr	r0, [pc, #236]	; (800ab9c <HAL_TIM_PWM_Init+0x188>)
 800aaae:	f7f8 fcf6 	bl	800349e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00e      	beq.n	800aad8 <HAL_TIM_PWM_Init+0xc4>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac2:	d009      	beq.n	800aad8 <HAL_TIM_PWM_Init+0xc4>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aacc:	d004      	beq.n	800aad8 <HAL_TIM_PWM_Init+0xc4>
 800aace:	f240 512b 	movw	r1, #1323	; 0x52b
 800aad2:	4832      	ldr	r0, [pc, #200]	; (800ab9c <HAL_TIM_PWM_Init+0x188>)
 800aad4:	f7f8 fce3 	bl	800349e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d008      	beq.n	800aaf2 <HAL_TIM_PWM_Init+0xde>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	2b80      	cmp	r3, #128	; 0x80
 800aae6:	d004      	beq.n	800aaf2 <HAL_TIM_PWM_Init+0xde>
 800aae8:	f240 512c 	movw	r1, #1324	; 0x52c
 800aaec:	482b      	ldr	r0, [pc, #172]	; (800ab9c <HAL_TIM_PWM_Init+0x188>)
 800aaee:	f7f8 fcd6 	bl	800349e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d106      	bne.n	800ab0c <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f84a 	bl	800aba0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	4610      	mov	r0, r2
 800ab20:	f001 fce0 	bl	800c4e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	40010000 	.word	0x40010000
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800
 800ab8c:	40000c00 	.word	0x40000c00
 800ab90:	40014000 	.word	0x40014000
 800ab94:	40014400 	.word	0x40014400
 800ab98:	40014800 	.word	0x40014800
 800ab9c:	080134dc 	.word	0x080134dc

0800aba0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	607a      	str	r2, [r7, #4]
 800abc0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800abc2:	2300      	movs	r3, #0
 800abc4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a9e      	ldr	r2, [pc, #632]	; (800ae44 <HAL_TIM_PWM_Start_DMA+0x290>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d10b      	bne.n	800abe8 <HAL_TIM_PWM_Start_DMA+0x34>
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d06c      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d069      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d066      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2b0c      	cmp	r3, #12
 800abe6:	d063      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf0:	d10b      	bne.n	800ac0a <HAL_TIM_PWM_Start_DMA+0x56>
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d05b      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d058      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d055      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b0c      	cmp	r3, #12
 800ac08:	d052      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a8e      	ldr	r2, [pc, #568]	; (800ae48 <HAL_TIM_PWM_Start_DMA+0x294>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d10b      	bne.n	800ac2c <HAL_TIM_PWM_Start_DMA+0x78>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d04a      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	2b04      	cmp	r3, #4
 800ac1e:	d047      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b08      	cmp	r3, #8
 800ac24:	d044      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b0c      	cmp	r3, #12
 800ac2a:	d041      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a86      	ldr	r2, [pc, #536]	; (800ae4c <HAL_TIM_PWM_Start_DMA+0x298>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d10b      	bne.n	800ac4e <HAL_TIM_PWM_Start_DMA+0x9a>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d039      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b04      	cmp	r3, #4
 800ac40:	d036      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b08      	cmp	r3, #8
 800ac46:	d033      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b0c      	cmp	r3, #12
 800ac4c:	d030      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a7f      	ldr	r2, [pc, #508]	; (800ae50 <HAL_TIM_PWM_Start_DMA+0x29c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d10b      	bne.n	800ac70 <HAL_TIM_PWM_Start_DMA+0xbc>
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d028      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d025      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2b08      	cmp	r3, #8
 800ac68:	d022      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b0c      	cmp	r3, #12
 800ac6e:	d01f      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a77      	ldr	r2, [pc, #476]	; (800ae54 <HAL_TIM_PWM_Start_DMA+0x2a0>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d105      	bne.n	800ac86 <HAL_TIM_PWM_Start_DMA+0xd2>
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d017      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	d014      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a73      	ldr	r2, [pc, #460]	; (800ae58 <HAL_TIM_PWM_Start_DMA+0x2a4>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d102      	bne.n	800ac96 <HAL_TIM_PWM_Start_DMA+0xe2>
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00c      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a70      	ldr	r2, [pc, #448]	; (800ae5c <HAL_TIM_PWM_Start_DMA+0x2a8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d102      	bne.n	800aca6 <HAL_TIM_PWM_Start_DMA+0xf2>
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800aca6:	f240 61b3 	movw	r1, #1715	; 0x6b3
 800acaa:	486d      	ldr	r0, [pc, #436]	; (800ae60 <HAL_TIM_PWM_Start_DMA+0x2ac>)
 800acac:	f7f8 fbf7 	bl	800349e <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d109      	bne.n	800acca <HAL_TIM_PWM_Start_DMA+0x116>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	bf0c      	ite	eq
 800acc2:	2301      	moveq	r3, #1
 800acc4:	2300      	movne	r3, #0
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	e022      	b.n	800ad10 <HAL_TIM_PWM_Start_DMA+0x15c>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b04      	cmp	r3, #4
 800acce:	d109      	bne.n	800ace4 <HAL_TIM_PWM_Start_DMA+0x130>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b02      	cmp	r3, #2
 800acda:	bf0c      	ite	eq
 800acdc:	2301      	moveq	r3, #1
 800acde:	2300      	movne	r3, #0
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	e015      	b.n	800ad10 <HAL_TIM_PWM_Start_DMA+0x15c>
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b08      	cmp	r3, #8
 800ace8:	d109      	bne.n	800acfe <HAL_TIM_PWM_Start_DMA+0x14a>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	bf0c      	ite	eq
 800acf6:	2301      	moveq	r3, #1
 800acf8:	2300      	movne	r3, #0
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	e008      	b.n	800ad10 <HAL_TIM_PWM_Start_DMA+0x15c>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	bf0c      	ite	eq
 800ad0a:	2301      	moveq	r3, #1
 800ad0c:	2300      	movne	r3, #0
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d001      	beq.n	800ad18 <HAL_TIM_PWM_Start_DMA+0x164>
  {
    return HAL_BUSY;
 800ad14:	2302      	movs	r3, #2
 800ad16:	e173      	b.n	800b000 <HAL_TIM_PWM_Start_DMA+0x44c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d109      	bne.n	800ad32 <HAL_TIM_PWM_Start_DMA+0x17e>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	bf0c      	ite	eq
 800ad2a:	2301      	moveq	r3, #1
 800ad2c:	2300      	movne	r3, #0
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	e022      	b.n	800ad78 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b04      	cmp	r3, #4
 800ad36:	d109      	bne.n	800ad4c <HAL_TIM_PWM_Start_DMA+0x198>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	bf0c      	ite	eq
 800ad44:	2301      	moveq	r3, #1
 800ad46:	2300      	movne	r3, #0
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	e015      	b.n	800ad78 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b08      	cmp	r3, #8
 800ad50:	d109      	bne.n	800ad66 <HAL_TIM_PWM_Start_DMA+0x1b2>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	bf0c      	ite	eq
 800ad5e:	2301      	moveq	r3, #1
 800ad60:	2300      	movne	r3, #0
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	e008      	b.n	800ad78 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	bf0c      	ite	eq
 800ad72:	2301      	moveq	r3, #1
 800ad74:	2300      	movne	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d024      	beq.n	800adc6 <HAL_TIM_PWM_Start_DMA+0x212>
  {
    if ((pData == NULL) && (Length > 0U))
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d104      	bne.n	800ad8c <HAL_TIM_PWM_Start_DMA+0x1d8>
 800ad82:	887b      	ldrh	r3, [r7, #2]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <HAL_TIM_PWM_Start_DMA+0x1d8>
    {
      return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e139      	b.n	800b000 <HAL_TIM_PWM_Start_DMA+0x44c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d104      	bne.n	800ad9c <HAL_TIM_PWM_Start_DMA+0x1e8>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2202      	movs	r2, #2
 800ad96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad9a:	e016      	b.n	800adca <HAL_TIM_PWM_Start_DMA+0x216>
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	d104      	bne.n	800adac <HAL_TIM_PWM_Start_DMA+0x1f8>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2202      	movs	r2, #2
 800ada6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adaa:	e00e      	b.n	800adca <HAL_TIM_PWM_Start_DMA+0x216>
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d104      	bne.n	800adbc <HAL_TIM_PWM_Start_DMA+0x208>
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2202      	movs	r2, #2
 800adb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adba:	e006      	b.n	800adca <HAL_TIM_PWM_Start_DMA+0x216>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2202      	movs	r2, #2
 800adc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800adc4:	e001      	b.n	800adca <HAL_TIM_PWM_Start_DMA+0x216>
    }
  }
  else
  {
    return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e11a      	b.n	800b000 <HAL_TIM_PWM_Start_DMA+0x44c>
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2b0c      	cmp	r3, #12
 800adce:	f200 80c4 	bhi.w	800af5a <HAL_TIM_PWM_Start_DMA+0x3a6>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <HAL_TIM_PWM_Start_DMA+0x224>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ae0d 	.word	0x0800ae0d
 800addc:	0800af5b 	.word	0x0800af5b
 800ade0:	0800af5b 	.word	0x0800af5b
 800ade4:	0800af5b 	.word	0x0800af5b
 800ade8:	0800ae83 	.word	0x0800ae83
 800adec:	0800af5b 	.word	0x0800af5b
 800adf0:	0800af5b 	.word	0x0800af5b
 800adf4:	0800af5b 	.word	0x0800af5b
 800adf8:	0800aecb 	.word	0x0800aecb
 800adfc:	0800af5b 	.word	0x0800af5b
 800ae00:	0800af5b 	.word	0x0800af5b
 800ae04:	0800af5b 	.word	0x0800af5b
 800ae08:	0800af13 	.word	0x0800af13
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae10:	4a14      	ldr	r2, [pc, #80]	; (800ae64 <HAL_TIM_PWM_Start_DMA+0x2b0>)
 800ae12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	4a13      	ldr	r2, [pc, #76]	; (800ae68 <HAL_TIM_PWM_Start_DMA+0x2b4>)
 800ae1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae20:	4a12      	ldr	r2, [pc, #72]	; (800ae6c <HAL_TIM_PWM_Start_DMA+0x2b8>)
 800ae22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3334      	adds	r3, #52	; 0x34
 800ae30:	461a      	mov	r2, r3
 800ae32:	887b      	ldrh	r3, [r7, #2]
 800ae34:	f7fa fbac 	bl	8005590 <HAL_DMA_Start_IT>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d018      	beq.n	800ae70 <HAL_TIM_PWM_Start_DMA+0x2bc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e0de      	b.n	800b000 <HAL_TIM_PWM_Start_DMA+0x44c>
 800ae42:	bf00      	nop
 800ae44:	40010000 	.word	0x40010000
 800ae48:	40000400 	.word	0x40000400
 800ae4c:	40000800 	.word	0x40000800
 800ae50:	40000c00 	.word	0x40000c00
 800ae54:	40014000 	.word	0x40014000
 800ae58:	40014400 	.word	0x40014400
 800ae5c:	40014800 	.word	0x40014800
 800ae60:	080134dc 	.word	0x080134dc
 800ae64:	0800c3d3 	.word	0x0800c3d3
 800ae68:	0800c47b 	.word	0x0800c47b
 800ae6c:	0800c341 	.word	0x0800c341
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68da      	ldr	r2, [r3, #12]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae7e:	60da      	str	r2, [r3, #12]
      break;
 800ae80:	e06e      	b.n	800af60 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae86:	4a60      	ldr	r2, [pc, #384]	; (800b008 <HAL_TIM_PWM_Start_DMA+0x454>)
 800ae88:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae8e:	4a5f      	ldr	r2, [pc, #380]	; (800b00c <HAL_TIM_PWM_Start_DMA+0x458>)
 800ae90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae96:	4a5e      	ldr	r2, [pc, #376]	; (800b010 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800ae98:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3338      	adds	r3, #56	; 0x38
 800aea6:	461a      	mov	r2, r3
 800aea8:	887b      	ldrh	r3, [r7, #2]
 800aeaa:	f7fa fb71 	bl	8005590 <HAL_DMA_Start_IT>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <HAL_TIM_PWM_Start_DMA+0x304>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e0a3      	b.n	800b000 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aec6:	60da      	str	r2, [r3, #12]
      break;
 800aec8:	e04a      	b.n	800af60 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aece:	4a4e      	ldr	r2, [pc, #312]	; (800b008 <HAL_TIM_PWM_Start_DMA+0x454>)
 800aed0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed6:	4a4d      	ldr	r2, [pc, #308]	; (800b00c <HAL_TIM_PWM_Start_DMA+0x458>)
 800aed8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aede:	4a4c      	ldr	r2, [pc, #304]	; (800b010 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800aee0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	333c      	adds	r3, #60	; 0x3c
 800aeee:	461a      	mov	r2, r3
 800aef0:	887b      	ldrh	r3, [r7, #2]
 800aef2:	f7fa fb4d 	bl	8005590 <HAL_DMA_Start_IT>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d001      	beq.n	800af00 <HAL_TIM_PWM_Start_DMA+0x34c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e07f      	b.n	800b000 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68da      	ldr	r2, [r3, #12]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af0e:	60da      	str	r2, [r3, #12]
      break;
 800af10:	e026      	b.n	800af60 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af16:	4a3c      	ldr	r2, [pc, #240]	; (800b008 <HAL_TIM_PWM_Start_DMA+0x454>)
 800af18:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af1e:	4a3b      	ldr	r2, [pc, #236]	; (800b00c <HAL_TIM_PWM_Start_DMA+0x458>)
 800af20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af26:	4a3a      	ldr	r2, [pc, #232]	; (800b010 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800af28:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3340      	adds	r3, #64	; 0x40
 800af36:	461a      	mov	r2, r3
 800af38:	887b      	ldrh	r3, [r7, #2]
 800af3a:	f7fa fb29 	bl	8005590 <HAL_DMA_Start_IT>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <HAL_TIM_PWM_Start_DMA+0x394>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e05b      	b.n	800b000 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	68da      	ldr	r2, [r3, #12]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800af56:	60da      	str	r2, [r3, #12]
      break;
 800af58:	e002      	b.n	800af60 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    default:
      status = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	75fb      	strb	r3, [r7, #23]
      break;
 800af5e:	bf00      	nop
  }

  if (status == HAL_OK)
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d14b      	bne.n	800affe <HAL_TIM_PWM_Start_DMA+0x44a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2201      	movs	r2, #1
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 ff06 	bl	800cd80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a26      	ldr	r2, [pc, #152]	; (800b014 <HAL_TIM_PWM_Start_DMA+0x460>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d107      	bne.n	800af8e <HAL_TIM_PWM_Start_DMA+0x3da>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a20      	ldr	r2, [pc, #128]	; (800b014 <HAL_TIM_PWM_Start_DMA+0x460>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d018      	beq.n	800afca <HAL_TIM_PWM_Start_DMA+0x416>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa0:	d013      	beq.n	800afca <HAL_TIM_PWM_Start_DMA+0x416>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a1c      	ldr	r2, [pc, #112]	; (800b018 <HAL_TIM_PWM_Start_DMA+0x464>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d00e      	beq.n	800afca <HAL_TIM_PWM_Start_DMA+0x416>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a1a      	ldr	r2, [pc, #104]	; (800b01c <HAL_TIM_PWM_Start_DMA+0x468>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d009      	beq.n	800afca <HAL_TIM_PWM_Start_DMA+0x416>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a19      	ldr	r2, [pc, #100]	; (800b020 <HAL_TIM_PWM_Start_DMA+0x46c>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d004      	beq.n	800afca <HAL_TIM_PWM_Start_DMA+0x416>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a17      	ldr	r2, [pc, #92]	; (800b024 <HAL_TIM_PWM_Start_DMA+0x470>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d111      	bne.n	800afee <HAL_TIM_PWM_Start_DMA+0x43a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 0307 	and.w	r3, r3, #7
 800afd4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2b06      	cmp	r3, #6
 800afda:	d010      	beq.n	800affe <HAL_TIM_PWM_Start_DMA+0x44a>
      {
        __HAL_TIM_ENABLE(htim);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f042 0201 	orr.w	r2, r2, #1
 800afea:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afec:	e007      	b.n	800affe <HAL_TIM_PWM_Start_DMA+0x44a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f042 0201 	orr.w	r2, r2, #1
 800affc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3718      	adds	r7, #24
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	0800c3d3 	.word	0x0800c3d3
 800b00c:	0800c47b 	.word	0x0800c47b
 800b010:	0800c341 	.word	0x0800c341
 800b014:	40010000 	.word	0x40010000
 800b018:	40000400 	.word	0x40000400
 800b01c:	40000800 	.word	0x40000800
 800b020:	40000c00 	.word	0x40000c00
 800b024:	40014000 	.word	0x40014000

0800b028 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a97      	ldr	r2, [pc, #604]	; (800b298 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d10b      	bne.n	800b058 <HAL_TIM_PWM_Stop_DMA+0x30>
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d06c      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d069      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2b08      	cmp	r3, #8
 800b050:	d066      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	2b0c      	cmp	r3, #12
 800b056:	d063      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b060:	d10b      	bne.n	800b07a <HAL_TIM_PWM_Stop_DMA+0x52>
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d05b      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b04      	cmp	r3, #4
 800b06c:	d058      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b08      	cmp	r3, #8
 800b072:	d055      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b0c      	cmp	r3, #12
 800b078:	d052      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a87      	ldr	r2, [pc, #540]	; (800b29c <HAL_TIM_PWM_Stop_DMA+0x274>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d10b      	bne.n	800b09c <HAL_TIM_PWM_Stop_DMA+0x74>
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d04a      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	2b04      	cmp	r3, #4
 800b08e:	d047      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	2b08      	cmp	r3, #8
 800b094:	d044      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b0c      	cmp	r3, #12
 800b09a:	d041      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a7f      	ldr	r2, [pc, #508]	; (800b2a0 <HAL_TIM_PWM_Stop_DMA+0x278>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d10b      	bne.n	800b0be <HAL_TIM_PWM_Stop_DMA+0x96>
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d039      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2b04      	cmp	r3, #4
 800b0b0:	d036      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b08      	cmp	r3, #8
 800b0b6:	d033      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	2b0c      	cmp	r3, #12
 800b0bc:	d030      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a78      	ldr	r2, [pc, #480]	; (800b2a4 <HAL_TIM_PWM_Stop_DMA+0x27c>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d10b      	bne.n	800b0e0 <HAL_TIM_PWM_Stop_DMA+0xb8>
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d028      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d025      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b08      	cmp	r3, #8
 800b0d8:	d022      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b0c      	cmp	r3, #12
 800b0de:	d01f      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a70      	ldr	r2, [pc, #448]	; (800b2a8 <HAL_TIM_PWM_Stop_DMA+0x280>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d105      	bne.n	800b0f6 <HAL_TIM_PWM_Stop_DMA+0xce>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d017      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d014      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a6c      	ldr	r2, [pc, #432]	; (800b2ac <HAL_TIM_PWM_Stop_DMA+0x284>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d102      	bne.n	800b106 <HAL_TIM_PWM_Stop_DMA+0xde>
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00c      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a69      	ldr	r2, [pc, #420]	; (800b2b0 <HAL_TIM_PWM_Stop_DMA+0x288>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d102      	bne.n	800b116 <HAL_TIM_PWM_Stop_DMA+0xee>
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d004      	beq.n	800b120 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b116:	f240 7154 	movw	r1, #1876	; 0x754
 800b11a:	4866      	ldr	r0, [pc, #408]	; (800b2b4 <HAL_TIM_PWM_Stop_DMA+0x28c>)
 800b11c:	f7f8 f9bf 	bl	800349e <assert_failed>
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	2b0c      	cmp	r3, #12
 800b124:	d854      	bhi.n	800b1d0 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b126:	a201      	add	r2, pc, #4	; (adr r2, 800b12c <HAL_TIM_PWM_Stop_DMA+0x104>)
 800b128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12c:	0800b161 	.word	0x0800b161
 800b130:	0800b1d1 	.word	0x0800b1d1
 800b134:	0800b1d1 	.word	0x0800b1d1
 800b138:	0800b1d1 	.word	0x0800b1d1
 800b13c:	0800b17d 	.word	0x0800b17d
 800b140:	0800b1d1 	.word	0x0800b1d1
 800b144:	0800b1d1 	.word	0x0800b1d1
 800b148:	0800b1d1 	.word	0x0800b1d1
 800b14c:	0800b199 	.word	0x0800b199
 800b150:	0800b1d1 	.word	0x0800b1d1
 800b154:	0800b1d1 	.word	0x0800b1d1
 800b158:	0800b1d1 	.word	0x0800b1d1
 800b15c:	0800b1b5 	.word	0x0800b1b5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b16e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	4618      	mov	r0, r3
 800b176:	f7fa fa71 	bl	800565c <HAL_DMA_Abort_IT>
      break;
 800b17a:	e02c      	b.n	800b1d6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68da      	ldr	r2, [r3, #12]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b18a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b190:	4618      	mov	r0, r3
 800b192:	f7fa fa63 	bl	800565c <HAL_DMA_Abort_IT>
      break;
 800b196:	e01e      	b.n	800b1d6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68da      	ldr	r2, [r3, #12]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fa fa55 	bl	800565c <HAL_DMA_Abort_IT>
      break;
 800b1b2:	e010      	b.n	800b1d6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68da      	ldr	r2, [r3, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b1c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fa fa47 	bl	800565c <HAL_DMA_Abort_IT>
      break;
 800b1ce:	e002      	b.n	800b1d6 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    default:
      status = HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d4:	bf00      	nop
  }

  if (status == HAL_OK)
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d157      	bne.n	800b28c <HAL_TIM_PWM_Stop_DMA+0x264>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	6839      	ldr	r1, [r7, #0]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f001 fdcb 	bl	800cd80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a2a      	ldr	r2, [pc, #168]	; (800b298 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d117      	bne.n	800b224 <HAL_TIM_PWM_Stop_DMA+0x1fc>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	6a1a      	ldr	r2, [r3, #32]
 800b1fa:	f241 1311 	movw	r3, #4369	; 0x1111
 800b1fe:	4013      	ands	r3, r2
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10f      	bne.n	800b224 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6a1a      	ldr	r2, [r3, #32]
 800b20a:	f240 4344 	movw	r3, #1092	; 0x444
 800b20e:	4013      	ands	r3, r2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d107      	bne.n	800b224 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b222:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6a1a      	ldr	r2, [r3, #32]
 800b22a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10f      	bne.n	800b254 <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6a1a      	ldr	r2, [r3, #32]
 800b23a:	f240 4344 	movw	r3, #1092	; 0x444
 800b23e:	4013      	ands	r3, r2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d107      	bne.n	800b254 <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f022 0201 	bic.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d104      	bne.n	800b264 <HAL_TIM_PWM_Stop_DMA+0x23c>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b262:	e013      	b.n	800b28c <HAL_TIM_PWM_Stop_DMA+0x264>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	2b04      	cmp	r3, #4
 800b268:	d104      	bne.n	800b274 <HAL_TIM_PWM_Stop_DMA+0x24c>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b272:	e00b      	b.n	800b28c <HAL_TIM_PWM_Stop_DMA+0x264>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b08      	cmp	r3, #8
 800b278:	d104      	bne.n	800b284 <HAL_TIM_PWM_Stop_DMA+0x25c>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b282:	e003      	b.n	800b28c <HAL_TIM_PWM_Stop_DMA+0x264>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	40010000 	.word	0x40010000
 800b29c:	40000400 	.word	0x40000400
 800b2a0:	40000800 	.word	0x40000800
 800b2a4:	40000c00 	.word	0x40000c00
 800b2a8:	40014000 	.word	0x40014000
 800b2ac:	40014400 	.word	0x40014400
 800b2b0:	40014800 	.word	0x40014800
 800b2b4:	080134dc 	.word	0x080134dc

0800b2b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e0a7      	b.n	800b41a <HAL_TIM_IC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a55      	ldr	r2, [pc, #340]	; (800b424 <HAL_TIM_IC_Init+0x16c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d027      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2dc:	d022      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a51      	ldr	r2, [pc, #324]	; (800b428 <HAL_TIM_IC_Init+0x170>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d01d      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a4f      	ldr	r2, [pc, #316]	; (800b42c <HAL_TIM_IC_Init+0x174>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d018      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a4e      	ldr	r2, [pc, #312]	; (800b430 <HAL_TIM_IC_Init+0x178>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d013      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a4c      	ldr	r2, [pc, #304]	; (800b434 <HAL_TIM_IC_Init+0x17c>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d00e      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a4b      	ldr	r2, [pc, #300]	; (800b438 <HAL_TIM_IC_Init+0x180>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d009      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a49      	ldr	r2, [pc, #292]	; (800b43c <HAL_TIM_IC_Init+0x184>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d004      	beq.n	800b324 <HAL_TIM_IC_Init+0x6c>
 800b31a:	f240 71bf 	movw	r1, #1983	; 0x7bf
 800b31e:	4848      	ldr	r0, [pc, #288]	; (800b440 <HAL_TIM_IC_Init+0x188>)
 800b320:	f7f8 f8bd 	bl	800349e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d014      	beq.n	800b356 <HAL_TIM_IC_Init+0x9e>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	2b10      	cmp	r3, #16
 800b332:	d010      	beq.n	800b356 <HAL_TIM_IC_Init+0x9e>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	2b20      	cmp	r3, #32
 800b33a:	d00c      	beq.n	800b356 <HAL_TIM_IC_Init+0x9e>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	2b40      	cmp	r3, #64	; 0x40
 800b342:	d008      	beq.n	800b356 <HAL_TIM_IC_Init+0x9e>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	2b60      	cmp	r3, #96	; 0x60
 800b34a:	d004      	beq.n	800b356 <HAL_TIM_IC_Init+0x9e>
 800b34c:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 800b350:	483b      	ldr	r0, [pc, #236]	; (800b440 <HAL_TIM_IC_Init+0x188>)
 800b352:	f7f8 f8a4 	bl	800349e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00e      	beq.n	800b37c <HAL_TIM_IC_Init+0xc4>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b366:	d009      	beq.n	800b37c <HAL_TIM_IC_Init+0xc4>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b370:	d004      	beq.n	800b37c <HAL_TIM_IC_Init+0xc4>
 800b372:	f240 71c1 	movw	r1, #1985	; 0x7c1
 800b376:	4832      	ldr	r0, [pc, #200]	; (800b440 <HAL_TIM_IC_Init+0x188>)
 800b378:	f7f8 f891 	bl	800349e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d008      	beq.n	800b396 <HAL_TIM_IC_Init+0xde>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	699b      	ldr	r3, [r3, #24]
 800b388:	2b80      	cmp	r3, #128	; 0x80
 800b38a:	d004      	beq.n	800b396 <HAL_TIM_IC_Init+0xde>
 800b38c:	f240 71c2 	movw	r1, #1986	; 0x7c2
 800b390:	482b      	ldr	r0, [pc, #172]	; (800b440 <HAL_TIM_IC_Init+0x188>)
 800b392:	f7f8 f884 	bl	800349e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d106      	bne.n	800b3b0 <HAL_TIM_IC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f84a 	bl	800b444 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2202      	movs	r2, #2
 800b3b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	f001 f88e 	bl	800c4e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	40010000 	.word	0x40010000
 800b428:	40000400 	.word	0x40000400
 800b42c:	40000800 	.word	0x40000800
 800b430:	40000c00 	.word	0x40000c00
 800b434:	40014000 	.word	0x40014000
 800b438:	40014400 	.word	0x40014400
 800b43c:	40014800 	.word	0x40014800
 800b440:	080134dc 	.word	0x080134dc

0800b444 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b44c:	bf00      	nop
 800b44e:	370c      	adds	r7, #12
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	f003 0302 	and.w	r3, r3, #2
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d122      	bne.n	800b4b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d11b      	bne.n	800b4b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f06f 0202 	mvn.w	r2, #2
 800b484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	f003 0303 	and.w	r3, r3, #3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 ff28 	bl	800c2f0 <HAL_TIM_IC_CaptureCallback>
 800b4a0:	e005      	b.n	800b4ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 ff1a 	bl	800c2dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7f7 fc99 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	f003 0304 	and.w	r3, r3, #4
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d122      	bne.n	800b508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	f003 0304 	and.w	r3, r3, #4
 800b4cc:	2b04      	cmp	r3, #4
 800b4ce:	d11b      	bne.n	800b508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f06f 0204 	mvn.w	r2, #4
 800b4d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2202      	movs	r2, #2
 800b4de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	699b      	ldr	r3, [r3, #24]
 800b4e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fefe 	bl	800c2f0 <HAL_TIM_IC_CaptureCallback>
 800b4f4:	e005      	b.n	800b502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fef0 	bl	800c2dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7f7 fc6f 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	f003 0308 	and.w	r3, r3, #8
 800b512:	2b08      	cmp	r3, #8
 800b514:	d122      	bne.n	800b55c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f003 0308 	and.w	r3, r3, #8
 800b520:	2b08      	cmp	r3, #8
 800b522:	d11b      	bne.n	800b55c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f06f 0208 	mvn.w	r2, #8
 800b52c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2204      	movs	r2, #4
 800b532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	69db      	ldr	r3, [r3, #28]
 800b53a:	f003 0303 	and.w	r3, r3, #3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 fed4 	bl	800c2f0 <HAL_TIM_IC_CaptureCallback>
 800b548:	e005      	b.n	800b556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fec6 	bl	800c2dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7f7 fc45 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	f003 0310 	and.w	r3, r3, #16
 800b566:	2b10      	cmp	r3, #16
 800b568:	d122      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f003 0310 	and.w	r3, r3, #16
 800b574:	2b10      	cmp	r3, #16
 800b576:	d11b      	bne.n	800b5b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f06f 0210 	mvn.w	r2, #16
 800b580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2208      	movs	r2, #8
 800b586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 feaa 	bl	800c2f0 <HAL_TIM_IC_CaptureCallback>
 800b59c:	e005      	b.n	800b5aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fe9c 	bl	800c2dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7f7 fc1b 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	f003 0301 	and.w	r3, r3, #1
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d10e      	bne.n	800b5dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d107      	bne.n	800b5dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f06f 0201 	mvn.w	r2, #1
 800b5d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7f7 fbd4 	bl	8002d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e6:	2b80      	cmp	r3, #128	; 0x80
 800b5e8:	d10e      	bne.n	800b608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f4:	2b80      	cmp	r3, #128	; 0x80
 800b5f6:	d107      	bne.n	800b608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f001 fdb6 	bl	800d174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b612:	2b40      	cmp	r3, #64	; 0x40
 800b614:	d10e      	bne.n	800b634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b620:	2b40      	cmp	r3, #64	; 0x40
 800b622:	d107      	bne.n	800b634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b62c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fe72 	bl	800c318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	f003 0320 	and.w	r3, r3, #32
 800b63e:	2b20      	cmp	r3, #32
 800b640:	d10e      	bne.n	800b660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	f003 0320 	and.w	r3, r3, #32
 800b64c:	2b20      	cmp	r3, #32
 800b64e:	d107      	bne.n	800b660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f06f 0220 	mvn.w	r2, #32
 800b658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 fd80 	bl	800d160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a8a      	ldr	r2, [pc, #552]	; (800b8a8 <HAL_TIM_IC_ConfigChannel+0x240>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d027      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b68a:	d022      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a86      	ldr	r2, [pc, #536]	; (800b8ac <HAL_TIM_IC_ConfigChannel+0x244>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d01d      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a85      	ldr	r2, [pc, #532]	; (800b8b0 <HAL_TIM_IC_ConfigChannel+0x248>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d018      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a83      	ldr	r2, [pc, #524]	; (800b8b4 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d013      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a82      	ldr	r2, [pc, #520]	; (800b8b8 <HAL_TIM_IC_ConfigChannel+0x250>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d00e      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a80      	ldr	r2, [pc, #512]	; (800b8bc <HAL_TIM_IC_ConfigChannel+0x254>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d009      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a7f      	ldr	r2, [pc, #508]	; (800b8c0 <HAL_TIM_IC_ConfigChannel+0x258>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d004      	beq.n	800b6d2 <HAL_TIM_IC_ConfigChannel+0x6a>
 800b6c8:	f241 0112 	movw	r1, #4114	; 0x1012
 800b6cc:	487d      	ldr	r0, [pc, #500]	; (800b8c4 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b6ce:	f7f7 fee6 	bl	800349e <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <HAL_TIM_IC_ConfigChannel+0x8c>
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d008      	beq.n	800b6f4 <HAL_TIM_IC_ConfigChannel+0x8c>
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b0a      	cmp	r3, #10
 800b6e8:	d004      	beq.n	800b6f4 <HAL_TIM_IC_ConfigChannel+0x8c>
 800b6ea:	f241 0113 	movw	r1, #4115	; 0x1013
 800b6ee:	4875      	ldr	r0, [pc, #468]	; (800b8c4 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b6f0:	f7f7 fed5 	bl	800349e <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d00c      	beq.n	800b716 <HAL_TIM_IC_ConfigChannel+0xae>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	2b02      	cmp	r3, #2
 800b702:	d008      	beq.n	800b716 <HAL_TIM_IC_ConfigChannel+0xae>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d004      	beq.n	800b716 <HAL_TIM_IC_ConfigChannel+0xae>
 800b70c:	f241 0114 	movw	r1, #4116	; 0x1014
 800b710:	486c      	ldr	r0, [pc, #432]	; (800b8c4 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b712:	f7f7 fec4 	bl	800349e <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d010      	beq.n	800b740 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	2b04      	cmp	r3, #4
 800b724:	d00c      	beq.n	800b740 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d008      	beq.n	800b740 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	2b0c      	cmp	r3, #12
 800b734:	d004      	beq.n	800b740 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b736:	f241 0115 	movw	r1, #4117	; 0x1015
 800b73a:	4862      	ldr	r0, [pc, #392]	; (800b8c4 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b73c:	f7f7 feaf 	bl	800349e <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	2b0f      	cmp	r3, #15
 800b746:	d904      	bls.n	800b752 <HAL_TIM_IC_ConfigChannel+0xea>
 800b748:	f241 0116 	movw	r1, #4118	; 0x1016
 800b74c:	485d      	ldr	r0, [pc, #372]	; (800b8c4 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b74e:	f7f7 fea6 	bl	800349e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d101      	bne.n	800b760 <HAL_TIM_IC_ConfigChannel+0xf8>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e0f8      	b.n	800b952 <HAL_TIM_IC_ConfigChannel+0x2ea>
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d11b      	bne.n	800b7a6 <HAL_TIM_IC_ConfigChannel+0x13e>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	6819      	ldr	r1, [r3, #0]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	f001 f947 	bl	800ca10 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	699a      	ldr	r2, [r3, #24]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f022 020c 	bic.w	r2, r2, #12
 800b790:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	6999      	ldr	r1, [r3, #24]
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	430a      	orrs	r2, r1
 800b7a2:	619a      	str	r2, [r3, #24]
 800b7a4:	e0d0      	b.n	800b948 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	d13f      	bne.n	800b82c <HAL_TIM_IC_ConfigChannel+0x1c4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a3d      	ldr	r2, [pc, #244]	; (800b8a8 <HAL_TIM_IC_ConfigChannel+0x240>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d01d      	beq.n	800b7f2 <HAL_TIM_IC_ConfigChannel+0x18a>
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7be:	d018      	beq.n	800b7f2 <HAL_TIM_IC_ConfigChannel+0x18a>
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a39      	ldr	r2, [pc, #228]	; (800b8ac <HAL_TIM_IC_ConfigChannel+0x244>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d013      	beq.n	800b7f2 <HAL_TIM_IC_ConfigChannel+0x18a>
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a38      	ldr	r2, [pc, #224]	; (800b8b0 <HAL_TIM_IC_ConfigChannel+0x248>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d00e      	beq.n	800b7f2 <HAL_TIM_IC_ConfigChannel+0x18a>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a36      	ldr	r2, [pc, #216]	; (800b8b4 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d009      	beq.n	800b7f2 <HAL_TIM_IC_ConfigChannel+0x18a>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a35      	ldr	r2, [pc, #212]	; (800b8b8 <HAL_TIM_IC_ConfigChannel+0x250>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d004      	beq.n	800b7f2 <HAL_TIM_IC_ConfigChannel+0x18a>
 800b7e8:	f241 012c 	movw	r1, #4140	; 0x102c
 800b7ec:	4835      	ldr	r0, [pc, #212]	; (800b8c4 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b7ee:	f7f7 fe56 	bl	800349e <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6818      	ldr	r0, [r3, #0]
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	6819      	ldr	r1, [r3, #0]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	f001 f99c 	bl	800cb3e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	699a      	ldr	r2, [r3, #24]
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b814:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	6999      	ldr	r1, [r3, #24]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	021a      	lsls	r2, r3, #8
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	619a      	str	r2, [r3, #24]
 800b82a:	e08d      	b.n	800b948 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b08      	cmp	r3, #8
 800b830:	d14a      	bne.n	800b8c8 <HAL_TIM_IC_ConfigChannel+0x260>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a1c      	ldr	r2, [pc, #112]	; (800b8a8 <HAL_TIM_IC_ConfigChannel+0x240>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d018      	beq.n	800b86e <HAL_TIM_IC_ConfigChannel+0x206>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b844:	d013      	beq.n	800b86e <HAL_TIM_IC_ConfigChannel+0x206>
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a18      	ldr	r2, [pc, #96]	; (800b8ac <HAL_TIM_IC_ConfigChannel+0x244>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d00e      	beq.n	800b86e <HAL_TIM_IC_ConfigChannel+0x206>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a16      	ldr	r2, [pc, #88]	; (800b8b0 <HAL_TIM_IC_ConfigChannel+0x248>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d009      	beq.n	800b86e <HAL_TIM_IC_ConfigChannel+0x206>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a15      	ldr	r2, [pc, #84]	; (800b8b4 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d004      	beq.n	800b86e <HAL_TIM_IC_ConfigChannel+0x206>
 800b864:	f241 013c 	movw	r1, #4156	; 0x103c
 800b868:	4816      	ldr	r0, [pc, #88]	; (800b8c4 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b86a:	f7f7 fe18 	bl	800349e <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6819      	ldr	r1, [r3, #0]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	685a      	ldr	r2, [r3, #4]
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	f001 f9cb 	bl	800cc18 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f022 020c 	bic.w	r2, r2, #12
 800b890:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	69d9      	ldr	r1, [r3, #28]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	689a      	ldr	r2, [r3, #8]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	430a      	orrs	r2, r1
 800b8a2:	61da      	str	r2, [r3, #28]
 800b8a4:	e050      	b.n	800b948 <HAL_TIM_IC_ConfigChannel+0x2e0>
 800b8a6:	bf00      	nop
 800b8a8:	40010000 	.word	0x40010000
 800b8ac:	40000400 	.word	0x40000400
 800b8b0:	40000800 	.word	0x40000800
 800b8b4:	40000c00 	.word	0x40000c00
 800b8b8:	40014000 	.word	0x40014000
 800b8bc:	40014400 	.word	0x40014400
 800b8c0:	40014800 	.word	0x40014800
 800b8c4:	080134dc 	.word	0x080134dc
  }
  else if (Channel == TIM_CHANNEL_4)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b0c      	cmp	r3, #12
 800b8cc:	d13a      	bne.n	800b944 <HAL_TIM_IC_ConfigChannel+0x2dc>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a22      	ldr	r2, [pc, #136]	; (800b95c <HAL_TIM_IC_ConfigChannel+0x2f4>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d018      	beq.n	800b90a <HAL_TIM_IC_ConfigChannel+0x2a2>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e0:	d013      	beq.n	800b90a <HAL_TIM_IC_ConfigChannel+0x2a2>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a1e      	ldr	r2, [pc, #120]	; (800b960 <HAL_TIM_IC_ConfigChannel+0x2f8>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d00e      	beq.n	800b90a <HAL_TIM_IC_ConfigChannel+0x2a2>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a1c      	ldr	r2, [pc, #112]	; (800b964 <HAL_TIM_IC_ConfigChannel+0x2fc>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d009      	beq.n	800b90a <HAL_TIM_IC_ConfigChannel+0x2a2>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a1b      	ldr	r2, [pc, #108]	; (800b968 <HAL_TIM_IC_ConfigChannel+0x300>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d004      	beq.n	800b90a <HAL_TIM_IC_ConfigChannel+0x2a2>
 800b900:	f241 014c 	movw	r1, #4172	; 0x104c
 800b904:	4819      	ldr	r0, [pc, #100]	; (800b96c <HAL_TIM_IC_ConfigChannel+0x304>)
 800b906:	f7f7 fdca 	bl	800349e <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	6819      	ldr	r1, [r3, #0]
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	f001 f9b9 	bl	800cc90 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	69da      	ldr	r2, [r3, #28]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b92c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69d9      	ldr	r1, [r3, #28]
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	021a      	lsls	r2, r3, #8
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	430a      	orrs	r2, r1
 800b940:	61da      	str	r2, [r3, #28]
 800b942:	e001      	b.n	800b948 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else
  {
    status = HAL_ERROR;
 800b944:	2301      	movs	r3, #1
 800b946:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b950:	7dfb      	ldrb	r3, [r7, #23]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3718      	adds	r7, #24
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	40010000 	.word	0x40010000
 800b960:	40000400 	.word	0x40000400
 800b964:	40000800 	.word	0x40000800
 800b968:	40000c00 	.word	0x40000c00
 800b96c:	080134dc 	.word	0x080134dc

0800b970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d010      	beq.n	800b9a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b04      	cmp	r3, #4
 800b98a:	d00d      	beq.n	800b9a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b08      	cmp	r3, #8
 800b990:	d00a      	beq.n	800b9a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b0c      	cmp	r3, #12
 800b996:	d007      	beq.n	800b9a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b3c      	cmp	r3, #60	; 0x3c
 800b99c:	d004      	beq.n	800b9a8 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b99e:	f241 0177 	movw	r1, #4215	; 0x1077
 800b9a2:	4893      	ldr	r0, [pc, #588]	; (800bbf0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b9a4:	f7f7 fd7b 	bl	800349e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b60      	cmp	r3, #96	; 0x60
 800b9ae:	d008      	beq.n	800b9c2 <HAL_TIM_PWM_ConfigChannel+0x52>
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b70      	cmp	r3, #112	; 0x70
 800b9b6:	d004      	beq.n	800b9c2 <HAL_TIM_PWM_ConfigChannel+0x52>
 800b9b8:	f241 0178 	movw	r1, #4216	; 0x1078
 800b9bc:	488c      	ldr	r0, [pc, #560]	; (800bbf0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b9be:	f7f7 fd6e 	bl	800349e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d008      	beq.n	800b9dc <HAL_TIM_PWM_ConfigChannel+0x6c>
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d004      	beq.n	800b9dc <HAL_TIM_PWM_ConfigChannel+0x6c>
 800b9d2:	f241 0179 	movw	r1, #4217	; 0x1079
 800b9d6:	4886      	ldr	r0, [pc, #536]	; (800bbf0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b9d8:	f7f7 fd61 	bl	800349e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d008      	beq.n	800b9f6 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d004      	beq.n	800b9f6 <HAL_TIM_PWM_ConfigChannel+0x86>
 800b9ec:	f241 017a 	movw	r1, #4218	; 0x107a
 800b9f0:	487f      	ldr	r0, [pc, #508]	; (800bbf0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800b9f2:	f7f7 fd54 	bl	800349e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <HAL_TIM_PWM_ConfigChannel+0x94>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e14c      	b.n	800bc9e <HAL_TIM_PWM_ConfigChannel+0x32e>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b0c      	cmp	r3, #12
 800ba10:	f200 813d 	bhi.w	800bc8e <HAL_TIM_PWM_ConfigChannel+0x31e>
 800ba14:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <HAL_TIM_PWM_ConfigChannel+0xac>)
 800ba16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1a:	bf00      	nop
 800ba1c:	0800ba51 	.word	0x0800ba51
 800ba20:	0800bc8f 	.word	0x0800bc8f
 800ba24:	0800bc8f 	.word	0x0800bc8f
 800ba28:	0800bc8f 	.word	0x0800bc8f
 800ba2c:	0800baeb 	.word	0x0800baeb
 800ba30:	0800bc8f 	.word	0x0800bc8f
 800ba34:	0800bc8f 	.word	0x0800bc8f
 800ba38:	0800bc8f 	.word	0x0800bc8f
 800ba3c:	0800bb73 	.word	0x0800bb73
 800ba40:	0800bc8f 	.word	0x0800bc8f
 800ba44:	0800bc8f 	.word	0x0800bc8f
 800ba48:	0800bc8f 	.word	0x0800bc8f
 800ba4c:	0800bc11 	.word	0x0800bc11
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a67      	ldr	r2, [pc, #412]	; (800bbf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d027      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba62:	d022      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a63      	ldr	r2, [pc, #396]	; (800bbf8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d01d      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a62      	ldr	r2, [pc, #392]	; (800bbfc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d018      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a60      	ldr	r2, [pc, #384]	; (800bc00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d013      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a5f      	ldr	r2, [pc, #380]	; (800bc04 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00e      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a5d      	ldr	r2, [pc, #372]	; (800bc08 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d009      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a5c      	ldr	r2, [pc, #368]	; (800bc0c <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d004      	beq.n	800baaa <HAL_TIM_PWM_ConfigChannel+0x13a>
 800baa0:	f241 0184 	movw	r1, #4228	; 0x1084
 800baa4:	4852      	ldr	r0, [pc, #328]	; (800bbf0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800baa6:	f7f7 fcfa 	bl	800349e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68b9      	ldr	r1, [r7, #8]
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 fd97 	bl	800c5e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	699a      	ldr	r2, [r3, #24]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f042 0208 	orr.w	r2, r2, #8
 800bac4:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	699a      	ldr	r2, [r3, #24]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f022 0204 	bic.w	r2, r2, #4
 800bad4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6999      	ldr	r1, [r3, #24]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	691a      	ldr	r2, [r3, #16]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	430a      	orrs	r2, r1
 800bae6:	619a      	str	r2, [r3, #24]
      break;
 800bae8:	e0d4      	b.n	800bc94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a41      	ldr	r2, [pc, #260]	; (800bbf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d01d      	beq.n	800bb30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bafc:	d018      	beq.n	800bb30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a3d      	ldr	r2, [pc, #244]	; (800bbf8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d013      	beq.n	800bb30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a3b      	ldr	r2, [pc, #236]	; (800bbfc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d00e      	beq.n	800bb30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a3a      	ldr	r2, [pc, #232]	; (800bc00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d009      	beq.n	800bb30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a38      	ldr	r2, [pc, #224]	; (800bc04 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d004      	beq.n	800bb30 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bb26:	f241 0195 	movw	r1, #4245	; 0x1095
 800bb2a:	4831      	ldr	r0, [pc, #196]	; (800bbf0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bb2c:	f7f7 fcb7 	bl	800349e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68b9      	ldr	r1, [r7, #8]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 fde4 	bl	800c704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	699a      	ldr	r2, [r3, #24]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699a      	ldr	r2, [r3, #24]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6999      	ldr	r1, [r3, #24]
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	021a      	lsls	r2, r3, #8
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	430a      	orrs	r2, r1
 800bb6e:	619a      	str	r2, [r3, #24]
      break;
 800bb70:	e090      	b.n	800bc94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a1f      	ldr	r2, [pc, #124]	; (800bbf4 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d018      	beq.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb84:	d013      	beq.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a1b      	ldr	r2, [pc, #108]	; (800bbf8 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d00e      	beq.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a19      	ldr	r2, [pc, #100]	; (800bbfc <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d009      	beq.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a18      	ldr	r2, [pc, #96]	; (800bc00 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d004      	beq.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bba4:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800bba8:	4811      	ldr	r0, [pc, #68]	; (800bbf0 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bbaa:	f7f7 fc78 	bl	800349e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68b9      	ldr	r1, [r7, #8]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f000 fe39 	bl	800c82c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	69da      	ldr	r2, [r3, #28]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f042 0208 	orr.w	r2, r2, #8
 800bbc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69da      	ldr	r2, [r3, #28]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f022 0204 	bic.w	r2, r2, #4
 800bbd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69d9      	ldr	r1, [r3, #28]
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	691a      	ldr	r2, [r3, #16]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	61da      	str	r2, [r3, #28]
      break;
 800bbec:	e052      	b.n	800bc94 <HAL_TIM_PWM_ConfigChannel+0x324>
 800bbee:	bf00      	nop
 800bbf0:	080134dc 	.word	0x080134dc
 800bbf4:	40010000 	.word	0x40010000
 800bbf8:	40000400 	.word	0x40000400
 800bbfc:	40000800 	.word	0x40000800
 800bc00:	40000c00 	.word	0x40000c00
 800bc04:	40014000 	.word	0x40014000
 800bc08:	40014400 	.word	0x40014400
 800bc0c:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	4a24      	ldr	r2, [pc, #144]	; (800bca8 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d018      	beq.n	800bc4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc22:	d013      	beq.n	800bc4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a20      	ldr	r2, [pc, #128]	; (800bcac <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d00e      	beq.n	800bc4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a1f      	ldr	r2, [pc, #124]	; (800bcb0 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d009      	beq.n	800bc4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a1d      	ldr	r2, [pc, #116]	; (800bcb4 <HAL_TIM_PWM_ConfigChannel+0x344>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d004      	beq.n	800bc4c <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bc42:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800bc46:	481c      	ldr	r0, [pc, #112]	; (800bcb8 <HAL_TIM_PWM_ConfigChannel+0x348>)
 800bc48:	f7f7 fc29 	bl	800349e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fe7e 	bl	800c954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	69da      	ldr	r2, [r3, #28]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	69da      	ldr	r2, [r3, #28]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	69d9      	ldr	r1, [r3, #28]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	021a      	lsls	r2, r3, #8
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	430a      	orrs	r2, r1
 800bc8a:	61da      	str	r2, [r3, #28]
      break;
 800bc8c:	e002      	b.n	800bc94 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	75fb      	strb	r3, [r7, #23]
      break;
 800bc92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	40010000 	.word	0x40010000
 800bcac:	40000400 	.word	0x40000400
 800bcb0:	40000800 	.word	0x40000800
 800bcb4:	40000c00 	.word	0x40000c00
 800bcb8:	080134dc 	.word	0x080134dc

0800bcbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	d101      	bne.n	800bcd8 <HAL_TIM_ConfigClockSource+0x1c>
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	e2f0      	b.n	800c2ba <HAL_TIM_ConfigClockSource+0x5fe>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2202      	movs	r2, #2
 800bce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf0:	d029      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcfa:	d024      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d020      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b10      	cmp	r3, #16
 800bd0a:	d01c      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d018      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	2b30      	cmp	r3, #48	; 0x30
 800bd1a:	d014      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b40      	cmp	r3, #64	; 0x40
 800bd22:	d010      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b50      	cmp	r3, #80	; 0x50
 800bd2a:	d00c      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b60      	cmp	r3, #96	; 0x60
 800bd32:	d008      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b70      	cmp	r3, #112	; 0x70
 800bd3a:	d004      	beq.n	800bd46 <HAL_TIM_ConfigClockSource+0x8a>
 800bd3c:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800bd40:	487c      	ldr	r0, [pc, #496]	; (800bf34 <HAL_TIM_ConfigClockSource+0x278>)
 800bd42:	f7f7 fbac 	bl	800349e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd54:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd5c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd6e:	f000 80f1 	beq.w	800bf54 <HAL_TIM_ConfigClockSource+0x298>
 800bd72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd76:	f200 8293 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bd7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd7e:	d02d      	beq.n	800bddc <HAL_TIM_ConfigClockSource+0x120>
 800bd80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd84:	f200 828c 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bd88:	2b70      	cmp	r3, #112	; 0x70
 800bd8a:	d05d      	beq.n	800be48 <HAL_TIM_ConfigClockSource+0x18c>
 800bd8c:	2b70      	cmp	r3, #112	; 0x70
 800bd8e:	f200 8287 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bd92:	2b60      	cmp	r3, #96	; 0x60
 800bd94:	f000 81a0 	beq.w	800c0d8 <HAL_TIM_ConfigClockSource+0x41c>
 800bd98:	2b60      	cmp	r3, #96	; 0x60
 800bd9a:	f200 8281 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bd9e:	2b50      	cmp	r3, #80	; 0x50
 800bda0:	f000 8144 	beq.w	800c02c <HAL_TIM_ConfigClockSource+0x370>
 800bda4:	2b50      	cmp	r3, #80	; 0x50
 800bda6:	f200 827b 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bdaa:	2b40      	cmp	r3, #64	; 0x40
 800bdac:	f000 81f6 	beq.w	800c19c <HAL_TIM_ConfigClockSource+0x4e0>
 800bdb0:	2b40      	cmp	r3, #64	; 0x40
 800bdb2:	f200 8275 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bdb6:	2b30      	cmp	r3, #48	; 0x30
 800bdb8:	f000 8246 	beq.w	800c248 <HAL_TIM_ConfigClockSource+0x58c>
 800bdbc:	2b30      	cmp	r3, #48	; 0x30
 800bdbe:	f200 826f 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bdc2:	2b20      	cmp	r3, #32
 800bdc4:	f000 8240 	beq.w	800c248 <HAL_TIM_ConfigClockSource+0x58c>
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	f200 8269 	bhi.w	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 823a 	beq.w	800c248 <HAL_TIM_ConfigClockSource+0x58c>
 800bdd4:	2b10      	cmp	r3, #16
 800bdd6:	f000 8237 	beq.w	800c248 <HAL_TIM_ConfigClockSource+0x58c>
 800bdda:	e261      	b.n	800c2a0 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a55      	ldr	r2, [pc, #340]	; (800bf38 <HAL_TIM_ConfigClockSource+0x27c>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	f000 825f 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf0:	f000 8259 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a50      	ldr	r2, [pc, #320]	; (800bf3c <HAL_TIM_ConfigClockSource+0x280>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	f000 8253 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a4e      	ldr	r2, [pc, #312]	; (800bf40 <HAL_TIM_ConfigClockSource+0x284>)
 800be06:	4293      	cmp	r3, r2
 800be08:	f000 824d 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a4c      	ldr	r2, [pc, #304]	; (800bf44 <HAL_TIM_ConfigClockSource+0x288>)
 800be12:	4293      	cmp	r3, r2
 800be14:	f000 8247 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4a4a      	ldr	r2, [pc, #296]	; (800bf48 <HAL_TIM_ConfigClockSource+0x28c>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	f000 8241 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a48      	ldr	r2, [pc, #288]	; (800bf4c <HAL_TIM_ConfigClockSource+0x290>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	f000 823b 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4a46      	ldr	r2, [pc, #280]	; (800bf50 <HAL_TIM_ConfigClockSource+0x294>)
 800be36:	4293      	cmp	r3, r2
 800be38:	f000 8235 	beq.w	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
 800be3c:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800be40:	483c      	ldr	r0, [pc, #240]	; (800bf34 <HAL_TIM_ConfigClockSource+0x278>)
 800be42:	f7f7 fb2c 	bl	800349e <assert_failed>
      break;
 800be46:	e22e      	b.n	800c2a6 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4a3a      	ldr	r2, [pc, #232]	; (800bf38 <HAL_TIM_ConfigClockSource+0x27c>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d01d      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x1d2>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be5a:	d018      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x1d2>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a36      	ldr	r2, [pc, #216]	; (800bf3c <HAL_TIM_ConfigClockSource+0x280>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d013      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x1d2>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a35      	ldr	r2, [pc, #212]	; (800bf40 <HAL_TIM_ConfigClockSource+0x284>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d00e      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x1d2>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a33      	ldr	r2, [pc, #204]	; (800bf44 <HAL_TIM_ConfigClockSource+0x288>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d009      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x1d2>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a32      	ldr	r2, [pc, #200]	; (800bf48 <HAL_TIM_ConfigClockSource+0x28c>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d004      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0x1d2>
 800be84:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800be88:	482a      	ldr	r0, [pc, #168]	; (800bf34 <HAL_TIM_ConfigClockSource+0x278>)
 800be8a:	f7f7 fb08 	bl	800349e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	689b      	ldr	r3, [r3, #8]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d013      	beq.n	800bebe <HAL_TIM_ConfigClockSource+0x202>
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be9e:	d00e      	beq.n	800bebe <HAL_TIM_ConfigClockSource+0x202>
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea8:	d009      	beq.n	800bebe <HAL_TIM_ConfigClockSource+0x202>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	689b      	ldr	r3, [r3, #8]
 800beae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800beb2:	d004      	beq.n	800bebe <HAL_TIM_ConfigClockSource+0x202>
 800beb4:	f241 41d1 	movw	r1, #5329	; 0x14d1
 800beb8:	481e      	ldr	r0, [pc, #120]	; (800bf34 <HAL_TIM_ConfigClockSource+0x278>)
 800beba:	f7f7 faf0 	bl	800349e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bec6:	d014      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x236>
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d010      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x236>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00c      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x236>
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d008      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x236>
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	2b0a      	cmp	r3, #10
 800bee6:	d004      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x236>
 800bee8:	f241 41d2 	movw	r1, #5330	; 0x14d2
 800beec:	4811      	ldr	r0, [pc, #68]	; (800bf34 <HAL_TIM_ConfigClockSource+0x278>)
 800beee:	f7f7 fad6 	bl	800349e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	2b0f      	cmp	r3, #15
 800bef8:	d904      	bls.n	800bf04 <HAL_TIM_ConfigClockSource+0x248>
 800befa:	f241 41d3 	movw	r1, #5331	; 0x14d3
 800befe:	480d      	ldr	r0, [pc, #52]	; (800bf34 <HAL_TIM_ConfigClockSource+0x278>)
 800bf00:	f7f7 facd 	bl	800349e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	6899      	ldr	r1, [r3, #8]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	f000 ff14 	bl	800cd40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	609a      	str	r2, [r3, #8]
      break;
 800bf30:	e1ba      	b.n	800c2a8 <HAL_TIM_ConfigClockSource+0x5ec>
 800bf32:	bf00      	nop
 800bf34:	080134dc 	.word	0x080134dc
 800bf38:	40010000 	.word	0x40010000
 800bf3c:	40000400 	.word	0x40000400
 800bf40:	40000800 	.word	0x40000800
 800bf44:	40000c00 	.word	0x40000c00
 800bf48:	40014000 	.word	0x40014000
 800bf4c:	40014400 	.word	0x40014400
 800bf50:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a8a      	ldr	r2, [pc, #552]	; (800c184 <HAL_TIM_ConfigClockSource+0x4c8>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d018      	beq.n	800bf90 <HAL_TIM_ConfigClockSource+0x2d4>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf66:	d013      	beq.n	800bf90 <HAL_TIM_ConfigClockSource+0x2d4>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a86      	ldr	r2, [pc, #536]	; (800c188 <HAL_TIM_ConfigClockSource+0x4cc>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d00e      	beq.n	800bf90 <HAL_TIM_ConfigClockSource+0x2d4>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a85      	ldr	r2, [pc, #532]	; (800c18c <HAL_TIM_ConfigClockSource+0x4d0>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d009      	beq.n	800bf90 <HAL_TIM_ConfigClockSource+0x2d4>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a83      	ldr	r2, [pc, #524]	; (800c190 <HAL_TIM_ConfigClockSource+0x4d4>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d004      	beq.n	800bf90 <HAL_TIM_ConfigClockSource+0x2d4>
 800bf86:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800bf8a:	4882      	ldr	r0, [pc, #520]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800bf8c:	f7f7 fa87 	bl	800349e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d013      	beq.n	800bfc0 <HAL_TIM_ConfigClockSource+0x304>
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfa0:	d00e      	beq.n	800bfc0 <HAL_TIM_ConfigClockSource+0x304>
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfaa:	d009      	beq.n	800bfc0 <HAL_TIM_ConfigClockSource+0x304>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfb4:	d004      	beq.n	800bfc0 <HAL_TIM_ConfigClockSource+0x304>
 800bfb6:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800bfba:	4876      	ldr	r0, [pc, #472]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800bfbc:	f7f7 fa6f 	bl	800349e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfc8:	d014      	beq.n	800bff4 <HAL_TIM_ConfigClockSource+0x338>
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d010      	beq.n	800bff4 <HAL_TIM_ConfigClockSource+0x338>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00c      	beq.n	800bff4 <HAL_TIM_ConfigClockSource+0x338>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d008      	beq.n	800bff4 <HAL_TIM_ConfigClockSource+0x338>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	2b0a      	cmp	r3, #10
 800bfe8:	d004      	beq.n	800bff4 <HAL_TIM_ConfigClockSource+0x338>
 800bfea:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800bfee:	4869      	ldr	r0, [pc, #420]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800bff0:	f7f7 fa55 	bl	800349e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	2b0f      	cmp	r3, #15
 800bffa:	d904      	bls.n	800c006 <HAL_TIM_ConfigClockSource+0x34a>
 800bffc:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800c000:	4864      	ldr	r0, [pc, #400]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c002:	f7f7 fa4c 	bl	800349e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6818      	ldr	r0, [r3, #0]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	6899      	ldr	r1, [r3, #8]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f000 fe93 	bl	800cd40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c028:	609a      	str	r2, [r3, #8]
      break;
 800c02a:	e13d      	b.n	800c2a8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a54      	ldr	r2, [pc, #336]	; (800c184 <HAL_TIM_ConfigClockSource+0x4c8>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d01d      	beq.n	800c072 <HAL_TIM_ConfigClockSource+0x3b6>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c03e:	d018      	beq.n	800c072 <HAL_TIM_ConfigClockSource+0x3b6>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4a50      	ldr	r2, [pc, #320]	; (800c188 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d013      	beq.n	800c072 <HAL_TIM_ConfigClockSource+0x3b6>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	4a4f      	ldr	r2, [pc, #316]	; (800c18c <HAL_TIM_ConfigClockSource+0x4d0>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d00e      	beq.n	800c072 <HAL_TIM_ConfigClockSource+0x3b6>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a4d      	ldr	r2, [pc, #308]	; (800c190 <HAL_TIM_ConfigClockSource+0x4d4>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d009      	beq.n	800c072 <HAL_TIM_ConfigClockSource+0x3b6>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a4d      	ldr	r2, [pc, #308]	; (800c198 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d004      	beq.n	800c072 <HAL_TIM_ConfigClockSource+0x3b6>
 800c068:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800c06c:	4849      	ldr	r0, [pc, #292]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c06e:	f7f7 fa16 	bl	800349e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c07a:	d014      	beq.n	800c0a6 <HAL_TIM_ConfigClockSource+0x3ea>
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d010      	beq.n	800c0a6 <HAL_TIM_ConfigClockSource+0x3ea>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <HAL_TIM_ConfigClockSource+0x3ea>
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	2b02      	cmp	r3, #2
 800c092:	d008      	beq.n	800c0a6 <HAL_TIM_ConfigClockSource+0x3ea>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	2b0a      	cmp	r3, #10
 800c09a:	d004      	beq.n	800c0a6 <HAL_TIM_ConfigClockSource+0x3ea>
 800c09c:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800c0a0:	483c      	ldr	r0, [pc, #240]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c0a2:	f7f7 f9fc 	bl	800349e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	68db      	ldr	r3, [r3, #12]
 800c0aa:	2b0f      	cmp	r3, #15
 800c0ac:	d904      	bls.n	800c0b8 <HAL_TIM_ConfigClockSource+0x3fc>
 800c0ae:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800c0b2:	4838      	ldr	r0, [pc, #224]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c0b4:	f7f7 f9f3 	bl	800349e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6818      	ldr	r0, [r3, #0]
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	6859      	ldr	r1, [r3, #4]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	f000 fd0b 	bl	800cae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2150      	movs	r1, #80	; 0x50
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 fe1a 	bl	800cd0a <TIM_ITRx_SetConfig>
      break;
 800c0d6:	e0e7      	b.n	800c2a8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a29      	ldr	r2, [pc, #164]	; (800c184 <HAL_TIM_ConfigClockSource+0x4c8>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d01d      	beq.n	800c11e <HAL_TIM_ConfigClockSource+0x462>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ea:	d018      	beq.n	800c11e <HAL_TIM_ConfigClockSource+0x462>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a25      	ldr	r2, [pc, #148]	; (800c188 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d013      	beq.n	800c11e <HAL_TIM_ConfigClockSource+0x462>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a24      	ldr	r2, [pc, #144]	; (800c18c <HAL_TIM_ConfigClockSource+0x4d0>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d00e      	beq.n	800c11e <HAL_TIM_ConfigClockSource+0x462>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a22      	ldr	r2, [pc, #136]	; (800c190 <HAL_TIM_ConfigClockSource+0x4d4>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d009      	beq.n	800c11e <HAL_TIM_ConfigClockSource+0x462>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a22      	ldr	r2, [pc, #136]	; (800c198 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d004      	beq.n	800c11e <HAL_TIM_ConfigClockSource+0x462>
 800c114:	f241 510a 	movw	r1, #5386	; 0x150a
 800c118:	481e      	ldr	r0, [pc, #120]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c11a:	f7f7 f9c0 	bl	800349e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c126:	d014      	beq.n	800c152 <HAL_TIM_ConfigClockSource+0x496>
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d010      	beq.n	800c152 <HAL_TIM_ConfigClockSource+0x496>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00c      	beq.n	800c152 <HAL_TIM_ConfigClockSource+0x496>
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d008      	beq.n	800c152 <HAL_TIM_ConfigClockSource+0x496>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	2b0a      	cmp	r3, #10
 800c146:	d004      	beq.n	800c152 <HAL_TIM_ConfigClockSource+0x496>
 800c148:	f241 510d 	movw	r1, #5389	; 0x150d
 800c14c:	4811      	ldr	r0, [pc, #68]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c14e:	f7f7 f9a6 	bl	800349e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	2b0f      	cmp	r3, #15
 800c158:	d904      	bls.n	800c164 <HAL_TIM_ConfigClockSource+0x4a8>
 800c15a:	f241 510e 	movw	r1, #5390	; 0x150e
 800c15e:	480d      	ldr	r0, [pc, #52]	; (800c194 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c160:	f7f7 f99d 	bl	800349e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6818      	ldr	r0, [r3, #0]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	6859      	ldr	r1, [r3, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	461a      	mov	r2, r3
 800c172:	f000 fd21 	bl	800cbb8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2160      	movs	r1, #96	; 0x60
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fdc4 	bl	800cd0a <TIM_ITRx_SetConfig>
      break;
 800c182:	e091      	b.n	800c2a8 <HAL_TIM_ConfigClockSource+0x5ec>
 800c184:	40010000 	.word	0x40010000
 800c188:	40000400 	.word	0x40000400
 800c18c:	40000800 	.word	0x40000800
 800c190:	40000c00 	.word	0x40000c00
 800c194:	080134dc 	.word	0x080134dc
 800c198:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a48      	ldr	r2, [pc, #288]	; (800c2c4 <HAL_TIM_ConfigClockSource+0x608>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d01d      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x526>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ae:	d018      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x526>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a44      	ldr	r2, [pc, #272]	; (800c2c8 <HAL_TIM_ConfigClockSource+0x60c>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d013      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x526>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a43      	ldr	r2, [pc, #268]	; (800c2cc <HAL_TIM_ConfigClockSource+0x610>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d00e      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x526>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a41      	ldr	r2, [pc, #260]	; (800c2d0 <HAL_TIM_ConfigClockSource+0x614>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d009      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x526>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a40      	ldr	r2, [pc, #256]	; (800c2d4 <HAL_TIM_ConfigClockSource+0x618>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d004      	beq.n	800c1e2 <HAL_TIM_ConfigClockSource+0x526>
 800c1d8:	f241 511a 	movw	r1, #5402	; 0x151a
 800c1dc:	483e      	ldr	r0, [pc, #248]	; (800c2d8 <HAL_TIM_ConfigClockSource+0x61c>)
 800c1de:	f7f7 f95e 	bl	800349e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ea:	d014      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x55a>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d010      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x55a>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00c      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x55a>
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	2b02      	cmp	r3, #2
 800c202:	d008      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x55a>
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	2b0a      	cmp	r3, #10
 800c20a:	d004      	beq.n	800c216 <HAL_TIM_ConfigClockSource+0x55a>
 800c20c:	f241 511d 	movw	r1, #5405	; 0x151d
 800c210:	4831      	ldr	r0, [pc, #196]	; (800c2d8 <HAL_TIM_ConfigClockSource+0x61c>)
 800c212:	f7f7 f944 	bl	800349e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	2b0f      	cmp	r3, #15
 800c21c:	d904      	bls.n	800c228 <HAL_TIM_ConfigClockSource+0x56c>
 800c21e:	f241 511e 	movw	r1, #5406	; 0x151e
 800c222:	482d      	ldr	r0, [pc, #180]	; (800c2d8 <HAL_TIM_ConfigClockSource+0x61c>)
 800c224:	f7f7 f93b 	bl	800349e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	6859      	ldr	r1, [r3, #4]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	461a      	mov	r2, r3
 800c236:	f000 fc53 	bl	800cae0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2140      	movs	r1, #64	; 0x40
 800c240:	4618      	mov	r0, r3
 800c242:	f000 fd62 	bl	800cd0a <TIM_ITRx_SetConfig>
      break;
 800c246:	e02f      	b.n	800c2a8 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a1d      	ldr	r2, [pc, #116]	; (800c2c4 <HAL_TIM_ConfigClockSource+0x608>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d01d      	beq.n	800c28e <HAL_TIM_ConfigClockSource+0x5d2>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c25a:	d018      	beq.n	800c28e <HAL_TIM_ConfigClockSource+0x5d2>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a19      	ldr	r2, [pc, #100]	; (800c2c8 <HAL_TIM_ConfigClockSource+0x60c>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d013      	beq.n	800c28e <HAL_TIM_ConfigClockSource+0x5d2>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a18      	ldr	r2, [pc, #96]	; (800c2cc <HAL_TIM_ConfigClockSource+0x610>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d00e      	beq.n	800c28e <HAL_TIM_ConfigClockSource+0x5d2>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a16      	ldr	r2, [pc, #88]	; (800c2d0 <HAL_TIM_ConfigClockSource+0x614>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d009      	beq.n	800c28e <HAL_TIM_ConfigClockSource+0x5d2>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a15      	ldr	r2, [pc, #84]	; (800c2d4 <HAL_TIM_ConfigClockSource+0x618>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d004      	beq.n	800c28e <HAL_TIM_ConfigClockSource+0x5d2>
 800c284:	f241 512d 	movw	r1, #5421	; 0x152d
 800c288:	4813      	ldr	r0, [pc, #76]	; (800c2d8 <HAL_TIM_ConfigClockSource+0x61c>)
 800c28a:	f7f7 f908 	bl	800349e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f000 fd36 	bl	800cd0a <TIM_ITRx_SetConfig>
      break;
 800c29e:	e003      	b.n	800c2a8 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c2a4:	e000      	b.n	800c2a8 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800c2a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	40010000 	.word	0x40010000
 800c2c8:	40000400 	.word	0x40000400
 800c2cc:	40000800 	.word	0x40000800
 800c2d0:	40000c00 	.word	0x40000c00
 800c2d4:	40014000 	.word	0x40014000
 800c2d8:	080134dc 	.word	0x080134dc

0800c2dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c30c:	bf00      	nop
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c320:	bf00      	nop
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	429a      	cmp	r2, r3
 800c356:	d107      	bne.n	800c368 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2201      	movs	r2, #1
 800c35c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2201      	movs	r2, #1
 800c362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c366:	e02a      	b.n	800c3be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d107      	bne.n	800c382 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2202      	movs	r2, #2
 800c376:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c380:	e01d      	b.n	800c3be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d107      	bne.n	800c39c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2204      	movs	r2, #4
 800c390:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2201      	movs	r2, #1
 800c396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c39a:	e010      	b.n	800c3be <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d107      	bne.n	800c3b6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2208      	movs	r2, #8
 800c3aa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3b4:	e003      	b.n	800c3be <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f7ff ffb4 	bl	800c32c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	771a      	strb	r2, [r3, #28]
}
 800c3ca:	bf00      	nop
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d10b      	bne.n	800c402 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	69db      	ldr	r3, [r3, #28]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d136      	bne.n	800c466 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c400:	e031      	b.n	800c466 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c406:	687a      	ldr	r2, [r7, #4]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d10b      	bne.n	800c424 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2202      	movs	r2, #2
 800c410:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d125      	bne.n	800c466 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c422:	e020      	b.n	800c466 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d10b      	bne.n	800c446 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2204      	movs	r2, #4
 800c432:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d114      	bne.n	800c466 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c444:	e00f      	b.n	800c466 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d10a      	bne.n	800c466 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2208      	movs	r2, #8
 800c454:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d103      	bne.n	800c466 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f7f6 fcba 	bl	8002de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	771a      	strb	r2, [r3, #28]
}
 800c472:	bf00      	nop
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b084      	sub	sp, #16
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c486:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d103      	bne.n	800c49a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2201      	movs	r2, #1
 800c496:	771a      	strb	r2, [r3, #28]
 800c498:	e019      	b.n	800c4ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d103      	bne.n	800c4ac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	771a      	strb	r2, [r3, #28]
 800c4aa:	e010      	b.n	800c4ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d103      	bne.n	800c4be <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2204      	movs	r2, #4
 800c4ba:	771a      	strb	r2, [r3, #28]
 800c4bc:	e007      	b.n	800c4ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d102      	bne.n	800c4ce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2208      	movs	r2, #8
 800c4cc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7ff ff18 	bl	800c304 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	771a      	strb	r2, [r3, #28]
}
 800c4da:	bf00      	nop
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a34      	ldr	r2, [pc, #208]	; (800c5c8 <TIM_Base_SetConfig+0xe4>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d00f      	beq.n	800c51c <TIM_Base_SetConfig+0x38>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c502:	d00b      	beq.n	800c51c <TIM_Base_SetConfig+0x38>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a31      	ldr	r2, [pc, #196]	; (800c5cc <TIM_Base_SetConfig+0xe8>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d007      	beq.n	800c51c <TIM_Base_SetConfig+0x38>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a30      	ldr	r2, [pc, #192]	; (800c5d0 <TIM_Base_SetConfig+0xec>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d003      	beq.n	800c51c <TIM_Base_SetConfig+0x38>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a2f      	ldr	r2, [pc, #188]	; (800c5d4 <TIM_Base_SetConfig+0xf0>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d108      	bne.n	800c52e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a25      	ldr	r2, [pc, #148]	; (800c5c8 <TIM_Base_SetConfig+0xe4>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d01b      	beq.n	800c56e <TIM_Base_SetConfig+0x8a>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c53c:	d017      	beq.n	800c56e <TIM_Base_SetConfig+0x8a>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a22      	ldr	r2, [pc, #136]	; (800c5cc <TIM_Base_SetConfig+0xe8>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d013      	beq.n	800c56e <TIM_Base_SetConfig+0x8a>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a21      	ldr	r2, [pc, #132]	; (800c5d0 <TIM_Base_SetConfig+0xec>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00f      	beq.n	800c56e <TIM_Base_SetConfig+0x8a>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a20      	ldr	r2, [pc, #128]	; (800c5d4 <TIM_Base_SetConfig+0xf0>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00b      	beq.n	800c56e <TIM_Base_SetConfig+0x8a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a1f      	ldr	r2, [pc, #124]	; (800c5d8 <TIM_Base_SetConfig+0xf4>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d007      	beq.n	800c56e <TIM_Base_SetConfig+0x8a>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a1e      	ldr	r2, [pc, #120]	; (800c5dc <TIM_Base_SetConfig+0xf8>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d003      	beq.n	800c56e <TIM_Base_SetConfig+0x8a>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a1d      	ldr	r2, [pc, #116]	; (800c5e0 <TIM_Base_SetConfig+0xfc>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d108      	bne.n	800c580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	689a      	ldr	r2, [r3, #8]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a08      	ldr	r2, [pc, #32]	; (800c5c8 <TIM_Base_SetConfig+0xe4>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d103      	bne.n	800c5b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	691a      	ldr	r2, [r3, #16]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	615a      	str	r2, [r3, #20]
}
 800c5ba:	bf00      	nop
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	40010000 	.word	0x40010000
 800c5cc:	40000400 	.word	0x40000400
 800c5d0:	40000800 	.word	0x40000800
 800c5d4:	40000c00 	.word	0x40000c00
 800c5d8:	40014000 	.word	0x40014000
 800c5dc:	40014400 	.word	0x40014400
 800c5e0:	40014800 	.word	0x40014800

0800c5e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	f023 0201 	bic.w	r2, r3, #1
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f023 0303 	bic.w	r3, r3, #3
 800c61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	4313      	orrs	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f023 0302 	bic.w	r3, r3, #2
 800c62c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	4313      	orrs	r3, r2
 800c636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a30      	ldr	r2, [pc, #192]	; (800c6fc <TIM_OC1_SetConfig+0x118>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d119      	bne.n	800c674 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d008      	beq.n	800c65a <TIM_OC1_SetConfig+0x76>
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d004      	beq.n	800c65a <TIM_OC1_SetConfig+0x76>
 800c650:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800c654:	482a      	ldr	r0, [pc, #168]	; (800c700 <TIM_OC1_SetConfig+0x11c>)
 800c656:	f7f6 ff22 	bl	800349e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f023 0308 	bic.w	r3, r3, #8
 800c660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	4313      	orrs	r3, r2
 800c66a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f023 0304 	bic.w	r3, r3, #4
 800c672:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a21      	ldr	r2, [pc, #132]	; (800c6fc <TIM_OC1_SetConfig+0x118>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d12d      	bne.n	800c6d8 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	699b      	ldr	r3, [r3, #24]
 800c680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c684:	d008      	beq.n	800c698 <TIM_OC1_SetConfig+0xb4>
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d004      	beq.n	800c698 <TIM_OC1_SetConfig+0xb4>
 800c68e:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800c692:	481b      	ldr	r0, [pc, #108]	; (800c700 <TIM_OC1_SetConfig+0x11c>)
 800c694:	f7f6 ff03 	bl	800349e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6a0:	d008      	beq.n	800c6b4 <TIM_OC1_SetConfig+0xd0>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d004      	beq.n	800c6b4 <TIM_OC1_SetConfig+0xd0>
 800c6aa:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800c6ae:	4814      	ldr	r0, [pc, #80]	; (800c700 <TIM_OC1_SetConfig+0x11c>)
 800c6b0:	f7f6 fef5 	bl	800349e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	695b      	ldr	r3, [r3, #20]
 800c6c8:	693a      	ldr	r2, [r7, #16]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	699b      	ldr	r3, [r3, #24]
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	621a      	str	r2, [r3, #32]
}
 800c6f2:	bf00      	nop
 800c6f4:	3718      	adds	r7, #24
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	40010000 	.word	0x40010000
 800c700:	080134dc 	.word	0x080134dc

0800c704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b086      	sub	sp, #24
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a1b      	ldr	r3, [r3, #32]
 800c712:	f023 0210 	bic.w	r2, r3, #16
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c73a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	021b      	lsls	r3, r3, #8
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	4313      	orrs	r3, r2
 800c746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	f023 0320 	bic.w	r3, r3, #32
 800c74e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	4313      	orrs	r3, r2
 800c75a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a31      	ldr	r2, [pc, #196]	; (800c824 <TIM_OC2_SetConfig+0x120>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d11a      	bne.n	800c79a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d008      	beq.n	800c77e <TIM_OC2_SetConfig+0x7a>
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	2b08      	cmp	r3, #8
 800c772:	d004      	beq.n	800c77e <TIM_OC2_SetConfig+0x7a>
 800c774:	f641 3116 	movw	r1, #6934	; 0x1b16
 800c778:	482b      	ldr	r0, [pc, #172]	; (800c828 <TIM_OC2_SetConfig+0x124>)
 800c77a:	f7f6 fe90 	bl	800349e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	4313      	orrs	r3, r2
 800c790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c798:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a21      	ldr	r2, [pc, #132]	; (800c824 <TIM_OC2_SetConfig+0x120>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d12f      	bne.n	800c802 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	699b      	ldr	r3, [r3, #24]
 800c7a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7aa:	d008      	beq.n	800c7be <TIM_OC2_SetConfig+0xba>
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d004      	beq.n	800c7be <TIM_OC2_SetConfig+0xba>
 800c7b4:	f641 3124 	movw	r1, #6948	; 0x1b24
 800c7b8:	481b      	ldr	r0, [pc, #108]	; (800c828 <TIM_OC2_SetConfig+0x124>)
 800c7ba:	f7f6 fe70 	bl	800349e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c6:	d008      	beq.n	800c7da <TIM_OC2_SetConfig+0xd6>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d004      	beq.n	800c7da <TIM_OC2_SetConfig+0xd6>
 800c7d0:	f641 3125 	movw	r1, #6949	; 0x1b25
 800c7d4:	4814      	ldr	r0, [pc, #80]	; (800c828 <TIM_OC2_SetConfig+0x124>)
 800c7d6:	f7f6 fe62 	bl	800349e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685a      	ldr	r2, [r3, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	621a      	str	r2, [r3, #32]
}
 800c81c:	bf00      	nop
 800c81e:	3718      	adds	r7, #24
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	40010000 	.word	0x40010000
 800c828:	080134dc 	.word	0x080134dc

0800c82c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	69db      	ldr	r3, [r3, #28]
 800c852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f023 0303 	bic.w	r3, r3, #3
 800c862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68fa      	ldr	r2, [r7, #12]
 800c86a:	4313      	orrs	r3, r2
 800c86c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	021b      	lsls	r3, r3, #8
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	4313      	orrs	r3, r2
 800c880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a31      	ldr	r2, [pc, #196]	; (800c94c <TIM_OC3_SetConfig+0x120>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d11a      	bne.n	800c8c0 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d008      	beq.n	800c8a4 <TIM_OC3_SetConfig+0x78>
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	2b08      	cmp	r3, #8
 800c898:	d004      	beq.n	800c8a4 <TIM_OC3_SetConfig+0x78>
 800c89a:	f641 3161 	movw	r1, #7009	; 0x1b61
 800c89e:	482c      	ldr	r0, [pc, #176]	; (800c950 <TIM_OC3_SetConfig+0x124>)
 800c8a0:	f7f6 fdfd 	bl	800349e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	021b      	lsls	r3, r3, #8
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a22      	ldr	r2, [pc, #136]	; (800c94c <TIM_OC3_SetConfig+0x120>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d12f      	bne.n	800c928 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8d0:	d008      	beq.n	800c8e4 <TIM_OC3_SetConfig+0xb8>
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d004      	beq.n	800c8e4 <TIM_OC3_SetConfig+0xb8>
 800c8da:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800c8de:	481c      	ldr	r0, [pc, #112]	; (800c950 <TIM_OC3_SetConfig+0x124>)
 800c8e0:	f7f6 fddd 	bl	800349e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ec:	d008      	beq.n	800c900 <TIM_OC3_SetConfig+0xd4>
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	695b      	ldr	r3, [r3, #20]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d004      	beq.n	800c900 <TIM_OC3_SetConfig+0xd4>
 800c8f6:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800c8fa:	4815      	ldr	r0, [pc, #84]	; (800c950 <TIM_OC3_SetConfig+0x124>)
 800c8fc:	f7f6 fdcf 	bl	800349e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c906:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c90e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	695b      	ldr	r3, [r3, #20]
 800c914:	011b      	lsls	r3, r3, #4
 800c916:	693a      	ldr	r2, [r7, #16]
 800c918:	4313      	orrs	r3, r2
 800c91a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	011b      	lsls	r3, r3, #4
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	4313      	orrs	r3, r2
 800c926:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	685a      	ldr	r2, [r3, #4]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	621a      	str	r2, [r3, #32]
}
 800c942:	bf00      	nop
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	40010000 	.word	0x40010000
 800c950:	080134dc 	.word	0x080134dc

0800c954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	021b      	lsls	r3, r3, #8
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	4313      	orrs	r3, r2
 800c996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c99e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	031b      	lsls	r3, r3, #12
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a16      	ldr	r2, [pc, #88]	; (800ca08 <TIM_OC4_SetConfig+0xb4>)
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	d117      	bne.n	800c9e4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9bc:	d008      	beq.n	800c9d0 <TIM_OC4_SetConfig+0x7c>
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	695b      	ldr	r3, [r3, #20]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d004      	beq.n	800c9d0 <TIM_OC4_SetConfig+0x7c>
 800c9c6:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800c9ca:	4810      	ldr	r0, [pc, #64]	; (800ca0c <TIM_OC4_SetConfig+0xb8>)
 800c9cc:	f7f6 fd67 	bl	800349e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	695b      	ldr	r3, [r3, #20]
 800c9dc:	019b      	lsls	r3, r3, #6
 800c9de:	697a      	ldr	r2, [r7, #20]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	621a      	str	r2, [r3, #32]
}
 800c9fe:	bf00      	nop
 800ca00:	3718      	adds	r7, #24
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	40010000 	.word	0x40010000
 800ca0c:	080134dc 	.word	0x080134dc

0800ca10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
 800ca1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6a1b      	ldr	r3, [r3, #32]
 800ca22:	f023 0201 	bic.w	r2, r3, #1
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6a1b      	ldr	r3, [r3, #32]
 800ca34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	4a24      	ldr	r2, [pc, #144]	; (800cacc <TIM_TI1_SetConfig+0xbc>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d013      	beq.n	800ca66 <TIM_TI1_SetConfig+0x56>
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca44:	d00f      	beq.n	800ca66 <TIM_TI1_SetConfig+0x56>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4a21      	ldr	r2, [pc, #132]	; (800cad0 <TIM_TI1_SetConfig+0xc0>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d00b      	beq.n	800ca66 <TIM_TI1_SetConfig+0x56>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	4a20      	ldr	r2, [pc, #128]	; (800cad4 <TIM_TI1_SetConfig+0xc4>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d007      	beq.n	800ca66 <TIM_TI1_SetConfig+0x56>
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4a1f      	ldr	r2, [pc, #124]	; (800cad8 <TIM_TI1_SetConfig+0xc8>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d003      	beq.n	800ca66 <TIM_TI1_SetConfig+0x56>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	4a1e      	ldr	r2, [pc, #120]	; (800cadc <TIM_TI1_SetConfig+0xcc>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d101      	bne.n	800ca6a <TIM_TI1_SetConfig+0x5a>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e000      	b.n	800ca6c <TIM_TI1_SetConfig+0x5c>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d008      	beq.n	800ca82 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	f023 0303 	bic.w	r3, r3, #3
 800ca76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ca78:	697a      	ldr	r2, [r7, #20]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	617b      	str	r3, [r7, #20]
 800ca80:	e003      	b.n	800ca8a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f043 0301 	orr.w	r3, r3, #1
 800ca88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	011b      	lsls	r3, r3, #4
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f023 030a 	bic.w	r3, r3, #10
 800caa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f003 030a 	and.w	r3, r3, #10
 800caac:	693a      	ldr	r2, [r7, #16]
 800caae:	4313      	orrs	r3, r2
 800cab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	621a      	str	r2, [r3, #32]
}
 800cabe:	bf00      	nop
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	40010000 	.word	0x40010000
 800cad0:	40000400 	.word	0x40000400
 800cad4:	40000800 	.word	0x40000800
 800cad8:	40000c00 	.word	0x40000c00
 800cadc:	40014000 	.word	0x40014000

0800cae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b087      	sub	sp, #28
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6a1b      	ldr	r3, [r3, #32]
 800caf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	f023 0201 	bic.w	r2, r3, #1
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	011b      	lsls	r3, r3, #4
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f023 030a 	bic.w	r3, r3, #10
 800cb1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	4313      	orrs	r3, r2
 800cb24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	621a      	str	r2, [r3, #32]
}
 800cb32:	bf00      	nop
 800cb34:	371c      	adds	r7, #28
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b087      	sub	sp, #28
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
 800cb4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6a1b      	ldr	r3, [r3, #32]
 800cb50:	f023 0210 	bic.w	r2, r3, #16
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	6a1b      	ldr	r3, [r3, #32]
 800cb62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	021b      	lsls	r3, r3, #8
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	031b      	lsls	r3, r3, #12
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cb9a:	693a      	ldr	r2, [r7, #16]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	693a      	ldr	r2, [r7, #16]
 800cbaa:	621a      	str	r2, [r3, #32]
}
 800cbac:	bf00      	nop
 800cbae:	371c      	adds	r7, #28
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b087      	sub	sp, #28
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6a1b      	ldr	r3, [r3, #32]
 800cbc8:	f023 0210 	bic.w	r2, r3, #16
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cbe2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	031b      	lsls	r3, r3, #12
 800cbe8:	697a      	ldr	r2, [r7, #20]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cbf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	011b      	lsls	r3, r3, #4
 800cbfa:	693a      	ldr	r2, [r7, #16]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	697a      	ldr	r2, [r7, #20]
 800cc04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	621a      	str	r2, [r3, #32]
}
 800cc0c:	bf00      	nop
 800cc0e:	371c      	adds	r7, #28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	69db      	ldr	r3, [r3, #28]
 800cc36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6a1b      	ldr	r3, [r3, #32]
 800cc3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f023 0303 	bic.w	r3, r3, #3
 800cc44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	011b      	lsls	r3, r3, #4
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800cc68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	021b      	lsls	r3, r3, #8
 800cc6e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	697a      	ldr	r2, [r7, #20]
 800cc7c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	693a      	ldr	r2, [r7, #16]
 800cc82:	621a      	str	r2, [r3, #32]
}
 800cc84:	bf00      	nop
 800cc86:	371c      	adds	r7, #28
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
 800cc9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a1b      	ldr	r3, [r3, #32]
 800ccb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	021b      	lsls	r3, r3, #8
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ccce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	031b      	lsls	r3, r3, #12
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800cce2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	031b      	lsls	r3, r3, #12
 800cce8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	697a      	ldr	r2, [r7, #20]
 800ccf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	693a      	ldr	r2, [r7, #16]
 800ccfc:	621a      	str	r2, [r3, #32]
}
 800ccfe:	bf00      	nop
 800cd00:	371c      	adds	r7, #28
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	b085      	sub	sp, #20
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
 800cd12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	f043 0307 	orr.w	r3, r3, #7
 800cd2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	609a      	str	r2, [r3, #8]
}
 800cd34:	bf00      	nop
 800cd36:	3714      	adds	r7, #20
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr

0800cd40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b087      	sub	sp, #28
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
 800cd4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	021a      	lsls	r2, r3, #8
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	431a      	orrs	r2, r3
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	697a      	ldr	r2, [r7, #20]
 800cd72:	609a      	str	r2, [r3, #8]
}
 800cd74:	bf00      	nop
 800cd76:	371c      	adds	r7, #28
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	4a2a      	ldr	r2, [pc, #168]	; (800ce38 <TIM_CCxChannelCmd+0xb8>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d020      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd9a:	d01c      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	4a27      	ldr	r2, [pc, #156]	; (800ce3c <TIM_CCxChannelCmd+0xbc>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d018      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	4a26      	ldr	r2, [pc, #152]	; (800ce40 <TIM_CCxChannelCmd+0xc0>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d014      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	4a25      	ldr	r2, [pc, #148]	; (800ce44 <TIM_CCxChannelCmd+0xc4>)
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d010      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	4a24      	ldr	r2, [pc, #144]	; (800ce48 <TIM_CCxChannelCmd+0xc8>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d00c      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4a23      	ldr	r2, [pc, #140]	; (800ce4c <TIM_CCxChannelCmd+0xcc>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d008      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4a22      	ldr	r2, [pc, #136]	; (800ce50 <TIM_CCxChannelCmd+0xd0>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d004      	beq.n	800cdd6 <TIM_CCxChannelCmd+0x56>
 800cdcc:	f641 5198 	movw	r1, #7576	; 0x1d98
 800cdd0:	4820      	ldr	r0, [pc, #128]	; (800ce54 <TIM_CCxChannelCmd+0xd4>)
 800cdd2:	f7f6 fb64 	bl	800349e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d010      	beq.n	800cdfe <TIM_CCxChannelCmd+0x7e>
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	2b04      	cmp	r3, #4
 800cde0:	d00d      	beq.n	800cdfe <TIM_CCxChannelCmd+0x7e>
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b08      	cmp	r3, #8
 800cde6:	d00a      	beq.n	800cdfe <TIM_CCxChannelCmd+0x7e>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	2b0c      	cmp	r3, #12
 800cdec:	d007      	beq.n	800cdfe <TIM_CCxChannelCmd+0x7e>
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2b3c      	cmp	r3, #60	; 0x3c
 800cdf2:	d004      	beq.n	800cdfe <TIM_CCxChannelCmd+0x7e>
 800cdf4:	f641 5199 	movw	r1, #7577	; 0x1d99
 800cdf8:	4816      	ldr	r0, [pc, #88]	; (800ce54 <TIM_CCxChannelCmd+0xd4>)
 800cdfa:	f7f6 fb50 	bl	800349e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	f003 031f 	and.w	r3, r3, #31
 800ce04:	2201      	movs	r2, #1
 800ce06:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6a1a      	ldr	r2, [r3, #32]
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	43db      	mvns	r3, r3
 800ce14:	401a      	ands	r2, r3
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	6a1a      	ldr	r2, [r3, #32]
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	f003 031f 	and.w	r3, r3, #31
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	fa01 f303 	lsl.w	r3, r1, r3
 800ce2a:	431a      	orrs	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	621a      	str	r2, [r3, #32]
}
 800ce30:	bf00      	nop
 800ce32:	3718      	adds	r7, #24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	40010000 	.word	0x40010000
 800ce3c:	40000400 	.word	0x40000400
 800ce40:	40000800 	.word	0x40000800
 800ce44:	40000c00 	.word	0x40000c00
 800ce48:	40014000 	.word	0x40014000
 800ce4c:	40014400 	.word	0x40014400
 800ce50:	40014800 	.word	0x40014800
 800ce54:	080134dc 	.word	0x080134dc

0800ce58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a55      	ldr	r2, [pc, #340]	; (800cfbc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d018      	beq.n	800ce9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce74:	d013      	beq.n	800ce9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a51      	ldr	r2, [pc, #324]	; (800cfc0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d00e      	beq.n	800ce9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a4f      	ldr	r2, [pc, #316]	; (800cfc4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d009      	beq.n	800ce9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a4e      	ldr	r2, [pc, #312]	; (800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d004      	beq.n	800ce9e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800ce94:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800ce98:	484c      	ldr	r0, [pc, #304]	; (800cfcc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800ce9a:	f7f6 fb00 	bl	800349e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d020      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b10      	cmp	r3, #16
 800ceac:	d01c      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b20      	cmp	r3, #32
 800ceb4:	d018      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b30      	cmp	r3, #48	; 0x30
 800cebc:	d014      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b40      	cmp	r3, #64	; 0x40
 800cec4:	d010      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b50      	cmp	r3, #80	; 0x50
 800cecc:	d00c      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b60      	cmp	r3, #96	; 0x60
 800ced4:	d008      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b70      	cmp	r3, #112	; 0x70
 800cedc:	d004      	beq.n	800cee8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800cede:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800cee2:	483a      	ldr	r0, [pc, #232]	; (800cfcc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800cee4:	f7f6 fadb 	bl	800349e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	2b80      	cmp	r3, #128	; 0x80
 800ceee:	d008      	beq.n	800cf02 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d004      	beq.n	800cf02 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800cef8:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800cefc:	4833      	ldr	r0, [pc, #204]	; (800cfcc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800cefe:	f7f6 face 	bl	800349e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d101      	bne.n	800cf10 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e050      	b.n	800cfb2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a1b      	ldr	r2, [pc, #108]	; (800cfbc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d018      	beq.n	800cf86 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf5c:	d013      	beq.n	800cf86 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a17      	ldr	r2, [pc, #92]	; (800cfc0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d00e      	beq.n	800cf86 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a15      	ldr	r2, [pc, #84]	; (800cfc4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d009      	beq.n	800cf86 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a14      	ldr	r2, [pc, #80]	; (800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d004      	beq.n	800cf86 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a13      	ldr	r2, [pc, #76]	; (800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d10c      	bne.n	800cfa0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	40010000 	.word	0x40010000
 800cfc0:	40000400 	.word	0x40000400
 800cfc4:	40000800 	.word	0x40000800
 800cfc8:	40000c00 	.word	0x40000c00
 800cfcc:	08013514 	.word	0x08013514
 800cfd0:	40014000 	.word	0x40014000

0800cfd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a5c      	ldr	r2, [pc, #368]	; (800d158 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d004      	beq.n	800cff6 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 800cfec:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800cff0:	485a      	ldr	r0, [pc, #360]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800cff2:	f7f6 fa54 	bl	800349e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cffe:	d008      	beq.n	800d012 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d004      	beq.n	800d012 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800d008:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800d00c:	4853      	ldr	r0, [pc, #332]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d00e:	f7f6 fa46 	bl	800349e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d01a:	d008      	beq.n	800d02e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d004      	beq.n	800d02e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800d024:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800d028:	484c      	ldr	r0, [pc, #304]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d02a:	f7f6 fa38 	bl	800349e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d013      	beq.n	800d05e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d03e:	d00e      	beq.n	800d05e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d048:	d009      	beq.n	800d05e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d052:	d004      	beq.n	800d05e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d054:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800d058:	4840      	ldr	r0, [pc, #256]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d05a:	f7f6 fa20 	bl	800349e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	2bff      	cmp	r3, #255	; 0xff
 800d064:	d904      	bls.n	800d070 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800d066:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800d06a:	483c      	ldr	r0, [pc, #240]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d06c:	f7f6 fa17 	bl	800349e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d078:	d008      	beq.n	800d08c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	691b      	ldr	r3, [r3, #16]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d004      	beq.n	800d08c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d082:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800d086:	4835      	ldr	r0, [pc, #212]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d088:	f7f6 fa09 	bl	800349e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	695b      	ldr	r3, [r3, #20]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d009      	beq.n	800d0a8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	695b      	ldr	r3, [r3, #20]
 800d098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d09c:	d004      	beq.n	800d0a8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800d09e:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800d0a2:	482e      	ldr	r0, [pc, #184]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d0a4:	f7f6 f9fb 	bl	800349e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	69db      	ldr	r3, [r3, #28]
 800d0ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d0b0:	d008      	beq.n	800d0c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d004      	beq.n	800d0c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800d0ba:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800d0be:	4827      	ldr	r0, [pc, #156]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d0c0:	f7f6 f9ed 	bl	800349e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d101      	bne.n	800d0d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	e03d      	b.n	800d14e <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	4313      	orrs	r3, r2
 800d102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4313      	orrs	r3, r2
 800d110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	69db      	ldr	r3, [r3, #28]
 800d138:	4313      	orrs	r3, r2
 800d13a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d14c:	2300      	movs	r3, #0
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	40010000 	.word	0x40010000
 800d15c:	08013514 	.word	0x08013514

0800d160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d188:	b084      	sub	sp, #16
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b084      	sub	sp, #16
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
 800d192:	f107 001c 	add.w	r0, r7, #28
 800d196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d122      	bne.n	800d1e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d1b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d1c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d105      	bne.n	800d1da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f9a0 	bl	800d520 <USB_CoreReset>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
 800d1e4:	e01a      	b.n	800d21c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 f994 	bl	800d520 <USB_CoreReset>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d106      	bne.n	800d210 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	639a      	str	r2, [r3, #56]	; 0x38
 800d20e:	e005      	b.n	800d21c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d10b      	bne.n	800d23a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	f043 0206 	orr.w	r2, r3, #6
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	f043 0220 	orr.w	r2, r3, #32
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d246:	b004      	add	sp, #16
 800d248:	4770      	bx	lr

0800d24a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b083      	sub	sp, #12
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	f043 0201 	orr.w	r2, r3, #1
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	689b      	ldr	r3, [r3, #8]
 800d278:	f023 0201 	bic.w	r2, r3, #1
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b084      	sub	sp, #16
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
 800d296:	460b      	mov	r3, r1
 800d298:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d29a:	2300      	movs	r3, #0
 800d29c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d115      	bne.n	800d2dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d2bc:	2001      	movs	r0, #1
 800d2be:	f7f7 fa09 	bl	80046d4 <HAL_Delay>
      ms++;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f91a 	bl	800d502 <USB_GetMode>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d01e      	beq.n	800d312 <USB_SetCurrentMode+0x84>
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b31      	cmp	r3, #49	; 0x31
 800d2d8:	d9f0      	bls.n	800d2bc <USB_SetCurrentMode+0x2e>
 800d2da:	e01a      	b.n	800d312 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d2dc:	78fb      	ldrb	r3, [r7, #3]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d115      	bne.n	800d30e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	68db      	ldr	r3, [r3, #12]
 800d2e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	f7f7 f9f0 	bl	80046d4 <HAL_Delay>
      ms++;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f901 	bl	800d502 <USB_GetMode>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <USB_SetCurrentMode+0x84>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2b31      	cmp	r3, #49	; 0x31
 800d30a:	d9f0      	bls.n	800d2ee <USB_SetCurrentMode+0x60>
 800d30c:	e001      	b.n	800d312 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	e005      	b.n	800d31e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b32      	cmp	r3, #50	; 0x32
 800d316:	d101      	bne.n	800d31c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e000      	b.n	800d31e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
	...

0800d328 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d332:	2300      	movs	r3, #0
 800d334:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	019b      	lsls	r3, r3, #6
 800d33a:	f043 0220 	orr.w	r2, r3, #32
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	3301      	adds	r3, #1
 800d346:	60fb      	str	r3, [r7, #12]
 800d348:	4a08      	ldr	r2, [pc, #32]	; (800d36c <USB_FlushTxFifo+0x44>)
 800d34a:	4293      	cmp	r3, r2
 800d34c:	d901      	bls.n	800d352 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800d34e:	2303      	movs	r3, #3
 800d350:	e006      	b.n	800d360 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	691b      	ldr	r3, [r3, #16]
 800d356:	f003 0320 	and.w	r3, r3, #32
 800d35a:	2b20      	cmp	r3, #32
 800d35c:	d0f1      	beq.n	800d342 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	00030d40 	.word	0x00030d40

0800d370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2210      	movs	r2, #16
 800d380:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3301      	adds	r3, #1
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	4a08      	ldr	r2, [pc, #32]	; (800d3ac <USB_FlushRxFifo+0x3c>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d901      	bls.n	800d392 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800d38e:	2303      	movs	r3, #3
 800d390:	e006      	b.n	800d3a0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	f003 0310 	and.w	r3, r3, #16
 800d39a:	2b10      	cmp	r3, #16
 800d39c:	d0f1      	beq.n	800d382 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	00030d40 	.word	0x00030d40

0800d3b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b089      	sub	sp, #36	; 0x24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	461a      	mov	r2, r3
 800d3be:	460b      	mov	r3, r1
 800d3c0:	71fb      	strb	r3, [r7, #7]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d3ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d123      	bne.n	800d41e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d3d6:	88bb      	ldrh	r3, [r7, #4]
 800d3d8:	3303      	adds	r3, #3
 800d3da:	089b      	lsrs	r3, r3, #2
 800d3dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d3de:	2300      	movs	r3, #0
 800d3e0:	61bb      	str	r3, [r7, #24]
 800d3e2:	e018      	b.n	800d416 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d3e4:	79fb      	ldrb	r3, [r7, #7]
 800d3e6:	031a      	lsls	r2, r3, #12
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	3301      	adds	r3, #1
 800d402:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	3301      	adds	r3, #1
 800d408:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	3301      	adds	r3, #1
 800d40e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	3301      	adds	r3, #1
 800d414:	61bb      	str	r3, [r7, #24]
 800d416:	69ba      	ldr	r2, [r7, #24]
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d3e2      	bcc.n	800d3e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3724      	adds	r7, #36	; 0x24
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b08b      	sub	sp, #44	; 0x2c
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	4613      	mov	r3, r2
 800d438:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d442:	88fb      	ldrh	r3, [r7, #6]
 800d444:	089b      	lsrs	r3, r3, #2
 800d446:	b29b      	uxth	r3, r3
 800d448:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d44a:	88fb      	ldrh	r3, [r7, #6]
 800d44c:	f003 0303 	and.w	r3, r3, #3
 800d450:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d452:	2300      	movs	r3, #0
 800d454:	623b      	str	r3, [r7, #32]
 800d456:	e014      	b.n	800d482 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	601a      	str	r2, [r3, #0]
    pDest++;
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	3301      	adds	r3, #1
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	3301      	adds	r3, #1
 800d46e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	3301      	adds	r3, #1
 800d474:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d478:	3301      	adds	r3, #1
 800d47a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d47c:	6a3b      	ldr	r3, [r7, #32]
 800d47e:	3301      	adds	r3, #1
 800d480:	623b      	str	r3, [r7, #32]
 800d482:	6a3a      	ldr	r2, [r7, #32]
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	429a      	cmp	r2, r3
 800d488:	d3e6      	bcc.n	800d458 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d48a:	8bfb      	ldrh	r3, [r7, #30]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01e      	beq.n	800d4ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d490:	2300      	movs	r3, #0
 800d492:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49a:	461a      	mov	r2, r3
 800d49c:	f107 0310 	add.w	r3, r7, #16
 800d4a0:	6812      	ldr	r2, [r2, #0]
 800d4a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d4a4:	693a      	ldr	r2, [r7, #16]
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	00db      	lsls	r3, r3, #3
 800d4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d4b0:	b2da      	uxtb	r2, r3
 800d4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b4:	701a      	strb	r2, [r3, #0]
      i++;
 800d4b6:	6a3b      	ldr	r3, [r7, #32]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	623b      	str	r3, [r7, #32]
      pDest++;
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	3301      	adds	r3, #1
 800d4c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d4c2:	8bfb      	ldrh	r3, [r7, #30]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d4c8:	8bfb      	ldrh	r3, [r7, #30]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1ea      	bne.n	800d4a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	372c      	adds	r7, #44	; 0x2c
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	695b      	ldr	r3, [r3, #20]
 800d4e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	699b      	ldr	r3, [r3, #24]
 800d4ee:	68fa      	ldr	r2, [r7, #12]
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d502:	b480      	push	{r7}
 800d504:	b083      	sub	sp, #12
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	695b      	ldr	r3, [r3, #20]
 800d50e:	f003 0301 	and.w	r3, r3, #1
}
 800d512:	4618      	mov	r0, r3
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
	...

0800d520 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d528:	2300      	movs	r3, #0
 800d52a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3301      	adds	r3, #1
 800d530:	60fb      	str	r3, [r7, #12]
 800d532:	4a13      	ldr	r2, [pc, #76]	; (800d580 <USB_CoreReset+0x60>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d901      	bls.n	800d53c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800d538:	2303      	movs	r3, #3
 800d53a:	e01a      	b.n	800d572 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	691b      	ldr	r3, [r3, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	daf3      	bge.n	800d52c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	f043 0201 	orr.w	r2, r3, #1
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	3301      	adds	r3, #1
 800d558:	60fb      	str	r3, [r7, #12]
 800d55a:	4a09      	ldr	r2, [pc, #36]	; (800d580 <USB_CoreReset+0x60>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d901      	bls.n	800d564 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e006      	b.n	800d572 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d0f1      	beq.n	800d554 <USB_CoreReset+0x34>

  return HAL_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3714      	adds	r7, #20
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	00030d40 	.word	0x00030d40

0800d584 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d584:	b084      	sub	sp, #16
 800d586:	b580      	push	{r7, lr}
 800d588:	b084      	sub	sp, #16
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	f107 001c 	add.w	r0, r7, #28
 800d592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d018      	beq.n	800d608 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d10a      	bne.n	800d5f2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d5ea:	f043 0304 	orr.w	r3, r3, #4
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	e014      	b.n	800d61c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d600:	f023 0304 	bic.w	r3, r3, #4
 800d604:	6013      	str	r3, [r2, #0]
 800d606:	e009      	b.n	800d61c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d616:	f023 0304 	bic.w	r3, r3, #4
 800d61a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d61c:	2110      	movs	r1, #16
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7ff fe82 	bl	800d328 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff fea3 	bl	800d370 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]
 800d62e:	e015      	b.n	800d65c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	015a      	lsls	r2, r3, #5
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	4413      	add	r3, r2
 800d638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d63c:	461a      	mov	r2, r3
 800d63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d642:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	015a      	lsls	r2, r3, #5
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	4413      	add	r3, r2
 800d64c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d650:	461a      	mov	r2, r3
 800d652:	2300      	movs	r3, #0
 800d654:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	3301      	adds	r3, #1
 800d65a:	60fb      	str	r3, [r7, #12]
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	429a      	cmp	r2, r3
 800d662:	d3e5      	bcc.n	800d630 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d670:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00b      	beq.n	800d696 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d684:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a13      	ldr	r2, [pc, #76]	; (800d6d8 <USB_HostInit+0x154>)
 800d68a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a13      	ldr	r2, [pc, #76]	; (800d6dc <USB_HostInit+0x158>)
 800d690:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d694:	e009      	b.n	800d6aa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2280      	movs	r2, #128	; 0x80
 800d69a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a10      	ldr	r2, [pc, #64]	; (800d6e0 <USB_HostInit+0x15c>)
 800d6a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a0f      	ldr	r2, [pc, #60]	; (800d6e4 <USB_HostInit+0x160>)
 800d6a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d105      	bne.n	800d6bc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	f043 0210 	orr.w	r2, r3, #16
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	699a      	ldr	r2, [r3, #24]
 800d6c0:	4b09      	ldr	r3, [pc, #36]	; (800d6e8 <USB_HostInit+0x164>)
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6d4:	b004      	add	sp, #16
 800d6d6:	4770      	bx	lr
 800d6d8:	01000200 	.word	0x01000200
 800d6dc:	00e00300 	.word	0x00e00300
 800d6e0:	00600080 	.word	0x00600080
 800d6e4:	004000e0 	.word	0x004000e0
 800d6e8:	a3200008 	.word	0xa3200008

0800d6ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d70a:	f023 0303 	bic.w	r3, r3, #3
 800d70e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d716:	681a      	ldr	r2, [r3, #0]
 800d718:	78fb      	ldrb	r3, [r7, #3]
 800d71a:	f003 0303 	and.w	r3, r3, #3
 800d71e:	68f9      	ldr	r1, [r7, #12]
 800d720:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d724:	4313      	orrs	r3, r2
 800d726:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d728:	78fb      	ldrb	r3, [r7, #3]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d107      	bne.n	800d73e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d734:	461a      	mov	r2, r3
 800d736:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d73a:	6053      	str	r3, [r2, #4]
 800d73c:	e009      	b.n	800d752 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d73e:	78fb      	ldrb	r3, [r7, #3]
 800d740:	2b02      	cmp	r3, #2
 800d742:	d106      	bne.n	800d752 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d74a:	461a      	mov	r2, r3
 800d74c:	f241 7370 	movw	r3, #6000	; 0x1770
 800d750:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d752:	2300      	movs	r3, #0
}
 800d754:	4618      	mov	r0, r3
 800d756:	3714      	adds	r7, #20
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d76c:	2300      	movs	r3, #0
 800d76e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d780:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d78a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d78e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d790:	2064      	movs	r0, #100	; 0x64
 800d792:	f7f6 ff9f 	bl	80046d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d79e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d7a4:	200a      	movs	r0, #10
 800d7a6:	f7f6 ff95 	bl	80046d4 <HAL_Delay>

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d7d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d109      	bne.n	800d7f8 <USB_DriveVbus+0x44>
 800d7e4:	78fb      	ldrb	r3, [r7, #3]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d106      	bne.n	800d7f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d7f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d7f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d802:	d109      	bne.n	800d818 <USB_DriveVbus+0x64>
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d106      	bne.n	800d818 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d816:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d826:	b480      	push	{r7}
 800d828:	b085      	sub	sp, #20
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d832:	2300      	movs	r3, #0
 800d834:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	0c5b      	lsrs	r3, r3, #17
 800d844:	f003 0303 	and.w	r3, r3, #3
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	b29b      	uxth	r3, r3
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
	...

0800d878 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	4608      	mov	r0, r1
 800d882:	4611      	mov	r1, r2
 800d884:	461a      	mov	r2, r3
 800d886:	4603      	mov	r3, r0
 800d888:	70fb      	strb	r3, [r7, #3]
 800d88a:	460b      	mov	r3, r1
 800d88c:	70bb      	strb	r3, [r7, #2]
 800d88e:	4613      	mov	r3, r2
 800d890:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d892:	2300      	movs	r3, #0
 800d894:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d89a:	78fb      	ldrb	r3, [r7, #3]
 800d89c:	015a      	lsls	r2, r3, #5
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d8ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d8b2:	2b03      	cmp	r3, #3
 800d8b4:	d87e      	bhi.n	800d9b4 <USB_HC_Init+0x13c>
 800d8b6:	a201      	add	r2, pc, #4	; (adr r2, 800d8bc <USB_HC_Init+0x44>)
 800d8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8bc:	0800d8cd 	.word	0x0800d8cd
 800d8c0:	0800d977 	.word	0x0800d977
 800d8c4:	0800d8cd 	.word	0x0800d8cd
 800d8c8:	0800d939 	.word	0x0800d939
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d8cc:	78fb      	ldrb	r3, [r7, #3]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8d8:	461a      	mov	r2, r3
 800d8da:	f240 439d 	movw	r3, #1181	; 0x49d
 800d8de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d8e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	da10      	bge.n	800d90a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d8e8:	78fb      	ldrb	r3, [r7, #3]
 800d8ea:	015a      	lsls	r2, r3, #5
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	78fa      	ldrb	r2, [r7, #3]
 800d8f8:	0151      	lsls	r1, r2, #5
 800d8fa:	693a      	ldr	r2, [r7, #16]
 800d8fc:	440a      	add	r2, r1
 800d8fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d906:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d908:	e057      	b.n	800d9ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d912:	2b00      	cmp	r3, #0
 800d914:	d051      	beq.n	800d9ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d916:	78fb      	ldrb	r3, [r7, #3]
 800d918:	015a      	lsls	r2, r3, #5
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	4413      	add	r3, r2
 800d91e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	78fa      	ldrb	r2, [r7, #3]
 800d926:	0151      	lsls	r1, r2, #5
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	440a      	add	r2, r1
 800d92c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d930:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d934:	60d3      	str	r3, [r2, #12]
      break;
 800d936:	e040      	b.n	800d9ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d938:	78fb      	ldrb	r3, [r7, #3]
 800d93a:	015a      	lsls	r2, r3, #5
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	4413      	add	r3, r2
 800d940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d944:	461a      	mov	r2, r3
 800d946:	f240 639d 	movw	r3, #1693	; 0x69d
 800d94a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d94c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d950:	2b00      	cmp	r3, #0
 800d952:	da34      	bge.n	800d9be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	015a      	lsls	r2, r3, #5
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	4413      	add	r3, r2
 800d95c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	78fa      	ldrb	r2, [r7, #3]
 800d964:	0151      	lsls	r1, r2, #5
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	440a      	add	r2, r1
 800d96a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d96e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d972:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d974:	e023      	b.n	800d9be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d976:	78fb      	ldrb	r3, [r7, #3]
 800d978:	015a      	lsls	r2, r3, #5
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	4413      	add	r3, r2
 800d97e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d982:	461a      	mov	r2, r3
 800d984:	f240 2325 	movw	r3, #549	; 0x225
 800d988:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d98a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	da17      	bge.n	800d9c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d992:	78fb      	ldrb	r3, [r7, #3]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	78fa      	ldrb	r2, [r7, #3]
 800d9a2:	0151      	lsls	r1, r2, #5
 800d9a4:	693a      	ldr	r2, [r7, #16]
 800d9a6:	440a      	add	r2, r1
 800d9a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d9b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d9b2:	e006      	b.n	800d9c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	77fb      	strb	r3, [r7, #31]
      break;
 800d9b8:	e004      	b.n	800d9c4 <USB_HC_Init+0x14c>
      break;
 800d9ba:	bf00      	nop
 800d9bc:	e002      	b.n	800d9c4 <USB_HC_Init+0x14c>
      break;
 800d9be:	bf00      	nop
 800d9c0:	e000      	b.n	800d9c4 <USB_HC_Init+0x14c>
      break;
 800d9c2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d9ca:	699a      	ldr	r2, [r3, #24]
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	f003 030f 	and.w	r3, r3, #15
 800d9d2:	2101      	movs	r1, #1
 800d9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d9d8:	6939      	ldr	r1, [r7, #16]
 800d9da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	699b      	ldr	r3, [r3, #24]
 800d9e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d9ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	da03      	bge.n	800d9fe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d9f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d9fa:	61bb      	str	r3, [r7, #24]
 800d9fc:	e001      	b.n	800da02 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d9fe:	2300      	movs	r3, #0
 800da00:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7ff ff0f 	bl	800d826 <USB_GetHostSpeed>
 800da08:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800da0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800da0e:	2b02      	cmp	r3, #2
 800da10:	d106      	bne.n	800da20 <USB_HC_Init+0x1a8>
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b02      	cmp	r3, #2
 800da16:	d003      	beq.n	800da20 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800da18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da1c:	617b      	str	r3, [r7, #20]
 800da1e:	e001      	b.n	800da24 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800da20:	2300      	movs	r3, #0
 800da22:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da24:	787b      	ldrb	r3, [r7, #1]
 800da26:	059b      	lsls	r3, r3, #22
 800da28:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800da2c:	78bb      	ldrb	r3, [r7, #2]
 800da2e:	02db      	lsls	r3, r3, #11
 800da30:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da34:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800da36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da3a:	049b      	lsls	r3, r3, #18
 800da3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800da40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800da44:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800da48:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	0159      	lsls	r1, r3, #5
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	440b      	add	r3, r1
 800da56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da5a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800da60:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800da62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da66:	2b03      	cmp	r3, #3
 800da68:	d10f      	bne.n	800da8a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800da6a:	78fb      	ldrb	r3, [r7, #3]
 800da6c:	015a      	lsls	r2, r3, #5
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	4413      	add	r3, r2
 800da72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	78fa      	ldrb	r2, [r7, #3]
 800da7a:	0151      	lsls	r1, r2, #5
 800da7c:	693a      	ldr	r2, [r7, #16]
 800da7e:	440a      	add	r2, r1
 800da80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800da8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3720      	adds	r7, #32
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b08c      	sub	sp, #48	; 0x30
 800da98:	af02      	add	r7, sp, #8
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	4613      	mov	r3, r2
 800daa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	785b      	ldrb	r3, [r3, #1]
 800daaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800daac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dab0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d02d      	beq.n	800db1a <USB_HC_StartXfer+0x86>
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	791b      	ldrb	r3, [r3, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d129      	bne.n	800db1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d117      	bne.n	800dafc <USB_HC_StartXfer+0x68>
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	79db      	ldrb	r3, [r3, #7]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d003      	beq.n	800dadc <USB_HC_StartXfer+0x48>
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	79db      	ldrb	r3, [r3, #7]
 800dad8:	2b02      	cmp	r3, #2
 800dada:	d10f      	bne.n	800dafc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	015a      	lsls	r2, r3, #5
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	4413      	add	r3, r2
 800dae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	69fa      	ldr	r2, [r7, #28]
 800daec:	0151      	lsls	r1, r2, #5
 800daee:	6a3a      	ldr	r2, [r7, #32]
 800daf0:	440a      	add	r2, r1
 800daf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800daf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dafa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d10b      	bne.n	800db1a <USB_HC_StartXfer+0x86>
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	795b      	ldrb	r3, [r3, #5]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d107      	bne.n	800db1a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	785b      	ldrb	r3, [r3, #1]
 800db0e:	4619      	mov	r1, r3
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f000 fa2f 	bl	800df74 <USB_DoPing>
      return HAL_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	e0f8      	b.n	800dd0c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	695b      	ldr	r3, [r3, #20]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d018      	beq.n	800db54 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	8912      	ldrh	r2, [r2, #8]
 800db2a:	4413      	add	r3, r2
 800db2c:	3b01      	subs	r3, #1
 800db2e:	68ba      	ldr	r2, [r7, #8]
 800db30:	8912      	ldrh	r2, [r2, #8]
 800db32:	fbb3 f3f2 	udiv	r3, r3, r2
 800db36:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800db38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db3a:	8b7b      	ldrh	r3, [r7, #26]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d90b      	bls.n	800db58 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800db40:	8b7b      	ldrh	r3, [r7, #26]
 800db42:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800db44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	8912      	ldrh	r2, [r2, #8]
 800db4a:	fb02 f203 	mul.w	r2, r2, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	611a      	str	r2, [r3, #16]
 800db52:	e001      	b.n	800db58 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800db54:	2301      	movs	r3, #1
 800db56:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	78db      	ldrb	r3, [r3, #3]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d007      	beq.n	800db70 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800db60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	8912      	ldrh	r2, [r2, #8]
 800db66:	fb02 f203 	mul.w	r2, r2, r3
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	611a      	str	r2, [r3, #16]
 800db6e:	e003      	b.n	800db78 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	695a      	ldr	r2, [r3, #20]
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800db80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db82:	04d9      	lsls	r1, r3, #19
 800db84:	4b63      	ldr	r3, [pc, #396]	; (800dd14 <USB_HC_StartXfer+0x280>)
 800db86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800db88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	7a9b      	ldrb	r3, [r3, #10]
 800db8e:	075b      	lsls	r3, r3, #29
 800db90:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800db94:	69f9      	ldr	r1, [r7, #28]
 800db96:	0148      	lsls	r0, r1, #5
 800db98:	6a39      	ldr	r1, [r7, #32]
 800db9a:	4401      	add	r1, r0
 800db9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dba0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dba2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dba4:	79fb      	ldrb	r3, [r7, #7]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d009      	beq.n	800dbbe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	68d9      	ldr	r1, [r3, #12]
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	015a      	lsls	r2, r3, #5
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbba:	460a      	mov	r2, r1
 800dbbc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	bf0c      	ite	eq
 800dbce:	2301      	moveq	r3, #1
 800dbd0:	2300      	movne	r3, #0
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	69fa      	ldr	r2, [r7, #28]
 800dbe6:	0151      	lsls	r1, r2, #5
 800dbe8:	6a3a      	ldr	r2, [r7, #32]
 800dbea:	440a      	add	r2, r1
 800dbec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dbf4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	015a      	lsls	r2, r3, #5
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	7e7b      	ldrb	r3, [r7, #25]
 800dc06:	075b      	lsls	r3, r3, #29
 800dc08:	69f9      	ldr	r1, [r7, #28]
 800dc0a:	0148      	lsls	r0, r1, #5
 800dc0c:	6a39      	ldr	r1, [r7, #32]
 800dc0e:	4401      	add	r1, r0
 800dc10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dc14:	4313      	orrs	r3, r2
 800dc16:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	015a      	lsls	r2, r3, #5
 800dc1c:	6a3b      	ldr	r3, [r7, #32]
 800dc1e:	4413      	add	r3, r2
 800dc20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dc2e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	78db      	ldrb	r3, [r3, #3]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d004      	beq.n	800dc42 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc3e:	613b      	str	r3, [r7, #16]
 800dc40:	e003      	b.n	800dc4a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dc48:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dc50:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	015a      	lsls	r2, r3, #5
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	4413      	add	r3, r2
 800dc5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc5e:	461a      	mov	r2, r3
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dc64:	79fb      	ldrb	r3, [r7, #7]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d001      	beq.n	800dc6e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e04e      	b.n	800dd0c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	78db      	ldrb	r3, [r3, #3]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d149      	bne.n	800dd0a <USB_HC_StartXfer+0x276>
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	695b      	ldr	r3, [r3, #20]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d045      	beq.n	800dd0a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	79db      	ldrb	r3, [r3, #7]
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d830      	bhi.n	800dce8 <USB_HC_StartXfer+0x254>
 800dc86:	a201      	add	r2, pc, #4	; (adr r2, 800dc8c <USB_HC_StartXfer+0x1f8>)
 800dc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8c:	0800dc9d 	.word	0x0800dc9d
 800dc90:	0800dcc1 	.word	0x0800dcc1
 800dc94:	0800dc9d 	.word	0x0800dc9d
 800dc98:	0800dcc1 	.word	0x0800dcc1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	695b      	ldr	r3, [r3, #20]
 800dca0:	3303      	adds	r3, #3
 800dca2:	089b      	lsrs	r3, r3, #2
 800dca4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dca6:	8afa      	ldrh	r2, [r7, #22]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d91c      	bls.n	800dcec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	699b      	ldr	r3, [r3, #24]
 800dcb6:	f043 0220 	orr.w	r2, r3, #32
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	619a      	str	r2, [r3, #24]
        }
        break;
 800dcbe:	e015      	b.n	800dcec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	695b      	ldr	r3, [r3, #20]
 800dcc4:	3303      	adds	r3, #3
 800dcc6:	089b      	lsrs	r3, r3, #2
 800dcc8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dcca:	8afa      	ldrh	r2, [r7, #22]
 800dccc:	6a3b      	ldr	r3, [r7, #32]
 800dcce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dcd2:	691b      	ldr	r3, [r3, #16]
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d90a      	bls.n	800dcf0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	699b      	ldr	r3, [r3, #24]
 800dcde:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	619a      	str	r2, [r3, #24]
        }
        break;
 800dce6:	e003      	b.n	800dcf0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800dce8:	bf00      	nop
 800dcea:	e002      	b.n	800dcf2 <USB_HC_StartXfer+0x25e>
        break;
 800dcec:	bf00      	nop
 800dcee:	e000      	b.n	800dcf2 <USB_HC_StartXfer+0x25e>
        break;
 800dcf0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	68d9      	ldr	r1, [r3, #12]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	785a      	ldrb	r2, [r3, #1]
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	695b      	ldr	r3, [r3, #20]
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	2000      	movs	r0, #0
 800dd02:	9000      	str	r0, [sp, #0]
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f7ff fb53 	bl	800d3b0 <USB_WritePacket>
  }

  return HAL_OK;
 800dd0a:	2300      	movs	r3, #0
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3728      	adds	r7, #40	; 0x28
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	1ff80000 	.word	0x1ff80000

0800dd18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	b29b      	uxth	r3, r3
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr

0800dd3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800dd3a:	b480      	push	{r7}
 800dd3c:	b089      	sub	sp, #36	; 0x24
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	6078      	str	r0, [r7, #4]
 800dd42:	460b      	mov	r3, r1
 800dd44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800dd4a:	78fb      	ldrb	r3, [r7, #3]
 800dd4c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	015a      	lsls	r2, r3, #5
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	4413      	add	r3, r2
 800dd5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	0c9b      	lsrs	r3, r3, #18
 800dd62:	f003 0303 	and.w	r3, r3, #3
 800dd66:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	015a      	lsls	r2, r3, #5
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	4413      	add	r3, r2
 800dd70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	0fdb      	lsrs	r3, r3, #31
 800dd78:	f003 0301 	and.w	r3, r3, #1
 800dd7c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f003 0320 	and.w	r3, r3, #32
 800dd86:	2b20      	cmp	r3, #32
 800dd88:	d104      	bne.n	800dd94 <USB_HC_Halt+0x5a>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d101      	bne.n	800dd94 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	e0e8      	b.n	800df66 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d002      	beq.n	800dda0 <USB_HC_Halt+0x66>
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	2b02      	cmp	r3, #2
 800dd9e:	d173      	bne.n	800de88 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	0151      	lsls	r1, r2, #5
 800ddb2:	69ba      	ldr	r2, [r7, #24]
 800ddb4:	440a      	add	r2, r1
 800ddb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddbe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	f003 0320 	and.w	r3, r3, #32
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f040 80cb 	bne.w	800df64 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d143      	bne.n	800de62 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	015a      	lsls	r2, r3, #5
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	4413      	add	r3, r2
 800dde2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	0151      	lsls	r1, r2, #5
 800ddec:	69ba      	ldr	r2, [r7, #24]
 800ddee:	440a      	add	r2, r1
 800ddf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddf8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	015a      	lsls	r2, r3, #5
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	4413      	add	r3, r2
 800de02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	0151      	lsls	r1, r2, #5
 800de0c:	69ba      	ldr	r2, [r7, #24]
 800de0e:	440a      	add	r2, r1
 800de10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de18:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	015a      	lsls	r2, r3, #5
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	4413      	add	r3, r2
 800de22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	0151      	lsls	r1, r2, #5
 800de2c:	69ba      	ldr	r2, [r7, #24]
 800de2e:	440a      	add	r2, r1
 800de30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de38:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	3301      	adds	r3, #1
 800de3e:	61fb      	str	r3, [r7, #28]
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800de46:	d81d      	bhi.n	800de84 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	015a      	lsls	r2, r3, #5
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	4413      	add	r3, r2
 800de50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de5e:	d0ec      	beq.n	800de3a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de60:	e080      	b.n	800df64 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	015a      	lsls	r2, r3, #5
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	4413      	add	r3, r2
 800de6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	0151      	lsls	r1, r2, #5
 800de74:	69ba      	ldr	r2, [r7, #24]
 800de76:	440a      	add	r2, r1
 800de78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de80:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de82:	e06f      	b.n	800df64 <USB_HC_Halt+0x22a>
            break;
 800de84:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800de86:	e06d      	b.n	800df64 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	697a      	ldr	r2, [r7, #20]
 800de98:	0151      	lsls	r1, r2, #5
 800de9a:	69ba      	ldr	r2, [r7, #24]
 800de9c:	440a      	add	r2, r1
 800de9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800dea6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800deae:	691b      	ldr	r3, [r3, #16]
 800deb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d143      	bne.n	800df40 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	015a      	lsls	r2, r3, #5
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	4413      	add	r3, r2
 800dec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	697a      	ldr	r2, [r7, #20]
 800dec8:	0151      	lsls	r1, r2, #5
 800deca:	69ba      	ldr	r2, [r7, #24]
 800decc:	440a      	add	r2, r1
 800dece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ded2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ded6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	015a      	lsls	r2, r3, #5
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	4413      	add	r3, r2
 800dee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	697a      	ldr	r2, [r7, #20]
 800dee8:	0151      	lsls	r1, r2, #5
 800deea:	69ba      	ldr	r2, [r7, #24]
 800deec:	440a      	add	r2, r1
 800deee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800def2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800def6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	015a      	lsls	r2, r3, #5
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	4413      	add	r3, r2
 800df00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	697a      	ldr	r2, [r7, #20]
 800df08:	0151      	lsls	r1, r2, #5
 800df0a:	69ba      	ldr	r2, [r7, #24]
 800df0c:	440a      	add	r2, r1
 800df0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800df16:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	3301      	adds	r3, #1
 800df1c:	61fb      	str	r3, [r7, #28]
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df24:	d81d      	bhi.n	800df62 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	015a      	lsls	r2, r3, #5
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	4413      	add	r3, r2
 800df2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df3c:	d0ec      	beq.n	800df18 <USB_HC_Halt+0x1de>
 800df3e:	e011      	b.n	800df64 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	015a      	lsls	r2, r3, #5
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	4413      	add	r3, r2
 800df48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	697a      	ldr	r2, [r7, #20]
 800df50:	0151      	lsls	r1, r2, #5
 800df52:	69ba      	ldr	r2, [r7, #24]
 800df54:	440a      	add	r2, r1
 800df56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df5e:	6013      	str	r3, [r2, #0]
 800df60:	e000      	b.n	800df64 <USB_HC_Halt+0x22a>
          break;
 800df62:	bf00      	nop
    }
  }

  return HAL_OK;
 800df64:	2300      	movs	r3, #0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3724      	adds	r7, #36	; 0x24
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
	...

0800df74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	460b      	mov	r3, r1
 800df7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800df84:	78fb      	ldrb	r3, [r7, #3]
 800df86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800df88:	2301      	movs	r3, #1
 800df8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	04da      	lsls	r2, r3, #19
 800df90:	4b15      	ldr	r3, [pc, #84]	; (800dfe8 <USB_DoPing+0x74>)
 800df92:	4013      	ands	r3, r2
 800df94:	693a      	ldr	r2, [r7, #16]
 800df96:	0151      	lsls	r1, r2, #5
 800df98:	697a      	ldr	r2, [r7, #20]
 800df9a:	440a      	add	r2, r1
 800df9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfa4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	015a      	lsls	r2, r3, #5
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	4413      	add	r3, r2
 800dfae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dfbc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfc4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	015a      	lsls	r2, r3, #5
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	4413      	add	r3, r2
 800dfce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	371c      	adds	r7, #28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	1ff80000 	.word	0x1ff80000

0800dfec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff f935 	bl	800d26c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e002:	2110      	movs	r1, #16
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff f98f 	bl	800d328 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7ff f9b0 	bl	800d370 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e010:	2300      	movs	r3, #0
 800e012:	613b      	str	r3, [r7, #16]
 800e014:	e01f      	b.n	800e056 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	015a      	lsls	r2, r3, #5
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	4413      	add	r3, r2
 800e01e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e02c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e034:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e03c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	015a      	lsls	r2, r3, #5
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	4413      	add	r3, r2
 800e046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e04a:	461a      	mov	r2, r3
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	3301      	adds	r3, #1
 800e054:	613b      	str	r3, [r7, #16]
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2b0f      	cmp	r3, #15
 800e05a:	d9dc      	bls.n	800e016 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e05c:	2300      	movs	r3, #0
 800e05e:	613b      	str	r3, [r7, #16]
 800e060:	e034      	b.n	800e0cc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	015a      	lsls	r2, r3, #5
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	4413      	add	r3, r2
 800e06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e078:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e080:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e088:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	015a      	lsls	r2, r3, #5
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	4413      	add	r3, r2
 800e092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e096:	461a      	mov	r2, r3
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0a8:	d80c      	bhi.n	800e0c4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	015a      	lsls	r2, r3, #5
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	4413      	add	r3, r2
 800e0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0c0:	d0ec      	beq.n	800e09c <USB_StopHost+0xb0>
 800e0c2:	e000      	b.n	800e0c6 <USB_StopHost+0xda>
        break;
 800e0c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	613b      	str	r3, [r7, #16]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	2b0f      	cmp	r3, #15
 800e0d0:	d9c7      	bls.n	800e062 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e0d8:	461a      	mov	r2, r3
 800e0da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff f8ae 	bl	800d24a <USB_EnableGlobalInt>

  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3718      	adds	r7, #24
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e0f8:	b590      	push	{r4, r7, lr}
 800e0fa:	b089      	sub	sp, #36	; 0x24
 800e0fc:	af04      	add	r7, sp, #16
 800e0fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e100:	2301      	movs	r3, #1
 800e102:	2202      	movs	r2, #2
 800e104:	2102      	movs	r1, #2
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 fc66 	bl	800e9d8 <USBH_FindInterface>
 800e10c:	4603      	mov	r3, r0
 800e10e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	2bff      	cmp	r3, #255	; 0xff
 800e114:	d002      	beq.n	800e11c <USBH_CDC_InterfaceInit+0x24>
 800e116:	7bfb      	ldrb	r3, [r7, #15]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	d901      	bls.n	800e120 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e11c:	2302      	movs	r3, #2
 800e11e:	e13d      	b.n	800e39c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e120:	7bfb      	ldrb	r3, [r7, #15]
 800e122:	4619      	mov	r1, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fc3b 	bl	800e9a0 <USBH_SelectInterface>
 800e12a:	4603      	mov	r3, r0
 800e12c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e12e:	7bbb      	ldrb	r3, [r7, #14]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e134:	2302      	movs	r3, #2
 800e136:	e131      	b.n	800e39c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e13e:	2050      	movs	r0, #80	; 0x50
 800e140:	f002 fa00 	bl	8010544 <malloc>
 800e144:	4603      	mov	r3, r0
 800e146:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e14e:	69db      	ldr	r3, [r3, #28]
 800e150:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d101      	bne.n	800e15c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e158:	2302      	movs	r3, #2
 800e15a:	e11f      	b.n	800e39c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e15c:	2250      	movs	r2, #80	; 0x50
 800e15e:	2100      	movs	r1, #0
 800e160:	68b8      	ldr	r0, [r7, #8]
 800e162:	f002 f9ff 	bl	8010564 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e166:	7bfb      	ldrb	r3, [r7, #15]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	211a      	movs	r1, #26
 800e16c:	fb01 f303 	mul.w	r3, r1, r3
 800e170:	4413      	add	r3, r2
 800e172:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	b25b      	sxtb	r3, r3
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	da15      	bge.n	800e1aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e17e:	7bfb      	ldrb	r3, [r7, #15]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	211a      	movs	r1, #26
 800e184:	fb01 f303 	mul.w	r3, r1, r3
 800e188:	4413      	add	r3, r2
 800e18a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e18e:	781a      	ldrb	r2, [r3, #0]
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	211a      	movs	r1, #26
 800e19a:	fb01 f303 	mul.w	r3, r1, r3
 800e19e:	4413      	add	r3, r2
 800e1a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e1a4:	881a      	ldrh	r2, [r3, #0]
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	785b      	ldrb	r3, [r3, #1]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f001 fe32 	bl	800fe1a <USBH_AllocPipe>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	7819      	ldrb	r1, [r3, #0]
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	7858      	ldrb	r0, [r3, #1]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	8952      	ldrh	r2, [r2, #10]
 800e1d6:	9202      	str	r2, [sp, #8]
 800e1d8:	2203      	movs	r2, #3
 800e1da:	9201      	str	r2, [sp, #4]
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	4623      	mov	r3, r4
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f001 fdea 	bl	800fdbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f002 f8f9 	bl	80103e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	210a      	movs	r1, #10
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 fbeb 	bl	800e9d8 <USBH_FindInterface>
 800e202:	4603      	mov	r3, r0
 800e204:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e206:	7bfb      	ldrb	r3, [r7, #15]
 800e208:	2bff      	cmp	r3, #255	; 0xff
 800e20a:	d002      	beq.n	800e212 <USBH_CDC_InterfaceInit+0x11a>
 800e20c:	7bfb      	ldrb	r3, [r7, #15]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d901      	bls.n	800e216 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e212:	2302      	movs	r3, #2
 800e214:	e0c2      	b.n	800e39c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e216:	7bfb      	ldrb	r3, [r7, #15]
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	211a      	movs	r1, #26
 800e21c:	fb01 f303 	mul.w	r3, r1, r3
 800e220:	4413      	add	r3, r2
 800e222:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	b25b      	sxtb	r3, r3
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	da16      	bge.n	800e25c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	211a      	movs	r1, #26
 800e234:	fb01 f303 	mul.w	r3, r1, r3
 800e238:	4413      	add	r3, r2
 800e23a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e23e:	781a      	ldrb	r2, [r3, #0]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e244:	7bfb      	ldrb	r3, [r7, #15]
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	211a      	movs	r1, #26
 800e24a:	fb01 f303 	mul.w	r3, r1, r3
 800e24e:	4413      	add	r3, r2
 800e250:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e254:	881a      	ldrh	r2, [r3, #0]
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	835a      	strh	r2, [r3, #26]
 800e25a:	e015      	b.n	800e288 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	211a      	movs	r1, #26
 800e262:	fb01 f303 	mul.w	r3, r1, r3
 800e266:	4413      	add	r3, r2
 800e268:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e26c:	781a      	ldrb	r2, [r3, #0]
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e272:	7bfb      	ldrb	r3, [r7, #15]
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	211a      	movs	r1, #26
 800e278:	fb01 f303 	mul.w	r3, r1, r3
 800e27c:	4413      	add	r3, r2
 800e27e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e282:	881a      	ldrh	r2, [r3, #0]
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e288:	7bfb      	ldrb	r3, [r7, #15]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	211a      	movs	r1, #26
 800e28e:	fb01 f303 	mul.w	r3, r1, r3
 800e292:	4413      	add	r3, r2
 800e294:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	b25b      	sxtb	r3, r3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	da16      	bge.n	800e2ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e2a0:	7bfb      	ldrb	r3, [r7, #15]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	211a      	movs	r1, #26
 800e2a6:	fb01 f303 	mul.w	r3, r1, r3
 800e2aa:	4413      	add	r3, r2
 800e2ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e2b0:	781a      	ldrb	r2, [r3, #0]
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	211a      	movs	r1, #26
 800e2bc:	fb01 f303 	mul.w	r3, r1, r3
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e2c6:	881a      	ldrh	r2, [r3, #0]
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	835a      	strh	r2, [r3, #26]
 800e2cc:	e015      	b.n	800e2fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	211a      	movs	r1, #26
 800e2d4:	fb01 f303 	mul.w	r3, r1, r3
 800e2d8:	4413      	add	r3, r2
 800e2da:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e2de:	781a      	ldrb	r2, [r3, #0]
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e2e4:	7bfb      	ldrb	r3, [r7, #15]
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	211a      	movs	r1, #26
 800e2ea:	fb01 f303 	mul.w	r3, r1, r3
 800e2ee:	4413      	add	r3, r2
 800e2f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e2f4:	881a      	ldrh	r2, [r3, #0]
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	7b9b      	ldrb	r3, [r3, #14]
 800e2fe:	4619      	mov	r1, r3
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f001 fd8a 	bl	800fe1a <USBH_AllocPipe>
 800e306:	4603      	mov	r3, r0
 800e308:	461a      	mov	r2, r3
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	7bdb      	ldrb	r3, [r3, #15]
 800e312:	4619      	mov	r1, r3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f001 fd80 	bl	800fe1a <USBH_AllocPipe>
 800e31a:	4603      	mov	r3, r0
 800e31c:	461a      	mov	r2, r3
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	7b59      	ldrb	r1, [r3, #13]
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	7b98      	ldrb	r0, [r3, #14]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	8b12      	ldrh	r2, [r2, #24]
 800e33a:	9202      	str	r2, [sp, #8]
 800e33c:	2202      	movs	r2, #2
 800e33e:	9201      	str	r2, [sp, #4]
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	4623      	mov	r3, r4
 800e344:	4602      	mov	r2, r0
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f001 fd38 	bl	800fdbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	7b19      	ldrb	r1, [r3, #12]
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	7bd8      	ldrb	r0, [r3, #15]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	8b52      	ldrh	r2, [r2, #26]
 800e364:	9202      	str	r2, [sp, #8]
 800e366:	2202      	movs	r2, #2
 800e368:	9201      	str	r2, [sp, #4]
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	4623      	mov	r3, r4
 800e36e:	4602      	mov	r2, r0
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f001 fd23 	bl	800fdbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	2200      	movs	r2, #0
 800e37a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	7b5b      	ldrb	r3, [r3, #13]
 800e382:	2200      	movs	r2, #0
 800e384:	4619      	mov	r1, r3
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f002 f82e 	bl	80103e8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	7b1b      	ldrb	r3, [r3, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f002 f827 	bl	80103e8 <USBH_LL_SetToggle>

  return USBH_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3714      	adds	r7, #20
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd90      	pop	{r4, r7, pc}

0800e3a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e3b2:	69db      	ldr	r3, [r3, #28]
 800e3b4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00e      	beq.n	800e3dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f001 fd18 	bl	800fdfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f001 fd43 	bl	800fe5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	7b1b      	ldrb	r3, [r3, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00e      	beq.n	800e402 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	7b1b      	ldrb	r3, [r3, #12]
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f001 fd05 	bl	800fdfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	7b1b      	ldrb	r3, [r3, #12]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f001 fd30 	bl	800fe5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	7b5b      	ldrb	r3, [r3, #13]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00e      	beq.n	800e428 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	7b5b      	ldrb	r3, [r3, #13]
 800e40e:	4619      	mov	r1, r3
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f001 fcf2 	bl	800fdfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	7b5b      	ldrb	r3, [r3, #13]
 800e41a:	4619      	mov	r1, r3
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f001 fd1d 	bl	800fe5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e42e:	69db      	ldr	r3, [r3, #28]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00b      	beq.n	800e44c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e43a:	69db      	ldr	r3, [r3, #28]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f002 f889 	bl	8010554 <free>
    phost->pActiveClass->pData = 0U;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e448:	2200      	movs	r2, #0
 800e44a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3340      	adds	r3, #64	; 0x40
 800e46c:	4619      	mov	r1, r3
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 f8b1 	bl	800e5d6 <GetLineCoding>
 800e474:	4603      	mov	r3, r0
 800e476:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e478:	7afb      	ldrb	r3, [r7, #11]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d105      	bne.n	800e48a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e484:	2102      	movs	r1, #2
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e48a:	7afb      	ldrb	r3, [r7, #11]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e49c:	2301      	movs	r3, #1
 800e49e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4aa:	69db      	ldr	r3, [r3, #28]
 800e4ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d877      	bhi.n	800e5a8 <USBH_CDC_Process+0x114>
 800e4b8:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <USBH_CDC_Process+0x2c>)
 800e4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4be:	bf00      	nop
 800e4c0:	0800e4d5 	.word	0x0800e4d5
 800e4c4:	0800e4db 	.word	0x0800e4db
 800e4c8:	0800e50b 	.word	0x0800e50b
 800e4cc:	0800e57f 	.word	0x0800e57f
 800e4d0:	0800e58d 	.word	0x0800e58d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e4d8:	e06d      	b.n	800e5b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4de:	4619      	mov	r1, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f897 	bl	800e614 <SetLineCoding>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e4ea:	7bbb      	ldrb	r3, [r7, #14]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d104      	bne.n	800e4fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e4f8:	e058      	b.n	800e5ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e4fa:	7bbb      	ldrb	r3, [r7, #14]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d055      	beq.n	800e5ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2204      	movs	r2, #4
 800e504:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e508:	e050      	b.n	800e5ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	3340      	adds	r3, #64	; 0x40
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 f860 	bl	800e5d6 <GetLineCoding>
 800e516:	4603      	mov	r3, r0
 800e518:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e51a:	7bbb      	ldrb	r3, [r7, #14]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d126      	bne.n	800e56e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	2200      	movs	r2, #0
 800e524:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e532:	791b      	ldrb	r3, [r3, #4]
 800e534:	429a      	cmp	r2, r3
 800e536:	d13b      	bne.n	800e5b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e542:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e544:	429a      	cmp	r2, r3
 800e546:	d133      	bne.n	800e5b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e552:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e554:	429a      	cmp	r2, r3
 800e556:	d12b      	bne.n	800e5b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e560:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e562:	429a      	cmp	r2, r3
 800e564:	d124      	bne.n	800e5b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f958 	bl	800e81c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e56c:	e020      	b.n	800e5b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e56e:	7bbb      	ldrb	r3, [r7, #14]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d01d      	beq.n	800e5b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	2204      	movs	r2, #4
 800e578:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e57c:	e018      	b.n	800e5b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f867 	bl	800e652 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f8da 	bl	800e73e <CDC_ProcessReception>
      break;
 800e58a:	e014      	b.n	800e5b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e58c:	2100      	movs	r1, #0
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 ffe3 	bl	800f55a <USBH_ClrFeature>
 800e594:	4603      	mov	r3, r0
 800e596:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e598:	7bbb      	ldrb	r3, [r7, #14]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10a      	bne.n	800e5b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e5a6:	e005      	b.n	800e5b4 <USBH_CDC_Process+0x120>

    default:
      break;
 800e5a8:	bf00      	nop
 800e5aa:	e004      	b.n	800e5b6 <USBH_CDC_Process+0x122>
      break;
 800e5ac:	bf00      	nop
 800e5ae:	e002      	b.n	800e5b6 <USBH_CDC_Process+0x122>
      break;
 800e5b0:	bf00      	nop
 800e5b2:	e000      	b.n	800e5b6 <USBH_CDC_Process+0x122>
      break;
 800e5b4:	bf00      	nop

  }

  return status;
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b083      	sub	sp, #12
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e5c8:	2300      	movs	r3, #0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	370c      	adds	r7, #12
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr

0800e5d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b082      	sub	sp, #8
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
 800e5de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	22a1      	movs	r2, #161	; 0xa1
 800e5e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2221      	movs	r2, #33	; 0x21
 800e5ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2207      	movs	r2, #7
 800e5fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	2207      	movs	r2, #7
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f001 f988 	bl	800f91a <USBH_CtlReq>
 800e60a:	4603      	mov	r3, r0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2221      	movs	r2, #33	; 0x21
 800e622:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2220      	movs	r2, #32
 800e628:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2207      	movs	r2, #7
 800e63a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	2207      	movs	r2, #7
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f001 f969 	bl	800f91a <USBH_CtlReq>
 800e648:	4603      	mov	r3, r0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b086      	sub	sp, #24
 800e656:	af02      	add	r7, sp, #8
 800e658:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e664:	2300      	movs	r3, #0
 800e666:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d002      	beq.n	800e678 <CDC_ProcessTransmission+0x26>
 800e672:	2b02      	cmp	r3, #2
 800e674:	d023      	beq.n	800e6be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e676:	e05e      	b.n	800e736 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67c:	68fa      	ldr	r2, [r7, #12]
 800e67e:	8b12      	ldrh	r2, [r2, #24]
 800e680:	4293      	cmp	r3, r2
 800e682:	d90b      	bls.n	800e69c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	69d9      	ldr	r1, [r3, #28]
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	8b1a      	ldrh	r2, [r3, #24]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	7b5b      	ldrb	r3, [r3, #13]
 800e690:	2001      	movs	r0, #1
 800e692:	9000      	str	r0, [sp, #0]
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f001 fb4e 	bl	800fd36 <USBH_BulkSendData>
 800e69a:	e00b      	b.n	800e6b4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	7b5b      	ldrb	r3, [r3, #13]
 800e6aa:	2001      	movs	r0, #1
 800e6ac:	9000      	str	r0, [sp, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f001 fb41 	bl	800fd36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e6bc:	e03b      	b.n	800e736 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	7b5b      	ldrb	r3, [r3, #13]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f001 fe65 	bl	8010394 <USBH_LL_GetURBState>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e6ce:	7afb      	ldrb	r3, [r7, #11]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d128      	bne.n	800e726 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d8:	68fa      	ldr	r2, [r7, #12]
 800e6da:	8b12      	ldrh	r2, [r2, #24]
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d90e      	bls.n	800e6fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	8b12      	ldrh	r2, [r2, #24]
 800e6e8:	1a9a      	subs	r2, r3, r2
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	69db      	ldr	r3, [r3, #28]
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	8b12      	ldrh	r2, [r2, #24]
 800e6f6:	441a      	add	r2, r3
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	61da      	str	r2, [r3, #28]
 800e6fc:	e002      	b.n	800e704 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d004      	beq.n	800e716 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e714:	e00e      	b.n	800e734 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f868 	bl	800e7f4 <USBH_CDC_TransmitCallback>
      break;
 800e724:	e006      	b.n	800e734 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e726:	7afb      	ldrb	r3, [r7, #11]
 800e728:	2b02      	cmp	r3, #2
 800e72a:	d103      	bne.n	800e734 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e734:	bf00      	nop
  }
}
 800e736:	bf00      	nop
 800e738:	3710      	adds	r7, #16
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}

0800e73e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e73e:	b580      	push	{r7, lr}
 800e740:	b086      	sub	sp, #24
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e74c:	69db      	ldr	r3, [r3, #28]
 800e74e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e750:	2300      	movs	r3, #0
 800e752:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e75a:	2b03      	cmp	r3, #3
 800e75c:	d002      	beq.n	800e764 <CDC_ProcessReception+0x26>
 800e75e:	2b04      	cmp	r3, #4
 800e760:	d00e      	beq.n	800e780 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e762:	e043      	b.n	800e7ec <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	6a19      	ldr	r1, [r3, #32]
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	8b5a      	ldrh	r2, [r3, #26]
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	7b1b      	ldrb	r3, [r3, #12]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f001 fb05 	bl	800fd80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2204      	movs	r2, #4
 800e77a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e77e:	e035      	b.n	800e7ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	7b1b      	ldrb	r3, [r3, #12]
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f001 fe04 	bl	8010394 <USBH_LL_GetURBState>
 800e78c:	4603      	mov	r3, r0
 800e78e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e790:	7cfb      	ldrb	r3, [r7, #19]
 800e792:	2b01      	cmp	r3, #1
 800e794:	d129      	bne.n	800e7ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	7b1b      	ldrb	r3, [r3, #12]
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f001 fd67 	bl	8010270 <USBH_LL_GetLastXferSize>
 800e7a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d016      	beq.n	800e7dc <CDC_ProcessReception+0x9e>
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	8b5b      	ldrh	r3, [r3, #26]
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d910      	bls.n	800e7dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	1ad2      	subs	r2, r2, r3
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	6a1a      	ldr	r2, [r3, #32]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	441a      	add	r2, r3
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2203      	movs	r2, #3
 800e7d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e7da:	e006      	b.n	800e7ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 f80f 	bl	800e808 <USBH_CDC_ReceiveCallback>
      break;
 800e7ea:	bf00      	nop
  }
}
 800e7ec:	bf00      	nop
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e7fc:	bf00      	nop
 800e7fe:	370c      	adds	r7, #12
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e808:	b480      	push	{r7}
 800e80a:	b083      	sub	sp, #12
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e810:	bf00      	nop
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e824:	bf00      	nop
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	4613      	mov	r3, r2
 800e83c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d101      	bne.n	800e848 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e844:	2302      	movs	r3, #2
 800e846:	e029      	b.n	800e89c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	79fa      	ldrb	r2, [r7, #7]
 800e84c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	2200      	movs	r2, #0
 800e854:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f000 f81f 	bl	800e8a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2200      	movs	r2, #0
 800e882:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d003      	beq.n	800e894 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	68ba      	ldr	r2, [r7, #8]
 800e890:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e894:	68f8      	ldr	r0, [r7, #12]
 800e896:	f001 fc37 	bl	8010108 <USBH_LL_Init>

  return USBH_OK;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3710      	adds	r7, #16
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b085      	sub	sp, #20
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	60fb      	str	r3, [r7, #12]
 800e8b4:	e009      	b.n	800e8ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	33e0      	adds	r3, #224	; 0xe0
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	4413      	add	r3, r2
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	60fb      	str	r3, [r7, #12]
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b0e      	cmp	r3, #14
 800e8ce:	d9f2      	bls.n	800e8b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	60fb      	str	r3, [r7, #12]
 800e8d4:	e009      	b.n	800e8ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	60fb      	str	r3, [r7, #12]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8f0:	d3f1      	bcc.n	800e8d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2201      	movs	r2, #1
 800e902:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2240      	movs	r2, #64	; 0x40
 800e916:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2200      	movs	r2, #0
 800e93a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3714      	adds	r7, #20
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d016      	beq.n	800e98e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10e      	bne.n	800e988 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e970:	1c59      	adds	r1, r3, #1
 800e972:	687a      	ldr	r2, [r7, #4]
 800e974:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	33de      	adds	r3, #222	; 0xde
 800e97c:	6839      	ldr	r1, [r7, #0]
 800e97e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e982:	2300      	movs	r3, #0
 800e984:	73fb      	strb	r3, [r7, #15]
 800e986:	e004      	b.n	800e992 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e988:	2302      	movs	r3, #2
 800e98a:	73fb      	strb	r3, [r7, #15]
 800e98c:	e001      	b.n	800e992 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e98e:	2302      	movs	r3, #2
 800e990:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e992:	7bfb      	ldrb	r3, [r7, #15]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3714      	adds	r7, #20
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e9b6:	78fa      	ldrb	r2, [r7, #3]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d204      	bcs.n	800e9c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	78fa      	ldrb	r2, [r7, #3]
 800e9c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e9c4:	e001      	b.n	800e9ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e9c6:	2302      	movs	r3, #2
 800e9c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3714      	adds	r7, #20
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	70fb      	strb	r3, [r7, #3]
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	70bb      	strb	r3, [r7, #2]
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ea00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ea02:	e025      	b.n	800ea50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ea04:	7dfb      	ldrb	r3, [r7, #23]
 800ea06:	221a      	movs	r2, #26
 800ea08:	fb02 f303 	mul.w	r3, r2, r3
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	4413      	add	r3, r2
 800ea12:	3302      	adds	r3, #2
 800ea14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	795b      	ldrb	r3, [r3, #5]
 800ea1a:	78fa      	ldrb	r2, [r7, #3]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d002      	beq.n	800ea26 <USBH_FindInterface+0x4e>
 800ea20:	78fb      	ldrb	r3, [r7, #3]
 800ea22:	2bff      	cmp	r3, #255	; 0xff
 800ea24:	d111      	bne.n	800ea4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ea2a:	78ba      	ldrb	r2, [r7, #2]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d002      	beq.n	800ea36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ea30:	78bb      	ldrb	r3, [r7, #2]
 800ea32:	2bff      	cmp	r3, #255	; 0xff
 800ea34:	d109      	bne.n	800ea4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ea3a:	787a      	ldrb	r2, [r7, #1]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d002      	beq.n	800ea46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ea40:	787b      	ldrb	r3, [r7, #1]
 800ea42:	2bff      	cmp	r3, #255	; 0xff
 800ea44:	d101      	bne.n	800ea4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
 800ea48:	e006      	b.n	800ea58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d9d6      	bls.n	800ea04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ea56:	23ff      	movs	r3, #255	; 0xff
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	371c      	adds	r7, #28
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f001 fb87 	bl	8010180 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ea72:	2101      	movs	r1, #1
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f001 fca0 	bl	80103ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ea7a:	2300      	movs	r3, #0
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b088      	sub	sp, #32
 800ea88:	af04      	add	r7, sp, #16
 800ea8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ea8c:	2302      	movs	r3, #2
 800ea8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ea90:	2300      	movs	r3, #0
 800ea92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d102      	bne.n	800eaa6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2203      	movs	r2, #3
 800eaa4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	2b0b      	cmp	r3, #11
 800eaae:	f200 81b3 	bhi.w	800ee18 <USBH_Process+0x394>
 800eab2:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <USBH_Process+0x34>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800eae9 	.word	0x0800eae9
 800eabc:	0800eb1b 	.word	0x0800eb1b
 800eac0:	0800eb83 	.word	0x0800eb83
 800eac4:	0800edb3 	.word	0x0800edb3
 800eac8:	0800ee19 	.word	0x0800ee19
 800eacc:	0800ec27 	.word	0x0800ec27
 800ead0:	0800ed59 	.word	0x0800ed59
 800ead4:	0800ec5d 	.word	0x0800ec5d
 800ead8:	0800ec7d 	.word	0x0800ec7d
 800eadc:	0800ec9d 	.word	0x0800ec9d
 800eae0:	0800eccb 	.word	0x0800eccb
 800eae4:	0800ed9b 	.word	0x0800ed9b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 8193 	beq.w	800ee1c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2201      	movs	r2, #1
 800eafa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800eafc:	20c8      	movs	r0, #200	; 0xc8
 800eafe:	f001 fca3 	bl	8010448 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f001 fb99 	bl	801023a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800eb18:	e180      	b.n	800ee1c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d107      	bne.n	800eb34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2202      	movs	r2, #2
 800eb30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eb32:	e182      	b.n	800ee3a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eb3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb3e:	d914      	bls.n	800eb6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800eb46:	3301      	adds	r3, #1
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800eb56:	2b03      	cmp	r3, #3
 800eb58:	d903      	bls.n	800eb62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	220d      	movs	r2, #13
 800eb5e:	701a      	strb	r2, [r3, #0]
      break;
 800eb60:	e16b      	b.n	800ee3a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2200      	movs	r2, #0
 800eb66:	701a      	strb	r2, [r3, #0]
      break;
 800eb68:	e167      	b.n	800ee3a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eb70:	f103 020a 	add.w	r2, r3, #10
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800eb7a:	200a      	movs	r0, #10
 800eb7c:	f001 fc64 	bl	8010448 <USBH_Delay>
      break;
 800eb80:	e15b      	b.n	800ee3a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d005      	beq.n	800eb98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eb92:	2104      	movs	r1, #4
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800eb98:	2064      	movs	r0, #100	; 0x64
 800eb9a:	f001 fc55 	bl	8010448 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f001 fb24 	bl	80101ec <USBH_LL_GetSpeed>
 800eba4:	4603      	mov	r3, r0
 800eba6:	461a      	mov	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2205      	movs	r2, #5
 800ebb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f001 f92f 	bl	800fe1a <USBH_AllocPipe>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ebc4:	2180      	movs	r1, #128	; 0x80
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f001 f927 	bl	800fe1a <USBH_AllocPipe>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	461a      	mov	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	7919      	ldrb	r1, [r3, #4]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ebe8:	b292      	uxth	r2, r2
 800ebea:	9202      	str	r2, [sp, #8]
 800ebec:	2200      	movs	r2, #0
 800ebee:	9201      	str	r2, [sp, #4]
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2280      	movs	r2, #128	; 0x80
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f001 f8e0 	bl	800fdbc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	7959      	ldrb	r1, [r3, #5]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ec0c:	687a      	ldr	r2, [r7, #4]
 800ec0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ec10:	b292      	uxth	r2, r2
 800ec12:	9202      	str	r2, [sp, #8]
 800ec14:	2200      	movs	r2, #0
 800ec16:	9201      	str	r2, [sp, #4]
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f001 f8cc 	bl	800fdbc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec24:	e109      	b.n	800ee3a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 f90c 	bl	800ee44 <USBH_HandleEnum>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ec30:	7bbb      	ldrb	r3, [r7, #14]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	f040 80f3 	bne.w	800ee20 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d103      	bne.n	800ec54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2208      	movs	r2, #8
 800ec50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ec52:	e0e5      	b.n	800ee20 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2207      	movs	r2, #7
 800ec58:	701a      	strb	r2, [r3, #0]
      break;
 800ec5a:	e0e1      	b.n	800ee20 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f000 80de 	beq.w	800ee24 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec6e:	2101      	movs	r1, #1
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2208      	movs	r2, #8
 800ec78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ec7a:	e0d3      	b.n	800ee24 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	4619      	mov	r1, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fc20 	bl	800f4cc <USBH_SetCfg>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f040 80ca 	bne.w	800ee28 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2209      	movs	r2, #9
 800ec98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ec9a:	e0c5      	b.n	800ee28 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800eca2:	f003 0320 	and.w	r3, r3, #32
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00b      	beq.n	800ecc2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ecaa:	2101      	movs	r1, #1
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 fc30 	bl	800f512 <USBH_SetFeature>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f040 80b9 	bne.w	800ee2c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	220a      	movs	r2, #10
 800ecbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ecc0:	e0b4      	b.n	800ee2c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	220a      	movs	r2, #10
 800ecc6:	701a      	strb	r2, [r3, #0]
      break;
 800ecc8:	e0b0      	b.n	800ee2c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f000 80ad 	beq.w	800ee30 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ecde:	2300      	movs	r3, #0
 800ece0:	73fb      	strb	r3, [r7, #15]
 800ece2:	e016      	b.n	800ed12 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ece4:	7bfa      	ldrb	r2, [r7, #15]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	32de      	adds	r2, #222	; 0xde
 800ecea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecee:	791a      	ldrb	r2, [r3, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d108      	bne.n	800ed0c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ecfa:	7bfa      	ldrb	r2, [r7, #15]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	32de      	adds	r2, #222	; 0xde
 800ed00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ed0a:	e005      	b.n	800ed18 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
 800ed0e:	3301      	adds	r3, #1
 800ed10:	73fb      	strb	r3, [r7, #15]
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0e5      	beq.n	800ece4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d016      	beq.n	800ed50 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	4798      	blx	r3
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d109      	bne.n	800ed48 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2206      	movs	r2, #6
 800ed38:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed40:	2103      	movs	r1, #3
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ed46:	e073      	b.n	800ee30 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	220d      	movs	r2, #13
 800ed4c:	701a      	strb	r2, [r3, #0]
      break;
 800ed4e:	e06f      	b.n	800ee30 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	220d      	movs	r2, #13
 800ed54:	701a      	strb	r2, [r3, #0]
      break;
 800ed56:	e06b      	b.n	800ee30 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d017      	beq.n	800ed92 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	4798      	blx	r3
 800ed6e:	4603      	mov	r3, r0
 800ed70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ed72:	7bbb      	ldrb	r3, [r7, #14]
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d103      	bne.n	800ed82 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	220b      	movs	r2, #11
 800ed7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ed80:	e058      	b.n	800ee34 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ed82:	7bbb      	ldrb	r3, [r7, #14]
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d154      	bne.n	800ee34 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	220d      	movs	r2, #13
 800ed8e:	701a      	strb	r2, [r3, #0]
      break;
 800ed90:	e050      	b.n	800ee34 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	220d      	movs	r2, #13
 800ed96:	701a      	strb	r2, [r3, #0]
      break;
 800ed98:	e04c      	b.n	800ee34 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d049      	beq.n	800ee38 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	4798      	blx	r3
      }
      break;
 800edb0:	e042      	b.n	800ee38 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fd72 	bl	800e8a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d009      	beq.n	800edde <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d005      	beq.n	800edf4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800edee:	2105      	movs	r1, #5
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800edfa:	b2db      	uxtb	r3, r3
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d107      	bne.n	800ee10 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff fe2b 	bl	800ea64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ee0e:	e014      	b.n	800ee3a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f001 f9b5 	bl	8010180 <USBH_LL_Start>
      break;
 800ee16:	e010      	b.n	800ee3a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ee18:	bf00      	nop
 800ee1a:	e00e      	b.n	800ee3a <USBH_Process+0x3b6>
      break;
 800ee1c:	bf00      	nop
 800ee1e:	e00c      	b.n	800ee3a <USBH_Process+0x3b6>
      break;
 800ee20:	bf00      	nop
 800ee22:	e00a      	b.n	800ee3a <USBH_Process+0x3b6>
    break;
 800ee24:	bf00      	nop
 800ee26:	e008      	b.n	800ee3a <USBH_Process+0x3b6>
      break;
 800ee28:	bf00      	nop
 800ee2a:	e006      	b.n	800ee3a <USBH_Process+0x3b6>
      break;
 800ee2c:	bf00      	nop
 800ee2e:	e004      	b.n	800ee3a <USBH_Process+0x3b6>
      break;
 800ee30:	bf00      	nop
 800ee32:	e002      	b.n	800ee3a <USBH_Process+0x3b6>
      break;
 800ee34:	bf00      	nop
 800ee36:	e000      	b.n	800ee3a <USBH_Process+0x3b6>
      break;
 800ee38:	bf00      	nop
  }
  return USBH_OK;
 800ee3a:	2300      	movs	r3, #0
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b088      	sub	sp, #32
 800ee48:	af04      	add	r7, sp, #16
 800ee4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ee50:	2301      	movs	r3, #1
 800ee52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	785b      	ldrb	r3, [r3, #1]
 800ee58:	2b07      	cmp	r3, #7
 800ee5a:	f200 81c1 	bhi.w	800f1e0 <USBH_HandleEnum+0x39c>
 800ee5e:	a201      	add	r2, pc, #4	; (adr r2, 800ee64 <USBH_HandleEnum+0x20>)
 800ee60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee64:	0800ee85 	.word	0x0800ee85
 800ee68:	0800ef43 	.word	0x0800ef43
 800ee6c:	0800efad 	.word	0x0800efad
 800ee70:	0800f03b 	.word	0x0800f03b
 800ee74:	0800f0a5 	.word	0x0800f0a5
 800ee78:	0800f115 	.word	0x0800f115
 800ee7c:	0800f15b 	.word	0x0800f15b
 800ee80:	0800f1a1 	.word	0x0800f1a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ee84:	2108      	movs	r1, #8
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f000 fa50 	bl	800f32c <USBH_Get_DevDesc>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ee90:	7bbb      	ldrb	r3, [r7, #14]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d130      	bne.n	800eef8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2201      	movs	r2, #1
 800eea4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7919      	ldrb	r1, [r3, #4]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800eeba:	b292      	uxth	r2, r2
 800eebc:	9202      	str	r2, [sp, #8]
 800eebe:	2200      	movs	r2, #0
 800eec0:	9201      	str	r2, [sp, #4]
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	4603      	mov	r3, r0
 800eec6:	2280      	movs	r2, #128	; 0x80
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 ff77 	bl	800fdbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	7959      	ldrb	r1, [r3, #5]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eee2:	b292      	uxth	r2, r2
 800eee4:	9202      	str	r2, [sp, #8]
 800eee6:	2200      	movs	r2, #0
 800eee8:	9201      	str	r2, [sp, #4]
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	4603      	mov	r3, r0
 800eeee:	2200      	movs	r2, #0
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 ff63 	bl	800fdbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eef6:	e175      	b.n	800f1e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
 800eefa:	2b03      	cmp	r3, #3
 800eefc:	f040 8172 	bne.w	800f1e4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef06:	3301      	adds	r3, #1
 800ef08:	b2da      	uxtb	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef16:	2b03      	cmp	r3, #3
 800ef18:	d903      	bls.n	800ef22 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	220d      	movs	r2, #13
 800ef1e:	701a      	strb	r2, [r3, #0]
      break;
 800ef20:	e160      	b.n	800f1e4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	795b      	ldrb	r3, [r3, #5]
 800ef26:	4619      	mov	r1, r3
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f000 ff97 	bl	800fe5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	791b      	ldrb	r3, [r3, #4]
 800ef32:	4619      	mov	r1, r3
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 ff91 	bl	800fe5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	701a      	strb	r2, [r3, #0]
      break;
 800ef40:	e150      	b.n	800f1e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ef42:	2112      	movs	r1, #18
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f000 f9f1 	bl	800f32c <USBH_Get_DevDesc>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ef4e:	7bbb      	ldrb	r3, [r7, #14]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d103      	bne.n	800ef5c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2202      	movs	r2, #2
 800ef58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ef5a:	e145      	b.n	800f1e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ef5c:	7bbb      	ldrb	r3, [r7, #14]
 800ef5e:	2b03      	cmp	r3, #3
 800ef60:	f040 8142 	bne.w	800f1e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	b2da      	uxtb	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ef7a:	2b03      	cmp	r3, #3
 800ef7c:	d903      	bls.n	800ef86 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	220d      	movs	r2, #13
 800ef82:	701a      	strb	r2, [r3, #0]
      break;
 800ef84:	e130      	b.n	800f1e8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	795b      	ldrb	r3, [r3, #5]
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f000 ff65 	bl	800fe5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	791b      	ldrb	r3, [r3, #4]
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 ff5f 	bl	800fe5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2200      	movs	r2, #0
 800efa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	701a      	strb	r2, [r3, #0]
      break;
 800efaa:	e11d      	b.n	800f1e8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800efac:	2101      	movs	r1, #1
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 fa68 	bl	800f484 <USBH_SetAddress>
 800efb4:	4603      	mov	r3, r0
 800efb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800efb8:	7bbb      	ldrb	r3, [r7, #14]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d132      	bne.n	800f024 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800efbe:	2002      	movs	r0, #2
 800efc0:	f001 fa42 	bl	8010448 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2203      	movs	r2, #3
 800efd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	7919      	ldrb	r1, [r3, #4]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800efe6:	b292      	uxth	r2, r2
 800efe8:	9202      	str	r2, [sp, #8]
 800efea:	2200      	movs	r2, #0
 800efec:	9201      	str	r2, [sp, #4]
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	4603      	mov	r3, r0
 800eff2:	2280      	movs	r2, #128	; 0x80
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f000 fee1 	bl	800fdbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7959      	ldrb	r1, [r3, #5]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f00e:	b292      	uxth	r2, r2
 800f010:	9202      	str	r2, [sp, #8]
 800f012:	2200      	movs	r2, #0
 800f014:	9201      	str	r2, [sp, #4]
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	4603      	mov	r3, r0
 800f01a:	2200      	movs	r2, #0
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 fecd 	bl	800fdbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f022:	e0e3      	b.n	800f1ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	2b03      	cmp	r3, #3
 800f028:	f040 80e0 	bne.w	800f1ec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	220d      	movs	r2, #13
 800f030:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2200      	movs	r2, #0
 800f036:	705a      	strb	r2, [r3, #1]
      break;
 800f038:	e0d8      	b.n	800f1ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f03a:	2109      	movs	r1, #9
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 f99d 	bl	800f37c <USBH_Get_CfgDesc>
 800f042:	4603      	mov	r3, r0
 800f044:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f046:	7bbb      	ldrb	r3, [r7, #14]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d103      	bne.n	800f054 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2204      	movs	r2, #4
 800f050:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f052:	e0cd      	b.n	800f1f0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f054:	7bbb      	ldrb	r3, [r7, #14]
 800f056:	2b03      	cmp	r3, #3
 800f058:	f040 80ca 	bne.w	800f1f0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f062:	3301      	adds	r3, #1
 800f064:	b2da      	uxtb	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f072:	2b03      	cmp	r3, #3
 800f074:	d903      	bls.n	800f07e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	220d      	movs	r2, #13
 800f07a:	701a      	strb	r2, [r3, #0]
      break;
 800f07c:	e0b8      	b.n	800f1f0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	795b      	ldrb	r3, [r3, #5]
 800f082:	4619      	mov	r1, r3
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fee9 	bl	800fe5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	791b      	ldrb	r3, [r3, #4]
 800f08e:	4619      	mov	r1, r3
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fee3 	bl	800fe5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	701a      	strb	r2, [r3, #0]
      break;
 800f0a2:	e0a5      	b.n	800f1f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 f965 	bl	800f37c <USBH_Get_CfgDesc>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f0b6:	7bbb      	ldrb	r3, [r7, #14]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d103      	bne.n	800f0c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2205      	movs	r2, #5
 800f0c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f0c2:	e097      	b.n	800f1f4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0c4:	7bbb      	ldrb	r3, [r7, #14]
 800f0c6:	2b03      	cmp	r3, #3
 800f0c8:	f040 8094 	bne.w	800f1f4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	b2da      	uxtb	r2, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f0e2:	2b03      	cmp	r3, #3
 800f0e4:	d903      	bls.n	800f0ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	220d      	movs	r2, #13
 800f0ea:	701a      	strb	r2, [r3, #0]
      break;
 800f0ec:	e082      	b.n	800f1f4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	795b      	ldrb	r3, [r3, #5]
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f000 feb1 	bl	800fe5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	791b      	ldrb	r3, [r3, #4]
 800f0fe:	4619      	mov	r1, r3
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 feab 	bl	800fe5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	701a      	strb	r2, [r3, #0]
      break;
 800f112:	e06f      	b.n	800f1f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d019      	beq.n	800f152 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f12a:	23ff      	movs	r3, #255	; 0xff
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 f949 	bl	800f3c4 <USBH_Get_StringDesc>
 800f132:	4603      	mov	r3, r0
 800f134:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f136:	7bbb      	ldrb	r3, [r7, #14]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d103      	bne.n	800f144 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2206      	movs	r2, #6
 800f140:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f142:	e059      	b.n	800f1f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f144:	7bbb      	ldrb	r3, [r7, #14]
 800f146:	2b03      	cmp	r3, #3
 800f148:	d156      	bne.n	800f1f8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2206      	movs	r2, #6
 800f14e:	705a      	strb	r2, [r3, #1]
      break;
 800f150:	e052      	b.n	800f1f8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2206      	movs	r2, #6
 800f156:	705a      	strb	r2, [r3, #1]
      break;
 800f158:	e04e      	b.n	800f1f8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f160:	2b00      	cmp	r3, #0
 800f162:	d019      	beq.n	800f198 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f170:	23ff      	movs	r3, #255	; 0xff
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 f926 	bl	800f3c4 <USBH_Get_StringDesc>
 800f178:	4603      	mov	r3, r0
 800f17a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f17c:	7bbb      	ldrb	r3, [r7, #14]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d103      	bne.n	800f18a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2207      	movs	r2, #7
 800f186:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f188:	e038      	b.n	800f1fc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f18a:	7bbb      	ldrb	r3, [r7, #14]
 800f18c:	2b03      	cmp	r3, #3
 800f18e:	d135      	bne.n	800f1fc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2207      	movs	r2, #7
 800f194:	705a      	strb	r2, [r3, #1]
      break;
 800f196:	e031      	b.n	800f1fc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2207      	movs	r2, #7
 800f19c:	705a      	strb	r2, [r3, #1]
      break;
 800f19e:	e02d      	b.n	800f1fc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d017      	beq.n	800f1da <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f1b6:	23ff      	movs	r3, #255	; 0xff
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 f903 	bl	800f3c4 <USBH_Get_StringDesc>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f1c2:	7bbb      	ldrb	r3, [r7, #14]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d102      	bne.n	800f1ce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f1cc:	e018      	b.n	800f200 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f1ce:	7bbb      	ldrb	r3, [r7, #14]
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	d115      	bne.n	800f200 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f1d8:	e012      	b.n	800f200 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800f1de:	e00f      	b.n	800f200 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f1e0:	bf00      	nop
 800f1e2:	e00e      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f1e4:	bf00      	nop
 800f1e6:	e00c      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f1e8:	bf00      	nop
 800f1ea:	e00a      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f1ec:	bf00      	nop
 800f1ee:	e008      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f1f0:	bf00      	nop
 800f1f2:	e006      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f1f4:	bf00      	nop
 800f1f6:	e004      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f1f8:	bf00      	nop
 800f1fa:	e002      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f1fc:	bf00      	nop
 800f1fe:	e000      	b.n	800f202 <USBH_HandleEnum+0x3be>
      break;
 800f200:	bf00      	nop
  }
  return Status;
 800f202:	7bfb      	ldrb	r3, [r7, #15]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	683a      	ldr	r2, [r7, #0]
 800f21a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f21e:	bf00      	nop
 800f220:	370c      	adds	r7, #12
 800f222:	46bd      	mov	sp, r7
 800f224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f228:	4770      	bx	lr

0800f22a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f238:	1c5a      	adds	r2, r3, #1
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f804 	bl	800f24e <USBH_HandleSof>
}
 800f246:	bf00      	nop
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b082      	sub	sp, #8
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b0b      	cmp	r3, #11
 800f25e:	d10a      	bne.n	800f276 <USBH_HandleSof+0x28>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f266:	2b00      	cmp	r3, #0
 800f268:	d005      	beq.n	800f276 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f270:	699b      	ldr	r3, [r3, #24]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	4798      	blx	r3
  }
}
 800f276:	bf00      	nop
 800f278:	3708      	adds	r7, #8
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f27e:	b480      	push	{r7}
 800f280:	b083      	sub	sp, #12
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2201      	movs	r2, #1
 800f28a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f28e:	bf00      	nop
}
 800f290:	370c      	adds	r7, #12
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f29a:	b480      	push	{r7}
 800f29c:	b083      	sub	sp, #12
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f2aa:	bf00      	nop
}
 800f2ac:	370c      	adds	r7, #12
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr

0800f2b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f2b6:	b480      	push	{r7}
 800f2b8:	b083      	sub	sp, #12
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 ff56 	bl	80101b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	791b      	ldrb	r3, [r3, #4]
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fda3 	bl	800fe5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	795b      	ldrb	r3, [r3, #5]
 800f31a:	4619      	mov	r1, r3
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 fd9d 	bl	800fe5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f322:	2300      	movs	r3, #0
}
 800f324:	4618      	mov	r0, r3
 800f326:	3708      	adds	r7, #8
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}

0800f32c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b086      	sub	sp, #24
 800f330:	af02      	add	r7, sp, #8
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	460b      	mov	r3, r1
 800f336:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f33e:	78fb      	ldrb	r3, [r7, #3]
 800f340:	b29b      	uxth	r3, r3
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	4613      	mov	r3, r2
 800f346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f34a:	2100      	movs	r1, #0
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 f864 	bl	800f41a <USBH_GetDescriptor>
 800f352:	4603      	mov	r3, r0
 800f354:	73fb      	strb	r3, [r7, #15]
 800f356:	7bfb      	ldrb	r3, [r7, #15]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10a      	bne.n	800f372 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f368:	78fa      	ldrb	r2, [r7, #3]
 800f36a:	b292      	uxth	r2, r2
 800f36c:	4619      	mov	r1, r3
 800f36e:	f000 f918 	bl	800f5a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f372:	7bfb      	ldrb	r3, [r7, #15]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af02      	add	r7, sp, #8
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	460b      	mov	r3, r1
 800f386:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	331c      	adds	r3, #28
 800f38c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f38e:	887b      	ldrh	r3, [r7, #2]
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f398:	2100      	movs	r1, #0
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f83d 	bl	800f41a <USBH_GetDescriptor>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	72fb      	strb	r3, [r7, #11]
 800f3a4:	7afb      	ldrb	r3, [r7, #11]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d107      	bne.n	800f3ba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f3b0:	887a      	ldrh	r2, [r7, #2]
 800f3b2:	68f9      	ldr	r1, [r7, #12]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 f964 	bl	800f682 <USBH_ParseCfgDesc>
  }

  return status;
 800f3ba:	7afb      	ldrb	r3, [r7, #11]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af02      	add	r7, sp, #8
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	607a      	str	r2, [r7, #4]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	460b      	mov	r3, r1
 800f3d2:	72fb      	strb	r3, [r7, #11]
 800f3d4:	4613      	mov	r3, r2
 800f3d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f3d8:	7afb      	ldrb	r3, [r7, #11]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f3e0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f3e8:	893b      	ldrh	r3, [r7, #8]
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	2100      	movs	r1, #0
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f000 f812 	bl	800f41a <USBH_GetDescriptor>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	75fb      	strb	r3, [r7, #23]
 800f3fa:	7dfb      	ldrb	r3, [r7, #23]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d107      	bne.n	800f410 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f406:	893a      	ldrh	r2, [r7, #8]
 800f408:	6879      	ldr	r1, [r7, #4]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 fa37 	bl	800f87e <USBH_ParseStringDesc>
  }

  return status;
 800f410:	7dfb      	ldrb	r3, [r7, #23]
}
 800f412:	4618      	mov	r0, r3
 800f414:	3718      	adds	r7, #24
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}

0800f41a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	b084      	sub	sp, #16
 800f41e:	af00      	add	r7, sp, #0
 800f420:	60f8      	str	r0, [r7, #12]
 800f422:	607b      	str	r3, [r7, #4]
 800f424:	460b      	mov	r3, r1
 800f426:	72fb      	strb	r3, [r7, #11]
 800f428:	4613      	mov	r3, r2
 800f42a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	789b      	ldrb	r3, [r3, #2]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d11c      	bne.n	800f46e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f434:	7afb      	ldrb	r3, [r7, #11]
 800f436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f43a:	b2da      	uxtb	r2, r3
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	2206      	movs	r2, #6
 800f444:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	893a      	ldrh	r2, [r7, #8]
 800f44a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f44c:	893b      	ldrh	r3, [r7, #8]
 800f44e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f456:	d104      	bne.n	800f462 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f240 4209 	movw	r2, #1033	; 0x409
 800f45e:	829a      	strh	r2, [r3, #20]
 800f460:	e002      	b.n	800f468 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	8b3a      	ldrh	r2, [r7, #24]
 800f46c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f46e:	8b3b      	ldrh	r3, [r7, #24]
 800f470:	461a      	mov	r2, r3
 800f472:	6879      	ldr	r1, [r7, #4]
 800f474:	68f8      	ldr	r0, [r7, #12]
 800f476:	f000 fa50 	bl	800f91a <USBH_CtlReq>
 800f47a:	4603      	mov	r3, r0
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}

0800f484 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b082      	sub	sp, #8
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	460b      	mov	r3, r1
 800f48e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	789b      	ldrb	r3, [r3, #2]
 800f494:	2b01      	cmp	r3, #1
 800f496:	d10f      	bne.n	800f4b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2205      	movs	r2, #5
 800f4a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f4a4:	78fb      	ldrb	r3, [r7, #3]
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 fa2c 	bl	800f91a <USBH_CtlReq>
 800f4c2:	4603      	mov	r3, r0
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}

0800f4cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	789b      	ldrb	r3, [r3, #2]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d10e      	bne.n	800f4fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2209      	movs	r2, #9
 800f4ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	887a      	ldrh	r2, [r7, #2]
 800f4f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f4fe:	2200      	movs	r2, #0
 800f500:	2100      	movs	r1, #0
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f000 fa09 	bl	800f91a <USBH_CtlReq>
 800f508:	4603      	mov	r3, r0
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3708      	adds	r7, #8
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f512:	b580      	push	{r7, lr}
 800f514:	b082      	sub	sp, #8
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
 800f51a:	460b      	mov	r3, r1
 800f51c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	789b      	ldrb	r3, [r3, #2]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d10f      	bne.n	800f546 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2203      	movs	r2, #3
 800f530:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f532:	78fb      	ldrb	r3, [r7, #3]
 800f534:	b29a      	uxth	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2200      	movs	r2, #0
 800f53e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2200      	movs	r2, #0
 800f544:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f546:	2200      	movs	r2, #0
 800f548:	2100      	movs	r1, #0
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 f9e5 	bl	800f91a <USBH_CtlReq>
 800f550:	4603      	mov	r3, r0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b082      	sub	sp, #8
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	460b      	mov	r3, r1
 800f564:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	789b      	ldrb	r3, [r3, #2]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d10f      	bne.n	800f58e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2202      	movs	r2, #2
 800f572:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2200      	movs	r2, #0
 800f57e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f580:	78fb      	ldrb	r3, [r7, #3]
 800f582:	b29a      	uxth	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f58e:	2200      	movs	r2, #0
 800f590:	2100      	movs	r1, #0
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f9c1 	bl	800f91a <USBH_CtlReq>
 800f598:	4603      	mov	r3, r0
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f5a2:	b480      	push	{r7}
 800f5a4:	b085      	sub	sp, #20
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	60f8      	str	r0, [r7, #12]
 800f5aa:	60b9      	str	r1, [r7, #8]
 800f5ac:	4613      	mov	r3, r2
 800f5ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	781a      	ldrb	r2, [r3, #0]
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	785a      	ldrb	r2, [r3, #1]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	3302      	adds	r3, #2
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	3303      	adds	r3, #3
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	021b      	lsls	r3, r3, #8
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	791a      	ldrb	r2, [r3, #4]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	795a      	ldrb	r2, [r3, #5]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	799a      	ldrb	r2, [r3, #6]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	79da      	ldrb	r2, [r3, #7]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	2b08      	cmp	r3, #8
 800f600:	d939      	bls.n	800f676 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	3308      	adds	r3, #8
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	b29a      	uxth	r2, r3
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	3309      	adds	r3, #9
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	b29b      	uxth	r3, r3
 800f612:	021b      	lsls	r3, r3, #8
 800f614:	b29b      	uxth	r3, r3
 800f616:	4313      	orrs	r3, r2
 800f618:	b29a      	uxth	r2, r3
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	330a      	adds	r3, #10
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	b29a      	uxth	r2, r3
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	330b      	adds	r3, #11
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	021b      	lsls	r3, r3, #8
 800f630:	b29b      	uxth	r3, r3
 800f632:	4313      	orrs	r3, r2
 800f634:	b29a      	uxth	r2, r3
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	330c      	adds	r3, #12
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	b29a      	uxth	r2, r3
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	330d      	adds	r3, #13
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	b29b      	uxth	r3, r3
 800f64a:	021b      	lsls	r3, r3, #8
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4313      	orrs	r3, r2
 800f650:	b29a      	uxth	r2, r3
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	7b9a      	ldrb	r2, [r3, #14]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	7bda      	ldrb	r2, [r3, #15]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	7c1a      	ldrb	r2, [r3, #16]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	7c5a      	ldrb	r2, [r3, #17]
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	745a      	strb	r2, [r3, #17]
  }
}
 800f676:	bf00      	nop
 800f678:	3714      	adds	r7, #20
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b08a      	sub	sp, #40	; 0x28
 800f686:	af00      	add	r7, sp, #0
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	60b9      	str	r1, [r7, #8]
 800f68c:	4613      	mov	r3, r2
 800f68e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f69a:	2300      	movs	r3, #0
 800f69c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	781a      	ldrb	r2, [r3, #0]
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	785a      	ldrb	r2, [r3, #1]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	3302      	adds	r3, #2
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	b29a      	uxth	r2, r3
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	3303      	adds	r3, #3
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	021b      	lsls	r3, r3, #8
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	791a      	ldrb	r2, [r3, #4]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	795a      	ldrb	r2, [r3, #5]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	799a      	ldrb	r2, [r3, #6]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	79da      	ldrb	r2, [r3, #7]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	7a1a      	ldrb	r2, [r3, #8]
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f6f8:	88fb      	ldrh	r3, [r7, #6]
 800f6fa:	2b09      	cmp	r3, #9
 800f6fc:	d95f      	bls.n	800f7be <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f6fe:	2309      	movs	r3, #9
 800f700:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f702:	2300      	movs	r3, #0
 800f704:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f706:	e051      	b.n	800f7ac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f708:	f107 0316 	add.w	r3, r7, #22
 800f70c:	4619      	mov	r1, r3
 800f70e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f710:	f000 f8e8 	bl	800f8e4 <USBH_GetNextDesc>
 800f714:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	785b      	ldrb	r3, [r3, #1]
 800f71a:	2b04      	cmp	r3, #4
 800f71c:	d146      	bne.n	800f7ac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f71e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f722:	221a      	movs	r2, #26
 800f724:	fb02 f303 	mul.w	r3, r2, r3
 800f728:	3308      	adds	r3, #8
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	4413      	add	r3, r2
 800f72e:	3302      	adds	r3, #2
 800f730:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f734:	69f8      	ldr	r0, [r7, #28]
 800f736:	f000 f846 	bl	800f7c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f73a:	2300      	movs	r3, #0
 800f73c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f740:	2300      	movs	r3, #0
 800f742:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f744:	e022      	b.n	800f78c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f746:	f107 0316 	add.w	r3, r7, #22
 800f74a:	4619      	mov	r1, r3
 800f74c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f74e:	f000 f8c9 	bl	800f8e4 <USBH_GetNextDesc>
 800f752:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f756:	785b      	ldrb	r3, [r3, #1]
 800f758:	2b05      	cmp	r3, #5
 800f75a:	d117      	bne.n	800f78c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f75c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f760:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f764:	3201      	adds	r2, #1
 800f766:	00d2      	lsls	r2, r2, #3
 800f768:	211a      	movs	r1, #26
 800f76a:	fb01 f303 	mul.w	r3, r1, r3
 800f76e:	4413      	add	r3, r2
 800f770:	3308      	adds	r3, #8
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	4413      	add	r3, r2
 800f776:	3304      	adds	r3, #4
 800f778:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f77a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f77c:	69b8      	ldr	r0, [r7, #24]
 800f77e:	f000 f851 	bl	800f824 <USBH_ParseEPDesc>
            ep_ix++;
 800f782:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f786:	3301      	adds	r3, #1
 800f788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	791b      	ldrb	r3, [r3, #4]
 800f790:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f794:	429a      	cmp	r2, r3
 800f796:	d204      	bcs.n	800f7a2 <USBH_ParseCfgDesc+0x120>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	885a      	ldrh	r2, [r3, #2]
 800f79c:	8afb      	ldrh	r3, [r7, #22]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d8d1      	bhi.n	800f746 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f7a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f7ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d804      	bhi.n	800f7be <USBH_ParseCfgDesc+0x13c>
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	885a      	ldrh	r2, [r3, #2]
 800f7b8:	8afb      	ldrh	r3, [r7, #22]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d8a4      	bhi.n	800f708 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f7be:	bf00      	nop
 800f7c0:	3728      	adds	r7, #40	; 0x28
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f7c6:	b480      	push	{r7}
 800f7c8:	b083      	sub	sp, #12
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
 800f7ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	781a      	ldrb	r2, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	785a      	ldrb	r2, [r3, #1]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	789a      	ldrb	r2, [r3, #2]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	78da      	ldrb	r2, [r3, #3]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	791a      	ldrb	r2, [r3, #4]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	795a      	ldrb	r2, [r3, #5]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	799a      	ldrb	r2, [r3, #6]
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	79da      	ldrb	r2, [r3, #7]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	7a1a      	ldrb	r2, [r3, #8]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	721a      	strb	r2, [r3, #8]
}
 800f818:	bf00      	nop
 800f81a:	370c      	adds	r7, #12
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	781a      	ldrb	r2, [r3, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	785a      	ldrb	r2, [r3, #1]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	789a      	ldrb	r2, [r3, #2]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	78da      	ldrb	r2, [r3, #3]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	3304      	adds	r3, #4
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	b29a      	uxth	r2, r3
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	3305      	adds	r3, #5
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	021b      	lsls	r3, r3, #8
 800f860:	b29b      	uxth	r3, r3
 800f862:	4313      	orrs	r3, r2
 800f864:	b29a      	uxth	r2, r3
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	799a      	ldrb	r2, [r3, #6]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	719a      	strb	r2, [r3, #6]
}
 800f872:	bf00      	nop
 800f874:	370c      	adds	r7, #12
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f87e:	b480      	push	{r7}
 800f880:	b087      	sub	sp, #28
 800f882:	af00      	add	r7, sp, #0
 800f884:	60f8      	str	r0, [r7, #12]
 800f886:	60b9      	str	r1, [r7, #8]
 800f888:	4613      	mov	r3, r2
 800f88a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	3301      	adds	r3, #1
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	2b03      	cmp	r3, #3
 800f894:	d120      	bne.n	800f8d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	1e9a      	subs	r2, r3, #2
 800f89c:	88fb      	ldrh	r3, [r7, #6]
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	bf28      	it	cs
 800f8a2:	4613      	movcs	r3, r2
 800f8a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	3302      	adds	r3, #2
 800f8aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	82fb      	strh	r3, [r7, #22]
 800f8b0:	e00b      	b.n	800f8ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f8b2:	8afb      	ldrh	r3, [r7, #22]
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	781a      	ldrb	r2, [r3, #0]
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f8c4:	8afb      	ldrh	r3, [r7, #22]
 800f8c6:	3302      	adds	r3, #2
 800f8c8:	82fb      	strh	r3, [r7, #22]
 800f8ca:	8afa      	ldrh	r2, [r7, #22]
 800f8cc:	8abb      	ldrh	r3, [r7, #20]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d3ef      	bcc.n	800f8b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	701a      	strb	r2, [r3, #0]
  }
}
 800f8d8:	bf00      	nop
 800f8da:	371c      	adds	r7, #28
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr

0800f8e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	881a      	ldrh	r2, [r3, #0]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	4413      	add	r3, r2
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4413      	add	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f90c:	68fb      	ldr	r3, [r7, #12]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3714      	adds	r7, #20
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr

0800f91a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b086      	sub	sp, #24
 800f91e:	af00      	add	r7, sp, #0
 800f920:	60f8      	str	r0, [r7, #12]
 800f922:	60b9      	str	r1, [r7, #8]
 800f924:	4613      	mov	r3, r2
 800f926:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f928:	2301      	movs	r3, #1
 800f92a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	789b      	ldrb	r3, [r3, #2]
 800f930:	2b01      	cmp	r3, #1
 800f932:	d002      	beq.n	800f93a <USBH_CtlReq+0x20>
 800f934:	2b02      	cmp	r3, #2
 800f936:	d00f      	beq.n	800f958 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f938:	e027      	b.n	800f98a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	68ba      	ldr	r2, [r7, #8]
 800f93e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	88fa      	ldrh	r2, [r7, #6]
 800f944:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2201      	movs	r2, #1
 800f94a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2202      	movs	r2, #2
 800f950:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f952:	2301      	movs	r3, #1
 800f954:	75fb      	strb	r3, [r7, #23]
      break;
 800f956:	e018      	b.n	800f98a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f000 f81b 	bl	800f994 <USBH_HandleControl>
 800f95e:	4603      	mov	r3, r0
 800f960:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f962:	7dfb      	ldrb	r3, [r7, #23]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <USBH_CtlReq+0x54>
 800f968:	7dfb      	ldrb	r3, [r7, #23]
 800f96a:	2b03      	cmp	r3, #3
 800f96c:	d106      	bne.n	800f97c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2201      	movs	r2, #1
 800f972:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	761a      	strb	r2, [r3, #24]
      break;
 800f97a:	e005      	b.n	800f988 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f97c:	7dfb      	ldrb	r3, [r7, #23]
 800f97e:	2b02      	cmp	r3, #2
 800f980:	d102      	bne.n	800f988 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2201      	movs	r2, #1
 800f986:	709a      	strb	r2, [r3, #2]
      break;
 800f988:	bf00      	nop
  }
  return status;
 800f98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3718      	adds	r7, #24
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b086      	sub	sp, #24
 800f998:	af02      	add	r7, sp, #8
 800f99a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f99c:	2301      	movs	r3, #1
 800f99e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	7e1b      	ldrb	r3, [r3, #24]
 800f9a8:	3b01      	subs	r3, #1
 800f9aa:	2b0a      	cmp	r3, #10
 800f9ac:	f200 8156 	bhi.w	800fc5c <USBH_HandleControl+0x2c8>
 800f9b0:	a201      	add	r2, pc, #4	; (adr r2, 800f9b8 <USBH_HandleControl+0x24>)
 800f9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b6:	bf00      	nop
 800f9b8:	0800f9e5 	.word	0x0800f9e5
 800f9bc:	0800f9ff 	.word	0x0800f9ff
 800f9c0:	0800fa69 	.word	0x0800fa69
 800f9c4:	0800fa8f 	.word	0x0800fa8f
 800f9c8:	0800fac7 	.word	0x0800fac7
 800f9cc:	0800faf1 	.word	0x0800faf1
 800f9d0:	0800fb43 	.word	0x0800fb43
 800f9d4:	0800fb65 	.word	0x0800fb65
 800f9d8:	0800fba1 	.word	0x0800fba1
 800f9dc:	0800fbc7 	.word	0x0800fbc7
 800f9e0:	0800fc05 	.word	0x0800fc05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f103 0110 	add.w	r1, r3, #16
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	795b      	ldrb	r3, [r3, #5]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 f943 	bl	800fc7c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2202      	movs	r2, #2
 800f9fa:	761a      	strb	r2, [r3, #24]
      break;
 800f9fc:	e139      	b.n	800fc72 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	795b      	ldrb	r3, [r3, #5]
 800fa02:	4619      	mov	r1, r3
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f000 fcc5 	bl	8010394 <USBH_LL_GetURBState>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fa0e:	7bbb      	ldrb	r3, [r7, #14]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d11e      	bne.n	800fa52 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	7c1b      	ldrb	r3, [r3, #16]
 800fa18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fa1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	8adb      	ldrh	r3, [r3, #22]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00a      	beq.n	800fa3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fa26:	7b7b      	ldrb	r3, [r7, #13]
 800fa28:	2b80      	cmp	r3, #128	; 0x80
 800fa2a:	d103      	bne.n	800fa34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2203      	movs	r2, #3
 800fa30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fa32:	e115      	b.n	800fc60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2205      	movs	r2, #5
 800fa38:	761a      	strb	r2, [r3, #24]
      break;
 800fa3a:	e111      	b.n	800fc60 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fa3c:	7b7b      	ldrb	r3, [r7, #13]
 800fa3e:	2b80      	cmp	r3, #128	; 0x80
 800fa40:	d103      	bne.n	800fa4a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2209      	movs	r2, #9
 800fa46:	761a      	strb	r2, [r3, #24]
      break;
 800fa48:	e10a      	b.n	800fc60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2207      	movs	r2, #7
 800fa4e:	761a      	strb	r2, [r3, #24]
      break;
 800fa50:	e106      	b.n	800fc60 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fa52:	7bbb      	ldrb	r3, [r7, #14]
 800fa54:	2b04      	cmp	r3, #4
 800fa56:	d003      	beq.n	800fa60 <USBH_HandleControl+0xcc>
 800fa58:	7bbb      	ldrb	r3, [r7, #14]
 800fa5a:	2b02      	cmp	r3, #2
 800fa5c:	f040 8100 	bne.w	800fc60 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	220b      	movs	r2, #11
 800fa64:	761a      	strb	r2, [r3, #24]
      break;
 800fa66:	e0fb      	b.n	800fc60 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fa6e:	b29a      	uxth	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6899      	ldr	r1, [r3, #8]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	899a      	ldrh	r2, [r3, #12]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	791b      	ldrb	r3, [r3, #4]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 f93a 	bl	800fcfa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2204      	movs	r2, #4
 800fa8a:	761a      	strb	r2, [r3, #24]
      break;
 800fa8c:	e0f1      	b.n	800fc72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	791b      	ldrb	r3, [r3, #4]
 800fa92:	4619      	mov	r1, r3
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f000 fc7d 	bl	8010394 <USBH_LL_GetURBState>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fa9e:	7bbb      	ldrb	r3, [r7, #14]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d102      	bne.n	800faaa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2209      	movs	r2, #9
 800faa8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800faaa:	7bbb      	ldrb	r3, [r7, #14]
 800faac:	2b05      	cmp	r3, #5
 800faae:	d102      	bne.n	800fab6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fab0:	2303      	movs	r3, #3
 800fab2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fab4:	e0d6      	b.n	800fc64 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800fab6:	7bbb      	ldrb	r3, [r7, #14]
 800fab8:	2b04      	cmp	r3, #4
 800faba:	f040 80d3 	bne.w	800fc64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	220b      	movs	r2, #11
 800fac2:	761a      	strb	r2, [r3, #24]
      break;
 800fac4:	e0ce      	b.n	800fc64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6899      	ldr	r1, [r3, #8]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	899a      	ldrh	r2, [r3, #12]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	795b      	ldrb	r3, [r3, #5]
 800fad2:	2001      	movs	r0, #1
 800fad4:	9000      	str	r0, [sp, #0]
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f8ea 	bl	800fcb0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2206      	movs	r2, #6
 800faec:	761a      	strb	r2, [r3, #24]
      break;
 800faee:	e0c0      	b.n	800fc72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	795b      	ldrb	r3, [r3, #5]
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 fc4c 	bl	8010394 <USBH_LL_GetURBState>
 800fafc:	4603      	mov	r3, r0
 800fafe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fb00:	7bbb      	ldrb	r3, [r7, #14]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d103      	bne.n	800fb0e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2207      	movs	r2, #7
 800fb0a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fb0c:	e0ac      	b.n	800fc68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800fb0e:	7bbb      	ldrb	r3, [r7, #14]
 800fb10:	2b05      	cmp	r3, #5
 800fb12:	d105      	bne.n	800fb20 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	220c      	movs	r2, #12
 800fb18:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb1e:	e0a3      	b.n	800fc68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fb20:	7bbb      	ldrb	r3, [r7, #14]
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d103      	bne.n	800fb2e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2205      	movs	r2, #5
 800fb2a:	761a      	strb	r2, [r3, #24]
      break;
 800fb2c:	e09c      	b.n	800fc68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800fb2e:	7bbb      	ldrb	r3, [r7, #14]
 800fb30:	2b04      	cmp	r3, #4
 800fb32:	f040 8099 	bne.w	800fc68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	220b      	movs	r2, #11
 800fb3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb40:	e092      	b.n	800fc68 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	791b      	ldrb	r3, [r3, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	2100      	movs	r1, #0
 800fb4a:	6878      	ldr	r0, [r7, #4]
 800fb4c:	f000 f8d5 	bl	800fcfa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2208      	movs	r2, #8
 800fb60:	761a      	strb	r2, [r3, #24]

      break;
 800fb62:	e086      	b.n	800fc72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	791b      	ldrb	r3, [r3, #4]
 800fb68:	4619      	mov	r1, r3
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fc12 	bl	8010394 <USBH_LL_GetURBState>
 800fb70:	4603      	mov	r3, r0
 800fb72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fb74:	7bbb      	ldrb	r3, [r7, #14]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d105      	bne.n	800fb86 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	220d      	movs	r2, #13
 800fb7e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fb80:	2300      	movs	r3, #0
 800fb82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fb84:	e072      	b.n	800fc6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800fb86:	7bbb      	ldrb	r3, [r7, #14]
 800fb88:	2b04      	cmp	r3, #4
 800fb8a:	d103      	bne.n	800fb94 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	220b      	movs	r2, #11
 800fb90:	761a      	strb	r2, [r3, #24]
      break;
 800fb92:	e06b      	b.n	800fc6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800fb94:	7bbb      	ldrb	r3, [r7, #14]
 800fb96:	2b05      	cmp	r3, #5
 800fb98:	d168      	bne.n	800fc6c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb9e:	e065      	b.n	800fc6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	795b      	ldrb	r3, [r3, #5]
 800fba4:	2201      	movs	r2, #1
 800fba6:	9200      	str	r2, [sp, #0]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	2100      	movs	r1, #0
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 f87f 	bl	800fcb0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	220a      	movs	r2, #10
 800fbc2:	761a      	strb	r2, [r3, #24]
      break;
 800fbc4:	e055      	b.n	800fc72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	795b      	ldrb	r3, [r3, #5]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fbe1 	bl	8010394 <USBH_LL_GetURBState>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fbd6:	7bbb      	ldrb	r3, [r7, #14]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d105      	bne.n	800fbe8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	220d      	movs	r2, #13
 800fbe4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fbe6:	e043      	b.n	800fc70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fbe8:	7bbb      	ldrb	r3, [r7, #14]
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d103      	bne.n	800fbf6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2209      	movs	r2, #9
 800fbf2:	761a      	strb	r2, [r3, #24]
      break;
 800fbf4:	e03c      	b.n	800fc70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800fbf6:	7bbb      	ldrb	r3, [r7, #14]
 800fbf8:	2b04      	cmp	r3, #4
 800fbfa:	d139      	bne.n	800fc70 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	220b      	movs	r2, #11
 800fc00:	761a      	strb	r2, [r3, #24]
      break;
 800fc02:	e035      	b.n	800fc70 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	7e5b      	ldrb	r3, [r3, #25]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	b2da      	uxtb	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	765a      	strb	r2, [r3, #25]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	7e5b      	ldrb	r3, [r3, #25]
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	d806      	bhi.n	800fc26 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2201      	movs	r2, #1
 800fc22:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fc24:	e025      	b.n	800fc72 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fc2c:	2106      	movs	r1, #6
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	795b      	ldrb	r3, [r3, #5]
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f90c 	bl	800fe5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	791b      	ldrb	r3, [r3, #4]
 800fc48:	4619      	mov	r1, r3
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 f906 	bl	800fe5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fc56:	2302      	movs	r3, #2
 800fc58:	73fb      	strb	r3, [r7, #15]
      break;
 800fc5a:	e00a      	b.n	800fc72 <USBH_HandleControl+0x2de>

    default:
      break;
 800fc5c:	bf00      	nop
 800fc5e:	e008      	b.n	800fc72 <USBH_HandleControl+0x2de>
      break;
 800fc60:	bf00      	nop
 800fc62:	e006      	b.n	800fc72 <USBH_HandleControl+0x2de>
      break;
 800fc64:	bf00      	nop
 800fc66:	e004      	b.n	800fc72 <USBH_HandleControl+0x2de>
      break;
 800fc68:	bf00      	nop
 800fc6a:	e002      	b.n	800fc72 <USBH_HandleControl+0x2de>
      break;
 800fc6c:	bf00      	nop
 800fc6e:	e000      	b.n	800fc72 <USBH_HandleControl+0x2de>
      break;
 800fc70:	bf00      	nop
  }

  return status;
 800fc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af04      	add	r7, sp, #16
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	4613      	mov	r3, r2
 800fc88:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc8a:	79f9      	ldrb	r1, [r7, #7]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	9303      	str	r3, [sp, #12]
 800fc90:	2308      	movs	r3, #8
 800fc92:	9302      	str	r3, [sp, #8]
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	9301      	str	r3, [sp, #4]
 800fc98:	2300      	movs	r3, #0
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	2200      	movs	r2, #0
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f000 fb46 	bl	8010332 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fca6:	2300      	movs	r3, #0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b088      	sub	sp, #32
 800fcb4:	af04      	add	r7, sp, #16
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	4611      	mov	r1, r2
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	460b      	mov	r3, r1
 800fcc0:	80fb      	strh	r3, [r7, #6]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d001      	beq.n	800fcd4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fcd4:	7979      	ldrb	r1, [r7, #5]
 800fcd6:	7e3b      	ldrb	r3, [r7, #24]
 800fcd8:	9303      	str	r3, [sp, #12]
 800fcda:	88fb      	ldrh	r3, [r7, #6]
 800fcdc:	9302      	str	r3, [sp, #8]
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	9301      	str	r3, [sp, #4]
 800fce2:	2301      	movs	r3, #1
 800fce4:	9300      	str	r3, [sp, #0]
 800fce6:	2300      	movs	r3, #0
 800fce8:	2200      	movs	r2, #0
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	f000 fb21 	bl	8010332 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3710      	adds	r7, #16
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b088      	sub	sp, #32
 800fcfe:	af04      	add	r7, sp, #16
 800fd00:	60f8      	str	r0, [r7, #12]
 800fd02:	60b9      	str	r1, [r7, #8]
 800fd04:	4611      	mov	r1, r2
 800fd06:	461a      	mov	r2, r3
 800fd08:	460b      	mov	r3, r1
 800fd0a:	80fb      	strh	r3, [r7, #6]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fd10:	7979      	ldrb	r1, [r7, #5]
 800fd12:	2300      	movs	r3, #0
 800fd14:	9303      	str	r3, [sp, #12]
 800fd16:	88fb      	ldrh	r3, [r7, #6]
 800fd18:	9302      	str	r3, [sp, #8]
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	9301      	str	r3, [sp, #4]
 800fd1e:	2301      	movs	r3, #1
 800fd20:	9300      	str	r3, [sp, #0]
 800fd22:	2300      	movs	r3, #0
 800fd24:	2201      	movs	r2, #1
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f000 fb03 	bl	8010332 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fd2c:	2300      	movs	r3, #0

}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3710      	adds	r7, #16
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b088      	sub	sp, #32
 800fd3a:	af04      	add	r7, sp, #16
 800fd3c:	60f8      	str	r0, [r7, #12]
 800fd3e:	60b9      	str	r1, [r7, #8]
 800fd40:	4611      	mov	r1, r2
 800fd42:	461a      	mov	r2, r3
 800fd44:	460b      	mov	r3, r1
 800fd46:	80fb      	strh	r3, [r7, #6]
 800fd48:	4613      	mov	r3, r2
 800fd4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d001      	beq.n	800fd5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fd56:	2300      	movs	r3, #0
 800fd58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fd5a:	7979      	ldrb	r1, [r7, #5]
 800fd5c:	7e3b      	ldrb	r3, [r7, #24]
 800fd5e:	9303      	str	r3, [sp, #12]
 800fd60:	88fb      	ldrh	r3, [r7, #6]
 800fd62:	9302      	str	r3, [sp, #8]
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	9301      	str	r3, [sp, #4]
 800fd68:	2301      	movs	r3, #1
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	2302      	movs	r3, #2
 800fd6e:	2200      	movs	r2, #0
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f000 fade 	bl	8010332 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fd76:	2300      	movs	r3, #0
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3710      	adds	r7, #16
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}

0800fd80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b088      	sub	sp, #32
 800fd84:	af04      	add	r7, sp, #16
 800fd86:	60f8      	str	r0, [r7, #12]
 800fd88:	60b9      	str	r1, [r7, #8]
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	460b      	mov	r3, r1
 800fd90:	80fb      	strh	r3, [r7, #6]
 800fd92:	4613      	mov	r3, r2
 800fd94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fd96:	7979      	ldrb	r1, [r7, #5]
 800fd98:	2300      	movs	r3, #0
 800fd9a:	9303      	str	r3, [sp, #12]
 800fd9c:	88fb      	ldrh	r3, [r7, #6]
 800fd9e:	9302      	str	r3, [sp, #8]
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	9301      	str	r3, [sp, #4]
 800fda4:	2301      	movs	r3, #1
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	2302      	movs	r3, #2
 800fdaa:	2201      	movs	r2, #1
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f000 fac0 	bl	8010332 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fdb2:	2300      	movs	r3, #0
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af04      	add	r7, sp, #16
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	4608      	mov	r0, r1
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	461a      	mov	r2, r3
 800fdca:	4603      	mov	r3, r0
 800fdcc:	70fb      	strb	r3, [r7, #3]
 800fdce:	460b      	mov	r3, r1
 800fdd0:	70bb      	strb	r3, [r7, #2]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fdd6:	7878      	ldrb	r0, [r7, #1]
 800fdd8:	78ba      	ldrb	r2, [r7, #2]
 800fdda:	78f9      	ldrb	r1, [r7, #3]
 800fddc:	8b3b      	ldrh	r3, [r7, #24]
 800fdde:	9302      	str	r3, [sp, #8]
 800fde0:	7d3b      	ldrb	r3, [r7, #20]
 800fde2:	9301      	str	r3, [sp, #4]
 800fde4:	7c3b      	ldrb	r3, [r7, #16]
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	4603      	mov	r3, r0
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 fa53 	bl	8010296 <USBH_LL_OpenPipe>

  return USBH_OK;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}

0800fdfa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fdfa:	b580      	push	{r7, lr}
 800fdfc:	b082      	sub	sp, #8
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
 800fe02:	460b      	mov	r3, r1
 800fe04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fe06:	78fb      	ldrb	r3, [r7, #3]
 800fe08:	4619      	mov	r1, r3
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f000 fa72 	bl	80102f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}

0800fe1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fe1a:	b580      	push	{r7, lr}
 800fe1c:	b084      	sub	sp, #16
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
 800fe22:	460b      	mov	r3, r1
 800fe24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 f836 	bl	800fe98 <USBH_GetFreePipe>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fe30:	89fb      	ldrh	r3, [r7, #14]
 800fe32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d00a      	beq.n	800fe50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fe3a:	78fa      	ldrb	r2, [r7, #3]
 800fe3c:	89fb      	ldrh	r3, [r7, #14]
 800fe3e:	f003 030f 	and.w	r3, r3, #15
 800fe42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fe46:	6879      	ldr	r1, [r7, #4]
 800fe48:	33e0      	adds	r3, #224	; 0xe0
 800fe4a:	009b      	lsls	r3, r3, #2
 800fe4c:	440b      	add	r3, r1
 800fe4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fe50:	89fb      	ldrh	r3, [r7, #14]
 800fe52:	b2db      	uxtb	r3, r3
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	460b      	mov	r3, r1
 800fe66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fe68:	78fb      	ldrb	r3, [r7, #3]
 800fe6a:	2b0a      	cmp	r3, #10
 800fe6c:	d80d      	bhi.n	800fe8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fe6e:	78fb      	ldrb	r3, [r7, #3]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	33e0      	adds	r3, #224	; 0xe0
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	4413      	add	r3, r2
 800fe78:	685a      	ldr	r2, [r3, #4]
 800fe7a:	78fb      	ldrb	r3, [r7, #3]
 800fe7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fe80:	6879      	ldr	r1, [r7, #4]
 800fe82:	33e0      	adds	r3, #224	; 0xe0
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	440b      	add	r3, r1
 800fe88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fea0:	2300      	movs	r3, #0
 800fea2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800fea4:	2300      	movs	r3, #0
 800fea6:	73fb      	strb	r3, [r7, #15]
 800fea8:	e00f      	b.n	800feca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800feaa:	7bfb      	ldrb	r3, [r7, #15]
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	33e0      	adds	r3, #224	; 0xe0
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	4413      	add	r3, r2
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800feba:	2b00      	cmp	r3, #0
 800febc:	d102      	bne.n	800fec4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	e007      	b.n	800fed4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800fec4:	7bfb      	ldrb	r3, [r7, #15]
 800fec6:	3301      	adds	r3, #1
 800fec8:	73fb      	strb	r3, [r7, #15]
 800feca:	7bfb      	ldrb	r3, [r7, #15]
 800fecc:	2b0a      	cmp	r3, #10
 800fece:	d9ec      	bls.n	800feaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3714      	adds	r7, #20
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fee4:	2201      	movs	r2, #1
 800fee6:	490e      	ldr	r1, [pc, #56]	; (800ff20 <MX_USB_HOST_Init+0x40>)
 800fee8:	480e      	ldr	r0, [pc, #56]	; (800ff24 <MX_USB_HOST_Init+0x44>)
 800feea:	f7fe fca1 	bl	800e830 <USBH_Init>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d001      	beq.n	800fef8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fef4:	f7f3 face 	bl	8003494 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fef8:	490b      	ldr	r1, [pc, #44]	; (800ff28 <MX_USB_HOST_Init+0x48>)
 800fefa:	480a      	ldr	r0, [pc, #40]	; (800ff24 <MX_USB_HOST_Init+0x44>)
 800fefc:	f7fe fd26 	bl	800e94c <USBH_RegisterClass>
 800ff00:	4603      	mov	r3, r0
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d001      	beq.n	800ff0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ff06:	f7f3 fac5 	bl	8003494 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ff0a:	4806      	ldr	r0, [pc, #24]	; (800ff24 <MX_USB_HOST_Init+0x44>)
 800ff0c:	f7fe fdaa 	bl	800ea64 <USBH_Start>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ff16:	f7f3 fabd 	bl	8003494 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ff1a:	bf00      	nop
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	0800ff41 	.word	0x0800ff41
 800ff24:	20000ed0 	.word	0x20000ed0
 800ff28:	200000e4 	.word	0x200000e4

0800ff2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ff30:	4802      	ldr	r0, [pc, #8]	; (800ff3c <MX_USB_HOST_Process+0x10>)
 800ff32:	f7fe fda7 	bl	800ea84 <USBH_Process>
}
 800ff36:	bf00      	nop
 800ff38:	bd80      	pop	{r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	20000ed0 	.word	0x20000ed0

0800ff40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ff4c:	78fb      	ldrb	r3, [r7, #3]
 800ff4e:	3b01      	subs	r3, #1
 800ff50:	2b04      	cmp	r3, #4
 800ff52:	d819      	bhi.n	800ff88 <USBH_UserProcess+0x48>
 800ff54:	a201      	add	r2, pc, #4	; (adr r2, 800ff5c <USBH_UserProcess+0x1c>)
 800ff56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff5a:	bf00      	nop
 800ff5c:	0800ff89 	.word	0x0800ff89
 800ff60:	0800ff79 	.word	0x0800ff79
 800ff64:	0800ff89 	.word	0x0800ff89
 800ff68:	0800ff81 	.word	0x0800ff81
 800ff6c:	0800ff71 	.word	0x0800ff71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ff70:	4b09      	ldr	r3, [pc, #36]	; (800ff98 <USBH_UserProcess+0x58>)
 800ff72:	2203      	movs	r2, #3
 800ff74:	701a      	strb	r2, [r3, #0]
  break;
 800ff76:	e008      	b.n	800ff8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ff78:	4b07      	ldr	r3, [pc, #28]	; (800ff98 <USBH_UserProcess+0x58>)
 800ff7a:	2202      	movs	r2, #2
 800ff7c:	701a      	strb	r2, [r3, #0]
  break;
 800ff7e:	e004      	b.n	800ff8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ff80:	4b05      	ldr	r3, [pc, #20]	; (800ff98 <USBH_UserProcess+0x58>)
 800ff82:	2201      	movs	r2, #1
 800ff84:	701a      	strb	r2, [r3, #0]
  break;
 800ff86:	e000      	b.n	800ff8a <USBH_UserProcess+0x4a>

  default:
  break;
 800ff88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ff8a:	bf00      	nop
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
 800ff96:	bf00      	nop
 800ff98:	200003d4 	.word	0x200003d4

0800ff9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b08a      	sub	sp, #40	; 0x28
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ffa4:	f107 0314 	add.w	r3, r7, #20
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	601a      	str	r2, [r3, #0]
 800ffac:	605a      	str	r2, [r3, #4]
 800ffae:	609a      	str	r2, [r3, #8]
 800ffb0:	60da      	str	r2, [r3, #12]
 800ffb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ffbc:	d147      	bne.n	801004e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	613b      	str	r3, [r7, #16]
 800ffc2:	4b25      	ldr	r3, [pc, #148]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 800ffc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc6:	4a24      	ldr	r2, [pc, #144]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 800ffc8:	f043 0301 	orr.w	r3, r3, #1
 800ffcc:	6313      	str	r3, [r2, #48]	; 0x30
 800ffce:	4b22      	ldr	r3, [pc, #136]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 800ffd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	613b      	str	r3, [r7, #16]
 800ffd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ffda:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ffde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ffe8:	f107 0314 	add.w	r3, r7, #20
 800ffec:	4619      	mov	r1, r3
 800ffee:	481b      	ldr	r0, [pc, #108]	; (801005c <HAL_HCD_MspInit+0xc0>)
 800fff0:	f7f5 fdc0 	bl	8005b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800fff4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800fff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fffa:	2302      	movs	r3, #2
 800fffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010002:	2303      	movs	r3, #3
 8010004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010006:	230a      	movs	r3, #10
 8010008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801000a:	f107 0314 	add.w	r3, r7, #20
 801000e:	4619      	mov	r1, r3
 8010010:	4812      	ldr	r0, [pc, #72]	; (801005c <HAL_HCD_MspInit+0xc0>)
 8010012:	f7f5 fdaf 	bl	8005b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010016:	4b10      	ldr	r3, [pc, #64]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 8010018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801001a:	4a0f      	ldr	r2, [pc, #60]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 801001c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010020:	6353      	str	r3, [r2, #52]	; 0x34
 8010022:	2300      	movs	r3, #0
 8010024:	60fb      	str	r3, [r7, #12]
 8010026:	4b0c      	ldr	r3, [pc, #48]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 8010028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801002a:	4a0b      	ldr	r2, [pc, #44]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 801002c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010030:	6453      	str	r3, [r2, #68]	; 0x44
 8010032:	4b09      	ldr	r3, [pc, #36]	; (8010058 <HAL_HCD_MspInit+0xbc>)
 8010034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801003a:	60fb      	str	r3, [r7, #12]
 801003c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801003e:	2200      	movs	r2, #0
 8010040:	2100      	movs	r1, #0
 8010042:	2043      	movs	r0, #67	; 0x43
 8010044:	f7f5 f838 	bl	80050b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010048:	2043      	movs	r0, #67	; 0x43
 801004a:	f7f5 f861 	bl	8005110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801004e:	bf00      	nop
 8010050:	3728      	adds	r7, #40	; 0x28
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	40023800 	.word	0x40023800
 801005c:	40020000 	.word	0x40020000

08010060 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801006e:	4618      	mov	r0, r3
 8010070:	f7ff f8db 	bl	800f22a <USBH_LL_IncTimer>
}
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff f913 	bl	800f2b6 <USBH_LL_Connect>
}
 8010090:	bf00      	nop
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7ff f91c 	bl	800f2e4 <USBH_LL_Disconnect>
}
 80100ac:	bf00      	nop
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}

080100b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b083      	sub	sp, #12
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	460b      	mov	r3, r1
 80100be:	70fb      	strb	r3, [r7, #3]
 80100c0:	4613      	mov	r3, r2
 80100c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80100c4:	bf00      	nop
 80100c6:	370c      	adds	r7, #12
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff f8cd 	bl	800f27e <USBH_LL_PortEnabled>
}
 80100e4:	bf00      	nop
 80100e6:	3708      	adds	r7, #8
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}

080100ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7ff f8cd 	bl	800f29a <USBH_LL_PortDisabled>
}
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010116:	2b01      	cmp	r3, #1
 8010118:	d12a      	bne.n	8010170 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801011a:	4a18      	ldr	r2, [pc, #96]	; (801017c <USBH_LL_Init+0x74>)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	4a15      	ldr	r2, [pc, #84]	; (801017c <USBH_LL_Init+0x74>)
 8010126:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801012a:	4b14      	ldr	r3, [pc, #80]	; (801017c <USBH_LL_Init+0x74>)
 801012c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010130:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8010132:	4b12      	ldr	r3, [pc, #72]	; (801017c <USBH_LL_Init+0x74>)
 8010134:	2208      	movs	r2, #8
 8010136:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010138:	4b10      	ldr	r3, [pc, #64]	; (801017c <USBH_LL_Init+0x74>)
 801013a:	2201      	movs	r2, #1
 801013c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801013e:	4b0f      	ldr	r3, [pc, #60]	; (801017c <USBH_LL_Init+0x74>)
 8010140:	2200      	movs	r2, #0
 8010142:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010144:	4b0d      	ldr	r3, [pc, #52]	; (801017c <USBH_LL_Init+0x74>)
 8010146:	2202      	movs	r2, #2
 8010148:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801014a:	4b0c      	ldr	r3, [pc, #48]	; (801017c <USBH_LL_Init+0x74>)
 801014c:	2200      	movs	r2, #0
 801014e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010150:	480a      	ldr	r0, [pc, #40]	; (801017c <USBH_LL_Init+0x74>)
 8010152:	f7f6 f8f7 	bl	8006344 <HAL_HCD_Init>
 8010156:	4603      	mov	r3, r0
 8010158:	2b00      	cmp	r3, #0
 801015a:	d001      	beq.n	8010160 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801015c:	f7f3 f99a 	bl	8003494 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010160:	4806      	ldr	r0, [pc, #24]	; (801017c <USBH_LL_Init+0x74>)
 8010162:	f7f6 fce6 	bl	8006b32 <HAL_HCD_GetCurrentFrame>
 8010166:	4603      	mov	r3, r0
 8010168:	4619      	mov	r1, r3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f7ff f84e 	bl	800f20c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010170:	2300      	movs	r3, #0
}
 8010172:	4618      	mov	r0, r3
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	200012a8 	.word	0x200012a8

08010180 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801018c:	2300      	movs	r3, #0
 801018e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010196:	4618      	mov	r0, r3
 8010198:	f7f6 fc55 	bl	8006a46 <HAL_HCD_Start>
 801019c:	4603      	mov	r3, r0
 801019e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80101a0:	7bfb      	ldrb	r3, [r7, #15]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f000 f95c 	bl	8010460 <USBH_Get_USB_Status>
 80101a8:	4603      	mov	r3, r0
 80101aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b084      	sub	sp, #16
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7f6 fc5d 	bl	8006a8c <HAL_HCD_Stop>
 80101d2:	4603      	mov	r3, r0
 80101d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80101d6:	7bfb      	ldrb	r3, [r7, #15]
 80101d8:	4618      	mov	r0, r3
 80101da:	f000 f941 	bl	8010460 <USBH_Get_USB_Status>
 80101de:	4603      	mov	r3, r0
 80101e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3710      	adds	r7, #16
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80101f4:	2301      	movs	r3, #1
 80101f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80101fe:	4618      	mov	r0, r3
 8010200:	f7f6 fca5 	bl	8006b4e <HAL_HCD_GetCurrentSpeed>
 8010204:	4603      	mov	r3, r0
 8010206:	2b02      	cmp	r3, #2
 8010208:	d00c      	beq.n	8010224 <USBH_LL_GetSpeed+0x38>
 801020a:	2b02      	cmp	r3, #2
 801020c:	d80d      	bhi.n	801022a <USBH_LL_GetSpeed+0x3e>
 801020e:	2b00      	cmp	r3, #0
 8010210:	d002      	beq.n	8010218 <USBH_LL_GetSpeed+0x2c>
 8010212:	2b01      	cmp	r3, #1
 8010214:	d003      	beq.n	801021e <USBH_LL_GetSpeed+0x32>
 8010216:	e008      	b.n	801022a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010218:	2300      	movs	r3, #0
 801021a:	73fb      	strb	r3, [r7, #15]
    break;
 801021c:	e008      	b.n	8010230 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801021e:	2301      	movs	r3, #1
 8010220:	73fb      	strb	r3, [r7, #15]
    break;
 8010222:	e005      	b.n	8010230 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010224:	2302      	movs	r3, #2
 8010226:	73fb      	strb	r3, [r7, #15]
    break;
 8010228:	e002      	b.n	8010230 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801022a:	2301      	movs	r3, #1
 801022c:	73fb      	strb	r3, [r7, #15]
    break;
 801022e:	bf00      	nop
  }
  return  speed;
 8010230:	7bfb      	ldrb	r3, [r7, #15]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b084      	sub	sp, #16
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010242:	2300      	movs	r3, #0
 8010244:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010246:	2300      	movs	r3, #0
 8010248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010250:	4618      	mov	r0, r3
 8010252:	f7f6 fc38 	bl	8006ac6 <HAL_HCD_ResetPort>
 8010256:	4603      	mov	r3, r0
 8010258:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801025a:	7bfb      	ldrb	r3, [r7, #15]
 801025c:	4618      	mov	r0, r3
 801025e:	f000 f8ff 	bl	8010460 <USBH_Get_USB_Status>
 8010262:	4603      	mov	r3, r0
 8010264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010266:	7bbb      	ldrb	r3, [r7, #14]
}
 8010268:	4618      	mov	r0, r3
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b082      	sub	sp, #8
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	460b      	mov	r3, r1
 801027a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010282:	78fa      	ldrb	r2, [r7, #3]
 8010284:	4611      	mov	r1, r2
 8010286:	4618      	mov	r0, r3
 8010288:	f7f6 fc3f 	bl	8006b0a <HAL_HCD_HC_GetXferCount>
 801028c:	4603      	mov	r3, r0
}
 801028e:	4618      	mov	r0, r3
 8010290:	3708      	adds	r7, #8
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010296:	b590      	push	{r4, r7, lr}
 8010298:	b089      	sub	sp, #36	; 0x24
 801029a:	af04      	add	r7, sp, #16
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	4608      	mov	r0, r1
 80102a0:	4611      	mov	r1, r2
 80102a2:	461a      	mov	r2, r3
 80102a4:	4603      	mov	r3, r0
 80102a6:	70fb      	strb	r3, [r7, #3]
 80102a8:	460b      	mov	r3, r1
 80102aa:	70bb      	strb	r3, [r7, #2]
 80102ac:	4613      	mov	r3, r2
 80102ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80102b4:	2300      	movs	r3, #0
 80102b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80102be:	787c      	ldrb	r4, [r7, #1]
 80102c0:	78ba      	ldrb	r2, [r7, #2]
 80102c2:	78f9      	ldrb	r1, [r7, #3]
 80102c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80102c6:	9302      	str	r3, [sp, #8]
 80102c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	4623      	mov	r3, r4
 80102d6:	f7f6 f8a3 	bl	8006420 <HAL_HCD_HC_Init>
 80102da:	4603      	mov	r3, r0
 80102dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80102de:	7bfb      	ldrb	r3, [r7, #15]
 80102e0:	4618      	mov	r0, r3
 80102e2:	f000 f8bd 	bl	8010460 <USBH_Get_USB_Status>
 80102e6:	4603      	mov	r3, r0
 80102e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd90      	pop	{r4, r7, pc}

080102f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	460b      	mov	r3, r1
 80102fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010300:	2300      	movs	r3, #0
 8010302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801030e:	78fa      	ldrb	r2, [r7, #3]
 8010310:	4611      	mov	r1, r2
 8010312:	4618      	mov	r0, r3
 8010314:	f7f6 f913 	bl	800653e <HAL_HCD_HC_Halt>
 8010318:	4603      	mov	r3, r0
 801031a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801031c:	7bfb      	ldrb	r3, [r7, #15]
 801031e:	4618      	mov	r0, r3
 8010320:	f000 f89e 	bl	8010460 <USBH_Get_USB_Status>
 8010324:	4603      	mov	r3, r0
 8010326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010328:	7bbb      	ldrb	r3, [r7, #14]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3710      	adds	r7, #16
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010332:	b590      	push	{r4, r7, lr}
 8010334:	b089      	sub	sp, #36	; 0x24
 8010336:	af04      	add	r7, sp, #16
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	4608      	mov	r0, r1
 801033c:	4611      	mov	r1, r2
 801033e:	461a      	mov	r2, r3
 8010340:	4603      	mov	r3, r0
 8010342:	70fb      	strb	r3, [r7, #3]
 8010344:	460b      	mov	r3, r1
 8010346:	70bb      	strb	r3, [r7, #2]
 8010348:	4613      	mov	r3, r2
 801034a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801034c:	2300      	movs	r3, #0
 801034e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010350:	2300      	movs	r3, #0
 8010352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801035a:	787c      	ldrb	r4, [r7, #1]
 801035c:	78ba      	ldrb	r2, [r7, #2]
 801035e:	78f9      	ldrb	r1, [r7, #3]
 8010360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010364:	9303      	str	r3, [sp, #12]
 8010366:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010368:	9302      	str	r3, [sp, #8]
 801036a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036c:	9301      	str	r3, [sp, #4]
 801036e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	4623      	mov	r3, r4
 8010376:	f7f6 f905 	bl	8006584 <HAL_HCD_HC_SubmitRequest>
 801037a:	4603      	mov	r3, r0
 801037c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801037e:	7bfb      	ldrb	r3, [r7, #15]
 8010380:	4618      	mov	r0, r3
 8010382:	f000 f86d 	bl	8010460 <USBH_Get_USB_Status>
 8010386:	4603      	mov	r3, r0
 8010388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801038a:	7bbb      	ldrb	r3, [r7, #14]
}
 801038c:	4618      	mov	r0, r3
 801038e:	3714      	adds	r7, #20
 8010390:	46bd      	mov	sp, r7
 8010392:	bd90      	pop	{r4, r7, pc}

08010394 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	460b      	mov	r3, r1
 801039e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80103a6:	78fa      	ldrb	r2, [r7, #3]
 80103a8:	4611      	mov	r1, r2
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7f6 fb99 	bl	8006ae2 <HAL_HCD_HC_GetURBState>
 80103b0:	4603      	mov	r3, r0
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b082      	sub	sp, #8
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
 80103c2:	460b      	mov	r3, r1
 80103c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	d103      	bne.n	80103d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80103d0:	78fb      	ldrb	r3, [r7, #3]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f000 f870 	bl	80104b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80103d8:	20c8      	movs	r0, #200	; 0xc8
 80103da:	f7f4 f97b 	bl	80046d4 <HAL_Delay>
  return USBH_OK;
 80103de:	2300      	movs	r3, #0
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	70fb      	strb	r3, [r7, #3]
 80103f4:	4613      	mov	r3, r2
 80103f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80103fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010400:	78fb      	ldrb	r3, [r7, #3]
 8010402:	68fa      	ldr	r2, [r7, #12]
 8010404:	212c      	movs	r1, #44	; 0x2c
 8010406:	fb01 f303 	mul.w	r3, r1, r3
 801040a:	4413      	add	r3, r2
 801040c:	333b      	adds	r3, #59	; 0x3b
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d009      	beq.n	8010428 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010414:	78fb      	ldrb	r3, [r7, #3]
 8010416:	68fa      	ldr	r2, [r7, #12]
 8010418:	212c      	movs	r1, #44	; 0x2c
 801041a:	fb01 f303 	mul.w	r3, r1, r3
 801041e:	4413      	add	r3, r2
 8010420:	3354      	adds	r3, #84	; 0x54
 8010422:	78ba      	ldrb	r2, [r7, #2]
 8010424:	701a      	strb	r2, [r3, #0]
 8010426:	e008      	b.n	801043a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010428:	78fb      	ldrb	r3, [r7, #3]
 801042a:	68fa      	ldr	r2, [r7, #12]
 801042c:	212c      	movs	r1, #44	; 0x2c
 801042e:	fb01 f303 	mul.w	r3, r1, r3
 8010432:	4413      	add	r3, r2
 8010434:	3355      	adds	r3, #85	; 0x55
 8010436:	78ba      	ldrb	r2, [r7, #2]
 8010438:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801043a:	2300      	movs	r3, #0
}
 801043c:	4618      	mov	r0, r3
 801043e:	3714      	adds	r7, #20
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7f4 f93f 	bl	80046d4 <HAL_Delay>
}
 8010456:	bf00      	nop
 8010458:	3708      	adds	r7, #8
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
	...

08010460 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	4603      	mov	r3, r0
 8010468:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801046a:	2300      	movs	r3, #0
 801046c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801046e:	79fb      	ldrb	r3, [r7, #7]
 8010470:	2b03      	cmp	r3, #3
 8010472:	d817      	bhi.n	80104a4 <USBH_Get_USB_Status+0x44>
 8010474:	a201      	add	r2, pc, #4	; (adr r2, 801047c <USBH_Get_USB_Status+0x1c>)
 8010476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047a:	bf00      	nop
 801047c:	0801048d 	.word	0x0801048d
 8010480:	08010493 	.word	0x08010493
 8010484:	08010499 	.word	0x08010499
 8010488:	0801049f 	.word	0x0801049f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801048c:	2300      	movs	r3, #0
 801048e:	73fb      	strb	r3, [r7, #15]
    break;
 8010490:	e00b      	b.n	80104aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010492:	2302      	movs	r3, #2
 8010494:	73fb      	strb	r3, [r7, #15]
    break;
 8010496:	e008      	b.n	80104aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010498:	2301      	movs	r3, #1
 801049a:	73fb      	strb	r3, [r7, #15]
    break;
 801049c:	e005      	b.n	80104aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801049e:	2302      	movs	r3, #2
 80104a0:	73fb      	strb	r3, [r7, #15]
    break;
 80104a2:	e002      	b.n	80104aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80104a4:	2302      	movs	r3, #2
 80104a6:	73fb      	strb	r3, [r7, #15]
    break;
 80104a8:	bf00      	nop
  }
  return usb_status;
 80104aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3714      	adds	r7, #20
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr

080104b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	4603      	mov	r3, r0
 80104c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80104c2:	79fb      	ldrb	r3, [r7, #7]
 80104c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80104c6:	79fb      	ldrb	r3, [r7, #7]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d102      	bne.n	80104d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80104cc:	2301      	movs	r3, #1
 80104ce:	73fb      	strb	r3, [r7, #15]
 80104d0:	e001      	b.n	80104d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80104d2:	2300      	movs	r3, #0
 80104d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80104d6:	7bfb      	ldrb	r3, [r7, #15]
 80104d8:	461a      	mov	r2, r3
 80104da:	2101      	movs	r1, #1
 80104dc:	4803      	ldr	r0, [pc, #12]	; (80104ec <MX_DriverVbusFS+0x34>)
 80104de:	f7f5 fee7 	bl	80062b0 <HAL_GPIO_WritePin>
}
 80104e2:	bf00      	nop
 80104e4:	3710      	adds	r7, #16
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	40020800 	.word	0x40020800

080104f0 <__errno>:
 80104f0:	4b01      	ldr	r3, [pc, #4]	; (80104f8 <__errno+0x8>)
 80104f2:	6818      	ldr	r0, [r3, #0]
 80104f4:	4770      	bx	lr
 80104f6:	bf00      	nop
 80104f8:	20000104 	.word	0x20000104

080104fc <__libc_init_array>:
 80104fc:	b570      	push	{r4, r5, r6, lr}
 80104fe:	4d0d      	ldr	r5, [pc, #52]	; (8010534 <__libc_init_array+0x38>)
 8010500:	4c0d      	ldr	r4, [pc, #52]	; (8010538 <__libc_init_array+0x3c>)
 8010502:	1b64      	subs	r4, r4, r5
 8010504:	10a4      	asrs	r4, r4, #2
 8010506:	2600      	movs	r6, #0
 8010508:	42a6      	cmp	r6, r4
 801050a:	d109      	bne.n	8010520 <__libc_init_array+0x24>
 801050c:	4d0b      	ldr	r5, [pc, #44]	; (801053c <__libc_init_array+0x40>)
 801050e:	4c0c      	ldr	r4, [pc, #48]	; (8010540 <__libc_init_array+0x44>)
 8010510:	f002 fed4 	bl	80132bc <_init>
 8010514:	1b64      	subs	r4, r4, r5
 8010516:	10a4      	asrs	r4, r4, #2
 8010518:	2600      	movs	r6, #0
 801051a:	42a6      	cmp	r6, r4
 801051c:	d105      	bne.n	801052a <__libc_init_array+0x2e>
 801051e:	bd70      	pop	{r4, r5, r6, pc}
 8010520:	f855 3b04 	ldr.w	r3, [r5], #4
 8010524:	4798      	blx	r3
 8010526:	3601      	adds	r6, #1
 8010528:	e7ee      	b.n	8010508 <__libc_init_array+0xc>
 801052a:	f855 3b04 	ldr.w	r3, [r5], #4
 801052e:	4798      	blx	r3
 8010530:	3601      	adds	r6, #1
 8010532:	e7f2      	b.n	801051a <__libc_init_array+0x1e>
 8010534:	08013f74 	.word	0x08013f74
 8010538:	08013f74 	.word	0x08013f74
 801053c:	08013f74 	.word	0x08013f74
 8010540:	08013f78 	.word	0x08013f78

08010544 <malloc>:
 8010544:	4b02      	ldr	r3, [pc, #8]	; (8010550 <malloc+0xc>)
 8010546:	4601      	mov	r1, r0
 8010548:	6818      	ldr	r0, [r3, #0]
 801054a:	f000 b863 	b.w	8010614 <_malloc_r>
 801054e:	bf00      	nop
 8010550:	20000104 	.word	0x20000104

08010554 <free>:
 8010554:	4b02      	ldr	r3, [pc, #8]	; (8010560 <free+0xc>)
 8010556:	4601      	mov	r1, r0
 8010558:	6818      	ldr	r0, [r3, #0]
 801055a:	f000 b80b 	b.w	8010574 <_free_r>
 801055e:	bf00      	nop
 8010560:	20000104 	.word	0x20000104

08010564 <memset>:
 8010564:	4402      	add	r2, r0
 8010566:	4603      	mov	r3, r0
 8010568:	4293      	cmp	r3, r2
 801056a:	d100      	bne.n	801056e <memset+0xa>
 801056c:	4770      	bx	lr
 801056e:	f803 1b01 	strb.w	r1, [r3], #1
 8010572:	e7f9      	b.n	8010568 <memset+0x4>

08010574 <_free_r>:
 8010574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010576:	2900      	cmp	r1, #0
 8010578:	d048      	beq.n	801060c <_free_r+0x98>
 801057a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801057e:	9001      	str	r0, [sp, #4]
 8010580:	2b00      	cmp	r3, #0
 8010582:	f1a1 0404 	sub.w	r4, r1, #4
 8010586:	bfb8      	it	lt
 8010588:	18e4      	addlt	r4, r4, r3
 801058a:	f001 fbdb 	bl	8011d44 <__malloc_lock>
 801058e:	4a20      	ldr	r2, [pc, #128]	; (8010610 <_free_r+0x9c>)
 8010590:	9801      	ldr	r0, [sp, #4]
 8010592:	6813      	ldr	r3, [r2, #0]
 8010594:	4615      	mov	r5, r2
 8010596:	b933      	cbnz	r3, 80105a6 <_free_r+0x32>
 8010598:	6063      	str	r3, [r4, #4]
 801059a:	6014      	str	r4, [r2, #0]
 801059c:	b003      	add	sp, #12
 801059e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80105a2:	f001 bbd5 	b.w	8011d50 <__malloc_unlock>
 80105a6:	42a3      	cmp	r3, r4
 80105a8:	d90b      	bls.n	80105c2 <_free_r+0x4e>
 80105aa:	6821      	ldr	r1, [r4, #0]
 80105ac:	1862      	adds	r2, r4, r1
 80105ae:	4293      	cmp	r3, r2
 80105b0:	bf04      	itt	eq
 80105b2:	681a      	ldreq	r2, [r3, #0]
 80105b4:	685b      	ldreq	r3, [r3, #4]
 80105b6:	6063      	str	r3, [r4, #4]
 80105b8:	bf04      	itt	eq
 80105ba:	1852      	addeq	r2, r2, r1
 80105bc:	6022      	streq	r2, [r4, #0]
 80105be:	602c      	str	r4, [r5, #0]
 80105c0:	e7ec      	b.n	801059c <_free_r+0x28>
 80105c2:	461a      	mov	r2, r3
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	b10b      	cbz	r3, 80105cc <_free_r+0x58>
 80105c8:	42a3      	cmp	r3, r4
 80105ca:	d9fa      	bls.n	80105c2 <_free_r+0x4e>
 80105cc:	6811      	ldr	r1, [r2, #0]
 80105ce:	1855      	adds	r5, r2, r1
 80105d0:	42a5      	cmp	r5, r4
 80105d2:	d10b      	bne.n	80105ec <_free_r+0x78>
 80105d4:	6824      	ldr	r4, [r4, #0]
 80105d6:	4421      	add	r1, r4
 80105d8:	1854      	adds	r4, r2, r1
 80105da:	42a3      	cmp	r3, r4
 80105dc:	6011      	str	r1, [r2, #0]
 80105de:	d1dd      	bne.n	801059c <_free_r+0x28>
 80105e0:	681c      	ldr	r4, [r3, #0]
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	6053      	str	r3, [r2, #4]
 80105e6:	4421      	add	r1, r4
 80105e8:	6011      	str	r1, [r2, #0]
 80105ea:	e7d7      	b.n	801059c <_free_r+0x28>
 80105ec:	d902      	bls.n	80105f4 <_free_r+0x80>
 80105ee:	230c      	movs	r3, #12
 80105f0:	6003      	str	r3, [r0, #0]
 80105f2:	e7d3      	b.n	801059c <_free_r+0x28>
 80105f4:	6825      	ldr	r5, [r4, #0]
 80105f6:	1961      	adds	r1, r4, r5
 80105f8:	428b      	cmp	r3, r1
 80105fa:	bf04      	itt	eq
 80105fc:	6819      	ldreq	r1, [r3, #0]
 80105fe:	685b      	ldreq	r3, [r3, #4]
 8010600:	6063      	str	r3, [r4, #4]
 8010602:	bf04      	itt	eq
 8010604:	1949      	addeq	r1, r1, r5
 8010606:	6021      	streq	r1, [r4, #0]
 8010608:	6054      	str	r4, [r2, #4]
 801060a:	e7c7      	b.n	801059c <_free_r+0x28>
 801060c:	b003      	add	sp, #12
 801060e:	bd30      	pop	{r4, r5, pc}
 8010610:	200003d8 	.word	0x200003d8

08010614 <_malloc_r>:
 8010614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010616:	1ccd      	adds	r5, r1, #3
 8010618:	f025 0503 	bic.w	r5, r5, #3
 801061c:	3508      	adds	r5, #8
 801061e:	2d0c      	cmp	r5, #12
 8010620:	bf38      	it	cc
 8010622:	250c      	movcc	r5, #12
 8010624:	2d00      	cmp	r5, #0
 8010626:	4606      	mov	r6, r0
 8010628:	db01      	blt.n	801062e <_malloc_r+0x1a>
 801062a:	42a9      	cmp	r1, r5
 801062c:	d903      	bls.n	8010636 <_malloc_r+0x22>
 801062e:	230c      	movs	r3, #12
 8010630:	6033      	str	r3, [r6, #0]
 8010632:	2000      	movs	r0, #0
 8010634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010636:	f001 fb85 	bl	8011d44 <__malloc_lock>
 801063a:	4921      	ldr	r1, [pc, #132]	; (80106c0 <_malloc_r+0xac>)
 801063c:	680a      	ldr	r2, [r1, #0]
 801063e:	4614      	mov	r4, r2
 8010640:	b99c      	cbnz	r4, 801066a <_malloc_r+0x56>
 8010642:	4f20      	ldr	r7, [pc, #128]	; (80106c4 <_malloc_r+0xb0>)
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	b923      	cbnz	r3, 8010652 <_malloc_r+0x3e>
 8010648:	4621      	mov	r1, r4
 801064a:	4630      	mov	r0, r6
 801064c:	f000 fca6 	bl	8010f9c <_sbrk_r>
 8010650:	6038      	str	r0, [r7, #0]
 8010652:	4629      	mov	r1, r5
 8010654:	4630      	mov	r0, r6
 8010656:	f000 fca1 	bl	8010f9c <_sbrk_r>
 801065a:	1c43      	adds	r3, r0, #1
 801065c:	d123      	bne.n	80106a6 <_malloc_r+0x92>
 801065e:	230c      	movs	r3, #12
 8010660:	6033      	str	r3, [r6, #0]
 8010662:	4630      	mov	r0, r6
 8010664:	f001 fb74 	bl	8011d50 <__malloc_unlock>
 8010668:	e7e3      	b.n	8010632 <_malloc_r+0x1e>
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	1b5b      	subs	r3, r3, r5
 801066e:	d417      	bmi.n	80106a0 <_malloc_r+0x8c>
 8010670:	2b0b      	cmp	r3, #11
 8010672:	d903      	bls.n	801067c <_malloc_r+0x68>
 8010674:	6023      	str	r3, [r4, #0]
 8010676:	441c      	add	r4, r3
 8010678:	6025      	str	r5, [r4, #0]
 801067a:	e004      	b.n	8010686 <_malloc_r+0x72>
 801067c:	6863      	ldr	r3, [r4, #4]
 801067e:	42a2      	cmp	r2, r4
 8010680:	bf0c      	ite	eq
 8010682:	600b      	streq	r3, [r1, #0]
 8010684:	6053      	strne	r3, [r2, #4]
 8010686:	4630      	mov	r0, r6
 8010688:	f001 fb62 	bl	8011d50 <__malloc_unlock>
 801068c:	f104 000b 	add.w	r0, r4, #11
 8010690:	1d23      	adds	r3, r4, #4
 8010692:	f020 0007 	bic.w	r0, r0, #7
 8010696:	1ac2      	subs	r2, r0, r3
 8010698:	d0cc      	beq.n	8010634 <_malloc_r+0x20>
 801069a:	1a1b      	subs	r3, r3, r0
 801069c:	50a3      	str	r3, [r4, r2]
 801069e:	e7c9      	b.n	8010634 <_malloc_r+0x20>
 80106a0:	4622      	mov	r2, r4
 80106a2:	6864      	ldr	r4, [r4, #4]
 80106a4:	e7cc      	b.n	8010640 <_malloc_r+0x2c>
 80106a6:	1cc4      	adds	r4, r0, #3
 80106a8:	f024 0403 	bic.w	r4, r4, #3
 80106ac:	42a0      	cmp	r0, r4
 80106ae:	d0e3      	beq.n	8010678 <_malloc_r+0x64>
 80106b0:	1a21      	subs	r1, r4, r0
 80106b2:	4630      	mov	r0, r6
 80106b4:	f000 fc72 	bl	8010f9c <_sbrk_r>
 80106b8:	3001      	adds	r0, #1
 80106ba:	d1dd      	bne.n	8010678 <_malloc_r+0x64>
 80106bc:	e7cf      	b.n	801065e <_malloc_r+0x4a>
 80106be:	bf00      	nop
 80106c0:	200003d8 	.word	0x200003d8
 80106c4:	200003dc 	.word	0x200003dc

080106c8 <__cvt>:
 80106c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106cc:	ec55 4b10 	vmov	r4, r5, d0
 80106d0:	2d00      	cmp	r5, #0
 80106d2:	460e      	mov	r6, r1
 80106d4:	4619      	mov	r1, r3
 80106d6:	462b      	mov	r3, r5
 80106d8:	bfbb      	ittet	lt
 80106da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80106de:	461d      	movlt	r5, r3
 80106e0:	2300      	movge	r3, #0
 80106e2:	232d      	movlt	r3, #45	; 0x2d
 80106e4:	700b      	strb	r3, [r1, #0]
 80106e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80106ec:	4691      	mov	r9, r2
 80106ee:	f023 0820 	bic.w	r8, r3, #32
 80106f2:	bfbc      	itt	lt
 80106f4:	4622      	movlt	r2, r4
 80106f6:	4614      	movlt	r4, r2
 80106f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80106fc:	d005      	beq.n	801070a <__cvt+0x42>
 80106fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010702:	d100      	bne.n	8010706 <__cvt+0x3e>
 8010704:	3601      	adds	r6, #1
 8010706:	2102      	movs	r1, #2
 8010708:	e000      	b.n	801070c <__cvt+0x44>
 801070a:	2103      	movs	r1, #3
 801070c:	ab03      	add	r3, sp, #12
 801070e:	9301      	str	r3, [sp, #4]
 8010710:	ab02      	add	r3, sp, #8
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	ec45 4b10 	vmov	d0, r4, r5
 8010718:	4653      	mov	r3, sl
 801071a:	4632      	mov	r2, r6
 801071c:	f000 fd14 	bl	8011148 <_dtoa_r>
 8010720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010724:	4607      	mov	r7, r0
 8010726:	d102      	bne.n	801072e <__cvt+0x66>
 8010728:	f019 0f01 	tst.w	r9, #1
 801072c:	d022      	beq.n	8010774 <__cvt+0xac>
 801072e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010732:	eb07 0906 	add.w	r9, r7, r6
 8010736:	d110      	bne.n	801075a <__cvt+0x92>
 8010738:	783b      	ldrb	r3, [r7, #0]
 801073a:	2b30      	cmp	r3, #48	; 0x30
 801073c:	d10a      	bne.n	8010754 <__cvt+0x8c>
 801073e:	2200      	movs	r2, #0
 8010740:	2300      	movs	r3, #0
 8010742:	4620      	mov	r0, r4
 8010744:	4629      	mov	r1, r5
 8010746:	f7f0 f9c7 	bl	8000ad8 <__aeabi_dcmpeq>
 801074a:	b918      	cbnz	r0, 8010754 <__cvt+0x8c>
 801074c:	f1c6 0601 	rsb	r6, r6, #1
 8010750:	f8ca 6000 	str.w	r6, [sl]
 8010754:	f8da 3000 	ldr.w	r3, [sl]
 8010758:	4499      	add	r9, r3
 801075a:	2200      	movs	r2, #0
 801075c:	2300      	movs	r3, #0
 801075e:	4620      	mov	r0, r4
 8010760:	4629      	mov	r1, r5
 8010762:	f7f0 f9b9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010766:	b108      	cbz	r0, 801076c <__cvt+0xa4>
 8010768:	f8cd 900c 	str.w	r9, [sp, #12]
 801076c:	2230      	movs	r2, #48	; 0x30
 801076e:	9b03      	ldr	r3, [sp, #12]
 8010770:	454b      	cmp	r3, r9
 8010772:	d307      	bcc.n	8010784 <__cvt+0xbc>
 8010774:	9b03      	ldr	r3, [sp, #12]
 8010776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010778:	1bdb      	subs	r3, r3, r7
 801077a:	4638      	mov	r0, r7
 801077c:	6013      	str	r3, [r2, #0]
 801077e:	b004      	add	sp, #16
 8010780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010784:	1c59      	adds	r1, r3, #1
 8010786:	9103      	str	r1, [sp, #12]
 8010788:	701a      	strb	r2, [r3, #0]
 801078a:	e7f0      	b.n	801076e <__cvt+0xa6>

0801078c <__exponent>:
 801078c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801078e:	4603      	mov	r3, r0
 8010790:	2900      	cmp	r1, #0
 8010792:	bfb8      	it	lt
 8010794:	4249      	neglt	r1, r1
 8010796:	f803 2b02 	strb.w	r2, [r3], #2
 801079a:	bfb4      	ite	lt
 801079c:	222d      	movlt	r2, #45	; 0x2d
 801079e:	222b      	movge	r2, #43	; 0x2b
 80107a0:	2909      	cmp	r1, #9
 80107a2:	7042      	strb	r2, [r0, #1]
 80107a4:	dd2a      	ble.n	80107fc <__exponent+0x70>
 80107a6:	f10d 0407 	add.w	r4, sp, #7
 80107aa:	46a4      	mov	ip, r4
 80107ac:	270a      	movs	r7, #10
 80107ae:	46a6      	mov	lr, r4
 80107b0:	460a      	mov	r2, r1
 80107b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80107b6:	fb07 1516 	mls	r5, r7, r6, r1
 80107ba:	3530      	adds	r5, #48	; 0x30
 80107bc:	2a63      	cmp	r2, #99	; 0x63
 80107be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80107c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80107c6:	4631      	mov	r1, r6
 80107c8:	dcf1      	bgt.n	80107ae <__exponent+0x22>
 80107ca:	3130      	adds	r1, #48	; 0x30
 80107cc:	f1ae 0502 	sub.w	r5, lr, #2
 80107d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80107d4:	1c44      	adds	r4, r0, #1
 80107d6:	4629      	mov	r1, r5
 80107d8:	4561      	cmp	r1, ip
 80107da:	d30a      	bcc.n	80107f2 <__exponent+0x66>
 80107dc:	f10d 0209 	add.w	r2, sp, #9
 80107e0:	eba2 020e 	sub.w	r2, r2, lr
 80107e4:	4565      	cmp	r5, ip
 80107e6:	bf88      	it	hi
 80107e8:	2200      	movhi	r2, #0
 80107ea:	4413      	add	r3, r2
 80107ec:	1a18      	subs	r0, r3, r0
 80107ee:	b003      	add	sp, #12
 80107f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80107fa:	e7ed      	b.n	80107d8 <__exponent+0x4c>
 80107fc:	2330      	movs	r3, #48	; 0x30
 80107fe:	3130      	adds	r1, #48	; 0x30
 8010800:	7083      	strb	r3, [r0, #2]
 8010802:	70c1      	strb	r1, [r0, #3]
 8010804:	1d03      	adds	r3, r0, #4
 8010806:	e7f1      	b.n	80107ec <__exponent+0x60>

08010808 <_printf_float>:
 8010808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801080c:	ed2d 8b02 	vpush	{d8}
 8010810:	b08d      	sub	sp, #52	; 0x34
 8010812:	460c      	mov	r4, r1
 8010814:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010818:	4616      	mov	r6, r2
 801081a:	461f      	mov	r7, r3
 801081c:	4605      	mov	r5, r0
 801081e:	f001 fa7f 	bl	8011d20 <_localeconv_r>
 8010822:	f8d0 a000 	ldr.w	sl, [r0]
 8010826:	4650      	mov	r0, sl
 8010828:	f7ef fcda 	bl	80001e0 <strlen>
 801082c:	2300      	movs	r3, #0
 801082e:	930a      	str	r3, [sp, #40]	; 0x28
 8010830:	6823      	ldr	r3, [r4, #0]
 8010832:	9305      	str	r3, [sp, #20]
 8010834:	f8d8 3000 	ldr.w	r3, [r8]
 8010838:	f894 b018 	ldrb.w	fp, [r4, #24]
 801083c:	3307      	adds	r3, #7
 801083e:	f023 0307 	bic.w	r3, r3, #7
 8010842:	f103 0208 	add.w	r2, r3, #8
 8010846:	f8c8 2000 	str.w	r2, [r8]
 801084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010852:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010856:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801085a:	9307      	str	r3, [sp, #28]
 801085c:	f8cd 8018 	str.w	r8, [sp, #24]
 8010860:	ee08 0a10 	vmov	s16, r0
 8010864:	4b9f      	ldr	r3, [pc, #636]	; (8010ae4 <_printf_float+0x2dc>)
 8010866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801086a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801086e:	f7f0 f965 	bl	8000b3c <__aeabi_dcmpun>
 8010872:	bb88      	cbnz	r0, 80108d8 <_printf_float+0xd0>
 8010874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010878:	4b9a      	ldr	r3, [pc, #616]	; (8010ae4 <_printf_float+0x2dc>)
 801087a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801087e:	f7f0 f93f 	bl	8000b00 <__aeabi_dcmple>
 8010882:	bb48      	cbnz	r0, 80108d8 <_printf_float+0xd0>
 8010884:	2200      	movs	r2, #0
 8010886:	2300      	movs	r3, #0
 8010888:	4640      	mov	r0, r8
 801088a:	4649      	mov	r1, r9
 801088c:	f7f0 f92e 	bl	8000aec <__aeabi_dcmplt>
 8010890:	b110      	cbz	r0, 8010898 <_printf_float+0x90>
 8010892:	232d      	movs	r3, #45	; 0x2d
 8010894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010898:	4b93      	ldr	r3, [pc, #588]	; (8010ae8 <_printf_float+0x2e0>)
 801089a:	4894      	ldr	r0, [pc, #592]	; (8010aec <_printf_float+0x2e4>)
 801089c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80108a0:	bf94      	ite	ls
 80108a2:	4698      	movls	r8, r3
 80108a4:	4680      	movhi	r8, r0
 80108a6:	2303      	movs	r3, #3
 80108a8:	6123      	str	r3, [r4, #16]
 80108aa:	9b05      	ldr	r3, [sp, #20]
 80108ac:	f023 0204 	bic.w	r2, r3, #4
 80108b0:	6022      	str	r2, [r4, #0]
 80108b2:	f04f 0900 	mov.w	r9, #0
 80108b6:	9700      	str	r7, [sp, #0]
 80108b8:	4633      	mov	r3, r6
 80108ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80108bc:	4621      	mov	r1, r4
 80108be:	4628      	mov	r0, r5
 80108c0:	f000 f9d8 	bl	8010c74 <_printf_common>
 80108c4:	3001      	adds	r0, #1
 80108c6:	f040 8090 	bne.w	80109ea <_printf_float+0x1e2>
 80108ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108ce:	b00d      	add	sp, #52	; 0x34
 80108d0:	ecbd 8b02 	vpop	{d8}
 80108d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d8:	4642      	mov	r2, r8
 80108da:	464b      	mov	r3, r9
 80108dc:	4640      	mov	r0, r8
 80108de:	4649      	mov	r1, r9
 80108e0:	f7f0 f92c 	bl	8000b3c <__aeabi_dcmpun>
 80108e4:	b140      	cbz	r0, 80108f8 <_printf_float+0xf0>
 80108e6:	464b      	mov	r3, r9
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	bfbc      	itt	lt
 80108ec:	232d      	movlt	r3, #45	; 0x2d
 80108ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80108f2:	487f      	ldr	r0, [pc, #508]	; (8010af0 <_printf_float+0x2e8>)
 80108f4:	4b7f      	ldr	r3, [pc, #508]	; (8010af4 <_printf_float+0x2ec>)
 80108f6:	e7d1      	b.n	801089c <_printf_float+0x94>
 80108f8:	6863      	ldr	r3, [r4, #4]
 80108fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80108fe:	9206      	str	r2, [sp, #24]
 8010900:	1c5a      	adds	r2, r3, #1
 8010902:	d13f      	bne.n	8010984 <_printf_float+0x17c>
 8010904:	2306      	movs	r3, #6
 8010906:	6063      	str	r3, [r4, #4]
 8010908:	9b05      	ldr	r3, [sp, #20]
 801090a:	6861      	ldr	r1, [r4, #4]
 801090c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010910:	2300      	movs	r3, #0
 8010912:	9303      	str	r3, [sp, #12]
 8010914:	ab0a      	add	r3, sp, #40	; 0x28
 8010916:	e9cd b301 	strd	fp, r3, [sp, #4]
 801091a:	ab09      	add	r3, sp, #36	; 0x24
 801091c:	ec49 8b10 	vmov	d0, r8, r9
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	6022      	str	r2, [r4, #0]
 8010924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010928:	4628      	mov	r0, r5
 801092a:	f7ff fecd 	bl	80106c8 <__cvt>
 801092e:	9b06      	ldr	r3, [sp, #24]
 8010930:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010932:	2b47      	cmp	r3, #71	; 0x47
 8010934:	4680      	mov	r8, r0
 8010936:	d108      	bne.n	801094a <_printf_float+0x142>
 8010938:	1cc8      	adds	r0, r1, #3
 801093a:	db02      	blt.n	8010942 <_printf_float+0x13a>
 801093c:	6863      	ldr	r3, [r4, #4]
 801093e:	4299      	cmp	r1, r3
 8010940:	dd41      	ble.n	80109c6 <_printf_float+0x1be>
 8010942:	f1ab 0b02 	sub.w	fp, fp, #2
 8010946:	fa5f fb8b 	uxtb.w	fp, fp
 801094a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801094e:	d820      	bhi.n	8010992 <_printf_float+0x18a>
 8010950:	3901      	subs	r1, #1
 8010952:	465a      	mov	r2, fp
 8010954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010958:	9109      	str	r1, [sp, #36]	; 0x24
 801095a:	f7ff ff17 	bl	801078c <__exponent>
 801095e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010960:	1813      	adds	r3, r2, r0
 8010962:	2a01      	cmp	r2, #1
 8010964:	4681      	mov	r9, r0
 8010966:	6123      	str	r3, [r4, #16]
 8010968:	dc02      	bgt.n	8010970 <_printf_float+0x168>
 801096a:	6822      	ldr	r2, [r4, #0]
 801096c:	07d2      	lsls	r2, r2, #31
 801096e:	d501      	bpl.n	8010974 <_printf_float+0x16c>
 8010970:	3301      	adds	r3, #1
 8010972:	6123      	str	r3, [r4, #16]
 8010974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010978:	2b00      	cmp	r3, #0
 801097a:	d09c      	beq.n	80108b6 <_printf_float+0xae>
 801097c:	232d      	movs	r3, #45	; 0x2d
 801097e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010982:	e798      	b.n	80108b6 <_printf_float+0xae>
 8010984:	9a06      	ldr	r2, [sp, #24]
 8010986:	2a47      	cmp	r2, #71	; 0x47
 8010988:	d1be      	bne.n	8010908 <_printf_float+0x100>
 801098a:	2b00      	cmp	r3, #0
 801098c:	d1bc      	bne.n	8010908 <_printf_float+0x100>
 801098e:	2301      	movs	r3, #1
 8010990:	e7b9      	b.n	8010906 <_printf_float+0xfe>
 8010992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010996:	d118      	bne.n	80109ca <_printf_float+0x1c2>
 8010998:	2900      	cmp	r1, #0
 801099a:	6863      	ldr	r3, [r4, #4]
 801099c:	dd0b      	ble.n	80109b6 <_printf_float+0x1ae>
 801099e:	6121      	str	r1, [r4, #16]
 80109a0:	b913      	cbnz	r3, 80109a8 <_printf_float+0x1a0>
 80109a2:	6822      	ldr	r2, [r4, #0]
 80109a4:	07d0      	lsls	r0, r2, #31
 80109a6:	d502      	bpl.n	80109ae <_printf_float+0x1a6>
 80109a8:	3301      	adds	r3, #1
 80109aa:	440b      	add	r3, r1
 80109ac:	6123      	str	r3, [r4, #16]
 80109ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80109b0:	f04f 0900 	mov.w	r9, #0
 80109b4:	e7de      	b.n	8010974 <_printf_float+0x16c>
 80109b6:	b913      	cbnz	r3, 80109be <_printf_float+0x1b6>
 80109b8:	6822      	ldr	r2, [r4, #0]
 80109ba:	07d2      	lsls	r2, r2, #31
 80109bc:	d501      	bpl.n	80109c2 <_printf_float+0x1ba>
 80109be:	3302      	adds	r3, #2
 80109c0:	e7f4      	b.n	80109ac <_printf_float+0x1a4>
 80109c2:	2301      	movs	r3, #1
 80109c4:	e7f2      	b.n	80109ac <_printf_float+0x1a4>
 80109c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80109ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109cc:	4299      	cmp	r1, r3
 80109ce:	db05      	blt.n	80109dc <_printf_float+0x1d4>
 80109d0:	6823      	ldr	r3, [r4, #0]
 80109d2:	6121      	str	r1, [r4, #16]
 80109d4:	07d8      	lsls	r0, r3, #31
 80109d6:	d5ea      	bpl.n	80109ae <_printf_float+0x1a6>
 80109d8:	1c4b      	adds	r3, r1, #1
 80109da:	e7e7      	b.n	80109ac <_printf_float+0x1a4>
 80109dc:	2900      	cmp	r1, #0
 80109de:	bfd4      	ite	le
 80109e0:	f1c1 0202 	rsble	r2, r1, #2
 80109e4:	2201      	movgt	r2, #1
 80109e6:	4413      	add	r3, r2
 80109e8:	e7e0      	b.n	80109ac <_printf_float+0x1a4>
 80109ea:	6823      	ldr	r3, [r4, #0]
 80109ec:	055a      	lsls	r2, r3, #21
 80109ee:	d407      	bmi.n	8010a00 <_printf_float+0x1f8>
 80109f0:	6923      	ldr	r3, [r4, #16]
 80109f2:	4642      	mov	r2, r8
 80109f4:	4631      	mov	r1, r6
 80109f6:	4628      	mov	r0, r5
 80109f8:	47b8      	blx	r7
 80109fa:	3001      	adds	r0, #1
 80109fc:	d12c      	bne.n	8010a58 <_printf_float+0x250>
 80109fe:	e764      	b.n	80108ca <_printf_float+0xc2>
 8010a00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010a04:	f240 80e0 	bls.w	8010bc8 <_printf_float+0x3c0>
 8010a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	2300      	movs	r3, #0
 8010a10:	f7f0 f862 	bl	8000ad8 <__aeabi_dcmpeq>
 8010a14:	2800      	cmp	r0, #0
 8010a16:	d034      	beq.n	8010a82 <_printf_float+0x27a>
 8010a18:	4a37      	ldr	r2, [pc, #220]	; (8010af8 <_printf_float+0x2f0>)
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	4628      	mov	r0, r5
 8010a20:	47b8      	blx	r7
 8010a22:	3001      	adds	r0, #1
 8010a24:	f43f af51 	beq.w	80108ca <_printf_float+0xc2>
 8010a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	db02      	blt.n	8010a36 <_printf_float+0x22e>
 8010a30:	6823      	ldr	r3, [r4, #0]
 8010a32:	07d8      	lsls	r0, r3, #31
 8010a34:	d510      	bpl.n	8010a58 <_printf_float+0x250>
 8010a36:	ee18 3a10 	vmov	r3, s16
 8010a3a:	4652      	mov	r2, sl
 8010a3c:	4631      	mov	r1, r6
 8010a3e:	4628      	mov	r0, r5
 8010a40:	47b8      	blx	r7
 8010a42:	3001      	adds	r0, #1
 8010a44:	f43f af41 	beq.w	80108ca <_printf_float+0xc2>
 8010a48:	f04f 0800 	mov.w	r8, #0
 8010a4c:	f104 091a 	add.w	r9, r4, #26
 8010a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a52:	3b01      	subs	r3, #1
 8010a54:	4543      	cmp	r3, r8
 8010a56:	dc09      	bgt.n	8010a6c <_printf_float+0x264>
 8010a58:	6823      	ldr	r3, [r4, #0]
 8010a5a:	079b      	lsls	r3, r3, #30
 8010a5c:	f100 8105 	bmi.w	8010c6a <_printf_float+0x462>
 8010a60:	68e0      	ldr	r0, [r4, #12]
 8010a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a64:	4298      	cmp	r0, r3
 8010a66:	bfb8      	it	lt
 8010a68:	4618      	movlt	r0, r3
 8010a6a:	e730      	b.n	80108ce <_printf_float+0xc6>
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	464a      	mov	r2, r9
 8010a70:	4631      	mov	r1, r6
 8010a72:	4628      	mov	r0, r5
 8010a74:	47b8      	blx	r7
 8010a76:	3001      	adds	r0, #1
 8010a78:	f43f af27 	beq.w	80108ca <_printf_float+0xc2>
 8010a7c:	f108 0801 	add.w	r8, r8, #1
 8010a80:	e7e6      	b.n	8010a50 <_printf_float+0x248>
 8010a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	dc39      	bgt.n	8010afc <_printf_float+0x2f4>
 8010a88:	4a1b      	ldr	r2, [pc, #108]	; (8010af8 <_printf_float+0x2f0>)
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	4631      	mov	r1, r6
 8010a8e:	4628      	mov	r0, r5
 8010a90:	47b8      	blx	r7
 8010a92:	3001      	adds	r0, #1
 8010a94:	f43f af19 	beq.w	80108ca <_printf_float+0xc2>
 8010a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	d102      	bne.n	8010aa6 <_printf_float+0x29e>
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	07d9      	lsls	r1, r3, #31
 8010aa4:	d5d8      	bpl.n	8010a58 <_printf_float+0x250>
 8010aa6:	ee18 3a10 	vmov	r3, s16
 8010aaa:	4652      	mov	r2, sl
 8010aac:	4631      	mov	r1, r6
 8010aae:	4628      	mov	r0, r5
 8010ab0:	47b8      	blx	r7
 8010ab2:	3001      	adds	r0, #1
 8010ab4:	f43f af09 	beq.w	80108ca <_printf_float+0xc2>
 8010ab8:	f04f 0900 	mov.w	r9, #0
 8010abc:	f104 0a1a 	add.w	sl, r4, #26
 8010ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac2:	425b      	negs	r3, r3
 8010ac4:	454b      	cmp	r3, r9
 8010ac6:	dc01      	bgt.n	8010acc <_printf_float+0x2c4>
 8010ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aca:	e792      	b.n	80109f2 <_printf_float+0x1ea>
 8010acc:	2301      	movs	r3, #1
 8010ace:	4652      	mov	r2, sl
 8010ad0:	4631      	mov	r1, r6
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	47b8      	blx	r7
 8010ad6:	3001      	adds	r0, #1
 8010ad8:	f43f aef7 	beq.w	80108ca <_printf_float+0xc2>
 8010adc:	f109 0901 	add.w	r9, r9, #1
 8010ae0:	e7ee      	b.n	8010ac0 <_printf_float+0x2b8>
 8010ae2:	bf00      	nop
 8010ae4:	7fefffff 	.word	0x7fefffff
 8010ae8:	08013c8c 	.word	0x08013c8c
 8010aec:	08013c90 	.word	0x08013c90
 8010af0:	08013c98 	.word	0x08013c98
 8010af4:	08013c94 	.word	0x08013c94
 8010af8:	08013c9c 	.word	0x08013c9c
 8010afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b00:	429a      	cmp	r2, r3
 8010b02:	bfa8      	it	ge
 8010b04:	461a      	movge	r2, r3
 8010b06:	2a00      	cmp	r2, #0
 8010b08:	4691      	mov	r9, r2
 8010b0a:	dc37      	bgt.n	8010b7c <_printf_float+0x374>
 8010b0c:	f04f 0b00 	mov.w	fp, #0
 8010b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b14:	f104 021a 	add.w	r2, r4, #26
 8010b18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b1a:	9305      	str	r3, [sp, #20]
 8010b1c:	eba3 0309 	sub.w	r3, r3, r9
 8010b20:	455b      	cmp	r3, fp
 8010b22:	dc33      	bgt.n	8010b8c <_printf_float+0x384>
 8010b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	db3b      	blt.n	8010ba4 <_printf_float+0x39c>
 8010b2c:	6823      	ldr	r3, [r4, #0]
 8010b2e:	07da      	lsls	r2, r3, #31
 8010b30:	d438      	bmi.n	8010ba4 <_printf_float+0x39c>
 8010b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b34:	9b05      	ldr	r3, [sp, #20]
 8010b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b38:	1ad3      	subs	r3, r2, r3
 8010b3a:	eba2 0901 	sub.w	r9, r2, r1
 8010b3e:	4599      	cmp	r9, r3
 8010b40:	bfa8      	it	ge
 8010b42:	4699      	movge	r9, r3
 8010b44:	f1b9 0f00 	cmp.w	r9, #0
 8010b48:	dc35      	bgt.n	8010bb6 <_printf_float+0x3ae>
 8010b4a:	f04f 0800 	mov.w	r8, #0
 8010b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b52:	f104 0a1a 	add.w	sl, r4, #26
 8010b56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b5a:	1a9b      	subs	r3, r3, r2
 8010b5c:	eba3 0309 	sub.w	r3, r3, r9
 8010b60:	4543      	cmp	r3, r8
 8010b62:	f77f af79 	ble.w	8010a58 <_printf_float+0x250>
 8010b66:	2301      	movs	r3, #1
 8010b68:	4652      	mov	r2, sl
 8010b6a:	4631      	mov	r1, r6
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	47b8      	blx	r7
 8010b70:	3001      	adds	r0, #1
 8010b72:	f43f aeaa 	beq.w	80108ca <_printf_float+0xc2>
 8010b76:	f108 0801 	add.w	r8, r8, #1
 8010b7a:	e7ec      	b.n	8010b56 <_printf_float+0x34e>
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	4631      	mov	r1, r6
 8010b80:	4642      	mov	r2, r8
 8010b82:	4628      	mov	r0, r5
 8010b84:	47b8      	blx	r7
 8010b86:	3001      	adds	r0, #1
 8010b88:	d1c0      	bne.n	8010b0c <_printf_float+0x304>
 8010b8a:	e69e      	b.n	80108ca <_printf_float+0xc2>
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	4631      	mov	r1, r6
 8010b90:	4628      	mov	r0, r5
 8010b92:	9205      	str	r2, [sp, #20]
 8010b94:	47b8      	blx	r7
 8010b96:	3001      	adds	r0, #1
 8010b98:	f43f ae97 	beq.w	80108ca <_printf_float+0xc2>
 8010b9c:	9a05      	ldr	r2, [sp, #20]
 8010b9e:	f10b 0b01 	add.w	fp, fp, #1
 8010ba2:	e7b9      	b.n	8010b18 <_printf_float+0x310>
 8010ba4:	ee18 3a10 	vmov	r3, s16
 8010ba8:	4652      	mov	r2, sl
 8010baa:	4631      	mov	r1, r6
 8010bac:	4628      	mov	r0, r5
 8010bae:	47b8      	blx	r7
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	d1be      	bne.n	8010b32 <_printf_float+0x32a>
 8010bb4:	e689      	b.n	80108ca <_printf_float+0xc2>
 8010bb6:	9a05      	ldr	r2, [sp, #20]
 8010bb8:	464b      	mov	r3, r9
 8010bba:	4442      	add	r2, r8
 8010bbc:	4631      	mov	r1, r6
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	47b8      	blx	r7
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	d1c1      	bne.n	8010b4a <_printf_float+0x342>
 8010bc6:	e680      	b.n	80108ca <_printf_float+0xc2>
 8010bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010bca:	2a01      	cmp	r2, #1
 8010bcc:	dc01      	bgt.n	8010bd2 <_printf_float+0x3ca>
 8010bce:	07db      	lsls	r3, r3, #31
 8010bd0:	d538      	bpl.n	8010c44 <_printf_float+0x43c>
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	4642      	mov	r2, r8
 8010bd6:	4631      	mov	r1, r6
 8010bd8:	4628      	mov	r0, r5
 8010bda:	47b8      	blx	r7
 8010bdc:	3001      	adds	r0, #1
 8010bde:	f43f ae74 	beq.w	80108ca <_printf_float+0xc2>
 8010be2:	ee18 3a10 	vmov	r3, s16
 8010be6:	4652      	mov	r2, sl
 8010be8:	4631      	mov	r1, r6
 8010bea:	4628      	mov	r0, r5
 8010bec:	47b8      	blx	r7
 8010bee:	3001      	adds	r0, #1
 8010bf0:	f43f ae6b 	beq.w	80108ca <_printf_float+0xc2>
 8010bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	f7ef ff6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8010c00:	b9d8      	cbnz	r0, 8010c3a <_printf_float+0x432>
 8010c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c04:	f108 0201 	add.w	r2, r8, #1
 8010c08:	3b01      	subs	r3, #1
 8010c0a:	4631      	mov	r1, r6
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	47b8      	blx	r7
 8010c10:	3001      	adds	r0, #1
 8010c12:	d10e      	bne.n	8010c32 <_printf_float+0x42a>
 8010c14:	e659      	b.n	80108ca <_printf_float+0xc2>
 8010c16:	2301      	movs	r3, #1
 8010c18:	4652      	mov	r2, sl
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	4628      	mov	r0, r5
 8010c1e:	47b8      	blx	r7
 8010c20:	3001      	adds	r0, #1
 8010c22:	f43f ae52 	beq.w	80108ca <_printf_float+0xc2>
 8010c26:	f108 0801 	add.w	r8, r8, #1
 8010c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c2c:	3b01      	subs	r3, #1
 8010c2e:	4543      	cmp	r3, r8
 8010c30:	dcf1      	bgt.n	8010c16 <_printf_float+0x40e>
 8010c32:	464b      	mov	r3, r9
 8010c34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010c38:	e6dc      	b.n	80109f4 <_printf_float+0x1ec>
 8010c3a:	f04f 0800 	mov.w	r8, #0
 8010c3e:	f104 0a1a 	add.w	sl, r4, #26
 8010c42:	e7f2      	b.n	8010c2a <_printf_float+0x422>
 8010c44:	2301      	movs	r3, #1
 8010c46:	4642      	mov	r2, r8
 8010c48:	e7df      	b.n	8010c0a <_printf_float+0x402>
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	464a      	mov	r2, r9
 8010c4e:	4631      	mov	r1, r6
 8010c50:	4628      	mov	r0, r5
 8010c52:	47b8      	blx	r7
 8010c54:	3001      	adds	r0, #1
 8010c56:	f43f ae38 	beq.w	80108ca <_printf_float+0xc2>
 8010c5a:	f108 0801 	add.w	r8, r8, #1
 8010c5e:	68e3      	ldr	r3, [r4, #12]
 8010c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010c62:	1a5b      	subs	r3, r3, r1
 8010c64:	4543      	cmp	r3, r8
 8010c66:	dcf0      	bgt.n	8010c4a <_printf_float+0x442>
 8010c68:	e6fa      	b.n	8010a60 <_printf_float+0x258>
 8010c6a:	f04f 0800 	mov.w	r8, #0
 8010c6e:	f104 0919 	add.w	r9, r4, #25
 8010c72:	e7f4      	b.n	8010c5e <_printf_float+0x456>

08010c74 <_printf_common>:
 8010c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c78:	4616      	mov	r6, r2
 8010c7a:	4699      	mov	r9, r3
 8010c7c:	688a      	ldr	r2, [r1, #8]
 8010c7e:	690b      	ldr	r3, [r1, #16]
 8010c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c84:	4293      	cmp	r3, r2
 8010c86:	bfb8      	it	lt
 8010c88:	4613      	movlt	r3, r2
 8010c8a:	6033      	str	r3, [r6, #0]
 8010c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c90:	4607      	mov	r7, r0
 8010c92:	460c      	mov	r4, r1
 8010c94:	b10a      	cbz	r2, 8010c9a <_printf_common+0x26>
 8010c96:	3301      	adds	r3, #1
 8010c98:	6033      	str	r3, [r6, #0]
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	0699      	lsls	r1, r3, #26
 8010c9e:	bf42      	ittt	mi
 8010ca0:	6833      	ldrmi	r3, [r6, #0]
 8010ca2:	3302      	addmi	r3, #2
 8010ca4:	6033      	strmi	r3, [r6, #0]
 8010ca6:	6825      	ldr	r5, [r4, #0]
 8010ca8:	f015 0506 	ands.w	r5, r5, #6
 8010cac:	d106      	bne.n	8010cbc <_printf_common+0x48>
 8010cae:	f104 0a19 	add.w	sl, r4, #25
 8010cb2:	68e3      	ldr	r3, [r4, #12]
 8010cb4:	6832      	ldr	r2, [r6, #0]
 8010cb6:	1a9b      	subs	r3, r3, r2
 8010cb8:	42ab      	cmp	r3, r5
 8010cba:	dc26      	bgt.n	8010d0a <_printf_common+0x96>
 8010cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010cc0:	1e13      	subs	r3, r2, #0
 8010cc2:	6822      	ldr	r2, [r4, #0]
 8010cc4:	bf18      	it	ne
 8010cc6:	2301      	movne	r3, #1
 8010cc8:	0692      	lsls	r2, r2, #26
 8010cca:	d42b      	bmi.n	8010d24 <_printf_common+0xb0>
 8010ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	4638      	mov	r0, r7
 8010cd4:	47c0      	blx	r8
 8010cd6:	3001      	adds	r0, #1
 8010cd8:	d01e      	beq.n	8010d18 <_printf_common+0xa4>
 8010cda:	6823      	ldr	r3, [r4, #0]
 8010cdc:	68e5      	ldr	r5, [r4, #12]
 8010cde:	6832      	ldr	r2, [r6, #0]
 8010ce0:	f003 0306 	and.w	r3, r3, #6
 8010ce4:	2b04      	cmp	r3, #4
 8010ce6:	bf08      	it	eq
 8010ce8:	1aad      	subeq	r5, r5, r2
 8010cea:	68a3      	ldr	r3, [r4, #8]
 8010cec:	6922      	ldr	r2, [r4, #16]
 8010cee:	bf0c      	ite	eq
 8010cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010cf4:	2500      	movne	r5, #0
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	bfc4      	itt	gt
 8010cfa:	1a9b      	subgt	r3, r3, r2
 8010cfc:	18ed      	addgt	r5, r5, r3
 8010cfe:	2600      	movs	r6, #0
 8010d00:	341a      	adds	r4, #26
 8010d02:	42b5      	cmp	r5, r6
 8010d04:	d11a      	bne.n	8010d3c <_printf_common+0xc8>
 8010d06:	2000      	movs	r0, #0
 8010d08:	e008      	b.n	8010d1c <_printf_common+0xa8>
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	4652      	mov	r2, sl
 8010d0e:	4649      	mov	r1, r9
 8010d10:	4638      	mov	r0, r7
 8010d12:	47c0      	blx	r8
 8010d14:	3001      	adds	r0, #1
 8010d16:	d103      	bne.n	8010d20 <_printf_common+0xac>
 8010d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d20:	3501      	adds	r5, #1
 8010d22:	e7c6      	b.n	8010cb2 <_printf_common+0x3e>
 8010d24:	18e1      	adds	r1, r4, r3
 8010d26:	1c5a      	adds	r2, r3, #1
 8010d28:	2030      	movs	r0, #48	; 0x30
 8010d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d2e:	4422      	add	r2, r4
 8010d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d38:	3302      	adds	r3, #2
 8010d3a:	e7c7      	b.n	8010ccc <_printf_common+0x58>
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	4622      	mov	r2, r4
 8010d40:	4649      	mov	r1, r9
 8010d42:	4638      	mov	r0, r7
 8010d44:	47c0      	blx	r8
 8010d46:	3001      	adds	r0, #1
 8010d48:	d0e6      	beq.n	8010d18 <_printf_common+0xa4>
 8010d4a:	3601      	adds	r6, #1
 8010d4c:	e7d9      	b.n	8010d02 <_printf_common+0x8e>
	...

08010d50 <_printf_i>:
 8010d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d54:	460c      	mov	r4, r1
 8010d56:	4691      	mov	r9, r2
 8010d58:	7e27      	ldrb	r7, [r4, #24]
 8010d5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d5c:	2f78      	cmp	r7, #120	; 0x78
 8010d5e:	4680      	mov	r8, r0
 8010d60:	469a      	mov	sl, r3
 8010d62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d66:	d807      	bhi.n	8010d78 <_printf_i+0x28>
 8010d68:	2f62      	cmp	r7, #98	; 0x62
 8010d6a:	d80a      	bhi.n	8010d82 <_printf_i+0x32>
 8010d6c:	2f00      	cmp	r7, #0
 8010d6e:	f000 80d8 	beq.w	8010f22 <_printf_i+0x1d2>
 8010d72:	2f58      	cmp	r7, #88	; 0x58
 8010d74:	f000 80a3 	beq.w	8010ebe <_printf_i+0x16e>
 8010d78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d80:	e03a      	b.n	8010df8 <_printf_i+0xa8>
 8010d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d86:	2b15      	cmp	r3, #21
 8010d88:	d8f6      	bhi.n	8010d78 <_printf_i+0x28>
 8010d8a:	a001      	add	r0, pc, #4	; (adr r0, 8010d90 <_printf_i+0x40>)
 8010d8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010d90:	08010de9 	.word	0x08010de9
 8010d94:	08010dfd 	.word	0x08010dfd
 8010d98:	08010d79 	.word	0x08010d79
 8010d9c:	08010d79 	.word	0x08010d79
 8010da0:	08010d79 	.word	0x08010d79
 8010da4:	08010d79 	.word	0x08010d79
 8010da8:	08010dfd 	.word	0x08010dfd
 8010dac:	08010d79 	.word	0x08010d79
 8010db0:	08010d79 	.word	0x08010d79
 8010db4:	08010d79 	.word	0x08010d79
 8010db8:	08010d79 	.word	0x08010d79
 8010dbc:	08010f09 	.word	0x08010f09
 8010dc0:	08010e2d 	.word	0x08010e2d
 8010dc4:	08010eeb 	.word	0x08010eeb
 8010dc8:	08010d79 	.word	0x08010d79
 8010dcc:	08010d79 	.word	0x08010d79
 8010dd0:	08010f2b 	.word	0x08010f2b
 8010dd4:	08010d79 	.word	0x08010d79
 8010dd8:	08010e2d 	.word	0x08010e2d
 8010ddc:	08010d79 	.word	0x08010d79
 8010de0:	08010d79 	.word	0x08010d79
 8010de4:	08010ef3 	.word	0x08010ef3
 8010de8:	680b      	ldr	r3, [r1, #0]
 8010dea:	1d1a      	adds	r2, r3, #4
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	600a      	str	r2, [r1, #0]
 8010df0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010df8:	2301      	movs	r3, #1
 8010dfa:	e0a3      	b.n	8010f44 <_printf_i+0x1f4>
 8010dfc:	6825      	ldr	r5, [r4, #0]
 8010dfe:	6808      	ldr	r0, [r1, #0]
 8010e00:	062e      	lsls	r6, r5, #24
 8010e02:	f100 0304 	add.w	r3, r0, #4
 8010e06:	d50a      	bpl.n	8010e1e <_printf_i+0xce>
 8010e08:	6805      	ldr	r5, [r0, #0]
 8010e0a:	600b      	str	r3, [r1, #0]
 8010e0c:	2d00      	cmp	r5, #0
 8010e0e:	da03      	bge.n	8010e18 <_printf_i+0xc8>
 8010e10:	232d      	movs	r3, #45	; 0x2d
 8010e12:	426d      	negs	r5, r5
 8010e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e18:	485e      	ldr	r0, [pc, #376]	; (8010f94 <_printf_i+0x244>)
 8010e1a:	230a      	movs	r3, #10
 8010e1c:	e019      	b.n	8010e52 <_printf_i+0x102>
 8010e1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010e22:	6805      	ldr	r5, [r0, #0]
 8010e24:	600b      	str	r3, [r1, #0]
 8010e26:	bf18      	it	ne
 8010e28:	b22d      	sxthne	r5, r5
 8010e2a:	e7ef      	b.n	8010e0c <_printf_i+0xbc>
 8010e2c:	680b      	ldr	r3, [r1, #0]
 8010e2e:	6825      	ldr	r5, [r4, #0]
 8010e30:	1d18      	adds	r0, r3, #4
 8010e32:	6008      	str	r0, [r1, #0]
 8010e34:	0628      	lsls	r0, r5, #24
 8010e36:	d501      	bpl.n	8010e3c <_printf_i+0xec>
 8010e38:	681d      	ldr	r5, [r3, #0]
 8010e3a:	e002      	b.n	8010e42 <_printf_i+0xf2>
 8010e3c:	0669      	lsls	r1, r5, #25
 8010e3e:	d5fb      	bpl.n	8010e38 <_printf_i+0xe8>
 8010e40:	881d      	ldrh	r5, [r3, #0]
 8010e42:	4854      	ldr	r0, [pc, #336]	; (8010f94 <_printf_i+0x244>)
 8010e44:	2f6f      	cmp	r7, #111	; 0x6f
 8010e46:	bf0c      	ite	eq
 8010e48:	2308      	moveq	r3, #8
 8010e4a:	230a      	movne	r3, #10
 8010e4c:	2100      	movs	r1, #0
 8010e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e52:	6866      	ldr	r6, [r4, #4]
 8010e54:	60a6      	str	r6, [r4, #8]
 8010e56:	2e00      	cmp	r6, #0
 8010e58:	bfa2      	ittt	ge
 8010e5a:	6821      	ldrge	r1, [r4, #0]
 8010e5c:	f021 0104 	bicge.w	r1, r1, #4
 8010e60:	6021      	strge	r1, [r4, #0]
 8010e62:	b90d      	cbnz	r5, 8010e68 <_printf_i+0x118>
 8010e64:	2e00      	cmp	r6, #0
 8010e66:	d04d      	beq.n	8010f04 <_printf_i+0x1b4>
 8010e68:	4616      	mov	r6, r2
 8010e6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e6e:	fb03 5711 	mls	r7, r3, r1, r5
 8010e72:	5dc7      	ldrb	r7, [r0, r7]
 8010e74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e78:	462f      	mov	r7, r5
 8010e7a:	42bb      	cmp	r3, r7
 8010e7c:	460d      	mov	r5, r1
 8010e7e:	d9f4      	bls.n	8010e6a <_printf_i+0x11a>
 8010e80:	2b08      	cmp	r3, #8
 8010e82:	d10b      	bne.n	8010e9c <_printf_i+0x14c>
 8010e84:	6823      	ldr	r3, [r4, #0]
 8010e86:	07df      	lsls	r7, r3, #31
 8010e88:	d508      	bpl.n	8010e9c <_printf_i+0x14c>
 8010e8a:	6923      	ldr	r3, [r4, #16]
 8010e8c:	6861      	ldr	r1, [r4, #4]
 8010e8e:	4299      	cmp	r1, r3
 8010e90:	bfde      	ittt	le
 8010e92:	2330      	movle	r3, #48	; 0x30
 8010e94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010e98:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010e9c:	1b92      	subs	r2, r2, r6
 8010e9e:	6122      	str	r2, [r4, #16]
 8010ea0:	f8cd a000 	str.w	sl, [sp]
 8010ea4:	464b      	mov	r3, r9
 8010ea6:	aa03      	add	r2, sp, #12
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	4640      	mov	r0, r8
 8010eac:	f7ff fee2 	bl	8010c74 <_printf_common>
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	d14c      	bne.n	8010f4e <_printf_i+0x1fe>
 8010eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010eb8:	b004      	add	sp, #16
 8010eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ebe:	4835      	ldr	r0, [pc, #212]	; (8010f94 <_printf_i+0x244>)
 8010ec0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ec4:	6823      	ldr	r3, [r4, #0]
 8010ec6:	680e      	ldr	r6, [r1, #0]
 8010ec8:	061f      	lsls	r7, r3, #24
 8010eca:	f856 5b04 	ldr.w	r5, [r6], #4
 8010ece:	600e      	str	r6, [r1, #0]
 8010ed0:	d514      	bpl.n	8010efc <_printf_i+0x1ac>
 8010ed2:	07d9      	lsls	r1, r3, #31
 8010ed4:	bf44      	itt	mi
 8010ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8010eda:	6023      	strmi	r3, [r4, #0]
 8010edc:	b91d      	cbnz	r5, 8010ee6 <_printf_i+0x196>
 8010ede:	6823      	ldr	r3, [r4, #0]
 8010ee0:	f023 0320 	bic.w	r3, r3, #32
 8010ee4:	6023      	str	r3, [r4, #0]
 8010ee6:	2310      	movs	r3, #16
 8010ee8:	e7b0      	b.n	8010e4c <_printf_i+0xfc>
 8010eea:	6823      	ldr	r3, [r4, #0]
 8010eec:	f043 0320 	orr.w	r3, r3, #32
 8010ef0:	6023      	str	r3, [r4, #0]
 8010ef2:	2378      	movs	r3, #120	; 0x78
 8010ef4:	4828      	ldr	r0, [pc, #160]	; (8010f98 <_printf_i+0x248>)
 8010ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010efa:	e7e3      	b.n	8010ec4 <_printf_i+0x174>
 8010efc:	065e      	lsls	r6, r3, #25
 8010efe:	bf48      	it	mi
 8010f00:	b2ad      	uxthmi	r5, r5
 8010f02:	e7e6      	b.n	8010ed2 <_printf_i+0x182>
 8010f04:	4616      	mov	r6, r2
 8010f06:	e7bb      	b.n	8010e80 <_printf_i+0x130>
 8010f08:	680b      	ldr	r3, [r1, #0]
 8010f0a:	6826      	ldr	r6, [r4, #0]
 8010f0c:	6960      	ldr	r0, [r4, #20]
 8010f0e:	1d1d      	adds	r5, r3, #4
 8010f10:	600d      	str	r5, [r1, #0]
 8010f12:	0635      	lsls	r5, r6, #24
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	d501      	bpl.n	8010f1c <_printf_i+0x1cc>
 8010f18:	6018      	str	r0, [r3, #0]
 8010f1a:	e002      	b.n	8010f22 <_printf_i+0x1d2>
 8010f1c:	0671      	lsls	r1, r6, #25
 8010f1e:	d5fb      	bpl.n	8010f18 <_printf_i+0x1c8>
 8010f20:	8018      	strh	r0, [r3, #0]
 8010f22:	2300      	movs	r3, #0
 8010f24:	6123      	str	r3, [r4, #16]
 8010f26:	4616      	mov	r6, r2
 8010f28:	e7ba      	b.n	8010ea0 <_printf_i+0x150>
 8010f2a:	680b      	ldr	r3, [r1, #0]
 8010f2c:	1d1a      	adds	r2, r3, #4
 8010f2e:	600a      	str	r2, [r1, #0]
 8010f30:	681e      	ldr	r6, [r3, #0]
 8010f32:	6862      	ldr	r2, [r4, #4]
 8010f34:	2100      	movs	r1, #0
 8010f36:	4630      	mov	r0, r6
 8010f38:	f7ef f95a 	bl	80001f0 <memchr>
 8010f3c:	b108      	cbz	r0, 8010f42 <_printf_i+0x1f2>
 8010f3e:	1b80      	subs	r0, r0, r6
 8010f40:	6060      	str	r0, [r4, #4]
 8010f42:	6863      	ldr	r3, [r4, #4]
 8010f44:	6123      	str	r3, [r4, #16]
 8010f46:	2300      	movs	r3, #0
 8010f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f4c:	e7a8      	b.n	8010ea0 <_printf_i+0x150>
 8010f4e:	6923      	ldr	r3, [r4, #16]
 8010f50:	4632      	mov	r2, r6
 8010f52:	4649      	mov	r1, r9
 8010f54:	4640      	mov	r0, r8
 8010f56:	47d0      	blx	sl
 8010f58:	3001      	adds	r0, #1
 8010f5a:	d0ab      	beq.n	8010eb4 <_printf_i+0x164>
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	079b      	lsls	r3, r3, #30
 8010f60:	d413      	bmi.n	8010f8a <_printf_i+0x23a>
 8010f62:	68e0      	ldr	r0, [r4, #12]
 8010f64:	9b03      	ldr	r3, [sp, #12]
 8010f66:	4298      	cmp	r0, r3
 8010f68:	bfb8      	it	lt
 8010f6a:	4618      	movlt	r0, r3
 8010f6c:	e7a4      	b.n	8010eb8 <_printf_i+0x168>
 8010f6e:	2301      	movs	r3, #1
 8010f70:	4632      	mov	r2, r6
 8010f72:	4649      	mov	r1, r9
 8010f74:	4640      	mov	r0, r8
 8010f76:	47d0      	blx	sl
 8010f78:	3001      	adds	r0, #1
 8010f7a:	d09b      	beq.n	8010eb4 <_printf_i+0x164>
 8010f7c:	3501      	adds	r5, #1
 8010f7e:	68e3      	ldr	r3, [r4, #12]
 8010f80:	9903      	ldr	r1, [sp, #12]
 8010f82:	1a5b      	subs	r3, r3, r1
 8010f84:	42ab      	cmp	r3, r5
 8010f86:	dcf2      	bgt.n	8010f6e <_printf_i+0x21e>
 8010f88:	e7eb      	b.n	8010f62 <_printf_i+0x212>
 8010f8a:	2500      	movs	r5, #0
 8010f8c:	f104 0619 	add.w	r6, r4, #25
 8010f90:	e7f5      	b.n	8010f7e <_printf_i+0x22e>
 8010f92:	bf00      	nop
 8010f94:	08013c9e 	.word	0x08013c9e
 8010f98:	08013caf 	.word	0x08013caf

08010f9c <_sbrk_r>:
 8010f9c:	b538      	push	{r3, r4, r5, lr}
 8010f9e:	4d06      	ldr	r5, [pc, #24]	; (8010fb8 <_sbrk_r+0x1c>)
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	4604      	mov	r4, r0
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	602b      	str	r3, [r5, #0]
 8010fa8:	f7f3 f8ec 	bl	8004184 <_sbrk>
 8010fac:	1c43      	adds	r3, r0, #1
 8010fae:	d102      	bne.n	8010fb6 <_sbrk_r+0x1a>
 8010fb0:	682b      	ldr	r3, [r5, #0]
 8010fb2:	b103      	cbz	r3, 8010fb6 <_sbrk_r+0x1a>
 8010fb4:	6023      	str	r3, [r4, #0]
 8010fb6:	bd38      	pop	{r3, r4, r5, pc}
 8010fb8:	200015ac 	.word	0x200015ac

08010fbc <_vsniprintf_r>:
 8010fbc:	b530      	push	{r4, r5, lr}
 8010fbe:	1e14      	subs	r4, r2, #0
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	b09b      	sub	sp, #108	; 0x6c
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	da05      	bge.n	8010fd4 <_vsniprintf_r+0x18>
 8010fc8:	238b      	movs	r3, #139	; 0x8b
 8010fca:	602b      	str	r3, [r5, #0]
 8010fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fd0:	b01b      	add	sp, #108	; 0x6c
 8010fd2:	bd30      	pop	{r4, r5, pc}
 8010fd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010fd8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010fdc:	bf14      	ite	ne
 8010fde:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010fe2:	4623      	moveq	r3, r4
 8010fe4:	9302      	str	r3, [sp, #8]
 8010fe6:	9305      	str	r3, [sp, #20]
 8010fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fec:	9100      	str	r1, [sp, #0]
 8010fee:	9104      	str	r1, [sp, #16]
 8010ff0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010ff8:	4669      	mov	r1, sp
 8010ffa:	4628      	mov	r0, r5
 8010ffc:	f001 fa96 	bl	801252c <_svfiprintf_r>
 8011000:	1c43      	adds	r3, r0, #1
 8011002:	bfbc      	itt	lt
 8011004:	238b      	movlt	r3, #139	; 0x8b
 8011006:	602b      	strlt	r3, [r5, #0]
 8011008:	2c00      	cmp	r4, #0
 801100a:	d0e1      	beq.n	8010fd0 <_vsniprintf_r+0x14>
 801100c:	9b00      	ldr	r3, [sp, #0]
 801100e:	2200      	movs	r2, #0
 8011010:	701a      	strb	r2, [r3, #0]
 8011012:	e7dd      	b.n	8010fd0 <_vsniprintf_r+0x14>

08011014 <vsniprintf>:
 8011014:	b507      	push	{r0, r1, r2, lr}
 8011016:	9300      	str	r3, [sp, #0]
 8011018:	4613      	mov	r3, r2
 801101a:	460a      	mov	r2, r1
 801101c:	4601      	mov	r1, r0
 801101e:	4803      	ldr	r0, [pc, #12]	; (801102c <vsniprintf+0x18>)
 8011020:	6800      	ldr	r0, [r0, #0]
 8011022:	f7ff ffcb 	bl	8010fbc <_vsniprintf_r>
 8011026:	b003      	add	sp, #12
 8011028:	f85d fb04 	ldr.w	pc, [sp], #4
 801102c:	20000104 	.word	0x20000104

08011030 <quorem>:
 8011030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011034:	6903      	ldr	r3, [r0, #16]
 8011036:	690c      	ldr	r4, [r1, #16]
 8011038:	42a3      	cmp	r3, r4
 801103a:	4607      	mov	r7, r0
 801103c:	f2c0 8081 	blt.w	8011142 <quorem+0x112>
 8011040:	3c01      	subs	r4, #1
 8011042:	f101 0814 	add.w	r8, r1, #20
 8011046:	f100 0514 	add.w	r5, r0, #20
 801104a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801104e:	9301      	str	r3, [sp, #4]
 8011050:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011054:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011058:	3301      	adds	r3, #1
 801105a:	429a      	cmp	r2, r3
 801105c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011060:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011064:	fbb2 f6f3 	udiv	r6, r2, r3
 8011068:	d331      	bcc.n	80110ce <quorem+0x9e>
 801106a:	f04f 0e00 	mov.w	lr, #0
 801106e:	4640      	mov	r0, r8
 8011070:	46ac      	mov	ip, r5
 8011072:	46f2      	mov	sl, lr
 8011074:	f850 2b04 	ldr.w	r2, [r0], #4
 8011078:	b293      	uxth	r3, r2
 801107a:	fb06 e303 	mla	r3, r6, r3, lr
 801107e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011082:	b29b      	uxth	r3, r3
 8011084:	ebaa 0303 	sub.w	r3, sl, r3
 8011088:	0c12      	lsrs	r2, r2, #16
 801108a:	f8dc a000 	ldr.w	sl, [ip]
 801108e:	fb06 e202 	mla	r2, r6, r2, lr
 8011092:	fa13 f38a 	uxtah	r3, r3, sl
 8011096:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801109a:	fa1f fa82 	uxth.w	sl, r2
 801109e:	f8dc 2000 	ldr.w	r2, [ip]
 80110a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80110a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110b0:	4581      	cmp	r9, r0
 80110b2:	f84c 3b04 	str.w	r3, [ip], #4
 80110b6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80110ba:	d2db      	bcs.n	8011074 <quorem+0x44>
 80110bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80110c0:	b92b      	cbnz	r3, 80110ce <quorem+0x9e>
 80110c2:	9b01      	ldr	r3, [sp, #4]
 80110c4:	3b04      	subs	r3, #4
 80110c6:	429d      	cmp	r5, r3
 80110c8:	461a      	mov	r2, r3
 80110ca:	d32e      	bcc.n	801112a <quorem+0xfa>
 80110cc:	613c      	str	r4, [r7, #16]
 80110ce:	4638      	mov	r0, r7
 80110d0:	f001 f8c2 	bl	8012258 <__mcmp>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	db24      	blt.n	8011122 <quorem+0xf2>
 80110d8:	3601      	adds	r6, #1
 80110da:	4628      	mov	r0, r5
 80110dc:	f04f 0c00 	mov.w	ip, #0
 80110e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80110e4:	f8d0 e000 	ldr.w	lr, [r0]
 80110e8:	b293      	uxth	r3, r2
 80110ea:	ebac 0303 	sub.w	r3, ip, r3
 80110ee:	0c12      	lsrs	r2, r2, #16
 80110f0:	fa13 f38e 	uxtah	r3, r3, lr
 80110f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80110f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011102:	45c1      	cmp	r9, r8
 8011104:	f840 3b04 	str.w	r3, [r0], #4
 8011108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801110c:	d2e8      	bcs.n	80110e0 <quorem+0xb0>
 801110e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011112:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011116:	b922      	cbnz	r2, 8011122 <quorem+0xf2>
 8011118:	3b04      	subs	r3, #4
 801111a:	429d      	cmp	r5, r3
 801111c:	461a      	mov	r2, r3
 801111e:	d30a      	bcc.n	8011136 <quorem+0x106>
 8011120:	613c      	str	r4, [r7, #16]
 8011122:	4630      	mov	r0, r6
 8011124:	b003      	add	sp, #12
 8011126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801112a:	6812      	ldr	r2, [r2, #0]
 801112c:	3b04      	subs	r3, #4
 801112e:	2a00      	cmp	r2, #0
 8011130:	d1cc      	bne.n	80110cc <quorem+0x9c>
 8011132:	3c01      	subs	r4, #1
 8011134:	e7c7      	b.n	80110c6 <quorem+0x96>
 8011136:	6812      	ldr	r2, [r2, #0]
 8011138:	3b04      	subs	r3, #4
 801113a:	2a00      	cmp	r2, #0
 801113c:	d1f0      	bne.n	8011120 <quorem+0xf0>
 801113e:	3c01      	subs	r4, #1
 8011140:	e7eb      	b.n	801111a <quorem+0xea>
 8011142:	2000      	movs	r0, #0
 8011144:	e7ee      	b.n	8011124 <quorem+0xf4>
	...

08011148 <_dtoa_r>:
 8011148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114c:	ed2d 8b02 	vpush	{d8}
 8011150:	ec57 6b10 	vmov	r6, r7, d0
 8011154:	b095      	sub	sp, #84	; 0x54
 8011156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801115c:	9105      	str	r1, [sp, #20]
 801115e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011162:	4604      	mov	r4, r0
 8011164:	9209      	str	r2, [sp, #36]	; 0x24
 8011166:	930f      	str	r3, [sp, #60]	; 0x3c
 8011168:	b975      	cbnz	r5, 8011188 <_dtoa_r+0x40>
 801116a:	2010      	movs	r0, #16
 801116c:	f7ff f9ea 	bl	8010544 <malloc>
 8011170:	4602      	mov	r2, r0
 8011172:	6260      	str	r0, [r4, #36]	; 0x24
 8011174:	b920      	cbnz	r0, 8011180 <_dtoa_r+0x38>
 8011176:	4bb2      	ldr	r3, [pc, #712]	; (8011440 <_dtoa_r+0x2f8>)
 8011178:	21ea      	movs	r1, #234	; 0xea
 801117a:	48b2      	ldr	r0, [pc, #712]	; (8011444 <_dtoa_r+0x2fc>)
 801117c:	f001 fad6 	bl	801272c <__assert_func>
 8011180:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011184:	6005      	str	r5, [r0, #0]
 8011186:	60c5      	str	r5, [r0, #12]
 8011188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801118a:	6819      	ldr	r1, [r3, #0]
 801118c:	b151      	cbz	r1, 80111a4 <_dtoa_r+0x5c>
 801118e:	685a      	ldr	r2, [r3, #4]
 8011190:	604a      	str	r2, [r1, #4]
 8011192:	2301      	movs	r3, #1
 8011194:	4093      	lsls	r3, r2
 8011196:	608b      	str	r3, [r1, #8]
 8011198:	4620      	mov	r0, r4
 801119a:	f000 fe1f 	bl	8011ddc <_Bfree>
 801119e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111a0:	2200      	movs	r2, #0
 80111a2:	601a      	str	r2, [r3, #0]
 80111a4:	1e3b      	subs	r3, r7, #0
 80111a6:	bfb9      	ittee	lt
 80111a8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80111ac:	9303      	strlt	r3, [sp, #12]
 80111ae:	2300      	movge	r3, #0
 80111b0:	f8c8 3000 	strge.w	r3, [r8]
 80111b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80111b8:	4ba3      	ldr	r3, [pc, #652]	; (8011448 <_dtoa_r+0x300>)
 80111ba:	bfbc      	itt	lt
 80111bc:	2201      	movlt	r2, #1
 80111be:	f8c8 2000 	strlt.w	r2, [r8]
 80111c2:	ea33 0309 	bics.w	r3, r3, r9
 80111c6:	d11b      	bne.n	8011200 <_dtoa_r+0xb8>
 80111c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80111ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80111ce:	6013      	str	r3, [r2, #0]
 80111d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111d4:	4333      	orrs	r3, r6
 80111d6:	f000 857a 	beq.w	8011cce <_dtoa_r+0xb86>
 80111da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111dc:	b963      	cbnz	r3, 80111f8 <_dtoa_r+0xb0>
 80111de:	4b9b      	ldr	r3, [pc, #620]	; (801144c <_dtoa_r+0x304>)
 80111e0:	e024      	b.n	801122c <_dtoa_r+0xe4>
 80111e2:	4b9b      	ldr	r3, [pc, #620]	; (8011450 <_dtoa_r+0x308>)
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	3308      	adds	r3, #8
 80111e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80111ea:	6013      	str	r3, [r2, #0]
 80111ec:	9800      	ldr	r0, [sp, #0]
 80111ee:	b015      	add	sp, #84	; 0x54
 80111f0:	ecbd 8b02 	vpop	{d8}
 80111f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f8:	4b94      	ldr	r3, [pc, #592]	; (801144c <_dtoa_r+0x304>)
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	3303      	adds	r3, #3
 80111fe:	e7f3      	b.n	80111e8 <_dtoa_r+0xa0>
 8011200:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011204:	2200      	movs	r2, #0
 8011206:	ec51 0b17 	vmov	r0, r1, d7
 801120a:	2300      	movs	r3, #0
 801120c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011210:	f7ef fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 8011214:	4680      	mov	r8, r0
 8011216:	b158      	cbz	r0, 8011230 <_dtoa_r+0xe8>
 8011218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801121a:	2301      	movs	r3, #1
 801121c:	6013      	str	r3, [r2, #0]
 801121e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 8551 	beq.w	8011cc8 <_dtoa_r+0xb80>
 8011226:	488b      	ldr	r0, [pc, #556]	; (8011454 <_dtoa_r+0x30c>)
 8011228:	6018      	str	r0, [r3, #0]
 801122a:	1e43      	subs	r3, r0, #1
 801122c:	9300      	str	r3, [sp, #0]
 801122e:	e7dd      	b.n	80111ec <_dtoa_r+0xa4>
 8011230:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011234:	aa12      	add	r2, sp, #72	; 0x48
 8011236:	a913      	add	r1, sp, #76	; 0x4c
 8011238:	4620      	mov	r0, r4
 801123a:	f001 f8b1 	bl	80123a0 <__d2b>
 801123e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011242:	4683      	mov	fp, r0
 8011244:	2d00      	cmp	r5, #0
 8011246:	d07c      	beq.n	8011342 <_dtoa_r+0x1fa>
 8011248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801124a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801124e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011252:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011256:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801125a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801125e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011262:	4b7d      	ldr	r3, [pc, #500]	; (8011458 <_dtoa_r+0x310>)
 8011264:	2200      	movs	r2, #0
 8011266:	4630      	mov	r0, r6
 8011268:	4639      	mov	r1, r7
 801126a:	f7ef f815 	bl	8000298 <__aeabi_dsub>
 801126e:	a36e      	add	r3, pc, #440	; (adr r3, 8011428 <_dtoa_r+0x2e0>)
 8011270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011274:	f7ef f9c8 	bl	8000608 <__aeabi_dmul>
 8011278:	a36d      	add	r3, pc, #436	; (adr r3, 8011430 <_dtoa_r+0x2e8>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	f7ef f80d 	bl	800029c <__adddf3>
 8011282:	4606      	mov	r6, r0
 8011284:	4628      	mov	r0, r5
 8011286:	460f      	mov	r7, r1
 8011288:	f7ef f954 	bl	8000534 <__aeabi_i2d>
 801128c:	a36a      	add	r3, pc, #424	; (adr r3, 8011438 <_dtoa_r+0x2f0>)
 801128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011292:	f7ef f9b9 	bl	8000608 <__aeabi_dmul>
 8011296:	4602      	mov	r2, r0
 8011298:	460b      	mov	r3, r1
 801129a:	4630      	mov	r0, r6
 801129c:	4639      	mov	r1, r7
 801129e:	f7ee fffd 	bl	800029c <__adddf3>
 80112a2:	4606      	mov	r6, r0
 80112a4:	460f      	mov	r7, r1
 80112a6:	f7ef fc5f 	bl	8000b68 <__aeabi_d2iz>
 80112aa:	2200      	movs	r2, #0
 80112ac:	4682      	mov	sl, r0
 80112ae:	2300      	movs	r3, #0
 80112b0:	4630      	mov	r0, r6
 80112b2:	4639      	mov	r1, r7
 80112b4:	f7ef fc1a 	bl	8000aec <__aeabi_dcmplt>
 80112b8:	b148      	cbz	r0, 80112ce <_dtoa_r+0x186>
 80112ba:	4650      	mov	r0, sl
 80112bc:	f7ef f93a 	bl	8000534 <__aeabi_i2d>
 80112c0:	4632      	mov	r2, r6
 80112c2:	463b      	mov	r3, r7
 80112c4:	f7ef fc08 	bl	8000ad8 <__aeabi_dcmpeq>
 80112c8:	b908      	cbnz	r0, 80112ce <_dtoa_r+0x186>
 80112ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80112ce:	f1ba 0f16 	cmp.w	sl, #22
 80112d2:	d854      	bhi.n	801137e <_dtoa_r+0x236>
 80112d4:	4b61      	ldr	r3, [pc, #388]	; (801145c <_dtoa_r+0x314>)
 80112d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80112da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80112e2:	f7ef fc03 	bl	8000aec <__aeabi_dcmplt>
 80112e6:	2800      	cmp	r0, #0
 80112e8:	d04b      	beq.n	8011382 <_dtoa_r+0x23a>
 80112ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80112ee:	2300      	movs	r3, #0
 80112f0:	930e      	str	r3, [sp, #56]	; 0x38
 80112f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80112f4:	1b5d      	subs	r5, r3, r5
 80112f6:	1e6b      	subs	r3, r5, #1
 80112f8:	9304      	str	r3, [sp, #16]
 80112fa:	bf43      	ittte	mi
 80112fc:	2300      	movmi	r3, #0
 80112fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8011302:	9304      	strmi	r3, [sp, #16]
 8011304:	f04f 0800 	movpl.w	r8, #0
 8011308:	f1ba 0f00 	cmp.w	sl, #0
 801130c:	db3b      	blt.n	8011386 <_dtoa_r+0x23e>
 801130e:	9b04      	ldr	r3, [sp, #16]
 8011310:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011314:	4453      	add	r3, sl
 8011316:	9304      	str	r3, [sp, #16]
 8011318:	2300      	movs	r3, #0
 801131a:	9306      	str	r3, [sp, #24]
 801131c:	9b05      	ldr	r3, [sp, #20]
 801131e:	2b09      	cmp	r3, #9
 8011320:	d869      	bhi.n	80113f6 <_dtoa_r+0x2ae>
 8011322:	2b05      	cmp	r3, #5
 8011324:	bfc4      	itt	gt
 8011326:	3b04      	subgt	r3, #4
 8011328:	9305      	strgt	r3, [sp, #20]
 801132a:	9b05      	ldr	r3, [sp, #20]
 801132c:	f1a3 0302 	sub.w	r3, r3, #2
 8011330:	bfcc      	ite	gt
 8011332:	2500      	movgt	r5, #0
 8011334:	2501      	movle	r5, #1
 8011336:	2b03      	cmp	r3, #3
 8011338:	d869      	bhi.n	801140e <_dtoa_r+0x2c6>
 801133a:	e8df f003 	tbb	[pc, r3]
 801133e:	4e2c      	.short	0x4e2c
 8011340:	5a4c      	.short	0x5a4c
 8011342:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011346:	441d      	add	r5, r3
 8011348:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801134c:	2b20      	cmp	r3, #32
 801134e:	bfc1      	itttt	gt
 8011350:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011354:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011358:	fa09 f303 	lslgt.w	r3, r9, r3
 801135c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011360:	bfda      	itte	le
 8011362:	f1c3 0320 	rsble	r3, r3, #32
 8011366:	fa06 f003 	lslle.w	r0, r6, r3
 801136a:	4318      	orrgt	r0, r3
 801136c:	f7ef f8d2 	bl	8000514 <__aeabi_ui2d>
 8011370:	2301      	movs	r3, #1
 8011372:	4606      	mov	r6, r0
 8011374:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011378:	3d01      	subs	r5, #1
 801137a:	9310      	str	r3, [sp, #64]	; 0x40
 801137c:	e771      	b.n	8011262 <_dtoa_r+0x11a>
 801137e:	2301      	movs	r3, #1
 8011380:	e7b6      	b.n	80112f0 <_dtoa_r+0x1a8>
 8011382:	900e      	str	r0, [sp, #56]	; 0x38
 8011384:	e7b5      	b.n	80112f2 <_dtoa_r+0x1aa>
 8011386:	f1ca 0300 	rsb	r3, sl, #0
 801138a:	9306      	str	r3, [sp, #24]
 801138c:	2300      	movs	r3, #0
 801138e:	eba8 080a 	sub.w	r8, r8, sl
 8011392:	930d      	str	r3, [sp, #52]	; 0x34
 8011394:	e7c2      	b.n	801131c <_dtoa_r+0x1d4>
 8011396:	2300      	movs	r3, #0
 8011398:	9308      	str	r3, [sp, #32]
 801139a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801139c:	2b00      	cmp	r3, #0
 801139e:	dc39      	bgt.n	8011414 <_dtoa_r+0x2cc>
 80113a0:	f04f 0901 	mov.w	r9, #1
 80113a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80113a8:	464b      	mov	r3, r9
 80113aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80113ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80113b0:	2200      	movs	r2, #0
 80113b2:	6042      	str	r2, [r0, #4]
 80113b4:	2204      	movs	r2, #4
 80113b6:	f102 0614 	add.w	r6, r2, #20
 80113ba:	429e      	cmp	r6, r3
 80113bc:	6841      	ldr	r1, [r0, #4]
 80113be:	d92f      	bls.n	8011420 <_dtoa_r+0x2d8>
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 fccb 	bl	8011d5c <_Balloc>
 80113c6:	9000      	str	r0, [sp, #0]
 80113c8:	2800      	cmp	r0, #0
 80113ca:	d14b      	bne.n	8011464 <_dtoa_r+0x31c>
 80113cc:	4b24      	ldr	r3, [pc, #144]	; (8011460 <_dtoa_r+0x318>)
 80113ce:	4602      	mov	r2, r0
 80113d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80113d4:	e6d1      	b.n	801117a <_dtoa_r+0x32>
 80113d6:	2301      	movs	r3, #1
 80113d8:	e7de      	b.n	8011398 <_dtoa_r+0x250>
 80113da:	2300      	movs	r3, #0
 80113dc:	9308      	str	r3, [sp, #32]
 80113de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113e0:	eb0a 0903 	add.w	r9, sl, r3
 80113e4:	f109 0301 	add.w	r3, r9, #1
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	9301      	str	r3, [sp, #4]
 80113ec:	bfb8      	it	lt
 80113ee:	2301      	movlt	r3, #1
 80113f0:	e7dd      	b.n	80113ae <_dtoa_r+0x266>
 80113f2:	2301      	movs	r3, #1
 80113f4:	e7f2      	b.n	80113dc <_dtoa_r+0x294>
 80113f6:	2501      	movs	r5, #1
 80113f8:	2300      	movs	r3, #0
 80113fa:	9305      	str	r3, [sp, #20]
 80113fc:	9508      	str	r5, [sp, #32]
 80113fe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8011402:	2200      	movs	r2, #0
 8011404:	f8cd 9004 	str.w	r9, [sp, #4]
 8011408:	2312      	movs	r3, #18
 801140a:	9209      	str	r2, [sp, #36]	; 0x24
 801140c:	e7cf      	b.n	80113ae <_dtoa_r+0x266>
 801140e:	2301      	movs	r3, #1
 8011410:	9308      	str	r3, [sp, #32]
 8011412:	e7f4      	b.n	80113fe <_dtoa_r+0x2b6>
 8011414:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011418:	f8cd 9004 	str.w	r9, [sp, #4]
 801141c:	464b      	mov	r3, r9
 801141e:	e7c6      	b.n	80113ae <_dtoa_r+0x266>
 8011420:	3101      	adds	r1, #1
 8011422:	6041      	str	r1, [r0, #4]
 8011424:	0052      	lsls	r2, r2, #1
 8011426:	e7c6      	b.n	80113b6 <_dtoa_r+0x26e>
 8011428:	636f4361 	.word	0x636f4361
 801142c:	3fd287a7 	.word	0x3fd287a7
 8011430:	8b60c8b3 	.word	0x8b60c8b3
 8011434:	3fc68a28 	.word	0x3fc68a28
 8011438:	509f79fb 	.word	0x509f79fb
 801143c:	3fd34413 	.word	0x3fd34413
 8011440:	08013ccd 	.word	0x08013ccd
 8011444:	08013ce4 	.word	0x08013ce4
 8011448:	7ff00000 	.word	0x7ff00000
 801144c:	08013cc9 	.word	0x08013cc9
 8011450:	08013cc0 	.word	0x08013cc0
 8011454:	08013c9d 	.word	0x08013c9d
 8011458:	3ff80000 	.word	0x3ff80000
 801145c:	08013de0 	.word	0x08013de0
 8011460:	08013d43 	.word	0x08013d43
 8011464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011466:	9a00      	ldr	r2, [sp, #0]
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	9b01      	ldr	r3, [sp, #4]
 801146c:	2b0e      	cmp	r3, #14
 801146e:	f200 80ad 	bhi.w	80115cc <_dtoa_r+0x484>
 8011472:	2d00      	cmp	r5, #0
 8011474:	f000 80aa 	beq.w	80115cc <_dtoa_r+0x484>
 8011478:	f1ba 0f00 	cmp.w	sl, #0
 801147c:	dd36      	ble.n	80114ec <_dtoa_r+0x3a4>
 801147e:	4ac3      	ldr	r2, [pc, #780]	; (801178c <_dtoa_r+0x644>)
 8011480:	f00a 030f 	and.w	r3, sl, #15
 8011484:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011488:	ed93 7b00 	vldr	d7, [r3]
 801148c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011490:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011494:	eeb0 8a47 	vmov.f32	s16, s14
 8011498:	eef0 8a67 	vmov.f32	s17, s15
 801149c:	d016      	beq.n	80114cc <_dtoa_r+0x384>
 801149e:	4bbc      	ldr	r3, [pc, #752]	; (8011790 <_dtoa_r+0x648>)
 80114a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80114a8:	f7ef f9d8 	bl	800085c <__aeabi_ddiv>
 80114ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114b0:	f007 070f 	and.w	r7, r7, #15
 80114b4:	2503      	movs	r5, #3
 80114b6:	4eb6      	ldr	r6, [pc, #728]	; (8011790 <_dtoa_r+0x648>)
 80114b8:	b957      	cbnz	r7, 80114d0 <_dtoa_r+0x388>
 80114ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80114be:	ec53 2b18 	vmov	r2, r3, d8
 80114c2:	f7ef f9cb 	bl	800085c <__aeabi_ddiv>
 80114c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114ca:	e029      	b.n	8011520 <_dtoa_r+0x3d8>
 80114cc:	2502      	movs	r5, #2
 80114ce:	e7f2      	b.n	80114b6 <_dtoa_r+0x36e>
 80114d0:	07f9      	lsls	r1, r7, #31
 80114d2:	d508      	bpl.n	80114e6 <_dtoa_r+0x39e>
 80114d4:	ec51 0b18 	vmov	r0, r1, d8
 80114d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80114dc:	f7ef f894 	bl	8000608 <__aeabi_dmul>
 80114e0:	ec41 0b18 	vmov	d8, r0, r1
 80114e4:	3501      	adds	r5, #1
 80114e6:	107f      	asrs	r7, r7, #1
 80114e8:	3608      	adds	r6, #8
 80114ea:	e7e5      	b.n	80114b8 <_dtoa_r+0x370>
 80114ec:	f000 80a6 	beq.w	801163c <_dtoa_r+0x4f4>
 80114f0:	f1ca 0600 	rsb	r6, sl, #0
 80114f4:	4ba5      	ldr	r3, [pc, #660]	; (801178c <_dtoa_r+0x644>)
 80114f6:	4fa6      	ldr	r7, [pc, #664]	; (8011790 <_dtoa_r+0x648>)
 80114f8:	f006 020f 	and.w	r2, r6, #15
 80114fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011504:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011508:	f7ef f87e 	bl	8000608 <__aeabi_dmul>
 801150c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011510:	1136      	asrs	r6, r6, #4
 8011512:	2300      	movs	r3, #0
 8011514:	2502      	movs	r5, #2
 8011516:	2e00      	cmp	r6, #0
 8011518:	f040 8085 	bne.w	8011626 <_dtoa_r+0x4de>
 801151c:	2b00      	cmp	r3, #0
 801151e:	d1d2      	bne.n	80114c6 <_dtoa_r+0x37e>
 8011520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011522:	2b00      	cmp	r3, #0
 8011524:	f000 808c 	beq.w	8011640 <_dtoa_r+0x4f8>
 8011528:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801152c:	4b99      	ldr	r3, [pc, #612]	; (8011794 <_dtoa_r+0x64c>)
 801152e:	2200      	movs	r2, #0
 8011530:	4630      	mov	r0, r6
 8011532:	4639      	mov	r1, r7
 8011534:	f7ef fada 	bl	8000aec <__aeabi_dcmplt>
 8011538:	2800      	cmp	r0, #0
 801153a:	f000 8081 	beq.w	8011640 <_dtoa_r+0x4f8>
 801153e:	9b01      	ldr	r3, [sp, #4]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d07d      	beq.n	8011640 <_dtoa_r+0x4f8>
 8011544:	f1b9 0f00 	cmp.w	r9, #0
 8011548:	dd3c      	ble.n	80115c4 <_dtoa_r+0x47c>
 801154a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801154e:	9307      	str	r3, [sp, #28]
 8011550:	2200      	movs	r2, #0
 8011552:	4b91      	ldr	r3, [pc, #580]	; (8011798 <_dtoa_r+0x650>)
 8011554:	4630      	mov	r0, r6
 8011556:	4639      	mov	r1, r7
 8011558:	f7ef f856 	bl	8000608 <__aeabi_dmul>
 801155c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011560:	3501      	adds	r5, #1
 8011562:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011566:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801156a:	4628      	mov	r0, r5
 801156c:	f7ee ffe2 	bl	8000534 <__aeabi_i2d>
 8011570:	4632      	mov	r2, r6
 8011572:	463b      	mov	r3, r7
 8011574:	f7ef f848 	bl	8000608 <__aeabi_dmul>
 8011578:	4b88      	ldr	r3, [pc, #544]	; (801179c <_dtoa_r+0x654>)
 801157a:	2200      	movs	r2, #0
 801157c:	f7ee fe8e 	bl	800029c <__adddf3>
 8011580:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011588:	9303      	str	r3, [sp, #12]
 801158a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801158c:	2b00      	cmp	r3, #0
 801158e:	d15c      	bne.n	801164a <_dtoa_r+0x502>
 8011590:	4b83      	ldr	r3, [pc, #524]	; (80117a0 <_dtoa_r+0x658>)
 8011592:	2200      	movs	r2, #0
 8011594:	4630      	mov	r0, r6
 8011596:	4639      	mov	r1, r7
 8011598:	f7ee fe7e 	bl	8000298 <__aeabi_dsub>
 801159c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115a0:	4606      	mov	r6, r0
 80115a2:	460f      	mov	r7, r1
 80115a4:	f7ef fac0 	bl	8000b28 <__aeabi_dcmpgt>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	f040 8296 	bne.w	8011ada <_dtoa_r+0x992>
 80115ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80115b2:	4630      	mov	r0, r6
 80115b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80115b8:	4639      	mov	r1, r7
 80115ba:	f7ef fa97 	bl	8000aec <__aeabi_dcmplt>
 80115be:	2800      	cmp	r0, #0
 80115c0:	f040 8288 	bne.w	8011ad4 <_dtoa_r+0x98c>
 80115c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80115c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80115cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	f2c0 8158 	blt.w	8011884 <_dtoa_r+0x73c>
 80115d4:	f1ba 0f0e 	cmp.w	sl, #14
 80115d8:	f300 8154 	bgt.w	8011884 <_dtoa_r+0x73c>
 80115dc:	4b6b      	ldr	r3, [pc, #428]	; (801178c <_dtoa_r+0x644>)
 80115de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80115e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	f280 80e3 	bge.w	80117b4 <_dtoa_r+0x66c>
 80115ee:	9b01      	ldr	r3, [sp, #4]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f300 80df 	bgt.w	80117b4 <_dtoa_r+0x66c>
 80115f6:	f040 826d 	bne.w	8011ad4 <_dtoa_r+0x98c>
 80115fa:	4b69      	ldr	r3, [pc, #420]	; (80117a0 <_dtoa_r+0x658>)
 80115fc:	2200      	movs	r2, #0
 80115fe:	4640      	mov	r0, r8
 8011600:	4649      	mov	r1, r9
 8011602:	f7ef f801 	bl	8000608 <__aeabi_dmul>
 8011606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801160a:	f7ef fa83 	bl	8000b14 <__aeabi_dcmpge>
 801160e:	9e01      	ldr	r6, [sp, #4]
 8011610:	4637      	mov	r7, r6
 8011612:	2800      	cmp	r0, #0
 8011614:	f040 8243 	bne.w	8011a9e <_dtoa_r+0x956>
 8011618:	9d00      	ldr	r5, [sp, #0]
 801161a:	2331      	movs	r3, #49	; 0x31
 801161c:	f805 3b01 	strb.w	r3, [r5], #1
 8011620:	f10a 0a01 	add.w	sl, sl, #1
 8011624:	e23f      	b.n	8011aa6 <_dtoa_r+0x95e>
 8011626:	07f2      	lsls	r2, r6, #31
 8011628:	d505      	bpl.n	8011636 <_dtoa_r+0x4ee>
 801162a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801162e:	f7ee ffeb 	bl	8000608 <__aeabi_dmul>
 8011632:	3501      	adds	r5, #1
 8011634:	2301      	movs	r3, #1
 8011636:	1076      	asrs	r6, r6, #1
 8011638:	3708      	adds	r7, #8
 801163a:	e76c      	b.n	8011516 <_dtoa_r+0x3ce>
 801163c:	2502      	movs	r5, #2
 801163e:	e76f      	b.n	8011520 <_dtoa_r+0x3d8>
 8011640:	9b01      	ldr	r3, [sp, #4]
 8011642:	f8cd a01c 	str.w	sl, [sp, #28]
 8011646:	930c      	str	r3, [sp, #48]	; 0x30
 8011648:	e78d      	b.n	8011566 <_dtoa_r+0x41e>
 801164a:	9900      	ldr	r1, [sp, #0]
 801164c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801164e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011650:	4b4e      	ldr	r3, [pc, #312]	; (801178c <_dtoa_r+0x644>)
 8011652:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011656:	4401      	add	r1, r0
 8011658:	9102      	str	r1, [sp, #8]
 801165a:	9908      	ldr	r1, [sp, #32]
 801165c:	eeb0 8a47 	vmov.f32	s16, s14
 8011660:	eef0 8a67 	vmov.f32	s17, s15
 8011664:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801166c:	2900      	cmp	r1, #0
 801166e:	d045      	beq.n	80116fc <_dtoa_r+0x5b4>
 8011670:	494c      	ldr	r1, [pc, #304]	; (80117a4 <_dtoa_r+0x65c>)
 8011672:	2000      	movs	r0, #0
 8011674:	f7ef f8f2 	bl	800085c <__aeabi_ddiv>
 8011678:	ec53 2b18 	vmov	r2, r3, d8
 801167c:	f7ee fe0c 	bl	8000298 <__aeabi_dsub>
 8011680:	9d00      	ldr	r5, [sp, #0]
 8011682:	ec41 0b18 	vmov	d8, r0, r1
 8011686:	4639      	mov	r1, r7
 8011688:	4630      	mov	r0, r6
 801168a:	f7ef fa6d 	bl	8000b68 <__aeabi_d2iz>
 801168e:	900c      	str	r0, [sp, #48]	; 0x30
 8011690:	f7ee ff50 	bl	8000534 <__aeabi_i2d>
 8011694:	4602      	mov	r2, r0
 8011696:	460b      	mov	r3, r1
 8011698:	4630      	mov	r0, r6
 801169a:	4639      	mov	r1, r7
 801169c:	f7ee fdfc 	bl	8000298 <__aeabi_dsub>
 80116a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116a2:	3330      	adds	r3, #48	; 0x30
 80116a4:	f805 3b01 	strb.w	r3, [r5], #1
 80116a8:	ec53 2b18 	vmov	r2, r3, d8
 80116ac:	4606      	mov	r6, r0
 80116ae:	460f      	mov	r7, r1
 80116b0:	f7ef fa1c 	bl	8000aec <__aeabi_dcmplt>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	d165      	bne.n	8011784 <_dtoa_r+0x63c>
 80116b8:	4632      	mov	r2, r6
 80116ba:	463b      	mov	r3, r7
 80116bc:	4935      	ldr	r1, [pc, #212]	; (8011794 <_dtoa_r+0x64c>)
 80116be:	2000      	movs	r0, #0
 80116c0:	f7ee fdea 	bl	8000298 <__aeabi_dsub>
 80116c4:	ec53 2b18 	vmov	r2, r3, d8
 80116c8:	f7ef fa10 	bl	8000aec <__aeabi_dcmplt>
 80116cc:	2800      	cmp	r0, #0
 80116ce:	f040 80b9 	bne.w	8011844 <_dtoa_r+0x6fc>
 80116d2:	9b02      	ldr	r3, [sp, #8]
 80116d4:	429d      	cmp	r5, r3
 80116d6:	f43f af75 	beq.w	80115c4 <_dtoa_r+0x47c>
 80116da:	4b2f      	ldr	r3, [pc, #188]	; (8011798 <_dtoa_r+0x650>)
 80116dc:	ec51 0b18 	vmov	r0, r1, d8
 80116e0:	2200      	movs	r2, #0
 80116e2:	f7ee ff91 	bl	8000608 <__aeabi_dmul>
 80116e6:	4b2c      	ldr	r3, [pc, #176]	; (8011798 <_dtoa_r+0x650>)
 80116e8:	ec41 0b18 	vmov	d8, r0, r1
 80116ec:	2200      	movs	r2, #0
 80116ee:	4630      	mov	r0, r6
 80116f0:	4639      	mov	r1, r7
 80116f2:	f7ee ff89 	bl	8000608 <__aeabi_dmul>
 80116f6:	4606      	mov	r6, r0
 80116f8:	460f      	mov	r7, r1
 80116fa:	e7c4      	b.n	8011686 <_dtoa_r+0x53e>
 80116fc:	ec51 0b17 	vmov	r0, r1, d7
 8011700:	f7ee ff82 	bl	8000608 <__aeabi_dmul>
 8011704:	9b02      	ldr	r3, [sp, #8]
 8011706:	9d00      	ldr	r5, [sp, #0]
 8011708:	930c      	str	r3, [sp, #48]	; 0x30
 801170a:	ec41 0b18 	vmov	d8, r0, r1
 801170e:	4639      	mov	r1, r7
 8011710:	4630      	mov	r0, r6
 8011712:	f7ef fa29 	bl	8000b68 <__aeabi_d2iz>
 8011716:	9011      	str	r0, [sp, #68]	; 0x44
 8011718:	f7ee ff0c 	bl	8000534 <__aeabi_i2d>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	4630      	mov	r0, r6
 8011722:	4639      	mov	r1, r7
 8011724:	f7ee fdb8 	bl	8000298 <__aeabi_dsub>
 8011728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801172a:	3330      	adds	r3, #48	; 0x30
 801172c:	f805 3b01 	strb.w	r3, [r5], #1
 8011730:	9b02      	ldr	r3, [sp, #8]
 8011732:	429d      	cmp	r5, r3
 8011734:	4606      	mov	r6, r0
 8011736:	460f      	mov	r7, r1
 8011738:	f04f 0200 	mov.w	r2, #0
 801173c:	d134      	bne.n	80117a8 <_dtoa_r+0x660>
 801173e:	4b19      	ldr	r3, [pc, #100]	; (80117a4 <_dtoa_r+0x65c>)
 8011740:	ec51 0b18 	vmov	r0, r1, d8
 8011744:	f7ee fdaa 	bl	800029c <__adddf3>
 8011748:	4602      	mov	r2, r0
 801174a:	460b      	mov	r3, r1
 801174c:	4630      	mov	r0, r6
 801174e:	4639      	mov	r1, r7
 8011750:	f7ef f9ea 	bl	8000b28 <__aeabi_dcmpgt>
 8011754:	2800      	cmp	r0, #0
 8011756:	d175      	bne.n	8011844 <_dtoa_r+0x6fc>
 8011758:	ec53 2b18 	vmov	r2, r3, d8
 801175c:	4911      	ldr	r1, [pc, #68]	; (80117a4 <_dtoa_r+0x65c>)
 801175e:	2000      	movs	r0, #0
 8011760:	f7ee fd9a 	bl	8000298 <__aeabi_dsub>
 8011764:	4602      	mov	r2, r0
 8011766:	460b      	mov	r3, r1
 8011768:	4630      	mov	r0, r6
 801176a:	4639      	mov	r1, r7
 801176c:	f7ef f9be 	bl	8000aec <__aeabi_dcmplt>
 8011770:	2800      	cmp	r0, #0
 8011772:	f43f af27 	beq.w	80115c4 <_dtoa_r+0x47c>
 8011776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011778:	1e6b      	subs	r3, r5, #1
 801177a:	930c      	str	r3, [sp, #48]	; 0x30
 801177c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011780:	2b30      	cmp	r3, #48	; 0x30
 8011782:	d0f8      	beq.n	8011776 <_dtoa_r+0x62e>
 8011784:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011788:	e04a      	b.n	8011820 <_dtoa_r+0x6d8>
 801178a:	bf00      	nop
 801178c:	08013de0 	.word	0x08013de0
 8011790:	08013db8 	.word	0x08013db8
 8011794:	3ff00000 	.word	0x3ff00000
 8011798:	40240000 	.word	0x40240000
 801179c:	401c0000 	.word	0x401c0000
 80117a0:	40140000 	.word	0x40140000
 80117a4:	3fe00000 	.word	0x3fe00000
 80117a8:	4baf      	ldr	r3, [pc, #700]	; (8011a68 <_dtoa_r+0x920>)
 80117aa:	f7ee ff2d 	bl	8000608 <__aeabi_dmul>
 80117ae:	4606      	mov	r6, r0
 80117b0:	460f      	mov	r7, r1
 80117b2:	e7ac      	b.n	801170e <_dtoa_r+0x5c6>
 80117b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80117b8:	9d00      	ldr	r5, [sp, #0]
 80117ba:	4642      	mov	r2, r8
 80117bc:	464b      	mov	r3, r9
 80117be:	4630      	mov	r0, r6
 80117c0:	4639      	mov	r1, r7
 80117c2:	f7ef f84b 	bl	800085c <__aeabi_ddiv>
 80117c6:	f7ef f9cf 	bl	8000b68 <__aeabi_d2iz>
 80117ca:	9002      	str	r0, [sp, #8]
 80117cc:	f7ee feb2 	bl	8000534 <__aeabi_i2d>
 80117d0:	4642      	mov	r2, r8
 80117d2:	464b      	mov	r3, r9
 80117d4:	f7ee ff18 	bl	8000608 <__aeabi_dmul>
 80117d8:	4602      	mov	r2, r0
 80117da:	460b      	mov	r3, r1
 80117dc:	4630      	mov	r0, r6
 80117de:	4639      	mov	r1, r7
 80117e0:	f7ee fd5a 	bl	8000298 <__aeabi_dsub>
 80117e4:	9e02      	ldr	r6, [sp, #8]
 80117e6:	9f01      	ldr	r7, [sp, #4]
 80117e8:	3630      	adds	r6, #48	; 0x30
 80117ea:	f805 6b01 	strb.w	r6, [r5], #1
 80117ee:	9e00      	ldr	r6, [sp, #0]
 80117f0:	1bae      	subs	r6, r5, r6
 80117f2:	42b7      	cmp	r7, r6
 80117f4:	4602      	mov	r2, r0
 80117f6:	460b      	mov	r3, r1
 80117f8:	d137      	bne.n	801186a <_dtoa_r+0x722>
 80117fa:	f7ee fd4f 	bl	800029c <__adddf3>
 80117fe:	4642      	mov	r2, r8
 8011800:	464b      	mov	r3, r9
 8011802:	4606      	mov	r6, r0
 8011804:	460f      	mov	r7, r1
 8011806:	f7ef f98f 	bl	8000b28 <__aeabi_dcmpgt>
 801180a:	b9c8      	cbnz	r0, 8011840 <_dtoa_r+0x6f8>
 801180c:	4642      	mov	r2, r8
 801180e:	464b      	mov	r3, r9
 8011810:	4630      	mov	r0, r6
 8011812:	4639      	mov	r1, r7
 8011814:	f7ef f960 	bl	8000ad8 <__aeabi_dcmpeq>
 8011818:	b110      	cbz	r0, 8011820 <_dtoa_r+0x6d8>
 801181a:	9b02      	ldr	r3, [sp, #8]
 801181c:	07d9      	lsls	r1, r3, #31
 801181e:	d40f      	bmi.n	8011840 <_dtoa_r+0x6f8>
 8011820:	4620      	mov	r0, r4
 8011822:	4659      	mov	r1, fp
 8011824:	f000 fada 	bl	8011ddc <_Bfree>
 8011828:	2300      	movs	r3, #0
 801182a:	702b      	strb	r3, [r5, #0]
 801182c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801182e:	f10a 0001 	add.w	r0, sl, #1
 8011832:	6018      	str	r0, [r3, #0]
 8011834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011836:	2b00      	cmp	r3, #0
 8011838:	f43f acd8 	beq.w	80111ec <_dtoa_r+0xa4>
 801183c:	601d      	str	r5, [r3, #0]
 801183e:	e4d5      	b.n	80111ec <_dtoa_r+0xa4>
 8011840:	f8cd a01c 	str.w	sl, [sp, #28]
 8011844:	462b      	mov	r3, r5
 8011846:	461d      	mov	r5, r3
 8011848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801184c:	2a39      	cmp	r2, #57	; 0x39
 801184e:	d108      	bne.n	8011862 <_dtoa_r+0x71a>
 8011850:	9a00      	ldr	r2, [sp, #0]
 8011852:	429a      	cmp	r2, r3
 8011854:	d1f7      	bne.n	8011846 <_dtoa_r+0x6fe>
 8011856:	9a07      	ldr	r2, [sp, #28]
 8011858:	9900      	ldr	r1, [sp, #0]
 801185a:	3201      	adds	r2, #1
 801185c:	9207      	str	r2, [sp, #28]
 801185e:	2230      	movs	r2, #48	; 0x30
 8011860:	700a      	strb	r2, [r1, #0]
 8011862:	781a      	ldrb	r2, [r3, #0]
 8011864:	3201      	adds	r2, #1
 8011866:	701a      	strb	r2, [r3, #0]
 8011868:	e78c      	b.n	8011784 <_dtoa_r+0x63c>
 801186a:	4b7f      	ldr	r3, [pc, #508]	; (8011a68 <_dtoa_r+0x920>)
 801186c:	2200      	movs	r2, #0
 801186e:	f7ee fecb 	bl	8000608 <__aeabi_dmul>
 8011872:	2200      	movs	r2, #0
 8011874:	2300      	movs	r3, #0
 8011876:	4606      	mov	r6, r0
 8011878:	460f      	mov	r7, r1
 801187a:	f7ef f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 801187e:	2800      	cmp	r0, #0
 8011880:	d09b      	beq.n	80117ba <_dtoa_r+0x672>
 8011882:	e7cd      	b.n	8011820 <_dtoa_r+0x6d8>
 8011884:	9a08      	ldr	r2, [sp, #32]
 8011886:	2a00      	cmp	r2, #0
 8011888:	f000 80c4 	beq.w	8011a14 <_dtoa_r+0x8cc>
 801188c:	9a05      	ldr	r2, [sp, #20]
 801188e:	2a01      	cmp	r2, #1
 8011890:	f300 80a8 	bgt.w	80119e4 <_dtoa_r+0x89c>
 8011894:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011896:	2a00      	cmp	r2, #0
 8011898:	f000 80a0 	beq.w	80119dc <_dtoa_r+0x894>
 801189c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80118a0:	9e06      	ldr	r6, [sp, #24]
 80118a2:	4645      	mov	r5, r8
 80118a4:	9a04      	ldr	r2, [sp, #16]
 80118a6:	2101      	movs	r1, #1
 80118a8:	441a      	add	r2, r3
 80118aa:	4620      	mov	r0, r4
 80118ac:	4498      	add	r8, r3
 80118ae:	9204      	str	r2, [sp, #16]
 80118b0:	f000 fb50 	bl	8011f54 <__i2b>
 80118b4:	4607      	mov	r7, r0
 80118b6:	2d00      	cmp	r5, #0
 80118b8:	dd0b      	ble.n	80118d2 <_dtoa_r+0x78a>
 80118ba:	9b04      	ldr	r3, [sp, #16]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	dd08      	ble.n	80118d2 <_dtoa_r+0x78a>
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	9a04      	ldr	r2, [sp, #16]
 80118c4:	bfa8      	it	ge
 80118c6:	462b      	movge	r3, r5
 80118c8:	eba8 0803 	sub.w	r8, r8, r3
 80118cc:	1aed      	subs	r5, r5, r3
 80118ce:	1ad3      	subs	r3, r2, r3
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	9b06      	ldr	r3, [sp, #24]
 80118d4:	b1fb      	cbz	r3, 8011916 <_dtoa_r+0x7ce>
 80118d6:	9b08      	ldr	r3, [sp, #32]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f000 809f 	beq.w	8011a1c <_dtoa_r+0x8d4>
 80118de:	2e00      	cmp	r6, #0
 80118e0:	dd11      	ble.n	8011906 <_dtoa_r+0x7be>
 80118e2:	4639      	mov	r1, r7
 80118e4:	4632      	mov	r2, r6
 80118e6:	4620      	mov	r0, r4
 80118e8:	f000 fbf0 	bl	80120cc <__pow5mult>
 80118ec:	465a      	mov	r2, fp
 80118ee:	4601      	mov	r1, r0
 80118f0:	4607      	mov	r7, r0
 80118f2:	4620      	mov	r0, r4
 80118f4:	f000 fb44 	bl	8011f80 <__multiply>
 80118f8:	4659      	mov	r1, fp
 80118fa:	9007      	str	r0, [sp, #28]
 80118fc:	4620      	mov	r0, r4
 80118fe:	f000 fa6d 	bl	8011ddc <_Bfree>
 8011902:	9b07      	ldr	r3, [sp, #28]
 8011904:	469b      	mov	fp, r3
 8011906:	9b06      	ldr	r3, [sp, #24]
 8011908:	1b9a      	subs	r2, r3, r6
 801190a:	d004      	beq.n	8011916 <_dtoa_r+0x7ce>
 801190c:	4659      	mov	r1, fp
 801190e:	4620      	mov	r0, r4
 8011910:	f000 fbdc 	bl	80120cc <__pow5mult>
 8011914:	4683      	mov	fp, r0
 8011916:	2101      	movs	r1, #1
 8011918:	4620      	mov	r0, r4
 801191a:	f000 fb1b 	bl	8011f54 <__i2b>
 801191e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011920:	2b00      	cmp	r3, #0
 8011922:	4606      	mov	r6, r0
 8011924:	dd7c      	ble.n	8011a20 <_dtoa_r+0x8d8>
 8011926:	461a      	mov	r2, r3
 8011928:	4601      	mov	r1, r0
 801192a:	4620      	mov	r0, r4
 801192c:	f000 fbce 	bl	80120cc <__pow5mult>
 8011930:	9b05      	ldr	r3, [sp, #20]
 8011932:	2b01      	cmp	r3, #1
 8011934:	4606      	mov	r6, r0
 8011936:	dd76      	ble.n	8011a26 <_dtoa_r+0x8de>
 8011938:	2300      	movs	r3, #0
 801193a:	9306      	str	r3, [sp, #24]
 801193c:	6933      	ldr	r3, [r6, #16]
 801193e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011942:	6918      	ldr	r0, [r3, #16]
 8011944:	f000 fab6 	bl	8011eb4 <__hi0bits>
 8011948:	f1c0 0020 	rsb	r0, r0, #32
 801194c:	9b04      	ldr	r3, [sp, #16]
 801194e:	4418      	add	r0, r3
 8011950:	f010 001f 	ands.w	r0, r0, #31
 8011954:	f000 8086 	beq.w	8011a64 <_dtoa_r+0x91c>
 8011958:	f1c0 0320 	rsb	r3, r0, #32
 801195c:	2b04      	cmp	r3, #4
 801195e:	dd7f      	ble.n	8011a60 <_dtoa_r+0x918>
 8011960:	f1c0 001c 	rsb	r0, r0, #28
 8011964:	9b04      	ldr	r3, [sp, #16]
 8011966:	4403      	add	r3, r0
 8011968:	4480      	add	r8, r0
 801196a:	4405      	add	r5, r0
 801196c:	9304      	str	r3, [sp, #16]
 801196e:	f1b8 0f00 	cmp.w	r8, #0
 8011972:	dd05      	ble.n	8011980 <_dtoa_r+0x838>
 8011974:	4659      	mov	r1, fp
 8011976:	4642      	mov	r2, r8
 8011978:	4620      	mov	r0, r4
 801197a:	f000 fc01 	bl	8012180 <__lshift>
 801197e:	4683      	mov	fp, r0
 8011980:	9b04      	ldr	r3, [sp, #16]
 8011982:	2b00      	cmp	r3, #0
 8011984:	dd05      	ble.n	8011992 <_dtoa_r+0x84a>
 8011986:	4631      	mov	r1, r6
 8011988:	461a      	mov	r2, r3
 801198a:	4620      	mov	r0, r4
 801198c:	f000 fbf8 	bl	8012180 <__lshift>
 8011990:	4606      	mov	r6, r0
 8011992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011994:	2b00      	cmp	r3, #0
 8011996:	d069      	beq.n	8011a6c <_dtoa_r+0x924>
 8011998:	4631      	mov	r1, r6
 801199a:	4658      	mov	r0, fp
 801199c:	f000 fc5c 	bl	8012258 <__mcmp>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	da63      	bge.n	8011a6c <_dtoa_r+0x924>
 80119a4:	2300      	movs	r3, #0
 80119a6:	4659      	mov	r1, fp
 80119a8:	220a      	movs	r2, #10
 80119aa:	4620      	mov	r0, r4
 80119ac:	f000 fa38 	bl	8011e20 <__multadd>
 80119b0:	9b08      	ldr	r3, [sp, #32]
 80119b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80119b6:	4683      	mov	fp, r0
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	f000 818f 	beq.w	8011cdc <_dtoa_r+0xb94>
 80119be:	4639      	mov	r1, r7
 80119c0:	2300      	movs	r3, #0
 80119c2:	220a      	movs	r2, #10
 80119c4:	4620      	mov	r0, r4
 80119c6:	f000 fa2b 	bl	8011e20 <__multadd>
 80119ca:	f1b9 0f00 	cmp.w	r9, #0
 80119ce:	4607      	mov	r7, r0
 80119d0:	f300 808e 	bgt.w	8011af0 <_dtoa_r+0x9a8>
 80119d4:	9b05      	ldr	r3, [sp, #20]
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	dc50      	bgt.n	8011a7c <_dtoa_r+0x934>
 80119da:	e089      	b.n	8011af0 <_dtoa_r+0x9a8>
 80119dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80119de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80119e2:	e75d      	b.n	80118a0 <_dtoa_r+0x758>
 80119e4:	9b01      	ldr	r3, [sp, #4]
 80119e6:	1e5e      	subs	r6, r3, #1
 80119e8:	9b06      	ldr	r3, [sp, #24]
 80119ea:	42b3      	cmp	r3, r6
 80119ec:	bfbf      	itttt	lt
 80119ee:	9b06      	ldrlt	r3, [sp, #24]
 80119f0:	9606      	strlt	r6, [sp, #24]
 80119f2:	1af2      	sublt	r2, r6, r3
 80119f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80119f6:	bfb6      	itet	lt
 80119f8:	189b      	addlt	r3, r3, r2
 80119fa:	1b9e      	subge	r6, r3, r6
 80119fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80119fe:	9b01      	ldr	r3, [sp, #4]
 8011a00:	bfb8      	it	lt
 8011a02:	2600      	movlt	r6, #0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	bfb5      	itete	lt
 8011a08:	eba8 0503 	sublt.w	r5, r8, r3
 8011a0c:	9b01      	ldrge	r3, [sp, #4]
 8011a0e:	2300      	movlt	r3, #0
 8011a10:	4645      	movge	r5, r8
 8011a12:	e747      	b.n	80118a4 <_dtoa_r+0x75c>
 8011a14:	9e06      	ldr	r6, [sp, #24]
 8011a16:	9f08      	ldr	r7, [sp, #32]
 8011a18:	4645      	mov	r5, r8
 8011a1a:	e74c      	b.n	80118b6 <_dtoa_r+0x76e>
 8011a1c:	9a06      	ldr	r2, [sp, #24]
 8011a1e:	e775      	b.n	801190c <_dtoa_r+0x7c4>
 8011a20:	9b05      	ldr	r3, [sp, #20]
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	dc18      	bgt.n	8011a58 <_dtoa_r+0x910>
 8011a26:	9b02      	ldr	r3, [sp, #8]
 8011a28:	b9b3      	cbnz	r3, 8011a58 <_dtoa_r+0x910>
 8011a2a:	9b03      	ldr	r3, [sp, #12]
 8011a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a30:	b9a3      	cbnz	r3, 8011a5c <_dtoa_r+0x914>
 8011a32:	9b03      	ldr	r3, [sp, #12]
 8011a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a38:	0d1b      	lsrs	r3, r3, #20
 8011a3a:	051b      	lsls	r3, r3, #20
 8011a3c:	b12b      	cbz	r3, 8011a4a <_dtoa_r+0x902>
 8011a3e:	9b04      	ldr	r3, [sp, #16]
 8011a40:	3301      	adds	r3, #1
 8011a42:	9304      	str	r3, [sp, #16]
 8011a44:	f108 0801 	add.w	r8, r8, #1
 8011a48:	2301      	movs	r3, #1
 8011a4a:	9306      	str	r3, [sp, #24]
 8011a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f47f af74 	bne.w	801193c <_dtoa_r+0x7f4>
 8011a54:	2001      	movs	r0, #1
 8011a56:	e779      	b.n	801194c <_dtoa_r+0x804>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	e7f6      	b.n	8011a4a <_dtoa_r+0x902>
 8011a5c:	9b02      	ldr	r3, [sp, #8]
 8011a5e:	e7f4      	b.n	8011a4a <_dtoa_r+0x902>
 8011a60:	d085      	beq.n	801196e <_dtoa_r+0x826>
 8011a62:	4618      	mov	r0, r3
 8011a64:	301c      	adds	r0, #28
 8011a66:	e77d      	b.n	8011964 <_dtoa_r+0x81c>
 8011a68:	40240000 	.word	0x40240000
 8011a6c:	9b01      	ldr	r3, [sp, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	dc38      	bgt.n	8011ae4 <_dtoa_r+0x99c>
 8011a72:	9b05      	ldr	r3, [sp, #20]
 8011a74:	2b02      	cmp	r3, #2
 8011a76:	dd35      	ble.n	8011ae4 <_dtoa_r+0x99c>
 8011a78:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011a7c:	f1b9 0f00 	cmp.w	r9, #0
 8011a80:	d10d      	bne.n	8011a9e <_dtoa_r+0x956>
 8011a82:	4631      	mov	r1, r6
 8011a84:	464b      	mov	r3, r9
 8011a86:	2205      	movs	r2, #5
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f000 f9c9 	bl	8011e20 <__multadd>
 8011a8e:	4601      	mov	r1, r0
 8011a90:	4606      	mov	r6, r0
 8011a92:	4658      	mov	r0, fp
 8011a94:	f000 fbe0 	bl	8012258 <__mcmp>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	f73f adbd 	bgt.w	8011618 <_dtoa_r+0x4d0>
 8011a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aa0:	9d00      	ldr	r5, [sp, #0]
 8011aa2:	ea6f 0a03 	mvn.w	sl, r3
 8011aa6:	f04f 0800 	mov.w	r8, #0
 8011aaa:	4631      	mov	r1, r6
 8011aac:	4620      	mov	r0, r4
 8011aae:	f000 f995 	bl	8011ddc <_Bfree>
 8011ab2:	2f00      	cmp	r7, #0
 8011ab4:	f43f aeb4 	beq.w	8011820 <_dtoa_r+0x6d8>
 8011ab8:	f1b8 0f00 	cmp.w	r8, #0
 8011abc:	d005      	beq.n	8011aca <_dtoa_r+0x982>
 8011abe:	45b8      	cmp	r8, r7
 8011ac0:	d003      	beq.n	8011aca <_dtoa_r+0x982>
 8011ac2:	4641      	mov	r1, r8
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	f000 f989 	bl	8011ddc <_Bfree>
 8011aca:	4639      	mov	r1, r7
 8011acc:	4620      	mov	r0, r4
 8011ace:	f000 f985 	bl	8011ddc <_Bfree>
 8011ad2:	e6a5      	b.n	8011820 <_dtoa_r+0x6d8>
 8011ad4:	2600      	movs	r6, #0
 8011ad6:	4637      	mov	r7, r6
 8011ad8:	e7e1      	b.n	8011a9e <_dtoa_r+0x956>
 8011ada:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011adc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011ae0:	4637      	mov	r7, r6
 8011ae2:	e599      	b.n	8011618 <_dtoa_r+0x4d0>
 8011ae4:	9b08      	ldr	r3, [sp, #32]
 8011ae6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	f000 80fd 	beq.w	8011cea <_dtoa_r+0xba2>
 8011af0:	2d00      	cmp	r5, #0
 8011af2:	dd05      	ble.n	8011b00 <_dtoa_r+0x9b8>
 8011af4:	4639      	mov	r1, r7
 8011af6:	462a      	mov	r2, r5
 8011af8:	4620      	mov	r0, r4
 8011afa:	f000 fb41 	bl	8012180 <__lshift>
 8011afe:	4607      	mov	r7, r0
 8011b00:	9b06      	ldr	r3, [sp, #24]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d05c      	beq.n	8011bc0 <_dtoa_r+0xa78>
 8011b06:	6879      	ldr	r1, [r7, #4]
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f000 f927 	bl	8011d5c <_Balloc>
 8011b0e:	4605      	mov	r5, r0
 8011b10:	b928      	cbnz	r0, 8011b1e <_dtoa_r+0x9d6>
 8011b12:	4b80      	ldr	r3, [pc, #512]	; (8011d14 <_dtoa_r+0xbcc>)
 8011b14:	4602      	mov	r2, r0
 8011b16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011b1a:	f7ff bb2e 	b.w	801117a <_dtoa_r+0x32>
 8011b1e:	693a      	ldr	r2, [r7, #16]
 8011b20:	3202      	adds	r2, #2
 8011b22:	0092      	lsls	r2, r2, #2
 8011b24:	f107 010c 	add.w	r1, r7, #12
 8011b28:	300c      	adds	r0, #12
 8011b2a:	f000 f8fd 	bl	8011d28 <memcpy>
 8011b2e:	2201      	movs	r2, #1
 8011b30:	4629      	mov	r1, r5
 8011b32:	4620      	mov	r0, r4
 8011b34:	f000 fb24 	bl	8012180 <__lshift>
 8011b38:	9b00      	ldr	r3, [sp, #0]
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	9301      	str	r3, [sp, #4]
 8011b3e:	9b00      	ldr	r3, [sp, #0]
 8011b40:	444b      	add	r3, r9
 8011b42:	9307      	str	r3, [sp, #28]
 8011b44:	9b02      	ldr	r3, [sp, #8]
 8011b46:	f003 0301 	and.w	r3, r3, #1
 8011b4a:	46b8      	mov	r8, r7
 8011b4c:	9306      	str	r3, [sp, #24]
 8011b4e:	4607      	mov	r7, r0
 8011b50:	9b01      	ldr	r3, [sp, #4]
 8011b52:	4631      	mov	r1, r6
 8011b54:	3b01      	subs	r3, #1
 8011b56:	4658      	mov	r0, fp
 8011b58:	9302      	str	r3, [sp, #8]
 8011b5a:	f7ff fa69 	bl	8011030 <quorem>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	3330      	adds	r3, #48	; 0x30
 8011b62:	9004      	str	r0, [sp, #16]
 8011b64:	4641      	mov	r1, r8
 8011b66:	4658      	mov	r0, fp
 8011b68:	9308      	str	r3, [sp, #32]
 8011b6a:	f000 fb75 	bl	8012258 <__mcmp>
 8011b6e:	463a      	mov	r2, r7
 8011b70:	4681      	mov	r9, r0
 8011b72:	4631      	mov	r1, r6
 8011b74:	4620      	mov	r0, r4
 8011b76:	f000 fb8b 	bl	8012290 <__mdiff>
 8011b7a:	68c2      	ldr	r2, [r0, #12]
 8011b7c:	9b08      	ldr	r3, [sp, #32]
 8011b7e:	4605      	mov	r5, r0
 8011b80:	bb02      	cbnz	r2, 8011bc4 <_dtoa_r+0xa7c>
 8011b82:	4601      	mov	r1, r0
 8011b84:	4658      	mov	r0, fp
 8011b86:	f000 fb67 	bl	8012258 <__mcmp>
 8011b8a:	9b08      	ldr	r3, [sp, #32]
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	4629      	mov	r1, r5
 8011b90:	4620      	mov	r0, r4
 8011b92:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011b96:	f000 f921 	bl	8011ddc <_Bfree>
 8011b9a:	9b05      	ldr	r3, [sp, #20]
 8011b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b9e:	9d01      	ldr	r5, [sp, #4]
 8011ba0:	ea43 0102 	orr.w	r1, r3, r2
 8011ba4:	9b06      	ldr	r3, [sp, #24]
 8011ba6:	430b      	orrs	r3, r1
 8011ba8:	9b08      	ldr	r3, [sp, #32]
 8011baa:	d10d      	bne.n	8011bc8 <_dtoa_r+0xa80>
 8011bac:	2b39      	cmp	r3, #57	; 0x39
 8011bae:	d029      	beq.n	8011c04 <_dtoa_r+0xabc>
 8011bb0:	f1b9 0f00 	cmp.w	r9, #0
 8011bb4:	dd01      	ble.n	8011bba <_dtoa_r+0xa72>
 8011bb6:	9b04      	ldr	r3, [sp, #16]
 8011bb8:	3331      	adds	r3, #49	; 0x31
 8011bba:	9a02      	ldr	r2, [sp, #8]
 8011bbc:	7013      	strb	r3, [r2, #0]
 8011bbe:	e774      	b.n	8011aaa <_dtoa_r+0x962>
 8011bc0:	4638      	mov	r0, r7
 8011bc2:	e7b9      	b.n	8011b38 <_dtoa_r+0x9f0>
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	e7e2      	b.n	8011b8e <_dtoa_r+0xa46>
 8011bc8:	f1b9 0f00 	cmp.w	r9, #0
 8011bcc:	db06      	blt.n	8011bdc <_dtoa_r+0xa94>
 8011bce:	9905      	ldr	r1, [sp, #20]
 8011bd0:	ea41 0909 	orr.w	r9, r1, r9
 8011bd4:	9906      	ldr	r1, [sp, #24]
 8011bd6:	ea59 0101 	orrs.w	r1, r9, r1
 8011bda:	d120      	bne.n	8011c1e <_dtoa_r+0xad6>
 8011bdc:	2a00      	cmp	r2, #0
 8011bde:	ddec      	ble.n	8011bba <_dtoa_r+0xa72>
 8011be0:	4659      	mov	r1, fp
 8011be2:	2201      	movs	r2, #1
 8011be4:	4620      	mov	r0, r4
 8011be6:	9301      	str	r3, [sp, #4]
 8011be8:	f000 faca 	bl	8012180 <__lshift>
 8011bec:	4631      	mov	r1, r6
 8011bee:	4683      	mov	fp, r0
 8011bf0:	f000 fb32 	bl	8012258 <__mcmp>
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	9b01      	ldr	r3, [sp, #4]
 8011bf8:	dc02      	bgt.n	8011c00 <_dtoa_r+0xab8>
 8011bfa:	d1de      	bne.n	8011bba <_dtoa_r+0xa72>
 8011bfc:	07da      	lsls	r2, r3, #31
 8011bfe:	d5dc      	bpl.n	8011bba <_dtoa_r+0xa72>
 8011c00:	2b39      	cmp	r3, #57	; 0x39
 8011c02:	d1d8      	bne.n	8011bb6 <_dtoa_r+0xa6e>
 8011c04:	9a02      	ldr	r2, [sp, #8]
 8011c06:	2339      	movs	r3, #57	; 0x39
 8011c08:	7013      	strb	r3, [r2, #0]
 8011c0a:	462b      	mov	r3, r5
 8011c0c:	461d      	mov	r5, r3
 8011c0e:	3b01      	subs	r3, #1
 8011c10:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011c14:	2a39      	cmp	r2, #57	; 0x39
 8011c16:	d050      	beq.n	8011cba <_dtoa_r+0xb72>
 8011c18:	3201      	adds	r2, #1
 8011c1a:	701a      	strb	r2, [r3, #0]
 8011c1c:	e745      	b.n	8011aaa <_dtoa_r+0x962>
 8011c1e:	2a00      	cmp	r2, #0
 8011c20:	dd03      	ble.n	8011c2a <_dtoa_r+0xae2>
 8011c22:	2b39      	cmp	r3, #57	; 0x39
 8011c24:	d0ee      	beq.n	8011c04 <_dtoa_r+0xabc>
 8011c26:	3301      	adds	r3, #1
 8011c28:	e7c7      	b.n	8011bba <_dtoa_r+0xa72>
 8011c2a:	9a01      	ldr	r2, [sp, #4]
 8011c2c:	9907      	ldr	r1, [sp, #28]
 8011c2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011c32:	428a      	cmp	r2, r1
 8011c34:	d02a      	beq.n	8011c8c <_dtoa_r+0xb44>
 8011c36:	4659      	mov	r1, fp
 8011c38:	2300      	movs	r3, #0
 8011c3a:	220a      	movs	r2, #10
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f000 f8ef 	bl	8011e20 <__multadd>
 8011c42:	45b8      	cmp	r8, r7
 8011c44:	4683      	mov	fp, r0
 8011c46:	f04f 0300 	mov.w	r3, #0
 8011c4a:	f04f 020a 	mov.w	r2, #10
 8011c4e:	4641      	mov	r1, r8
 8011c50:	4620      	mov	r0, r4
 8011c52:	d107      	bne.n	8011c64 <_dtoa_r+0xb1c>
 8011c54:	f000 f8e4 	bl	8011e20 <__multadd>
 8011c58:	4680      	mov	r8, r0
 8011c5a:	4607      	mov	r7, r0
 8011c5c:	9b01      	ldr	r3, [sp, #4]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	9301      	str	r3, [sp, #4]
 8011c62:	e775      	b.n	8011b50 <_dtoa_r+0xa08>
 8011c64:	f000 f8dc 	bl	8011e20 <__multadd>
 8011c68:	4639      	mov	r1, r7
 8011c6a:	4680      	mov	r8, r0
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	220a      	movs	r2, #10
 8011c70:	4620      	mov	r0, r4
 8011c72:	f000 f8d5 	bl	8011e20 <__multadd>
 8011c76:	4607      	mov	r7, r0
 8011c78:	e7f0      	b.n	8011c5c <_dtoa_r+0xb14>
 8011c7a:	f1b9 0f00 	cmp.w	r9, #0
 8011c7e:	9a00      	ldr	r2, [sp, #0]
 8011c80:	bfcc      	ite	gt
 8011c82:	464d      	movgt	r5, r9
 8011c84:	2501      	movle	r5, #1
 8011c86:	4415      	add	r5, r2
 8011c88:	f04f 0800 	mov.w	r8, #0
 8011c8c:	4659      	mov	r1, fp
 8011c8e:	2201      	movs	r2, #1
 8011c90:	4620      	mov	r0, r4
 8011c92:	9301      	str	r3, [sp, #4]
 8011c94:	f000 fa74 	bl	8012180 <__lshift>
 8011c98:	4631      	mov	r1, r6
 8011c9a:	4683      	mov	fp, r0
 8011c9c:	f000 fadc 	bl	8012258 <__mcmp>
 8011ca0:	2800      	cmp	r0, #0
 8011ca2:	dcb2      	bgt.n	8011c0a <_dtoa_r+0xac2>
 8011ca4:	d102      	bne.n	8011cac <_dtoa_r+0xb64>
 8011ca6:	9b01      	ldr	r3, [sp, #4]
 8011ca8:	07db      	lsls	r3, r3, #31
 8011caa:	d4ae      	bmi.n	8011c0a <_dtoa_r+0xac2>
 8011cac:	462b      	mov	r3, r5
 8011cae:	461d      	mov	r5, r3
 8011cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cb4:	2a30      	cmp	r2, #48	; 0x30
 8011cb6:	d0fa      	beq.n	8011cae <_dtoa_r+0xb66>
 8011cb8:	e6f7      	b.n	8011aaa <_dtoa_r+0x962>
 8011cba:	9a00      	ldr	r2, [sp, #0]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d1a5      	bne.n	8011c0c <_dtoa_r+0xac4>
 8011cc0:	f10a 0a01 	add.w	sl, sl, #1
 8011cc4:	2331      	movs	r3, #49	; 0x31
 8011cc6:	e779      	b.n	8011bbc <_dtoa_r+0xa74>
 8011cc8:	4b13      	ldr	r3, [pc, #76]	; (8011d18 <_dtoa_r+0xbd0>)
 8011cca:	f7ff baaf 	b.w	801122c <_dtoa_r+0xe4>
 8011cce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f47f aa86 	bne.w	80111e2 <_dtoa_r+0x9a>
 8011cd6:	4b11      	ldr	r3, [pc, #68]	; (8011d1c <_dtoa_r+0xbd4>)
 8011cd8:	f7ff baa8 	b.w	801122c <_dtoa_r+0xe4>
 8011cdc:	f1b9 0f00 	cmp.w	r9, #0
 8011ce0:	dc03      	bgt.n	8011cea <_dtoa_r+0xba2>
 8011ce2:	9b05      	ldr	r3, [sp, #20]
 8011ce4:	2b02      	cmp	r3, #2
 8011ce6:	f73f aec9 	bgt.w	8011a7c <_dtoa_r+0x934>
 8011cea:	9d00      	ldr	r5, [sp, #0]
 8011cec:	4631      	mov	r1, r6
 8011cee:	4658      	mov	r0, fp
 8011cf0:	f7ff f99e 	bl	8011030 <quorem>
 8011cf4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011cf8:	f805 3b01 	strb.w	r3, [r5], #1
 8011cfc:	9a00      	ldr	r2, [sp, #0]
 8011cfe:	1aaa      	subs	r2, r5, r2
 8011d00:	4591      	cmp	r9, r2
 8011d02:	ddba      	ble.n	8011c7a <_dtoa_r+0xb32>
 8011d04:	4659      	mov	r1, fp
 8011d06:	2300      	movs	r3, #0
 8011d08:	220a      	movs	r2, #10
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	f000 f888 	bl	8011e20 <__multadd>
 8011d10:	4683      	mov	fp, r0
 8011d12:	e7eb      	b.n	8011cec <_dtoa_r+0xba4>
 8011d14:	08013d43 	.word	0x08013d43
 8011d18:	08013c9c 	.word	0x08013c9c
 8011d1c:	08013cc0 	.word	0x08013cc0

08011d20 <_localeconv_r>:
 8011d20:	4800      	ldr	r0, [pc, #0]	; (8011d24 <_localeconv_r+0x4>)
 8011d22:	4770      	bx	lr
 8011d24:	20000258 	.word	0x20000258

08011d28 <memcpy>:
 8011d28:	440a      	add	r2, r1
 8011d2a:	4291      	cmp	r1, r2
 8011d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011d30:	d100      	bne.n	8011d34 <memcpy+0xc>
 8011d32:	4770      	bx	lr
 8011d34:	b510      	push	{r4, lr}
 8011d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d3e:	4291      	cmp	r1, r2
 8011d40:	d1f9      	bne.n	8011d36 <memcpy+0xe>
 8011d42:	bd10      	pop	{r4, pc}

08011d44 <__malloc_lock>:
 8011d44:	4801      	ldr	r0, [pc, #4]	; (8011d4c <__malloc_lock+0x8>)
 8011d46:	f000 bd22 	b.w	801278e <__retarget_lock_acquire_recursive>
 8011d4a:	bf00      	nop
 8011d4c:	200015b4 	.word	0x200015b4

08011d50 <__malloc_unlock>:
 8011d50:	4801      	ldr	r0, [pc, #4]	; (8011d58 <__malloc_unlock+0x8>)
 8011d52:	f000 bd1d 	b.w	8012790 <__retarget_lock_release_recursive>
 8011d56:	bf00      	nop
 8011d58:	200015b4 	.word	0x200015b4

08011d5c <_Balloc>:
 8011d5c:	b570      	push	{r4, r5, r6, lr}
 8011d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d60:	4604      	mov	r4, r0
 8011d62:	460d      	mov	r5, r1
 8011d64:	b976      	cbnz	r6, 8011d84 <_Balloc+0x28>
 8011d66:	2010      	movs	r0, #16
 8011d68:	f7fe fbec 	bl	8010544 <malloc>
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	6260      	str	r0, [r4, #36]	; 0x24
 8011d70:	b920      	cbnz	r0, 8011d7c <_Balloc+0x20>
 8011d72:	4b18      	ldr	r3, [pc, #96]	; (8011dd4 <_Balloc+0x78>)
 8011d74:	4818      	ldr	r0, [pc, #96]	; (8011dd8 <_Balloc+0x7c>)
 8011d76:	2166      	movs	r1, #102	; 0x66
 8011d78:	f000 fcd8 	bl	801272c <__assert_func>
 8011d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d80:	6006      	str	r6, [r0, #0]
 8011d82:	60c6      	str	r6, [r0, #12]
 8011d84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d86:	68f3      	ldr	r3, [r6, #12]
 8011d88:	b183      	cbz	r3, 8011dac <_Balloc+0x50>
 8011d8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d92:	b9b8      	cbnz	r0, 8011dc4 <_Balloc+0x68>
 8011d94:	2101      	movs	r1, #1
 8011d96:	fa01 f605 	lsl.w	r6, r1, r5
 8011d9a:	1d72      	adds	r2, r6, #5
 8011d9c:	0092      	lsls	r2, r2, #2
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 fb5a 	bl	8012458 <_calloc_r>
 8011da4:	b160      	cbz	r0, 8011dc0 <_Balloc+0x64>
 8011da6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011daa:	e00e      	b.n	8011dca <_Balloc+0x6e>
 8011dac:	2221      	movs	r2, #33	; 0x21
 8011dae:	2104      	movs	r1, #4
 8011db0:	4620      	mov	r0, r4
 8011db2:	f000 fb51 	bl	8012458 <_calloc_r>
 8011db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011db8:	60f0      	str	r0, [r6, #12]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d1e4      	bne.n	8011d8a <_Balloc+0x2e>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	bd70      	pop	{r4, r5, r6, pc}
 8011dc4:	6802      	ldr	r2, [r0, #0]
 8011dc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011dd0:	e7f7      	b.n	8011dc2 <_Balloc+0x66>
 8011dd2:	bf00      	nop
 8011dd4:	08013ccd 	.word	0x08013ccd
 8011dd8:	08013d54 	.word	0x08013d54

08011ddc <_Bfree>:
 8011ddc:	b570      	push	{r4, r5, r6, lr}
 8011dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011de0:	4605      	mov	r5, r0
 8011de2:	460c      	mov	r4, r1
 8011de4:	b976      	cbnz	r6, 8011e04 <_Bfree+0x28>
 8011de6:	2010      	movs	r0, #16
 8011de8:	f7fe fbac 	bl	8010544 <malloc>
 8011dec:	4602      	mov	r2, r0
 8011dee:	6268      	str	r0, [r5, #36]	; 0x24
 8011df0:	b920      	cbnz	r0, 8011dfc <_Bfree+0x20>
 8011df2:	4b09      	ldr	r3, [pc, #36]	; (8011e18 <_Bfree+0x3c>)
 8011df4:	4809      	ldr	r0, [pc, #36]	; (8011e1c <_Bfree+0x40>)
 8011df6:	218a      	movs	r1, #138	; 0x8a
 8011df8:	f000 fc98 	bl	801272c <__assert_func>
 8011dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e00:	6006      	str	r6, [r0, #0]
 8011e02:	60c6      	str	r6, [r0, #12]
 8011e04:	b13c      	cbz	r4, 8011e16 <_Bfree+0x3a>
 8011e06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e08:	6862      	ldr	r2, [r4, #4]
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e10:	6021      	str	r1, [r4, #0]
 8011e12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e16:	bd70      	pop	{r4, r5, r6, pc}
 8011e18:	08013ccd 	.word	0x08013ccd
 8011e1c:	08013d54 	.word	0x08013d54

08011e20 <__multadd>:
 8011e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e24:	690e      	ldr	r6, [r1, #16]
 8011e26:	4607      	mov	r7, r0
 8011e28:	4698      	mov	r8, r3
 8011e2a:	460c      	mov	r4, r1
 8011e2c:	f101 0014 	add.w	r0, r1, #20
 8011e30:	2300      	movs	r3, #0
 8011e32:	6805      	ldr	r5, [r0, #0]
 8011e34:	b2a9      	uxth	r1, r5
 8011e36:	fb02 8101 	mla	r1, r2, r1, r8
 8011e3a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011e3e:	0c2d      	lsrs	r5, r5, #16
 8011e40:	fb02 c505 	mla	r5, r2, r5, ip
 8011e44:	b289      	uxth	r1, r1
 8011e46:	3301      	adds	r3, #1
 8011e48:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011e4c:	429e      	cmp	r6, r3
 8011e4e:	f840 1b04 	str.w	r1, [r0], #4
 8011e52:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011e56:	dcec      	bgt.n	8011e32 <__multadd+0x12>
 8011e58:	f1b8 0f00 	cmp.w	r8, #0
 8011e5c:	d022      	beq.n	8011ea4 <__multadd+0x84>
 8011e5e:	68a3      	ldr	r3, [r4, #8]
 8011e60:	42b3      	cmp	r3, r6
 8011e62:	dc19      	bgt.n	8011e98 <__multadd+0x78>
 8011e64:	6861      	ldr	r1, [r4, #4]
 8011e66:	4638      	mov	r0, r7
 8011e68:	3101      	adds	r1, #1
 8011e6a:	f7ff ff77 	bl	8011d5c <_Balloc>
 8011e6e:	4605      	mov	r5, r0
 8011e70:	b928      	cbnz	r0, 8011e7e <__multadd+0x5e>
 8011e72:	4602      	mov	r2, r0
 8011e74:	4b0d      	ldr	r3, [pc, #52]	; (8011eac <__multadd+0x8c>)
 8011e76:	480e      	ldr	r0, [pc, #56]	; (8011eb0 <__multadd+0x90>)
 8011e78:	21b5      	movs	r1, #181	; 0xb5
 8011e7a:	f000 fc57 	bl	801272c <__assert_func>
 8011e7e:	6922      	ldr	r2, [r4, #16]
 8011e80:	3202      	adds	r2, #2
 8011e82:	f104 010c 	add.w	r1, r4, #12
 8011e86:	0092      	lsls	r2, r2, #2
 8011e88:	300c      	adds	r0, #12
 8011e8a:	f7ff ff4d 	bl	8011d28 <memcpy>
 8011e8e:	4621      	mov	r1, r4
 8011e90:	4638      	mov	r0, r7
 8011e92:	f7ff ffa3 	bl	8011ddc <_Bfree>
 8011e96:	462c      	mov	r4, r5
 8011e98:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011e9c:	3601      	adds	r6, #1
 8011e9e:	f8c3 8014 	str.w	r8, [r3, #20]
 8011ea2:	6126      	str	r6, [r4, #16]
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eaa:	bf00      	nop
 8011eac:	08013d43 	.word	0x08013d43
 8011eb0:	08013d54 	.word	0x08013d54

08011eb4 <__hi0bits>:
 8011eb4:	0c03      	lsrs	r3, r0, #16
 8011eb6:	041b      	lsls	r3, r3, #16
 8011eb8:	b9d3      	cbnz	r3, 8011ef0 <__hi0bits+0x3c>
 8011eba:	0400      	lsls	r0, r0, #16
 8011ebc:	2310      	movs	r3, #16
 8011ebe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011ec2:	bf04      	itt	eq
 8011ec4:	0200      	lsleq	r0, r0, #8
 8011ec6:	3308      	addeq	r3, #8
 8011ec8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ecc:	bf04      	itt	eq
 8011ece:	0100      	lsleq	r0, r0, #4
 8011ed0:	3304      	addeq	r3, #4
 8011ed2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011ed6:	bf04      	itt	eq
 8011ed8:	0080      	lsleq	r0, r0, #2
 8011eda:	3302      	addeq	r3, #2
 8011edc:	2800      	cmp	r0, #0
 8011ede:	db05      	blt.n	8011eec <__hi0bits+0x38>
 8011ee0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011ee4:	f103 0301 	add.w	r3, r3, #1
 8011ee8:	bf08      	it	eq
 8011eea:	2320      	moveq	r3, #32
 8011eec:	4618      	mov	r0, r3
 8011eee:	4770      	bx	lr
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	e7e4      	b.n	8011ebe <__hi0bits+0xa>

08011ef4 <__lo0bits>:
 8011ef4:	6803      	ldr	r3, [r0, #0]
 8011ef6:	f013 0207 	ands.w	r2, r3, #7
 8011efa:	4601      	mov	r1, r0
 8011efc:	d00b      	beq.n	8011f16 <__lo0bits+0x22>
 8011efe:	07da      	lsls	r2, r3, #31
 8011f00:	d424      	bmi.n	8011f4c <__lo0bits+0x58>
 8011f02:	0798      	lsls	r0, r3, #30
 8011f04:	bf49      	itett	mi
 8011f06:	085b      	lsrmi	r3, r3, #1
 8011f08:	089b      	lsrpl	r3, r3, #2
 8011f0a:	2001      	movmi	r0, #1
 8011f0c:	600b      	strmi	r3, [r1, #0]
 8011f0e:	bf5c      	itt	pl
 8011f10:	600b      	strpl	r3, [r1, #0]
 8011f12:	2002      	movpl	r0, #2
 8011f14:	4770      	bx	lr
 8011f16:	b298      	uxth	r0, r3
 8011f18:	b9b0      	cbnz	r0, 8011f48 <__lo0bits+0x54>
 8011f1a:	0c1b      	lsrs	r3, r3, #16
 8011f1c:	2010      	movs	r0, #16
 8011f1e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011f22:	bf04      	itt	eq
 8011f24:	0a1b      	lsreq	r3, r3, #8
 8011f26:	3008      	addeq	r0, #8
 8011f28:	071a      	lsls	r2, r3, #28
 8011f2a:	bf04      	itt	eq
 8011f2c:	091b      	lsreq	r3, r3, #4
 8011f2e:	3004      	addeq	r0, #4
 8011f30:	079a      	lsls	r2, r3, #30
 8011f32:	bf04      	itt	eq
 8011f34:	089b      	lsreq	r3, r3, #2
 8011f36:	3002      	addeq	r0, #2
 8011f38:	07da      	lsls	r2, r3, #31
 8011f3a:	d403      	bmi.n	8011f44 <__lo0bits+0x50>
 8011f3c:	085b      	lsrs	r3, r3, #1
 8011f3e:	f100 0001 	add.w	r0, r0, #1
 8011f42:	d005      	beq.n	8011f50 <__lo0bits+0x5c>
 8011f44:	600b      	str	r3, [r1, #0]
 8011f46:	4770      	bx	lr
 8011f48:	4610      	mov	r0, r2
 8011f4a:	e7e8      	b.n	8011f1e <__lo0bits+0x2a>
 8011f4c:	2000      	movs	r0, #0
 8011f4e:	4770      	bx	lr
 8011f50:	2020      	movs	r0, #32
 8011f52:	4770      	bx	lr

08011f54 <__i2b>:
 8011f54:	b510      	push	{r4, lr}
 8011f56:	460c      	mov	r4, r1
 8011f58:	2101      	movs	r1, #1
 8011f5a:	f7ff feff 	bl	8011d5c <_Balloc>
 8011f5e:	4602      	mov	r2, r0
 8011f60:	b928      	cbnz	r0, 8011f6e <__i2b+0x1a>
 8011f62:	4b05      	ldr	r3, [pc, #20]	; (8011f78 <__i2b+0x24>)
 8011f64:	4805      	ldr	r0, [pc, #20]	; (8011f7c <__i2b+0x28>)
 8011f66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011f6a:	f000 fbdf 	bl	801272c <__assert_func>
 8011f6e:	2301      	movs	r3, #1
 8011f70:	6144      	str	r4, [r0, #20]
 8011f72:	6103      	str	r3, [r0, #16]
 8011f74:	bd10      	pop	{r4, pc}
 8011f76:	bf00      	nop
 8011f78:	08013d43 	.word	0x08013d43
 8011f7c:	08013d54 	.word	0x08013d54

08011f80 <__multiply>:
 8011f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f84:	4614      	mov	r4, r2
 8011f86:	690a      	ldr	r2, [r1, #16]
 8011f88:	6923      	ldr	r3, [r4, #16]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	bfb8      	it	lt
 8011f8e:	460b      	movlt	r3, r1
 8011f90:	460d      	mov	r5, r1
 8011f92:	bfbc      	itt	lt
 8011f94:	4625      	movlt	r5, r4
 8011f96:	461c      	movlt	r4, r3
 8011f98:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011f9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011fa0:	68ab      	ldr	r3, [r5, #8]
 8011fa2:	6869      	ldr	r1, [r5, #4]
 8011fa4:	eb0a 0709 	add.w	r7, sl, r9
 8011fa8:	42bb      	cmp	r3, r7
 8011faa:	b085      	sub	sp, #20
 8011fac:	bfb8      	it	lt
 8011fae:	3101      	addlt	r1, #1
 8011fb0:	f7ff fed4 	bl	8011d5c <_Balloc>
 8011fb4:	b930      	cbnz	r0, 8011fc4 <__multiply+0x44>
 8011fb6:	4602      	mov	r2, r0
 8011fb8:	4b42      	ldr	r3, [pc, #264]	; (80120c4 <__multiply+0x144>)
 8011fba:	4843      	ldr	r0, [pc, #268]	; (80120c8 <__multiply+0x148>)
 8011fbc:	f240 115d 	movw	r1, #349	; 0x15d
 8011fc0:	f000 fbb4 	bl	801272c <__assert_func>
 8011fc4:	f100 0614 	add.w	r6, r0, #20
 8011fc8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011fcc:	4633      	mov	r3, r6
 8011fce:	2200      	movs	r2, #0
 8011fd0:	4543      	cmp	r3, r8
 8011fd2:	d31e      	bcc.n	8012012 <__multiply+0x92>
 8011fd4:	f105 0c14 	add.w	ip, r5, #20
 8011fd8:	f104 0314 	add.w	r3, r4, #20
 8011fdc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011fe0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011fe4:	9202      	str	r2, [sp, #8]
 8011fe6:	ebac 0205 	sub.w	r2, ip, r5
 8011fea:	3a15      	subs	r2, #21
 8011fec:	f022 0203 	bic.w	r2, r2, #3
 8011ff0:	3204      	adds	r2, #4
 8011ff2:	f105 0115 	add.w	r1, r5, #21
 8011ff6:	458c      	cmp	ip, r1
 8011ff8:	bf38      	it	cc
 8011ffa:	2204      	movcc	r2, #4
 8011ffc:	9201      	str	r2, [sp, #4]
 8011ffe:	9a02      	ldr	r2, [sp, #8]
 8012000:	9303      	str	r3, [sp, #12]
 8012002:	429a      	cmp	r2, r3
 8012004:	d808      	bhi.n	8012018 <__multiply+0x98>
 8012006:	2f00      	cmp	r7, #0
 8012008:	dc55      	bgt.n	80120b6 <__multiply+0x136>
 801200a:	6107      	str	r7, [r0, #16]
 801200c:	b005      	add	sp, #20
 801200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012012:	f843 2b04 	str.w	r2, [r3], #4
 8012016:	e7db      	b.n	8011fd0 <__multiply+0x50>
 8012018:	f8b3 a000 	ldrh.w	sl, [r3]
 801201c:	f1ba 0f00 	cmp.w	sl, #0
 8012020:	d020      	beq.n	8012064 <__multiply+0xe4>
 8012022:	f105 0e14 	add.w	lr, r5, #20
 8012026:	46b1      	mov	r9, r6
 8012028:	2200      	movs	r2, #0
 801202a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801202e:	f8d9 b000 	ldr.w	fp, [r9]
 8012032:	b2a1      	uxth	r1, r4
 8012034:	fa1f fb8b 	uxth.w	fp, fp
 8012038:	fb0a b101 	mla	r1, sl, r1, fp
 801203c:	4411      	add	r1, r2
 801203e:	f8d9 2000 	ldr.w	r2, [r9]
 8012042:	0c24      	lsrs	r4, r4, #16
 8012044:	0c12      	lsrs	r2, r2, #16
 8012046:	fb0a 2404 	mla	r4, sl, r4, r2
 801204a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801204e:	b289      	uxth	r1, r1
 8012050:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012054:	45f4      	cmp	ip, lr
 8012056:	f849 1b04 	str.w	r1, [r9], #4
 801205a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801205e:	d8e4      	bhi.n	801202a <__multiply+0xaa>
 8012060:	9901      	ldr	r1, [sp, #4]
 8012062:	5072      	str	r2, [r6, r1]
 8012064:	9a03      	ldr	r2, [sp, #12]
 8012066:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801206a:	3304      	adds	r3, #4
 801206c:	f1b9 0f00 	cmp.w	r9, #0
 8012070:	d01f      	beq.n	80120b2 <__multiply+0x132>
 8012072:	6834      	ldr	r4, [r6, #0]
 8012074:	f105 0114 	add.w	r1, r5, #20
 8012078:	46b6      	mov	lr, r6
 801207a:	f04f 0a00 	mov.w	sl, #0
 801207e:	880a      	ldrh	r2, [r1, #0]
 8012080:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012084:	fb09 b202 	mla	r2, r9, r2, fp
 8012088:	4492      	add	sl, r2
 801208a:	b2a4      	uxth	r4, r4
 801208c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012090:	f84e 4b04 	str.w	r4, [lr], #4
 8012094:	f851 4b04 	ldr.w	r4, [r1], #4
 8012098:	f8be 2000 	ldrh.w	r2, [lr]
 801209c:	0c24      	lsrs	r4, r4, #16
 801209e:	fb09 2404 	mla	r4, r9, r4, r2
 80120a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80120a6:	458c      	cmp	ip, r1
 80120a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80120ac:	d8e7      	bhi.n	801207e <__multiply+0xfe>
 80120ae:	9a01      	ldr	r2, [sp, #4]
 80120b0:	50b4      	str	r4, [r6, r2]
 80120b2:	3604      	adds	r6, #4
 80120b4:	e7a3      	b.n	8011ffe <__multiply+0x7e>
 80120b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d1a5      	bne.n	801200a <__multiply+0x8a>
 80120be:	3f01      	subs	r7, #1
 80120c0:	e7a1      	b.n	8012006 <__multiply+0x86>
 80120c2:	bf00      	nop
 80120c4:	08013d43 	.word	0x08013d43
 80120c8:	08013d54 	.word	0x08013d54

080120cc <__pow5mult>:
 80120cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120d0:	4615      	mov	r5, r2
 80120d2:	f012 0203 	ands.w	r2, r2, #3
 80120d6:	4606      	mov	r6, r0
 80120d8:	460f      	mov	r7, r1
 80120da:	d007      	beq.n	80120ec <__pow5mult+0x20>
 80120dc:	4c25      	ldr	r4, [pc, #148]	; (8012174 <__pow5mult+0xa8>)
 80120de:	3a01      	subs	r2, #1
 80120e0:	2300      	movs	r3, #0
 80120e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120e6:	f7ff fe9b 	bl	8011e20 <__multadd>
 80120ea:	4607      	mov	r7, r0
 80120ec:	10ad      	asrs	r5, r5, #2
 80120ee:	d03d      	beq.n	801216c <__pow5mult+0xa0>
 80120f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120f2:	b97c      	cbnz	r4, 8012114 <__pow5mult+0x48>
 80120f4:	2010      	movs	r0, #16
 80120f6:	f7fe fa25 	bl	8010544 <malloc>
 80120fa:	4602      	mov	r2, r0
 80120fc:	6270      	str	r0, [r6, #36]	; 0x24
 80120fe:	b928      	cbnz	r0, 801210c <__pow5mult+0x40>
 8012100:	4b1d      	ldr	r3, [pc, #116]	; (8012178 <__pow5mult+0xac>)
 8012102:	481e      	ldr	r0, [pc, #120]	; (801217c <__pow5mult+0xb0>)
 8012104:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012108:	f000 fb10 	bl	801272c <__assert_func>
 801210c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012110:	6004      	str	r4, [r0, #0]
 8012112:	60c4      	str	r4, [r0, #12]
 8012114:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012118:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801211c:	b94c      	cbnz	r4, 8012132 <__pow5mult+0x66>
 801211e:	f240 2171 	movw	r1, #625	; 0x271
 8012122:	4630      	mov	r0, r6
 8012124:	f7ff ff16 	bl	8011f54 <__i2b>
 8012128:	2300      	movs	r3, #0
 801212a:	f8c8 0008 	str.w	r0, [r8, #8]
 801212e:	4604      	mov	r4, r0
 8012130:	6003      	str	r3, [r0, #0]
 8012132:	f04f 0900 	mov.w	r9, #0
 8012136:	07eb      	lsls	r3, r5, #31
 8012138:	d50a      	bpl.n	8012150 <__pow5mult+0x84>
 801213a:	4639      	mov	r1, r7
 801213c:	4622      	mov	r2, r4
 801213e:	4630      	mov	r0, r6
 8012140:	f7ff ff1e 	bl	8011f80 <__multiply>
 8012144:	4639      	mov	r1, r7
 8012146:	4680      	mov	r8, r0
 8012148:	4630      	mov	r0, r6
 801214a:	f7ff fe47 	bl	8011ddc <_Bfree>
 801214e:	4647      	mov	r7, r8
 8012150:	106d      	asrs	r5, r5, #1
 8012152:	d00b      	beq.n	801216c <__pow5mult+0xa0>
 8012154:	6820      	ldr	r0, [r4, #0]
 8012156:	b938      	cbnz	r0, 8012168 <__pow5mult+0x9c>
 8012158:	4622      	mov	r2, r4
 801215a:	4621      	mov	r1, r4
 801215c:	4630      	mov	r0, r6
 801215e:	f7ff ff0f 	bl	8011f80 <__multiply>
 8012162:	6020      	str	r0, [r4, #0]
 8012164:	f8c0 9000 	str.w	r9, [r0]
 8012168:	4604      	mov	r4, r0
 801216a:	e7e4      	b.n	8012136 <__pow5mult+0x6a>
 801216c:	4638      	mov	r0, r7
 801216e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012172:	bf00      	nop
 8012174:	08013ea8 	.word	0x08013ea8
 8012178:	08013ccd 	.word	0x08013ccd
 801217c:	08013d54 	.word	0x08013d54

08012180 <__lshift>:
 8012180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012184:	460c      	mov	r4, r1
 8012186:	6849      	ldr	r1, [r1, #4]
 8012188:	6923      	ldr	r3, [r4, #16]
 801218a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801218e:	68a3      	ldr	r3, [r4, #8]
 8012190:	4607      	mov	r7, r0
 8012192:	4691      	mov	r9, r2
 8012194:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012198:	f108 0601 	add.w	r6, r8, #1
 801219c:	42b3      	cmp	r3, r6
 801219e:	db0b      	blt.n	80121b8 <__lshift+0x38>
 80121a0:	4638      	mov	r0, r7
 80121a2:	f7ff fddb 	bl	8011d5c <_Balloc>
 80121a6:	4605      	mov	r5, r0
 80121a8:	b948      	cbnz	r0, 80121be <__lshift+0x3e>
 80121aa:	4602      	mov	r2, r0
 80121ac:	4b28      	ldr	r3, [pc, #160]	; (8012250 <__lshift+0xd0>)
 80121ae:	4829      	ldr	r0, [pc, #164]	; (8012254 <__lshift+0xd4>)
 80121b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80121b4:	f000 faba 	bl	801272c <__assert_func>
 80121b8:	3101      	adds	r1, #1
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	e7ee      	b.n	801219c <__lshift+0x1c>
 80121be:	2300      	movs	r3, #0
 80121c0:	f100 0114 	add.w	r1, r0, #20
 80121c4:	f100 0210 	add.w	r2, r0, #16
 80121c8:	4618      	mov	r0, r3
 80121ca:	4553      	cmp	r3, sl
 80121cc:	db33      	blt.n	8012236 <__lshift+0xb6>
 80121ce:	6920      	ldr	r0, [r4, #16]
 80121d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121d4:	f104 0314 	add.w	r3, r4, #20
 80121d8:	f019 091f 	ands.w	r9, r9, #31
 80121dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80121e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80121e4:	d02b      	beq.n	801223e <__lshift+0xbe>
 80121e6:	f1c9 0e20 	rsb	lr, r9, #32
 80121ea:	468a      	mov	sl, r1
 80121ec:	2200      	movs	r2, #0
 80121ee:	6818      	ldr	r0, [r3, #0]
 80121f0:	fa00 f009 	lsl.w	r0, r0, r9
 80121f4:	4302      	orrs	r2, r0
 80121f6:	f84a 2b04 	str.w	r2, [sl], #4
 80121fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80121fe:	459c      	cmp	ip, r3
 8012200:	fa22 f20e 	lsr.w	r2, r2, lr
 8012204:	d8f3      	bhi.n	80121ee <__lshift+0x6e>
 8012206:	ebac 0304 	sub.w	r3, ip, r4
 801220a:	3b15      	subs	r3, #21
 801220c:	f023 0303 	bic.w	r3, r3, #3
 8012210:	3304      	adds	r3, #4
 8012212:	f104 0015 	add.w	r0, r4, #21
 8012216:	4584      	cmp	ip, r0
 8012218:	bf38      	it	cc
 801221a:	2304      	movcc	r3, #4
 801221c:	50ca      	str	r2, [r1, r3]
 801221e:	b10a      	cbz	r2, 8012224 <__lshift+0xa4>
 8012220:	f108 0602 	add.w	r6, r8, #2
 8012224:	3e01      	subs	r6, #1
 8012226:	4638      	mov	r0, r7
 8012228:	612e      	str	r6, [r5, #16]
 801222a:	4621      	mov	r1, r4
 801222c:	f7ff fdd6 	bl	8011ddc <_Bfree>
 8012230:	4628      	mov	r0, r5
 8012232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012236:	f842 0f04 	str.w	r0, [r2, #4]!
 801223a:	3301      	adds	r3, #1
 801223c:	e7c5      	b.n	80121ca <__lshift+0x4a>
 801223e:	3904      	subs	r1, #4
 8012240:	f853 2b04 	ldr.w	r2, [r3], #4
 8012244:	f841 2f04 	str.w	r2, [r1, #4]!
 8012248:	459c      	cmp	ip, r3
 801224a:	d8f9      	bhi.n	8012240 <__lshift+0xc0>
 801224c:	e7ea      	b.n	8012224 <__lshift+0xa4>
 801224e:	bf00      	nop
 8012250:	08013d43 	.word	0x08013d43
 8012254:	08013d54 	.word	0x08013d54

08012258 <__mcmp>:
 8012258:	b530      	push	{r4, r5, lr}
 801225a:	6902      	ldr	r2, [r0, #16]
 801225c:	690c      	ldr	r4, [r1, #16]
 801225e:	1b12      	subs	r2, r2, r4
 8012260:	d10e      	bne.n	8012280 <__mcmp+0x28>
 8012262:	f100 0314 	add.w	r3, r0, #20
 8012266:	3114      	adds	r1, #20
 8012268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801226c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012278:	42a5      	cmp	r5, r4
 801227a:	d003      	beq.n	8012284 <__mcmp+0x2c>
 801227c:	d305      	bcc.n	801228a <__mcmp+0x32>
 801227e:	2201      	movs	r2, #1
 8012280:	4610      	mov	r0, r2
 8012282:	bd30      	pop	{r4, r5, pc}
 8012284:	4283      	cmp	r3, r0
 8012286:	d3f3      	bcc.n	8012270 <__mcmp+0x18>
 8012288:	e7fa      	b.n	8012280 <__mcmp+0x28>
 801228a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801228e:	e7f7      	b.n	8012280 <__mcmp+0x28>

08012290 <__mdiff>:
 8012290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012294:	460c      	mov	r4, r1
 8012296:	4606      	mov	r6, r0
 8012298:	4611      	mov	r1, r2
 801229a:	4620      	mov	r0, r4
 801229c:	4617      	mov	r7, r2
 801229e:	f7ff ffdb 	bl	8012258 <__mcmp>
 80122a2:	1e05      	subs	r5, r0, #0
 80122a4:	d110      	bne.n	80122c8 <__mdiff+0x38>
 80122a6:	4629      	mov	r1, r5
 80122a8:	4630      	mov	r0, r6
 80122aa:	f7ff fd57 	bl	8011d5c <_Balloc>
 80122ae:	b930      	cbnz	r0, 80122be <__mdiff+0x2e>
 80122b0:	4b39      	ldr	r3, [pc, #228]	; (8012398 <__mdiff+0x108>)
 80122b2:	4602      	mov	r2, r0
 80122b4:	f240 2132 	movw	r1, #562	; 0x232
 80122b8:	4838      	ldr	r0, [pc, #224]	; (801239c <__mdiff+0x10c>)
 80122ba:	f000 fa37 	bl	801272c <__assert_func>
 80122be:	2301      	movs	r3, #1
 80122c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80122c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c8:	bfa4      	itt	ge
 80122ca:	463b      	movge	r3, r7
 80122cc:	4627      	movge	r7, r4
 80122ce:	4630      	mov	r0, r6
 80122d0:	6879      	ldr	r1, [r7, #4]
 80122d2:	bfa6      	itte	ge
 80122d4:	461c      	movge	r4, r3
 80122d6:	2500      	movge	r5, #0
 80122d8:	2501      	movlt	r5, #1
 80122da:	f7ff fd3f 	bl	8011d5c <_Balloc>
 80122de:	b920      	cbnz	r0, 80122ea <__mdiff+0x5a>
 80122e0:	4b2d      	ldr	r3, [pc, #180]	; (8012398 <__mdiff+0x108>)
 80122e2:	4602      	mov	r2, r0
 80122e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80122e8:	e7e6      	b.n	80122b8 <__mdiff+0x28>
 80122ea:	693e      	ldr	r6, [r7, #16]
 80122ec:	60c5      	str	r5, [r0, #12]
 80122ee:	6925      	ldr	r5, [r4, #16]
 80122f0:	f107 0114 	add.w	r1, r7, #20
 80122f4:	f104 0914 	add.w	r9, r4, #20
 80122f8:	f100 0e14 	add.w	lr, r0, #20
 80122fc:	f107 0210 	add.w	r2, r7, #16
 8012300:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012304:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012308:	46f2      	mov	sl, lr
 801230a:	2700      	movs	r7, #0
 801230c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012310:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012314:	fa1f f883 	uxth.w	r8, r3
 8012318:	fa17 f78b 	uxtah	r7, r7, fp
 801231c:	0c1b      	lsrs	r3, r3, #16
 801231e:	eba7 0808 	sub.w	r8, r7, r8
 8012322:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012326:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801232a:	fa1f f888 	uxth.w	r8, r8
 801232e:	141f      	asrs	r7, r3, #16
 8012330:	454d      	cmp	r5, r9
 8012332:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012336:	f84a 3b04 	str.w	r3, [sl], #4
 801233a:	d8e7      	bhi.n	801230c <__mdiff+0x7c>
 801233c:	1b2b      	subs	r3, r5, r4
 801233e:	3b15      	subs	r3, #21
 8012340:	f023 0303 	bic.w	r3, r3, #3
 8012344:	3304      	adds	r3, #4
 8012346:	3415      	adds	r4, #21
 8012348:	42a5      	cmp	r5, r4
 801234a:	bf38      	it	cc
 801234c:	2304      	movcc	r3, #4
 801234e:	4419      	add	r1, r3
 8012350:	4473      	add	r3, lr
 8012352:	469e      	mov	lr, r3
 8012354:	460d      	mov	r5, r1
 8012356:	4565      	cmp	r5, ip
 8012358:	d30e      	bcc.n	8012378 <__mdiff+0xe8>
 801235a:	f10c 0203 	add.w	r2, ip, #3
 801235e:	1a52      	subs	r2, r2, r1
 8012360:	f022 0203 	bic.w	r2, r2, #3
 8012364:	3903      	subs	r1, #3
 8012366:	458c      	cmp	ip, r1
 8012368:	bf38      	it	cc
 801236a:	2200      	movcc	r2, #0
 801236c:	441a      	add	r2, r3
 801236e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012372:	b17b      	cbz	r3, 8012394 <__mdiff+0x104>
 8012374:	6106      	str	r6, [r0, #16]
 8012376:	e7a5      	b.n	80122c4 <__mdiff+0x34>
 8012378:	f855 8b04 	ldr.w	r8, [r5], #4
 801237c:	fa17 f488 	uxtah	r4, r7, r8
 8012380:	1422      	asrs	r2, r4, #16
 8012382:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012386:	b2a4      	uxth	r4, r4
 8012388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801238c:	f84e 4b04 	str.w	r4, [lr], #4
 8012390:	1417      	asrs	r7, r2, #16
 8012392:	e7e0      	b.n	8012356 <__mdiff+0xc6>
 8012394:	3e01      	subs	r6, #1
 8012396:	e7ea      	b.n	801236e <__mdiff+0xde>
 8012398:	08013d43 	.word	0x08013d43
 801239c:	08013d54 	.word	0x08013d54

080123a0 <__d2b>:
 80123a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80123a4:	4689      	mov	r9, r1
 80123a6:	2101      	movs	r1, #1
 80123a8:	ec57 6b10 	vmov	r6, r7, d0
 80123ac:	4690      	mov	r8, r2
 80123ae:	f7ff fcd5 	bl	8011d5c <_Balloc>
 80123b2:	4604      	mov	r4, r0
 80123b4:	b930      	cbnz	r0, 80123c4 <__d2b+0x24>
 80123b6:	4602      	mov	r2, r0
 80123b8:	4b25      	ldr	r3, [pc, #148]	; (8012450 <__d2b+0xb0>)
 80123ba:	4826      	ldr	r0, [pc, #152]	; (8012454 <__d2b+0xb4>)
 80123bc:	f240 310a 	movw	r1, #778	; 0x30a
 80123c0:	f000 f9b4 	bl	801272c <__assert_func>
 80123c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80123c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123cc:	bb35      	cbnz	r5, 801241c <__d2b+0x7c>
 80123ce:	2e00      	cmp	r6, #0
 80123d0:	9301      	str	r3, [sp, #4]
 80123d2:	d028      	beq.n	8012426 <__d2b+0x86>
 80123d4:	4668      	mov	r0, sp
 80123d6:	9600      	str	r6, [sp, #0]
 80123d8:	f7ff fd8c 	bl	8011ef4 <__lo0bits>
 80123dc:	9900      	ldr	r1, [sp, #0]
 80123de:	b300      	cbz	r0, 8012422 <__d2b+0x82>
 80123e0:	9a01      	ldr	r2, [sp, #4]
 80123e2:	f1c0 0320 	rsb	r3, r0, #32
 80123e6:	fa02 f303 	lsl.w	r3, r2, r3
 80123ea:	430b      	orrs	r3, r1
 80123ec:	40c2      	lsrs	r2, r0
 80123ee:	6163      	str	r3, [r4, #20]
 80123f0:	9201      	str	r2, [sp, #4]
 80123f2:	9b01      	ldr	r3, [sp, #4]
 80123f4:	61a3      	str	r3, [r4, #24]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	bf14      	ite	ne
 80123fa:	2202      	movne	r2, #2
 80123fc:	2201      	moveq	r2, #1
 80123fe:	6122      	str	r2, [r4, #16]
 8012400:	b1d5      	cbz	r5, 8012438 <__d2b+0x98>
 8012402:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012406:	4405      	add	r5, r0
 8012408:	f8c9 5000 	str.w	r5, [r9]
 801240c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012410:	f8c8 0000 	str.w	r0, [r8]
 8012414:	4620      	mov	r0, r4
 8012416:	b003      	add	sp, #12
 8012418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801241c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012420:	e7d5      	b.n	80123ce <__d2b+0x2e>
 8012422:	6161      	str	r1, [r4, #20]
 8012424:	e7e5      	b.n	80123f2 <__d2b+0x52>
 8012426:	a801      	add	r0, sp, #4
 8012428:	f7ff fd64 	bl	8011ef4 <__lo0bits>
 801242c:	9b01      	ldr	r3, [sp, #4]
 801242e:	6163      	str	r3, [r4, #20]
 8012430:	2201      	movs	r2, #1
 8012432:	6122      	str	r2, [r4, #16]
 8012434:	3020      	adds	r0, #32
 8012436:	e7e3      	b.n	8012400 <__d2b+0x60>
 8012438:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801243c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012440:	f8c9 0000 	str.w	r0, [r9]
 8012444:	6918      	ldr	r0, [r3, #16]
 8012446:	f7ff fd35 	bl	8011eb4 <__hi0bits>
 801244a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801244e:	e7df      	b.n	8012410 <__d2b+0x70>
 8012450:	08013d43 	.word	0x08013d43
 8012454:	08013d54 	.word	0x08013d54

08012458 <_calloc_r>:
 8012458:	b513      	push	{r0, r1, r4, lr}
 801245a:	434a      	muls	r2, r1
 801245c:	4611      	mov	r1, r2
 801245e:	9201      	str	r2, [sp, #4]
 8012460:	f7fe f8d8 	bl	8010614 <_malloc_r>
 8012464:	4604      	mov	r4, r0
 8012466:	b118      	cbz	r0, 8012470 <_calloc_r+0x18>
 8012468:	9a01      	ldr	r2, [sp, #4]
 801246a:	2100      	movs	r1, #0
 801246c:	f7fe f87a 	bl	8010564 <memset>
 8012470:	4620      	mov	r0, r4
 8012472:	b002      	add	sp, #8
 8012474:	bd10      	pop	{r4, pc}

08012476 <__ssputs_r>:
 8012476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801247a:	688e      	ldr	r6, [r1, #8]
 801247c:	429e      	cmp	r6, r3
 801247e:	4682      	mov	sl, r0
 8012480:	460c      	mov	r4, r1
 8012482:	4690      	mov	r8, r2
 8012484:	461f      	mov	r7, r3
 8012486:	d838      	bhi.n	80124fa <__ssputs_r+0x84>
 8012488:	898a      	ldrh	r2, [r1, #12]
 801248a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801248e:	d032      	beq.n	80124f6 <__ssputs_r+0x80>
 8012490:	6825      	ldr	r5, [r4, #0]
 8012492:	6909      	ldr	r1, [r1, #16]
 8012494:	eba5 0901 	sub.w	r9, r5, r1
 8012498:	6965      	ldr	r5, [r4, #20]
 801249a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801249e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80124a2:	3301      	adds	r3, #1
 80124a4:	444b      	add	r3, r9
 80124a6:	106d      	asrs	r5, r5, #1
 80124a8:	429d      	cmp	r5, r3
 80124aa:	bf38      	it	cc
 80124ac:	461d      	movcc	r5, r3
 80124ae:	0553      	lsls	r3, r2, #21
 80124b0:	d531      	bpl.n	8012516 <__ssputs_r+0xa0>
 80124b2:	4629      	mov	r1, r5
 80124b4:	f7fe f8ae 	bl	8010614 <_malloc_r>
 80124b8:	4606      	mov	r6, r0
 80124ba:	b950      	cbnz	r0, 80124d2 <__ssputs_r+0x5c>
 80124bc:	230c      	movs	r3, #12
 80124be:	f8ca 3000 	str.w	r3, [sl]
 80124c2:	89a3      	ldrh	r3, [r4, #12]
 80124c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124c8:	81a3      	strh	r3, [r4, #12]
 80124ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124d2:	6921      	ldr	r1, [r4, #16]
 80124d4:	464a      	mov	r2, r9
 80124d6:	f7ff fc27 	bl	8011d28 <memcpy>
 80124da:	89a3      	ldrh	r3, [r4, #12]
 80124dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80124e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124e4:	81a3      	strh	r3, [r4, #12]
 80124e6:	6126      	str	r6, [r4, #16]
 80124e8:	6165      	str	r5, [r4, #20]
 80124ea:	444e      	add	r6, r9
 80124ec:	eba5 0509 	sub.w	r5, r5, r9
 80124f0:	6026      	str	r6, [r4, #0]
 80124f2:	60a5      	str	r5, [r4, #8]
 80124f4:	463e      	mov	r6, r7
 80124f6:	42be      	cmp	r6, r7
 80124f8:	d900      	bls.n	80124fc <__ssputs_r+0x86>
 80124fa:	463e      	mov	r6, r7
 80124fc:	4632      	mov	r2, r6
 80124fe:	6820      	ldr	r0, [r4, #0]
 8012500:	4641      	mov	r1, r8
 8012502:	f000 f958 	bl	80127b6 <memmove>
 8012506:	68a3      	ldr	r3, [r4, #8]
 8012508:	6822      	ldr	r2, [r4, #0]
 801250a:	1b9b      	subs	r3, r3, r6
 801250c:	4432      	add	r2, r6
 801250e:	60a3      	str	r3, [r4, #8]
 8012510:	6022      	str	r2, [r4, #0]
 8012512:	2000      	movs	r0, #0
 8012514:	e7db      	b.n	80124ce <__ssputs_r+0x58>
 8012516:	462a      	mov	r2, r5
 8012518:	f000 f967 	bl	80127ea <_realloc_r>
 801251c:	4606      	mov	r6, r0
 801251e:	2800      	cmp	r0, #0
 8012520:	d1e1      	bne.n	80124e6 <__ssputs_r+0x70>
 8012522:	6921      	ldr	r1, [r4, #16]
 8012524:	4650      	mov	r0, sl
 8012526:	f7fe f825 	bl	8010574 <_free_r>
 801252a:	e7c7      	b.n	80124bc <__ssputs_r+0x46>

0801252c <_svfiprintf_r>:
 801252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012530:	4698      	mov	r8, r3
 8012532:	898b      	ldrh	r3, [r1, #12]
 8012534:	061b      	lsls	r3, r3, #24
 8012536:	b09d      	sub	sp, #116	; 0x74
 8012538:	4607      	mov	r7, r0
 801253a:	460d      	mov	r5, r1
 801253c:	4614      	mov	r4, r2
 801253e:	d50e      	bpl.n	801255e <_svfiprintf_r+0x32>
 8012540:	690b      	ldr	r3, [r1, #16]
 8012542:	b963      	cbnz	r3, 801255e <_svfiprintf_r+0x32>
 8012544:	2140      	movs	r1, #64	; 0x40
 8012546:	f7fe f865 	bl	8010614 <_malloc_r>
 801254a:	6028      	str	r0, [r5, #0]
 801254c:	6128      	str	r0, [r5, #16]
 801254e:	b920      	cbnz	r0, 801255a <_svfiprintf_r+0x2e>
 8012550:	230c      	movs	r3, #12
 8012552:	603b      	str	r3, [r7, #0]
 8012554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012558:	e0d1      	b.n	80126fe <_svfiprintf_r+0x1d2>
 801255a:	2340      	movs	r3, #64	; 0x40
 801255c:	616b      	str	r3, [r5, #20]
 801255e:	2300      	movs	r3, #0
 8012560:	9309      	str	r3, [sp, #36]	; 0x24
 8012562:	2320      	movs	r3, #32
 8012564:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012568:	f8cd 800c 	str.w	r8, [sp, #12]
 801256c:	2330      	movs	r3, #48	; 0x30
 801256e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012718 <_svfiprintf_r+0x1ec>
 8012572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012576:	f04f 0901 	mov.w	r9, #1
 801257a:	4623      	mov	r3, r4
 801257c:	469a      	mov	sl, r3
 801257e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012582:	b10a      	cbz	r2, 8012588 <_svfiprintf_r+0x5c>
 8012584:	2a25      	cmp	r2, #37	; 0x25
 8012586:	d1f9      	bne.n	801257c <_svfiprintf_r+0x50>
 8012588:	ebba 0b04 	subs.w	fp, sl, r4
 801258c:	d00b      	beq.n	80125a6 <_svfiprintf_r+0x7a>
 801258e:	465b      	mov	r3, fp
 8012590:	4622      	mov	r2, r4
 8012592:	4629      	mov	r1, r5
 8012594:	4638      	mov	r0, r7
 8012596:	f7ff ff6e 	bl	8012476 <__ssputs_r>
 801259a:	3001      	adds	r0, #1
 801259c:	f000 80aa 	beq.w	80126f4 <_svfiprintf_r+0x1c8>
 80125a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80125a2:	445a      	add	r2, fp
 80125a4:	9209      	str	r2, [sp, #36]	; 0x24
 80125a6:	f89a 3000 	ldrb.w	r3, [sl]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	f000 80a2 	beq.w	80126f4 <_svfiprintf_r+0x1c8>
 80125b0:	2300      	movs	r3, #0
 80125b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80125b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125ba:	f10a 0a01 	add.w	sl, sl, #1
 80125be:	9304      	str	r3, [sp, #16]
 80125c0:	9307      	str	r3, [sp, #28]
 80125c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80125c6:	931a      	str	r3, [sp, #104]	; 0x68
 80125c8:	4654      	mov	r4, sl
 80125ca:	2205      	movs	r2, #5
 80125cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125d0:	4851      	ldr	r0, [pc, #324]	; (8012718 <_svfiprintf_r+0x1ec>)
 80125d2:	f7ed fe0d 	bl	80001f0 <memchr>
 80125d6:	9a04      	ldr	r2, [sp, #16]
 80125d8:	b9d8      	cbnz	r0, 8012612 <_svfiprintf_r+0xe6>
 80125da:	06d0      	lsls	r0, r2, #27
 80125dc:	bf44      	itt	mi
 80125de:	2320      	movmi	r3, #32
 80125e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125e4:	0711      	lsls	r1, r2, #28
 80125e6:	bf44      	itt	mi
 80125e8:	232b      	movmi	r3, #43	; 0x2b
 80125ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80125ee:	f89a 3000 	ldrb.w	r3, [sl]
 80125f2:	2b2a      	cmp	r3, #42	; 0x2a
 80125f4:	d015      	beq.n	8012622 <_svfiprintf_r+0xf6>
 80125f6:	9a07      	ldr	r2, [sp, #28]
 80125f8:	4654      	mov	r4, sl
 80125fa:	2000      	movs	r0, #0
 80125fc:	f04f 0c0a 	mov.w	ip, #10
 8012600:	4621      	mov	r1, r4
 8012602:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012606:	3b30      	subs	r3, #48	; 0x30
 8012608:	2b09      	cmp	r3, #9
 801260a:	d94e      	bls.n	80126aa <_svfiprintf_r+0x17e>
 801260c:	b1b0      	cbz	r0, 801263c <_svfiprintf_r+0x110>
 801260e:	9207      	str	r2, [sp, #28]
 8012610:	e014      	b.n	801263c <_svfiprintf_r+0x110>
 8012612:	eba0 0308 	sub.w	r3, r0, r8
 8012616:	fa09 f303 	lsl.w	r3, r9, r3
 801261a:	4313      	orrs	r3, r2
 801261c:	9304      	str	r3, [sp, #16]
 801261e:	46a2      	mov	sl, r4
 8012620:	e7d2      	b.n	80125c8 <_svfiprintf_r+0x9c>
 8012622:	9b03      	ldr	r3, [sp, #12]
 8012624:	1d19      	adds	r1, r3, #4
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	9103      	str	r1, [sp, #12]
 801262a:	2b00      	cmp	r3, #0
 801262c:	bfbb      	ittet	lt
 801262e:	425b      	neglt	r3, r3
 8012630:	f042 0202 	orrlt.w	r2, r2, #2
 8012634:	9307      	strge	r3, [sp, #28]
 8012636:	9307      	strlt	r3, [sp, #28]
 8012638:	bfb8      	it	lt
 801263a:	9204      	strlt	r2, [sp, #16]
 801263c:	7823      	ldrb	r3, [r4, #0]
 801263e:	2b2e      	cmp	r3, #46	; 0x2e
 8012640:	d10c      	bne.n	801265c <_svfiprintf_r+0x130>
 8012642:	7863      	ldrb	r3, [r4, #1]
 8012644:	2b2a      	cmp	r3, #42	; 0x2a
 8012646:	d135      	bne.n	80126b4 <_svfiprintf_r+0x188>
 8012648:	9b03      	ldr	r3, [sp, #12]
 801264a:	1d1a      	adds	r2, r3, #4
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	9203      	str	r2, [sp, #12]
 8012650:	2b00      	cmp	r3, #0
 8012652:	bfb8      	it	lt
 8012654:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012658:	3402      	adds	r4, #2
 801265a:	9305      	str	r3, [sp, #20]
 801265c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012728 <_svfiprintf_r+0x1fc>
 8012660:	7821      	ldrb	r1, [r4, #0]
 8012662:	2203      	movs	r2, #3
 8012664:	4650      	mov	r0, sl
 8012666:	f7ed fdc3 	bl	80001f0 <memchr>
 801266a:	b140      	cbz	r0, 801267e <_svfiprintf_r+0x152>
 801266c:	2340      	movs	r3, #64	; 0x40
 801266e:	eba0 000a 	sub.w	r0, r0, sl
 8012672:	fa03 f000 	lsl.w	r0, r3, r0
 8012676:	9b04      	ldr	r3, [sp, #16]
 8012678:	4303      	orrs	r3, r0
 801267a:	3401      	adds	r4, #1
 801267c:	9304      	str	r3, [sp, #16]
 801267e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012682:	4826      	ldr	r0, [pc, #152]	; (801271c <_svfiprintf_r+0x1f0>)
 8012684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012688:	2206      	movs	r2, #6
 801268a:	f7ed fdb1 	bl	80001f0 <memchr>
 801268e:	2800      	cmp	r0, #0
 8012690:	d038      	beq.n	8012704 <_svfiprintf_r+0x1d8>
 8012692:	4b23      	ldr	r3, [pc, #140]	; (8012720 <_svfiprintf_r+0x1f4>)
 8012694:	bb1b      	cbnz	r3, 80126de <_svfiprintf_r+0x1b2>
 8012696:	9b03      	ldr	r3, [sp, #12]
 8012698:	3307      	adds	r3, #7
 801269a:	f023 0307 	bic.w	r3, r3, #7
 801269e:	3308      	adds	r3, #8
 80126a0:	9303      	str	r3, [sp, #12]
 80126a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126a4:	4433      	add	r3, r6
 80126a6:	9309      	str	r3, [sp, #36]	; 0x24
 80126a8:	e767      	b.n	801257a <_svfiprintf_r+0x4e>
 80126aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80126ae:	460c      	mov	r4, r1
 80126b0:	2001      	movs	r0, #1
 80126b2:	e7a5      	b.n	8012600 <_svfiprintf_r+0xd4>
 80126b4:	2300      	movs	r3, #0
 80126b6:	3401      	adds	r4, #1
 80126b8:	9305      	str	r3, [sp, #20]
 80126ba:	4619      	mov	r1, r3
 80126bc:	f04f 0c0a 	mov.w	ip, #10
 80126c0:	4620      	mov	r0, r4
 80126c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126c6:	3a30      	subs	r2, #48	; 0x30
 80126c8:	2a09      	cmp	r2, #9
 80126ca:	d903      	bls.n	80126d4 <_svfiprintf_r+0x1a8>
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d0c5      	beq.n	801265c <_svfiprintf_r+0x130>
 80126d0:	9105      	str	r1, [sp, #20]
 80126d2:	e7c3      	b.n	801265c <_svfiprintf_r+0x130>
 80126d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80126d8:	4604      	mov	r4, r0
 80126da:	2301      	movs	r3, #1
 80126dc:	e7f0      	b.n	80126c0 <_svfiprintf_r+0x194>
 80126de:	ab03      	add	r3, sp, #12
 80126e0:	9300      	str	r3, [sp, #0]
 80126e2:	462a      	mov	r2, r5
 80126e4:	4b0f      	ldr	r3, [pc, #60]	; (8012724 <_svfiprintf_r+0x1f8>)
 80126e6:	a904      	add	r1, sp, #16
 80126e8:	4638      	mov	r0, r7
 80126ea:	f7fe f88d 	bl	8010808 <_printf_float>
 80126ee:	1c42      	adds	r2, r0, #1
 80126f0:	4606      	mov	r6, r0
 80126f2:	d1d6      	bne.n	80126a2 <_svfiprintf_r+0x176>
 80126f4:	89ab      	ldrh	r3, [r5, #12]
 80126f6:	065b      	lsls	r3, r3, #25
 80126f8:	f53f af2c 	bmi.w	8012554 <_svfiprintf_r+0x28>
 80126fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126fe:	b01d      	add	sp, #116	; 0x74
 8012700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012704:	ab03      	add	r3, sp, #12
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	462a      	mov	r2, r5
 801270a:	4b06      	ldr	r3, [pc, #24]	; (8012724 <_svfiprintf_r+0x1f8>)
 801270c:	a904      	add	r1, sp, #16
 801270e:	4638      	mov	r0, r7
 8012710:	f7fe fb1e 	bl	8010d50 <_printf_i>
 8012714:	e7eb      	b.n	80126ee <_svfiprintf_r+0x1c2>
 8012716:	bf00      	nop
 8012718:	08013eb4 	.word	0x08013eb4
 801271c:	08013ebe 	.word	0x08013ebe
 8012720:	08010809 	.word	0x08010809
 8012724:	08012477 	.word	0x08012477
 8012728:	08013eba 	.word	0x08013eba

0801272c <__assert_func>:
 801272c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801272e:	4614      	mov	r4, r2
 8012730:	461a      	mov	r2, r3
 8012732:	4b09      	ldr	r3, [pc, #36]	; (8012758 <__assert_func+0x2c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	4605      	mov	r5, r0
 8012738:	68d8      	ldr	r0, [r3, #12]
 801273a:	b14c      	cbz	r4, 8012750 <__assert_func+0x24>
 801273c:	4b07      	ldr	r3, [pc, #28]	; (801275c <__assert_func+0x30>)
 801273e:	9100      	str	r1, [sp, #0]
 8012740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012744:	4906      	ldr	r1, [pc, #24]	; (8012760 <__assert_func+0x34>)
 8012746:	462b      	mov	r3, r5
 8012748:	f000 f80e 	bl	8012768 <fiprintf>
 801274c:	f000 fa9a 	bl	8012c84 <abort>
 8012750:	4b04      	ldr	r3, [pc, #16]	; (8012764 <__assert_func+0x38>)
 8012752:	461c      	mov	r4, r3
 8012754:	e7f3      	b.n	801273e <__assert_func+0x12>
 8012756:	bf00      	nop
 8012758:	20000104 	.word	0x20000104
 801275c:	08013ec5 	.word	0x08013ec5
 8012760:	08013ed2 	.word	0x08013ed2
 8012764:	08013f00 	.word	0x08013f00

08012768 <fiprintf>:
 8012768:	b40e      	push	{r1, r2, r3}
 801276a:	b503      	push	{r0, r1, lr}
 801276c:	4601      	mov	r1, r0
 801276e:	ab03      	add	r3, sp, #12
 8012770:	4805      	ldr	r0, [pc, #20]	; (8012788 <fiprintf+0x20>)
 8012772:	f853 2b04 	ldr.w	r2, [r3], #4
 8012776:	6800      	ldr	r0, [r0, #0]
 8012778:	9301      	str	r3, [sp, #4]
 801277a:	f000 f885 	bl	8012888 <_vfiprintf_r>
 801277e:	b002      	add	sp, #8
 8012780:	f85d eb04 	ldr.w	lr, [sp], #4
 8012784:	b003      	add	sp, #12
 8012786:	4770      	bx	lr
 8012788:	20000104 	.word	0x20000104

0801278c <__retarget_lock_init_recursive>:
 801278c:	4770      	bx	lr

0801278e <__retarget_lock_acquire_recursive>:
 801278e:	4770      	bx	lr

08012790 <__retarget_lock_release_recursive>:
 8012790:	4770      	bx	lr

08012792 <__ascii_mbtowc>:
 8012792:	b082      	sub	sp, #8
 8012794:	b901      	cbnz	r1, 8012798 <__ascii_mbtowc+0x6>
 8012796:	a901      	add	r1, sp, #4
 8012798:	b142      	cbz	r2, 80127ac <__ascii_mbtowc+0x1a>
 801279a:	b14b      	cbz	r3, 80127b0 <__ascii_mbtowc+0x1e>
 801279c:	7813      	ldrb	r3, [r2, #0]
 801279e:	600b      	str	r3, [r1, #0]
 80127a0:	7812      	ldrb	r2, [r2, #0]
 80127a2:	1e10      	subs	r0, r2, #0
 80127a4:	bf18      	it	ne
 80127a6:	2001      	movne	r0, #1
 80127a8:	b002      	add	sp, #8
 80127aa:	4770      	bx	lr
 80127ac:	4610      	mov	r0, r2
 80127ae:	e7fb      	b.n	80127a8 <__ascii_mbtowc+0x16>
 80127b0:	f06f 0001 	mvn.w	r0, #1
 80127b4:	e7f8      	b.n	80127a8 <__ascii_mbtowc+0x16>

080127b6 <memmove>:
 80127b6:	4288      	cmp	r0, r1
 80127b8:	b510      	push	{r4, lr}
 80127ba:	eb01 0402 	add.w	r4, r1, r2
 80127be:	d902      	bls.n	80127c6 <memmove+0x10>
 80127c0:	4284      	cmp	r4, r0
 80127c2:	4623      	mov	r3, r4
 80127c4:	d807      	bhi.n	80127d6 <memmove+0x20>
 80127c6:	1e43      	subs	r3, r0, #1
 80127c8:	42a1      	cmp	r1, r4
 80127ca:	d008      	beq.n	80127de <memmove+0x28>
 80127cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80127d4:	e7f8      	b.n	80127c8 <memmove+0x12>
 80127d6:	4402      	add	r2, r0
 80127d8:	4601      	mov	r1, r0
 80127da:	428a      	cmp	r2, r1
 80127dc:	d100      	bne.n	80127e0 <memmove+0x2a>
 80127de:	bd10      	pop	{r4, pc}
 80127e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80127e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80127e8:	e7f7      	b.n	80127da <memmove+0x24>

080127ea <_realloc_r>:
 80127ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ec:	4607      	mov	r7, r0
 80127ee:	4614      	mov	r4, r2
 80127f0:	460e      	mov	r6, r1
 80127f2:	b921      	cbnz	r1, 80127fe <_realloc_r+0x14>
 80127f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80127f8:	4611      	mov	r1, r2
 80127fa:	f7fd bf0b 	b.w	8010614 <_malloc_r>
 80127fe:	b922      	cbnz	r2, 801280a <_realloc_r+0x20>
 8012800:	f7fd feb8 	bl	8010574 <_free_r>
 8012804:	4625      	mov	r5, r4
 8012806:	4628      	mov	r0, r5
 8012808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801280a:	f000 fc5f 	bl	80130cc <_malloc_usable_size_r>
 801280e:	42a0      	cmp	r0, r4
 8012810:	d20f      	bcs.n	8012832 <_realloc_r+0x48>
 8012812:	4621      	mov	r1, r4
 8012814:	4638      	mov	r0, r7
 8012816:	f7fd fefd 	bl	8010614 <_malloc_r>
 801281a:	4605      	mov	r5, r0
 801281c:	2800      	cmp	r0, #0
 801281e:	d0f2      	beq.n	8012806 <_realloc_r+0x1c>
 8012820:	4631      	mov	r1, r6
 8012822:	4622      	mov	r2, r4
 8012824:	f7ff fa80 	bl	8011d28 <memcpy>
 8012828:	4631      	mov	r1, r6
 801282a:	4638      	mov	r0, r7
 801282c:	f7fd fea2 	bl	8010574 <_free_r>
 8012830:	e7e9      	b.n	8012806 <_realloc_r+0x1c>
 8012832:	4635      	mov	r5, r6
 8012834:	e7e7      	b.n	8012806 <_realloc_r+0x1c>

08012836 <__sfputc_r>:
 8012836:	6893      	ldr	r3, [r2, #8]
 8012838:	3b01      	subs	r3, #1
 801283a:	2b00      	cmp	r3, #0
 801283c:	b410      	push	{r4}
 801283e:	6093      	str	r3, [r2, #8]
 8012840:	da08      	bge.n	8012854 <__sfputc_r+0x1e>
 8012842:	6994      	ldr	r4, [r2, #24]
 8012844:	42a3      	cmp	r3, r4
 8012846:	db01      	blt.n	801284c <__sfputc_r+0x16>
 8012848:	290a      	cmp	r1, #10
 801284a:	d103      	bne.n	8012854 <__sfputc_r+0x1e>
 801284c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012850:	f000 b94a 	b.w	8012ae8 <__swbuf_r>
 8012854:	6813      	ldr	r3, [r2, #0]
 8012856:	1c58      	adds	r0, r3, #1
 8012858:	6010      	str	r0, [r2, #0]
 801285a:	7019      	strb	r1, [r3, #0]
 801285c:	4608      	mov	r0, r1
 801285e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012862:	4770      	bx	lr

08012864 <__sfputs_r>:
 8012864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012866:	4606      	mov	r6, r0
 8012868:	460f      	mov	r7, r1
 801286a:	4614      	mov	r4, r2
 801286c:	18d5      	adds	r5, r2, r3
 801286e:	42ac      	cmp	r4, r5
 8012870:	d101      	bne.n	8012876 <__sfputs_r+0x12>
 8012872:	2000      	movs	r0, #0
 8012874:	e007      	b.n	8012886 <__sfputs_r+0x22>
 8012876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801287a:	463a      	mov	r2, r7
 801287c:	4630      	mov	r0, r6
 801287e:	f7ff ffda 	bl	8012836 <__sfputc_r>
 8012882:	1c43      	adds	r3, r0, #1
 8012884:	d1f3      	bne.n	801286e <__sfputs_r+0xa>
 8012886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012888 <_vfiprintf_r>:
 8012888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801288c:	460d      	mov	r5, r1
 801288e:	b09d      	sub	sp, #116	; 0x74
 8012890:	4614      	mov	r4, r2
 8012892:	4698      	mov	r8, r3
 8012894:	4606      	mov	r6, r0
 8012896:	b118      	cbz	r0, 80128a0 <_vfiprintf_r+0x18>
 8012898:	6983      	ldr	r3, [r0, #24]
 801289a:	b90b      	cbnz	r3, 80128a0 <_vfiprintf_r+0x18>
 801289c:	f000 fb14 	bl	8012ec8 <__sinit>
 80128a0:	4b89      	ldr	r3, [pc, #548]	; (8012ac8 <_vfiprintf_r+0x240>)
 80128a2:	429d      	cmp	r5, r3
 80128a4:	d11b      	bne.n	80128de <_vfiprintf_r+0x56>
 80128a6:	6875      	ldr	r5, [r6, #4]
 80128a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128aa:	07d9      	lsls	r1, r3, #31
 80128ac:	d405      	bmi.n	80128ba <_vfiprintf_r+0x32>
 80128ae:	89ab      	ldrh	r3, [r5, #12]
 80128b0:	059a      	lsls	r2, r3, #22
 80128b2:	d402      	bmi.n	80128ba <_vfiprintf_r+0x32>
 80128b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128b6:	f7ff ff6a 	bl	801278e <__retarget_lock_acquire_recursive>
 80128ba:	89ab      	ldrh	r3, [r5, #12]
 80128bc:	071b      	lsls	r3, r3, #28
 80128be:	d501      	bpl.n	80128c4 <_vfiprintf_r+0x3c>
 80128c0:	692b      	ldr	r3, [r5, #16]
 80128c2:	b9eb      	cbnz	r3, 8012900 <_vfiprintf_r+0x78>
 80128c4:	4629      	mov	r1, r5
 80128c6:	4630      	mov	r0, r6
 80128c8:	f000 f96e 	bl	8012ba8 <__swsetup_r>
 80128cc:	b1c0      	cbz	r0, 8012900 <_vfiprintf_r+0x78>
 80128ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128d0:	07dc      	lsls	r4, r3, #31
 80128d2:	d50e      	bpl.n	80128f2 <_vfiprintf_r+0x6a>
 80128d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128d8:	b01d      	add	sp, #116	; 0x74
 80128da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128de:	4b7b      	ldr	r3, [pc, #492]	; (8012acc <_vfiprintf_r+0x244>)
 80128e0:	429d      	cmp	r5, r3
 80128e2:	d101      	bne.n	80128e8 <_vfiprintf_r+0x60>
 80128e4:	68b5      	ldr	r5, [r6, #8]
 80128e6:	e7df      	b.n	80128a8 <_vfiprintf_r+0x20>
 80128e8:	4b79      	ldr	r3, [pc, #484]	; (8012ad0 <_vfiprintf_r+0x248>)
 80128ea:	429d      	cmp	r5, r3
 80128ec:	bf08      	it	eq
 80128ee:	68f5      	ldreq	r5, [r6, #12]
 80128f0:	e7da      	b.n	80128a8 <_vfiprintf_r+0x20>
 80128f2:	89ab      	ldrh	r3, [r5, #12]
 80128f4:	0598      	lsls	r0, r3, #22
 80128f6:	d4ed      	bmi.n	80128d4 <_vfiprintf_r+0x4c>
 80128f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128fa:	f7ff ff49 	bl	8012790 <__retarget_lock_release_recursive>
 80128fe:	e7e9      	b.n	80128d4 <_vfiprintf_r+0x4c>
 8012900:	2300      	movs	r3, #0
 8012902:	9309      	str	r3, [sp, #36]	; 0x24
 8012904:	2320      	movs	r3, #32
 8012906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801290a:	f8cd 800c 	str.w	r8, [sp, #12]
 801290e:	2330      	movs	r3, #48	; 0x30
 8012910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ad4 <_vfiprintf_r+0x24c>
 8012914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012918:	f04f 0901 	mov.w	r9, #1
 801291c:	4623      	mov	r3, r4
 801291e:	469a      	mov	sl, r3
 8012920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012924:	b10a      	cbz	r2, 801292a <_vfiprintf_r+0xa2>
 8012926:	2a25      	cmp	r2, #37	; 0x25
 8012928:	d1f9      	bne.n	801291e <_vfiprintf_r+0x96>
 801292a:	ebba 0b04 	subs.w	fp, sl, r4
 801292e:	d00b      	beq.n	8012948 <_vfiprintf_r+0xc0>
 8012930:	465b      	mov	r3, fp
 8012932:	4622      	mov	r2, r4
 8012934:	4629      	mov	r1, r5
 8012936:	4630      	mov	r0, r6
 8012938:	f7ff ff94 	bl	8012864 <__sfputs_r>
 801293c:	3001      	adds	r0, #1
 801293e:	f000 80aa 	beq.w	8012a96 <_vfiprintf_r+0x20e>
 8012942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012944:	445a      	add	r2, fp
 8012946:	9209      	str	r2, [sp, #36]	; 0x24
 8012948:	f89a 3000 	ldrb.w	r3, [sl]
 801294c:	2b00      	cmp	r3, #0
 801294e:	f000 80a2 	beq.w	8012a96 <_vfiprintf_r+0x20e>
 8012952:	2300      	movs	r3, #0
 8012954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801295c:	f10a 0a01 	add.w	sl, sl, #1
 8012960:	9304      	str	r3, [sp, #16]
 8012962:	9307      	str	r3, [sp, #28]
 8012964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012968:	931a      	str	r3, [sp, #104]	; 0x68
 801296a:	4654      	mov	r4, sl
 801296c:	2205      	movs	r2, #5
 801296e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012972:	4858      	ldr	r0, [pc, #352]	; (8012ad4 <_vfiprintf_r+0x24c>)
 8012974:	f7ed fc3c 	bl	80001f0 <memchr>
 8012978:	9a04      	ldr	r2, [sp, #16]
 801297a:	b9d8      	cbnz	r0, 80129b4 <_vfiprintf_r+0x12c>
 801297c:	06d1      	lsls	r1, r2, #27
 801297e:	bf44      	itt	mi
 8012980:	2320      	movmi	r3, #32
 8012982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012986:	0713      	lsls	r3, r2, #28
 8012988:	bf44      	itt	mi
 801298a:	232b      	movmi	r3, #43	; 0x2b
 801298c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012990:	f89a 3000 	ldrb.w	r3, [sl]
 8012994:	2b2a      	cmp	r3, #42	; 0x2a
 8012996:	d015      	beq.n	80129c4 <_vfiprintf_r+0x13c>
 8012998:	9a07      	ldr	r2, [sp, #28]
 801299a:	4654      	mov	r4, sl
 801299c:	2000      	movs	r0, #0
 801299e:	f04f 0c0a 	mov.w	ip, #10
 80129a2:	4621      	mov	r1, r4
 80129a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129a8:	3b30      	subs	r3, #48	; 0x30
 80129aa:	2b09      	cmp	r3, #9
 80129ac:	d94e      	bls.n	8012a4c <_vfiprintf_r+0x1c4>
 80129ae:	b1b0      	cbz	r0, 80129de <_vfiprintf_r+0x156>
 80129b0:	9207      	str	r2, [sp, #28]
 80129b2:	e014      	b.n	80129de <_vfiprintf_r+0x156>
 80129b4:	eba0 0308 	sub.w	r3, r0, r8
 80129b8:	fa09 f303 	lsl.w	r3, r9, r3
 80129bc:	4313      	orrs	r3, r2
 80129be:	9304      	str	r3, [sp, #16]
 80129c0:	46a2      	mov	sl, r4
 80129c2:	e7d2      	b.n	801296a <_vfiprintf_r+0xe2>
 80129c4:	9b03      	ldr	r3, [sp, #12]
 80129c6:	1d19      	adds	r1, r3, #4
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	9103      	str	r1, [sp, #12]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	bfbb      	ittet	lt
 80129d0:	425b      	neglt	r3, r3
 80129d2:	f042 0202 	orrlt.w	r2, r2, #2
 80129d6:	9307      	strge	r3, [sp, #28]
 80129d8:	9307      	strlt	r3, [sp, #28]
 80129da:	bfb8      	it	lt
 80129dc:	9204      	strlt	r2, [sp, #16]
 80129de:	7823      	ldrb	r3, [r4, #0]
 80129e0:	2b2e      	cmp	r3, #46	; 0x2e
 80129e2:	d10c      	bne.n	80129fe <_vfiprintf_r+0x176>
 80129e4:	7863      	ldrb	r3, [r4, #1]
 80129e6:	2b2a      	cmp	r3, #42	; 0x2a
 80129e8:	d135      	bne.n	8012a56 <_vfiprintf_r+0x1ce>
 80129ea:	9b03      	ldr	r3, [sp, #12]
 80129ec:	1d1a      	adds	r2, r3, #4
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	9203      	str	r2, [sp, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	bfb8      	it	lt
 80129f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80129fa:	3402      	adds	r4, #2
 80129fc:	9305      	str	r3, [sp, #20]
 80129fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ae4 <_vfiprintf_r+0x25c>
 8012a02:	7821      	ldrb	r1, [r4, #0]
 8012a04:	2203      	movs	r2, #3
 8012a06:	4650      	mov	r0, sl
 8012a08:	f7ed fbf2 	bl	80001f0 <memchr>
 8012a0c:	b140      	cbz	r0, 8012a20 <_vfiprintf_r+0x198>
 8012a0e:	2340      	movs	r3, #64	; 0x40
 8012a10:	eba0 000a 	sub.w	r0, r0, sl
 8012a14:	fa03 f000 	lsl.w	r0, r3, r0
 8012a18:	9b04      	ldr	r3, [sp, #16]
 8012a1a:	4303      	orrs	r3, r0
 8012a1c:	3401      	adds	r4, #1
 8012a1e:	9304      	str	r3, [sp, #16]
 8012a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a24:	482c      	ldr	r0, [pc, #176]	; (8012ad8 <_vfiprintf_r+0x250>)
 8012a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a2a:	2206      	movs	r2, #6
 8012a2c:	f7ed fbe0 	bl	80001f0 <memchr>
 8012a30:	2800      	cmp	r0, #0
 8012a32:	d03f      	beq.n	8012ab4 <_vfiprintf_r+0x22c>
 8012a34:	4b29      	ldr	r3, [pc, #164]	; (8012adc <_vfiprintf_r+0x254>)
 8012a36:	bb1b      	cbnz	r3, 8012a80 <_vfiprintf_r+0x1f8>
 8012a38:	9b03      	ldr	r3, [sp, #12]
 8012a3a:	3307      	adds	r3, #7
 8012a3c:	f023 0307 	bic.w	r3, r3, #7
 8012a40:	3308      	adds	r3, #8
 8012a42:	9303      	str	r3, [sp, #12]
 8012a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a46:	443b      	add	r3, r7
 8012a48:	9309      	str	r3, [sp, #36]	; 0x24
 8012a4a:	e767      	b.n	801291c <_vfiprintf_r+0x94>
 8012a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a50:	460c      	mov	r4, r1
 8012a52:	2001      	movs	r0, #1
 8012a54:	e7a5      	b.n	80129a2 <_vfiprintf_r+0x11a>
 8012a56:	2300      	movs	r3, #0
 8012a58:	3401      	adds	r4, #1
 8012a5a:	9305      	str	r3, [sp, #20]
 8012a5c:	4619      	mov	r1, r3
 8012a5e:	f04f 0c0a 	mov.w	ip, #10
 8012a62:	4620      	mov	r0, r4
 8012a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a68:	3a30      	subs	r2, #48	; 0x30
 8012a6a:	2a09      	cmp	r2, #9
 8012a6c:	d903      	bls.n	8012a76 <_vfiprintf_r+0x1ee>
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d0c5      	beq.n	80129fe <_vfiprintf_r+0x176>
 8012a72:	9105      	str	r1, [sp, #20]
 8012a74:	e7c3      	b.n	80129fe <_vfiprintf_r+0x176>
 8012a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e7f0      	b.n	8012a62 <_vfiprintf_r+0x1da>
 8012a80:	ab03      	add	r3, sp, #12
 8012a82:	9300      	str	r3, [sp, #0]
 8012a84:	462a      	mov	r2, r5
 8012a86:	4b16      	ldr	r3, [pc, #88]	; (8012ae0 <_vfiprintf_r+0x258>)
 8012a88:	a904      	add	r1, sp, #16
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	f7fd febc 	bl	8010808 <_printf_float>
 8012a90:	4607      	mov	r7, r0
 8012a92:	1c78      	adds	r0, r7, #1
 8012a94:	d1d6      	bne.n	8012a44 <_vfiprintf_r+0x1bc>
 8012a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a98:	07d9      	lsls	r1, r3, #31
 8012a9a:	d405      	bmi.n	8012aa8 <_vfiprintf_r+0x220>
 8012a9c:	89ab      	ldrh	r3, [r5, #12]
 8012a9e:	059a      	lsls	r2, r3, #22
 8012aa0:	d402      	bmi.n	8012aa8 <_vfiprintf_r+0x220>
 8012aa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012aa4:	f7ff fe74 	bl	8012790 <__retarget_lock_release_recursive>
 8012aa8:	89ab      	ldrh	r3, [r5, #12]
 8012aaa:	065b      	lsls	r3, r3, #25
 8012aac:	f53f af12 	bmi.w	80128d4 <_vfiprintf_r+0x4c>
 8012ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ab2:	e711      	b.n	80128d8 <_vfiprintf_r+0x50>
 8012ab4:	ab03      	add	r3, sp, #12
 8012ab6:	9300      	str	r3, [sp, #0]
 8012ab8:	462a      	mov	r2, r5
 8012aba:	4b09      	ldr	r3, [pc, #36]	; (8012ae0 <_vfiprintf_r+0x258>)
 8012abc:	a904      	add	r1, sp, #16
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f7fe f946 	bl	8010d50 <_printf_i>
 8012ac4:	e7e4      	b.n	8012a90 <_vfiprintf_r+0x208>
 8012ac6:	bf00      	nop
 8012ac8:	08013f2c 	.word	0x08013f2c
 8012acc:	08013f4c 	.word	0x08013f4c
 8012ad0:	08013f0c 	.word	0x08013f0c
 8012ad4:	08013eb4 	.word	0x08013eb4
 8012ad8:	08013ebe 	.word	0x08013ebe
 8012adc:	08010809 	.word	0x08010809
 8012ae0:	08012865 	.word	0x08012865
 8012ae4:	08013eba 	.word	0x08013eba

08012ae8 <__swbuf_r>:
 8012ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012aea:	460e      	mov	r6, r1
 8012aec:	4614      	mov	r4, r2
 8012aee:	4605      	mov	r5, r0
 8012af0:	b118      	cbz	r0, 8012afa <__swbuf_r+0x12>
 8012af2:	6983      	ldr	r3, [r0, #24]
 8012af4:	b90b      	cbnz	r3, 8012afa <__swbuf_r+0x12>
 8012af6:	f000 f9e7 	bl	8012ec8 <__sinit>
 8012afa:	4b21      	ldr	r3, [pc, #132]	; (8012b80 <__swbuf_r+0x98>)
 8012afc:	429c      	cmp	r4, r3
 8012afe:	d12b      	bne.n	8012b58 <__swbuf_r+0x70>
 8012b00:	686c      	ldr	r4, [r5, #4]
 8012b02:	69a3      	ldr	r3, [r4, #24]
 8012b04:	60a3      	str	r3, [r4, #8]
 8012b06:	89a3      	ldrh	r3, [r4, #12]
 8012b08:	071a      	lsls	r2, r3, #28
 8012b0a:	d52f      	bpl.n	8012b6c <__swbuf_r+0x84>
 8012b0c:	6923      	ldr	r3, [r4, #16]
 8012b0e:	b36b      	cbz	r3, 8012b6c <__swbuf_r+0x84>
 8012b10:	6923      	ldr	r3, [r4, #16]
 8012b12:	6820      	ldr	r0, [r4, #0]
 8012b14:	1ac0      	subs	r0, r0, r3
 8012b16:	6963      	ldr	r3, [r4, #20]
 8012b18:	b2f6      	uxtb	r6, r6
 8012b1a:	4283      	cmp	r3, r0
 8012b1c:	4637      	mov	r7, r6
 8012b1e:	dc04      	bgt.n	8012b2a <__swbuf_r+0x42>
 8012b20:	4621      	mov	r1, r4
 8012b22:	4628      	mov	r0, r5
 8012b24:	f000 f93c 	bl	8012da0 <_fflush_r>
 8012b28:	bb30      	cbnz	r0, 8012b78 <__swbuf_r+0x90>
 8012b2a:	68a3      	ldr	r3, [r4, #8]
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	60a3      	str	r3, [r4, #8]
 8012b30:	6823      	ldr	r3, [r4, #0]
 8012b32:	1c5a      	adds	r2, r3, #1
 8012b34:	6022      	str	r2, [r4, #0]
 8012b36:	701e      	strb	r6, [r3, #0]
 8012b38:	6963      	ldr	r3, [r4, #20]
 8012b3a:	3001      	adds	r0, #1
 8012b3c:	4283      	cmp	r3, r0
 8012b3e:	d004      	beq.n	8012b4a <__swbuf_r+0x62>
 8012b40:	89a3      	ldrh	r3, [r4, #12]
 8012b42:	07db      	lsls	r3, r3, #31
 8012b44:	d506      	bpl.n	8012b54 <__swbuf_r+0x6c>
 8012b46:	2e0a      	cmp	r6, #10
 8012b48:	d104      	bne.n	8012b54 <__swbuf_r+0x6c>
 8012b4a:	4621      	mov	r1, r4
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	f000 f927 	bl	8012da0 <_fflush_r>
 8012b52:	b988      	cbnz	r0, 8012b78 <__swbuf_r+0x90>
 8012b54:	4638      	mov	r0, r7
 8012b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b58:	4b0a      	ldr	r3, [pc, #40]	; (8012b84 <__swbuf_r+0x9c>)
 8012b5a:	429c      	cmp	r4, r3
 8012b5c:	d101      	bne.n	8012b62 <__swbuf_r+0x7a>
 8012b5e:	68ac      	ldr	r4, [r5, #8]
 8012b60:	e7cf      	b.n	8012b02 <__swbuf_r+0x1a>
 8012b62:	4b09      	ldr	r3, [pc, #36]	; (8012b88 <__swbuf_r+0xa0>)
 8012b64:	429c      	cmp	r4, r3
 8012b66:	bf08      	it	eq
 8012b68:	68ec      	ldreq	r4, [r5, #12]
 8012b6a:	e7ca      	b.n	8012b02 <__swbuf_r+0x1a>
 8012b6c:	4621      	mov	r1, r4
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f000 f81a 	bl	8012ba8 <__swsetup_r>
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d0cb      	beq.n	8012b10 <__swbuf_r+0x28>
 8012b78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012b7c:	e7ea      	b.n	8012b54 <__swbuf_r+0x6c>
 8012b7e:	bf00      	nop
 8012b80:	08013f2c 	.word	0x08013f2c
 8012b84:	08013f4c 	.word	0x08013f4c
 8012b88:	08013f0c 	.word	0x08013f0c

08012b8c <__ascii_wctomb>:
 8012b8c:	b149      	cbz	r1, 8012ba2 <__ascii_wctomb+0x16>
 8012b8e:	2aff      	cmp	r2, #255	; 0xff
 8012b90:	bf85      	ittet	hi
 8012b92:	238a      	movhi	r3, #138	; 0x8a
 8012b94:	6003      	strhi	r3, [r0, #0]
 8012b96:	700a      	strbls	r2, [r1, #0]
 8012b98:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012b9c:	bf98      	it	ls
 8012b9e:	2001      	movls	r0, #1
 8012ba0:	4770      	bx	lr
 8012ba2:	4608      	mov	r0, r1
 8012ba4:	4770      	bx	lr
	...

08012ba8 <__swsetup_r>:
 8012ba8:	4b32      	ldr	r3, [pc, #200]	; (8012c74 <__swsetup_r+0xcc>)
 8012baa:	b570      	push	{r4, r5, r6, lr}
 8012bac:	681d      	ldr	r5, [r3, #0]
 8012bae:	4606      	mov	r6, r0
 8012bb0:	460c      	mov	r4, r1
 8012bb2:	b125      	cbz	r5, 8012bbe <__swsetup_r+0x16>
 8012bb4:	69ab      	ldr	r3, [r5, #24]
 8012bb6:	b913      	cbnz	r3, 8012bbe <__swsetup_r+0x16>
 8012bb8:	4628      	mov	r0, r5
 8012bba:	f000 f985 	bl	8012ec8 <__sinit>
 8012bbe:	4b2e      	ldr	r3, [pc, #184]	; (8012c78 <__swsetup_r+0xd0>)
 8012bc0:	429c      	cmp	r4, r3
 8012bc2:	d10f      	bne.n	8012be4 <__swsetup_r+0x3c>
 8012bc4:	686c      	ldr	r4, [r5, #4]
 8012bc6:	89a3      	ldrh	r3, [r4, #12]
 8012bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012bcc:	0719      	lsls	r1, r3, #28
 8012bce:	d42c      	bmi.n	8012c2a <__swsetup_r+0x82>
 8012bd0:	06dd      	lsls	r5, r3, #27
 8012bd2:	d411      	bmi.n	8012bf8 <__swsetup_r+0x50>
 8012bd4:	2309      	movs	r3, #9
 8012bd6:	6033      	str	r3, [r6, #0]
 8012bd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012bdc:	81a3      	strh	r3, [r4, #12]
 8012bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012be2:	e03e      	b.n	8012c62 <__swsetup_r+0xba>
 8012be4:	4b25      	ldr	r3, [pc, #148]	; (8012c7c <__swsetup_r+0xd4>)
 8012be6:	429c      	cmp	r4, r3
 8012be8:	d101      	bne.n	8012bee <__swsetup_r+0x46>
 8012bea:	68ac      	ldr	r4, [r5, #8]
 8012bec:	e7eb      	b.n	8012bc6 <__swsetup_r+0x1e>
 8012bee:	4b24      	ldr	r3, [pc, #144]	; (8012c80 <__swsetup_r+0xd8>)
 8012bf0:	429c      	cmp	r4, r3
 8012bf2:	bf08      	it	eq
 8012bf4:	68ec      	ldreq	r4, [r5, #12]
 8012bf6:	e7e6      	b.n	8012bc6 <__swsetup_r+0x1e>
 8012bf8:	0758      	lsls	r0, r3, #29
 8012bfa:	d512      	bpl.n	8012c22 <__swsetup_r+0x7a>
 8012bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bfe:	b141      	cbz	r1, 8012c12 <__swsetup_r+0x6a>
 8012c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c04:	4299      	cmp	r1, r3
 8012c06:	d002      	beq.n	8012c0e <__swsetup_r+0x66>
 8012c08:	4630      	mov	r0, r6
 8012c0a:	f7fd fcb3 	bl	8010574 <_free_r>
 8012c0e:	2300      	movs	r3, #0
 8012c10:	6363      	str	r3, [r4, #52]	; 0x34
 8012c12:	89a3      	ldrh	r3, [r4, #12]
 8012c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c18:	81a3      	strh	r3, [r4, #12]
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	6063      	str	r3, [r4, #4]
 8012c1e:	6923      	ldr	r3, [r4, #16]
 8012c20:	6023      	str	r3, [r4, #0]
 8012c22:	89a3      	ldrh	r3, [r4, #12]
 8012c24:	f043 0308 	orr.w	r3, r3, #8
 8012c28:	81a3      	strh	r3, [r4, #12]
 8012c2a:	6923      	ldr	r3, [r4, #16]
 8012c2c:	b94b      	cbnz	r3, 8012c42 <__swsetup_r+0x9a>
 8012c2e:	89a3      	ldrh	r3, [r4, #12]
 8012c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c38:	d003      	beq.n	8012c42 <__swsetup_r+0x9a>
 8012c3a:	4621      	mov	r1, r4
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f000 fa05 	bl	801304c <__smakebuf_r>
 8012c42:	89a0      	ldrh	r0, [r4, #12]
 8012c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c48:	f010 0301 	ands.w	r3, r0, #1
 8012c4c:	d00a      	beq.n	8012c64 <__swsetup_r+0xbc>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	60a3      	str	r3, [r4, #8]
 8012c52:	6963      	ldr	r3, [r4, #20]
 8012c54:	425b      	negs	r3, r3
 8012c56:	61a3      	str	r3, [r4, #24]
 8012c58:	6923      	ldr	r3, [r4, #16]
 8012c5a:	b943      	cbnz	r3, 8012c6e <__swsetup_r+0xc6>
 8012c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c60:	d1ba      	bne.n	8012bd8 <__swsetup_r+0x30>
 8012c62:	bd70      	pop	{r4, r5, r6, pc}
 8012c64:	0781      	lsls	r1, r0, #30
 8012c66:	bf58      	it	pl
 8012c68:	6963      	ldrpl	r3, [r4, #20]
 8012c6a:	60a3      	str	r3, [r4, #8]
 8012c6c:	e7f4      	b.n	8012c58 <__swsetup_r+0xb0>
 8012c6e:	2000      	movs	r0, #0
 8012c70:	e7f7      	b.n	8012c62 <__swsetup_r+0xba>
 8012c72:	bf00      	nop
 8012c74:	20000104 	.word	0x20000104
 8012c78:	08013f2c 	.word	0x08013f2c
 8012c7c:	08013f4c 	.word	0x08013f4c
 8012c80:	08013f0c 	.word	0x08013f0c

08012c84 <abort>:
 8012c84:	b508      	push	{r3, lr}
 8012c86:	2006      	movs	r0, #6
 8012c88:	f000 fa50 	bl	801312c <raise>
 8012c8c:	2001      	movs	r0, #1
 8012c8e:	f7f1 fa01 	bl	8004094 <_exit>
	...

08012c94 <__sflush_r>:
 8012c94:	898a      	ldrh	r2, [r1, #12]
 8012c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c9a:	4605      	mov	r5, r0
 8012c9c:	0710      	lsls	r0, r2, #28
 8012c9e:	460c      	mov	r4, r1
 8012ca0:	d458      	bmi.n	8012d54 <__sflush_r+0xc0>
 8012ca2:	684b      	ldr	r3, [r1, #4]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	dc05      	bgt.n	8012cb4 <__sflush_r+0x20>
 8012ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	dc02      	bgt.n	8012cb4 <__sflush_r+0x20>
 8012cae:	2000      	movs	r0, #0
 8012cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cb6:	2e00      	cmp	r6, #0
 8012cb8:	d0f9      	beq.n	8012cae <__sflush_r+0x1a>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012cc0:	682f      	ldr	r7, [r5, #0]
 8012cc2:	602b      	str	r3, [r5, #0]
 8012cc4:	d032      	beq.n	8012d2c <__sflush_r+0x98>
 8012cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012cc8:	89a3      	ldrh	r3, [r4, #12]
 8012cca:	075a      	lsls	r2, r3, #29
 8012ccc:	d505      	bpl.n	8012cda <__sflush_r+0x46>
 8012cce:	6863      	ldr	r3, [r4, #4]
 8012cd0:	1ac0      	subs	r0, r0, r3
 8012cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012cd4:	b10b      	cbz	r3, 8012cda <__sflush_r+0x46>
 8012cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012cd8:	1ac0      	subs	r0, r0, r3
 8012cda:	2300      	movs	r3, #0
 8012cdc:	4602      	mov	r2, r0
 8012cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ce0:	6a21      	ldr	r1, [r4, #32]
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	47b0      	blx	r6
 8012ce6:	1c43      	adds	r3, r0, #1
 8012ce8:	89a3      	ldrh	r3, [r4, #12]
 8012cea:	d106      	bne.n	8012cfa <__sflush_r+0x66>
 8012cec:	6829      	ldr	r1, [r5, #0]
 8012cee:	291d      	cmp	r1, #29
 8012cf0:	d82c      	bhi.n	8012d4c <__sflush_r+0xb8>
 8012cf2:	4a2a      	ldr	r2, [pc, #168]	; (8012d9c <__sflush_r+0x108>)
 8012cf4:	40ca      	lsrs	r2, r1
 8012cf6:	07d6      	lsls	r6, r2, #31
 8012cf8:	d528      	bpl.n	8012d4c <__sflush_r+0xb8>
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	6062      	str	r2, [r4, #4]
 8012cfe:	04d9      	lsls	r1, r3, #19
 8012d00:	6922      	ldr	r2, [r4, #16]
 8012d02:	6022      	str	r2, [r4, #0]
 8012d04:	d504      	bpl.n	8012d10 <__sflush_r+0x7c>
 8012d06:	1c42      	adds	r2, r0, #1
 8012d08:	d101      	bne.n	8012d0e <__sflush_r+0x7a>
 8012d0a:	682b      	ldr	r3, [r5, #0]
 8012d0c:	b903      	cbnz	r3, 8012d10 <__sflush_r+0x7c>
 8012d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8012d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d12:	602f      	str	r7, [r5, #0]
 8012d14:	2900      	cmp	r1, #0
 8012d16:	d0ca      	beq.n	8012cae <__sflush_r+0x1a>
 8012d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d1c:	4299      	cmp	r1, r3
 8012d1e:	d002      	beq.n	8012d26 <__sflush_r+0x92>
 8012d20:	4628      	mov	r0, r5
 8012d22:	f7fd fc27 	bl	8010574 <_free_r>
 8012d26:	2000      	movs	r0, #0
 8012d28:	6360      	str	r0, [r4, #52]	; 0x34
 8012d2a:	e7c1      	b.n	8012cb0 <__sflush_r+0x1c>
 8012d2c:	6a21      	ldr	r1, [r4, #32]
 8012d2e:	2301      	movs	r3, #1
 8012d30:	4628      	mov	r0, r5
 8012d32:	47b0      	blx	r6
 8012d34:	1c41      	adds	r1, r0, #1
 8012d36:	d1c7      	bne.n	8012cc8 <__sflush_r+0x34>
 8012d38:	682b      	ldr	r3, [r5, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d0c4      	beq.n	8012cc8 <__sflush_r+0x34>
 8012d3e:	2b1d      	cmp	r3, #29
 8012d40:	d001      	beq.n	8012d46 <__sflush_r+0xb2>
 8012d42:	2b16      	cmp	r3, #22
 8012d44:	d101      	bne.n	8012d4a <__sflush_r+0xb6>
 8012d46:	602f      	str	r7, [r5, #0]
 8012d48:	e7b1      	b.n	8012cae <__sflush_r+0x1a>
 8012d4a:	89a3      	ldrh	r3, [r4, #12]
 8012d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d50:	81a3      	strh	r3, [r4, #12]
 8012d52:	e7ad      	b.n	8012cb0 <__sflush_r+0x1c>
 8012d54:	690f      	ldr	r7, [r1, #16]
 8012d56:	2f00      	cmp	r7, #0
 8012d58:	d0a9      	beq.n	8012cae <__sflush_r+0x1a>
 8012d5a:	0793      	lsls	r3, r2, #30
 8012d5c:	680e      	ldr	r6, [r1, #0]
 8012d5e:	bf08      	it	eq
 8012d60:	694b      	ldreq	r3, [r1, #20]
 8012d62:	600f      	str	r7, [r1, #0]
 8012d64:	bf18      	it	ne
 8012d66:	2300      	movne	r3, #0
 8012d68:	eba6 0807 	sub.w	r8, r6, r7
 8012d6c:	608b      	str	r3, [r1, #8]
 8012d6e:	f1b8 0f00 	cmp.w	r8, #0
 8012d72:	dd9c      	ble.n	8012cae <__sflush_r+0x1a>
 8012d74:	6a21      	ldr	r1, [r4, #32]
 8012d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012d78:	4643      	mov	r3, r8
 8012d7a:	463a      	mov	r2, r7
 8012d7c:	4628      	mov	r0, r5
 8012d7e:	47b0      	blx	r6
 8012d80:	2800      	cmp	r0, #0
 8012d82:	dc06      	bgt.n	8012d92 <__sflush_r+0xfe>
 8012d84:	89a3      	ldrh	r3, [r4, #12]
 8012d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d8a:	81a3      	strh	r3, [r4, #12]
 8012d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d90:	e78e      	b.n	8012cb0 <__sflush_r+0x1c>
 8012d92:	4407      	add	r7, r0
 8012d94:	eba8 0800 	sub.w	r8, r8, r0
 8012d98:	e7e9      	b.n	8012d6e <__sflush_r+0xda>
 8012d9a:	bf00      	nop
 8012d9c:	20400001 	.word	0x20400001

08012da0 <_fflush_r>:
 8012da0:	b538      	push	{r3, r4, r5, lr}
 8012da2:	690b      	ldr	r3, [r1, #16]
 8012da4:	4605      	mov	r5, r0
 8012da6:	460c      	mov	r4, r1
 8012da8:	b913      	cbnz	r3, 8012db0 <_fflush_r+0x10>
 8012daa:	2500      	movs	r5, #0
 8012dac:	4628      	mov	r0, r5
 8012dae:	bd38      	pop	{r3, r4, r5, pc}
 8012db0:	b118      	cbz	r0, 8012dba <_fflush_r+0x1a>
 8012db2:	6983      	ldr	r3, [r0, #24]
 8012db4:	b90b      	cbnz	r3, 8012dba <_fflush_r+0x1a>
 8012db6:	f000 f887 	bl	8012ec8 <__sinit>
 8012dba:	4b14      	ldr	r3, [pc, #80]	; (8012e0c <_fflush_r+0x6c>)
 8012dbc:	429c      	cmp	r4, r3
 8012dbe:	d11b      	bne.n	8012df8 <_fflush_r+0x58>
 8012dc0:	686c      	ldr	r4, [r5, #4]
 8012dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d0ef      	beq.n	8012daa <_fflush_r+0xa>
 8012dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012dcc:	07d0      	lsls	r0, r2, #31
 8012dce:	d404      	bmi.n	8012dda <_fflush_r+0x3a>
 8012dd0:	0599      	lsls	r1, r3, #22
 8012dd2:	d402      	bmi.n	8012dda <_fflush_r+0x3a>
 8012dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012dd6:	f7ff fcda 	bl	801278e <__retarget_lock_acquire_recursive>
 8012dda:	4628      	mov	r0, r5
 8012ddc:	4621      	mov	r1, r4
 8012dde:	f7ff ff59 	bl	8012c94 <__sflush_r>
 8012de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012de4:	07da      	lsls	r2, r3, #31
 8012de6:	4605      	mov	r5, r0
 8012de8:	d4e0      	bmi.n	8012dac <_fflush_r+0xc>
 8012dea:	89a3      	ldrh	r3, [r4, #12]
 8012dec:	059b      	lsls	r3, r3, #22
 8012dee:	d4dd      	bmi.n	8012dac <_fflush_r+0xc>
 8012df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012df2:	f7ff fccd 	bl	8012790 <__retarget_lock_release_recursive>
 8012df6:	e7d9      	b.n	8012dac <_fflush_r+0xc>
 8012df8:	4b05      	ldr	r3, [pc, #20]	; (8012e10 <_fflush_r+0x70>)
 8012dfa:	429c      	cmp	r4, r3
 8012dfc:	d101      	bne.n	8012e02 <_fflush_r+0x62>
 8012dfe:	68ac      	ldr	r4, [r5, #8]
 8012e00:	e7df      	b.n	8012dc2 <_fflush_r+0x22>
 8012e02:	4b04      	ldr	r3, [pc, #16]	; (8012e14 <_fflush_r+0x74>)
 8012e04:	429c      	cmp	r4, r3
 8012e06:	bf08      	it	eq
 8012e08:	68ec      	ldreq	r4, [r5, #12]
 8012e0a:	e7da      	b.n	8012dc2 <_fflush_r+0x22>
 8012e0c:	08013f2c 	.word	0x08013f2c
 8012e10:	08013f4c 	.word	0x08013f4c
 8012e14:	08013f0c 	.word	0x08013f0c

08012e18 <std>:
 8012e18:	2300      	movs	r3, #0
 8012e1a:	b510      	push	{r4, lr}
 8012e1c:	4604      	mov	r4, r0
 8012e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8012e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e26:	6083      	str	r3, [r0, #8]
 8012e28:	8181      	strh	r1, [r0, #12]
 8012e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8012e2c:	81c2      	strh	r2, [r0, #14]
 8012e2e:	6183      	str	r3, [r0, #24]
 8012e30:	4619      	mov	r1, r3
 8012e32:	2208      	movs	r2, #8
 8012e34:	305c      	adds	r0, #92	; 0x5c
 8012e36:	f7fd fb95 	bl	8010564 <memset>
 8012e3a:	4b05      	ldr	r3, [pc, #20]	; (8012e50 <std+0x38>)
 8012e3c:	6263      	str	r3, [r4, #36]	; 0x24
 8012e3e:	4b05      	ldr	r3, [pc, #20]	; (8012e54 <std+0x3c>)
 8012e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e42:	4b05      	ldr	r3, [pc, #20]	; (8012e58 <std+0x40>)
 8012e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e46:	4b05      	ldr	r3, [pc, #20]	; (8012e5c <std+0x44>)
 8012e48:	6224      	str	r4, [r4, #32]
 8012e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8012e4c:	bd10      	pop	{r4, pc}
 8012e4e:	bf00      	nop
 8012e50:	08013165 	.word	0x08013165
 8012e54:	08013187 	.word	0x08013187
 8012e58:	080131bf 	.word	0x080131bf
 8012e5c:	080131e3 	.word	0x080131e3

08012e60 <_cleanup_r>:
 8012e60:	4901      	ldr	r1, [pc, #4]	; (8012e68 <_cleanup_r+0x8>)
 8012e62:	f000 b8af 	b.w	8012fc4 <_fwalk_reent>
 8012e66:	bf00      	nop
 8012e68:	08012da1 	.word	0x08012da1

08012e6c <__sfmoreglue>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	1e4a      	subs	r2, r1, #1
 8012e70:	2568      	movs	r5, #104	; 0x68
 8012e72:	4355      	muls	r5, r2
 8012e74:	460e      	mov	r6, r1
 8012e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012e7a:	f7fd fbcb 	bl	8010614 <_malloc_r>
 8012e7e:	4604      	mov	r4, r0
 8012e80:	b140      	cbz	r0, 8012e94 <__sfmoreglue+0x28>
 8012e82:	2100      	movs	r1, #0
 8012e84:	e9c0 1600 	strd	r1, r6, [r0]
 8012e88:	300c      	adds	r0, #12
 8012e8a:	60a0      	str	r0, [r4, #8]
 8012e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012e90:	f7fd fb68 	bl	8010564 <memset>
 8012e94:	4620      	mov	r0, r4
 8012e96:	bd70      	pop	{r4, r5, r6, pc}

08012e98 <__sfp_lock_acquire>:
 8012e98:	4801      	ldr	r0, [pc, #4]	; (8012ea0 <__sfp_lock_acquire+0x8>)
 8012e9a:	f7ff bc78 	b.w	801278e <__retarget_lock_acquire_recursive>
 8012e9e:	bf00      	nop
 8012ea0:	200015b8 	.word	0x200015b8

08012ea4 <__sfp_lock_release>:
 8012ea4:	4801      	ldr	r0, [pc, #4]	; (8012eac <__sfp_lock_release+0x8>)
 8012ea6:	f7ff bc73 	b.w	8012790 <__retarget_lock_release_recursive>
 8012eaa:	bf00      	nop
 8012eac:	200015b8 	.word	0x200015b8

08012eb0 <__sinit_lock_acquire>:
 8012eb0:	4801      	ldr	r0, [pc, #4]	; (8012eb8 <__sinit_lock_acquire+0x8>)
 8012eb2:	f7ff bc6c 	b.w	801278e <__retarget_lock_acquire_recursive>
 8012eb6:	bf00      	nop
 8012eb8:	200015b3 	.word	0x200015b3

08012ebc <__sinit_lock_release>:
 8012ebc:	4801      	ldr	r0, [pc, #4]	; (8012ec4 <__sinit_lock_release+0x8>)
 8012ebe:	f7ff bc67 	b.w	8012790 <__retarget_lock_release_recursive>
 8012ec2:	bf00      	nop
 8012ec4:	200015b3 	.word	0x200015b3

08012ec8 <__sinit>:
 8012ec8:	b510      	push	{r4, lr}
 8012eca:	4604      	mov	r4, r0
 8012ecc:	f7ff fff0 	bl	8012eb0 <__sinit_lock_acquire>
 8012ed0:	69a3      	ldr	r3, [r4, #24]
 8012ed2:	b11b      	cbz	r3, 8012edc <__sinit+0x14>
 8012ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ed8:	f7ff bff0 	b.w	8012ebc <__sinit_lock_release>
 8012edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8012ee2:	4b13      	ldr	r3, [pc, #76]	; (8012f30 <__sinit+0x68>)
 8012ee4:	4a13      	ldr	r2, [pc, #76]	; (8012f34 <__sinit+0x6c>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	62a2      	str	r2, [r4, #40]	; 0x28
 8012eea:	42a3      	cmp	r3, r4
 8012eec:	bf04      	itt	eq
 8012eee:	2301      	moveq	r3, #1
 8012ef0:	61a3      	streq	r3, [r4, #24]
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	f000 f820 	bl	8012f38 <__sfp>
 8012ef8:	6060      	str	r0, [r4, #4]
 8012efa:	4620      	mov	r0, r4
 8012efc:	f000 f81c 	bl	8012f38 <__sfp>
 8012f00:	60a0      	str	r0, [r4, #8]
 8012f02:	4620      	mov	r0, r4
 8012f04:	f000 f818 	bl	8012f38 <__sfp>
 8012f08:	2200      	movs	r2, #0
 8012f0a:	60e0      	str	r0, [r4, #12]
 8012f0c:	2104      	movs	r1, #4
 8012f0e:	6860      	ldr	r0, [r4, #4]
 8012f10:	f7ff ff82 	bl	8012e18 <std>
 8012f14:	68a0      	ldr	r0, [r4, #8]
 8012f16:	2201      	movs	r2, #1
 8012f18:	2109      	movs	r1, #9
 8012f1a:	f7ff ff7d 	bl	8012e18 <std>
 8012f1e:	68e0      	ldr	r0, [r4, #12]
 8012f20:	2202      	movs	r2, #2
 8012f22:	2112      	movs	r1, #18
 8012f24:	f7ff ff78 	bl	8012e18 <std>
 8012f28:	2301      	movs	r3, #1
 8012f2a:	61a3      	str	r3, [r4, #24]
 8012f2c:	e7d2      	b.n	8012ed4 <__sinit+0xc>
 8012f2e:	bf00      	nop
 8012f30:	08013c88 	.word	0x08013c88
 8012f34:	08012e61 	.word	0x08012e61

08012f38 <__sfp>:
 8012f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f3a:	4607      	mov	r7, r0
 8012f3c:	f7ff ffac 	bl	8012e98 <__sfp_lock_acquire>
 8012f40:	4b1e      	ldr	r3, [pc, #120]	; (8012fbc <__sfp+0x84>)
 8012f42:	681e      	ldr	r6, [r3, #0]
 8012f44:	69b3      	ldr	r3, [r6, #24]
 8012f46:	b913      	cbnz	r3, 8012f4e <__sfp+0x16>
 8012f48:	4630      	mov	r0, r6
 8012f4a:	f7ff ffbd 	bl	8012ec8 <__sinit>
 8012f4e:	3648      	adds	r6, #72	; 0x48
 8012f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f54:	3b01      	subs	r3, #1
 8012f56:	d503      	bpl.n	8012f60 <__sfp+0x28>
 8012f58:	6833      	ldr	r3, [r6, #0]
 8012f5a:	b30b      	cbz	r3, 8012fa0 <__sfp+0x68>
 8012f5c:	6836      	ldr	r6, [r6, #0]
 8012f5e:	e7f7      	b.n	8012f50 <__sfp+0x18>
 8012f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012f64:	b9d5      	cbnz	r5, 8012f9c <__sfp+0x64>
 8012f66:	4b16      	ldr	r3, [pc, #88]	; (8012fc0 <__sfp+0x88>)
 8012f68:	60e3      	str	r3, [r4, #12]
 8012f6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012f6e:	6665      	str	r5, [r4, #100]	; 0x64
 8012f70:	f7ff fc0c 	bl	801278c <__retarget_lock_init_recursive>
 8012f74:	f7ff ff96 	bl	8012ea4 <__sfp_lock_release>
 8012f78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012f7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012f80:	6025      	str	r5, [r4, #0]
 8012f82:	61a5      	str	r5, [r4, #24]
 8012f84:	2208      	movs	r2, #8
 8012f86:	4629      	mov	r1, r5
 8012f88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012f8c:	f7fd faea 	bl	8010564 <memset>
 8012f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012f98:	4620      	mov	r0, r4
 8012f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f9c:	3468      	adds	r4, #104	; 0x68
 8012f9e:	e7d9      	b.n	8012f54 <__sfp+0x1c>
 8012fa0:	2104      	movs	r1, #4
 8012fa2:	4638      	mov	r0, r7
 8012fa4:	f7ff ff62 	bl	8012e6c <__sfmoreglue>
 8012fa8:	4604      	mov	r4, r0
 8012faa:	6030      	str	r0, [r6, #0]
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d1d5      	bne.n	8012f5c <__sfp+0x24>
 8012fb0:	f7ff ff78 	bl	8012ea4 <__sfp_lock_release>
 8012fb4:	230c      	movs	r3, #12
 8012fb6:	603b      	str	r3, [r7, #0]
 8012fb8:	e7ee      	b.n	8012f98 <__sfp+0x60>
 8012fba:	bf00      	nop
 8012fbc:	08013c88 	.word	0x08013c88
 8012fc0:	ffff0001 	.word	0xffff0001

08012fc4 <_fwalk_reent>:
 8012fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fc8:	4606      	mov	r6, r0
 8012fca:	4688      	mov	r8, r1
 8012fcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012fd0:	2700      	movs	r7, #0
 8012fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8012fda:	d505      	bpl.n	8012fe8 <_fwalk_reent+0x24>
 8012fdc:	6824      	ldr	r4, [r4, #0]
 8012fde:	2c00      	cmp	r4, #0
 8012fe0:	d1f7      	bne.n	8012fd2 <_fwalk_reent+0xe>
 8012fe2:	4638      	mov	r0, r7
 8012fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fe8:	89ab      	ldrh	r3, [r5, #12]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d907      	bls.n	8012ffe <_fwalk_reent+0x3a>
 8012fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	d003      	beq.n	8012ffe <_fwalk_reent+0x3a>
 8012ff6:	4629      	mov	r1, r5
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	47c0      	blx	r8
 8012ffc:	4307      	orrs	r7, r0
 8012ffe:	3568      	adds	r5, #104	; 0x68
 8013000:	e7e9      	b.n	8012fd6 <_fwalk_reent+0x12>

08013002 <__swhatbuf_r>:
 8013002:	b570      	push	{r4, r5, r6, lr}
 8013004:	460e      	mov	r6, r1
 8013006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801300a:	2900      	cmp	r1, #0
 801300c:	b096      	sub	sp, #88	; 0x58
 801300e:	4614      	mov	r4, r2
 8013010:	461d      	mov	r5, r3
 8013012:	da07      	bge.n	8013024 <__swhatbuf_r+0x22>
 8013014:	2300      	movs	r3, #0
 8013016:	602b      	str	r3, [r5, #0]
 8013018:	89b3      	ldrh	r3, [r6, #12]
 801301a:	061a      	lsls	r2, r3, #24
 801301c:	d410      	bmi.n	8013040 <__swhatbuf_r+0x3e>
 801301e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013022:	e00e      	b.n	8013042 <__swhatbuf_r+0x40>
 8013024:	466a      	mov	r2, sp
 8013026:	f000 f903 	bl	8013230 <_fstat_r>
 801302a:	2800      	cmp	r0, #0
 801302c:	dbf2      	blt.n	8013014 <__swhatbuf_r+0x12>
 801302e:	9a01      	ldr	r2, [sp, #4]
 8013030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013038:	425a      	negs	r2, r3
 801303a:	415a      	adcs	r2, r3
 801303c:	602a      	str	r2, [r5, #0]
 801303e:	e7ee      	b.n	801301e <__swhatbuf_r+0x1c>
 8013040:	2340      	movs	r3, #64	; 0x40
 8013042:	2000      	movs	r0, #0
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	b016      	add	sp, #88	; 0x58
 8013048:	bd70      	pop	{r4, r5, r6, pc}
	...

0801304c <__smakebuf_r>:
 801304c:	898b      	ldrh	r3, [r1, #12]
 801304e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013050:	079d      	lsls	r5, r3, #30
 8013052:	4606      	mov	r6, r0
 8013054:	460c      	mov	r4, r1
 8013056:	d507      	bpl.n	8013068 <__smakebuf_r+0x1c>
 8013058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	6123      	str	r3, [r4, #16]
 8013060:	2301      	movs	r3, #1
 8013062:	6163      	str	r3, [r4, #20]
 8013064:	b002      	add	sp, #8
 8013066:	bd70      	pop	{r4, r5, r6, pc}
 8013068:	ab01      	add	r3, sp, #4
 801306a:	466a      	mov	r2, sp
 801306c:	f7ff ffc9 	bl	8013002 <__swhatbuf_r>
 8013070:	9900      	ldr	r1, [sp, #0]
 8013072:	4605      	mov	r5, r0
 8013074:	4630      	mov	r0, r6
 8013076:	f7fd facd 	bl	8010614 <_malloc_r>
 801307a:	b948      	cbnz	r0, 8013090 <__smakebuf_r+0x44>
 801307c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013080:	059a      	lsls	r2, r3, #22
 8013082:	d4ef      	bmi.n	8013064 <__smakebuf_r+0x18>
 8013084:	f023 0303 	bic.w	r3, r3, #3
 8013088:	f043 0302 	orr.w	r3, r3, #2
 801308c:	81a3      	strh	r3, [r4, #12]
 801308e:	e7e3      	b.n	8013058 <__smakebuf_r+0xc>
 8013090:	4b0d      	ldr	r3, [pc, #52]	; (80130c8 <__smakebuf_r+0x7c>)
 8013092:	62b3      	str	r3, [r6, #40]	; 0x28
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	6020      	str	r0, [r4, #0]
 8013098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801309c:	81a3      	strh	r3, [r4, #12]
 801309e:	9b00      	ldr	r3, [sp, #0]
 80130a0:	6163      	str	r3, [r4, #20]
 80130a2:	9b01      	ldr	r3, [sp, #4]
 80130a4:	6120      	str	r0, [r4, #16]
 80130a6:	b15b      	cbz	r3, 80130c0 <__smakebuf_r+0x74>
 80130a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130ac:	4630      	mov	r0, r6
 80130ae:	f000 f8d1 	bl	8013254 <_isatty_r>
 80130b2:	b128      	cbz	r0, 80130c0 <__smakebuf_r+0x74>
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	f023 0303 	bic.w	r3, r3, #3
 80130ba:	f043 0301 	orr.w	r3, r3, #1
 80130be:	81a3      	strh	r3, [r4, #12]
 80130c0:	89a0      	ldrh	r0, [r4, #12]
 80130c2:	4305      	orrs	r5, r0
 80130c4:	81a5      	strh	r5, [r4, #12]
 80130c6:	e7cd      	b.n	8013064 <__smakebuf_r+0x18>
 80130c8:	08012e61 	.word	0x08012e61

080130cc <_malloc_usable_size_r>:
 80130cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130d0:	1f18      	subs	r0, r3, #4
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	bfbc      	itt	lt
 80130d6:	580b      	ldrlt	r3, [r1, r0]
 80130d8:	18c0      	addlt	r0, r0, r3
 80130da:	4770      	bx	lr

080130dc <_raise_r>:
 80130dc:	291f      	cmp	r1, #31
 80130de:	b538      	push	{r3, r4, r5, lr}
 80130e0:	4604      	mov	r4, r0
 80130e2:	460d      	mov	r5, r1
 80130e4:	d904      	bls.n	80130f0 <_raise_r+0x14>
 80130e6:	2316      	movs	r3, #22
 80130e8:	6003      	str	r3, [r0, #0]
 80130ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130ee:	bd38      	pop	{r3, r4, r5, pc}
 80130f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80130f2:	b112      	cbz	r2, 80130fa <_raise_r+0x1e>
 80130f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80130f8:	b94b      	cbnz	r3, 801310e <_raise_r+0x32>
 80130fa:	4620      	mov	r0, r4
 80130fc:	f000 f830 	bl	8013160 <_getpid_r>
 8013100:	462a      	mov	r2, r5
 8013102:	4601      	mov	r1, r0
 8013104:	4620      	mov	r0, r4
 8013106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801310a:	f000 b817 	b.w	801313c <_kill_r>
 801310e:	2b01      	cmp	r3, #1
 8013110:	d00a      	beq.n	8013128 <_raise_r+0x4c>
 8013112:	1c59      	adds	r1, r3, #1
 8013114:	d103      	bne.n	801311e <_raise_r+0x42>
 8013116:	2316      	movs	r3, #22
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	2001      	movs	r0, #1
 801311c:	e7e7      	b.n	80130ee <_raise_r+0x12>
 801311e:	2400      	movs	r4, #0
 8013120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013124:	4628      	mov	r0, r5
 8013126:	4798      	blx	r3
 8013128:	2000      	movs	r0, #0
 801312a:	e7e0      	b.n	80130ee <_raise_r+0x12>

0801312c <raise>:
 801312c:	4b02      	ldr	r3, [pc, #8]	; (8013138 <raise+0xc>)
 801312e:	4601      	mov	r1, r0
 8013130:	6818      	ldr	r0, [r3, #0]
 8013132:	f7ff bfd3 	b.w	80130dc <_raise_r>
 8013136:	bf00      	nop
 8013138:	20000104 	.word	0x20000104

0801313c <_kill_r>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	4d07      	ldr	r5, [pc, #28]	; (801315c <_kill_r+0x20>)
 8013140:	2300      	movs	r3, #0
 8013142:	4604      	mov	r4, r0
 8013144:	4608      	mov	r0, r1
 8013146:	4611      	mov	r1, r2
 8013148:	602b      	str	r3, [r5, #0]
 801314a:	f7f0 ff93 	bl	8004074 <_kill>
 801314e:	1c43      	adds	r3, r0, #1
 8013150:	d102      	bne.n	8013158 <_kill_r+0x1c>
 8013152:	682b      	ldr	r3, [r5, #0]
 8013154:	b103      	cbz	r3, 8013158 <_kill_r+0x1c>
 8013156:	6023      	str	r3, [r4, #0]
 8013158:	bd38      	pop	{r3, r4, r5, pc}
 801315a:	bf00      	nop
 801315c:	200015ac 	.word	0x200015ac

08013160 <_getpid_r>:
 8013160:	f7f0 bf80 	b.w	8004064 <_getpid>

08013164 <__sread>:
 8013164:	b510      	push	{r4, lr}
 8013166:	460c      	mov	r4, r1
 8013168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801316c:	f000 f894 	bl	8013298 <_read_r>
 8013170:	2800      	cmp	r0, #0
 8013172:	bfab      	itete	ge
 8013174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013176:	89a3      	ldrhlt	r3, [r4, #12]
 8013178:	181b      	addge	r3, r3, r0
 801317a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801317e:	bfac      	ite	ge
 8013180:	6563      	strge	r3, [r4, #84]	; 0x54
 8013182:	81a3      	strhlt	r3, [r4, #12]
 8013184:	bd10      	pop	{r4, pc}

08013186 <__swrite>:
 8013186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801318a:	461f      	mov	r7, r3
 801318c:	898b      	ldrh	r3, [r1, #12]
 801318e:	05db      	lsls	r3, r3, #23
 8013190:	4605      	mov	r5, r0
 8013192:	460c      	mov	r4, r1
 8013194:	4616      	mov	r6, r2
 8013196:	d505      	bpl.n	80131a4 <__swrite+0x1e>
 8013198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801319c:	2302      	movs	r3, #2
 801319e:	2200      	movs	r2, #0
 80131a0:	f000 f868 	bl	8013274 <_lseek_r>
 80131a4:	89a3      	ldrh	r3, [r4, #12]
 80131a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80131aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80131ae:	81a3      	strh	r3, [r4, #12]
 80131b0:	4632      	mov	r2, r6
 80131b2:	463b      	mov	r3, r7
 80131b4:	4628      	mov	r0, r5
 80131b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131ba:	f000 b817 	b.w	80131ec <_write_r>

080131be <__sseek>:
 80131be:	b510      	push	{r4, lr}
 80131c0:	460c      	mov	r4, r1
 80131c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131c6:	f000 f855 	bl	8013274 <_lseek_r>
 80131ca:	1c43      	adds	r3, r0, #1
 80131cc:	89a3      	ldrh	r3, [r4, #12]
 80131ce:	bf15      	itete	ne
 80131d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80131d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80131d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80131da:	81a3      	strheq	r3, [r4, #12]
 80131dc:	bf18      	it	ne
 80131de:	81a3      	strhne	r3, [r4, #12]
 80131e0:	bd10      	pop	{r4, pc}

080131e2 <__sclose>:
 80131e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131e6:	f000 b813 	b.w	8013210 <_close_r>
	...

080131ec <_write_r>:
 80131ec:	b538      	push	{r3, r4, r5, lr}
 80131ee:	4d07      	ldr	r5, [pc, #28]	; (801320c <_write_r+0x20>)
 80131f0:	4604      	mov	r4, r0
 80131f2:	4608      	mov	r0, r1
 80131f4:	4611      	mov	r1, r2
 80131f6:	2200      	movs	r2, #0
 80131f8:	602a      	str	r2, [r5, #0]
 80131fa:	461a      	mov	r2, r3
 80131fc:	f7f0 ff71 	bl	80040e2 <_write>
 8013200:	1c43      	adds	r3, r0, #1
 8013202:	d102      	bne.n	801320a <_write_r+0x1e>
 8013204:	682b      	ldr	r3, [r5, #0]
 8013206:	b103      	cbz	r3, 801320a <_write_r+0x1e>
 8013208:	6023      	str	r3, [r4, #0]
 801320a:	bd38      	pop	{r3, r4, r5, pc}
 801320c:	200015ac 	.word	0x200015ac

08013210 <_close_r>:
 8013210:	b538      	push	{r3, r4, r5, lr}
 8013212:	4d06      	ldr	r5, [pc, #24]	; (801322c <_close_r+0x1c>)
 8013214:	2300      	movs	r3, #0
 8013216:	4604      	mov	r4, r0
 8013218:	4608      	mov	r0, r1
 801321a:	602b      	str	r3, [r5, #0]
 801321c:	f7f0 ff7d 	bl	800411a <_close>
 8013220:	1c43      	adds	r3, r0, #1
 8013222:	d102      	bne.n	801322a <_close_r+0x1a>
 8013224:	682b      	ldr	r3, [r5, #0]
 8013226:	b103      	cbz	r3, 801322a <_close_r+0x1a>
 8013228:	6023      	str	r3, [r4, #0]
 801322a:	bd38      	pop	{r3, r4, r5, pc}
 801322c:	200015ac 	.word	0x200015ac

08013230 <_fstat_r>:
 8013230:	b538      	push	{r3, r4, r5, lr}
 8013232:	4d07      	ldr	r5, [pc, #28]	; (8013250 <_fstat_r+0x20>)
 8013234:	2300      	movs	r3, #0
 8013236:	4604      	mov	r4, r0
 8013238:	4608      	mov	r0, r1
 801323a:	4611      	mov	r1, r2
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	f7f0 ff78 	bl	8004132 <_fstat>
 8013242:	1c43      	adds	r3, r0, #1
 8013244:	d102      	bne.n	801324c <_fstat_r+0x1c>
 8013246:	682b      	ldr	r3, [r5, #0]
 8013248:	b103      	cbz	r3, 801324c <_fstat_r+0x1c>
 801324a:	6023      	str	r3, [r4, #0]
 801324c:	bd38      	pop	{r3, r4, r5, pc}
 801324e:	bf00      	nop
 8013250:	200015ac 	.word	0x200015ac

08013254 <_isatty_r>:
 8013254:	b538      	push	{r3, r4, r5, lr}
 8013256:	4d06      	ldr	r5, [pc, #24]	; (8013270 <_isatty_r+0x1c>)
 8013258:	2300      	movs	r3, #0
 801325a:	4604      	mov	r4, r0
 801325c:	4608      	mov	r0, r1
 801325e:	602b      	str	r3, [r5, #0]
 8013260:	f7f0 ff77 	bl	8004152 <_isatty>
 8013264:	1c43      	adds	r3, r0, #1
 8013266:	d102      	bne.n	801326e <_isatty_r+0x1a>
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	b103      	cbz	r3, 801326e <_isatty_r+0x1a>
 801326c:	6023      	str	r3, [r4, #0]
 801326e:	bd38      	pop	{r3, r4, r5, pc}
 8013270:	200015ac 	.word	0x200015ac

08013274 <_lseek_r>:
 8013274:	b538      	push	{r3, r4, r5, lr}
 8013276:	4d07      	ldr	r5, [pc, #28]	; (8013294 <_lseek_r+0x20>)
 8013278:	4604      	mov	r4, r0
 801327a:	4608      	mov	r0, r1
 801327c:	4611      	mov	r1, r2
 801327e:	2200      	movs	r2, #0
 8013280:	602a      	str	r2, [r5, #0]
 8013282:	461a      	mov	r2, r3
 8013284:	f7f0 ff70 	bl	8004168 <_lseek>
 8013288:	1c43      	adds	r3, r0, #1
 801328a:	d102      	bne.n	8013292 <_lseek_r+0x1e>
 801328c:	682b      	ldr	r3, [r5, #0]
 801328e:	b103      	cbz	r3, 8013292 <_lseek_r+0x1e>
 8013290:	6023      	str	r3, [r4, #0]
 8013292:	bd38      	pop	{r3, r4, r5, pc}
 8013294:	200015ac 	.word	0x200015ac

08013298 <_read_r>:
 8013298:	b538      	push	{r3, r4, r5, lr}
 801329a:	4d07      	ldr	r5, [pc, #28]	; (80132b8 <_read_r+0x20>)
 801329c:	4604      	mov	r4, r0
 801329e:	4608      	mov	r0, r1
 80132a0:	4611      	mov	r1, r2
 80132a2:	2200      	movs	r2, #0
 80132a4:	602a      	str	r2, [r5, #0]
 80132a6:	461a      	mov	r2, r3
 80132a8:	f7f0 fefe 	bl	80040a8 <_read>
 80132ac:	1c43      	adds	r3, r0, #1
 80132ae:	d102      	bne.n	80132b6 <_read_r+0x1e>
 80132b0:	682b      	ldr	r3, [r5, #0]
 80132b2:	b103      	cbz	r3, 80132b6 <_read_r+0x1e>
 80132b4:	6023      	str	r3, [r4, #0]
 80132b6:	bd38      	pop	{r3, r4, r5, pc}
 80132b8:	200015ac 	.word	0x200015ac

080132bc <_init>:
 80132bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132be:	bf00      	nop
 80132c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132c2:	bc08      	pop	{r3}
 80132c4:	469e      	mov	lr, r3
 80132c6:	4770      	bx	lr

080132c8 <_fini>:
 80132c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ca:	bf00      	nop
 80132cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ce:	bc08      	pop	{r3}
 80132d0:	469e      	mov	lr, r3
 80132d2:	4770      	bx	lr
