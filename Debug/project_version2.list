
project_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  08013798  08013798  00023798  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801444c  0801444c  000302d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801444c  0801444c  0002444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014454  08014454  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014454  08014454  00024454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014458  08014458  00024458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0801445c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001360  200002d8  08014730  000302d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001638  08014730  00031638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a93b  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ff9  00000000  00000000  0005ac3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00060c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b78  00000000  00000000  00062a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df28  00000000  00000000  000645a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a5e  00000000  00000000  000824d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab0f  00000000  00000000  000a9f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ccc  00000000  00000000  00154a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801377c 	.word	0x0801377c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0801377c 	.word	0x0801377c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000f5e:	f002 ff7d 	bl	8003e5c <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 ffbd 	bl	8003ef0 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000f80:	f107 030f 	add.w	r3, r7, #15
 8000f84:	2201      	movs	r2, #1
 8000f86:	2123      	movs	r1, #35	; 0x23
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 ffb1 	bl	8003ef0 <GYRO_IO_Write>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000faa:	f002 ff57 	bl	8003e5c <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 ffcd 	bl	8003f54 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2124      	movs	r1, #36	; 0x24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 ffbf 	bl	8003f54 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2124      	movs	r1, #36	; 0x24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 ff82 	bl	8003ef0 <GYRO_IO_Write>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8001008:	f107 030f 	add.w	r3, r7, #15
 800100c:	2201      	movs	r2, #1
 800100e:	2120      	movs	r1, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f002 ff6d 	bl	8003ef0 <GYRO_IO_Write>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	2300      	movs	r3, #0
 800102e:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001030:	f107 030f 	add.w	r3, r7, #15
 8001034:	2201      	movs	r2, #1
 8001036:	2130      	movs	r1, #48	; 0x30
 8001038:	4618      	mov	r0, r3
 800103a:	f002 ff8b 	bl	8003f54 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800103e:	f107 030e 	add.w	r3, r7, #14
 8001042:	2201      	movs	r2, #1
 8001044:	2122      	movs	r1, #34	; 0x22
 8001046:	4618      	mov	r0, r3
 8001048:	f002 ff84 	bl	8003f54 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	121b      	asrs	r3, r3, #8
 800105c:	b25a      	sxtb	r2, r3
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f023 0320 	bic.w	r3, r3, #32
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	4313      	orrs	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f002 ff31 	bl	8003ef0 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	2201      	movs	r2, #1
 8001094:	2122      	movs	r1, #34	; 0x22
 8001096:	4618      	mov	r0, r3
 8001098:	f002 ff2a 	bl	8003ef0 <GYRO_IO_Write>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80010ae:	f107 030f 	add.w	r3, r7, #15
 80010b2:	2201      	movs	r2, #1
 80010b4:	2122      	movs	r1, #34	; 0x22
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 ff4c 	bl	8003f54 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e00c      	b.n	80010f2 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d109      	bne.n	80010f2 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	f023 0308 	bic.w	r3, r3, #8
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80010f2:	f107 030f 	add.w	r3, r7, #15
 80010f6:	2201      	movs	r2, #1
 80010f8:	2122      	movs	r1, #34	; 0x22
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fef8 	bl	8003ef0 <GYRO_IO_Write>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001112:	f107 030f 	add.w	r3, r7, #15
 8001116:	2201      	movs	r2, #1
 8001118:	2122      	movs	r1, #34	; 0x22
 800111a:	4618      	mov	r0, r3
 800111c:	f002 ff1a 	bl	8003f54 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e009      	b.n	800114a <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f023 0308 	bic.w	r3, r3, #8
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800114a:	f107 030f 	add.w	r3, r7, #15
 800114e:	2201      	movs	r2, #1
 8001150:	2122      	movs	r1, #34	; 0x22
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fecc 	bl	8003ef0 <GYRO_IO_Write>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800116a:	f107 030f 	add.w	r3, r7, #15
 800116e:	2201      	movs	r2, #1
 8001170:	2121      	movs	r1, #33	; 0x21
 8001172:	4618      	mov	r0, r3
 8001174:	f002 feee 	bl	8003f54 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4313      	orrs	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	2121      	movs	r1, #33	; 0x21
 8001194:	4618      	mov	r0, r3
 8001196:	f002 feab 	bl	8003ef0 <GYRO_IO_Write>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80011ac:	f107 030f 	add.w	r3, r7, #15
 80011b0:	2201      	movs	r2, #1
 80011b2:	2124      	movs	r1, #36	; 0x24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fecd 	bl	8003f54 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f023 0310 	bic.w	r3, r3, #16
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80011ce:	f107 030f 	add.w	r3, r7, #15
 80011d2:	2201      	movs	r2, #1
 80011d4:	2124      	movs	r1, #36	; 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fe8a 	bl	8003ef0 <GYRO_IO_Write>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	2300      	movs	r3, #0
 80011f2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800120c:	f107 030f 	add.w	r3, r7, #15
 8001210:	2201      	movs	r2, #1
 8001212:	2123      	movs	r1, #35	; 0x23
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fe9d 	bl	8003f54 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	2206      	movs	r2, #6
 8001220:	2128      	movs	r1, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fe96 	bl	8003f54 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d126      	bne.n	8001280 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	e01f      	b.n	8001278 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	3301      	adds	r3, #1
 800123e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001242:	4413      	add	r3, r2
 8001244:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001248:	b29b      	uxth	r3, r3
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b29a      	uxth	r2, r3
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001256:	440b      	add	r3, r1
 8001258:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	b21a      	sxth	r2, r3
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800126c:	440b      	add	r3, r1
 800126e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	3301      	adds	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2b02      	cmp	r3, #2
 800127c:	dddc      	ble.n	8001238 <I3G4250D_ReadXYZAngRate+0x54>
 800127e:	e025      	b.n	80012cc <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	e01f      	b.n	80012c6 <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800128e:	4413      	add	r3, r2
 8001290:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001294:	b29b      	uxth	r3, r3
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b29a      	uxth	r2, r3
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3301      	adds	r3, #1
 80012a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a4:	440b      	add	r3, r1
 80012a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012ba:	440b      	add	r3, r1
 80012bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3301      	adds	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	dddc      	ble.n	8001286 <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d00c      	beq.n	80012f0 <I3G4250D_ReadXYZAngRate+0x10c>
 80012d6:	2b20      	cmp	r3, #32
 80012d8:	dc0d      	bgt.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <I3G4250D_ReadXYZAngRate+0x100>
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d003      	beq.n	80012ea <I3G4250D_ReadXYZAngRate+0x106>
 80012e2:	e008      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <I3G4250D_ReadXYZAngRate+0x158>)
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012e8:	e005      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <I3G4250D_ReadXYZAngRate+0x15c>)
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012ee:	e002      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <I3G4250D_ReadXYZAngRate+0x160>)
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012f4:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	e017      	b.n	800132c <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001304:	4413      	add	r3, r2
 8001306:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	3301      	adds	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b02      	cmp	r3, #2
 8001330:	dde4      	ble.n	80012fc <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	410c0000 	.word	0x410c0000
 8001340:	418c0000 	.word	0x418c0000
 8001344:	428c0000 	.word	0x428c0000

08001348 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001356:	f002 fd81 	bl	8003e5c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001360:	f107 030f 	add.w	r3, r7, #15
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fdc1 	bl	8003ef0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b29b      	uxth	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001378:	f107 030f 	add.w	r3, r7, #15
 800137c:	2201      	movs	r2, #1
 800137e:	2123      	movs	r1, #35	; 0x23
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fdb5 	bl	8003ef0 <GYRO_IO_Write>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80013a2:	f002 fd5b 	bl	8003e5c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2201      	movs	r2, #1
 80013aa:	210f      	movs	r1, #15
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fdd1 	bl	8003f54 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	2201      	movs	r2, #1
 80013c6:	2124      	movs	r1, #36	; 0x24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fdc3 	bl	8003f54 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	2201      	movs	r2, #1
 80013dc:	2124      	movs	r1, #36	; 0x24
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fd86 	bl	8003ef0 <GYRO_IO_Write>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	2201      	movs	r2, #1
 8001406:	2120      	movs	r1, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fd71 	bl	8003ef0 <GYRO_IO_Write>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	2300      	movs	r3, #0
 8001426:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001428:	f107 030f 	add.w	r3, r7, #15
 800142c:	2201      	movs	r2, #1
 800142e:	2130      	movs	r1, #48	; 0x30
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fd8f 	bl	8003f54 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001436:	f107 030e 	add.w	r3, r7, #14
 800143a:	2201      	movs	r2, #1
 800143c:	2122      	movs	r1, #34	; 0x22
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fd88 	bl	8003f54 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	121b      	asrs	r3, r3, #8
 8001454:	b25a      	sxtb	r2, r3
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	f023 0320 	bic.w	r3, r3, #32
 8001468:	b2db      	uxtb	r3, r3
 800146a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4313      	orrs	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001478:	f107 030f 	add.w	r3, r7, #15
 800147c:	2201      	movs	r2, #1
 800147e:	2130      	movs	r1, #48	; 0x30
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fd35 	bl	8003ef0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001486:	f107 030e 	add.w	r3, r7, #14
 800148a:	2201      	movs	r2, #1
 800148c:	2122      	movs	r1, #34	; 0x22
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fd2e 	bl	8003ef0 <GYRO_IO_Write>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80014a6:	f107 030f 	add.w	r3, r7, #15
 80014aa:	2201      	movs	r2, #1
 80014ac:	2122      	movs	r1, #34	; 0x22
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fd50 	bl	8003f54 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e00c      	b.n	80014ea <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d109      	bne.n	80014ea <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	f023 0308 	bic.w	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80014ea:	f107 030f 	add.w	r3, r7, #15
 80014ee:	2201      	movs	r2, #1
 80014f0:	2122      	movs	r1, #34	; 0x22
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fcfc 	bl	8003ef0 <GYRO_IO_Write>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800150a:	f107 030f 	add.w	r3, r7, #15
 800150e:	2201      	movs	r2, #1
 8001510:	2122      	movs	r1, #34	; 0x22
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fd1e 	bl	8003f54 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001524:	b2db      	uxtb	r3, r3
 8001526:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e009      	b.n	8001542 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f023 0308 	bic.w	r3, r3, #8
 800153a:	b2db      	uxtb	r3, r3
 800153c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001542:	f107 030f 	add.w	r3, r7, #15
 8001546:	2201      	movs	r2, #1
 8001548:	2122      	movs	r1, #34	; 0x22
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fcd0 	bl	8003ef0 <GYRO_IO_Write>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001562:	f107 030f 	add.w	r3, r7, #15
 8001566:	2201      	movs	r2, #1
 8001568:	2121      	movs	r1, #33	; 0x21
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fcf2 	bl	8003f54 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001584:	f107 030f 	add.w	r3, r7, #15
 8001588:	2201      	movs	r2, #1
 800158a:	2121      	movs	r1, #33	; 0x21
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fcaf 	bl	8003ef0 <GYRO_IO_Write>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80015a4:	f107 030f 	add.w	r3, r7, #15
 80015a8:	2201      	movs	r2, #1
 80015aa:	2124      	movs	r1, #36	; 0x24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fcd1 	bl	8003f54 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	f023 0310 	bic.w	r3, r3, #16
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80015c6:	f107 030f 	add.w	r3, r7, #15
 80015ca:	2201      	movs	r2, #1
 80015cc:	2124      	movs	r1, #36	; 0x24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fc8e 	bl	8003ef0 <GYRO_IO_Write>
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	2300      	movs	r3, #0
 80015ea:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001604:	f107 030f 	add.w	r3, r7, #15
 8001608:	2201      	movs	r2, #1
 800160a:	2123      	movs	r1, #35	; 0x23
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fca1 	bl	8003f54 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2206      	movs	r2, #6
 8001618:	2128      	movs	r1, #40	; 0x28
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fc9a 	bl	8003f54 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d126      	bne.n	8001678 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	e01f      	b.n	8001670 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	3301      	adds	r3, #1
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001640:	b29b      	uxth	r3, r3
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b29a      	uxth	r2, r3
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800164e:	440b      	add	r3, r1
 8001650:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	b21a      	sxth	r2, r3
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001664:	440b      	add	r3, r1
 8001666:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	2b02      	cmp	r3, #2
 8001674:	dddc      	ble.n	8001630 <L3GD20_ReadXYZAngRate+0x54>
 8001676:	e025      	b.n	80016c4 <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	e01f      	b.n	80016be <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001686:	4413      	add	r3, r2
 8001688:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800168c:	b29b      	uxth	r3, r3
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b29a      	uxth	r2, r3
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3301      	adds	r3, #1
 8001698:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800169c:	440b      	add	r3, r1
 800169e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016b2:	440b      	add	r3, r1
 80016b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	3301      	adds	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	dddc      	ble.n	800167e <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d00c      	beq.n	80016e8 <L3GD20_ReadXYZAngRate+0x10c>
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	dc0d      	bgt.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <L3GD20_ReadXYZAngRate+0x100>
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d003      	beq.n	80016e2 <L3GD20_ReadXYZAngRate+0x106>
 80016da:	e008      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <L3GD20_ReadXYZAngRate+0x158>)
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016e0:	e005      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <L3GD20_ReadXYZAngRate+0x15c>)
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016e6:	e002      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <L3GD20_ReadXYZAngRate+0x160>)
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016ec:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
 80016f2:	e017      	b.n	8001724 <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016fc:	4413      	add	r3, r2
 80016fe:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	3301      	adds	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b02      	cmp	r3, #2
 8001728:	dde4      	ble.n	80016f4 <L3GD20_ReadXYZAngRate+0x118>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	410c0000 	.word	0x410c0000
 8001738:	418c0000 	.word	0x418c0000
 800173c:	428c0000 	.word	0x428c0000

08001740 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800174e:	f002 fc3b 	bl	8003fc8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	461a      	mov	r2, r3
 800175a:	2120      	movs	r1, #32
 800175c:	2032      	movs	r0, #50	; 0x32
 800175e:	f002 fc8b 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	461a      	mov	r2, r3
 800176a:	2123      	movs	r1, #35	; 0x23
 800176c:	2032      	movs	r0, #50	; 0x32
 800176e:	f002 fc83 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001792:	f002 fc19 	bl	8003fc8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001796:	210f      	movs	r1, #15
 8001798:	2032      	movs	r0, #50	; 0x32
 800179a:	f002 fc80 	bl	800409e <COMPASSACCELERO_IO_Read>
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80017b2:	2124      	movs	r1, #36	; 0x24
 80017b4:	2032      	movs	r0, #50	; 0x32
 80017b6:	f002 fc72 	bl	800409e <COMPASSACCELERO_IO_Read>
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	461a      	mov	r2, r3
 80017ca:	2124      	movs	r1, #36	; 0x24
 80017cc:	2032      	movs	r0, #50	; 0x32
 80017ce:	f002 fc53 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80017e4:	2121      	movs	r1, #33	; 0x21
 80017e6:	2032      	movs	r0, #50	; 0x32
 80017e8:	f002 fc59 	bl	800409e <COMPASSACCELERO_IO_Read>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	461a      	mov	r2, r3
 8001804:	2121      	movs	r1, #33	; 0x21
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f002 fc36 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800181e:	2121      	movs	r1, #33	; 0x21
 8001820:	2032      	movs	r0, #50	; 0x32
 8001822:	f002 fc3c 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f023 0308 	bic.w	r3, r3, #8
 8001830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4313      	orrs	r3, r2
 8001838:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	461a      	mov	r2, r3
 800183e:	2121      	movs	r1, #33	; 0x21
 8001840:	2032      	movs	r0, #50	; 0x32
 8001842:	f002 fc19 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b088      	sub	sp, #32
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001856:	2300      	movs	r3, #0
 8001858:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800185e:	2301      	movs	r3, #1
 8001860:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001862:	2123      	movs	r1, #35	; 0x23
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f002 fc1a 	bl	800409e <COMPASSACCELERO_IO_Read>
 800186a:	4603      	mov	r3, r0
 800186c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800186e:	2124      	movs	r1, #36	; 0x24
 8001870:	2032      	movs	r0, #50	; 0x32
 8001872:	f002 fc14 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001876:	4603      	mov	r3, r0
 8001878:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800187a:	2128      	movs	r1, #40	; 0x28
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f002 fc0e 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001882:	4603      	mov	r3, r0
 8001884:	b25b      	sxtb	r3, r3
 8001886:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001888:	2129      	movs	r1, #41	; 0x29
 800188a:	2032      	movs	r0, #50	; 0x32
 800188c:	f002 fc07 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001890:	4603      	mov	r3, r0
 8001892:	b25b      	sxtb	r3, r3
 8001894:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001896:	212a      	movs	r1, #42	; 0x2a
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f002 fc00 	bl	800409e <COMPASSACCELERO_IO_Read>
 800189e:	4603      	mov	r3, r0
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80018a4:	212b      	movs	r1, #43	; 0x2b
 80018a6:	2032      	movs	r0, #50	; 0x32
 80018a8:	f002 fbf9 	bl	800409e <COMPASSACCELERO_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	2032      	movs	r0, #50	; 0x32
 80018b6:	f002 fbf2 	bl	800409e <COMPASSACCELERO_IO_Read>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 80018c0:	212d      	movs	r1, #45	; 0x2d
 80018c2:	2032      	movs	r0, #50	; 0x32
 80018c4:	f002 fbeb 	bl	800409e <COMPASSACCELERO_IO_Read>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 80018ce:	7d3b      	ldrb	r3, [r7, #20]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d126      	bne.n	8001926 <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
 80018dc:	e01f      	b.n	800191e <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	3301      	adds	r3, #1
 80018e4:	f107 0220 	add.w	r2, r7, #32
 80018e8:	4413      	add	r3, r2
 80018ea:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f107 0120 	add.w	r1, r7, #32
 80018fc:	440b      	add	r3, r1
 80018fe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b29a      	uxth	r2, r3
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	b212      	sxth	r2, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	f107 0120 	add.w	r1, r7, #32
 8001912:	440b      	add	r3, r1
 8001914:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	3301      	adds	r3, #1
 800191c:	77fb      	strb	r3, [r7, #31]
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d9dc      	bls.n	80018de <LSM303AGR_AccReadXYZ+0x90>
 8001924:	e025      	b.n	8001972 <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	77fb      	strb	r3, [r7, #31]
 800192a:	e01f      	b.n	800196c <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	f107 0220 	add.w	r2, r7, #32
 8001934:	4413      	add	r3, r2
 8001936:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800193a:	b29b      	uxth	r3, r3
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b29a      	uxth	r2, r3
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	3301      	adds	r3, #1
 8001946:	f107 0120 	add.w	r1, r7, #32
 800194a:	440b      	add	r3, r1
 800194c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29a      	uxth	r2, r3
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	b212      	sxth	r2, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	f107 0120 	add.w	r1, r7, #32
 8001960:	440b      	add	r3, r1
 8001962:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	3301      	adds	r3, #1
 800196a:	77fb      	strb	r3, [r7, #31]
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d9dc      	bls.n	800192c <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001972:	7d3b      	ldrb	r3, [r7, #20]
 8001974:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001978:	2b30      	cmp	r3, #48	; 0x30
 800197a:	d013      	beq.n	80019a4 <LSM303AGR_AccReadXYZ+0x156>
 800197c:	2b30      	cmp	r3, #48	; 0x30
 800197e:	dc14      	bgt.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
 8001980:	2b20      	cmp	r3, #32
 8001982:	d00c      	beq.n	800199e <LSM303AGR_AccReadXYZ+0x150>
 8001984:	2b20      	cmp	r3, #32
 8001986:	dc10      	bgt.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <LSM303AGR_AccReadXYZ+0x144>
 800198c:	2b10      	cmp	r3, #16
 800198e:	d003      	beq.n	8001998 <LSM303AGR_AccReadXYZ+0x14a>
 8001990:	e00b      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001992:	2301      	movs	r3, #1
 8001994:	77bb      	strb	r3, [r7, #30]
    break;
 8001996:	e008      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001998:	2302      	movs	r3, #2
 800199a:	77bb      	strb	r3, [r7, #30]
    break;
 800199c:	e005      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800199e:	2304      	movs	r3, #4
 80019a0:	77bb      	strb	r3, [r7, #30]
    break;
 80019a2:	e002      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80019a4:	230c      	movs	r3, #12
 80019a6:	77bb      	strb	r3, [r7, #30]
    break;
 80019a8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	e015      	b.n	80019dc <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	f107 0220 	add.w	r2, r7, #32
 80019b8:	4413      	add	r3, r2
 80019ba:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	7fbb      	ldrb	r3, [r7, #30]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	fb12 f303 	smulbb	r3, r2, r3
 80019c8:	b299      	uxth	r1, r3
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	b20a      	sxth	r2, r1
 80019d4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	3301      	adds	r3, #1
 80019da:	77fb      	strb	r3, [r7, #31]
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d9e6      	bls.n	80019b0 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80019fa:	2121      	movs	r1, #33	; 0x21
 80019fc:	2032      	movs	r0, #50	; 0x32
 80019fe:	f002 fb4e 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2121      	movs	r1, #33	; 0x21
 8001a1c:	2032      	movs	r0, #50	; 0x32
 8001a1e:	f002 fb2b 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001a38:	2122      	movs	r1, #34	; 0x22
 8001a3a:	2032      	movs	r0, #50	; 0x32
 8001a3c:	f002 fb2f 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2122      	movs	r1, #34	; 0x22
 8001a52:	2032      	movs	r0, #50	; 0x32
 8001a54:	f002 fb10 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001a6e:	2138      	movs	r1, #56	; 0x38
 8001a70:	2032      	movs	r0, #50	; 0x32
 8001a72:	f002 fb14 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	461a      	mov	r2, r3
 8001a86:	2138      	movs	r1, #56	; 0x38
 8001a88:	2032      	movs	r0, #50	; 0x32
 8001a8a:	f002 faf5 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	461a      	mov	r2, r3
 8001a96:	213a      	movs	r1, #58	; 0x3a
 8001a98:	2032      	movs	r0, #50	; 0x32
 8001a9a:	f002 faed 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	213b      	movs	r1, #59	; 0x3b
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f002 fae5 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	213c      	movs	r1, #60	; 0x3c
 8001ab4:	2032      	movs	r0, #50	; 0x32
 8001ab6:	f002 fadf 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001aba:	2332      	movs	r3, #50	; 0x32
 8001abc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	213d      	movs	r1, #61	; 0x3d
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f002 fad7 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001ad6:	f002 fa9f 	bl	8004018 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001ada:	2080      	movs	r0, #128	; 0x80
 8001adc:	f7ff ffa5 	bl	8001a2a <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff ff83 	bl	80019ec <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8001ae6:	2010      	movs	r0, #16
 8001ae8:	f7ff ffba 	bl	8001a60 <LSM303AGR_AccClickITEnable>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001afe:	f002 fa63 	bl	8003fc8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	2032      	movs	r0, #50	; 0x32
 8001b0e:	f002 fab3 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2123      	movs	r1, #35	; 0x23
 8001b1c:	2032      	movs	r0, #50	; 0x32
 8001b1e:	f002 faab 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001b42:	f002 fa41 	bl	8003fc8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001b46:	210f      	movs	r1, #15
 8001b48:	2032      	movs	r0, #50	; 0x32
 8001b4a:	f002 faa8 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001b62:	2124      	movs	r1, #36	; 0x24
 8001b64:	2032      	movs	r0, #50	; 0x32
 8001b66:	f002 fa9a 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b74:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2124      	movs	r1, #36	; 0x24
 8001b7c:	2032      	movs	r0, #50	; 0x32
 8001b7e:	f002 fa7b 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001b94:	2121      	movs	r1, #33	; 0x21
 8001b96:	2032      	movs	r0, #50	; 0x32
 8001b98:	f002 fa81 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2121      	movs	r1, #33	; 0x21
 8001bb6:	2032      	movs	r0, #50	; 0x32
 8001bb8:	f002 fa5e 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001bce:	2121      	movs	r1, #33	; 0x21
 8001bd0:	2032      	movs	r0, #50	; 0x32
 8001bd2:	f002 fa64 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	f023 0308 	bic.w	r3, r3, #8
 8001be0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2121      	movs	r1, #33	; 0x21
 8001bf0:	2032      	movs	r0, #50	; 0x32
 8001bf2:	f002 fa41 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001c06:	2300      	movs	r3, #0
 8001c08:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001c12:	2123      	movs	r1, #35	; 0x23
 8001c14:	2032      	movs	r0, #50	; 0x32
 8001c16:	f002 fa42 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001c1e:	2124      	movs	r1, #36	; 0x24
 8001c20:	2032      	movs	r0, #50	; 0x32
 8001c22:	f002 fa3c 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001c2a:	2128      	movs	r1, #40	; 0x28
 8001c2c:	2032      	movs	r0, #50	; 0x32
 8001c2e:	f002 fa36 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001c38:	2129      	movs	r1, #41	; 0x29
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f002 fa2f 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001c46:	212a      	movs	r1, #42	; 0x2a
 8001c48:	2032      	movs	r0, #50	; 0x32
 8001c4a:	f002 fa28 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001c54:	212b      	movs	r1, #43	; 0x2b
 8001c56:	2032      	movs	r0, #50	; 0x32
 8001c58:	f002 fa21 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f002 fa1a 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001c70:	212d      	movs	r1, #45	; 0x2d
 8001c72:	2032      	movs	r0, #50	; 0x32
 8001c74:	f002 fa13 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001c7e:	7d3b      	ldrb	r3, [r7, #20]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d126      	bne.n	8001cd6 <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
 8001c8c:	e01f      	b.n	8001cce <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3301      	adds	r3, #1
 8001c94:	f107 0220 	add.w	r2, r7, #32
 8001c98:	4413      	add	r3, r2
 8001c9a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	f107 0120 	add.w	r1, r7, #32
 8001cac:	440b      	add	r3, r1
 8001cae:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	b212      	sxth	r2, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	f107 0120 	add.w	r1, r7, #32
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	77fb      	strb	r3, [r7, #31]
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d9dc      	bls.n	8001c8e <LSM303DLHC_AccReadXYZ+0x90>
 8001cd4:	e025      	b.n	8001d22 <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]
 8001cda:	e01f      	b.n	8001d1c <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001cdc:	7ffb      	ldrb	r3, [r7, #31]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	f107 0220 	add.w	r2, r7, #32
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f107 0120 	add.w	r1, r7, #32
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	b212      	sxth	r2, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	f107 0120 	add.w	r1, r7, #32
 8001d10:	440b      	add	r3, r1
 8001d12:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	77fb      	strb	r3, [r7, #31]
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d9dc      	bls.n	8001cdc <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001d22:	7d3b      	ldrb	r3, [r7, #20]
 8001d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d28:	2b30      	cmp	r3, #48	; 0x30
 8001d2a:	d013      	beq.n	8001d54 <LSM303DLHC_AccReadXYZ+0x156>
 8001d2c:	2b30      	cmp	r3, #48	; 0x30
 8001d2e:	dc14      	bgt.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d00c      	beq.n	8001d4e <LSM303DLHC_AccReadXYZ+0x150>
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	dc10      	bgt.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <LSM303DLHC_AccReadXYZ+0x144>
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d003      	beq.n	8001d48 <LSM303DLHC_AccReadXYZ+0x14a>
 8001d40:	e00b      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77bb      	strb	r3, [r7, #30]
    break;
 8001d46:	e008      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	77bb      	strb	r3, [r7, #30]
    break;
 8001d4c:	e005      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	77bb      	strb	r3, [r7, #30]
    break;
 8001d52:	e002      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001d54:	230c      	movs	r3, #12
 8001d56:	77bb      	strb	r3, [r7, #30]
    break;
 8001d58:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	77fb      	strb	r3, [r7, #31]
 8001d5e:	e015      	b.n	8001d8c <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	f107 0220 	add.w	r2, r7, #32
 8001d68:	4413      	add	r3, r2
 8001d6a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	7fbb      	ldrb	r3, [r7, #30]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	fb12 f303 	smulbb	r3, r2, r3
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	b20a      	sxth	r2, r1
 8001d84:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	77fb      	strb	r3, [r7, #31]
 8001d8c:	7ffb      	ldrb	r3, [r7, #31]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d9e6      	bls.n	8001d60 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001daa:	2121      	movs	r1, #33	; 0x21
 8001dac:	2032      	movs	r0, #50	; 0x32
 8001dae:	f002 f976 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2121      	movs	r1, #33	; 0x21
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f002 f953 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001de8:	2122      	movs	r1, #34	; 0x22
 8001dea:	2032      	movs	r0, #50	; 0x32
 8001dec:	f002 f957 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2122      	movs	r1, #34	; 0x22
 8001e02:	2032      	movs	r0, #50	; 0x32
 8001e04:	f002 f938 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001e1e:	2138      	movs	r1, #56	; 0x38
 8001e20:	2032      	movs	r0, #50	; 0x32
 8001e22:	f002 f93c 	bl	800409e <COMPASSACCELERO_IO_Read>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	461a      	mov	r2, r3
 8001e36:	2138      	movs	r1, #56	; 0x38
 8001e38:	2032      	movs	r0, #50	; 0x32
 8001e3a:	f002 f91d 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001e3e:	230a      	movs	r3, #10
 8001e40:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	461a      	mov	r2, r3
 8001e46:	213a      	movs	r1, #58	; 0x3a
 8001e48:	2032      	movs	r0, #50	; 0x32
 8001e4a:	f002 f915 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	461a      	mov	r2, r3
 8001e56:	213b      	movs	r1, #59	; 0x3b
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f002 f90d 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	461a      	mov	r2, r3
 8001e62:	213c      	movs	r1, #60	; 0x3c
 8001e64:	2032      	movs	r0, #50	; 0x32
 8001e66:	f002 f907 	bl	8004078 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001e6a:	2332      	movs	r3, #50	; 0x32
 8001e6c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	461a      	mov	r2, r3
 8001e72:	213d      	movs	r1, #61	; 0x3d
 8001e74:	2032      	movs	r0, #50	; 0x32
 8001e76:	f002 f8ff 	bl	8004078 <COMPASSACCELERO_IO_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001e86:	f002 f8c7 	bl	8004018 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001e8a:	2080      	movs	r0, #128	; 0x80
 8001e8c:	f7ff ffa5 	bl	8001dda <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001e90:	2004      	movs	r0, #4
 8001e92:	f7ff ff83 	bl	8001d9c <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001e96:	2010      	movs	r0, #16
 8001e98:	f7ff ffba 	bl	8001e10 <LSM303DLHC_AccClickITEnable>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <MX_ADC1_Init+0xb8>)
 8001eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <MX_ADC1_Init+0xbc>)
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001efe:	4815      	ldr	r0, [pc, #84]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f00:	f002 fe6a 	bl	8004bd8 <HAL_ADC_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f0a:	f001 fcf5 	bl	80038f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f16:	2307      	movs	r3, #7
 8001f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f20:	f002 ffb8 	bl	8004e94 <HAL_ADC_ConfigChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f2a:	f001 fce5 	bl	80038f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f32:	2302      	movs	r3, #2
 8001f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f3c:	f002 ffaa 	bl	8004e94 <HAL_ADC_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001f46:	f001 fcd7 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000408 	.word	0x20000408
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	0f000001 	.word	0x0f000001

08001f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	; (800203c <HAL_ADC_MspInit+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d157      	bne.n	8002032 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001fba:	2306      	movs	r3, #6
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	481d      	ldr	r0, [pc, #116]	; (8002044 <HAL_ADC_MspInit+0xe4>)
 8001fce:	f004 f82f 	bl	8006030 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_ADC_MspInit+0xec>)
 8001fd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002000:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002008:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002016:	480c      	ldr	r0, [pc, #48]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002018:	f003 fafc 	bl	8005614 <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002022:	f001 fc69 	bl	80038f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40012000 	.word	0x40012000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000
 8002048:	20000450 	.word	0x20000450
 800204c:	40026410 	.word	0x40026410

08002050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_DMA_Init+0x4c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <MX_DMA_Init+0x4c>)
 8002060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <MX_DMA_Init+0x4c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2038      	movs	r0, #56	; 0x38
 8002078:	f003 fa7c 	bl	8005574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800207c:	2038      	movs	r0, #56	; 0x38
 800207e:	f003 faa5 	bl	80055cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2039      	movs	r0, #57	; 0x39
 8002088:	f003 fa74 	bl	8005574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800208c:	2039      	movs	r0, #57	; 0x39
 800208e:	f003 fa9d 	bl	80055cc <HAL_NVIC_EnableIRQ>

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a8e      	ldr	r2, [pc, #568]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a87      	ldr	r2, [pc, #540]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a80      	ldr	r2, [pc, #512]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <MX_GPIO_Init+0x258>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <MX_GPIO_Init+0x258>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a72      	ldr	r2, [pc, #456]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a6b      	ldr	r2, [pc, #428]	; (80022f8 <MX_GPIO_Init+0x258>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2108      	movs	r1, #8
 8002162:	4866      	ldr	r0, [pc, #408]	; (80022fc <MX_GPIO_Init+0x25c>)
 8002164:	f004 fb02 	bl	800676c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2101      	movs	r1, #1
 800216c:	4864      	ldr	r0, [pc, #400]	; (8002300 <MX_GPIO_Init+0x260>)
 800216e:	f004 fafd 	bl	800676c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	f244 0182 	movw	r1, #16514	; 0x4082
 8002178:	4862      	ldr	r0, [pc, #392]	; (8002304 <MX_GPIO_Init+0x264>)
 800217a:	f004 faf7 	bl	800676c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800217e:	2200      	movs	r2, #0
 8002180:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002184:	4860      	ldr	r0, [pc, #384]	; (8002308 <MX_GPIO_Init+0x268>)
 8002186:	f004 faf1 	bl	800676c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800218a:	2304      	movs	r3, #4
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4857      	ldr	r0, [pc, #348]	; (80022fc <MX_GPIO_Init+0x25c>)
 800219e:	f003 ff47 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80021a2:	2308      	movs	r3, #8
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	4850      	ldr	r0, [pc, #320]	; (80022fc <MX_GPIO_Init+0x25c>)
 80021ba:	f003 ff39 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80021be:	2332      	movs	r3, #50	; 0x32
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	484a      	ldr	r0, [pc, #296]	; (80022fc <MX_GPIO_Init+0x25c>)
 80021d4:	f003 ff2c 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4844      	ldr	r0, [pc, #272]	; (8002300 <MX_GPIO_Init+0x260>)
 80021f0:	f003 ff1e 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80021f4:	2308      	movs	r3, #8
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002204:	2305      	movs	r3, #5
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	483c      	ldr	r0, [pc, #240]	; (8002300 <MX_GPIO_Init+0x260>)
 8002210:	f003 ff0e 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002214:	2301      	movs	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4839      	ldr	r0, [pc, #228]	; (800230c <MX_GPIO_Init+0x26c>)
 8002228:	f003 ff02 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800222c:	2310      	movs	r3, #16
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800223c:	2306      	movs	r3, #6
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	4831      	ldr	r0, [pc, #196]	; (800230c <MX_GPIO_Init+0x26c>)
 8002248:	f003 fef2 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin;
 800224c:	f244 0382 	movw	r3, #16514	; 0x4082
 8002250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4827      	ldr	r0, [pc, #156]	; (8002304 <MX_GPIO_Init+0x264>)
 8002266:	f003 fee3 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800226a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800226e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002270:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4821      	ldr	r0, [pc, #132]	; (8002308 <MX_GPIO_Init+0x268>)
 8002282:	f003 fed5 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002286:	f24f 0310 	movw	r3, #61456	; 0xf010
 800228a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	481a      	ldr	r0, [pc, #104]	; (8002308 <MX_GPIO_Init+0x268>)
 80022a0:	f003 fec6 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80022a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022b6:	2306      	movs	r3, #6
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	480f      	ldr	r0, [pc, #60]	; (8002300 <MX_GPIO_Init+0x260>)
 80022c2:	f003 feb5 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022c6:	2320      	movs	r3, #32
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <MX_GPIO_Init+0x268>)
 80022da:	f003 fea9 	bl	8006030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	2017      	movs	r0, #23
 80022e4:	f003 f946 	bl	8005574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022e8:	2017      	movs	r0, #23
 80022ea:	f003 f96f 	bl	80055cc <HAL_NVIC_EnableIRQ>

}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	; 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40020800 	.word	0x40020800
 8002304:	40020400 	.word	0x40020400
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40020000 	.word	0x40020000

08002310 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <MX_I2C1_Init+0x50>)
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <MX_I2C1_Init+0x54>)
 8002318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_I2C1_Init+0x50>)
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <MX_I2C1_Init+0x58>)
 800231e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_I2C1_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_I2C1_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_I2C1_Init+0x50>)
 800232e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <MX_I2C1_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_I2C1_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <MX_I2C1_Init+0x50>)
 800234e:	f005 ffd3 	bl	80082f8 <HAL_I2C_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002358:	f001 face 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200004b0 	.word	0x200004b0
 8002364:	40005400 	.word	0x40005400
 8002368:	000186a0 	.word	0x000186a0

0800236c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <MX_I2C2_Init+0x50>)
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <MX_I2C2_Init+0x54>)
 8002374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_I2C2_Init+0x50>)
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <MX_I2C2_Init+0x58>)
 800237a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_I2C2_Init+0x50>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_I2C2_Init+0x50>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <MX_I2C2_Init+0x50>)
 800238a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <MX_I2C2_Init+0x50>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <MX_I2C2_Init+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <MX_I2C2_Init+0x50>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_I2C2_Init+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <MX_I2C2_Init+0x50>)
 80023aa:	f005 ffa5 	bl	80082f8 <HAL_I2C_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023b4:	f001 faa0 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000504 	.word	0x20000504
 80023c0:	40005800 	.word	0x40005800
 80023c4:	000186a0 	.word	0x000186a0

080023c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <HAL_I2C_MspInit+0x10c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d12d      	bne.n	8002446 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a39      	ldr	r2, [pc, #228]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002406:	f44f 7310 	mov.w	r3, #576	; 0x240
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240c:	2312      	movs	r3, #18
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002410:	2301      	movs	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002418:	2304      	movs	r3, #4
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	482e      	ldr	r0, [pc, #184]	; (80024dc <HAL_I2C_MspInit+0x114>)
 8002424:	f003 fe04 	bl	8006030 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 8002432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002444:	e041      	b.n	80024ca <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <HAL_I2C_MspInit+0x118>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d13c      	bne.n	80024ca <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	6313      	str	r3, [r2, #48]	; 0x30
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800246c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002472:	2312      	movs	r3, #18
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800247e:	2304      	movs	r3, #4
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4814      	ldr	r0, [pc, #80]	; (80024dc <HAL_I2C_MspInit+0x114>)
 800248a:	f003 fdd1 	bl	8006030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800248e:	2308      	movs	r3, #8
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002492:	2312      	movs	r3, #18
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800249e:	2309      	movs	r3, #9
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <HAL_I2C_MspInit+0x114>)
 80024aa:	f003 fdc1 	bl	8006030 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80024b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
}
 80024ca:	bf00      	nop
 80024cc:	3730      	adds	r7, #48	; 0x30
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40005400 	.word	0x40005400
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40005800 	.word	0x40005800

080024e4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_I2C_MspDeInit+0x64>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10f      	bne.n	8002516 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 80024fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	4812      	ldr	r0, [pc, #72]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 8002506:	f004 f82f 	bl	8006568 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800250a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 8002510:	f004 f82a 	bl	8006568 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8002514:	e013      	b.n	800253e <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_I2C_MspDeInit+0x70>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d10e      	bne.n	800253e <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 8002526:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800252c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002530:	4807      	ldr	r0, [pc, #28]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 8002532:	f004 f819 	bl	8006568 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8002536:	2108      	movs	r1, #8
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 800253a:	f004 f815 	bl	8006568 <HAL_GPIO_DeInit>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40005400 	.word	0x40005400
 800254c:	40023800 	.word	0x40023800
 8002550:	40020400 	.word	0x40020400
 8002554:	40005800 	.word	0x40005800

08002558 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fbdb 	bl	8002d1e <LCD5110_refresh_ll>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f880 	bl	800268c <LCD5110_wset_cursor>
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 f95f 	bl	8002862 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	2100      	movs	r1, #0
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff ffe1 	bl	8002570 <LCD5110_set_cursor>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f893 	bl	80026f8 <LCD5110_wprint>
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b08b      	sub	sp, #44	; 0x2c
 80025e0:	af04      	add	r7, sp, #16
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db41      	blt.n	800267a <LCD5110_wputchar+0x9e>
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db3c      	blt.n	800267a <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002606:	461a      	mov	r2, r3
 8002608:	2306      	movs	r3, #6
 800260a:	4413      	add	r3, r2
 800260c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800260e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002612:	4293      	cmp	r3, r2
 8002614:	d833      	bhi.n	800267e <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800261c:	461a      	mov	r2, r3
 800261e:	2308      	movs	r3, #8
 8002620:	4413      	add	r3, r2
 8002622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002624:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8002628:	4293      	cmp	r3, r2
 800262a:	d828      	bhi.n	800267e <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 800262c:	4b16      	ldr	r3, [pc, #88]	; (8002688 <LCD5110_wputchar+0xac>)
 800262e:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	18d0      	adds	r0, r2, r3
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	18d1      	adds	r1, r2, r3
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	2206      	movs	r2, #6
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	441a      	add	r2, r3
 8002654:	2306      	movs	r3, #6
 8002656:	461e      	mov	r6, r3
 8002658:	2308      	movs	r3, #8
 800265a:	461c      	mov	r4, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf0c      	ite	eq
 8002662:	2301      	moveq	r3, #1
 8002664:	2300      	movne	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461d      	mov	r5, r3
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	9501      	str	r5, [sp, #4]
 8002670:	9400      	str	r4, [sp, #0]
 8002672:	4633      	mov	r3, r6
 8002674:	f000 f950 	bl	8002918 <LCD5110_drawBitmap>
 8002678:	e002      	b.n	8002680 <LCD5110_wputchar+0xa4>
		return;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <LCD5110_wputchar+0xa4>
		return;
 800267e:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8002680:	371c      	adds	r7, #28
 8002682:	46bd      	mov	sp, r7
 8002684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002686:	bf00      	nop
 8002688:	08013a34 	.word	0x08013a34

0800268c <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	b21a      	sxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	815a      	strh	r2, [r3, #10]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	2308      	movs	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	7b1b      	ldrb	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 80026e8:	6838      	ldr	r0, [r7, #0]
 80026ea:	f7ff ff35 	bl	8002558 <LCD5110_refresh>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8002706:	e053      	b.n	80027b0 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b0a      	cmp	r3, #10
 800270e:	d010      	beq.n	8002732 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002716:	4618      	mov	r0, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800271e:	4619      	mov	r1, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	781a      	ldrb	r2, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	f7ff ff55 	bl	80025dc <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002738:	b29a      	uxth	r2, r3
 800273a:	2306      	movs	r3, #6
 800273c:	b29b      	uxth	r3, r3
 800273e:	4413      	add	r3, r2
 8002740:	b29b      	uxth	r3, r3
 8002742:	b21a      	sxth	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800274e:	461a      	mov	r2, r3
 8002750:	2306      	movs	r3, #6
 8002752:	4413      	add	r3, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800275a:	4293      	cmp	r3, r2
 800275c:	d904      	bls.n	8002768 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3301      	adds	r3, #1
 8002762:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8002764:	2b0a      	cmp	r3, #10
 8002766:	d103      	bne.n	8002770 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b0a      	cmp	r3, #10
 800276e:	d111      	bne.n	8002794 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff9f 	bl	80026b6 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3301      	adds	r3, #1
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <LCD5110_wprint+0xcc>)
 8002782:	4413      	add	r3, r2
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <LCD5110_wprint+0x9c>
				++str;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3301      	adds	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800279a:	461a      	mov	r2, r3
 800279c:	2308      	movs	r3, #8
 800279e:	4413      	add	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d807      	bhi.n	80027ba <LCD5110_wprint+0xc2>
			break;
		str++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1a7      	bne.n	8002708 <LCD5110_wprint+0x10>

	}
}
 80027b8:	e000      	b.n	80027bc <LCD5110_wprint+0xc4>
			break;
 80027ba:	bf00      	nop
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	08014064 	.word	0x08014064

080027c8 <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 80027c8:	b40c      	push	{r2, r3}
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b09e      	sub	sp, #120	; 0x78
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 80027d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027d8:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 80027da:	f107 0010 	add.w	r0, r7, #16
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027e4:	2164      	movs	r1, #100	; 0x64
 80027e6:	f00e fe73 	bl	80114d0 <vsniprintf>
 80027ea:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6839      	ldr	r1, [r7, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fede 	bl	80025b6 <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fea7 	bl	8002558 <LCD5110_refresh>

	va_end(vargs);

	return res;
 800280a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800280c:	4618      	mov	r0, r3
 800280e:	3778      	adds	r7, #120	; 0x78
 8002810:	46bd      	mov	sp, r7
 8002812:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002816:	b002      	add	sp, #8
 8002818:	4770      	bx	lr

0800281a <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 800281a:	b480      	push	{r7}
 800281c:	b087      	sub	sp, #28
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	10db      	asrs	r3, r3, #3
 800282a:	2254      	movs	r2, #84	; 0x54
 800282c:	fb02 f203 	mul.w	r2, r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4413      	add	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	2201      	movs	r2, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	753b      	strb	r3, [r7, #20]

	return res;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002852:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 8002862:	b480      	push	{r7}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e008      	b.n	8002882 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	331c      	adds	r3, #28
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3301      	adds	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8002888:	dbf2      	blt.n	8002870 <LCD5110_clrscr+0xe>
	}
}
 800288a:	bf00      	nop
 800288c:	bf00      	nop
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db31      	blt.n	8002910 <LCD5110_putpix+0x78>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	db2e      	blt.n	8002910 <LCD5110_putpix+0x78>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b53      	cmp	r3, #83	; 0x53
 80028b6:	dc2b      	bgt.n	8002910 <LCD5110_putpix+0x78>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b2f      	cmp	r3, #47	; 0x2f
 80028bc:	dc28      	bgt.n	8002910 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	68f9      	ldr	r1, [r7, #12]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ffa7 	bl	800281a <xy_to_pix>

	if (color)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00c      	beq.n	80028ec <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	7f19      	ldrb	r1, [r3, #28]
 80028da:	7d3a      	ldrb	r2, [r7, #20]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	430a      	orrs	r2, r1
 80028e0:	b2d1      	uxtb	r1, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	460a      	mov	r2, r1
 80028e8:	771a      	strb	r2, [r3, #28]
 80028ea:	e012      	b.n	8002912 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	7f1b      	ldrb	r3, [r3, #28]
 80028f4:	b25a      	sxtb	r2, r3
 80028f6:	7d3b      	ldrb	r3, [r7, #20]
 80028f8:	b25b      	sxtb	r3, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	b25b      	sxtb	r3, r3
 80028fe:	4013      	ands	r3, r2
 8002900:	b25a      	sxtb	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	b2d1      	uxtb	r1, r2
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4413      	add	r3, r2
 800290a:	460a      	mov	r2, r1
 800290c:	771a      	strb	r2, [r3, #28]
 800290e:	e000      	b.n	8002912 <LCD5110_putpix+0x7a>
		return;
 8002910:	bf00      	nop
}
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e042      	b.n	80029b2 <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e038      	b.n	80029a4 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	da00      	bge.n	800293a <LCD5110_drawBitmap+0x22>
 8002938:	3307      	adds	r3, #7
 800293a:	10db      	asrs	r3, r3, #3
 800293c:	461a      	mov	r2, r3
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	fb03 f202 	mul.w	r2, r3, r2
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	461a      	mov	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	425a      	negs	r2, r3
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	f002 0207 	and.w	r2, r2, #7
 800295e:	bf58      	it	pl
 8002960:	4253      	negpl	r3, r2
 8002962:	2201      	movs	r2, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	b25a      	sxtb	r2, r3
 800296a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800296e:	4013      	ands	r3, r2
 8002970:	b25b      	sxtb	r3, r3
 8002972:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	18d0      	adds	r0, r2, r3
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	18d1      	adds	r1, r2, r3
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <LCD5110_drawBitmap+0x7e>
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b00      	cmp	r3, #0
 800298a:	bf0c      	ite	eq
 800298c:	2301      	moveq	r3, #1
 800298e:	2300      	movne	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	e000      	b.n	8002998 <LCD5110_drawBitmap+0x80>
 8002996:	7dfa      	ldrb	r2, [r7, #23]
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	f7ff ff7d 	bl	8002898 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61bb      	str	r3, [r7, #24]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbc2      	blt.n	8002932 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	3301      	adds	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	69fa      	ldr	r2, [r7, #28]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dbb8      	blt.n	800292c <LCD5110_drawBitmap+0x14>
		}
	}
}
 80029ba:	bf00      	nop
 80029bc:	bf00      	nop
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	1df9      	adds	r1, r7, #7
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	2201      	movs	r2, #1
 80029dc:	f007 fcec 	bl	800a3b8 <HAL_SPI_Transmit>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	460b      	mov	r3, r1
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	897a      	ldrh	r2, [r7, #10]
 80029fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	f007 fcd8 	bl	800a3b8 <HAL_SPI_Transmit>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6898      	ldr	r0, [r3, #8]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	889b      	ldrh	r3, [r3, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	4619      	mov	r1, r3
 8002a26:	f003 fea1 	bl	800676c <HAL_GPIO_WritePin>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6998      	ldr	r0, [r3, #24]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	8a9b      	ldrh	r3, [r3, #20]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4619      	mov	r1, r3
 8002a46:	f003 fe91 	bl	800676c <HAL_GPIO_WritePin>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6998      	ldr	r0, [r3, #24]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8a9b      	ldrh	r3, [r3, #20]
 8002a62:	2200      	movs	r2, #0
 8002a64:	4619      	mov	r1, r3
 8002a66:	f003 fe81 	bl	800676c <HAL_GPIO_WritePin>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6918      	ldr	r0, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	899b      	ldrh	r3, [r3, #12]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4619      	mov	r1, r3
 8002a86:	f003 fe71 	bl	800676c <HAL_GPIO_WritePin>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6918      	ldr	r0, [r3, #16]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	899b      	ldrh	r3, [r3, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f003 fe61 	bl	800676c <HAL_GPIO_WritePin>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	6039      	str	r1, [r7, #0]
 8002abc:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f023 0320 	bic.w	r3, r3, #32
 8002ac4:	2b07      	cmp	r3, #7
 8002ac6:	dd01      	ble.n	8002acc <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e008      	b.n	8002ade <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	f043 0320 	orr.w	r3, r3, #32
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	6839      	ldr	r1, [r7, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff74 	bl	80029c4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	6039      	str	r1, [r7, #0]
 8002af0:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f023 030d 	bic.w	r3, r3, #13
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8002afc:	2302      	movs	r3, #2
 8002afe:	e005      	b.n	8002b0c <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ff5d 	bl	80029c4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8002b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da01      	bge.n	8002b2c <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e008      	b.n	8002b3e <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	6839      	ldr	r1, [r7, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff44 	bl	80029c4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	6039      	str	r1, [r7, #0]
 8002b50:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d901      	bls.n	8002b5c <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8002b58:	2304      	movs	r3, #4
 8002b5a:	e008      	b.n	8002b6e <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff2c 	bl	80029c4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	6039      	str	r1, [r7, #0]
 8002b80:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b07      	cmp	r3, #7
 8002b86:	d901      	bls.n	8002b8c <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8002b88:	2305      	movs	r3, #5
 8002b8a:	e008      	b.n	8002b9e <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	f043 0310 	orr.w	r3, r3, #16
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	6839      	ldr	r1, [r7, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff ff14 	bl	80029c4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	6039      	str	r1, [r7, #0]
 8002bb0:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8002bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db03      	blt.n	8002bc2 <LCD5110_set_X_base+0x1c>
 8002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbe:	2b53      	cmp	r3, #83	; 0x53
 8002bc0:	dd01      	ble.n	8002bc6 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	e00a      	b.n	8002bdc <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fef5 	bl	80029c4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8002bf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db03      	blt.n	8002c00 <LCD5110_set_Y_base+0x1c>
 8002bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	dd01      	ble.n	8002c04 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8002c00:	2307      	movs	r3, #7
 8002c02:	e00a      	b.n	8002c1a <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	b25b      	sxtb	r3, r3
 8002c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c0c:	b25b      	sxtb	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fed6 	bl	80029c4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	603a      	str	r2, [r7, #0]
 8002c2c:	80fb      	strh	r3, [r7, #6]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8002c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ffb4 	bl	8002ba6 <LCD5110_set_X_base>
 8002c3e:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <LCD5110_set_XY_base+0x28>
		return res;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	e00c      	b.n	8002c64 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8002c4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c4e:	6839      	ldr	r1, [r7, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ffc7 	bl	8002be4 <LCD5110_set_Y_base>
 8002c56:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <LCD5110_set_XY_base+0x40>
		return res;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	e000      	b.n	8002c64 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70bb      	strb	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffdc 	bl	8002c6c <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff feac 	bl	8002a12 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fee9 	bl	8002a92 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8002cc0:	2364      	movs	r3, #100	; 0x64
 8002cc2:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8002cc4:	bf00      	nop
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1fa      	bne.n	8002cc6 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fece 	bl	8002a72 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff febb 	bl	8002a52 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7ff fee7 	bl	8002ab2 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8002ce4:	78bb      	ldrb	r3, [r7, #2]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff ff13 	bl	8002b14 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8002cee:	787b      	ldrb	r3, [r7, #1]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff27 	bl	8002b46 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8002cf8:	7e3b      	ldrb	r3, [r7, #24]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff3a 	bl	8002b76 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff fed4 	bl	8002ab2 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fee9 	bl	8002ae6 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8002d14:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff fe73 	bl	8002a12 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff fe90 	bl	8002a52 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	2100      	movs	r1, #0
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7ff ff73 	bl	8002c22 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff fe78 	bl	8002a32 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	331c      	adds	r3, #28
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fe4c 	bl	80029ea <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <HAL_GPIO_EXTI_Callback>:
volatile int pressed = 0;
volatile int button_is_pressed = 0;
volatile int loop_counter = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]

 if (GPIO_Pin == GPIO_PIN_8) {
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d6c:	d136      	bne.n	8002ddc <HAL_GPIO_EXTI_Callback+0x80>

  static uint32_t last_change_tick;
  if (HAL_GetTick() - last_change_tick < 50) {
 8002d6e:	f001 ff03 	bl	8004b78 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x88>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b31      	cmp	r3, #49	; 0x31
 8002d7c:	d92d      	bls.n	8002dda <HAL_GPIO_EXTI_Callback+0x7e>
	  return;
  }

  last_change_tick = HAL_GetTick();
 8002d7e:	f001 fefb 	bl	8004b78 <HAL_GetTick>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_GPIO_EXTI_Callback+0x88>)
 8002d86:	6013      	str	r3, [r2, #0]

  if (fall_down == 0) {
 8002d88:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11c      	bne.n	8002dca <HAL_GPIO_EXTI_Callback+0x6e>
	  if (button_is_pressed) {
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_GPIO_EXTI_Callback+0x90>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d015      	beq.n	8002dc4 <HAL_GPIO_EXTI_Callback+0x68>
		  button_is_pressed = 0;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_GPIO_EXTI_Callback+0x90>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
		  ++pressed;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <HAL_GPIO_EXTI_Callback+0x94>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3301      	adds	r3, #1
 8002da4:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <HAL_GPIO_EXTI_Callback+0x94>)
 8002da6:	6013      	str	r3, [r2, #0]
		  if (light == -1) {
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_GPIO_EXTI_Callback+0x98>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db0:	d103      	bne.n	8002dba <HAL_GPIO_EXTI_Callback+0x5e>
			  light = 0;
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <HAL_GPIO_EXTI_Callback+0x98>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e007      	b.n	8002dca <HAL_GPIO_EXTI_Callback+0x6e>
		  } else {
			  light = -1;
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_GPIO_EXTI_Callback+0x98>)
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e002      	b.n	8002dca <HAL_GPIO_EXTI_Callback+0x6e>
		  }
	  } else {
		  button_is_pressed = 1;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_GPIO_EXTI_Callback+0x90>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
	  }
  }

  if (fall_down) {
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <HAL_GPIO_EXTI_Callback+0x80>
	  fall_down = 0;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_EXTI_Callback+0x80>
	  return;
 8002dda:	bf00      	nop
  }
 }
}
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000340 	.word	0x20000340
 8002de8:	200002f4 	.word	0x200002f4
 8002dec:	20000300 	.word	0x20000300
 8002df0:	200002fc 	.word	0x200002fc
 8002df4:	200002f8 	.word	0x200002f8

08002df8 <HAL_TIM_PeriodElapsedCallback>:
double Fall_Down_Y = 0;
double Fall_Down_Z = 0;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  if (htim -> Instance == TIM10) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a06      	ldr	r2, [pc, #24]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d105      	bne.n	8002e16 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  MPU6050_Read_Accel_L();
 8002e0a:	f000 f97d 	bl	8003108 <MPU6050_Read_Accel_L>
	  MPU6050_Read_Accel_R();
 8002e0e:	f000 fa03 	bl	8003218 <MPU6050_Read_Accel_R>
	  show_accelerometer();
 8002e12:	f000 fa7d 	bl	8003310 <show_accelerometer>
  }

}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40014400 	.word	0x40014400

08002e24 <TIM10_reinit>:

static inline void TIM10_reinit() {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(&htim10);
 8002e28:	4807      	ldr	r0, [pc, #28]	; (8002e48 <TIM10_reinit+0x24>)
 8002e2a:	f007 ff5d 	bl	800ace8 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER( &htim10, 0 );
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <TIM10_reinit+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
	tim10_overflows = 0;
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <TIM10_reinit+0x28>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM10_reinit+0x24>)
 8002e3e:	f007 ffb5 	bl	800adac <HAL_TIM_Base_Start_IT>

}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000eb8 	.word	0x20000eb8
 8002e4c:	20000308 	.word	0x20000308

08002e50 <HAL_TIM_PWM_PulseFinishedCallback>:

	while( get_tim10_us() < before+useconds){}

}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {  // callback when dma finished data transfering
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);  // stop dma, when data transfering has finished
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002e5c:	f008 fb42 	bl	800b4e4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000f00 	.word	0x20000f00
 8002e74:	2000030c 	.word	0x2000030c

08002e78 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	b2d9      	uxtb	r1, r3
 8002e8a:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <Set_LED+0x58>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	b2d9      	uxtb	r1, r3
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <Set_LED+0x58>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	b2d9      	uxtb	r1, r3
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <Set_LED+0x58>)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	460a      	mov	r2, r1
 8002eb0:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2d9      	uxtb	r1, r3
 8002eb6:	4a06      	ldr	r2, [pc, #24]	; (8002ed0 <Set_LED+0x58>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	460a      	mov	r2, r1
 8002ec0:	70da      	strb	r2, [r3, #3]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000780 	.word	0x20000780

08002ed4 <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50]; // 24 bits leds + 50 eset code

void WS2812_Send (void) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0

	uint32_t indx=0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	e036      	b.n	8002f52 <WS2812_Send+0x7e>

		#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
		#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8002ee4:	4a2e      	ldr	r2, [pc, #184]	; (8002fa0 <WS2812_Send+0xcc>)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	041a      	lsls	r2, r3, #16
 8002ef0:	492b      	ldr	r1, [pc, #172]	; (8002fa0 <WS2812_Send+0xcc>)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	789b      	ldrb	r3, [r3, #2]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	431a      	orrs	r2, r3
 8002efe:	4928      	ldr	r1, [pc, #160]	; (8002fa0 <WS2812_Send+0xcc>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	78db      	ldrb	r3, [r3, #3]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	607b      	str	r3, [r7, #4]
		#endif

		for (int i = 23; i >= 0; i--) {
 8002f0c:	2317      	movs	r3, #23
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e019      	b.n	8002f46 <WS2812_Send+0x72>

			if (color&(1 << i)) {
 8002f12:	2201      	movs	r2, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <WS2812_Send+0x5c>
				pwmData[indx] = 57; // duty cycle is 64% from datasheet
 8002f24:	4a1f      	ldr	r2, [pc, #124]	; (8002fa4 <WS2812_Send+0xd0>)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2139      	movs	r1, #57	; 0x39
 8002f2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002f2e:	e004      	b.n	8002f3a <WS2812_Send+0x66>
			}

			else pwmData[indx] = 28;  // if the bit is 0, the duty cycle is 32%
 8002f30:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <WS2812_Send+0xd0>)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	211c      	movs	r1, #28
 8002f36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	dae2      	bge.n	8002f12 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b19      	cmp	r3, #25
 8002f56:	ddc5      	ble.n	8002ee4 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++) { // reset code
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	e00a      	b.n	8002f74 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8002f5e:	4a11      	ldr	r2, [pc, #68]	; (8002fa4 <WS2812_Send+0xd0>)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	2100      	movs	r1, #0
 8002f64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) { // reset code
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b31      	cmp	r3, #49	; 0x31
 8002f78:	ddf1      	ble.n	8002f5e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send to dma
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <WS2812_Send+0xd0>)
 8002f80:	2100      	movs	r1, #0
 8002f82:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <WS2812_Send+0xd4>)
 8002f84:	f008 f874 	bl	800b070 <HAL_TIM_PWM_Start_DMA>

	while (!datasentflag){};  // set flag when data has been transmitted
 8002f88:	bf00      	nop
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <WS2812_Send+0xd8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0fb      	beq.n	8002f8a <WS2812_Send+0xb6>
	datasentflag = 0;
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <WS2812_Send+0xd8>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]

}
 8002f98:	bf00      	nop
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000780 	.word	0x20000780
 8002fa4:	20000858 	.word	0x20000858
 8002fa8:	20000f00 	.word	0x20000f00
 8002fac:	2000030c 	.word	0x2000030c

08002fb0 <MPU6050_Init_L>:

void MPU6050_Init_L(void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af04      	add	r7, sp, #16

	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	1dfb      	adds	r3, r7, #7
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	2275      	movs	r2, #117	; 0x75
 8002fc8:	21d0      	movs	r1, #208	; 0xd0
 8002fca:	4823      	ldr	r0, [pc, #140]	; (8003058 <MPU6050_Init_L+0xa8>)
 8002fcc:	f005 fcb2 	bl	8008934 <HAL_I2C_Mem_Read>

	if (check == 104) { // 0x68 will be returned by the sensor if everything goes well
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2b68      	cmp	r3, #104	; 0x68
 8002fd4:	d13b      	bne.n	800304e <MPU6050_Init_L+0x9e>
    // power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8002fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fde:	9302      	str	r3, [sp, #8]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	1dbb      	adds	r3, r7, #6
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	226b      	movs	r2, #107	; 0x6b
 8002fec:	21d0      	movs	r1, #208	; 0xd0
 8002fee:	481a      	ldr	r0, [pc, #104]	; (8003058 <MPU6050_Init_L+0xa8>)
 8002ff0:	f005 fb9a 	bl	8008728 <HAL_I2C_Mem_Write>

    // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002ff4:	2307      	movs	r3, #7
 8002ff6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002ff8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ffc:	9302      	str	r3, [sp, #8]
 8002ffe:	2301      	movs	r3, #1
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	1dbb      	adds	r3, r7, #6
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2301      	movs	r3, #1
 8003008:	2219      	movs	r2, #25
 800300a:	21d0      	movs	r1, #208	; 0xd0
 800300c:	4812      	ldr	r0, [pc, #72]	; (8003058 <MPU6050_Init_L+0xa8>)
 800300e:	f005 fb8b 	bl	8008728 <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8003012:	2300      	movs	r3, #0
 8003014:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8003016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301a:	9302      	str	r3, [sp, #8]
 800301c:	2301      	movs	r3, #1
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	1dbb      	adds	r3, r7, #6
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2301      	movs	r3, #1
 8003026:	221c      	movs	r2, #28
 8003028:	21d0      	movs	r1, #208	; 0xd0
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <MPU6050_Init_L+0xa8>)
 800302c:	f005 fb7c 	bl	8008728 <HAL_I2C_Mem_Write>

    // Set Gyroscopic configuration in GYRO_CONFIG Register
    // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
    	Data = 0x00;
 8003030:	2300      	movs	r3, #0
 8003032:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8003034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003038:	9302      	str	r3, [sp, #8]
 800303a:	2301      	movs	r3, #1
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	1dbb      	adds	r3, r7, #6
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2301      	movs	r3, #1
 8003044:	221b      	movs	r2, #27
 8003046:	21d0      	movs	r1, #208	; 0xd0
 8003048:	4803      	ldr	r0, [pc, #12]	; (8003058 <MPU6050_Init_L+0xa8>)
 800304a:	f005 fb6d 	bl	8008728 <HAL_I2C_Mem_Write>
	}

}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200004b0 	.word	0x200004b0

0800305c <MPU6050_Init_R>:


void MPU6050_Init_R(void) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af04      	add	r7, sp, #16

	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8003062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003066:	9302      	str	r3, [sp, #8]
 8003068:	2301      	movs	r3, #1
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2301      	movs	r3, #1
 8003072:	2275      	movs	r2, #117	; 0x75
 8003074:	21d0      	movs	r1, #208	; 0xd0
 8003076:	4823      	ldr	r0, [pc, #140]	; (8003104 <MPU6050_Init_R+0xa8>)
 8003078:	f005 fc5c 	bl	8008934 <HAL_I2C_Mem_Read>

	if (check == 104) { // 0x68 will be returned by the sensor if everything goes well
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b68      	cmp	r3, #104	; 0x68
 8003080:	d13b      	bne.n	80030fa <MPU6050_Init_R+0x9e>
    // power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	9302      	str	r3, [sp, #8]
 800308c:	2301      	movs	r3, #1
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	1dbb      	adds	r3, r7, #6
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2301      	movs	r3, #1
 8003096:	226b      	movs	r2, #107	; 0x6b
 8003098:	21d0      	movs	r1, #208	; 0xd0
 800309a:	481a      	ldr	r0, [pc, #104]	; (8003104 <MPU6050_Init_R+0xa8>)
 800309c:	f005 fb44 	bl	8008728 <HAL_I2C_Mem_Write>

    // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80030a0:	2307      	movs	r3, #7
 80030a2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80030a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	1dbb      	adds	r3, r7, #6
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	2301      	movs	r3, #1
 80030b4:	2219      	movs	r2, #25
 80030b6:	21d0      	movs	r1, #208	; 0xd0
 80030b8:	4812      	ldr	r0, [pc, #72]	; (8003104 <MPU6050_Init_R+0xa8>)
 80030ba:	f005 fb35 	bl	8008728 <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 80030be:	2300      	movs	r3, #0
 80030c0:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030c6:	9302      	str	r3, [sp, #8]
 80030c8:	2301      	movs	r3, #1
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2301      	movs	r3, #1
 80030d2:	221c      	movs	r2, #28
 80030d4:	21d0      	movs	r1, #208	; 0xd0
 80030d6:	480b      	ldr	r0, [pc, #44]	; (8003104 <MPU6050_Init_R+0xa8>)
 80030d8:	f005 fb26 	bl	8008728 <HAL_I2C_Mem_Write>

    // Set Gyroscopic configuration in GYRO_CONFIG Register
    // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
    	Data = 0x00;
 80030dc:	2300      	movs	r3, #0
 80030de:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80030e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030e4:	9302      	str	r3, [sp, #8]
 80030e6:	2301      	movs	r3, #1
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	1dbb      	adds	r3, r7, #6
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2301      	movs	r3, #1
 80030f0:	221b      	movs	r2, #27
 80030f2:	21d0      	movs	r1, #208	; 0xd0
 80030f4:	4803      	ldr	r0, [pc, #12]	; (8003104 <MPU6050_Init_R+0xa8>)
 80030f6:	f005 fb17 	bl	8008728 <HAL_I2C_Mem_Write>
	}

}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000504 	.word	0x20000504

08003108 <MPU6050_Read_Accel_L>:

void MPU6050_Read_Accel_L (void) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800310e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003112:	9302      	str	r3, [sp, #8]
 8003114:	2306      	movs	r3, #6
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	463b      	mov	r3, r7
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2301      	movs	r3, #1
 800311e:	223b      	movs	r2, #59	; 0x3b
 8003120:	21d0      	movs	r1, #208	; 0xd0
 8003122:	4835      	ldr	r0, [pc, #212]	; (80031f8 <MPU6050_Read_Accel_L+0xf0>)
 8003124:	f005 fc06 	bl	8008934 <HAL_I2C_Mem_Read>

	Accel_X_RAW_L = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003128:	783b      	ldrb	r3, [r7, #0]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	b21a      	sxth	r2, r3
 800312e:	787b      	ldrb	r3, [r7, #1]
 8003130:	b21b      	sxth	r3, r3
 8003132:	4313      	orrs	r3, r2
 8003134:	b21a      	sxth	r2, r3
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <MPU6050_Read_Accel_L+0xf4>)
 8003138:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW_L = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800313a:	78bb      	ldrb	r3, [r7, #2]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	b21a      	sxth	r2, r3
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	b21b      	sxth	r3, r3
 8003144:	4313      	orrs	r3, r2
 8003146:	b21a      	sxth	r2, r3
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <MPU6050_Read_Accel_L+0xf8>)
 800314a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW_L = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800314c:	793b      	ldrb	r3, [r7, #4]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	b21a      	sxth	r2, r3
 8003152:	797b      	ldrb	r3, [r7, #5]
 8003154:	b21b      	sxth	r3, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	b21a      	sxth	r2, r3
 800315a:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <MPU6050_Read_Accel_L+0xfc>)
 800315c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
       we have to divide according to the Full scale value set in FS_SEL
       I have configured FS_SEL = 0. So I am dividing by 16384.0
       for more details check ACCEL_CONFIG Register              ****/

	Lx = Accel_X_RAW_L/16384.0;
 800315e:	4b27      	ldr	r3, [pc, #156]	; (80031fc <MPU6050_Read_Accel_L+0xf4>)
 8003160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9e5 	bl	8000534 <__aeabi_i2d>
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	4b26      	ldr	r3, [pc, #152]	; (8003208 <MPU6050_Read_Accel_L+0x100>)
 8003170:	f7fd fb74 	bl	800085c <__aeabi_ddiv>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f7fd fd1c 	bl	8000bb8 <__aeabi_d2f>
 8003180:	4603      	mov	r3, r0
 8003182:	4a22      	ldr	r2, [pc, #136]	; (800320c <MPU6050_Read_Accel_L+0x104>)
 8003184:	6013      	str	r3, [r2, #0]
	Ly = Accel_Y_RAW_L/16384.0;
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <MPU6050_Read_Accel_L+0xf8>)
 8003188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f9d1 	bl	8000534 <__aeabi_i2d>
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <MPU6050_Read_Accel_L+0x100>)
 8003198:	f7fd fb60 	bl	800085c <__aeabi_ddiv>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	f7fd fd08 	bl	8000bb8 <__aeabi_d2f>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4a19      	ldr	r2, [pc, #100]	; (8003210 <MPU6050_Read_Accel_L+0x108>)
 80031ac:	6013      	str	r3, [r2, #0]
	Lz = (Accel_Z_RAW_L/16384.0) - ACCEL_ERROR;
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <MPU6050_Read_Accel_L+0xfc>)
 80031b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f9bd 	bl	8000534 <__aeabi_i2d>
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <MPU6050_Read_Accel_L+0x100>)
 80031c0:	f7fd fb4c 	bl	800085c <__aeabi_ddiv>
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	a308      	add	r3, pc, #32	; (adr r3, 80031f0 <MPU6050_Read_Accel_L+0xe8>)
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f7fd f861 	bl	8000298 <__aeabi_dsub>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	f7fd fceb 	bl	8000bb8 <__aeabi_d2f>
 80031e2:	4603      	mov	r3, r0
 80031e4:	4a0b      	ldr	r2, [pc, #44]	; (8003214 <MPU6050_Read_Accel_L+0x10c>)
 80031e6:	6013      	str	r3, [r2, #0]
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	8f5c28f6 	.word	0x8f5c28f6
 80031f4:	3fc8f5c2 	.word	0x3fc8f5c2
 80031f8:	200004b0 	.word	0x200004b0
 80031fc:	20000316 	.word	0x20000316
 8003200:	20000318 	.word	0x20000318
 8003204:	2000031a 	.word	0x2000031a
 8003208:	40d00000 	.word	0x40d00000
 800320c:	20000da4 	.word	0x20000da4
 8003210:	20000d9c 	.word	0x20000d9c
 8003214:	20000da0 	.word	0x20000da0

08003218 <MPU6050_Read_Accel_R>:

void MPU6050_Read_Accel_R (void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800321e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003222:	9302      	str	r3, [sp, #8]
 8003224:	2306      	movs	r3, #6
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	463b      	mov	r3, r7
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2301      	movs	r3, #1
 800322e:	223b      	movs	r2, #59	; 0x3b
 8003230:	21d0      	movs	r1, #208	; 0xd0
 8003232:	482f      	ldr	r0, [pc, #188]	; (80032f0 <MPU6050_Read_Accel_R+0xd8>)
 8003234:	f005 fb7e 	bl	8008934 <HAL_I2C_Mem_Read>

	Accel_X_RAW_R = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003238:	783b      	ldrb	r3, [r7, #0]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	b21a      	sxth	r2, r3
 800323e:	787b      	ldrb	r3, [r7, #1]
 8003240:	b21b      	sxth	r3, r3
 8003242:	4313      	orrs	r3, r2
 8003244:	b21a      	sxth	r2, r3
 8003246:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <MPU6050_Read_Accel_R+0xdc>)
 8003248:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW_R = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800324a:	78bb      	ldrb	r3, [r7, #2]
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	b21a      	sxth	r2, r3
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	b21b      	sxth	r3, r3
 8003254:	4313      	orrs	r3, r2
 8003256:	b21a      	sxth	r2, r3
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <MPU6050_Read_Accel_R+0xe0>)
 800325a:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW_R = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800325c:	793b      	ldrb	r3, [r7, #4]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	b21a      	sxth	r2, r3
 8003262:	797b      	ldrb	r3, [r7, #5]
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	b21a      	sxth	r2, r3
 800326a:	4b24      	ldr	r3, [pc, #144]	; (80032fc <MPU6050_Read_Accel_R+0xe4>)
 800326c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
       we have to divide according to the Full scale value set in FS_SEL
       I have configured FS_SEL = 0. So I am dividing by 16384.0
       for more details check ACCEL_CONFIG Register              ****/

	Rx = Accel_X_RAW_R/16384.0;
 800326e:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <MPU6050_Read_Accel_R+0xdc>)
 8003270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f95d 	bl	8000534 <__aeabi_i2d>
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <MPU6050_Read_Accel_R+0xe8>)
 8003280:	f7fd faec 	bl	800085c <__aeabi_ddiv>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4610      	mov	r0, r2
 800328a:	4619      	mov	r1, r3
 800328c:	f7fd fc94 	bl	8000bb8 <__aeabi_d2f>
 8003290:	4603      	mov	r3, r0
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <MPU6050_Read_Accel_R+0xec>)
 8003294:	6013      	str	r3, [r2, #0]
	Ry = Accel_Y_RAW_R/16384.0;
 8003296:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <MPU6050_Read_Accel_R+0xe0>)
 8003298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f949 	bl	8000534 <__aeabi_i2d>
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <MPU6050_Read_Accel_R+0xe8>)
 80032a8:	f7fd fad8 	bl	800085c <__aeabi_ddiv>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	f7fd fc80 	bl	8000bb8 <__aeabi_d2f>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <MPU6050_Read_Accel_R+0xf0>)
 80032bc:	6013      	str	r3, [r2, #0]
	Rz = Accel_Z_RAW_R/16384.0;
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <MPU6050_Read_Accel_R+0xe4>)
 80032c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f935 	bl	8000534 <__aeabi_i2d>
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <MPU6050_Read_Accel_R+0xe8>)
 80032d0:	f7fd fac4 	bl	800085c <__aeabi_ddiv>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	f7fd fc6c 	bl	8000bb8 <__aeabi_d2f>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <MPU6050_Read_Accel_R+0xf4>)
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000504 	.word	0x20000504
 80032f4:	20000310 	.word	0x20000310
 80032f8:	20000312 	.word	0x20000312
 80032fc:	20000314 	.word	0x20000314
 8003300:	40d00000 	.word	0x40d00000
 8003304:	20000854 	.word	0x20000854
 8003308:	20000558 	.word	0x20000558
 800330c:	20000850 	.word	0x20000850

08003310 <show_accelerometer>:

int16_t buffer[3] = {0};


void show_accelerometer(void) {
 8003310:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003314:	af00      	add	r7, sp, #0

  BSP_ACCELERO_GetXYZ(buffer);
 8003316:	483a      	ldr	r0, [pc, #232]	; (8003400 <show_accelerometer+0xf0>)
 8003318:	f000 ff96 	bl	8004248 <BSP_ACCELERO_GetXYZ>
	Fall_Down_X = (buffer[0]/16)/1000.0;
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <show_accelerometer+0xf0>)
 800331e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003322:	2b00      	cmp	r3, #0
 8003324:	da00      	bge.n	8003328 <show_accelerometer+0x18>
 8003326:	330f      	adds	r3, #15
 8003328:	111b      	asrs	r3, r3, #4
 800332a:	b21b      	sxth	r3, r3
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd f901 	bl	8000534 <__aeabi_i2d>
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	4b33      	ldr	r3, [pc, #204]	; (8003404 <show_accelerometer+0xf4>)
 8003338:	f7fd fa90 	bl	800085c <__aeabi_ddiv>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4931      	ldr	r1, [pc, #196]	; (8003408 <show_accelerometer+0xf8>)
 8003342:	e9c1 2300 	strd	r2, r3, [r1]
	Fall_Down_Y = (double)(buffer[1]/16)/1000.0;
 8003346:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <show_accelerometer+0xf0>)
 8003348:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800334c:	2b00      	cmp	r3, #0
 800334e:	da00      	bge.n	8003352 <show_accelerometer+0x42>
 8003350:	330f      	adds	r3, #15
 8003352:	111b      	asrs	r3, r3, #4
 8003354:	b21b      	sxth	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f8ec 	bl	8000534 <__aeabi_i2d>
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	4b28      	ldr	r3, [pc, #160]	; (8003404 <show_accelerometer+0xf4>)
 8003362:	f7fd fa7b 	bl	800085c <__aeabi_ddiv>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4928      	ldr	r1, [pc, #160]	; (800340c <show_accelerometer+0xfc>)
 800336c:	e9c1 2300 	strd	r2, r3, [r1]
	Fall_Down_Z = (double)(buffer[2]/16)/1000.0;
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <show_accelerometer+0xf0>)
 8003372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	da00      	bge.n	800337c <show_accelerometer+0x6c>
 800337a:	330f      	adds	r3, #15
 800337c:	111b      	asrs	r3, r3, #4
 800337e:	b21b      	sxth	r3, r3
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd f8d7 	bl	8000534 <__aeabi_i2d>
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <show_accelerometer+0xf4>)
 800338c:	f7fd fa66 	bl	800085c <__aeabi_ddiv>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	491e      	ldr	r1, [pc, #120]	; (8003410 <show_accelerometer+0x100>)
 8003396:	e9c1 2300 	strd	r2, r3, [r1]

  if (fabs(Fall_Down_Z) > 0.85 ||  fabs(Fall_Down_X) > 0.8) {
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <show_accelerometer+0x100>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	4690      	mov	r8, r2
 80033a2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80033a6:	a312      	add	r3, pc, #72	; (adr r3, 80033f0 <show_accelerometer+0xe0>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	4640      	mov	r0, r8
 80033ae:	4649      	mov	r1, r9
 80033b0:	f7fd fbba 	bl	8000b28 <__aeabi_dcmpgt>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <show_accelerometer+0xca>
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <show_accelerometer+0xf8>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	4614      	mov	r4, r2
 80033c2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80033c6:	a30c      	add	r3, pc, #48	; (adr r3, 80033f8 <show_accelerometer+0xe8>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	4620      	mov	r0, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7fd fbaa 	bl	8000b28 <__aeabi_dcmpgt>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <show_accelerometer+0xd0>
	  fall_down = 1;
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <show_accelerometer+0x104>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]
  }

  loop_counter++;
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <show_accelerometer+0x108>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	4a0c      	ldr	r2, [pc, #48]	; (8003418 <show_accelerometer+0x108>)
 80033e8:	6013      	str	r3, [r2, #0]

}
 80033ea:	bf00      	nop
 80033ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033f0:	33333333 	.word	0x33333333
 80033f4:	3feb3333 	.word	0x3feb3333
 80033f8:	9999999a 	.word	0x9999999a
 80033fc:	3fe99999 	.word	0x3fe99999
 8003400:	20000338 	.word	0x20000338
 8003404:	408f4000 	.word	0x408f4000
 8003408:	20000320 	.word	0x20000320
 800340c:	20000328 	.word	0x20000328
 8003410:	20000330 	.word	0x20000330
 8003414:	200002f4 	.word	0x200002f4
 8003418:	20000304 	.word	0x20000304

0800341c <attention_signal.10467>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	  void attention_signal() {
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	f8c7 c004 	str.w	ip, [r7, #4]

		  for (int i = 0; i < 30; i++) {
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e008      	b.n	800343e <attention_signal.10467+0x22>
			  Set_LED(i, 139, 0, 0);
 800342c:	2300      	movs	r3, #0
 800342e:	2200      	movs	r2, #0
 8003430:	218b      	movs	r1, #139	; 0x8b
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff fd20 	bl	8002e78 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b1d      	cmp	r3, #29
 8003442:	ddf3      	ble.n	800342c <attention_signal.10467+0x10>
		  }

		  WS2812_Send();
 8003444:	f7ff fd46 	bl	8002ed4 <WS2812_Send>
		  HAL_Delay(700);
 8003448:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800344c:	f001 fba0 	bl	8004b90 <HAL_Delay>

		  for (int i = 0; i < 30; i++) {
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	e008      	b.n	8003468 <attention_signal.10467+0x4c>
			  Set_LED(i, 0, 0, 0);
 8003456:	2300      	movs	r3, #0
 8003458:	2200      	movs	r2, #0
 800345a:	2100      	movs	r1, #0
 800345c:	68b8      	ldr	r0, [r7, #8]
 800345e:	f7ff fd0b 	bl	8002e78 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b1d      	cmp	r3, #29
 800346c:	ddf3      	ble.n	8003456 <attention_signal.10467+0x3a>
		  }

		  WS2812_Send();
 800346e:	f7ff fd31 	bl	8002ed4 <WS2812_Send>
		  HAL_Delay(550);
 8003472:	f240 2026 	movw	r0, #550	; 0x226
 8003476:	f001 fb8b 	bl	8004b90 <HAL_Delay>

	  };
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	0000      	movs	r0, r0
 8003484:	0000      	movs	r0, r0
	...

08003488 <main>:
{
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b085      	sub	sp, #20
 800348c:	af02      	add	r7, sp, #8
int main(void)
 800348e:	f107 0318 	add.w	r3, r7, #24
 8003492:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003494:	f001 fb0a 	bl	8004aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003498:	f000 f9c6 	bl	8003828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800349c:	f7fe fe00 	bl	80020a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80034a0:	f7fe ff36 	bl	8002310 <MX_I2C1_Init>
  MX_SPI1_Init();
 80034a4:	f000 fa38 	bl	8003918 <MX_SPI1_Init>
  MX_DMA_Init();
 80034a8:	f7fe fdd2 	bl	8002050 <MX_DMA_Init>
  MX_USB_HOST_Init();
 80034ac:	f00c ff76 	bl	801039c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80034b0:	f001 f90e 	bl	80046d0 <MX_TIM1_Init>
  MX_ADC1_Init();
 80034b4:	f7fe fcf4 	bl	8001ea0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80034b8:	f000 fa64 	bl	8003984 <MX_SPI2_Init>
  MX_TIM10_Init();
 80034bc:	f001 f9a8 	bl	8004810 <MX_TIM10_Init>
  MX_I2C2_Init();
 80034c0:	f7fe ff54 	bl	800236c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  lcd1.hw_conf.spi_handle = &hspi2;
 80034c4:	4b7c      	ldr	r3, [pc, #496]	; (80036b8 <main+0x230>)
 80034c6:	4a7d      	ldr	r2, [pc, #500]	; (80036bc <main+0x234>)
 80034c8:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 80034ca:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <main+0x230>)
 80034cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034d0:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 80034d2:	4b79      	ldr	r3, [pc, #484]	; (80036b8 <main+0x230>)
 80034d4:	4a7a      	ldr	r2, [pc, #488]	; (80036c0 <main+0x238>)
 80034d6:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 80034d8:	4b77      	ldr	r3, [pc, #476]	; (80036b8 <main+0x230>)
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 80034de:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <main+0x230>)
 80034e0:	4a77      	ldr	r2, [pc, #476]	; (80036c0 <main+0x238>)
 80034e2:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 80034e4:	4b74      	ldr	r3, [pc, #464]	; (80036b8 <main+0x230>)
 80034e6:	2202      	movs	r2, #2
 80034e8:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 80034ea:	4b73      	ldr	r3, [pc, #460]	; (80036b8 <main+0x230>)
 80034ec:	4a74      	ldr	r2, [pc, #464]	; (80036c0 <main+0x238>)
 80034ee:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 80034f0:	4b71      	ldr	r3, [pc, #452]	; (80036b8 <main+0x230>)
 80034f2:	4a74      	ldr	r2, [pc, #464]	; (80036c4 <main+0x23c>)
 80034f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034f8:	4614      	mov	r4, r2
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	6861      	ldr	r1, [r4, #4]
 80034fe:	68a2      	ldr	r2, [r4, #8]
 8003500:	c307      	stmia	r3!, {r0, r1, r2}
 8003502:	89a2      	ldrh	r2, [r4, #12]
 8003504:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8003506:	2303      	movs	r3, #3
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2302      	movs	r3, #2
 800350c:	2240      	movs	r2, #64	; 0x40
 800350e:	210c      	movs	r1, #12
 8003510:	4869      	ldr	r0, [pc, #420]	; (80036b8 <main+0x230>)
 8003512:	f7ff fbbf 	bl	8002c94 <LCD5110_init>

  if (BSP_ACCELERO_Init() != HAL_OK) {
 8003516:	f000 fdd5 	bl	80040c4 <BSP_ACCELERO_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <main+0xa4>
    /* Initialization Error */
	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 8003520:	4a65      	ldr	r2, [pc, #404]	; (80036b8 <main+0x230>)
 8003522:	2101      	movs	r1, #1
 8003524:	4868      	ldr	r0, [pc, #416]	; (80036c8 <main+0x240>)
 8003526:	f7ff f846 	bl	80025b6 <LCD5110_print>
	  while(1){}
 800352a:	e7fe      	b.n	800352a <main+0xa2>
  }

  if (BSP_GYRO_Init() != HAL_OK) {
 800352c:	f000 feb8 	bl	80042a0 <BSP_GYRO_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <main+0xba>
	  /* Initialization Error */
	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 8003536:	4a60      	ldr	r2, [pc, #384]	; (80036b8 <main+0x230>)
 8003538:	2101      	movs	r1, #1
 800353a:	4863      	ldr	r0, [pc, #396]	; (80036c8 <main+0x240>)
 800353c:	f7ff f83b 	bl	80025b6 <LCD5110_print>
	  while(1){}
 8003540:	e7fe      	b.n	8003540 <main+0xb8>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MPU6050_Init_L();
 8003542:	f7ff fd35 	bl	8002fb0 <MPU6050_Init_L>
  MPU6050_Init_R();
 8003546:	f7ff fd89 	bl	800305c <MPU6050_Init_R>
  TIM10_reinit();
 800354a:	f7ff fc6b 	bl	8002e24 <TIM10_reinit>
  LCD5110_print("Hello world!\n", BLACK, &lcd1);
 800354e:	4a5a      	ldr	r2, [pc, #360]	; (80036b8 <main+0x230>)
 8003550:	2101      	movs	r1, #1
 8003552:	485e      	ldr	r0, [pc, #376]	; (80036cc <main+0x244>)
 8003554:	f7ff f82f 	bl	80025b6 <LCD5110_print>

  while (1)
  {
	  if ((Lz > 0.90 || Rx > 0.90) & fall_down == 0) {
 8003558:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <main+0x248>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc fffb 	bl	8000558 <__aeabi_f2d>
 8003562:	a353      	add	r3, pc, #332	; (adr r3, 80036b0 <main+0x228>)
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f7fd fade 	bl	8000b28 <__aeabi_dcmpgt>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10c      	bne.n	800358c <main+0x104>
 8003572:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <main+0x24c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ffee 	bl	8000558 <__aeabi_f2d>
 800357c:	a34c      	add	r3, pc, #304	; (adr r3, 80036b0 <main+0x228>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	f7fd fad1 	bl	8000b28 <__aeabi_dcmpgt>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <main+0x108>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <main+0x10a>
 8003590:	2300      	movs	r3, #0
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	b2da      	uxtb	r2, r3
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <main+0x250>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	4013      	ands	r3, r2
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <main+0x132>
		  turn_signal(1);
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	469c      	mov	ip, r3
 80035b2:	2001      	movs	r0, #1
 80035b4:	f000 f8aa 	bl	800370c <turn_signal.10478>
 80035b8:	e047      	b.n	800364a <main+0x1c2>
	  } else if ((Rz > 0.90 || Lx > 0.90) & fall_down == 0) {
 80035ba:	4b48      	ldr	r3, [pc, #288]	; (80036dc <main+0x254>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fc ffca 	bl	8000558 <__aeabi_f2d>
 80035c4:	a33a      	add	r3, pc, #232	; (adr r3, 80036b0 <main+0x228>)
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f7fd faad 	bl	8000b28 <__aeabi_dcmpgt>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10c      	bne.n	80035ee <main+0x166>
 80035d4:	4b42      	ldr	r3, [pc, #264]	; (80036e0 <main+0x258>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc ffbd 	bl	8000558 <__aeabi_f2d>
 80035de:	a334      	add	r3, pc, #208	; (adr r3, 80036b0 <main+0x228>)
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f7fd faa0 	bl	8000b28 <__aeabi_dcmpgt>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <main+0x16a>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <main+0x16c>
 80035f2:	2300      	movs	r3, #0
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <main+0x250>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	4013      	ands	r3, r2
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d006      	beq.n	800361e <main+0x196>
		  turn_signal(-1);
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	469c      	mov	ip, r3
 8003614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003618:	f000 f878 	bl	800370c <turn_signal.10478>
 800361c:	e015      	b.n	800364a <main+0x1c2>
		} else if (button_is_pressed) {
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <main+0x25c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <main+0x1a8>
			warning_signal();
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	469c      	mov	ip, r3
 800362a:	f000 f8be 	bl	80037aa <warning_signal.10493>
 800362e:	e00c      	b.n	800364a <main+0x1c2>
		} else if (fall_down) {
 8003630:	4b29      	ldr	r3, [pc, #164]	; (80036d8 <main+0x250>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d004      	beq.n	8003642 <main+0x1ba>
			warning_signal();
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	469c      	mov	ip, r3
 800363c:	f000 f8b5 	bl	80037aa <warning_signal.10493>
 8003640:	e003      	b.n	800364a <main+0x1c2>
		}
	  else {
			attention_signal();
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	469c      	mov	ip, r3
 8003646:	f7ff fee9 	bl	800341c <attention_signal.10467>
		}

	 LCD5110_printf(&lcd1, BLACK, "Fx=%f \n", Fall_Down_X);
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <main+0x260>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	e9cd 2300 	strd	r2, r3, [sp]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <main+0x264>)
 8003656:	2101      	movs	r1, #1
 8003658:	4817      	ldr	r0, [pc, #92]	; (80036b8 <main+0x230>)
 800365a:	f7ff f8b5 	bl	80027c8 <LCD5110_printf>
	 LCD5110_printf(&lcd1, BLACK, "Fy=%f \n", Fall_Down_Y);
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <main+0x268>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	e9cd 2300 	strd	r2, r3, [sp]
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <main+0x26c>)
 800366a:	2101      	movs	r1, #1
 800366c:	4812      	ldr	r0, [pc, #72]	; (80036b8 <main+0x230>)
 800366e:	f7ff f8ab 	bl	80027c8 <LCD5110_printf>
	 LCD5110_printf(&lcd1, BLACK, "Fz=%f \n", Fall_Down_Z);
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <main+0x270>)
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	e9cd 2300 	strd	r2, r3, [sp]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <main+0x274>)
 800367e:	2101      	movs	r1, #1
 8003680:	480d      	ldr	r0, [pc, #52]	; (80036b8 <main+0x230>)
 8003682:	f7ff f8a1 	bl	80027c8 <LCD5110_printf>


	 LCD5110_printf(&lcd1, BLACK, "Count=%i \n", loop_counter);
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <main+0x278>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <main+0x27c>)
 800368c:	2101      	movs	r1, #1
 800368e:	480a      	ldr	r0, [pc, #40]	; (80036b8 <main+0x230>)
 8003690:	f7ff f89a 	bl	80027c8 <LCD5110_printf>
	 LCD5110_printf(&lcd1, BLACK, "Fall_Down=%i \n", fall_down);
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <main+0x250>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <main+0x280>)
 800369a:	2101      	movs	r1, #1
 800369c:	4806      	ldr	r0, [pc, #24]	; (80036b8 <main+0x230>)
 800369e:	f7ff f893 	bl	80027c8 <LCD5110_printf>

//
	 LCD5110_clear_scr(&lcd1);
 80036a2:	4805      	ldr	r0, [pc, #20]	; (80036b8 <main+0x230>)
 80036a4:	f7fe ff76 	bl	8002594 <LCD5110_clear_scr>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80036a8:	f00c fe9e 	bl	80103e8 <MX_USB_HOST_Process>
	  if ((Lz > 0.90 || Rx > 0.90) & fall_down == 0) {
 80036ac:	e754      	b.n	8003558 <main+0xd0>
 80036ae:	bf00      	nop
 80036b0:	cccccccd 	.word	0xcccccccd
 80036b4:	3feccccc 	.word	0x3feccccc
 80036b8:	2000055c 	.word	0x2000055c
 80036bc:	20000da8 	.word	0x20000da8
 80036c0:	40020400 	.word	0x40020400
 80036c4:	08014034 	.word	0x08014034
 80036c8:	08013798 	.word	0x08013798
 80036cc:	080137b0 	.word	0x080137b0
 80036d0:	20000da0 	.word	0x20000da0
 80036d4:	20000854 	.word	0x20000854
 80036d8:	200002f4 	.word	0x200002f4
 80036dc:	20000850 	.word	0x20000850
 80036e0:	20000da4 	.word	0x20000da4
 80036e4:	20000300 	.word	0x20000300
 80036e8:	20000320 	.word	0x20000320
 80036ec:	080137c0 	.word	0x080137c0
 80036f0:	20000328 	.word	0x20000328
 80036f4:	080137c8 	.word	0x080137c8
 80036f8:	20000330 	.word	0x20000330
 80036fc:	080137d0 	.word	0x080137d0
 8003700:	20000304 	.word	0x20000304
 8003704:	080137d8 	.word	0x080137d8
 8003708:	080137e4 	.word	0x080137e4

0800370c <turn_signal.10478>:
	  void turn_signal (int direction) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	f8c7 c000 	str.w	ip, [r7]
		  int mid = MAX_LED / 2;
 8003718:	230d      	movs	r3, #13
 800371a:	60bb      	str	r3, [r7, #8]
		  if (direction == -1) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003722:	d113      	bne.n	800374c <turn_signal.10478+0x40>
			  for (int i = mid; i >= 0; i--) {
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e00d      	b.n	8003746 <turn_signal.10478+0x3a>
				  Set_LED(i, 255, 69, 0);
 800372a:	2300      	movs	r3, #0
 800372c:	2245      	movs	r2, #69	; 0x45
 800372e:	21ff      	movs	r1, #255	; 0xff
 8003730:	6978      	ldr	r0, [r7, #20]
 8003732:	f7ff fba1 	bl	8002e78 <Set_LED>
				  WS2812_Send();
 8003736:	f7ff fbcd 	bl	8002ed4 <WS2812_Send>
				  HAL_Delay(30);
 800373a:	201e      	movs	r0, #30
 800373c:	f001 fa28 	bl	8004b90 <HAL_Delay>
			  for (int i = mid; i >= 0; i--) {
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3b01      	subs	r3, #1
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	daee      	bge.n	800372a <turn_signal.10478+0x1e>
		  if (direction == 1) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d113      	bne.n	800377a <turn_signal.10478+0x6e>
			  for (int i = mid; i < MAX_LED; i++) {
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e00d      	b.n	8003774 <turn_signal.10478+0x68>
				  Set_LED(i, 255, 69, 0);
 8003758:	2300      	movs	r3, #0
 800375a:	2245      	movs	r2, #69	; 0x45
 800375c:	21ff      	movs	r1, #255	; 0xff
 800375e:	6938      	ldr	r0, [r7, #16]
 8003760:	f7ff fb8a 	bl	8002e78 <Set_LED>
				  WS2812_Send();
 8003764:	f7ff fbb6 	bl	8002ed4 <WS2812_Send>
				  HAL_Delay(30);
 8003768:	201e      	movs	r0, #30
 800376a:	f001 fa11 	bl	8004b90 <HAL_Delay>
			  for (int i = mid; i < MAX_LED; i++) {
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3301      	adds	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	2b19      	cmp	r3, #25
 8003778:	ddee      	ble.n	8003758 <turn_signal.10478+0x4c>
		 for (int i = 0; i < MAX_LED; i++) {
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	e008      	b.n	8003792 <turn_signal.10478+0x86>
			 Set_LED(i, 0, 0, 0);
 8003780:	2300      	movs	r3, #0
 8003782:	2200      	movs	r2, #0
 8003784:	2100      	movs	r1, #0
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff fb76 	bl	8002e78 <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3301      	adds	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2b19      	cmp	r3, #25
 8003796:	ddf3      	ble.n	8003780 <turn_signal.10478+0x74>
		 HAL_Delay(120);
 8003798:	2078      	movs	r0, #120	; 0x78
 800379a:	f001 f9f9 	bl	8004b90 <HAL_Delay>
		 WS2812_Send();
 800379e:	f7ff fb99 	bl	8002ed4 <WS2812_Send>
	  };
 80037a2:	bf00      	nop
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <warning_signal.10493>:
	  void warning_signal() {
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	f8c7 c004 	str.w	ip, [r7, #4]
		  int mid = MAX_LED / 2;
 80037b4:	230d      	movs	r3, #13
 80037b6:	60fb      	str	r3, [r7, #12]
		  for (int i = 0; i <= mid; i++) {
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e017      	b.n	80037ee <warning_signal.10493+0x44>
			  Set_LED(mid + i, 255, 69, 0);
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	18d0      	adds	r0, r2, r3
 80037c4:	2300      	movs	r3, #0
 80037c6:	2245      	movs	r2, #69	; 0x45
 80037c8:	21ff      	movs	r1, #255	; 0xff
 80037ca:	f7ff fb55 	bl	8002e78 <Set_LED>
			  Set_LED(mid - i, 255, 69, 0);
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1ad0      	subs	r0, r2, r3
 80037d4:	2300      	movs	r3, #0
 80037d6:	2245      	movs	r2, #69	; 0x45
 80037d8:	21ff      	movs	r1, #255	; 0xff
 80037da:	f7ff fb4d 	bl	8002e78 <Set_LED>
			  WS2812_Send();
 80037de:	f7ff fb79 	bl	8002ed4 <WS2812_Send>
			  HAL_Delay(30);
 80037e2:	201e      	movs	r0, #30
 80037e4:	f001 f9d4 	bl	8004b90 <HAL_Delay>
		  for (int i = 0; i <= mid; i++) {
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3301      	adds	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	dde3      	ble.n	80037be <warning_signal.10493+0x14>
		 for (int i = 0; i < MAX_LED; i++) {
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e008      	b.n	800380e <warning_signal.10493+0x64>
		 	Set_LED(i, 0, 0, 0);
 80037fc:	2300      	movs	r3, #0
 80037fe:	2200      	movs	r2, #0
 8003800:	2100      	movs	r1, #0
 8003802:	6938      	ldr	r0, [r7, #16]
 8003804:	f7ff fb38 	bl	8002e78 <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	3301      	adds	r3, #1
 800380c:	613b      	str	r3, [r7, #16]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b19      	cmp	r3, #25
 8003812:	ddf3      	ble.n	80037fc <warning_signal.10493+0x52>
		 HAL_Delay(120);
 8003814:	2078      	movs	r0, #120	; 0x78
 8003816:	f001 f9bb 	bl	8004b90 <HAL_Delay>
		 WS2812_Send();
 800381a:	f7ff fb5b 	bl	8002ed4 <WS2812_Send>
	  };
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
	...

08003828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b094      	sub	sp, #80	; 0x50
 800382c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800382e:	f107 0320 	add.w	r3, r7, #32
 8003832:	2230      	movs	r2, #48	; 0x30
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f00d f8f2 	bl	8010a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800384c:	2300      	movs	r3, #0
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <SystemClock_Config+0xc8>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <SystemClock_Config+0xc8>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	6413      	str	r3, [r2, #64]	; 0x40
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <SystemClock_Config+0xc8>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003868:	2300      	movs	r3, #0
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <SystemClock_Config+0xcc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <SystemClock_Config+0xcc>)
 8003872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <SystemClock_Config+0xcc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003884:	2301      	movs	r3, #1
 8003886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800388e:	2302      	movs	r3, #2
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003898:	2304      	movs	r3, #4
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800389c:	2348      	movs	r3, #72	; 0x48
 800389e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038a0:	2302      	movs	r3, #2
 80038a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80038a4:	2303      	movs	r3, #3
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a8:	f107 0320 	add.w	r3, r7, #32
 80038ac:	4618      	mov	r0, r3
 80038ae:	f005 fddd 	bl	800946c <HAL_RCC_OscConfig>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038b8:	f000 f81e 	bl	80038f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038bc:	230f      	movs	r3, #15
 80038be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c0:	2302      	movs	r3, #2
 80038c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038d2:	f107 030c 	add.w	r3, r7, #12
 80038d6:	2102      	movs	r1, #2
 80038d8:	4618      	mov	r0, r3
 80038da:	f006 f8ef 	bl	8009abc <HAL_RCC_ClockConfig>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80038e4:	f000 f808 	bl	80038f8 <Error_Handler>
  }
}
 80038e8:	bf00      	nop
 80038ea:	3750      	adds	r7, #80	; 0x50
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	40007000 	.word	0x40007000

080038f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038fc:	b672      	cpsid	i
}
 80038fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003900:	e7fe      	b.n	8003900 <Error_Handler+0x8>

08003902 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800391c:	4b17      	ldr	r3, [pc, #92]	; (800397c <MX_SPI1_Init+0x64>)
 800391e:	4a18      	ldr	r2, [pc, #96]	; (8003980 <MX_SPI1_Init+0x68>)
 8003920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003922:	4b16      	ldr	r3, [pc, #88]	; (800397c <MX_SPI1_Init+0x64>)
 8003924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800392a:	4b14      	ldr	r3, [pc, #80]	; (800397c <MX_SPI1_Init+0x64>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <MX_SPI1_Init+0x64>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_SPI1_Init+0x64>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <MX_SPI1_Init+0x64>)
 800393e:	2200      	movs	r2, #0
 8003940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_SPI1_Init+0x64>)
 8003944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_SPI1_Init+0x64>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <MX_SPI1_Init+0x64>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_SPI1_Init+0x64>)
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800395c:	4b07      	ldr	r3, [pc, #28]	; (800397c <MX_SPI1_Init+0x64>)
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_SPI1_Init+0x64>)
 8003964:	220a      	movs	r2, #10
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003968:	4804      	ldr	r0, [pc, #16]	; (800397c <MX_SPI1_Init+0x64>)
 800396a:	f006 fb37 	bl	8009fdc <HAL_SPI_Init>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003974:	f7ff ffc0 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	20000e00 	.word	0x20000e00
 8003980:	40013000 	.word	0x40013000

08003984 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003988:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <MX_SPI2_Init+0x64>)
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <MX_SPI2_Init+0x68>)
 800398c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800398e:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <MX_SPI2_Init+0x64>)
 8003990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003994:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003996:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <MX_SPI2_Init+0x64>)
 8003998:	2200      	movs	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800399c:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <MX_SPI2_Init+0x64>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039a8:	4b0f      	ldr	r3, [pc, #60]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80039ae:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039b8:	2210      	movs	r2, #16
 80039ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039be:	2200      	movs	r2, #0
 80039c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c8:	4b07      	ldr	r3, [pc, #28]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039d0:	220a      	movs	r2, #10
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039d4:	4804      	ldr	r0, [pc, #16]	; (80039e8 <MX_SPI2_Init+0x64>)
 80039d6:	f006 fb01 	bl	8009fdc <HAL_SPI_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80039e0:	f7ff ff8a 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000da8 	.word	0x20000da8
 80039ec:	40003800 	.word	0x40003800

080039f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	; 0x30
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
 8003a04:	60da      	str	r2, [r3, #12]
 8003a06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a32      	ldr	r2, [pc, #200]	; (8003ad8 <HAL_SPI_MspInit+0xe8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d12c      	bne.n	8003a6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a30      	ldr	r2, [pc, #192]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a29      	ldr	r2, [pc, #164]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b27      	ldr	r3, [pc, #156]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003a4a:	23e0      	movs	r3, #224	; 0xe0
 8003a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a56:	2303      	movs	r3, #3
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a5a:	2305      	movs	r3, #5
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5e:	f107 031c 	add.w	r3, r7, #28
 8003a62:	4619      	mov	r1, r3
 8003a64:	481e      	ldr	r0, [pc, #120]	; (8003ae0 <HAL_SPI_MspInit+0xf0>)
 8003a66:	f002 fae3 	bl	8006030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a6a:	e031      	b.n	8003ad0 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_SPI_MspInit+0xf4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d12c      	bne.n	8003ad0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	4b18      	ldr	r3, [pc, #96]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a84:	6413      	str	r3, [r2, #64]	; 0x40
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_SPI_MspInit+0xec>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003aae:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003abc:	2303      	movs	r3, #3
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ac0:	2305      	movs	r3, #5
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <HAL_SPI_MspInit+0xf8>)
 8003acc:	f002 fab0 	bl	8006030 <HAL_GPIO_Init>
}
 8003ad0:	bf00      	nop
 8003ad2:	3730      	adds	r7, #48	; 0x30
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40013000 	.word	0x40013000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40003800 	.word	0x40003800
 8003ae8:	40020400 	.word	0x40020400

08003aec <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <HAL_SPI_MspDeInit+0x50>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10a      	bne.n	8003b14 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <HAL_SPI_MspDeInit+0x54>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	4a0f      	ldr	r2, [pc, #60]	; (8003b40 <HAL_SPI_MspDeInit+0x54>)
 8003b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b08:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8003b0a:	21e0      	movs	r1, #224	; 0xe0
 8003b0c:	480d      	ldr	r0, [pc, #52]	; (8003b44 <HAL_SPI_MspDeInit+0x58>)
 8003b0e:	f002 fd2b 	bl	8006568 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8003b12:	e00f      	b.n	8003b34 <HAL_SPI_MspDeInit+0x48>
  else if(spiHandle->Instance==SPI2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <HAL_SPI_MspDeInit+0x5c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10a      	bne.n	8003b34 <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <HAL_SPI_MspDeInit+0x54>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a07      	ldr	r2, [pc, #28]	; (8003b40 <HAL_SPI_MspDeInit+0x54>)
 8003b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8003b2a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003b2e:	4807      	ldr	r0, [pc, #28]	; (8003b4c <HAL_SPI_MspDeInit+0x60>)
 8003b30:	f002 fd1a 	bl	8006568 <HAL_GPIO_DeInit>
}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40013000 	.word	0x40013000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40003800 	.word	0x40003800
 8003b4c:	40020400 	.word	0x40020400

08003b50 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003b54:	4814      	ldr	r0, [pc, #80]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b56:	f005 f91f 	bl	8008d98 <HAL_I2C_GetState>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d121      	bne.n	8003ba4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <I2Cx_Init+0x5c>)
 8003b64:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8003b66:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b68:	2243      	movs	r2, #67	; 0x43
 8003b6a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b6e:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <I2Cx_Init+0x60>)
 8003b70:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b7e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8003b98:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <I2Cx_Init+0x58>)
 8003b9a:	f000 f86b 	bl	8003c74 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003b9e:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <I2Cx_Init+0x58>)
 8003ba0:	f004 fbaa 	bl	80082f8 <HAL_I2C_Init>
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000344 	.word	0x20000344
 8003bac:	40005400 	.word	0x40005400
 8003bb0:	000186a0 	.word	0x000186a0

08003bb4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af04      	add	r7, sp, #16
 8003bba:	4603      	mov	r3, r0
 8003bbc:	80fb      	strh	r3, [r7, #6]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	717b      	strb	r3, [r7, #5]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8003bca:	797b      	ldrb	r3, [r7, #5]
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <I2Cx_WriteData+0x48>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	88f9      	ldrh	r1, [r7, #6]
 8003bd4:	9302      	str	r3, [sp, #8]
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	9301      	str	r3, [sp, #4]
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2301      	movs	r3, #1
 8003be0:	4807      	ldr	r0, [pc, #28]	; (8003c00 <I2Cx_WriteData+0x4c>)
 8003be2:	f004 fda1 	bl	8008728 <HAL_I2C_Mem_Write>
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8003bf0:	f000 f834 	bl	8003c5c <I2Cx_Error>
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200000d0 	.word	0x200000d0
 8003c00:	20000344 	.word	0x20000344

08003c04 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af04      	add	r7, sp, #16
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	80fb      	strh	r3, [r7, #6]
 8003c10:	4613      	mov	r3, r2
 8003c12:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003c1c:	797b      	ldrb	r3, [r7, #5]
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <I2Cx_ReadData+0x50>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	88f9      	ldrh	r1, [r7, #6]
 8003c26:	9302      	str	r3, [sp, #8]
 8003c28:	2301      	movs	r3, #1
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	f107 030e 	add.w	r3, r7, #14
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2301      	movs	r3, #1
 8003c34:	4808      	ldr	r0, [pc, #32]	; (8003c58 <I2Cx_ReadData+0x54>)
 8003c36:	f004 fe7d 	bl	8008934 <HAL_I2C_Mem_Read>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8003c44:	f000 f80a 	bl	8003c5c <I2Cx_Error>
  }
  return value;
 8003c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200000d0 	.word	0x200000d0
 8003c58:	20000344 	.word	0x20000344

08003c5c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003c60:	4803      	ldr	r0, [pc, #12]	; (8003c70 <I2Cx_Error+0x14>)
 8003c62:	f004 fd15 	bl	8008690 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8003c66:	f7ff ff73 	bl	8003b50 <I2Cx_Init>
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000344 	.word	0x20000344

08003c74 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003ca2:	f043 0302 	orr.w	r3, r3, #2
 8003ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8003cb4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8003cba:	2312      	movs	r3, #18
 8003cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8003cca:	f107 0314 	add.w	r3, r7, #20
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4812      	ldr	r0, [pc, #72]	; (8003d1c <I2Cx_MspInit+0xa8>)
 8003cd2:	f002 f9ad 	bl	8006030 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a0f      	ldr	r2, [pc, #60]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ce0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <I2Cx_MspInit+0xa4>)
 8003ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cec:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	210f      	movs	r1, #15
 8003cf2:	201f      	movs	r0, #31
 8003cf4:	f001 fc3e 	bl	8005574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003cf8:	201f      	movs	r0, #31
 8003cfa:	f001 fc67 	bl	80055cc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	210f      	movs	r1, #15
 8003d02:	2020      	movs	r0, #32
 8003d04:	f001 fc36 	bl	8005574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8003d08:	2020      	movs	r0, #32
 8003d0a:	f001 fc5f 	bl	80055cc <HAL_NVIC_EnableIRQ>
}
 8003d0e:	bf00      	nop
 8003d10:	3728      	adds	r7, #40	; 0x28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40020400 	.word	0x40020400

08003d20 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization.
  */
static void SPIx_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003d24:	4819      	ldr	r0, [pc, #100]	; (8003d8c <SPIx_Init+0x6c>)
 8003d26:	f006 fe41 	bl	800a9ac <HAL_SPI_GetState>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d12b      	bne.n	8003d88 <SPIx_Init+0x68>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003d30:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <SPIx_Init+0x6c>)
 8003d32:	4a17      	ldr	r2, [pc, #92]	; (8003d90 <SPIx_Init+0x70>)
 8003d34:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <SPIx_Init+0x6c>)
 8003d38:	2210      	movs	r2, #16
 8003d3a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <SPIx_Init+0x6c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <SPIx_Init+0x6c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <SPIx_Init+0x6c>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <SPIx_Init+0x6c>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8003d54:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <SPIx_Init+0x6c>)
 8003d56:	2207      	movs	r2, #7
 8003d58:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <SPIx_Init+0x6c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <SPIx_Init+0x6c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <SPIx_Init+0x6c>)
 8003d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d6c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <SPIx_Init+0x6c>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <SPIx_Init+0x6c>)
 8003d76:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d7a:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit(&SpiHandle);
 8003d7c:	4803      	ldr	r0, [pc, #12]	; (8003d8c <SPIx_Init+0x6c>)
 8003d7e:	f000 f835 	bl	8003dec <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003d82:	4802      	ldr	r0, [pc, #8]	; (8003d8c <SPIx_Init+0x6c>)
 8003d84:	f006 f92a 	bl	8009fdc <HAL_SPI_Init>
  }
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000398 	.word	0x20000398
 8003d90:	40013000 	.word	0x40013000

08003d94 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <SPIx_WriteRead+0x38>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f107 020f 	add.w	r2, r7, #15
 8003daa:	1df9      	adds	r1, r7, #7
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2301      	movs	r3, #1
 8003db0:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <SPIx_WriteRead+0x3c>)
 8003db2:	f006 fc4d 	bl	800a650 <HAL_SPI_TransmitReceive>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8003dbc:	f000 f80a 	bl	8003dd4 <SPIx_Error>
  }
  
  return receivedbyte;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	200000d4 	.word	0x200000d4
 8003dd0:	20000398 	.word	0x20000398

08003dd4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error (void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003dd8:	4803      	ldr	r0, [pc, #12]	; (8003de8 <SPIx_Error+0x14>)
 8003dda:	f006 fa9b 	bl	800a314 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8003dde:	f7ff ff9f 	bl	8003d20 <SPIx_Init>
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	20000398 	.word	0x20000398

08003dec <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <SPIx_MspInit+0x68>)
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	4a15      	ldr	r2, [pc, #84]	; (8003e54 <SPIx_MspInit+0x68>)
 8003dfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e02:	6453      	str	r3, [r2, #68]	; 0x44
 8003e04:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <SPIx_MspInit+0x68>)
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	693b      	ldr	r3, [r7, #16]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <SPIx_MspInit+0x68>)
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <SPIx_MspInit+0x68>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <SPIx_MspInit+0x68>)
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003e2c:	23e0      	movs	r3, #224	; 0xe0
 8003e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8003e34:	2302      	movs	r3, #2
 8003e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003e3c:	2305      	movs	r3, #5
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8003e40:	f107 0314 	add.w	r3, r7, #20
 8003e44:	4619      	mov	r1, r3
 8003e46:	4804      	ldr	r0, [pc, #16]	; (8003e58 <SPIx_MspInit+0x6c>)
 8003e48:	f002 f8f2 	bl	8006030 <HAL_GPIO_Init>
}
 8003e4c:	bf00      	nop
 8003e4e:	3728      	adds	r7, #40	; 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40020000 	.word	0x40020000

08003e5c <GYRO_IO_Init>:
/********************************* LINK GYROSCOPE *****************************/
/**
  * @brief  Configures the GYRO SPI interface.
  */
void GYRO_IO_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <GYRO_IO_Init+0x8c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ee8 <GYRO_IO_Init+0x8c>)
 8003e6c:	f043 0310 	orr.w	r3, r3, #16
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b1d      	ldr	r3, [pc, #116]	; (8003ee8 <GYRO_IO_Init+0x8c>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003e82:	2301      	movs	r3, #1
 8003e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	4619      	mov	r1, r3
 8003e94:	4815      	ldr	r0, [pc, #84]	; (8003eec <GYRO_IO_Init+0x90>)
 8003e96:	f002 f8cb 	bl	8006030 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2108      	movs	r1, #8
 8003e9e:	4813      	ldr	r0, [pc, #76]	; (8003eec <GYRO_IO_Init+0x90>)
 8003ea0:	f002 fc64 	bl	800676c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <GYRO_IO_Init+0x8c>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	4a0e      	ldr	r2, [pc, #56]	; (8003ee8 <GYRO_IO_Init+0x8c>)
 8003eae:	f043 0310 	orr.w	r3, r3, #16
 8003eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <GYRO_IO_Init+0x8c>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003ed0:	f107 030c 	add.w	r3, r7, #12
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4805      	ldr	r0, [pc, #20]	; (8003eec <GYRO_IO_Init+0x90>)
 8003ed8:	f002 f8aa 	bl	8006030 <HAL_GPIO_Init>
  
  SPIx_Init();
 8003edc:	f7ff ff20 	bl	8003d20 <SPIx_Init>
}
 8003ee0:	bf00      	nop
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40021000 	.word	0x40021000

08003ef0 <GYRO_IO_Write>:
  * @param  pBuffer: pointer to the buffer  containing the data to be written to the GYRO.
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
 8003efc:	4613      	mov	r3, r2
 8003efe:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8003f00:	883b      	ldrh	r3, [r7, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d903      	bls.n	8003f0e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f0c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2108      	movs	r1, #8
 8003f12:	480f      	ldr	r0, [pc, #60]	; (8003f50 <GYRO_IO_Write+0x60>)
 8003f14:	f002 fc2a 	bl	800676c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff3a 	bl	8003d94 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8003f20:	e00a      	b.n	8003f38 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff ff34 	bl	8003d94 <SPIx_WriteRead>
    NumByteToWrite--;
 8003f2c:	883b      	ldrh	r3, [r7, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3301      	adds	r3, #1
 8003f36:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8003f38:	883b      	ldrh	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f1      	bne.n	8003f22 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003f3e:	2201      	movs	r2, #1
 8003f40:	2108      	movs	r1, #8
 8003f42:	4803      	ldr	r0, [pc, #12]	; (8003f50 <GYRO_IO_Write+0x60>)
 8003f44:	f002 fc12 	bl	800676c <HAL_GPIO_WritePin>
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000

08003f54 <GYRO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the GYRO.
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
 8003f60:	4613      	mov	r3, r2
 8003f62:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8003f64:	883b      	ldrh	r3, [r7, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d904      	bls.n	8003f74 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003f70:	70fb      	strb	r3, [r7, #3]
 8003f72:	e003      	b.n	8003f7c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f7a:	70fb      	strb	r3, [r7, #3]
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2108      	movs	r1, #8
 8003f80:	4810      	ldr	r0, [pc, #64]	; (8003fc4 <GYRO_IO_Read+0x70>)
 8003f82:	f002 fbf3 	bl	800676c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff03 	bl	8003d94 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8003f8e:	e00c      	b.n	8003faa <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYRO (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8003f90:	2000      	movs	r0, #0
 8003f92:	f7ff feff 	bl	8003d94 <SPIx_WriteRead>
 8003f96:	4603      	mov	r3, r0
 8003f98:	461a      	mov	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8003f9e:	883b      	ldrh	r3, [r7, #0]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8003faa:	883b      	ldrh	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ef      	bne.n	8003f90 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	2108      	movs	r1, #8
 8003fb4:	4803      	ldr	r0, [pc, #12]	; (8003fc4 <GYRO_IO_Read+0x70>)
 8003fb6:	f002 fbd9 	bl	800676c <HAL_GPIO_WritePin>
}  
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000

08003fc8 <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <COMPASSACCELERO_IO_Init+0x48>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <COMPASSACCELERO_IO_Init+0x48>)
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <COMPASSACCELERO_IO_Init+0x48>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8003fea:	2304      	movs	r3, #4
 8003fec:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4805      	ldr	r0, [pc, #20]	; (8004014 <COMPASSACCELERO_IO_Init+0x4c>)
 8004000:	f002 f816 	bl	8006030 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8004004:	f7ff fda4 	bl	8003b50 <I2Cx_Init>
}
 8004008:	bf00      	nop
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	40021000 	.word	0x40021000

08004018 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a12      	ldr	r2, [pc, #72]	; (8004070 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004028:	f043 0310 	orr.w	r3, r3, #16
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800403a:	2330      	movs	r3, #48	; 0x30
 800403c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800403e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004044:	2302      	movs	r3, #2
 8004046:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4808      	ldr	r0, [pc, #32]	; (8004074 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8004052:	f001 ffed 	bl	8006030 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8004056:	2200      	movs	r2, #0
 8004058:	210f      	movs	r1, #15
 800405a:	200a      	movs	r0, #10
 800405c:	f001 fa8a 	bl	8005574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8004060:	200a      	movs	r0, #10
 8004062:	f001 fab3 	bl	80055cc <HAL_NVIC_EnableIRQ>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	40021000 	.word	0x40021000

08004078 <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	4603      	mov	r3, r0
 8004080:	80fb      	strh	r3, [r7, #6]
 8004082:	460b      	mov	r3, r1
 8004084:	717b      	strb	r3, [r7, #5]
 8004086:	4613      	mov	r3, r2
 8004088:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 800408a:	793a      	ldrb	r2, [r7, #4]
 800408c:	7979      	ldrb	r1, [r7, #5]
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fd8f 	bl	8003bb4 <I2Cx_WriteData>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	460a      	mov	r2, r1
 80040a8:	80fb      	strh	r3, [r7, #6]
 80040aa:	4613      	mov	r3, r2
 80040ac:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 80040ae:	797a      	ldrb	r2, [r7, #5]
 80040b0:	88fb      	ldrh	r3, [r7, #6]
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fda5 	bl	8003c04 <I2Cx_ReadData>
 80040ba:	4603      	mov	r3, r0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80040ce:	2300      	movs	r3, #0
 80040d0:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80040da:	4b58      	ldr	r3, [pc, #352]	; (800423c <BSP_ACCELERO_Init+0x178>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4798      	blx	r3
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b33      	cmp	r3, #51	; 0x33
 80040e4:	d14f      	bne.n	8004186 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80040e6:	4b56      	ldr	r3, [pc, #344]	; (8004240 <BSP_ACCELERO_Init+0x17c>)
 80040e8:	4a54      	ldr	r2, [pc, #336]	; (800423c <BSP_ACCELERO_Init+0x178>)
 80040ea:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80040f4:	2307      	movs	r3, #7
 80040f6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80040f8:	2300      	movs	r3, #0
 80040fa:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 80040fc:	2300      	movs	r3, #0
 80040fe:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8004100:	2300      	movs	r3, #0
 8004102:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8004104:	2308      	movs	r3, #8
 8004106:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004108:	7b3a      	ldrb	r2, [r7, #12]
 800410a:	7b7b      	ldrb	r3, [r7, #13]
 800410c:	4313      	orrs	r3, r2
 800410e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8004110:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004112:	4313      	orrs	r3, r2
 8004114:	b2db      	uxtb	r3, r3
 8004116:	b29a      	uxth	r2, r3
 8004118:	8abb      	ldrh	r3, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800411e:	7c3a      	ldrb	r2, [r7, #16]
 8004120:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8004122:	4313      	orrs	r3, r2
 8004124:	b2da      	uxtb	r2, r3
 8004126:	7cbb      	ldrb	r3, [r7, #18]
 8004128:	4313      	orrs	r3, r2
 800412a:	b2da      	uxtb	r2, r3
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	4313      	orrs	r3, r2
 8004130:	b2db      	uxtb	r3, r3
 8004132:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8004134:	b21a      	sxth	r2, r3
 8004136:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	b21b      	sxth	r3, r3
 800413e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004140:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <BSP_ACCELERO_Init+0x17c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	8aba      	ldrh	r2, [r7, #20]
 8004148:	4610      	mov	r0, r2
 800414a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8004150:	2310      	movs	r3, #16
 8004152:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8004154:	2300      	movs	r3, #0
 8004156:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8004158:	2300      	movs	r3, #0
 800415a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800415c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800415e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004160:	4313      	orrs	r3, r2
 8004162:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8004164:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004166:	4313      	orrs	r3, r2
 8004168:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800416a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800416c:	4313      	orrs	r3, r2
 800416e:	b2db      	uxtb	r3, r3
 8004170:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8004172:	4b33      	ldr	r3, [pc, #204]	; (8004240 <BSP_ACCELERO_Init+0x17c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	8aba      	ldrh	r2, [r7, #20]
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	4610      	mov	r0, r2
 800417e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	75fb      	strb	r3, [r7, #23]
 8004184:	e054      	b.n	8004230 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <BSP_ACCELERO_Init+0x180>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4798      	blx	r3
 800418c:	4603      	mov	r3, r0
 800418e:	2b33      	cmp	r3, #51	; 0x33
 8004190:	d14e      	bne.n	8004230 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8004192:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <BSP_ACCELERO_Init+0x17c>)
 8004194:	4a2b      	ldr	r2, [pc, #172]	; (8004244 <BSP_ACCELERO_Init+0x180>)
 8004196:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8004198:	2300      	movs	r3, #0
 800419a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 800419c:	2340      	movs	r3, #64	; 0x40
 800419e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 80041a0:	2307      	movs	r3, #7
 80041a2:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 80041a4:	2300      	movs	r3, #0
 80041a6:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 80041a8:	2300      	movs	r3, #0
 80041aa:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 80041ac:	2300      	movs	r3, #0
 80041ae:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 80041b0:	2308      	movs	r3, #8
 80041b2:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80041b4:	7b3a      	ldrb	r2, [r7, #12]
 80041b6:	7b7b      	ldrb	r3, [r7, #13]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80041bc:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80041be:	4313      	orrs	r3, r2
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	8abb      	ldrh	r3, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80041ca:	7c3a      	ldrb	r2, [r7, #16]
 80041cc:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	7cbb      	ldrb	r3, [r7, #18]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	4313      	orrs	r3, r2
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80041e0:	b21a      	sxth	r2, r3
 80041e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	b21b      	sxth	r3, r3
 80041ea:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <BSP_ACCELERO_Init+0x17c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	8aba      	ldrh	r2, [r7, #20]
 80041f4:	4610      	mov	r0, r2
 80041f6:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80041f8:	2380      	movs	r3, #128	; 0x80
 80041fa:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 80041fc:	2310      	movs	r3, #16
 80041fe:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8004204:	2300      	movs	r3, #0
 8004206:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004208:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800420a:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800420c:	4313      	orrs	r3, r2
 800420e:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8004210:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004212:	4313      	orrs	r3, r2
 8004214:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8004216:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004218:	4313      	orrs	r3, r2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <BSP_ACCELERO_Init+0x17c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	8aba      	ldrh	r2, [r7, #20]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	4610      	mov	r0, r2
 800422a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	2000009c 	.word	0x2000009c
 8004240:	200003f0 	.word	0x200003f0
 8004244:	20000068 	.word	0x20000068

08004248 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8004254:	4b10      	ldr	r3, [pc, #64]	; (8004298 <BSP_ACCELERO_GetXYZ+0x50>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	2b00      	cmp	r3, #0
 800425c:	d018      	beq.n	8004290 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <BSP_ACCELERO_GetXYZ+0x50>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <BSP_ACCELERO_GetXYZ+0x50>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0b      	ldr	r2, [pc, #44]	; (800429c <BSP_ACCELERO_GetXYZ+0x54>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d10e      	bne.n	8004290 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8004282:	89fb      	ldrh	r3, [r7, #14]
 8004284:	425b      	negs	r3, r3
 8004286:	b29a      	uxth	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3302      	adds	r3, #2
 800428c:	b212      	sxth	r2, r2
 800428e:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	200003f0 	.word	0x200003f0
 800429c:	2000009c 	.word	0x2000009c

080042a0 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80042aa:	2300      	movs	r3, #0
 80042ac:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80042ae:	2300      	movs	r3, #0
 80042b0:	703b      	strb	r3, [r7, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80042b6:	4b52      	ldr	r3, [pc, #328]	; (8004400 <BSP_GYRO_Init+0x160>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4798      	blx	r3
 80042bc:	4603      	mov	r3, r0
 80042be:	2bd4      	cmp	r3, #212	; 0xd4
 80042c0:	d005      	beq.n	80042ce <BSP_GYRO_Init+0x2e>
 80042c2:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <BSP_GYRO_Init+0x160>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	4798      	blx	r3
 80042c8:	4603      	mov	r3, r0
 80042ca:	2bd5      	cmp	r3, #213	; 0xd5
 80042cc:	d146      	bne.n	800435c <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <BSP_GYRO_Init+0x164>)
 80042d0:	4a4b      	ldr	r2, [pc, #300]	; (8004400 <BSP_GYRO_Init+0x160>)
 80042d2:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80042d4:	2308      	movs	r3, #8
 80042d6:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80042d8:	2300      	movs	r3, #0
 80042da:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80042dc:	2307      	movs	r3, #7
 80042de:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80042e0:	2330      	movs	r3, #48	; 0x30
 80042e2:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80042e4:	2300      	movs	r3, #0
 80042e6:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80042e8:	2300      	movs	r3, #0
 80042ea:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80042ec:	2310      	movs	r3, #16
 80042ee:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80042f0:	793a      	ldrb	r2, [r7, #4]
 80042f2:	797b      	ldrb	r3, [r7, #5]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80042f8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80042fa:	4313      	orrs	r3, r2
 80042fc:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80042fe:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004300:	4313      	orrs	r3, r2
 8004302:	b2db      	uxtb	r3, r3
 8004304:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004306:	7a3a      	ldrb	r2, [r7, #8]
 8004308:	7a7b      	ldrb	r3, [r7, #9]
 800430a:	4313      	orrs	r3, r2
 800430c:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800430e:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004310:	4313      	orrs	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	b29b      	uxth	r3, r3
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	b29a      	uxth	r2, r3
 800431a:	89bb      	ldrh	r3, [r7, #12]
 800431c:	4313      	orrs	r3, r2
 800431e:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004320:	4b38      	ldr	r3, [pc, #224]	; (8004404 <BSP_GYRO_Init+0x164>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	89ba      	ldrh	r2, [r7, #12]
 8004328:	4610      	mov	r0, r2
 800432a:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 800432c:	2300      	movs	r3, #0
 800432e:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8004330:	2300      	movs	r3, #0
 8004332:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004334:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8004336:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004338:	4313      	orrs	r3, r2
 800433a:	b2db      	uxtb	r3, r3
 800433c:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <BSP_GYRO_Init+0x164>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	89ba      	ldrh	r2, [r7, #12]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	4610      	mov	r0, r2
 800434a:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 800434c:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <BSP_GYRO_Init+0x164>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	2010      	movs	r0, #16
 8004354:	4798      	blx	r3

    ret = GYRO_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e04b      	b.n	80043f4 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <BSP_GYRO_Init+0x168>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4798      	blx	r3
 8004362:	4603      	mov	r3, r0
 8004364:	2bd3      	cmp	r3, #211	; 0xd3
 8004366:	d145      	bne.n	80043f4 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8004368:	4b26      	ldr	r3, [pc, #152]	; (8004404 <BSP_GYRO_Init+0x164>)
 800436a:	4a27      	ldr	r2, [pc, #156]	; (8004408 <BSP_GYRO_Init+0x168>)
 800436c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 800436e:	2308      	movs	r3, #8
 8004370:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8004372:	2300      	movs	r3, #0
 8004374:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8004376:	2307      	movs	r3, #7
 8004378:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 800437a:	2330      	movs	r3, #48	; 0x30
 800437c:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 800437e:	2300      	movs	r3, #0
 8004380:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8004382:	2300      	movs	r3, #0
 8004384:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8004386:	2310      	movs	r3, #16
 8004388:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800438a:	793a      	ldrb	r2, [r7, #4]
 800438c:	797b      	ldrb	r3, [r7, #5]
 800438e:	4313      	orrs	r3, r2
 8004390:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004392:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004394:	4313      	orrs	r3, r2
 8004396:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004398:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800439a:	4313      	orrs	r3, r2
 800439c:	b2db      	uxtb	r3, r3
 800439e:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80043a0:	7a3a      	ldrb	r2, [r7, #8]
 80043a2:	7a7b      	ldrb	r3, [r7, #9]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80043a8:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80043aa:	4313      	orrs	r3, r2
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	89bb      	ldrh	r3, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <BSP_GYRO_Init+0x164>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	89ba      	ldrh	r2, [r7, #12]
 80043c2:	4610      	mov	r0, r2
 80043c4:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 80043c6:	2300      	movs	r3, #0
 80043c8:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80043ce:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80043d0:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <BSP_GYRO_Init+0x164>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	89ba      	ldrh	r2, [r7, #12]
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	4610      	mov	r0, r2
 80043e4:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <BSP_GYRO_Init+0x164>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	2010      	movs	r0, #16
 80043ee:	4798      	blx	r3

    ret = GYRO_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000034 	.word	0x20000034
 8004404:	200003f4 	.word	0x200003f4
 8004408:	20000000 	.word	0x20000000

0800440c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_MspInit+0x4c>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	4a0f      	ldr	r2, [pc, #60]	; (8004458 <HAL_MspInit+0x4c>)
 800441c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004420:	6453      	str	r3, [r2, #68]	; 0x44
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_MspInit+0x4c>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442a:	607b      	str	r3, [r7, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	603b      	str	r3, [r7, #0]
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_MspInit+0x4c>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <HAL_MspInit+0x4c>)
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6413      	str	r3, [r2, #64]	; 0x40
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_MspInit+0x4c>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	603b      	str	r3, [r7, #0]
 8004448:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800444a:	2007      	movs	r0, #7
 800444c:	f001 f872 	bl	8005534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40023800 	.word	0x40023800

0800445c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004460:	e7fe      	b.n	8004460 <NMI_Handler+0x4>

08004462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004466:	e7fe      	b.n	8004466 <HardFault_Handler+0x4>

08004468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800446c:	e7fe      	b.n	800446c <MemManage_Handler+0x4>

0800446e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800446e:	b480      	push	{r7}
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004472:	e7fe      	b.n	8004472 <BusFault_Handler+0x4>

08004474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004478:	e7fe      	b.n	8004478 <UsageFault_Handler+0x4>

0800447a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800447e:	bf00      	nop
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004496:	b480      	push	{r7}
 8004498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a8:	f000 fb52 	bl	8004b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80044b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044b8:	f002 f98a 	bl	80067d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80044bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80044c0:	f002 f986 	bl	80067d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044cc:	4803      	ldr	r0, [pc, #12]	; (80044dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80044ce:	f007 fa21 	bl	800b914 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80044d2:	4803      	ldr	r0, [pc, #12]	; (80044e0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80044d4:	f007 fa1e 	bl	800b914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000f00 	.word	0x20000f00
 80044e0:	20000eb8 	.word	0x20000eb8

080044e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044e8:	4802      	ldr	r0, [pc, #8]	; (80044f4 <DMA2_Stream0_IRQHandler+0x10>)
 80044ea:	f001 fb37 	bl	8005b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000450 	.word	0x20000450

080044f8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80044fc:	4802      	ldr	r0, [pc, #8]	; (8004508 <DMA2_Stream1_IRQHandler+0x10>)
 80044fe:	f001 fb2d 	bl	8005b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000e58 	.word	0x20000e58

0800450c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004510:	4802      	ldr	r0, [pc, #8]	; (800451c <OTG_FS_IRQHandler+0x10>)
 8004512:	f002 fbeb 	bl	8006cec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20001324 	.word	0x20001324

08004520 <_getpid>:
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
 8004524:	2301      	movs	r3, #1
 8004526:	4618      	mov	r0, r3
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <_kill>:
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
 800453a:	f00c fa37 	bl	80109ac <__errno>
 800453e:	4603      	mov	r3, r0
 8004540:	2216      	movs	r2, #22
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <_exit>:
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ffe7 	bl	8004530 <_kill>
 8004562:	e7fe      	b.n	8004562 <_exit+0x12>

08004564 <_read>:
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e00a      	b.n	800458c <_read+0x28>
 8004576:	f3af 8000 	nop.w
 800457a:	4601      	mov	r1, r0
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	60ba      	str	r2, [r7, #8]
 8004582:	b2ca      	uxtb	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	3301      	adds	r3, #1
 800458a:	617b      	str	r3, [r7, #20]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	dbf0      	blt.n	8004576 <_read+0x12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_write>:
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
 80045ae:	e009      	b.n	80045c4 <_write+0x26>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	60ba      	str	r2, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f3af 8000 	nop.w
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	dbf1      	blt.n	80045b0 <_write+0x12>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_close>:
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <_fstat>:
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	2300      	movs	r3, #0
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <_isatty>:
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	2301      	movs	r3, #1
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_lseek>:
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	2300      	movs	r3, #0
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <_sbrk>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	4a14      	ldr	r2, [pc, #80]	; (800469c <_sbrk+0x5c>)
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <_sbrk+0x60>)
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <_sbrk+0x64>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <_sbrk+0x22>
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <_sbrk+0x64>)
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <_sbrk+0x68>)
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <_sbrk+0x64>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	429a      	cmp	r2, r3
 800466e:	d207      	bcs.n	8004680 <_sbrk+0x40>
 8004670:	f00c f99c 	bl	80109ac <__errno>
 8004674:	4603      	mov	r3, r0
 8004676:	220c      	movs	r2, #12
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800467e:	e009      	b.n	8004694 <_sbrk+0x54>
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <_sbrk+0x64>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <_sbrk+0x64>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	4a05      	ldr	r2, [pc, #20]	; (80046a4 <_sbrk+0x64>)
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20020000 	.word	0x20020000
 80046a0:	00000400 	.word	0x00000400
 80046a4:	200003f8 	.word	0x200003f8
 80046a8:	20001638 	.word	0x20001638

080046ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <SystemInit+0x20>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	4a05      	ldr	r2, [pc, #20]	; (80046cc <SystemInit+0x20>)
 80046b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b096      	sub	sp, #88	; 0x58
 80046d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
 80046f8:	609a      	str	r2, [r3, #8]
 80046fa:	60da      	str	r2, [r3, #12]
 80046fc:	611a      	str	r2, [r3, #16]
 80046fe:	615a      	str	r2, [r3, #20]
 8004700:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	2220      	movs	r2, #32
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f00c f989 	bl	8010a20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800470e:	4b3e      	ldr	r3, [pc, #248]	; (8004808 <MX_TIM1_Init+0x138>)
 8004710:	4a3e      	ldr	r2, [pc, #248]	; (800480c <MX_TIM1_Init+0x13c>)
 8004712:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004714:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <MX_TIM1_Init+0x138>)
 8004716:	2200      	movs	r2, #0
 8004718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800471a:	4b3b      	ldr	r3, [pc, #236]	; (8004808 <MX_TIM1_Init+0x138>)
 800471c:	2200      	movs	r2, #0
 800471e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8004720:	4b39      	ldr	r3, [pc, #228]	; (8004808 <MX_TIM1_Init+0x138>)
 8004722:	2259      	movs	r2, #89	; 0x59
 8004724:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004726:	4b38      	ldr	r3, [pc, #224]	; (8004808 <MX_TIM1_Init+0x138>)
 8004728:	2200      	movs	r2, #0
 800472a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <MX_TIM1_Init+0x138>)
 800472e:	2200      	movs	r2, #0
 8004730:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004732:	4b35      	ldr	r3, [pc, #212]	; (8004808 <MX_TIM1_Init+0x138>)
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004738:	4833      	ldr	r0, [pc, #204]	; (8004808 <MX_TIM1_Init+0x138>)
 800473a:	f006 fa0f 	bl	800ab5c <HAL_TIM_Base_Init>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004744:	f7ff f8d8 	bl	80038f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800474e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004752:	4619      	mov	r1, r3
 8004754:	482c      	ldr	r0, [pc, #176]	; (8004808 <MX_TIM1_Init+0x138>)
 8004756:	f007 fd0f 	bl	800c178 <HAL_TIM_ConfigClockSource>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004760:	f7ff f8ca 	bl	80038f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004764:	4828      	ldr	r0, [pc, #160]	; (8004808 <MX_TIM1_Init+0x138>)
 8004766:	f006 fbb3 	bl	800aed0 <HAL_TIM_PWM_Init>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004770:	f7ff f8c2 	bl	80038f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004774:	2300      	movs	r3, #0
 8004776:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004778:	2300      	movs	r3, #0
 800477a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800477c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004780:	4619      	mov	r1, r3
 8004782:	4821      	ldr	r0, [pc, #132]	; (8004808 <MX_TIM1_Init+0x138>)
 8004784:	f008 fdc6 	bl	800d314 <HAL_TIMEx_MasterConfigSynchronization>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800478e:	f7ff f8b3 	bl	80038f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004792:	2360      	movs	r3, #96	; 0x60
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800479a:	2300      	movs	r3, #0
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800479e:	2300      	movs	r3, #0
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047aa:	2300      	movs	r3, #0
 80047ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b2:	2200      	movs	r2, #0
 80047b4:	4619      	mov	r1, r3
 80047b6:	4814      	ldr	r0, [pc, #80]	; (8004808 <MX_TIM1_Init+0x138>)
 80047b8:	f007 fb38 	bl	800be2c <HAL_TIM_PWM_ConfigChannel>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80047c2:	f7ff f899 	bl	80038f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80047d2:	2300      	movs	r3, #0
 80047d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4807      	ldr	r0, [pc, #28]	; (8004808 <MX_TIM1_Init+0x138>)
 80047ea:	f008 fe51 	bl	800d490 <HAL_TIMEx_ConfigBreakDeadTime>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80047f4:	f7ff f880 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80047f8:	4803      	ldr	r0, [pc, #12]	; (8004808 <MX_TIM1_Init+0x138>)
 80047fa:	f000 f8f3 	bl	80049e4 <HAL_TIM_MspPostInit>

}
 80047fe:	bf00      	nop
 8004800:	3758      	adds	r7, #88	; 0x58
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000f00 	.word	0x20000f00
 800480c:	40010000 	.word	0x40010000

08004810 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8004816:	463b      	mov	r3, r7
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004822:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <MX_TIM10_Init+0x88>)
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <MX_TIM10_Init+0x8c>)
 8004826:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <MX_TIM10_Init+0x88>)
 800482a:	2247      	movs	r2, #71	; 0x47
 800482c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <MX_TIM10_Init+0x88>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004834:	4b18      	ldr	r3, [pc, #96]	; (8004898 <MX_TIM10_Init+0x88>)
 8004836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800483a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800483c:	4b16      	ldr	r3, [pc, #88]	; (8004898 <MX_TIM10_Init+0x88>)
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004842:	4b15      	ldr	r3, [pc, #84]	; (8004898 <MX_TIM10_Init+0x88>)
 8004844:	2200      	movs	r2, #0
 8004846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004848:	4813      	ldr	r0, [pc, #76]	; (8004898 <MX_TIM10_Init+0x88>)
 800484a:	f006 f987 	bl	800ab5c <HAL_TIM_Base_Init>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8004854:	f7ff f850 	bl	80038f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8004858:	480f      	ldr	r0, [pc, #60]	; (8004898 <MX_TIM10_Init+0x88>)
 800485a:	f006 ff8b 	bl	800b774 <HAL_TIM_IC_Init>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8004864:	f7ff f848 	bl	80038f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004868:	2300      	movs	r3, #0
 800486a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800486c:	2301      	movs	r3, #1
 800486e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004878:	463b      	mov	r3, r7
 800487a:	2200      	movs	r2, #0
 800487c:	4619      	mov	r1, r3
 800487e:	4806      	ldr	r0, [pc, #24]	; (8004898 <MX_TIM10_Init+0x88>)
 8004880:	f007 f950 	bl	800bb24 <HAL_TIM_IC_ConfigChannel>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 800488a:	f7ff f835 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000eb8 	.word	0x20000eb8
 800489c:	40014400 	.word	0x40014400

080048a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a8:	f107 0314 	add.w	r3, r7, #20
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	605a      	str	r2, [r3, #4]
 80048b2:	609a      	str	r2, [r3, #8]
 80048b4:	60da      	str	r2, [r3, #12]
 80048b6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a43      	ldr	r2, [pc, #268]	; (80049cc <HAL_TIM_Base_MspInit+0x12c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d146      	bne.n	8004950 <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	4a41      	ldr	r2, [pc, #260]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	6453      	str	r3, [r2, #68]	; 0x44
 80048d2:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80048de:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 80048e0:	4a3d      	ldr	r2, [pc, #244]	; (80049d8 <HAL_TIM_Base_MspInit+0x138>)
 80048e2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80048e4:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 80048e6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80048ea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048ec:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 80048fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048fe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 8004902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004906:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 800490a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800490e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004910:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 8004912:	2200      	movs	r2, #0
 8004914:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004916:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 8004918:	2200      	movs	r2, #0
 800491a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 800491e:	2200      	movs	r2, #0
 8004920:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004922:	482c      	ldr	r0, [pc, #176]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 8004924:	f000 fe76 	bl	8005614 <HAL_DMA_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_TIM_Base_MspInit+0x92>
    {
      Error_Handler();
 800492e:	f7fe ffe3 	bl	80038f8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 8004936:	625a      	str	r2, [r3, #36]	; 0x24
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_TIM_Base_MspInit+0x134>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	2100      	movs	r1, #0
 8004942:	2019      	movs	r0, #25
 8004944:	f000 fe16 	bl	8005574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004948:	2019      	movs	r0, #25
 800494a:	f000 fe3f 	bl	80055cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800494e:	e039      	b.n	80049c4 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM10)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a21      	ldr	r2, [pc, #132]	; (80049dc <HAL_TIM_Base_MspInit+0x13c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d134      	bne.n	80049c4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 8004964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004968:	6453      	str	r3, [r2, #68]	; 0x44
 800496a:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 8004980:	f043 0302 	orr.w	r3, r3, #2
 8004984:	6313      	str	r3, [r2, #48]	; 0x30
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_TIM_Base_MspInit+0x130>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499c:	2300      	movs	r3, #0
 800499e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049a0:	2300      	movs	r3, #0
 80049a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80049a4:	2303      	movs	r3, #3
 80049a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a8:	f107 0314 	add.w	r3, r7, #20
 80049ac:	4619      	mov	r1, r3
 80049ae:	480c      	ldr	r0, [pc, #48]	; (80049e0 <HAL_TIM_Base_MspInit+0x140>)
 80049b0:	f001 fb3e 	bl	8006030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80049b4:	2200      	movs	r2, #0
 80049b6:	2100      	movs	r1, #0
 80049b8:	2019      	movs	r0, #25
 80049ba:	f000 fddb 	bl	8005574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049be:	2019      	movs	r0, #25
 80049c0:	f000 fe04 	bl	80055cc <HAL_NVIC_EnableIRQ>
}
 80049c4:	bf00      	nop
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40023800 	.word	0x40023800
 80049d4:	20000e58 	.word	0x20000e58
 80049d8:	40026428 	.word	0x40026428
 80049dc:	40014400 	.word	0x40014400
 80049e0:	40020400 	.word	0x40020400

080049e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ec:	f107 030c 	add.w	r3, r7, #12
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <HAL_TIM_MspPostInit+0x68>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d11e      	bne.n	8004a44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_TIM_MspPostInit+0x6c>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <HAL_TIM_MspPostInit+0x6c>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6313      	str	r3, [r2, #48]	; 0x30
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <HAL_TIM_MspPostInit+0x6c>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a34:	2301      	movs	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a38:	f107 030c 	add.w	r3, r7, #12
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <HAL_TIM_MspPostInit+0x70>)
 8004a40:	f001 faf6 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a44:	bf00      	nop
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40020000 	.word	0x40020000

08004a58 <Reset_Handler>:
 8004a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a90 <LoopFillZerobss+0x12>
 8004a5c:	480d      	ldr	r0, [pc, #52]	; (8004a94 <LoopFillZerobss+0x16>)
 8004a5e:	490e      	ldr	r1, [pc, #56]	; (8004a98 <LoopFillZerobss+0x1a>)
 8004a60:	4a0e      	ldr	r2, [pc, #56]	; (8004a9c <LoopFillZerobss+0x1e>)
 8004a62:	2300      	movs	r3, #0
 8004a64:	e002      	b.n	8004a6c <LoopCopyDataInit>

08004a66 <CopyDataInit>:
 8004a66:	58d4      	ldr	r4, [r2, r3]
 8004a68:	50c4      	str	r4, [r0, r3]
 8004a6a:	3304      	adds	r3, #4

08004a6c <LoopCopyDataInit>:
 8004a6c:	18c4      	adds	r4, r0, r3
 8004a6e:	428c      	cmp	r4, r1
 8004a70:	d3f9      	bcc.n	8004a66 <CopyDataInit>
 8004a72:	4a0b      	ldr	r2, [pc, #44]	; (8004aa0 <LoopFillZerobss+0x22>)
 8004a74:	4c0b      	ldr	r4, [pc, #44]	; (8004aa4 <LoopFillZerobss+0x26>)
 8004a76:	2300      	movs	r3, #0
 8004a78:	e001      	b.n	8004a7e <LoopFillZerobss>

08004a7a <FillZerobss>:
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	3204      	adds	r2, #4

08004a7e <LoopFillZerobss>:
 8004a7e:	42a2      	cmp	r2, r4
 8004a80:	d3fb      	bcc.n	8004a7a <FillZerobss>
 8004a82:	f7ff fe13 	bl	80046ac <SystemInit>
 8004a86:	f00b ff97 	bl	80109b8 <__libc_init_array>
 8004a8a:	f7fe fcfd 	bl	8003488 <main>
 8004a8e:	4770      	bx	lr
 8004a90:	20020000 	.word	0x20020000
 8004a94:	20000000 	.word	0x20000000
 8004a98:	200002d4 	.word	0x200002d4
 8004a9c:	0801445c 	.word	0x0801445c
 8004aa0:	200002d8 	.word	0x200002d8
 8004aa4:	20001638 	.word	0x20001638

08004aa8 <ADC_IRQHandler>:
 8004aa8:	e7fe      	b.n	8004aa8 <ADC_IRQHandler>
	...

08004aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_Init+0x40>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <HAL_Init+0x40>)
 8004ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_Init+0x40>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0a      	ldr	r2, [pc, #40]	; (8004aec <HAL_Init+0x40>)
 8004ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac8:	4b08      	ldr	r3, [pc, #32]	; (8004aec <HAL_Init+0x40>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a07      	ldr	r2, [pc, #28]	; (8004aec <HAL_Init+0x40>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	f000 fd2d 	bl	8005534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ada:	2000      	movs	r0, #0
 8004adc:	f000 f808 	bl	8004af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ae0:	f7ff fc94 	bl	800440c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40023c00 	.word	0x40023c00

08004af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_InitTick+0x54>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_InitTick+0x58>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fd74 	bl	80055fc <HAL_SYSTICK_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e00e      	b.n	8004b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b0f      	cmp	r3, #15
 8004b22:	d80a      	bhi.n	8004b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b24:	2200      	movs	r2, #0
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b2c:	f000 fd22 	bl	8005574 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b30:	4a06      	ldr	r2, [pc, #24]	; (8004b4c <HAL_InitTick+0x5c>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	200000d8 	.word	0x200000d8
 8004b48:	200000e0 	.word	0x200000e0
 8004b4c:	200000dc 	.word	0x200000dc

08004b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_IncTick+0x20>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_IncTick+0x24>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4413      	add	r3, r2
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <HAL_IncTick+0x24>)
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	200000e0 	.word	0x200000e0
 8004b74:	20000f48 	.word	0x20000f48

08004b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_GetTick+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000f48 	.word	0x20000f48

08004b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b98:	f7ff ffee 	bl	8004b78 <HAL_GetTick>
 8004b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba8:	d005      	beq.n	8004bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004baa:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_Delay+0x44>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004bb6:	bf00      	nop
 8004bb8:	f7ff ffde 	bl	8004b78 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d8f7      	bhi.n	8004bb8 <HAL_Delay+0x28>
  {
  }
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	200000e0 	.word	0x200000e0

08004bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e147      	b.n	8004e7e <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4aa5      	ldr	r2, [pc, #660]	; (8004e88 <HAL_ADC_Init+0x2b0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_ADC_Init+0x2a>
 8004bf8:	f240 1143 	movw	r1, #323	; 0x143
 8004bfc:	48a3      	ldr	r0, [pc, #652]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004bfe:	f7fe fe80 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d013      	beq.n	8004c32 <HAL_ADC_Init+0x5a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c12:	d00e      	beq.n	8004c32 <HAL_ADC_Init+0x5a>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c1c:	d009      	beq.n	8004c32 <HAL_ADC_Init+0x5a>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c26:	d004      	beq.n	8004c32 <HAL_ADC_Init+0x5a>
 8004c28:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004c2c:	4897      	ldr	r0, [pc, #604]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004c2e:	f7fe fe68 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d013      	beq.n	8004c62 <HAL_ADC_Init+0x8a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c42:	d00e      	beq.n	8004c62 <HAL_ADC_Init+0x8a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c4c:	d009      	beq.n	8004c62 <HAL_ADC_Init+0x8a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c56:	d004      	beq.n	8004c62 <HAL_ADC_Init+0x8a>
 8004c58:	f240 1145 	movw	r1, #325	; 0x145
 8004c5c:	488b      	ldr	r0, [pc, #556]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004c5e:	f7fe fe50 	bl	8003902 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_ADC_Init+0xa4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d004      	beq.n	8004c7c <HAL_ADC_Init+0xa4>
 8004c72:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004c76:	4885      	ldr	r0, [pc, #532]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004c78:	f7fe fe43 	bl	8003902 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	7e1b      	ldrb	r3, [r3, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <HAL_ADC_Init+0xbe>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	7e1b      	ldrb	r3, [r3, #24]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d004      	beq.n	8004c96 <HAL_ADC_Init+0xbe>
 8004c8c:	f240 1147 	movw	r1, #327	; 0x147
 8004c90:	487e      	ldr	r0, [pc, #504]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004c92:	f7fe fe36 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d054      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca6:	d04f      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb0:	d04a      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cba:	d045      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cc4:	d040      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004cce:	d03b      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004cd8:	d036      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8004ce2:	d031      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cec:	d02c      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8004cf6:	d027      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004d00:	d022      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8004d0a:	d01d      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004d14:	d018      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8004d1e:	d013      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004d28:	d00e      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004d32:	d009      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	4a55      	ldr	r2, [pc, #340]	; (8004e90 <HAL_ADC_Init+0x2b8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_ADC_Init+0x170>
 8004d3e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004d42:	4852      	ldr	r0, [pc, #328]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004d44:	f7fe fddd 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_ADC_Init+0x18c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d58:	d004      	beq.n	8004d64 <HAL_ADC_Init+0x18c>
 8004d5a:	f240 1149 	movw	r1, #329	; 0x149
 8004d5e:	484b      	ldr	r0, [pc, #300]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004d60:	f7fe fdcf 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_ADC_Init+0x19c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	2b10      	cmp	r3, #16
 8004d72:	d904      	bls.n	8004d7e <HAL_ADC_Init+0x1a6>
 8004d74:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004d78:	4844      	ldr	r0, [pc, #272]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004d7a:	f7fe fdc2 	bl	8003902 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_ADC_Init+0x1c4>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d004      	beq.n	8004d9c <HAL_ADC_Init+0x1c4>
 8004d92:	f240 114b 	movw	r1, #331	; 0x14b
 8004d96:	483d      	ldr	r0, [pc, #244]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004d98:	f7fe fdb3 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d00c      	beq.n	8004dbe <HAL_ADC_Init+0x1e6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_ADC_Init+0x1e6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d004      	beq.n	8004dbe <HAL_ADC_Init+0x1e6>
 8004db4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004db8:	4834      	ldr	r0, [pc, #208]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004dba:	f7fe fda2 	bl	8003902 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <HAL_ADC_Init+0x204>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d004      	beq.n	8004ddc <HAL_ADC_Init+0x204>
 8004dd2:	f240 114d 	movw	r1, #333	; 0x14d
 8004dd6:	482d      	ldr	r0, [pc, #180]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004dd8:	f7fe fd93 	bl	8003902 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <HAL_ADC_Init+0x2b8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d017      	beq.n	8004e16 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d013      	beq.n	8004e16 <HAL_ADC_Init+0x23e>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df6:	d00e      	beq.n	8004e16 <HAL_ADC_Init+0x23e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e00:	d009      	beq.n	8004e16 <HAL_ADC_Init+0x23e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e0a:	d004      	beq.n	8004e16 <HAL_ADC_Init+0x23e>
 8004e0c:	f240 1151 	movw	r1, #337	; 0x151
 8004e10:	481e      	ldr	r0, [pc, #120]	; (8004e8c <HAL_ADC_Init+0x2b4>)
 8004e12:	f7fe fd76 	bl	8003902 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fd f89e 	bl	8001f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e46:	f023 0302 	bic.w	r3, r3, #2
 8004e4a:	f043 0202 	orr.w	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f994 	bl	8005180 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8004e6e:	e001      	b.n	8004e74 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40012000 	.word	0x40012000
 8004e8c:	080137f4 	.word	0x080137f4
 8004e90:	0f000001 	.word	0x0f000001

08004e94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2b12      	cmp	r3, #18
 8004ea8:	d909      	bls.n	8004ebe <HAL_ADC_ConfigChannel+0x2a>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a72      	ldr	r2, [pc, #456]	; (8005078 <HAL_ADC_ConfigChannel+0x1e4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d004      	beq.n	8004ebe <HAL_ADC_ConfigChannel+0x2a>
 8004eb4:	f240 6189 	movw	r1, #1673	; 0x689
 8004eb8:	4870      	ldr	r0, [pc, #448]	; (800507c <HAL_ADC_ConfigChannel+0x1e8>)
 8004eba:	f7fe fd22 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_ADC_ConfigChannel+0x3a>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d904      	bls.n	8004ed8 <HAL_ADC_ConfigChannel+0x44>
 8004ece:	f240 618a 	movw	r1, #1674	; 0x68a
 8004ed2:	486a      	ldr	r0, [pc, #424]	; (800507c <HAL_ADC_ConfigChannel+0x1e8>)
 8004ed4:	f7fe fd15 	bl	8003902 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d01c      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d018      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d014      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d010      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b05      	cmp	r3, #5
 8004f06:	d00c      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b06      	cmp	r3, #6
 8004f0e:	d008      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b07      	cmp	r3, #7
 8004f16:	d004      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x8e>
 8004f18:	f240 618b 	movw	r1, #1675	; 0x68b
 8004f1c:	4857      	ldr	r0, [pc, #348]	; (800507c <HAL_ADC_ConfigChannel+0x1e8>)
 8004f1e:	f7fe fcf0 	bl	8003902 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x9c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e118      	b.n	8005162 <HAL_ADC_ConfigChannel+0x2ce>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	d925      	bls.n	8004f8c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4613      	mov	r3, r2
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	4413      	add	r3, r2
 8004f54:	3b1e      	subs	r3, #30
 8004f56:	2207      	movs	r2, #7
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43da      	mvns	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	400a      	ands	r2, r1
 8004f64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68d9      	ldr	r1, [r3, #12]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	4618      	mov	r0, r3
 8004f78:	4603      	mov	r3, r0
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4403      	add	r3, r0
 8004f7e:	3b1e      	subs	r3, #30
 8004f80:	409a      	lsls	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	e022      	b.n	8004fd2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6919      	ldr	r1, [r3, #16]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	400a      	ands	r2, r1
 8004fae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6919      	ldr	r1, [r3, #16]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4403      	add	r3, r0
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d824      	bhi.n	8005024 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	3b05      	subs	r3, #5
 8004fec:	221f      	movs	r2, #31
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	4618      	mov	r0, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	3b05      	subs	r3, #5
 8005016:	fa00 f203 	lsl.w	r2, r0, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	635a      	str	r2, [r3, #52]	; 0x34
 8005022:	e051      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	2b0c      	cmp	r3, #12
 800502a:	d829      	bhi.n	8005080 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	3b23      	subs	r3, #35	; 0x23
 800503e:	221f      	movs	r2, #31
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43da      	mvns	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	400a      	ands	r2, r1
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	4618      	mov	r0, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	3b23      	subs	r3, #35	; 0x23
 8005068:	fa00 f203 	lsl.w	r2, r0, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
 8005074:	e028      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x234>
 8005076:	bf00      	nop
 8005078:	10000012 	.word	0x10000012
 800507c:	080137f4 	.word	0x080137f4
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	3b41      	subs	r3, #65	; 0x41
 8005092:	221f      	movs	r2, #31
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43da      	mvns	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	400a      	ands	r2, r1
 80050a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4618      	mov	r0, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	3b41      	subs	r3, #65	; 0x41
 80050bc:	fa00 f203 	lsl.w	r2, r0, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_ADC_ConfigChannel+0x2d8>)
 80050ca:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a27      	ldr	r2, [pc, #156]	; (8005170 <HAL_ADC_ConfigChannel+0x2dc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10f      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x262>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b12      	cmp	r3, #18
 80050dc:	d10b      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <HAL_ADC_ConfigChannel+0x2dc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d12b      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x2c4>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <HAL_ADC_ConfigChannel+0x2e0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <HAL_ADC_ConfigChannel+0x27e>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b11      	cmp	r3, #17
 8005110:	d122      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a11      	ldr	r2, [pc, #68]	; (8005174 <HAL_ADC_ConfigChannel+0x2e0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d111      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005134:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_ADC_ConfigChannel+0x2e4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a10      	ldr	r2, [pc, #64]	; (800517c <HAL_ADC_ConfigChannel+0x2e8>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	0c9a      	lsrs	r2, r3, #18
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800514a:	e002      	b.n	8005152 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	3b01      	subs	r3, #1
 8005150:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f9      	bne.n	800514c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40012300 	.word	0x40012300
 8005170:	40012000 	.word	0x40012000
 8005174:	10000012 	.word	0x10000012
 8005178:	200000d8 	.word	0x200000d8
 800517c:	431bde83 	.word	0x431bde83

08005180 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005188:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <ADC_Init+0x208>)
 800518a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6859      	ldr	r1, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80051d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6899      	ldr	r1, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	4a5e      	ldr	r2, [pc, #376]	; (800538c <ADC_Init+0x20c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005226:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6899      	ldr	r1, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6899      	ldr	r1, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	e00f      	b.n	800527e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800526c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800527c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0202 	bic.w	r2, r2, #2
 800528c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6899      	ldr	r1, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7e1b      	ldrb	r3, [r3, #24]
 8005298:	005a      	lsls	r2, r3, #1
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d028      	beq.n	80052fe <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <ADC_Init+0x13c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d904      	bls.n	80052c6 <ADC_Init+0x146>
 80052bc:	f240 71a6 	movw	r1, #1958	; 0x7a6
 80052c0:	4833      	ldr	r0, [pc, #204]	; (8005390 <ADC_Init+0x210>)
 80052c2:	f7fe fb1e 	bl	8003902 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052d4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052e4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6859      	ldr	r1, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	3b01      	subs	r3, #1
 80052f2:	035a      	lsls	r2, r3, #13
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	e007      	b.n	800530e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800531c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	3b01      	subs	r3, #1
 800532a:	051a      	lsls	r2, r3, #20
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005350:	025a      	lsls	r2, r3, #9
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6899      	ldr	r1, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	029a      	lsls	r2, r3, #10
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40012300 	.word	0x40012300
 800538c:	0f000001 	.word	0x0f000001
 8005390:	080137f4 	.word	0x080137f4

08005394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053a4:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <__NVIC_SetPriorityGrouping+0x44>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053b0:	4013      	ands	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053c6:	4a04      	ldr	r2, [pc, #16]	; (80053d8 <__NVIC_SetPriorityGrouping+0x44>)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	60d3      	str	r3, [r2, #12]
}
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <__NVIC_GetPriorityGrouping+0x18>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	0a1b      	lsrs	r3, r3, #8
 80053e6:	f003 0307 	and.w	r3, r3, #7
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005406:	2b00      	cmp	r3, #0
 8005408:	db0b      	blt.n	8005422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	f003 021f 	and.w	r2, r3, #31
 8005410:	4907      	ldr	r1, [pc, #28]	; (8005430 <__NVIC_EnableIRQ+0x38>)
 8005412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	2001      	movs	r0, #1
 800541a:	fa00 f202 	lsl.w	r2, r0, r2
 800541e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e100 	.word	0xe000e100

08005434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	6039      	str	r1, [r7, #0]
 800543e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005444:	2b00      	cmp	r3, #0
 8005446:	db0a      	blt.n	800545e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	490c      	ldr	r1, [pc, #48]	; (8005480 <__NVIC_SetPriority+0x4c>)
 800544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005452:	0112      	lsls	r2, r2, #4
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	440b      	add	r3, r1
 8005458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800545c:	e00a      	b.n	8005474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4908      	ldr	r1, [pc, #32]	; (8005484 <__NVIC_SetPriority+0x50>)
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	f003 030f 	and.w	r3, r3, #15
 800546a:	3b04      	subs	r3, #4
 800546c:	0112      	lsls	r2, r2, #4
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	440b      	add	r3, r1
 8005472:	761a      	strb	r2, [r3, #24]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	e000e100 	.word	0xe000e100
 8005484:	e000ed00 	.word	0xe000ed00

08005488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005488:	b480      	push	{r7}
 800548a:	b089      	sub	sp, #36	; 0x24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f1c3 0307 	rsb	r3, r3, #7
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	bf28      	it	cs
 80054a6:	2304      	movcs	r3, #4
 80054a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3304      	adds	r3, #4
 80054ae:	2b06      	cmp	r3, #6
 80054b0:	d902      	bls.n	80054b8 <NVIC_EncodePriority+0x30>
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3b03      	subs	r3, #3
 80054b6:	e000      	b.n	80054ba <NVIC_EncodePriority+0x32>
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43da      	mvns	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	401a      	ands	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	43d9      	mvns	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e0:	4313      	orrs	r3, r2
         );
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3724      	adds	r7, #36	; 0x24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005500:	d301      	bcc.n	8005506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005502:	2301      	movs	r3, #1
 8005504:	e00f      	b.n	8005526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <SysTick_Config+0x40>)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3b01      	subs	r3, #1
 800550c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800550e:	210f      	movs	r1, #15
 8005510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005514:	f7ff ff8e 	bl	8005434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <SysTick_Config+0x40>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800551e:	4b04      	ldr	r3, [pc, #16]	; (8005530 <SysTick_Config+0x40>)
 8005520:	2207      	movs	r2, #7
 8005522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000e010 	.word	0xe000e010

08005534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b07      	cmp	r3, #7
 8005540:	d00f      	beq.n	8005562 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b06      	cmp	r3, #6
 8005546:	d00c      	beq.n	8005562 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d009      	beq.n	8005562 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b04      	cmp	r3, #4
 8005552:	d006      	beq.n	8005562 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d003      	beq.n	8005562 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800555a:	2192      	movs	r1, #146	; 0x92
 800555c:	4804      	ldr	r0, [pc, #16]	; (8005570 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800555e:	f7fe f9d0 	bl	8003902 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff ff16 	bl	8005394 <__NVIC_SetPriorityGrouping>
}
 8005568:	bf00      	nop
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	0801382c 	.word	0x0801382c

08005574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b0f      	cmp	r3, #15
 800558a:	d903      	bls.n	8005594 <HAL_NVIC_SetPriority+0x20>
 800558c:	21aa      	movs	r1, #170	; 0xaa
 800558e:	480e      	ldr	r0, [pc, #56]	; (80055c8 <HAL_NVIC_SetPriority+0x54>)
 8005590:	f7fe f9b7 	bl	8003902 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b0f      	cmp	r3, #15
 8005598:	d903      	bls.n	80055a2 <HAL_NVIC_SetPriority+0x2e>
 800559a:	21ab      	movs	r1, #171	; 0xab
 800559c:	480a      	ldr	r0, [pc, #40]	; (80055c8 <HAL_NVIC_SetPriority+0x54>)
 800559e:	f7fe f9b0 	bl	8003902 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055a2:	f7ff ff1b 	bl	80053dc <__NVIC_GetPriorityGrouping>
 80055a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	6978      	ldr	r0, [r7, #20]
 80055ae:	f7ff ff6b 	bl	8005488 <NVIC_EncodePriority>
 80055b2:	4602      	mov	r2, r0
 80055b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b8:	4611      	mov	r1, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ff3a 	bl	8005434 <__NVIC_SetPriority>
}
 80055c0:	bf00      	nop
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	0801382c 	.word	0x0801382c

080055cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80055d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	da03      	bge.n	80055e6 <HAL_NVIC_EnableIRQ+0x1a>
 80055de:	21be      	movs	r1, #190	; 0xbe
 80055e0:	4805      	ldr	r0, [pc, #20]	; (80055f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80055e2:	f7fe f98e 	bl	8003902 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ff04 	bl	80053f8 <__NVIC_EnableIRQ>
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	0801382c 	.word	0x0801382c

080055fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff73 	bl	80054f0 <SysTick_Config>
 800560a:	4603      	mov	r3, r0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005620:	f7ff faaa 	bl	8004b78 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e204      	b.n	8005a3a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a97      	ldr	r2, [pc, #604]	; (8005894 <HAL_DMA_Init+0x280>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04e      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a96      	ldr	r2, [pc, #600]	; (8005898 <HAL_DMA_Init+0x284>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d049      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a94      	ldr	r2, [pc, #592]	; (800589c <HAL_DMA_Init+0x288>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d044      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a93      	ldr	r2, [pc, #588]	; (80058a0 <HAL_DMA_Init+0x28c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d03f      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a91      	ldr	r2, [pc, #580]	; (80058a4 <HAL_DMA_Init+0x290>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d03a      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a90      	ldr	r2, [pc, #576]	; (80058a8 <HAL_DMA_Init+0x294>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d035      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a8e      	ldr	r2, [pc, #568]	; (80058ac <HAL_DMA_Init+0x298>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d030      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a8d      	ldr	r2, [pc, #564]	; (80058b0 <HAL_DMA_Init+0x29c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d02b      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a8b      	ldr	r2, [pc, #556]	; (80058b4 <HAL_DMA_Init+0x2a0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d026      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a8a      	ldr	r2, [pc, #552]	; (80058b8 <HAL_DMA_Init+0x2a4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d021      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a88      	ldr	r2, [pc, #544]	; (80058bc <HAL_DMA_Init+0x2a8>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01c      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a87      	ldr	r2, [pc, #540]	; (80058c0 <HAL_DMA_Init+0x2ac>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d017      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a85      	ldr	r2, [pc, #532]	; (80058c4 <HAL_DMA_Init+0x2b0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d012      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a84      	ldr	r2, [pc, #528]	; (80058c8 <HAL_DMA_Init+0x2b4>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00d      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a82      	ldr	r2, [pc, #520]	; (80058cc <HAL_DMA_Init+0x2b8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d008      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a81      	ldr	r2, [pc, #516]	; (80058d0 <HAL_DMA_Init+0x2bc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <HAL_DMA_Init+0xc4>
 80056d0:	21b8      	movs	r1, #184	; 0xb8
 80056d2:	4880      	ldr	r0, [pc, #512]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 80056d4:	f7fe f915 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d026      	beq.n	800572e <HAL_DMA_Init+0x11a>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056e8:	d021      	beq.n	800572e <HAL_DMA_Init+0x11a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056f2:	d01c      	beq.n	800572e <HAL_DMA_Init+0x11a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80056fc:	d017      	beq.n	800572e <HAL_DMA_Init+0x11a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005706:	d012      	beq.n	800572e <HAL_DMA_Init+0x11a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005710:	d00d      	beq.n	800572e <HAL_DMA_Init+0x11a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800571a:	d008      	beq.n	800572e <HAL_DMA_Init+0x11a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005724:	d003      	beq.n	800572e <HAL_DMA_Init+0x11a>
 8005726:	21b9      	movs	r1, #185	; 0xb9
 8005728:	486a      	ldr	r0, [pc, #424]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 800572a:	f7fe f8ea 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00b      	beq.n	800574e <HAL_DMA_Init+0x13a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	2b40      	cmp	r3, #64	; 0x40
 800573c:	d007      	beq.n	800574e <HAL_DMA_Init+0x13a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b80      	cmp	r3, #128	; 0x80
 8005744:	d003      	beq.n	800574e <HAL_DMA_Init+0x13a>
 8005746:	21ba      	movs	r1, #186	; 0xba
 8005748:	4862      	ldr	r0, [pc, #392]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 800574a:	f7fe f8da 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005756:	d007      	beq.n	8005768 <HAL_DMA_Init+0x154>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_DMA_Init+0x154>
 8005760:	21bb      	movs	r1, #187	; 0xbb
 8005762:	485c      	ldr	r0, [pc, #368]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 8005764:	f7fe f8cd 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005770:	d007      	beq.n	8005782 <HAL_DMA_Init+0x16e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d003      	beq.n	8005782 <HAL_DMA_Init+0x16e>
 800577a:	21bc      	movs	r1, #188	; 0xbc
 800577c:	4855      	ldr	r0, [pc, #340]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 800577e:	f7fe f8c0 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00d      	beq.n	80057a6 <HAL_DMA_Init+0x192>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005792:	d008      	beq.n	80057a6 <HAL_DMA_Init+0x192>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579c:	d003      	beq.n	80057a6 <HAL_DMA_Init+0x192>
 800579e:	21bd      	movs	r1, #189	; 0xbd
 80057a0:	484c      	ldr	r0, [pc, #304]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 80057a2:	f7fe f8ae 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <HAL_DMA_Init+0x1b6>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b6:	d008      	beq.n	80057ca <HAL_DMA_Init+0x1b6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c0:	d003      	beq.n	80057ca <HAL_DMA_Init+0x1b6>
 80057c2:	21be      	movs	r1, #190	; 0xbe
 80057c4:	4843      	ldr	r0, [pc, #268]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 80057c6:	f7fe f89c 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <HAL_DMA_Init+0x1d8>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057da:	d007      	beq.n	80057ec <HAL_DMA_Init+0x1d8>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d003      	beq.n	80057ec <HAL_DMA_Init+0x1d8>
 80057e4:	21bf      	movs	r1, #191	; 0xbf
 80057e6:	483b      	ldr	r0, [pc, #236]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 80057e8:	f7fe f88b 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d012      	beq.n	800581a <HAL_DMA_Init+0x206>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d00d      	beq.n	800581a <HAL_DMA_Init+0x206>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005806:	d008      	beq.n	800581a <HAL_DMA_Init+0x206>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005810:	d003      	beq.n	800581a <HAL_DMA_Init+0x206>
 8005812:	21c0      	movs	r1, #192	; 0xc0
 8005814:	482f      	ldr	r0, [pc, #188]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 8005816:	f7fe f874 	bl	8003902 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_DMA_Init+0x21e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	2b04      	cmp	r3, #4
 8005828:	d003      	beq.n	8005832 <HAL_DMA_Init+0x21e>
 800582a:	21c1      	movs	r1, #193	; 0xc1
 800582c:	4829      	ldr	r0, [pc, #164]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 800582e:	f7fe f868 	bl	8003902 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d065      	beq.n	8005906 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00f      	beq.n	8005862 <HAL_DMA_Init+0x24e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	2b01      	cmp	r3, #1
 8005848:	d00b      	beq.n	8005862 <HAL_DMA_Init+0x24e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	2b02      	cmp	r3, #2
 8005850:	d007      	beq.n	8005862 <HAL_DMA_Init+0x24e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	2b03      	cmp	r3, #3
 8005858:	d003      	beq.n	8005862 <HAL_DMA_Init+0x24e>
 800585a:	21c6      	movs	r1, #198	; 0xc6
 800585c:	481d      	ldr	r0, [pc, #116]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 800585e:	f7fe f850 	bl	8003902 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d036      	beq.n	80058d8 <HAL_DMA_Init+0x2c4>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005872:	d031      	beq.n	80058d8 <HAL_DMA_Init+0x2c4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800587c:	d02c      	beq.n	80058d8 <HAL_DMA_Init+0x2c4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005886:	d027      	beq.n	80058d8 <HAL_DMA_Init+0x2c4>
 8005888:	21c7      	movs	r1, #199	; 0xc7
 800588a:	4812      	ldr	r0, [pc, #72]	; (80058d4 <HAL_DMA_Init+0x2c0>)
 800588c:	f7fe f839 	bl	8003902 <assert_failed>
 8005890:	e022      	b.n	80058d8 <HAL_DMA_Init+0x2c4>
 8005892:	bf00      	nop
 8005894:	40026010 	.word	0x40026010
 8005898:	40026028 	.word	0x40026028
 800589c:	40026040 	.word	0x40026040
 80058a0:	40026058 	.word	0x40026058
 80058a4:	40026070 	.word	0x40026070
 80058a8:	40026088 	.word	0x40026088
 80058ac:	400260a0 	.word	0x400260a0
 80058b0:	400260b8 	.word	0x400260b8
 80058b4:	40026410 	.word	0x40026410
 80058b8:	40026428 	.word	0x40026428
 80058bc:	40026440 	.word	0x40026440
 80058c0:	40026458 	.word	0x40026458
 80058c4:	40026470 	.word	0x40026470
 80058c8:	40026488 	.word	0x40026488
 80058cc:	400264a0 	.word	0x400264a0
 80058d0:	400264b8 	.word	0x400264b8
 80058d4:	08013868 	.word	0x08013868
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d012      	beq.n	8005906 <HAL_DMA_Init+0x2f2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058e8:	d00d      	beq.n	8005906 <HAL_DMA_Init+0x2f2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f2:	d008      	beq.n	8005906 <HAL_DMA_Init+0x2f2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058fc:	d003      	beq.n	8005906 <HAL_DMA_Init+0x2f2>
 80058fe:	21c8      	movs	r1, #200	; 0xc8
 8005900:	4850      	ldr	r0, [pc, #320]	; (8005a44 <HAL_DMA_Init+0x430>)
 8005902:	f7fd fffe 	bl	8003902 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0201 	bic.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005926:	e00f      	b.n	8005948 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005928:	f7ff f926 	bl	8004b78 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b05      	cmp	r3, #5
 8005934:	d908      	bls.n	8005948 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2203      	movs	r2, #3
 8005940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e078      	b.n	8005a3a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e8      	bne.n	8005928 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4b39      	ldr	r3, [pc, #228]	; (8005a48 <HAL_DMA_Init+0x434>)
 8005962:	4013      	ands	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005974:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005980:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800598c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d107      	bne.n	80059b2 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	4313      	orrs	r3, r2
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0307 	bic.w	r3, r3, #7
 80059c8:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d117      	bne.n	8005a0c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00e      	beq.n	8005a0c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 faa2 	bl	8005f38 <DMA_CheckFifoParam>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d008      	beq.n	8005a0c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2240      	movs	r2, #64	; 0x40
 80059fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e016      	b.n	8005a3a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa59 	bl	8005ecc <DMA_CalcBaseAndBitshift>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a22:	223f      	movs	r2, #63	; 0x3f
 8005a24:	409a      	lsls	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	08013868 	.word	0x08013868
 8005a48:	f010803f 	.word	0xf010803f

08005a4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_DMA_Start_IT+0x26>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a70:	d304      	bcc.n	8005a7c <HAL_DMA_Start_IT+0x30>
 8005a72:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8005a76:	4827      	ldr	r0, [pc, #156]	; (8005b14 <HAL_DMA_Start_IT+0xc8>)
 8005a78:	f7fd ff43 	bl	8003902 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_DMA_Start_IT+0x3e>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e040      	b.n	8005b0c <HAL_DMA_Start_IT+0xc0>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d12f      	bne.n	8005afe <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f9dc 	bl	8005e70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abc:	223f      	movs	r2, #63	; 0x3f
 8005abe:	409a      	lsls	r2, r3
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0216 	orr.w	r2, r2, #22
 8005ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0201 	orr.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	e005      	b.n	8005b0a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b06:	2302      	movs	r3, #2
 8005b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08013868 	.word	0x08013868

08005b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d004      	beq.n	8005b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2280      	movs	r2, #128	; 0x80
 8005b30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e00c      	b.n	8005b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2205      	movs	r2, #5
 8005b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b68:	4b92      	ldr	r3, [pc, #584]	; (8005db4 <HAL_DMA_IRQHandler+0x258>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a92      	ldr	r2, [pc, #584]	; (8005db8 <HAL_DMA_IRQHandler+0x25c>)
 8005b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b72:	0a9b      	lsrs	r3, r3, #10
 8005b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b86:	2208      	movs	r2, #8
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01a      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0304 	and.w	r3, r3, #4
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d013      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0204 	bic.w	r2, r2, #4
 8005bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc0:	f043 0201 	orr.w	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bcc:	2201      	movs	r2, #1
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d012      	beq.n	8005bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bea:	2201      	movs	r2, #1
 8005bec:	409a      	lsls	r2, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	f043 0202 	orr.w	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	2204      	movs	r2, #4
 8005c04:	409a      	lsls	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d012      	beq.n	8005c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c20:	2204      	movs	r2, #4
 8005c22:	409a      	lsls	r2, r3
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2c:	f043 0204 	orr.w	r2, r3, #4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c38:	2210      	movs	r2, #16
 8005c3a:	409a      	lsls	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d043      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d03c      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c56:	2210      	movs	r2, #16
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d018      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d108      	bne.n	8005c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d024      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
 8005c8a:	e01f      	b.n	8005ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01b      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
 8005c9c:	e016      	b.n	8005ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d107      	bne.n	8005cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0208 	bic.w	r2, r2, #8
 8005cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 808e 	beq.w	8005dfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8086 	beq.w	8005dfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b05      	cmp	r3, #5
 8005d04:	d136      	bne.n	8005d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0216 	bic.w	r2, r2, #22
 8005d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <HAL_DMA_IRQHandler+0x1da>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0208 	bic.w	r2, r2, #8
 8005d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4a:	223f      	movs	r2, #63	; 0x3f
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d07d      	beq.n	8005e66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	4798      	blx	r3
        }
        return;
 8005d72:	e078      	b.n	8005e66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01c      	beq.n	8005dbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d108      	bne.n	8005da2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d030      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
 8005da0:	e02b      	b.n	8005dfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d027      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	4798      	blx	r3
 8005db2:	e022      	b.n	8005dfa <HAL_DMA_IRQHandler+0x29e>
 8005db4:	200000d8 	.word	0x200000d8
 8005db8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10f      	bne.n	8005dea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0210 	bic.w	r2, r2, #16
 8005dd8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d032      	beq.n	8005e68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d022      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2205      	movs	r2, #5
 8005e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d307      	bcc.n	8005e42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f2      	bne.n	8005e26 <HAL_DMA_IRQHandler+0x2ca>
 8005e40:	e000      	b.n	8005e44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005e42:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
 8005e64:	e000      	b.n	8005e68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005e66:	bf00      	nop
    }
  }
}
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	d108      	bne.n	8005eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005eae:	e007      	b.n	8005ec0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	60da      	str	r2, [r3, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	3b10      	subs	r3, #16
 8005edc:	4a14      	ldr	r2, [pc, #80]	; (8005f30 <DMA_CalcBaseAndBitshift+0x64>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <DMA_CalcBaseAndBitshift+0x68>)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d909      	bls.n	8005f0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f02:	f023 0303 	bic.w	r3, r3, #3
 8005f06:	1d1a      	adds	r2, r3, #4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f0c:	e007      	b.n	8005f1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	aaaaaaab 	.word	0xaaaaaaab
 8005f34:	0801405c 	.word	0x0801405c

08005f38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11f      	bne.n	8005f92 <DMA_CheckFifoParam+0x5a>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d856      	bhi.n	8006006 <DMA_CheckFifoParam+0xce>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <DMA_CheckFifoParam+0x28>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f71 	.word	0x08005f71
 8005f64:	08005f83 	.word	0x08005f83
 8005f68:	08005f71 	.word	0x08005f71
 8005f6c:	08006007 	.word	0x08006007
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d046      	beq.n	800600a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f80:	e043      	b.n	800600a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f8a:	d140      	bne.n	800600e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f90:	e03d      	b.n	800600e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f9a:	d121      	bne.n	8005fe0 <DMA_CheckFifoParam+0xa8>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d837      	bhi.n	8006012 <DMA_CheckFifoParam+0xda>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <DMA_CheckFifoParam+0x70>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fb9 	.word	0x08005fb9
 8005fac:	08005fbf 	.word	0x08005fbf
 8005fb0:	08005fb9 	.word	0x08005fb9
 8005fb4:	08005fd1 	.word	0x08005fd1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
      break;
 8005fbc:	e030      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d025      	beq.n	8006016 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fce:	e022      	b.n	8006016 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fd8:	d11f      	bne.n	800601a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fde:	e01c      	b.n	800601a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d903      	bls.n	8005fee <DMA_CheckFifoParam+0xb6>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b03      	cmp	r3, #3
 8005fea:	d003      	beq.n	8005ff4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fec:	e018      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff2:	e015      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00e      	beq.n	800601e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e00b      	b.n	800601e <DMA_CheckFifoParam+0xe6>
      break;
 8006006:	bf00      	nop
 8006008:	e00a      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      break;
 800600a:	bf00      	nop
 800600c:	e008      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      break;
 800600e:	bf00      	nop
 8006010:	e006      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      break;
 8006012:	bf00      	nop
 8006014:	e004      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      break;
 8006016:	bf00      	nop
 8006018:	e002      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      break;   
 800601a:	bf00      	nop
 800601c:	e000      	b.n	8006020 <DMA_CheckFifoParam+0xe8>
      break;
 800601e:	bf00      	nop
    }
  } 
  
  return status; 
 8006020:	7bfb      	ldrb	r3, [r7, #15]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop

08006030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a33      	ldr	r2, [pc, #204]	; (8006118 <HAL_GPIO_Init+0xe8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d017      	beq.n	800607e <HAL_GPIO_Init+0x4e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a32      	ldr	r2, [pc, #200]	; (800611c <HAL_GPIO_Init+0xec>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d013      	beq.n	800607e <HAL_GPIO_Init+0x4e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a31      	ldr	r2, [pc, #196]	; (8006120 <HAL_GPIO_Init+0xf0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00f      	beq.n	800607e <HAL_GPIO_Init+0x4e>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a30      	ldr	r2, [pc, #192]	; (8006124 <HAL_GPIO_Init+0xf4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00b      	beq.n	800607e <HAL_GPIO_Init+0x4e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2f      	ldr	r2, [pc, #188]	; (8006128 <HAL_GPIO_Init+0xf8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d007      	beq.n	800607e <HAL_GPIO_Init+0x4e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2e      	ldr	r2, [pc, #184]	; (800612c <HAL_GPIO_Init+0xfc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d003      	beq.n	800607e <HAL_GPIO_Init+0x4e>
 8006076:	21ac      	movs	r1, #172	; 0xac
 8006078:	482d      	ldr	r0, [pc, #180]	; (8006130 <HAL_GPIO_Init+0x100>)
 800607a:	f7fd fc42 	bl	8003902 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d005      	beq.n	8006094 <HAL_GPIO_Init+0x64>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	0c1b      	lsrs	r3, r3, #16
 800608e:	041b      	lsls	r3, r3, #16
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <HAL_GPIO_Init+0x6c>
 8006094:	21ad      	movs	r1, #173	; 0xad
 8006096:	4826      	ldr	r0, [pc, #152]	; (8006130 <HAL_GPIO_Init+0x100>)
 8006098:	f7fd fc33 	bl	8003902 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d035      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d031      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b11      	cmp	r3, #17
 80060b2:	d02d      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d029      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b12      	cmp	r3, #18
 80060c2:	d025      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80060cc:	d020      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80060d6:	d01b      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80060e0:	d016      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80060ea:	d011      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80060f4:	d00c      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80060fe:	d007      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b03      	cmp	r3, #3
 8006106:	d003      	beq.n	8006110 <HAL_GPIO_Init+0xe0>
 8006108:	21ae      	movs	r1, #174	; 0xae
 800610a:	4809      	ldr	r0, [pc, #36]	; (8006130 <HAL_GPIO_Init+0x100>)
 800610c:	f7fd fbf9 	bl	8003902 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e211      	b.n	800653a <HAL_GPIO_Init+0x50a>
 8006116:	bf00      	nop
 8006118:	40020000 	.word	0x40020000
 800611c:	40020400 	.word	0x40020400
 8006120:	40020800 	.word	0x40020800
 8006124:	40020c00 	.word	0x40020c00
 8006128:	40021000 	.word	0x40021000
 800612c:	40021c00 	.word	0x40021c00
 8006130:	080138a0 	.word	0x080138a0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006134:	2201      	movs	r2, #1
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4013      	ands	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	429a      	cmp	r2, r3
 800614e:	f040 81f1 	bne.w	8006534 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b01      	cmp	r3, #1
 800615c:	d005      	beq.n	800616a <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006166:	2b02      	cmp	r3, #2
 8006168:	d144      	bne.n	80061f4 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00f      	beq.n	8006192 <HAL_GPIO_Init+0x162>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d00b      	beq.n	8006192 <HAL_GPIO_Init+0x162>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d007      	beq.n	8006192 <HAL_GPIO_Init+0x162>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b03      	cmp	r3, #3
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x162>
 800618a:	21c0      	movs	r1, #192	; 0xc0
 800618c:	489f      	ldr	r0, [pc, #636]	; (800640c <HAL_GPIO_Init+0x3dc>)
 800618e:	f7fd fbb8 	bl	8003902 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	2203      	movs	r2, #3
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061c8:	2201      	movs	r2, #1
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 0201 	and.w	r2, r3, #1
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0303 	and.w	r3, r3, #3
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d027      	beq.n	8006250 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00b      	beq.n	8006220 <HAL_GPIO_Init+0x1f0>
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d007      	beq.n	8006220 <HAL_GPIO_Init+0x1f0>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b02      	cmp	r3, #2
 8006216:	d003      	beq.n	8006220 <HAL_GPIO_Init+0x1f0>
 8006218:	21d1      	movs	r1, #209	; 0xd1
 800621a:	487c      	ldr	r0, [pc, #496]	; (800640c <HAL_GPIO_Init+0x3dc>)
 800621c:	f7fd fb71 	bl	8003902 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	2203      	movs	r2, #3
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	4013      	ands	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	4313      	orrs	r3, r2
 8006248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	2b02      	cmp	r3, #2
 800625a:	f040 80a0 	bne.w	800639e <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d077      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b09      	cmp	r3, #9
 800626c:	d073      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d06f      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d06b      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d067      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d063      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d05f      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d05b      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d057      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d053      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d04f      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d04b      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d047      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d043      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d03f      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d03b      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d037      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d033      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b06      	cmp	r3, #6
 80062f4:	d02f      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d02b      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b06      	cmp	r3, #6
 8006304:	d027      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b07      	cmp	r3, #7
 800630c:	d023      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b07      	cmp	r3, #7
 8006314:	d01f      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	2b07      	cmp	r3, #7
 800631c:	d01b      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b08      	cmp	r3, #8
 8006324:	d017      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b0a      	cmp	r3, #10
 800632c:	d013      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b09      	cmp	r3, #9
 8006334:	d00f      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b09      	cmp	r3, #9
 800633c:	d00b      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b0c      	cmp	r3, #12
 8006344:	d007      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b0f      	cmp	r3, #15
 800634c:	d003      	beq.n	8006356 <HAL_GPIO_Init+0x326>
 800634e:	21de      	movs	r1, #222	; 0xde
 8006350:	482e      	ldr	r0, [pc, #184]	; (800640c <HAL_GPIO_Init+0x3dc>)
 8006352:	f7fd fad6 	bl	8003902 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	08da      	lsrs	r2, r3, #3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3208      	adds	r2, #8
 800635e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	220f      	movs	r2, #15
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	43db      	mvns	r3, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4013      	ands	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4313      	orrs	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	08da      	lsrs	r2, r3, #3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3208      	adds	r2, #8
 8006398:	69b9      	ldr	r1, [r7, #24]
 800639a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	2203      	movs	r2, #3
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	43db      	mvns	r3, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4013      	ands	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f003 0203 	and.w	r2, r3, #3
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80aa 	beq.w	8006534 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <HAL_GPIO_Init+0x3e0>)
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	4a09      	ldr	r2, [pc, #36]	; (8006410 <HAL_GPIO_Init+0x3e0>)
 80063ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ee:	6453      	str	r3, [r2, #68]	; 0x44
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <HAL_GPIO_Init+0x3e0>)
 80063f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f8:	60fb      	str	r3, [r7, #12]
 80063fa:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063fc:	4a05      	ldr	r2, [pc, #20]	; (8006414 <HAL_GPIO_Init+0x3e4>)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	089b      	lsrs	r3, r3, #2
 8006402:	3302      	adds	r3, #2
 8006404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006408:	e006      	b.n	8006418 <HAL_GPIO_Init+0x3e8>
 800640a:	bf00      	nop
 800640c:	080138a0 	.word	0x080138a0
 8006410:	40023800 	.word	0x40023800
 8006414:	40013800 	.word	0x40013800
 8006418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	220f      	movs	r2, #15
 8006424:	fa02 f303 	lsl.w	r3, r2, r3
 8006428:	43db      	mvns	r3, r3
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4013      	ands	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a46      	ldr	r2, [pc, #280]	; (800654c <HAL_GPIO_Init+0x51c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d019      	beq.n	800646c <HAL_GPIO_Init+0x43c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a45      	ldr	r2, [pc, #276]	; (8006550 <HAL_GPIO_Init+0x520>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d013      	beq.n	8006468 <HAL_GPIO_Init+0x438>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a44      	ldr	r2, [pc, #272]	; (8006554 <HAL_GPIO_Init+0x524>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00d      	beq.n	8006464 <HAL_GPIO_Init+0x434>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a43      	ldr	r2, [pc, #268]	; (8006558 <HAL_GPIO_Init+0x528>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d007      	beq.n	8006460 <HAL_GPIO_Init+0x430>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a42      	ldr	r2, [pc, #264]	; (800655c <HAL_GPIO_Init+0x52c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d101      	bne.n	800645c <HAL_GPIO_Init+0x42c>
 8006458:	2304      	movs	r3, #4
 800645a:	e008      	b.n	800646e <HAL_GPIO_Init+0x43e>
 800645c:	2307      	movs	r3, #7
 800645e:	e006      	b.n	800646e <HAL_GPIO_Init+0x43e>
 8006460:	2303      	movs	r3, #3
 8006462:	e004      	b.n	800646e <HAL_GPIO_Init+0x43e>
 8006464:	2302      	movs	r3, #2
 8006466:	e002      	b.n	800646e <HAL_GPIO_Init+0x43e>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <HAL_GPIO_Init+0x43e>
 800646c:	2300      	movs	r3, #0
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	f002 0203 	and.w	r2, r2, #3
 8006474:	0092      	lsls	r2, r2, #2
 8006476:	4093      	lsls	r3, r2
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	4313      	orrs	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800647e:	4938      	ldr	r1, [pc, #224]	; (8006560 <HAL_GPIO_Init+0x530>)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	3302      	adds	r3, #2
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800648c:	4b35      	ldr	r3, [pc, #212]	; (8006564 <HAL_GPIO_Init+0x534>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	43db      	mvns	r3, r3
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	4013      	ands	r3, r2
 800649a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <HAL_GPIO_Init+0x534>)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064b6:	4b2b      	ldr	r3, [pc, #172]	; (8006564 <HAL_GPIO_Init+0x534>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	43db      	mvns	r3, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	4013      	ands	r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064da:	4a22      	ldr	r2, [pc, #136]	; (8006564 <HAL_GPIO_Init+0x534>)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064e0:	4b20      	ldr	r3, [pc, #128]	; (8006564 <HAL_GPIO_Init+0x534>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4013      	ands	r3, r2
 80064ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006504:	4a17      	ldr	r2, [pc, #92]	; (8006564 <HAL_GPIO_Init+0x534>)
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <HAL_GPIO_Init+0x534>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	43db      	mvns	r3, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4013      	ands	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800652e:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <HAL_GPIO_Init+0x534>)
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	3301      	adds	r3, #1
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2b0f      	cmp	r3, #15
 800653e:	f67f adf9 	bls.w	8006134 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40020000 	.word	0x40020000
 8006550:	40020400 	.word	0x40020400
 8006554:	40020800 	.word	0x40020800
 8006558:	40020c00 	.word	0x40020c00
 800655c:	40021000 	.word	0x40021000
 8006560:	40013800 	.word	0x40013800
 8006564:	40013c00 	.word	0x40013c00

08006568 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a71      	ldr	r2, [pc, #452]	; (8006748 <HAL_GPIO_DeInit+0x1e0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d018      	beq.n	80065b8 <HAL_GPIO_DeInit+0x50>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a70      	ldr	r2, [pc, #448]	; (800674c <HAL_GPIO_DeInit+0x1e4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d014      	beq.n	80065b8 <HAL_GPIO_DeInit+0x50>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a6f      	ldr	r2, [pc, #444]	; (8006750 <HAL_GPIO_DeInit+0x1e8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d010      	beq.n	80065b8 <HAL_GPIO_DeInit+0x50>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a6e      	ldr	r2, [pc, #440]	; (8006754 <HAL_GPIO_DeInit+0x1ec>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00c      	beq.n	80065b8 <HAL_GPIO_DeInit+0x50>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a6d      	ldr	r2, [pc, #436]	; (8006758 <HAL_GPIO_DeInit+0x1f0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d008      	beq.n	80065b8 <HAL_GPIO_DeInit+0x50>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a6c      	ldr	r2, [pc, #432]	; (800675c <HAL_GPIO_DeInit+0x1f4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_GPIO_DeInit+0x50>
 80065ae:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80065b2:	486b      	ldr	r0, [pc, #428]	; (8006760 <HAL_GPIO_DeInit+0x1f8>)
 80065b4:	f7fd f9a5 	bl	8003902 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	e0bb      	b.n	8006736 <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065be:	2201      	movs	r2, #1
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	4013      	ands	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	f040 80ab 	bne.w	8006730 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80065da:	4a62      	ldr	r2, [pc, #392]	; (8006764 <HAL_GPIO_DeInit+0x1fc>)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	3302      	adds	r3, #2
 80065e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	220f      	movs	r2, #15
 80065f2:	fa02 f303 	lsl.w	r3, r2, r3
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4013      	ands	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a52      	ldr	r2, [pc, #328]	; (8006748 <HAL_GPIO_DeInit+0x1e0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d019      	beq.n	8006638 <HAL_GPIO_DeInit+0xd0>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a51      	ldr	r2, [pc, #324]	; (800674c <HAL_GPIO_DeInit+0x1e4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <HAL_GPIO_DeInit+0xcc>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a50      	ldr	r2, [pc, #320]	; (8006750 <HAL_GPIO_DeInit+0x1e8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00d      	beq.n	8006630 <HAL_GPIO_DeInit+0xc8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a4f      	ldr	r2, [pc, #316]	; (8006754 <HAL_GPIO_DeInit+0x1ec>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <HAL_GPIO_DeInit+0xc4>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a4e      	ldr	r2, [pc, #312]	; (8006758 <HAL_GPIO_DeInit+0x1f0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <HAL_GPIO_DeInit+0xc0>
 8006624:	2304      	movs	r3, #4
 8006626:	e008      	b.n	800663a <HAL_GPIO_DeInit+0xd2>
 8006628:	2307      	movs	r3, #7
 800662a:	e006      	b.n	800663a <HAL_GPIO_DeInit+0xd2>
 800662c:	2303      	movs	r3, #3
 800662e:	e004      	b.n	800663a <HAL_GPIO_DeInit+0xd2>
 8006630:	2302      	movs	r3, #2
 8006632:	e002      	b.n	800663a <HAL_GPIO_DeInit+0xd2>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_GPIO_DeInit+0xd2>
 8006638:	2300      	movs	r3, #0
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	f002 0203 	and.w	r2, r2, #3
 8006640:	0092      	lsls	r2, r2, #2
 8006642:	4093      	lsls	r3, r2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d132      	bne.n	80066b0 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800664a:	4b47      	ldr	r3, [pc, #284]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	43db      	mvns	r3, r3
 8006652:	4945      	ldr	r1, [pc, #276]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 8006654:	4013      	ands	r3, r2
 8006656:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006658:	4b43      	ldr	r3, [pc, #268]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	43db      	mvns	r3, r3
 8006660:	4941      	ldr	r1, [pc, #260]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 8006662:	4013      	ands	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006666:	4b40      	ldr	r3, [pc, #256]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	43db      	mvns	r3, r3
 800666e:	493e      	ldr	r1, [pc, #248]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 8006670:	4013      	ands	r3, r2
 8006672:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006674:	4b3c      	ldr	r3, [pc, #240]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	43db      	mvns	r3, r3
 800667c:	493a      	ldr	r1, [pc, #232]	; (8006768 <HAL_GPIO_DeInit+0x200>)
 800667e:	4013      	ands	r3, r2
 8006680:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f003 0303 	and.w	r3, r3, #3
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	220f      	movs	r2, #15
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006692:	4a34      	ldr	r2, [pc, #208]	; (8006764 <HAL_GPIO_DeInit+0x1fc>)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	3302      	adds	r3, #2
 800669a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	43da      	mvns	r2, r3
 80066a2:	4830      	ldr	r0, [pc, #192]	; (8006764 <HAL_GPIO_DeInit+0x1fc>)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	400a      	ands	r2, r1
 80066aa:	3302      	adds	r3, #2
 80066ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	2103      	movs	r1, #3
 80066ba:	fa01 f303 	lsl.w	r3, r1, r3
 80066be:	43db      	mvns	r3, r3
 80066c0:	401a      	ands	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	08da      	lsrs	r2, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3208      	adds	r2, #8
 80066ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	220f      	movs	r2, #15
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	43db      	mvns	r3, r3
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	08d2      	lsrs	r2, r2, #3
 80066e6:	4019      	ands	r1, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3208      	adds	r2, #8
 80066ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	005b      	lsls	r3, r3, #1
 80066f8:	2103      	movs	r1, #3
 80066fa:	fa01 f303 	lsl.w	r3, r1, r3
 80066fe:	43db      	mvns	r3, r3
 8006700:	401a      	ands	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	2101      	movs	r1, #1
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	fa01 f303 	lsl.w	r3, r1, r3
 8006712:	43db      	mvns	r3, r3
 8006714:	401a      	ands	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	2103      	movs	r1, #3
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	43db      	mvns	r3, r3
 800672a:	401a      	ands	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	3301      	adds	r3, #1
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b0f      	cmp	r3, #15
 800673a:	f67f af40 	bls.w	80065be <HAL_GPIO_DeInit+0x56>
    }
  }
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40020000 	.word	0x40020000
 800674c:	40020400 	.word	0x40020400
 8006750:	40020800 	.word	0x40020800
 8006754:	40020c00 	.word	0x40020c00
 8006758:	40021000 	.word	0x40021000
 800675c:	40021c00 	.word	0x40021c00
 8006760:	080138a0 	.word	0x080138a0
 8006764:	40013800 	.word	0x40013800
 8006768:	40013c00 	.word	0x40013c00

0800676c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	807b      	strh	r3, [r7, #2]
 8006778:	4613      	mov	r3, r2
 800677a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800677c:	887b      	ldrh	r3, [r7, #2]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <HAL_GPIO_WritePin+0x20>
 8006782:	887b      	ldrh	r3, [r7, #2]
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <HAL_GPIO_WritePin+0x2a>
 800678c:	f240 119d 	movw	r1, #413	; 0x19d
 8006790:	480e      	ldr	r0, [pc, #56]	; (80067cc <HAL_GPIO_WritePin+0x60>)
 8006792:	f7fd f8b6 	bl	8003902 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006796:	787b      	ldrb	r3, [r7, #1]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <HAL_GPIO_WritePin+0x40>
 800679c:	787b      	ldrb	r3, [r7, #1]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d004      	beq.n	80067ac <HAL_GPIO_WritePin+0x40>
 80067a2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80067a6:	4809      	ldr	r0, [pc, #36]	; (80067cc <HAL_GPIO_WritePin+0x60>)
 80067a8:	f7fd f8ab 	bl	8003902 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80067ac:	787b      	ldrb	r3, [r7, #1]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067b8:	e003      	b.n	80067c2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067ba:	887b      	ldrh	r3, [r7, #2]
 80067bc:	041a      	lsls	r2, r3, #16
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	619a      	str	r2, [r3, #24]
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	080138a0 	.word	0x080138a0

080067d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067da:	4b08      	ldr	r3, [pc, #32]	; (80067fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067e6:	4a05      	ldr	r2, [pc, #20]	; (80067fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fc fab4 	bl	8002d5c <HAL_GPIO_EXTI_Callback>
  }
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40013c00 	.word	0x40013c00

08006800 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006802:	b08f      	sub	sp, #60	; 0x3c
 8006804:	af0a      	add	r7, sp, #40	; 0x28
 8006806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e05d      	b.n	80068ce <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800681a:	d003      	beq.n	8006824 <HAL_HCD_Init+0x24>
 800681c:	2179      	movs	r1, #121	; 0x79
 800681e:	482e      	ldr	r0, [pc, #184]	; (80068d8 <HAL_HCD_Init+0xd8>)
 8006820:	f7fd f86f 	bl	8003902 <assert_failed>

  USBx = hhcd->Instance;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f009 fe0a 	bl	8010458 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2203      	movs	r2, #3
 8006848:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4618      	mov	r0, r3
 8006864:	f006 ff60 	bl	800d728 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	603b      	str	r3, [r7, #0]
 800686e:	687e      	ldr	r6, [r7, #4]
 8006870:	466d      	mov	r5, sp
 8006872:	f106 0410 	add.w	r4, r6, #16
 8006876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800687a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800687c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800687e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006882:	e885 0003 	stmia.w	r5, {r0, r1}
 8006886:	1d33      	adds	r3, r6, #4
 8006888:	cb0e      	ldmia	r3, {r1, r2, r3}
 800688a:	6838      	ldr	r0, [r7, #0]
 800688c:	f006 feda 	bl	800d644 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2101      	movs	r1, #1
 8006896:	4618      	mov	r0, r3
 8006898:	f006 ff57 	bl	800d74a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	603b      	str	r3, [r7, #0]
 80068a2:	687e      	ldr	r6, [r7, #4]
 80068a4:	466d      	mov	r5, sp
 80068a6:	f106 0410 	add.w	r4, r6, #16
 80068aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80068ba:	1d33      	adds	r3, r6, #4
 80068bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068be:	6838      	ldr	r0, [r7, #0]
 80068c0:	f007 f8be 	bl	800da40 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068d6:	bf00      	nop
 80068d8:	080138dc 	.word	0x080138dc

080068dc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b089      	sub	sp, #36	; 0x24
 80068e0:	af04      	add	r7, sp, #16
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	4608      	mov	r0, r1
 80068e6:	4611      	mov	r1, r2
 80068e8:	461a      	mov	r2, r3
 80068ea:	4603      	mov	r3, r0
 80068ec:	70fb      	strb	r3, [r7, #3]
 80068ee:	460b      	mov	r3, r1
 80068f0:	70bb      	strb	r3, [r7, #2]
 80068f2:	4613      	mov	r3, r2
 80068f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_HCD_HC_Init+0x28>
 8006900:	2302      	movs	r3, #2
 8006902:	e076      	b.n	80069f2 <HAL_HCD_HC_Init+0x116>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	212c      	movs	r1, #44	; 0x2c
 8006912:	fb01 f303 	mul.w	r3, r1, r3
 8006916:	4413      	add	r3, r2
 8006918:	333d      	adds	r3, #61	; 0x3d
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	212c      	movs	r1, #44	; 0x2c
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	3338      	adds	r3, #56	; 0x38
 800692c:	787a      	ldrb	r2, [r7, #1]
 800692e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	212c      	movs	r1, #44	; 0x2c
 8006936:	fb01 f303 	mul.w	r3, r1, r3
 800693a:	4413      	add	r3, r2
 800693c:	3340      	adds	r3, #64	; 0x40
 800693e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006940:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	212c      	movs	r1, #44	; 0x2c
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	3339      	adds	r3, #57	; 0x39
 8006950:	78fa      	ldrb	r2, [r7, #3]
 8006952:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	212c      	movs	r1, #44	; 0x2c
 800695a:	fb01 f303 	mul.w	r3, r1, r3
 800695e:	4413      	add	r3, r2
 8006960:	333f      	adds	r3, #63	; 0x3f
 8006962:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	78ba      	ldrb	r2, [r7, #2]
 800696c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006970:	b2d0      	uxtb	r0, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	212c      	movs	r1, #44	; 0x2c
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	4413      	add	r3, r2
 800697c:	333a      	adds	r3, #58	; 0x3a
 800697e:	4602      	mov	r2, r0
 8006980:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006982:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006986:	2b00      	cmp	r3, #0
 8006988:	da09      	bge.n	800699e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	212c      	movs	r1, #44	; 0x2c
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	4413      	add	r3, r2
 8006996:	333b      	adds	r3, #59	; 0x3b
 8006998:	2201      	movs	r2, #1
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	e008      	b.n	80069b0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	212c      	movs	r1, #44	; 0x2c
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	333b      	adds	r3, #59	; 0x3b
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	333c      	adds	r3, #60	; 0x3c
 80069be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80069c2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	787c      	ldrb	r4, [r7, #1]
 80069ca:	78ba      	ldrb	r2, [r7, #2]
 80069cc:	78f9      	ldrb	r1, [r7, #3]
 80069ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069d0:	9302      	str	r3, [sp, #8]
 80069d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4623      	mov	r3, r4
 80069e0:	f007 f9a8 	bl	800dd34 <USB_HC_Init>
 80069e4:	4603      	mov	r3, r0
 80069e6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd90      	pop	{r4, r7, pc}

080069fa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_HCD_HC_Halt+0x1e>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e00f      	b.n	8006a38 <HAL_HCD_HC_Halt+0x3e>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	4611      	mov	r1, r2
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f007 fbe4 	bl	800e1f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	4608      	mov	r0, r1
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	70fb      	strb	r3, [r7, #3]
 8006a52:	460b      	mov	r3, r1
 8006a54:	70bb      	strb	r3, [r7, #2]
 8006a56:	4613      	mov	r3, r2
 8006a58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	212c      	movs	r1, #44	; 0x2c
 8006a60:	fb01 f303 	mul.w	r3, r1, r3
 8006a64:	4413      	add	r3, r2
 8006a66:	333b      	adds	r3, #59	; 0x3b
 8006a68:	78ba      	ldrb	r2, [r7, #2]
 8006a6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	212c      	movs	r1, #44	; 0x2c
 8006a72:	fb01 f303 	mul.w	r3, r1, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	333f      	adds	r3, #63	; 0x3f
 8006a7a:	787a      	ldrb	r2, [r7, #1]
 8006a7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006a7e:	7c3b      	ldrb	r3, [r7, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d112      	bne.n	8006aaa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	212c      	movs	r1, #44	; 0x2c
 8006a8a:	fb01 f303 	mul.w	r3, r1, r3
 8006a8e:	4413      	add	r3, r2
 8006a90:	3342      	adds	r3, #66	; 0x42
 8006a92:	2203      	movs	r2, #3
 8006a94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	212c      	movs	r1, #44	; 0x2c
 8006a9c:	fb01 f303 	mul.w	r3, r1, r3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	333d      	adds	r3, #61	; 0x3d
 8006aa4:	7f3a      	ldrb	r2, [r7, #28]
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	e008      	b.n	8006abc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	212c      	movs	r1, #44	; 0x2c
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3342      	adds	r3, #66	; 0x42
 8006ab8:	2202      	movs	r2, #2
 8006aba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006abc:	787b      	ldrb	r3, [r7, #1]
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	f200 80c6 	bhi.w	8006c50 <HAL_HCD_HC_SubmitRequest+0x210>
 8006ac4:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006c3d 	.word	0x08006c3d
 8006ad4:	08006b41 	.word	0x08006b41
 8006ad8:	08006bbf 	.word	0x08006bbf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006adc:	7c3b      	ldrb	r3, [r7, #16]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	f040 80b8 	bne.w	8006c54 <HAL_HCD_HC_SubmitRequest+0x214>
 8006ae4:	78bb      	ldrb	r3, [r7, #2]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80b4 	bne.w	8006c54 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006aec:	8b3b      	ldrh	r3, [r7, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d108      	bne.n	8006b04 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006af2:	78fb      	ldrb	r3, [r7, #3]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	212c      	movs	r1, #44	; 0x2c
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	4413      	add	r3, r2
 8006afe:	3355      	adds	r3, #85	; 0x55
 8006b00:	2201      	movs	r2, #1
 8006b02:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006b04:	78fb      	ldrb	r3, [r7, #3]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	212c      	movs	r1, #44	; 0x2c
 8006b0a:	fb01 f303 	mul.w	r3, r1, r3
 8006b0e:	4413      	add	r3, r2
 8006b10:	3355      	adds	r3, #85	; 0x55
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d109      	bne.n	8006b2c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	212c      	movs	r1, #44	; 0x2c
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
 8006b22:	4413      	add	r3, r2
 8006b24:	3342      	adds	r3, #66	; 0x42
 8006b26:	2200      	movs	r2, #0
 8006b28:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006b2a:	e093      	b.n	8006c54 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006b2c:	78fb      	ldrb	r3, [r7, #3]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	212c      	movs	r1, #44	; 0x2c
 8006b32:	fb01 f303 	mul.w	r3, r1, r3
 8006b36:	4413      	add	r3, r2
 8006b38:	3342      	adds	r3, #66	; 0x42
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]
      break;
 8006b3e:	e089      	b.n	8006c54 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006b40:	78bb      	ldrb	r3, [r7, #2]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11d      	bne.n	8006b82 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	212c      	movs	r1, #44	; 0x2c
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	4413      	add	r3, r2
 8006b52:	3355      	adds	r3, #85	; 0x55
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	212c      	movs	r1, #44	; 0x2c
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	3342      	adds	r3, #66	; 0x42
 8006b68:	2200      	movs	r2, #0
 8006b6a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006b6c:	e073      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	212c      	movs	r1, #44	; 0x2c
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	3342      	adds	r3, #66	; 0x42
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	701a      	strb	r2, [r3, #0]
      break;
 8006b80:	e069      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	212c      	movs	r1, #44	; 0x2c
 8006b88:	fb01 f303 	mul.w	r3, r1, r3
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3354      	adds	r3, #84	; 0x54
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	212c      	movs	r1, #44	; 0x2c
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3342      	adds	r3, #66	; 0x42
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]
      break;
 8006ba8:	e055      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	212c      	movs	r1, #44	; 0x2c
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3342      	adds	r3, #66	; 0x42
 8006bb8:	2202      	movs	r2, #2
 8006bba:	701a      	strb	r2, [r3, #0]
      break;
 8006bbc:	e04b      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006bbe:	78bb      	ldrb	r3, [r7, #2]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d11d      	bne.n	8006c00 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	212c      	movs	r1, #44	; 0x2c
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	3355      	adds	r3, #85	; 0x55
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	212c      	movs	r1, #44	; 0x2c
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	3342      	adds	r3, #66	; 0x42
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006bea:	e034      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	212c      	movs	r1, #44	; 0x2c
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3342      	adds	r3, #66	; 0x42
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	701a      	strb	r2, [r3, #0]
      break;
 8006bfe:	e02a      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	212c      	movs	r1, #44	; 0x2c
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3354      	adds	r3, #84	; 0x54
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	212c      	movs	r1, #44	; 0x2c
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	4413      	add	r3, r2
 8006c20:	3342      	adds	r3, #66	; 0x42
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
      break;
 8006c26:	e016      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	212c      	movs	r1, #44	; 0x2c
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	3342      	adds	r3, #66	; 0x42
 8006c36:	2202      	movs	r2, #2
 8006c38:	701a      	strb	r2, [r3, #0]
      break;
 8006c3a:	e00c      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	212c      	movs	r1, #44	; 0x2c
 8006c42:	fb01 f303 	mul.w	r3, r1, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	3342      	adds	r3, #66	; 0x42
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
      break;
 8006c4e:	e002      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006c50:	bf00      	nop
 8006c52:	e000      	b.n	8006c56 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006c54:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	212c      	movs	r1, #44	; 0x2c
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	4413      	add	r3, r2
 8006c62:	3344      	adds	r3, #68	; 0x44
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	8b3a      	ldrh	r2, [r7, #24]
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	202c      	movs	r0, #44	; 0x2c
 8006c70:	fb00 f303 	mul.w	r3, r0, r3
 8006c74:	440b      	add	r3, r1
 8006c76:	334c      	adds	r3, #76	; 0x4c
 8006c78:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	212c      	movs	r1, #44	; 0x2c
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	3360      	adds	r3, #96	; 0x60
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	212c      	movs	r1, #44	; 0x2c
 8006c92:	fb01 f303 	mul.w	r3, r1, r3
 8006c96:	4413      	add	r3, r2
 8006c98:	3350      	adds	r3, #80	; 0x50
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	212c      	movs	r1, #44	; 0x2c
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	4413      	add	r3, r2
 8006caa:	3339      	adds	r3, #57	; 0x39
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	212c      	movs	r1, #44	; 0x2c
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	3361      	adds	r3, #97	; 0x61
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	222c      	movs	r2, #44	; 0x2c
 8006cca:	fb02 f303 	mul.w	r3, r2, r3
 8006cce:	3338      	adds	r3, #56	; 0x38
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	18d1      	adds	r1, r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f007 f938 	bl	800df50 <USB_HC_StartXfer>
 8006ce0:	4603      	mov	r3, r0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop

08006cec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b086      	sub	sp, #24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f006 fe5b 	bl	800d9be <USB_GetMode>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	f040 80f6 	bne.w	8006efc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f006 fe3f 	bl	800d998 <USB_ReadInterrupts>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80ec 	beq.w	8006efa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f006 fe36 	bl	800d998 <USB_ReadInterrupts>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d36:	d104      	bne.n	8006d42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006d40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f006 fe26 	bl	800d998 <USB_ReadInterrupts>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d56:	d104      	bne.n	8006d62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f006 fe16 	bl	800d998 <USB_ReadInterrupts>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d76:	d104      	bne.n	8006d82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006d80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f006 fe06 	bl	800d998 <USB_ReadInterrupts>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d103      	bne.n	8006d9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f006 fdf8 	bl	800d998 <USB_ReadInterrupts>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db2:	d11c      	bne.n	8006dee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006dbc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10f      	bne.n	8006dee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006dce:	2110      	movs	r1, #16
 8006dd0:	6938      	ldr	r0, [r7, #16]
 8006dd2:	f006 fd07 	bl	800d7e4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f006 fd28 	bl	800d82c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2101      	movs	r1, #1
 8006de2:	4618      	mov	r0, r3
 8006de4:	f006 fee0 	bl	800dba8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f009 fbb3 	bl	8010554 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f006 fdd0 	bl	800d998 <USB_ReadInterrupts>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e02:	d102      	bne.n	8006e0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f001 fa03 	bl	8008210 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f006 fdc2 	bl	800d998 <USB_ReadInterrupts>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d106      	bne.n	8006e2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f009 fb7c 	bl	801051c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f006 fdb1 	bl	800d998 <USB_ReadInterrupts>
 8006e36:	4603      	mov	r3, r0
 8006e38:	f003 0310 	and.w	r3, r3, #16
 8006e3c:	2b10      	cmp	r3, #16
 8006e3e:	d101      	bne.n	8006e44 <HAL_HCD_IRQHandler+0x158>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e000      	b.n	8006e46 <HAL_HCD_IRQHandler+0x15a>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d012      	beq.n	8006e70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699a      	ldr	r2, [r3, #24]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0210 	bic.w	r2, r2, #16
 8006e58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 f906 	bl	800806c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699a      	ldr	r2, [r3, #24]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0210 	orr.w	r2, r2, #16
 8006e6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f006 fd8f 	bl	800d998 <USB_ReadInterrupts>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e84:	d13a      	bne.n	8006efc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f007 f9a2 	bl	800e1d4 <USB_HC_ReadInterrupt>
 8006e90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e025      	b.n	8006ee4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d018      	beq.n	8006ede <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec2:	d106      	bne.n	8006ed2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8ab 	bl	8007026 <HCD_HC_IN_IRQHandler>
 8006ed0:	e005      	b.n	8006ede <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fcc6 	bl	800786a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d3d4      	bcc.n	8006e98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ef6:	615a      	str	r2, [r3, #20]
 8006ef8:	e000      	b.n	8006efc <HAL_HCD_IRQHandler+0x210>
      return;
 8006efa:	bf00      	nop
    }
  }
}
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_HCD_Start+0x16>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e013      	b.n	8006f40 <HAL_HCD_Start+0x3e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2101      	movs	r1, #1
 8006f26:	4618      	mov	r0, r3
 8006f28:	f006 fea2 	bl	800dc70 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4618      	mov	r0, r3
 8006f32:	f006 fbe8 	bl	800d706 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_HCD_Stop+0x16>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e00d      	b.n	8006f7a <HAL_HCD_Stop+0x32>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f007 fa9c 	bl	800e4a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f006 fe44 	bl	800dc1c <USB_ResetPort>
 8006f94:	4603      	mov	r3, r0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006faa:	78fb      	ldrb	r3, [r7, #3]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	212c      	movs	r1, #44	; 0x2c
 8006fb0:	fb01 f303 	mul.w	r3, r1, r3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3360      	adds	r3, #96	; 0x60
 8006fb8:	781b      	ldrb	r3, [r3, #0]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	212c      	movs	r1, #44	; 0x2c
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	4413      	add	r3, r2
 8006fde:	3350      	adds	r3, #80	; 0x50
 8006fe0:	681b      	ldr	r3, [r3, #0]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f006 fe88 	bl	800dd10 <USB_GetCurrentFrame>
 8007000:	4603      	mov	r3, r0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b082      	sub	sp, #8
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f006 fe63 	bl	800dce2 <USB_GetHostSpeed>
 800701c:	4603      	mov	r3, r0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b086      	sub	sp, #24
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	4413      	add	r3, r2
 8007048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b04      	cmp	r3, #4
 8007054:	d119      	bne.n	800708a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007062:	461a      	mov	r2, r3
 8007064:	2304      	movs	r3, #4
 8007066:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	440a      	add	r2, r1
 800707e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007082:	f043 0302 	orr.w	r3, r3, #2
 8007086:	60d3      	str	r3, [r2, #12]
 8007088:	e101      	b.n	800728e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	4413      	add	r3, r2
 8007092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a0:	d12b      	bne.n	80070fa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ae:	461a      	mov	r2, r3
 80070b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	212c      	movs	r1, #44	; 0x2c
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	3361      	adds	r3, #97	; 0x61
 80070c4:	2207      	movs	r2, #7
 80070c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e2:	f043 0302 	orr.w	r3, r3, #2
 80070e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	4611      	mov	r1, r2
 80070f2:	4618      	mov	r0, r3
 80070f4:	f007 f87f 	bl	800e1f6 <USB_HC_Halt>
 80070f8:	e0c9      	b.n	800728e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4413      	add	r3, r2
 8007102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b20      	cmp	r3, #32
 800710e:	d109      	bne.n	8007124 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	461a      	mov	r2, r3
 800711e:	2320      	movs	r3, #32
 8007120:	6093      	str	r3, [r2, #8]
 8007122:	e0b4      	b.n	800728e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4413      	add	r3, r2
 800712c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b08      	cmp	r3, #8
 8007138:	d133      	bne.n	80071a2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	440a      	add	r2, r1
 8007150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007154:	f043 0302 	orr.w	r3, r3, #2
 8007158:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	212c      	movs	r1, #44	; 0x2c
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	4413      	add	r3, r2
 8007166:	3361      	adds	r3, #97	; 0x61
 8007168:	2205      	movs	r2, #5
 800716a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	4413      	add	r3, r2
 8007174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007178:	461a      	mov	r2, r3
 800717a:	2310      	movs	r3, #16
 800717c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718a:	461a      	mov	r2, r3
 800718c:	2308      	movs	r3, #8
 800718e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f007 f82b 	bl	800e1f6 <USB_HC_Halt>
 80071a0:	e075      	b.n	800728e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071b8:	d134      	bne.n	8007224 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	212c      	movs	r1, #44	; 0x2c
 80071e0:	fb01 f303 	mul.w	r3, r1, r3
 80071e4:	4413      	add	r3, r2
 80071e6:	3361      	adds	r3, #97	; 0x61
 80071e8:	2208      	movs	r2, #8
 80071ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f8:	461a      	mov	r2, r3
 80071fa:	2310      	movs	r3, #16
 80071fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	4413      	add	r3, r2
 8007206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720a:	461a      	mov	r2, r3
 800720c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007210:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f006 ffea 	bl	800e1f6 <USB_HC_Halt>
 8007222:	e034      	b.n	800728e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	4413      	add	r3, r2
 800722c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007236:	2b80      	cmp	r3, #128	; 0x80
 8007238:	d129      	bne.n	800728e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4413      	add	r3, r2
 8007242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	0151      	lsls	r1, r2, #5
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	440a      	add	r2, r1
 8007250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007254:	f043 0302 	orr.w	r3, r3, #2
 8007258:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	212c      	movs	r1, #44	; 0x2c
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	3361      	adds	r3, #97	; 0x61
 8007268:	2206      	movs	r2, #6
 800726a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	4611      	mov	r1, r2
 8007276:	4618      	mov	r0, r3
 8007278:	f006 ffbd 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	4413      	add	r3, r2
 8007284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007288:	461a      	mov	r2, r3
 800728a:	2380      	movs	r3, #128	; 0x80
 800728c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	4413      	add	r3, r2
 8007296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a4:	d122      	bne.n	80072ec <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	0151      	lsls	r1, r2, #5
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	440a      	add	r2, r1
 80072bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	4611      	mov	r1, r2
 80072d0:	4618      	mov	r0, r3
 80072d2:	f006 ff90 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e2:	461a      	mov	r2, r3
 80072e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80072ea:	e2ba      	b.n	8007862 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b01      	cmp	r3, #1
 8007300:	f040 811b 	bne.w	800753a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d019      	beq.n	8007340 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	212c      	movs	r1, #44	; 0x2c
 8007312:	fb01 f303 	mul.w	r3, r1, r3
 8007316:	4413      	add	r3, r2
 8007318:	3348      	adds	r3, #72	; 0x48
 800731a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	0159      	lsls	r1, r3, #5
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	440b      	add	r3, r1
 8007324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	202c      	movs	r0, #44	; 0x2c
 8007336:	fb00 f303 	mul.w	r3, r0, r3
 800733a:	440b      	add	r3, r1
 800733c:	3350      	adds	r3, #80	; 0x50
 800733e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	212c      	movs	r1, #44	; 0x2c
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	3361      	adds	r3, #97	; 0x61
 800734e:	2201      	movs	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	212c      	movs	r1, #44	; 0x2c
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	335c      	adds	r3, #92	; 0x5c
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007370:	461a      	mov	r2, r3
 8007372:	2301      	movs	r3, #1
 8007374:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	212c      	movs	r1, #44	; 0x2c
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	4413      	add	r3, r2
 8007382:	333f      	adds	r3, #63	; 0x3f
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	212c      	movs	r1, #44	; 0x2c
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	4413      	add	r3, r2
 8007396:	333f      	adds	r3, #63	; 0x3f
 8007398:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800739a:	2b02      	cmp	r3, #2
 800739c:	d121      	bne.n	80073e2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073b8:	f043 0302 	orr.w	r3, r3, #2
 80073bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f006 ff14 	bl	800e1f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	461a      	mov	r2, r3
 80073dc:	2310      	movs	r3, #16
 80073de:	6093      	str	r3, [r2, #8]
 80073e0:	e066      	b.n	80074b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	212c      	movs	r1, #44	; 0x2c
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	4413      	add	r3, r2
 80073ee:	333f      	adds	r3, #63	; 0x3f
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d127      	bne.n	8007446 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	440a      	add	r2, r1
 800740c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007414:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	212c      	movs	r1, #44	; 0x2c
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	4413      	add	r3, r2
 8007422:	3360      	adds	r3, #96	; 0x60
 8007424:	2201      	movs	r2, #1
 8007426:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	b2d9      	uxtb	r1, r3
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	202c      	movs	r0, #44	; 0x2c
 8007432:	fb00 f303 	mul.w	r3, r0, r3
 8007436:	4413      	add	r3, r2
 8007438:	3360      	adds	r3, #96	; 0x60
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f009 f896 	bl	8010570 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007444:	e034      	b.n	80074b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	212c      	movs	r1, #44	; 0x2c
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	4413      	add	r3, r2
 8007452:	333f      	adds	r3, #63	; 0x3f
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d12a      	bne.n	80074b0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	212c      	movs	r1, #44	; 0x2c
 8007460:	fb01 f303 	mul.w	r3, r1, r3
 8007464:	4413      	add	r3, r2
 8007466:	3360      	adds	r3, #96	; 0x60
 8007468:	2201      	movs	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	212c      	movs	r1, #44	; 0x2c
 8007472:	fb01 f303 	mul.w	r3, r1, r3
 8007476:	4413      	add	r3, r2
 8007478:	3354      	adds	r3, #84	; 0x54
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	f083 0301 	eor.w	r3, r3, #1
 8007480:	b2d8      	uxtb	r0, r3
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	212c      	movs	r1, #44	; 0x2c
 8007488:	fb01 f303 	mul.w	r3, r1, r3
 800748c:	4413      	add	r3, r2
 800748e:	3354      	adds	r3, #84	; 0x54
 8007490:	4602      	mov	r2, r0
 8007492:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	b2d9      	uxtb	r1, r3
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	202c      	movs	r0, #44	; 0x2c
 800749e:	fb00 f303 	mul.w	r3, r0, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	3360      	adds	r3, #96	; 0x60
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f009 f860 	bl	8010570 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d12b      	bne.n	8007510 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	212c      	movs	r1, #44	; 0x2c
 80074be:	fb01 f303 	mul.w	r3, r1, r3
 80074c2:	4413      	add	r3, r2
 80074c4:	3348      	adds	r3, #72	; 0x48
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	202c      	movs	r0, #44	; 0x2c
 80074ce:	fb00 f202 	mul.w	r2, r0, r2
 80074d2:	440a      	add	r2, r1
 80074d4:	3240      	adds	r2, #64	; 0x40
 80074d6:	8812      	ldrh	r2, [r2, #0]
 80074d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 81be 	beq.w	8007862 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	212c      	movs	r1, #44	; 0x2c
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	3354      	adds	r3, #84	; 0x54
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f083 0301 	eor.w	r3, r3, #1
 80074fa:	b2d8      	uxtb	r0, r3
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	212c      	movs	r1, #44	; 0x2c
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	4413      	add	r3, r2
 8007508:	3354      	adds	r3, #84	; 0x54
 800750a:	4602      	mov	r2, r0
 800750c:	701a      	strb	r2, [r3, #0]
}
 800750e:	e1a8      	b.n	8007862 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	212c      	movs	r1, #44	; 0x2c
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	3354      	adds	r3, #84	; 0x54
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f083 0301 	eor.w	r3, r3, #1
 8007524:	b2d8      	uxtb	r0, r3
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	212c      	movs	r1, #44	; 0x2c
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	4413      	add	r3, r2
 8007532:	3354      	adds	r3, #84	; 0x54
 8007534:	4602      	mov	r2, r0
 8007536:	701a      	strb	r2, [r3, #0]
}
 8007538:	e193      	b.n	8007862 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	4413      	add	r3, r2
 8007542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	f040 8106 	bne.w	800775e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	4413      	add	r3, r2
 800755a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	440a      	add	r2, r1
 8007568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800756c:	f023 0302 	bic.w	r3, r3, #2
 8007570:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	212c      	movs	r1, #44	; 0x2c
 8007578:	fb01 f303 	mul.w	r3, r1, r3
 800757c:	4413      	add	r3, r2
 800757e:	3361      	adds	r3, #97	; 0x61
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d109      	bne.n	800759a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	212c      	movs	r1, #44	; 0x2c
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	4413      	add	r3, r2
 8007592:	3360      	adds	r3, #96	; 0x60
 8007594:	2201      	movs	r2, #1
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	e0c9      	b.n	800772e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	212c      	movs	r1, #44	; 0x2c
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	3361      	adds	r3, #97	; 0x61
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	d109      	bne.n	80075c2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	212c      	movs	r1, #44	; 0x2c
 80075b4:	fb01 f303 	mul.w	r3, r1, r3
 80075b8:	4413      	add	r3, r2
 80075ba:	3360      	adds	r3, #96	; 0x60
 80075bc:	2205      	movs	r2, #5
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	e0b5      	b.n	800772e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	212c      	movs	r1, #44	; 0x2c
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	3361      	adds	r3, #97	; 0x61
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b06      	cmp	r3, #6
 80075d4:	d009      	beq.n	80075ea <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	212c      	movs	r1, #44	; 0x2c
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	4413      	add	r3, r2
 80075e2:	3361      	adds	r3, #97	; 0x61
 80075e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d150      	bne.n	800768c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	212c      	movs	r1, #44	; 0x2c
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	4413      	add	r3, r2
 80075f6:	335c      	adds	r3, #92	; 0x5c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	202c      	movs	r0, #44	; 0x2c
 8007602:	fb00 f303 	mul.w	r3, r0, r3
 8007606:	440b      	add	r3, r1
 8007608:	335c      	adds	r3, #92	; 0x5c
 800760a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	212c      	movs	r1, #44	; 0x2c
 8007612:	fb01 f303 	mul.w	r3, r1, r3
 8007616:	4413      	add	r3, r2
 8007618:	335c      	adds	r3, #92	; 0x5c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d912      	bls.n	8007646 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	212c      	movs	r1, #44	; 0x2c
 8007626:	fb01 f303 	mul.w	r3, r1, r3
 800762a:	4413      	add	r3, r2
 800762c:	335c      	adds	r3, #92	; 0x5c
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	212c      	movs	r1, #44	; 0x2c
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	4413      	add	r3, r2
 800763e:	3360      	adds	r3, #96	; 0x60
 8007640:	2204      	movs	r2, #4
 8007642:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007644:	e073      	b.n	800772e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	212c      	movs	r1, #44	; 0x2c
 800764c:	fb01 f303 	mul.w	r3, r1, r3
 8007650:	4413      	add	r3, r2
 8007652:	3360      	adds	r3, #96	; 0x60
 8007654:	2202      	movs	r2, #2
 8007656:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	4413      	add	r3, r2
 8007660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800766e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007676:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	4413      	add	r3, r2
 8007680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007684:	461a      	mov	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800768a:	e050      	b.n	800772e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	212c      	movs	r1, #44	; 0x2c
 8007692:	fb01 f303 	mul.w	r3, r1, r3
 8007696:	4413      	add	r3, r2
 8007698:	3361      	adds	r3, #97	; 0x61
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d122      	bne.n	80076e6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	212c      	movs	r1, #44	; 0x2c
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	3360      	adds	r3, #96	; 0x60
 80076ae:	2202      	movs	r2, #2
 80076b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076de:	461a      	mov	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	e023      	b.n	800772e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	212c      	movs	r1, #44	; 0x2c
 80076ec:	fb01 f303 	mul.w	r3, r1, r3
 80076f0:	4413      	add	r3, r2
 80076f2:	3361      	adds	r3, #97	; 0x61
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b07      	cmp	r3, #7
 80076f8:	d119      	bne.n	800772e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	212c      	movs	r1, #44	; 0x2c
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	4413      	add	r3, r2
 8007706:	335c      	adds	r3, #92	; 0x5c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	202c      	movs	r0, #44	; 0x2c
 8007712:	fb00 f303 	mul.w	r3, r0, r3
 8007716:	440b      	add	r3, r1
 8007718:	335c      	adds	r3, #92	; 0x5c
 800771a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	212c      	movs	r1, #44	; 0x2c
 8007722:	fb01 f303 	mul.w	r3, r1, r3
 8007726:	4413      	add	r3, r2
 8007728:	3360      	adds	r3, #96	; 0x60
 800772a:	2204      	movs	r2, #4
 800772c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773a:	461a      	mov	r2, r3
 800773c:	2302      	movs	r3, #2
 800773e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	b2d9      	uxtb	r1, r3
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	202c      	movs	r0, #44	; 0x2c
 800774a:	fb00 f303 	mul.w	r3, r0, r3
 800774e:	4413      	add	r3, r2
 8007750:	3360      	adds	r3, #96	; 0x60
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f008 ff0a 	bl	8010570 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800775c:	e081      	b.n	8007862 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	2b10      	cmp	r3, #16
 8007772:	d176      	bne.n	8007862 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	212c      	movs	r1, #44	; 0x2c
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	4413      	add	r3, r2
 8007780:	333f      	adds	r3, #63	; 0x3f
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b03      	cmp	r3, #3
 8007786:	d121      	bne.n	80077cc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	212c      	movs	r1, #44	; 0x2c
 800778e:	fb01 f303 	mul.w	r3, r1, r3
 8007792:	4413      	add	r3, r2
 8007794:	335c      	adds	r3, #92	; 0x5c
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b4:	f043 0302 	orr.w	r3, r3, #2
 80077b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f006 fd16 	bl	800e1f6 <USB_HC_Halt>
 80077ca:	e041      	b.n	8007850 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	212c      	movs	r1, #44	; 0x2c
 80077d2:	fb01 f303 	mul.w	r3, r1, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	333f      	adds	r3, #63	; 0x3f
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d009      	beq.n	80077f4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	212c      	movs	r1, #44	; 0x2c
 80077e6:	fb01 f303 	mul.w	r3, r1, r3
 80077ea:	4413      	add	r3, r2
 80077ec:	333f      	adds	r3, #63	; 0x3f
 80077ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d12d      	bne.n	8007850 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	212c      	movs	r1, #44	; 0x2c
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	4413      	add	r3, r2
 8007800:	335c      	adds	r3, #92	; 0x5c
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d120      	bne.n	8007850 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	212c      	movs	r1, #44	; 0x2c
 8007814:	fb01 f303 	mul.w	r3, r1, r3
 8007818:	4413      	add	r3, r2
 800781a:	3361      	adds	r3, #97	; 0x61
 800781c:	2203      	movs	r2, #3
 800781e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	440a      	add	r2, r1
 8007836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800783a:	f043 0302 	orr.w	r3, r3, #2
 800783e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f006 fcd3 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	4413      	add	r3, r2
 8007858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785c:	461a      	mov	r2, r3
 800785e:	2310      	movs	r3, #16
 8007860:	6093      	str	r3, [r2, #8]
}
 8007862:	bf00      	nop
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b088      	sub	sp, #32
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	4413      	add	r3, r2
 800788c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b04      	cmp	r3, #4
 8007898:	d119      	bne.n	80078ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a6:	461a      	mov	r2, r3
 80078a8:	2304      	movs	r3, #4
 80078aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078c6:	f043 0302 	orr.w	r3, r3, #2
 80078ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80078cc:	e3ca      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d13e      	bne.n	8007962 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f0:	461a      	mov	r2, r3
 80078f2:	2320      	movs	r3, #32
 80078f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	212c      	movs	r1, #44	; 0x2c
 80078fc:	fb01 f303 	mul.w	r3, r1, r3
 8007900:	4413      	add	r3, r2
 8007902:	333d      	adds	r3, #61	; 0x3d
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b01      	cmp	r3, #1
 8007908:	f040 83ac 	bne.w	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	212c      	movs	r1, #44	; 0x2c
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	333d      	adds	r3, #61	; 0x3d
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	212c      	movs	r1, #44	; 0x2c
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	4413      	add	r3, r2
 800792a:	3360      	adds	r3, #96	; 0x60
 800792c:	2202      	movs	r2, #2
 800792e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	4413      	add	r3, r2
 8007938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	440a      	add	r2, r1
 8007946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800794a:	f043 0302 	orr.w	r3, r3, #2
 800794e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	4611      	mov	r1, r2
 800795a:	4618      	mov	r0, r3
 800795c:	f006 fc4b 	bl	800e1f6 <USB_HC_Halt>
}
 8007960:	e380      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	4413      	add	r3, r2
 800796a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d122      	bne.n	80079c0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	4413      	add	r3, r2
 8007982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	0151      	lsls	r1, r2, #5
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	440a      	add	r2, r1
 8007990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	b2d2      	uxtb	r2, r2
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f006 fc26 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b6:	461a      	mov	r2, r3
 80079b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079bc:	6093      	str	r3, [r2, #8]
}
 80079be:	e351      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d150      	bne.n	8007a78 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	212c      	movs	r1, #44	; 0x2c
 80079dc:	fb01 f303 	mul.w	r3, r1, r3
 80079e0:	4413      	add	r3, r2
 80079e2:	335c      	adds	r3, #92	; 0x5c
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d111      	bne.n	8007a22 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	212c      	movs	r1, #44	; 0x2c
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	4413      	add	r3, r2
 8007a0a:	333d      	adds	r3, #61	; 0x3d
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2340      	movs	r3, #64	; 0x40
 8007a20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a3c:	f043 0302 	orr.w	r3, r3, #2
 8007a40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	b2d2      	uxtb	r2, r2
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f006 fbd2 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5e:	461a      	mov	r2, r3
 8007a60:	2301      	movs	r3, #1
 8007a62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	212c      	movs	r1, #44	; 0x2c
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	3361      	adds	r3, #97	; 0x61
 8007a72:	2201      	movs	r2, #1
 8007a74:	701a      	strb	r2, [r3, #0]
}
 8007a76:	e2f5      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b40      	cmp	r3, #64	; 0x40
 8007a8c:	d13c      	bne.n	8007b08 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	212c      	movs	r1, #44	; 0x2c
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	4413      	add	r3, r2
 8007a9a:	3361      	adds	r3, #97	; 0x61
 8007a9c:	2204      	movs	r2, #4
 8007a9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	212c      	movs	r1, #44	; 0x2c
 8007aa6:	fb01 f303 	mul.w	r3, r1, r3
 8007aaa:	4413      	add	r3, r2
 8007aac:	333d      	adds	r3, #61	; 0x3d
 8007aae:	2201      	movs	r2, #1
 8007ab0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	212c      	movs	r1, #44	; 0x2c
 8007ab8:	fb01 f303 	mul.w	r3, r1, r3
 8007abc:	4413      	add	r3, r2
 8007abe:	335c      	adds	r3, #92	; 0x5c
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ade:	f043 0302 	orr.w	r3, r3, #2
 8007ae2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	4611      	mov	r1, r2
 8007aee:	4618      	mov	r0, r3
 8007af0:	f006 fb81 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b00:	461a      	mov	r2, r3
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	6093      	str	r3, [r2, #8]
}
 8007b06:	e2ad      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d12a      	bne.n	8007b74 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	2308      	movs	r3, #8
 8007b2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b4a:	f043 0302 	orr.w	r3, r3, #2
 8007b4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f006 fb4b 	bl	800e1f6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	212c      	movs	r1, #44	; 0x2c
 8007b66:	fb01 f303 	mul.w	r3, r1, r3
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3361      	adds	r3, #97	; 0x61
 8007b6e:	2205      	movs	r2, #5
 8007b70:	701a      	strb	r2, [r3, #0]
}
 8007b72:	e277      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f003 0310 	and.w	r3, r3, #16
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d150      	bne.n	8007c2c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	212c      	movs	r1, #44	; 0x2c
 8007b90:	fb01 f303 	mul.w	r3, r1, r3
 8007b94:	4413      	add	r3, r2
 8007b96:	335c      	adds	r3, #92	; 0x5c
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	212c      	movs	r1, #44	; 0x2c
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	3361      	adds	r3, #97	; 0x61
 8007baa:	2203      	movs	r2, #3
 8007bac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	212c      	movs	r1, #44	; 0x2c
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	4413      	add	r3, r2
 8007bba:	333d      	adds	r3, #61	; 0x3d
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d112      	bne.n	8007be8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	212c      	movs	r1, #44	; 0x2c
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	333c      	adds	r3, #60	; 0x3c
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d108      	bne.n	8007be8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	212c      	movs	r1, #44	; 0x2c
 8007bdc:	fb01 f303 	mul.w	r3, r1, r3
 8007be0:	4413      	add	r3, r2
 8007be2:	333d      	adds	r3, #61	; 0x3d
 8007be4:	2201      	movs	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c02:	f043 0302 	orr.w	r3, r3, #2
 8007c06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f006 faef 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c24:	461a      	mov	r2, r3
 8007c26:	2310      	movs	r3, #16
 8007c28:	6093      	str	r3, [r2, #8]
}
 8007c2a:	e21b      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3e:	2b80      	cmp	r3, #128	; 0x80
 8007c40:	d174      	bne.n	8007d2c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d121      	bne.n	8007c8e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	212c      	movs	r1, #44	; 0x2c
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	3361      	adds	r3, #97	; 0x61
 8007c58:	2206      	movs	r2, #6
 8007c5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	0151      	lsls	r1, r2, #5
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	440a      	add	r2, r1
 8007c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c76:	f043 0302 	orr.w	r3, r3, #2
 8007c7a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	4611      	mov	r1, r2
 8007c86:	4618      	mov	r0, r3
 8007c88:	f006 fab5 	bl	800e1f6 <USB_HC_Halt>
 8007c8c:	e044      	b.n	8007d18 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	212c      	movs	r1, #44	; 0x2c
 8007c94:	fb01 f303 	mul.w	r3, r1, r3
 8007c98:	4413      	add	r3, r2
 8007c9a:	335c      	adds	r3, #92	; 0x5c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	202c      	movs	r0, #44	; 0x2c
 8007ca6:	fb00 f303 	mul.w	r3, r0, r3
 8007caa:	440b      	add	r3, r1
 8007cac:	335c      	adds	r3, #92	; 0x5c
 8007cae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	212c      	movs	r1, #44	; 0x2c
 8007cb6:	fb01 f303 	mul.w	r3, r1, r3
 8007cba:	4413      	add	r3, r2
 8007cbc:	335c      	adds	r3, #92	; 0x5c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d920      	bls.n	8007d06 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	212c      	movs	r1, #44	; 0x2c
 8007cca:	fb01 f303 	mul.w	r3, r1, r3
 8007cce:	4413      	add	r3, r2
 8007cd0:	335c      	adds	r3, #92	; 0x5c
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	212c      	movs	r1, #44	; 0x2c
 8007cdc:	fb01 f303 	mul.w	r3, r1, r3
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3360      	adds	r3, #96	; 0x60
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	b2d9      	uxtb	r1, r3
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	202c      	movs	r0, #44	; 0x2c
 8007cf2:	fb00 f303 	mul.w	r3, r0, r3
 8007cf6:	4413      	add	r3, r2
 8007cf8:	3360      	adds	r3, #96	; 0x60
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f008 fc36 	bl	8010570 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007d04:	e008      	b.n	8007d18 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	212c      	movs	r1, #44	; 0x2c
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	4413      	add	r3, r2
 8007d12:	3360      	adds	r3, #96	; 0x60
 8007d14:	2202      	movs	r2, #2
 8007d16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d24:	461a      	mov	r2, r3
 8007d26:	2380      	movs	r3, #128	; 0x80
 8007d28:	6093      	str	r3, [r2, #8]
}
 8007d2a:	e19b      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d42:	d134      	bne.n	8007dae <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69ba      	ldr	r2, [r7, #24]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d5e:	f043 0302 	orr.w	r3, r3, #2
 8007d62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f006 fa41 	bl	800e1f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d80:	461a      	mov	r2, r3
 8007d82:	2310      	movs	r3, #16
 8007d84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d92:	461a      	mov	r2, r3
 8007d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	212c      	movs	r1, #44	; 0x2c
 8007da0:	fb01 f303 	mul.w	r3, r1, r3
 8007da4:	4413      	add	r3, r2
 8007da6:	3361      	adds	r3, #97	; 0x61
 8007da8:	2208      	movs	r2, #8
 8007daa:	701a      	strb	r2, [r3, #0]
}
 8007dac:	e15a      	b.n	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	f040 814f 	bne.w	8008064 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de0:	f023 0302 	bic.w	r3, r3, #2
 8007de4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	212c      	movs	r1, #44	; 0x2c
 8007dec:	fb01 f303 	mul.w	r3, r1, r3
 8007df0:	4413      	add	r3, r2
 8007df2:	3361      	adds	r3, #97	; 0x61
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d17d      	bne.n	8007ef6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	212c      	movs	r1, #44	; 0x2c
 8007e00:	fb01 f303 	mul.w	r3, r1, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	3360      	adds	r3, #96	; 0x60
 8007e08:	2201      	movs	r2, #1
 8007e0a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	212c      	movs	r1, #44	; 0x2c
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	4413      	add	r3, r2
 8007e18:	333f      	adds	r3, #63	; 0x3f
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d00a      	beq.n	8007e36 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	212c      	movs	r1, #44	; 0x2c
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	333f      	adds	r3, #63	; 0x3f
 8007e2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	f040 8100 	bne.w	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d113      	bne.n	8007e66 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	212c      	movs	r1, #44	; 0x2c
 8007e44:	fb01 f303 	mul.w	r3, r1, r3
 8007e48:	4413      	add	r3, r2
 8007e4a:	3355      	adds	r3, #85	; 0x55
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f083 0301 	eor.w	r3, r3, #1
 8007e52:	b2d8      	uxtb	r0, r3
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	212c      	movs	r1, #44	; 0x2c
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	4413      	add	r3, r2
 8007e60:	3355      	adds	r3, #85	; 0x55
 8007e62:	4602      	mov	r2, r0
 8007e64:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	f040 80e3 	bne.w	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	212c      	movs	r1, #44	; 0x2c
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	334c      	adds	r3, #76	; 0x4c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80d8 	beq.w	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	212c      	movs	r1, #44	; 0x2c
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	4413      	add	r3, r2
 8007e92:	334c      	adds	r3, #76	; 0x4c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	202c      	movs	r0, #44	; 0x2c
 8007e9c:	fb00 f202 	mul.w	r2, r0, r2
 8007ea0:	440a      	add	r2, r1
 8007ea2:	3240      	adds	r2, #64	; 0x40
 8007ea4:	8812      	ldrh	r2, [r2, #0]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	202c      	movs	r0, #44	; 0x2c
 8007eb0:	fb00 f202 	mul.w	r2, r0, r2
 8007eb4:	440a      	add	r2, r1
 8007eb6:	3240      	adds	r2, #64	; 0x40
 8007eb8:	8812      	ldrh	r2, [r2, #0]
 8007eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80b5 	beq.w	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	212c      	movs	r1, #44	; 0x2c
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3355      	adds	r3, #85	; 0x55
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	f083 0301 	eor.w	r3, r3, #1
 8007ee0:	b2d8      	uxtb	r0, r3
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	212c      	movs	r1, #44	; 0x2c
 8007ee8:	fb01 f303 	mul.w	r3, r1, r3
 8007eec:	4413      	add	r3, r2
 8007eee:	3355      	adds	r3, #85	; 0x55
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e09f      	b.n	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	212c      	movs	r1, #44	; 0x2c
 8007efc:	fb01 f303 	mul.w	r3, r1, r3
 8007f00:	4413      	add	r3, r2
 8007f02:	3361      	adds	r3, #97	; 0x61
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d109      	bne.n	8007f1e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	212c      	movs	r1, #44	; 0x2c
 8007f10:	fb01 f303 	mul.w	r3, r1, r3
 8007f14:	4413      	add	r3, r2
 8007f16:	3360      	adds	r3, #96	; 0x60
 8007f18:	2202      	movs	r2, #2
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e08b      	b.n	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	212c      	movs	r1, #44	; 0x2c
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	4413      	add	r3, r2
 8007f2a:	3361      	adds	r3, #97	; 0x61
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b04      	cmp	r3, #4
 8007f30:	d109      	bne.n	8007f46 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	212c      	movs	r1, #44	; 0x2c
 8007f38:	fb01 f303 	mul.w	r3, r1, r3
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3360      	adds	r3, #96	; 0x60
 8007f40:	2202      	movs	r2, #2
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	e077      	b.n	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	212c      	movs	r1, #44	; 0x2c
 8007f4c:	fb01 f303 	mul.w	r3, r1, r3
 8007f50:	4413      	add	r3, r2
 8007f52:	3361      	adds	r3, #97	; 0x61
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d109      	bne.n	8007f6e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	212c      	movs	r1, #44	; 0x2c
 8007f60:	fb01 f303 	mul.w	r3, r1, r3
 8007f64:	4413      	add	r3, r2
 8007f66:	3360      	adds	r3, #96	; 0x60
 8007f68:	2205      	movs	r2, #5
 8007f6a:	701a      	strb	r2, [r3, #0]
 8007f6c:	e063      	b.n	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	212c      	movs	r1, #44	; 0x2c
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	4413      	add	r3, r2
 8007f7a:	3361      	adds	r3, #97	; 0x61
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b06      	cmp	r3, #6
 8007f80:	d009      	beq.n	8007f96 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	212c      	movs	r1, #44	; 0x2c
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3361      	adds	r3, #97	; 0x61
 8007f90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f92:	2b08      	cmp	r3, #8
 8007f94:	d14f      	bne.n	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	212c      	movs	r1, #44	; 0x2c
 8007f9c:	fb01 f303 	mul.w	r3, r1, r3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	335c      	adds	r3, #92	; 0x5c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	202c      	movs	r0, #44	; 0x2c
 8007fae:	fb00 f303 	mul.w	r3, r0, r3
 8007fb2:	440b      	add	r3, r1
 8007fb4:	335c      	adds	r3, #92	; 0x5c
 8007fb6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	212c      	movs	r1, #44	; 0x2c
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	335c      	adds	r3, #92	; 0x5c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d912      	bls.n	8007ff2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	212c      	movs	r1, #44	; 0x2c
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	335c      	adds	r3, #92	; 0x5c
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	212c      	movs	r1, #44	; 0x2c
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	4413      	add	r3, r2
 8007fea:	3360      	adds	r3, #96	; 0x60
 8007fec:	2204      	movs	r2, #4
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e021      	b.n	8008036 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	212c      	movs	r1, #44	; 0x2c
 8007ff8:	fb01 f303 	mul.w	r3, r1, r3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3360      	adds	r3, #96	; 0x60
 8008000:	2202      	movs	r2, #2
 8008002:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	4413      	add	r3, r2
 800800c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800801a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008022:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	4413      	add	r3, r2
 800802c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008030:	461a      	mov	r2, r3
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008042:	461a      	mov	r2, r3
 8008044:	2302      	movs	r3, #2
 8008046:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	b2d9      	uxtb	r1, r3
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	202c      	movs	r0, #44	; 0x2c
 8008052:	fb00 f303 	mul.w	r3, r0, r3
 8008056:	4413      	add	r3, r2
 8008058:	3360      	adds	r3, #96	; 0x60
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f008 fa86 	bl	8010570 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008064:	bf00      	nop
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	0c5b      	lsrs	r3, r3, #17
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	091b      	lsrs	r3, r3, #4
 800809c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d004      	beq.n	80080b2 <HCD_RXQLVL_IRQHandler+0x46>
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	f000 80a9 	beq.w	8008202 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80080b0:	e0aa      	b.n	8008208 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 80a6 	beq.w	8008206 <HCD_RXQLVL_IRQHandler+0x19a>
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	212c      	movs	r1, #44	; 0x2c
 80080c0:	fb01 f303 	mul.w	r3, r1, r3
 80080c4:	4413      	add	r3, r2
 80080c6:	3344      	adds	r3, #68	; 0x44
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 809b 	beq.w	8008206 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	212c      	movs	r1, #44	; 0x2c
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	4413      	add	r3, r2
 80080dc:	3350      	adds	r3, #80	; 0x50
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	441a      	add	r2, r3
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	202c      	movs	r0, #44	; 0x2c
 80080ea:	fb00 f303 	mul.w	r3, r0, r3
 80080ee:	440b      	add	r3, r1
 80080f0:	334c      	adds	r3, #76	; 0x4c
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d87a      	bhi.n	80081ee <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	212c      	movs	r1, #44	; 0x2c
 8008102:	fb01 f303 	mul.w	r3, r1, r3
 8008106:	4413      	add	r3, r2
 8008108:	3344      	adds	r3, #68	; 0x44
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	b292      	uxth	r2, r2
 8008110:	4619      	mov	r1, r3
 8008112:	f005 fbe9 	bl	800d8e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	212c      	movs	r1, #44	; 0x2c
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	4413      	add	r3, r2
 8008122:	3344      	adds	r3, #68	; 0x44
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	441a      	add	r2, r3
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	202c      	movs	r0, #44	; 0x2c
 8008130:	fb00 f303 	mul.w	r3, r0, r3
 8008134:	440b      	add	r3, r1
 8008136:	3344      	adds	r3, #68	; 0x44
 8008138:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	212c      	movs	r1, #44	; 0x2c
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	4413      	add	r3, r2
 8008146:	3350      	adds	r3, #80	; 0x50
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	441a      	add	r2, r3
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	202c      	movs	r0, #44	; 0x2c
 8008154:	fb00 f303 	mul.w	r3, r0, r3
 8008158:	440b      	add	r3, r1
 800815a:	3350      	adds	r3, #80	; 0x50
 800815c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	4413      	add	r3, r2
 8008166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	0cdb      	lsrs	r3, r3, #19
 800816e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008172:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	212c      	movs	r1, #44	; 0x2c
 800817a:	fb01 f303 	mul.w	r3, r1, r3
 800817e:	4413      	add	r3, r2
 8008180:	3340      	adds	r3, #64	; 0x40
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	4293      	cmp	r3, r2
 800818a:	d13c      	bne.n	8008206 <HCD_RXQLVL_IRQHandler+0x19a>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d039      	beq.n	8008206 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	6a3b      	ldr	r3, [r7, #32]
 8008198:	4413      	add	r3, r2
 800819a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081be:	461a      	mov	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	212c      	movs	r1, #44	; 0x2c
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	3354      	adds	r3, #84	; 0x54
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	f083 0301 	eor.w	r3, r3, #1
 80081d8:	b2d8      	uxtb	r0, r3
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	212c      	movs	r1, #44	; 0x2c
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	4413      	add	r3, r2
 80081e6:	3354      	adds	r3, #84	; 0x54
 80081e8:	4602      	mov	r2, r0
 80081ea:	701a      	strb	r2, [r3, #0]
      break;
 80081ec:	e00b      	b.n	8008206 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	212c      	movs	r1, #44	; 0x2c
 80081f4:	fb01 f303 	mul.w	r3, r1, r3
 80081f8:	4413      	add	r3, r2
 80081fa:	3360      	adds	r3, #96	; 0x60
 80081fc:	2204      	movs	r2, #4
 80081fe:	701a      	strb	r2, [r3, #0]
      break;
 8008200:	e001      	b.n	8008206 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8008202:	bf00      	nop
 8008204:	e000      	b.n	8008208 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8008206:	bf00      	nop
  }
}
 8008208:	bf00      	nop
 800820a:	3728      	adds	r7, #40	; 0x28
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800823c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b02      	cmp	r3, #2
 8008246:	d10b      	bne.n	8008260 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b01      	cmp	r3, #1
 8008250:	d102      	bne.n	8008258 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f008 f970 	bl	8010538 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f043 0302 	orr.w	r3, r3, #2
 800825e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b08      	cmp	r3, #8
 8008268:	d132      	bne.n	80082d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f043 0308 	orr.w	r3, r3, #8
 8008270:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b04      	cmp	r3, #4
 800827a:	d126      	bne.n	80082ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	2b02      	cmp	r3, #2
 8008282:	d113      	bne.n	80082ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800828a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800828e:	d106      	bne.n	800829e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2102      	movs	r1, #2
 8008296:	4618      	mov	r0, r3
 8008298:	f005 fc86 	bl	800dba8 <USB_InitFSLSPClkSel>
 800829c:	e011      	b.n	80082c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2101      	movs	r1, #1
 80082a4:	4618      	mov	r0, r3
 80082a6:	f005 fc7f 	bl	800dba8 <USB_InitFSLSPClkSel>
 80082aa:	e00a      	b.n	80082c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d106      	bne.n	80082c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082ba:	461a      	mov	r2, r3
 80082bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80082c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f008 f962 	bl	801058c <HAL_HCD_PortEnabled_Callback>
 80082c8:	e002      	b.n	80082d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f008 f96c 	bl	80105a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d103      	bne.n	80082e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f043 0320 	orr.w	r3, r3, #32
 80082e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082e8:	461a      	mov	r2, r3
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	6013      	str	r3, [r2, #0]
}
 80082ee:	bf00      	nop
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e1be      	b.n	8008688 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a9f      	ldr	r2, [pc, #636]	; (800858c <HAL_I2C_Init+0x294>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00e      	beq.n	8008332 <HAL_I2C_Init+0x3a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a9d      	ldr	r2, [pc, #628]	; (8008590 <HAL_I2C_Init+0x298>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d009      	beq.n	8008332 <HAL_I2C_Init+0x3a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a9c      	ldr	r2, [pc, #624]	; (8008594 <HAL_I2C_Init+0x29c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d004      	beq.n	8008332 <HAL_I2C_Init+0x3a>
 8008328:	f240 11bf 	movw	r1, #447	; 0x1bf
 800832c:	489a      	ldr	r0, [pc, #616]	; (8008598 <HAL_I2C_Init+0x2a0>)
 800832e:	f7fb fae8 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d004      	beq.n	8008344 <HAL_I2C_Init+0x4c>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	4a97      	ldr	r2, [pc, #604]	; (800859c <HAL_I2C_Init+0x2a4>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d904      	bls.n	800834e <HAL_I2C_Init+0x56>
 8008344:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8008348:	4893      	ldr	r0, [pc, #588]	; (8008598 <HAL_I2C_Init+0x2a0>)
 800834a:	f7fb fada 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <HAL_I2C_Init+0x72>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800835e:	d004      	beq.n	800836a <HAL_I2C_Init+0x72>
 8008360:	f240 11c1 	movw	r1, #449	; 0x1c1
 8008364:	488c      	ldr	r0, [pc, #560]	; (8008598 <HAL_I2C_Init+0x2a0>)
 8008366:	f7fb facc 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <HAL_I2C_Init+0x8c>
 800837a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800837e:	4886      	ldr	r0, [pc, #536]	; (8008598 <HAL_I2C_Init+0x2a0>)
 8008380:	f7fb fabf 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800838c:	d009      	beq.n	80083a2 <HAL_I2C_Init+0xaa>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008396:	d004      	beq.n	80083a2 <HAL_I2C_Init+0xaa>
 8008398:	f240 11c3 	movw	r1, #451	; 0x1c3
 800839c:	487e      	ldr	r0, [pc, #504]	; (8008598 <HAL_I2C_Init+0x2a0>)
 800839e:	f7fb fab0 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d008      	beq.n	80083bc <HAL_I2C_Init+0xc4>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d004      	beq.n	80083bc <HAL_I2C_Init+0xc4>
 80083b2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80083b6:	4878      	ldr	r0, [pc, #480]	; (8008598 <HAL_I2C_Init+0x2a0>)
 80083b8:	f7fb faa3 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <HAL_I2C_Init+0xda>
 80083c8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80083cc:	4872      	ldr	r0, [pc, #456]	; (8008598 <HAL_I2C_Init+0x2a0>)
 80083ce:	f7fb fa98 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d008      	beq.n	80083ec <HAL_I2C_Init+0xf4>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	2b40      	cmp	r3, #64	; 0x40
 80083e0:	d004      	beq.n	80083ec <HAL_I2C_Init+0xf4>
 80083e2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80083e6:	486c      	ldr	r0, [pc, #432]	; (8008598 <HAL_I2C_Init+0x2a0>)
 80083e8:	f7fb fa8b 	bl	8003902 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d008      	beq.n	8008406 <HAL_I2C_Init+0x10e>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	2b80      	cmp	r3, #128	; 0x80
 80083fa:	d004      	beq.n	8008406 <HAL_I2C_Init+0x10e>
 80083fc:	f240 11c7 	movw	r1, #455	; 0x1c7
 8008400:	4865      	ldr	r0, [pc, #404]	; (8008598 <HAL_I2C_Init+0x2a0>)
 8008402:	f7fb fa7e 	bl	8003902 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7f9 ffd4 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2224      	movs	r2, #36	; 0x24
 8008424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008446:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008456:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008458:	f001 fdac 	bl	8009fb4 <HAL_RCC_GetPCLK1Freq>
 800845c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	4a4f      	ldr	r2, [pc, #316]	; (80085a0 <HAL_I2C_Init+0x2a8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d807      	bhi.n	8008478 <HAL_I2C_Init+0x180>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4a4e      	ldr	r2, [pc, #312]	; (80085a4 <HAL_I2C_Init+0x2ac>)
 800846c:	4293      	cmp	r3, r2
 800846e:	bf94      	ite	ls
 8008470:	2301      	movls	r3, #1
 8008472:	2300      	movhi	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	e006      	b.n	8008486 <HAL_I2C_Init+0x18e>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4a4b      	ldr	r2, [pc, #300]	; (80085a8 <HAL_I2C_Init+0x2b0>)
 800847c:	4293      	cmp	r3, r2
 800847e:	bf94      	ite	ls
 8008480:	2301      	movls	r3, #1
 8008482:	2300      	movhi	r3, #0
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e0fc      	b.n	8008688 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4a46      	ldr	r2, [pc, #280]	; (80085ac <HAL_I2C_Init+0x2b4>)
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	0c9b      	lsrs	r3, r3, #18
 8008498:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4a38      	ldr	r2, [pc, #224]	; (80085a0 <HAL_I2C_Init+0x2a8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d802      	bhi.n	80084c8 <HAL_I2C_Init+0x1d0>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	3301      	adds	r3, #1
 80084c6:	e009      	b.n	80084dc <HAL_I2C_Init+0x1e4>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
 80084d2:	4a37      	ldr	r2, [pc, #220]	; (80085b0 <HAL_I2C_Init+0x2b8>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	099b      	lsrs	r3, r3, #6
 80084da:	3301      	adds	r3, #1
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	430b      	orrs	r3, r1
 80084e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80084ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	492a      	ldr	r1, [pc, #168]	; (80085a0 <HAL_I2C_Init+0x2a8>)
 80084f8:	428b      	cmp	r3, r1
 80084fa:	d819      	bhi.n	8008530 <HAL_I2C_Init+0x238>
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	1e59      	subs	r1, r3, #1
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	fbb1 f3f3 	udiv	r3, r1, r3
 800850a:	1c59      	adds	r1, r3, #1
 800850c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008510:	400b      	ands	r3, r1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <HAL_I2C_Init+0x234>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1e59      	subs	r1, r3, #1
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	fbb1 f3f3 	udiv	r3, r1, r3
 8008524:	3301      	adds	r3, #1
 8008526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800852a:	e066      	b.n	80085fa <HAL_I2C_Init+0x302>
 800852c:	2304      	movs	r3, #4
 800852e:	e064      	b.n	80085fa <HAL_I2C_Init+0x302>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d111      	bne.n	800855c <HAL_I2C_Init+0x264>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	1e58      	subs	r0, r3, #1
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6859      	ldr	r1, [r3, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	440b      	add	r3, r1
 8008546:	fbb0 f3f3 	udiv	r3, r0, r3
 800854a:	3301      	adds	r3, #1
 800854c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008550:	2b00      	cmp	r3, #0
 8008552:	bf0c      	ite	eq
 8008554:	2301      	moveq	r3, #1
 8008556:	2300      	movne	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	e012      	b.n	8008582 <HAL_I2C_Init+0x28a>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	1e58      	subs	r0, r3, #1
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6859      	ldr	r1, [r3, #4]
 8008564:	460b      	mov	r3, r1
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	440b      	add	r3, r1
 800856a:	0099      	lsls	r1, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008572:	3301      	adds	r3, #1
 8008574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008578:	2b00      	cmp	r3, #0
 800857a:	bf0c      	ite	eq
 800857c:	2301      	moveq	r3, #1
 800857e:	2300      	movne	r3, #0
 8008580:	b2db      	uxtb	r3, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d016      	beq.n	80085b4 <HAL_I2C_Init+0x2bc>
 8008586:	2301      	movs	r3, #1
 8008588:	e037      	b.n	80085fa <HAL_I2C_Init+0x302>
 800858a:	bf00      	nop
 800858c:	40005400 	.word	0x40005400
 8008590:	40005800 	.word	0x40005800
 8008594:	40005c00 	.word	0x40005c00
 8008598:	08013914 	.word	0x08013914
 800859c:	00061a80 	.word	0x00061a80
 80085a0:	000186a0 	.word	0x000186a0
 80085a4:	001e847f 	.word	0x001e847f
 80085a8:	003d08ff 	.word	0x003d08ff
 80085ac:	431bde83 	.word	0x431bde83
 80085b0:	10624dd3 	.word	0x10624dd3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10e      	bne.n	80085da <HAL_I2C_Init+0x2e2>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	1e58      	subs	r0, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6859      	ldr	r1, [r3, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	440b      	add	r3, r1
 80085ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80085ce:	3301      	adds	r3, #1
 80085d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085d8:	e00f      	b.n	80085fa <HAL_I2C_Init+0x302>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1e58      	subs	r0, r3, #1
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6859      	ldr	r1, [r3, #4]
 80085e2:	460b      	mov	r3, r1
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	0099      	lsls	r1, r3, #2
 80085ea:	440b      	add	r3, r1
 80085ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80085f0:	3301      	adds	r3, #1
 80085f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	6809      	ldr	r1, [r1, #0]
 80085fe:	4313      	orrs	r3, r2
 8008600:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69da      	ldr	r2, [r3, #28]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008628:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6911      	ldr	r1, [r2, #16]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	68d2      	ldr	r2, [r2, #12]
 8008634:	4311      	orrs	r1, r2
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6812      	ldr	r2, [r2, #0]
 800863a:	430b      	orrs	r3, r1
 800863c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	695a      	ldr	r2, [r3, #20]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	431a      	orrs	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e035      	b.n	800870e <HAL_I2C_DeInit+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a1c      	ldr	r2, [pc, #112]	; (8008718 <HAL_I2C_DeInit+0x88>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00e      	beq.n	80086ca <HAL_I2C_DeInit+0x3a>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a1a      	ldr	r2, [pc, #104]	; (800871c <HAL_I2C_DeInit+0x8c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d009      	beq.n	80086ca <HAL_I2C_DeInit+0x3a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a19      	ldr	r2, [pc, #100]	; (8008720 <HAL_I2C_DeInit+0x90>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d004      	beq.n	80086ca <HAL_I2C_DeInit+0x3a>
 80086c0:	f240 212f 	movw	r1, #559	; 0x22f
 80086c4:	4817      	ldr	r0, [pc, #92]	; (8008724 <HAL_I2C_DeInit+0x94>)
 80086c6:	f7fb f91c 	bl	8003902 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2224      	movs	r2, #36	; 0x24
 80086ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0201 	bic.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7f9 fefe 	bl	80024e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	40005400 	.word	0x40005400
 800871c:	40005800 	.word	0x40005800
 8008720:	40005c00 	.word	0x40005c00
 8008724:	08013914 	.word	0x08013914

08008728 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af02      	add	r7, sp, #8
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	4608      	mov	r0, r1
 8008732:	4611      	mov	r1, r2
 8008734:	461a      	mov	r2, r3
 8008736:	4603      	mov	r3, r0
 8008738:	817b      	strh	r3, [r7, #10]
 800873a:	460b      	mov	r3, r1
 800873c:	813b      	strh	r3, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008742:	f7fc fa19 	bl	8004b78 <HAL_GetTick>
 8008746:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d007      	beq.n	800875e <HAL_I2C_Mem_Write+0x36>
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	2b10      	cmp	r3, #16
 8008752:	d004      	beq.n	800875e <HAL_I2C_Mem_Write+0x36>
 8008754:	f640 11ba 	movw	r1, #2490	; 0x9ba
 8008758:	4873      	ldr	r0, [pc, #460]	; (8008928 <HAL_I2C_Mem_Write+0x200>)
 800875a:	f7fb f8d2 	bl	8003902 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b20      	cmp	r3, #32
 8008768:	f040 80d9 	bne.w	800891e <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	2319      	movs	r3, #25
 8008772:	2201      	movs	r2, #1
 8008774:	496d      	ldr	r1, [pc, #436]	; (800892c <HAL_I2C_Mem_Write+0x204>)
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fc9a 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8008782:	2302      	movs	r3, #2
 8008784:	e0cc      	b.n	8008920 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800878c:	2b01      	cmp	r3, #1
 800878e:	d101      	bne.n	8008794 <HAL_I2C_Mem_Write+0x6c>
 8008790:	2302      	movs	r3, #2
 8008792:	e0c5      	b.n	8008920 <HAL_I2C_Mem_Write+0x1f8>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d007      	beq.n	80087ba <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0201 	orr.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087c8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2221      	movs	r2, #33	; 0x21
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a3a      	ldr	r2, [r7, #32]
 80087e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80087ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4a4d      	ldr	r2, [pc, #308]	; (8008930 <HAL_I2C_Mem_Write+0x208>)
 80087fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80087fc:	88f8      	ldrh	r0, [r7, #6]
 80087fe:	893a      	ldrh	r2, [r7, #8]
 8008800:	8979      	ldrh	r1, [r7, #10]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	4603      	mov	r3, r0
 800880c:	68f8      	ldr	r0, [r7, #12]
 800880e:	f000 fad1 	bl	8008db4 <I2C_RequestMemoryWrite>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d052      	beq.n	80088be <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e081      	b.n	8008920 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fd1b 	bl	800925c <I2C_WaitOnTXEFlagUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00d      	beq.n	8008848 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	2b04      	cmp	r3, #4
 8008832:	d107      	bne.n	8008844 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008842:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e06b      	b.n	8008920 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	1c5a      	adds	r2, r3, #1
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008862:	3b01      	subs	r3, #1
 8008864:	b29a      	uxth	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b04      	cmp	r3, #4
 8008884:	d11b      	bne.n	80088be <HAL_I2C_Mem_Write+0x196>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888a:	2b00      	cmp	r3, #0
 800888c:	d017      	beq.n	80088be <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a8:	3b01      	subs	r3, #1
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	3b01      	subs	r3, #1
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1aa      	bne.n	800881c <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fd07 	bl	80092de <I2C_WaitOnBTFFlagUntilTimeout>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00d      	beq.n	80088f2 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d107      	bne.n	80088ee <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e016      	b.n	8008920 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	e000      	b.n	8008920 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800891e:	2302      	movs	r3, #2
  }
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	08013914 	.word	0x08013914
 800892c:	00100002 	.word	0x00100002
 8008930:	ffff0000 	.word	0xffff0000

08008934 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b08c      	sub	sp, #48	; 0x30
 8008938:	af02      	add	r7, sp, #8
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	461a      	mov	r2, r3
 8008942:	4603      	mov	r3, r0
 8008944:	817b      	strh	r3, [r7, #10]
 8008946:	460b      	mov	r3, r1
 8008948:	813b      	strh	r3, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800894e:	f7fc f913 	bl	8004b78 <HAL_GetTick>
 8008952:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d007      	beq.n	800896a <HAL_I2C_Mem_Read+0x36>
 800895a:	88fb      	ldrh	r3, [r7, #6]
 800895c:	2b10      	cmp	r3, #16
 800895e:	d004      	beq.n	800896a <HAL_I2C_Mem_Read+0x36>
 8008960:	f640 2135 	movw	r1, #2613	; 0xa35
 8008964:	4881      	ldr	r0, [pc, #516]	; (8008b6c <HAL_I2C_Mem_Read+0x238>)
 8008966:	f7fa ffcc 	bl	8003902 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b20      	cmp	r3, #32
 8008974:	f040 8209 	bne.w	8008d8a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2319      	movs	r3, #25
 800897e:	2201      	movs	r2, #1
 8008980:	497b      	ldr	r1, [pc, #492]	; (8008b70 <HAL_I2C_Mem_Read+0x23c>)
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fb94 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800898e:	2302      	movs	r3, #2
 8008990:	e1fc      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_I2C_Mem_Read+0x6c>
 800899c:	2302      	movs	r3, #2
 800899e:	e1f5      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d007      	beq.n	80089c6 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f042 0201 	orr.w	r2, r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089d4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2222      	movs	r2, #34	; 0x22
 80089da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2240      	movs	r2, #64	; 0x40
 80089e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80089f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	4a5b      	ldr	r2, [pc, #364]	; (8008b74 <HAL_I2C_Mem_Read+0x240>)
 8008a06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a08:	88f8      	ldrh	r0, [r7, #6]
 8008a0a:	893a      	ldrh	r2, [r7, #8]
 8008a0c:	8979      	ldrh	r1, [r7, #10]
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	4603      	mov	r3, r0
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fa61 	bl	8008ee0 <I2C_RequestMemoryRead>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e1b1      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d113      	bne.n	8008a58 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a30:	2300      	movs	r3, #0
 8008a32:	623b      	str	r3, [r7, #32]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	623b      	str	r3, [r7, #32]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	623b      	str	r3, [r7, #32]
 8008a44:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	e185      	b.n	8008d64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11b      	bne.n	8008a98 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a6e:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a70:	2300      	movs	r3, #0
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	61fb      	str	r3, [r7, #28]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	61fb      	str	r3, [r7, #28]
 8008a84:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	e165      	b.n	8008d64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d11b      	bne.n	8008ad8 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aae:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008abe:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	e145      	b.n	8008d64 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008aee:	e139      	b.n	8008d64 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	f200 80f2 	bhi.w	8008cde <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d123      	bne.n	8008b4a <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 fc2a 	bl	8009360 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e13a      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	3b01      	subs	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008b48:	e10c      	b.n	8008d64 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d14f      	bne.n	8008bf2 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4907      	ldr	r1, [pc, #28]	; (8008b78 <HAL_I2C_Mem_Read+0x244>)
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 faa7 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d009      	beq.n	8008b7c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e10f      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
 8008b6c:	08013914 	.word	0x08013914
 8008b70:	00100002 	.word	0x00100002
 8008b74:	ffff0000 	.word	0xffff0000
 8008b78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	691a      	ldr	r2, [r3, #16]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	b2d2      	uxtb	r2, r2
 8008bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bf0:	e0b8      	b.n	8008d64 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4966      	ldr	r1, [pc, #408]	; (8008d94 <HAL_I2C_Mem_Read+0x460>)
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fa57 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0bf      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691a      	ldr	r2, [r3, #16]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	2200      	movs	r2, #0
 8008c56:	494f      	ldr	r1, [pc, #316]	; (8008d94 <HAL_I2C_Mem_Read+0x460>)
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 fa29 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e091      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	b2d2      	uxtb	r2, r2
 8008c84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	691a      	ldr	r2, [r3, #16]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	b2d2      	uxtb	r2, r2
 8008cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008cdc:	e042      	b.n	8008d64 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ce0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f000 fb3c 	bl	8009360 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e04c      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	b29a      	uxth	r2, r3
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d118      	bne.n	8008d64 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f47f aec1 	bne.w	8008af0 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d86:	2300      	movs	r3, #0
 8008d88:	e000      	b.n	8008d8c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008d8a:	2302      	movs	r3, #2
  }
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3728      	adds	r7, #40	; 0x28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	00010004 	.word	0x00010004

08008d98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008da6:	b2db      	uxtb	r3, r3
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b088      	sub	sp, #32
 8008db8:	af02      	add	r7, sp, #8
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	817b      	strh	r3, [r7, #10]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	813b      	strh	r3, [r7, #8]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ddc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 f960 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00d      	beq.n	8008e12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e04:	d103      	bne.n	8008e0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e05f      	b.n	8008ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008e12:	897b      	ldrh	r3, [r7, #10]
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008e20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	6a3a      	ldr	r2, [r7, #32]
 8008e26:	492d      	ldr	r1, [pc, #180]	; (8008edc <I2C_RequestMemoryWrite+0x128>)
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 f998 	bl	800915e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e04c      	b.n	8008ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e50:	6a39      	ldr	r1, [r7, #32]
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 fa02 	bl	800925c <I2C_WaitOnTXEFlagUntilTimeout>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00d      	beq.n	8008e7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d107      	bne.n	8008e76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e02b      	b.n	8008ed2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d105      	bne.n	8008e8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008e80:	893b      	ldrh	r3, [r7, #8]
 8008e82:	b2da      	uxtb	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	611a      	str	r2, [r3, #16]
 8008e8a:	e021      	b.n	8008ed0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008e8c:	893b      	ldrh	r3, [r7, #8]
 8008e8e:	0a1b      	lsrs	r3, r3, #8
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e9c:	6a39      	ldr	r1, [r7, #32]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 f9dc 	bl	800925c <I2C_WaitOnTXEFlagUntilTimeout>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00d      	beq.n	8008ec6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d107      	bne.n	8008ec2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ec0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e005      	b.n	8008ed2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008ec6:	893b      	ldrh	r3, [r7, #8]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	00010002 	.word	0x00010002

08008ee0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	4608      	mov	r0, r1
 8008eea:	4611      	mov	r1, r2
 8008eec:	461a      	mov	r2, r3
 8008eee:	4603      	mov	r3, r0
 8008ef0:	817b      	strh	r3, [r7, #10]
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	813b      	strh	r3, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 f8c2 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00d      	beq.n	8008f4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f40:	d103      	bne.n	8008f4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e0aa      	b.n	80090a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f4e:	897b      	ldrh	r3, [r7, #10]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	461a      	mov	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	6a3a      	ldr	r2, [r7, #32]
 8008f62:	4952      	ldr	r1, [pc, #328]	; (80090ac <I2C_RequestMemoryRead+0x1cc>)
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f8fa 	bl	800915e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d001      	beq.n	8008f74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e097      	b.n	80090a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f74:	2300      	movs	r3, #0
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f8c:	6a39      	ldr	r1, [r7, #32]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 f964 	bl	800925c <I2C_WaitOnTXEFlagUntilTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00d      	beq.n	8008fb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d107      	bne.n	8008fb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e076      	b.n	80090a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d105      	bne.n	8008fc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fbc:	893b      	ldrh	r3, [r7, #8]
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	611a      	str	r2, [r3, #16]
 8008fc6:	e021      	b.n	800900c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008fc8:	893b      	ldrh	r3, [r7, #8]
 8008fca:	0a1b      	lsrs	r3, r3, #8
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd8:	6a39      	ldr	r1, [r7, #32]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 f93e 	bl	800925c <I2C_WaitOnTXEFlagUntilTimeout>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d107      	bne.n	8008ffe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ffc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e050      	b.n	80090a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009002:	893b      	ldrh	r3, [r7, #8]
 8009004:	b2da      	uxtb	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800900c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900e:	6a39      	ldr	r1, [r7, #32]
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f923 	bl	800925c <I2C_WaitOnTXEFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00d      	beq.n	8009038 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	2b04      	cmp	r3, #4
 8009022:	d107      	bne.n	8009034 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009032:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e035      	b.n	80090a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009046:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	6a3b      	ldr	r3, [r7, #32]
 800904e:	2200      	movs	r2, #0
 8009050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 f82b 	bl	80090b0 <I2C_WaitOnFlagUntilTimeout>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00d      	beq.n	800907c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906e:	d103      	bne.n	8009078 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009076:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e013      	b.n	80090a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800907c:	897b      	ldrh	r3, [r7, #10]
 800907e:	b2db      	uxtb	r3, r3
 8009080:	f043 0301 	orr.w	r3, r3, #1
 8009084:	b2da      	uxtb	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	6a3a      	ldr	r2, [r7, #32]
 8009090:	4906      	ldr	r1, [pc, #24]	; (80090ac <I2C_RequestMemoryRead+0x1cc>)
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f863 	bl	800915e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	00010002 	.word	0x00010002

080090b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	4613      	mov	r3, r2
 80090be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090c0:	e025      	b.n	800910e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c8:	d021      	beq.n	800910e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ca:	f7fb fd55 	bl	8004b78 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d302      	bcc.n	80090e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d116      	bne.n	800910e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f043 0220 	orr.w	r2, r3, #32
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e023      	b.n	8009156 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	0c1b      	lsrs	r3, r3, #16
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b01      	cmp	r3, #1
 8009116:	d10d      	bne.n	8009134 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	43da      	mvns	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	4013      	ands	r3, r2
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	bf0c      	ite	eq
 800912a:	2301      	moveq	r3, #1
 800912c:	2300      	movne	r3, #0
 800912e:	b2db      	uxtb	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	e00c      	b.n	800914e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	43da      	mvns	r2, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	4013      	ands	r3, r2
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	bf0c      	ite	eq
 8009146:	2301      	moveq	r3, #1
 8009148:	2300      	movne	r3, #0
 800914a:	b2db      	uxtb	r3, r3
 800914c:	461a      	mov	r2, r3
 800914e:	79fb      	ldrb	r3, [r7, #7]
 8009150:	429a      	cmp	r2, r3
 8009152:	d0b6      	beq.n	80090c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800916c:	e051      	b.n	8009212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800917c:	d123      	bne.n	80091c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800918c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009196:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	f043 0204 	orr.w	r2, r3, #4
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e046      	b.n	8009254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091cc:	d021      	beq.n	8009212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ce:	f7fb fcd3 	bl	8004b78 <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d302      	bcc.n	80091e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d116      	bne.n	8009212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fe:	f043 0220 	orr.w	r2, r3, #32
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e020      	b.n	8009254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	0c1b      	lsrs	r3, r3, #16
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	d10c      	bne.n	8009236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	43da      	mvns	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4013      	ands	r3, r2
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	bf14      	ite	ne
 800922e:	2301      	movne	r3, #1
 8009230:	2300      	moveq	r3, #0
 8009232:	b2db      	uxtb	r3, r3
 8009234:	e00b      	b.n	800924e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699b      	ldr	r3, [r3, #24]
 800923c:	43da      	mvns	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	4013      	ands	r3, r2
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	bf14      	ite	ne
 8009248:	2301      	movne	r3, #1
 800924a:	2300      	moveq	r3, #0
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b00      	cmp	r3, #0
 8009250:	d18d      	bne.n	800916e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009268:	e02d      	b.n	80092c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 f8ce 	bl	800940c <I2C_IsAcknowledgeFailed>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e02d      	b.n	80092d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009280:	d021      	beq.n	80092c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009282:	f7fb fc79 	bl	8004b78 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	429a      	cmp	r2, r3
 8009290:	d302      	bcc.n	8009298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d116      	bne.n	80092c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	f043 0220 	orr.w	r2, r3, #32
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e007      	b.n	80092d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d0:	2b80      	cmp	r3, #128	; 0x80
 80092d2:	d1ca      	bne.n	800926a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b084      	sub	sp, #16
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80092ea:	e02d      	b.n	8009348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f88d 	bl	800940c <I2C_IsAcknowledgeFailed>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e02d      	b.n	8009358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009302:	d021      	beq.n	8009348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009304:	f7fb fc38 	bl	8004b78 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	429a      	cmp	r2, r3
 8009312:	d302      	bcc.n	800931a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d116      	bne.n	8009348 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	f043 0220 	orr.w	r2, r3, #32
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e007      	b.n	8009358 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	f003 0304 	and.w	r3, r3, #4
 8009352:	2b04      	cmp	r3, #4
 8009354:	d1ca      	bne.n	80092ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800936c:	e042      	b.n	80093f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	f003 0310 	and.w	r3, r3, #16
 8009378:	2b10      	cmp	r3, #16
 800937a:	d119      	bne.n	80093b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f06f 0210 	mvn.w	r2, #16
 8009384:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2220      	movs	r2, #32
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e029      	b.n	8009404 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b0:	f7fb fbe2 	bl	8004b78 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d302      	bcc.n	80093c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d116      	bne.n	80093f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e0:	f043 0220 	orr.w	r2, r3, #32
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e007      	b.n	8009404 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fe:	2b40      	cmp	r3, #64	; 0x40
 8009400:	d1b5      	bne.n	800936e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800941e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009422:	d11b      	bne.n	800945c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800942c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2220      	movs	r2, #32
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009448:	f043 0204 	orr.w	r2, r3, #4
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e000      	b.n	800945e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
	...

0800946c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e316      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b0f      	cmp	r3, #15
 8009484:	d903      	bls.n	800948e <HAL_RCC_OscConfig+0x22>
 8009486:	21e8      	movs	r1, #232	; 0xe8
 8009488:	48a3      	ldr	r0, [pc, #652]	; (8009718 <HAL_RCC_OscConfig+0x2ac>)
 800948a:	f7fa fa3a 	bl	8003902 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 8088 	beq.w	80095ac <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00d      	beq.n	80094c0 <HAL_RCC_OscConfig+0x54>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ac:	d008      	beq.n	80094c0 <HAL_RCC_OscConfig+0x54>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094b6:	d003      	beq.n	80094c0 <HAL_RCC_OscConfig+0x54>
 80094b8:	21ed      	movs	r1, #237	; 0xed
 80094ba:	4897      	ldr	r0, [pc, #604]	; (8009718 <HAL_RCC_OscConfig+0x2ac>)
 80094bc:	f7fa fa21 	bl	8003902 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094c0:	4b96      	ldr	r3, [pc, #600]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f003 030c 	and.w	r3, r3, #12
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d00c      	beq.n	80094e6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094cc:	4b93      	ldr	r3, [pc, #588]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d112      	bne.n	80094fe <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80094d8:	4b90      	ldr	r3, [pc, #576]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094e4:	d10b      	bne.n	80094fe <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094e6:	4b8d      	ldr	r3, [pc, #564]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d05b      	beq.n	80095aa <HAL_RCC_OscConfig+0x13e>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d157      	bne.n	80095aa <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e2d6      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009506:	d106      	bne.n	8009516 <HAL_RCC_OscConfig+0xaa>
 8009508:	4b84      	ldr	r3, [pc, #528]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a83      	ldr	r2, [pc, #524]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800950e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	e01d      	b.n	8009552 <HAL_RCC_OscConfig+0xe6>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800951e:	d10c      	bne.n	800953a <HAL_RCC_OscConfig+0xce>
 8009520:	4b7e      	ldr	r3, [pc, #504]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a7d      	ldr	r2, [pc, #500]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	4b7b      	ldr	r3, [pc, #492]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a7a      	ldr	r2, [pc, #488]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	e00b      	b.n	8009552 <HAL_RCC_OscConfig+0xe6>
 800953a:	4b78      	ldr	r3, [pc, #480]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a77      	ldr	r2, [pc, #476]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	4b75      	ldr	r3, [pc, #468]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a74      	ldr	r2, [pc, #464]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800954c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d013      	beq.n	8009582 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800955a:	f7fb fb0d 	bl	8004b78 <HAL_GetTick>
 800955e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009560:	e008      	b.n	8009574 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009562:	f7fb fb09 	bl	8004b78 <HAL_GetTick>
 8009566:	4602      	mov	r2, r0
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	2b64      	cmp	r3, #100	; 0x64
 800956e:	d901      	bls.n	8009574 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e29b      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009574:	4b69      	ldr	r3, [pc, #420]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0f0      	beq.n	8009562 <HAL_RCC_OscConfig+0xf6>
 8009580:	e014      	b.n	80095ac <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009582:	f7fb faf9 	bl	8004b78 <HAL_GetTick>
 8009586:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009588:	e008      	b.n	800959c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800958a:	f7fb faf5 	bl	8004b78 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	2b64      	cmp	r3, #100	; 0x64
 8009596:	d901      	bls.n	800959c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e287      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800959c:	4b5f      	ldr	r3, [pc, #380]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1f0      	bne.n	800958a <HAL_RCC_OscConfig+0x11e>
 80095a8:	e000      	b.n	80095ac <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d079      	beq.n	80096ac <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d008      	beq.n	80095d2 <HAL_RCC_OscConfig+0x166>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d004      	beq.n	80095d2 <HAL_RCC_OscConfig+0x166>
 80095c8:	f240 111f 	movw	r1, #287	; 0x11f
 80095cc:	4852      	ldr	r0, [pc, #328]	; (8009718 <HAL_RCC_OscConfig+0x2ac>)
 80095ce:	f7fa f998 	bl	8003902 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	2b1f      	cmp	r3, #31
 80095d8:	d904      	bls.n	80095e4 <HAL_RCC_OscConfig+0x178>
 80095da:	f44f 7190 	mov.w	r1, #288	; 0x120
 80095de:	484e      	ldr	r0, [pc, #312]	; (8009718 <HAL_RCC_OscConfig+0x2ac>)
 80095e0:	f7fa f98f 	bl	8003902 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095e4:	4b4d      	ldr	r3, [pc, #308]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 030c 	and.w	r3, r3, #12
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095f0:	4b4a      	ldr	r3, [pc, #296]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095f8:	2b08      	cmp	r3, #8
 80095fa:	d11c      	bne.n	8009636 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095fc:	4b47      	ldr	r3, [pc, #284]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d116      	bne.n	8009636 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009608:	4b44      	ldr	r3, [pc, #272]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <HAL_RCC_OscConfig+0x1b4>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d001      	beq.n	8009620 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e245      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009620:	4b3e      	ldr	r3, [pc, #248]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	493b      	ldr	r1, [pc, #236]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009630:	4313      	orrs	r3, r2
 8009632:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009634:	e03a      	b.n	80096ac <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d020      	beq.n	8009680 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800963e:	4b38      	ldr	r3, [pc, #224]	; (8009720 <HAL_RCC_OscConfig+0x2b4>)
 8009640:	2201      	movs	r2, #1
 8009642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009644:	f7fb fa98 	bl	8004b78 <HAL_GetTick>
 8009648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800964a:	e008      	b.n	800965e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800964c:	f7fb fa94 	bl	8004b78 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b02      	cmp	r3, #2
 8009658:	d901      	bls.n	800965e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e226      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800965e:	4b2f      	ldr	r3, [pc, #188]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0f0      	beq.n	800964c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800966a:	4b2c      	ldr	r3, [pc, #176]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	4928      	ldr	r1, [pc, #160]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 800967a:	4313      	orrs	r3, r2
 800967c:	600b      	str	r3, [r1, #0]
 800967e:	e015      	b.n	80096ac <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009680:	4b27      	ldr	r3, [pc, #156]	; (8009720 <HAL_RCC_OscConfig+0x2b4>)
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009686:	f7fb fa77 	bl	8004b78 <HAL_GetTick>
 800968a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800968c:	e008      	b.n	80096a0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800968e:	f7fb fa73 	bl	8004b78 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d901      	bls.n	80096a0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e205      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096a0:	4b1e      	ldr	r3, [pc, #120]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f0      	bne.n	800968e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d046      	beq.n	8009746 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <HAL_RCC_OscConfig+0x266>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d004      	beq.n	80096d2 <HAL_RCC_OscConfig+0x266>
 80096c8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80096cc:	4812      	ldr	r0, [pc, #72]	; (8009718 <HAL_RCC_OscConfig+0x2ac>)
 80096ce:	f7fa f918 	bl	8003902 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d016      	beq.n	8009708 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096da:	4b12      	ldr	r3, [pc, #72]	; (8009724 <HAL_RCC_OscConfig+0x2b8>)
 80096dc:	2201      	movs	r2, #1
 80096de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096e0:	f7fb fa4a 	bl	8004b78 <HAL_GetTick>
 80096e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096e6:	e008      	b.n	80096fa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096e8:	f7fb fa46 	bl	8004b78 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d901      	bls.n	80096fa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e1d8      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096fa:	4b08      	ldr	r3, [pc, #32]	; (800971c <HAL_RCC_OscConfig+0x2b0>)
 80096fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0f0      	beq.n	80096e8 <HAL_RCC_OscConfig+0x27c>
 8009706:	e01e      	b.n	8009746 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009708:	4b06      	ldr	r3, [pc, #24]	; (8009724 <HAL_RCC_OscConfig+0x2b8>)
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800970e:	f7fb fa33 	bl	8004b78 <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009714:	e011      	b.n	800973a <HAL_RCC_OscConfig+0x2ce>
 8009716:	bf00      	nop
 8009718:	0801394c 	.word	0x0801394c
 800971c:	40023800 	.word	0x40023800
 8009720:	42470000 	.word	0x42470000
 8009724:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009728:	f7fb fa26 	bl	8004b78 <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	d901      	bls.n	800973a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e1b8      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800973a:	4b97      	ldr	r3, [pc, #604]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800973c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f0      	bne.n	8009728 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0304 	and.w	r3, r3, #4
 800974e:	2b00      	cmp	r3, #0
 8009750:	f000 80a8 	beq.w	80098a4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009754:	2300      	movs	r3, #0
 8009756:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00c      	beq.n	800977a <HAL_RCC_OscConfig+0x30e>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d008      	beq.n	800977a <HAL_RCC_OscConfig+0x30e>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b05      	cmp	r3, #5
 800976e:	d004      	beq.n	800977a <HAL_RCC_OscConfig+0x30e>
 8009770:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8009774:	4889      	ldr	r0, [pc, #548]	; (800999c <HAL_RCC_OscConfig+0x530>)
 8009776:	f7fa f8c4 	bl	8003902 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800977a:	4b87      	ldr	r3, [pc, #540]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800977c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10f      	bne.n	80097a6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009786:	2300      	movs	r3, #0
 8009788:	60bb      	str	r3, [r7, #8]
 800978a:	4b83      	ldr	r3, [pc, #524]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800978c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978e:	4a82      	ldr	r2, [pc, #520]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009794:	6413      	str	r3, [r2, #64]	; 0x40
 8009796:	4b80      	ldr	r3, [pc, #512]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800979e:	60bb      	str	r3, [r7, #8]
 80097a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80097a2:	2301      	movs	r3, #1
 80097a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097a6:	4b7e      	ldr	r3, [pc, #504]	; (80099a0 <HAL_RCC_OscConfig+0x534>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d118      	bne.n	80097e4 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097b2:	4b7b      	ldr	r3, [pc, #492]	; (80099a0 <HAL_RCC_OscConfig+0x534>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a7a      	ldr	r2, [pc, #488]	; (80099a0 <HAL_RCC_OscConfig+0x534>)
 80097b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097be:	f7fb f9db 	bl	8004b78 <HAL_GetTick>
 80097c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097c4:	e008      	b.n	80097d8 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097c6:	f7fb f9d7 	bl	8004b78 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e169      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097d8:	4b71      	ldr	r3, [pc, #452]	; (80099a0 <HAL_RCC_OscConfig+0x534>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d106      	bne.n	80097fa <HAL_RCC_OscConfig+0x38e>
 80097ec:	4b6a      	ldr	r3, [pc, #424]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 80097ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f0:	4a69      	ldr	r2, [pc, #420]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 80097f2:	f043 0301 	orr.w	r3, r3, #1
 80097f6:	6713      	str	r3, [r2, #112]	; 0x70
 80097f8:	e01c      	b.n	8009834 <HAL_RCC_OscConfig+0x3c8>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2b05      	cmp	r3, #5
 8009800:	d10c      	bne.n	800981c <HAL_RCC_OscConfig+0x3b0>
 8009802:	4b65      	ldr	r3, [pc, #404]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009806:	4a64      	ldr	r2, [pc, #400]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009808:	f043 0304 	orr.w	r3, r3, #4
 800980c:	6713      	str	r3, [r2, #112]	; 0x70
 800980e:	4b62      	ldr	r3, [pc, #392]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009812:	4a61      	ldr	r2, [pc, #388]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009814:	f043 0301 	orr.w	r3, r3, #1
 8009818:	6713      	str	r3, [r2, #112]	; 0x70
 800981a:	e00b      	b.n	8009834 <HAL_RCC_OscConfig+0x3c8>
 800981c:	4b5e      	ldr	r3, [pc, #376]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800981e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009820:	4a5d      	ldr	r2, [pc, #372]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009822:	f023 0301 	bic.w	r3, r3, #1
 8009826:	6713      	str	r3, [r2, #112]	; 0x70
 8009828:	4b5b      	ldr	r3, [pc, #364]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800982a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982c:	4a5a      	ldr	r2, [pc, #360]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800982e:	f023 0304 	bic.w	r3, r3, #4
 8009832:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d015      	beq.n	8009868 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800983c:	f7fb f99c 	bl	8004b78 <HAL_GetTick>
 8009840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009842:	e00a      	b.n	800985a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009844:	f7fb f998 	bl	8004b78 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009852:	4293      	cmp	r3, r2
 8009854:	d901      	bls.n	800985a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	e128      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800985a:	4b4f      	ldr	r3, [pc, #316]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d0ee      	beq.n	8009844 <HAL_RCC_OscConfig+0x3d8>
 8009866:	e014      	b.n	8009892 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009868:	f7fb f986 	bl	8004b78 <HAL_GetTick>
 800986c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800986e:	e00a      	b.n	8009886 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009870:	f7fb f982 	bl	8004b78 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	f241 3288 	movw	r2, #5000	; 0x1388
 800987e:	4293      	cmp	r3, r2
 8009880:	d901      	bls.n	8009886 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e112      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009886:	4b44      	ldr	r3, [pc, #272]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 8009888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1ee      	bne.n	8009870 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d105      	bne.n	80098a4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009898:	4b3f      	ldr	r3, [pc, #252]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800989a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989c:	4a3e      	ldr	r2, [pc, #248]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 800989e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80098a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00c      	beq.n	80098c6 <HAL_RCC_OscConfig+0x45a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d008      	beq.n	80098c6 <HAL_RCC_OscConfig+0x45a>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d004      	beq.n	80098c6 <HAL_RCC_OscConfig+0x45a>
 80098bc:	f240 11cf 	movw	r1, #463	; 0x1cf
 80098c0:	4836      	ldr	r0, [pc, #216]	; (800999c <HAL_RCC_OscConfig+0x530>)
 80098c2:	f7fa f81e 	bl	8003902 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 80ed 	beq.w	8009aaa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80098d0:	4b31      	ldr	r3, [pc, #196]	; (8009998 <HAL_RCC_OscConfig+0x52c>)
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f003 030c 	and.w	r3, r3, #12
 80098d8:	2b08      	cmp	r3, #8
 80098da:	f000 80ae 	beq.w	8009a3a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	f040 8092 	bne.w	8009a0c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	69db      	ldr	r3, [r3, #28]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d009      	beq.n	8009904 <HAL_RCC_OscConfig+0x498>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098f8:	d004      	beq.n	8009904 <HAL_RCC_OscConfig+0x498>
 80098fa:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80098fe:	4827      	ldr	r0, [pc, #156]	; (800999c <HAL_RCC_OscConfig+0x530>)
 8009900:	f7f9 ffff 	bl	8003902 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	2b3f      	cmp	r3, #63	; 0x3f
 800990a:	d904      	bls.n	8009916 <HAL_RCC_OscConfig+0x4aa>
 800990c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009910:	4822      	ldr	r0, [pc, #136]	; (800999c <HAL_RCC_OscConfig+0x530>)
 8009912:	f7f9 fff6 	bl	8003902 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991a:	2b31      	cmp	r3, #49	; 0x31
 800991c:	d904      	bls.n	8009928 <HAL_RCC_OscConfig+0x4bc>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009926:	d904      	bls.n	8009932 <HAL_RCC_OscConfig+0x4c6>
 8009928:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800992c:	481b      	ldr	r0, [pc, #108]	; (800999c <HAL_RCC_OscConfig+0x530>)
 800992e:	f7f9 ffe8 	bl	8003902 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009936:	2b02      	cmp	r3, #2
 8009938:	d010      	beq.n	800995c <HAL_RCC_OscConfig+0x4f0>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00c      	beq.n	800995c <HAL_RCC_OscConfig+0x4f0>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009946:	2b06      	cmp	r3, #6
 8009948:	d008      	beq.n	800995c <HAL_RCC_OscConfig+0x4f0>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994e:	2b08      	cmp	r3, #8
 8009950:	d004      	beq.n	800995c <HAL_RCC_OscConfig+0x4f0>
 8009952:	f240 11db 	movw	r1, #475	; 0x1db
 8009956:	4811      	ldr	r0, [pc, #68]	; (800999c <HAL_RCC_OscConfig+0x530>)
 8009958:	f7f9 ffd3 	bl	8003902 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	2b01      	cmp	r3, #1
 8009962:	d903      	bls.n	800996c <HAL_RCC_OscConfig+0x500>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	2b0f      	cmp	r3, #15
 800996a:	d904      	bls.n	8009976 <HAL_RCC_OscConfig+0x50a>
 800996c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8009970:	480a      	ldr	r0, [pc, #40]	; (800999c <HAL_RCC_OscConfig+0x530>)
 8009972:	f7f9 ffc6 	bl	8003902 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009976:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <HAL_RCC_OscConfig+0x538>)
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800997c:	f7fb f8fc 	bl	8004b78 <HAL_GetTick>
 8009980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009982:	e011      	b.n	80099a8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009984:	f7fb f8f8 	bl	8004b78 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	2b02      	cmp	r3, #2
 8009990:	d90a      	bls.n	80099a8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e08a      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
 8009996:	bf00      	nop
 8009998:	40023800 	.word	0x40023800
 800999c:	0801394c 	.word	0x0801394c
 80099a0:	40007000 	.word	0x40007000
 80099a4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80099a8:	4b42      	ldr	r3, [pc, #264]	; (8009ab4 <HAL_RCC_OscConfig+0x648>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e7      	bne.n	8009984 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	69da      	ldr	r2, [r3, #28]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	431a      	orrs	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	019b      	lsls	r3, r3, #6
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ca:	085b      	lsrs	r3, r3, #1
 80099cc:	3b01      	subs	r3, #1
 80099ce:	041b      	lsls	r3, r3, #16
 80099d0:	431a      	orrs	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	061b      	lsls	r3, r3, #24
 80099d8:	4936      	ldr	r1, [pc, #216]	; (8009ab4 <HAL_RCC_OscConfig+0x648>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099de:	4b36      	ldr	r3, [pc, #216]	; (8009ab8 <HAL_RCC_OscConfig+0x64c>)
 80099e0:	2201      	movs	r2, #1
 80099e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099e4:	f7fb f8c8 	bl	8004b78 <HAL_GetTick>
 80099e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099ea:	e008      	b.n	80099fe <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099ec:	f7fb f8c4 	bl	8004b78 <HAL_GetTick>
 80099f0:	4602      	mov	r2, r0
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d901      	bls.n	80099fe <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e056      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099fe:	4b2d      	ldr	r3, [pc, #180]	; (8009ab4 <HAL_RCC_OscConfig+0x648>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0f0      	beq.n	80099ec <HAL_RCC_OscConfig+0x580>
 8009a0a:	e04e      	b.n	8009aaa <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009a0c:	4b2a      	ldr	r3, [pc, #168]	; (8009ab8 <HAL_RCC_OscConfig+0x64c>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a12:	f7fb f8b1 	bl	8004b78 <HAL_GetTick>
 8009a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a18:	e008      	b.n	8009a2c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a1a:	f7fb f8ad 	bl	8004b78 <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d901      	bls.n	8009a2c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e03f      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a2c:	4b21      	ldr	r3, [pc, #132]	; (8009ab4 <HAL_RCC_OscConfig+0x648>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1f0      	bne.n	8009a1a <HAL_RCC_OscConfig+0x5ae>
 8009a38:	e037      	b.n	8009aaa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d101      	bne.n	8009a46 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e032      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a46:	4b1b      	ldr	r3, [pc, #108]	; (8009ab4 <HAL_RCC_OscConfig+0x648>)
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d028      	beq.n	8009aa6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d121      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d11a      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009a76:	4013      	ands	r3, r2
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d111      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8c:	085b      	lsrs	r3, r3, #1
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d107      	bne.n	8009aa6 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d001      	beq.n	8009aaa <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e000      	b.n	8009aac <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40023800 	.word	0x40023800
 8009ab8:	42470060 	.word	0x42470060

08009abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e174      	b.n	8009dba <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_RCC_ClockConfig+0x24>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b0f      	cmp	r3, #15
 8009ade:	d904      	bls.n	8009aea <HAL_RCC_ClockConfig+0x2e>
 8009ae0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8009ae4:	487b      	ldr	r0, [pc, #492]	; (8009cd4 <HAL_RCC_ClockConfig+0x218>)
 8009ae6:	f7f9 ff0c 	bl	8003902 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d019      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d016      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d013      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d010      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d00d      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	d00a      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b06      	cmp	r3, #6
 8009b12:	d007      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b07      	cmp	r3, #7
 8009b18:	d004      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x68>
 8009b1a:	f240 215d 	movw	r1, #605	; 0x25d
 8009b1e:	486d      	ldr	r0, [pc, #436]	; (8009cd4 <HAL_RCC_ClockConfig+0x218>)
 8009b20:	f7f9 feef 	bl	8003902 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009b24:	4b6c      	ldr	r3, [pc, #432]	; (8009cd8 <HAL_RCC_ClockConfig+0x21c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d90c      	bls.n	8009b4c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b32:	4b69      	ldr	r3, [pc, #420]	; (8009cd8 <HAL_RCC_ClockConfig+0x21c>)
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	b2d2      	uxtb	r2, r2
 8009b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b3a:	4b67      	ldr	r3, [pc, #412]	; (8009cd8 <HAL_RCC_ClockConfig+0x21c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0307 	and.w	r3, r3, #7
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d001      	beq.n	8009b4c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e136      	b.n	8009dba <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d049      	beq.n	8009bec <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b64:	4b5d      	ldr	r3, [pc, #372]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	4a5c      	ldr	r2, [pc, #368]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 0308 	and.w	r3, r3, #8
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b7c:	4b57      	ldr	r3, [pc, #348]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	4a56      	ldr	r2, [pc, #344]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d024      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	2b80      	cmp	r3, #128	; 0x80
 8009b96:	d020      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2b90      	cmp	r3, #144	; 0x90
 8009b9e:	d01c      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	2ba0      	cmp	r3, #160	; 0xa0
 8009ba6:	d018      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	2bb0      	cmp	r3, #176	; 0xb0
 8009bae:	d014      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8009bb6:	d010      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	2bd0      	cmp	r3, #208	; 0xd0
 8009bbe:	d00c      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	2be0      	cmp	r3, #224	; 0xe0
 8009bc6:	d008      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	2bf0      	cmp	r3, #240	; 0xf0
 8009bce:	d004      	beq.n	8009bda <HAL_RCC_ClockConfig+0x11e>
 8009bd0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009bd4:	483f      	ldr	r0, [pc, #252]	; (8009cd4 <HAL_RCC_ClockConfig+0x218>)
 8009bd6:	f7f9 fe94 	bl	8003902 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bda:	4b40      	ldr	r3, [pc, #256]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	493d      	ldr	r1, [pc, #244]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d059      	beq.n	8009cac <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d010      	beq.n	8009c22 <HAL_RCC_ClockConfig+0x166>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d00c      	beq.n	8009c22 <HAL_RCC_ClockConfig+0x166>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d008      	beq.n	8009c22 <HAL_RCC_ClockConfig+0x166>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d004      	beq.n	8009c22 <HAL_RCC_ClockConfig+0x166>
 8009c18:	f240 2187 	movw	r1, #647	; 0x287
 8009c1c:	482d      	ldr	r0, [pc, #180]	; (8009cd4 <HAL_RCC_ClockConfig+0x218>)
 8009c1e:	f7f9 fe70 	bl	8003902 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d107      	bne.n	8009c3a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c2a:	4b2c      	ldr	r3, [pc, #176]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d119      	bne.n	8009c6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e0bf      	b.n	8009dba <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d003      	beq.n	8009c4a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d107      	bne.n	8009c5a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c4a:	4b24      	ldr	r3, [pc, #144]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d109      	bne.n	8009c6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e0af      	b.n	8009dba <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c5a:	4b20      	ldr	r3, [pc, #128]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e0a7      	b.n	8009dba <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c6a:	4b1c      	ldr	r3, [pc, #112]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f023 0203 	bic.w	r2, r3, #3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	4919      	ldr	r1, [pc, #100]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c7c:	f7fa ff7c 	bl	8004b78 <HAL_GetTick>
 8009c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c82:	e00a      	b.n	8009c9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c84:	f7fa ff78 	bl	8004b78 <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d901      	bls.n	8009c9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e08f      	b.n	8009dba <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <HAL_RCC_ClockConfig+0x220>)
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f003 020c 	and.w	r2, r3, #12
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d1eb      	bne.n	8009c84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cac:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <HAL_RCC_ClockConfig+0x21c>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0307 	and.w	r3, r3, #7
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d212      	bcs.n	8009ce0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <HAL_RCC_ClockConfig+0x21c>)
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	b2d2      	uxtb	r2, r2
 8009cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cc2:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <HAL_RCC_ClockConfig+0x21c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d007      	beq.n	8009ce0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e072      	b.n	8009dba <HAL_RCC_ClockConfig+0x2fe>
 8009cd4:	0801394c 	.word	0x0801394c
 8009cd8:	40023c00 	.word	0x40023c00
 8009cdc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d025      	beq.n	8009d38 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d018      	beq.n	8009d26 <HAL_RCC_ClockConfig+0x26a>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cfc:	d013      	beq.n	8009d26 <HAL_RCC_ClockConfig+0x26a>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d06:	d00e      	beq.n	8009d26 <HAL_RCC_ClockConfig+0x26a>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009d10:	d009      	beq.n	8009d26 <HAL_RCC_ClockConfig+0x26a>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009d1a:	d004      	beq.n	8009d26 <HAL_RCC_ClockConfig+0x26a>
 8009d1c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8009d20:	4828      	ldr	r0, [pc, #160]	; (8009dc4 <HAL_RCC_ClockConfig+0x308>)
 8009d22:	f7f9 fdee 	bl	8003902 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d26:	4b28      	ldr	r3, [pc, #160]	; (8009dc8 <HAL_RCC_ClockConfig+0x30c>)
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	4925      	ldr	r1, [pc, #148]	; (8009dc8 <HAL_RCC_ClockConfig+0x30c>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0308 	and.w	r3, r3, #8
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d026      	beq.n	8009d92 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d018      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x2c2>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d54:	d013      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x2c2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d5e:	d00e      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x2c2>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009d68:	d009      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x2c2>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009d72:	d004      	beq.n	8009d7e <HAL_RCC_ClockConfig+0x2c2>
 8009d74:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8009d78:	4812      	ldr	r0, [pc, #72]	; (8009dc4 <HAL_RCC_ClockConfig+0x308>)
 8009d7a:	f7f9 fdc2 	bl	8003902 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d7e:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <HAL_RCC_ClockConfig+0x30c>)
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	490e      	ldr	r1, [pc, #56]	; (8009dc8 <HAL_RCC_ClockConfig+0x30c>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d92:	f000 f821 	bl	8009dd8 <HAL_RCC_GetSysClockFreq>
 8009d96:	4602      	mov	r2, r0
 8009d98:	4b0b      	ldr	r3, [pc, #44]	; (8009dc8 <HAL_RCC_ClockConfig+0x30c>)
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	091b      	lsrs	r3, r3, #4
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	490a      	ldr	r1, [pc, #40]	; (8009dcc <HAL_RCC_ClockConfig+0x310>)
 8009da4:	5ccb      	ldrb	r3, [r1, r3]
 8009da6:	fa22 f303 	lsr.w	r3, r2, r3
 8009daa:	4a09      	ldr	r2, [pc, #36]	; (8009dd0 <HAL_RCC_ClockConfig+0x314>)
 8009dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009dae:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <HAL_RCC_ClockConfig+0x318>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fa fe9c 	bl	8004af0 <HAL_InitTick>

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	0801394c 	.word	0x0801394c
 8009dc8:	40023800 	.word	0x40023800
 8009dcc:	08014044 	.word	0x08014044
 8009dd0:	200000d8 	.word	0x200000d8
 8009dd4:	200000dc 	.word	0x200000dc

08009dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	607b      	str	r3, [r7, #4]
 8009de4:	2300      	movs	r3, #0
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	2300      	movs	r3, #0
 8009dea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009df0:	4b67      	ldr	r3, [pc, #412]	; (8009f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f003 030c 	and.w	r3, r3, #12
 8009df8:	2b08      	cmp	r3, #8
 8009dfa:	d00d      	beq.n	8009e18 <HAL_RCC_GetSysClockFreq+0x40>
 8009dfc:	2b08      	cmp	r3, #8
 8009dfe:	f200 80bd 	bhi.w	8009f7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <HAL_RCC_GetSysClockFreq+0x34>
 8009e06:	2b04      	cmp	r3, #4
 8009e08:	d003      	beq.n	8009e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8009e0a:	e0b7      	b.n	8009f7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e0c:	4b61      	ldr	r3, [pc, #388]	; (8009f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009e0e:	60bb      	str	r3, [r7, #8]
       break;
 8009e10:	e0b7      	b.n	8009f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e12:	4b61      	ldr	r3, [pc, #388]	; (8009f98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009e14:	60bb      	str	r3, [r7, #8]
      break;
 8009e16:	e0b4      	b.n	8009f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e18:	4b5d      	ldr	r3, [pc, #372]	; (8009f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e22:	4b5b      	ldr	r3, [pc, #364]	; (8009f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d04d      	beq.n	8009eca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e2e:	4b58      	ldr	r3, [pc, #352]	; (8009f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	099b      	lsrs	r3, r3, #6
 8009e34:	461a      	mov	r2, r3
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009e3e:	f04f 0100 	mov.w	r1, #0
 8009e42:	ea02 0800 	and.w	r8, r2, r0
 8009e46:	ea03 0901 	and.w	r9, r3, r1
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4649      	mov	r1, r9
 8009e4e:	f04f 0200 	mov.w	r2, #0
 8009e52:	f04f 0300 	mov.w	r3, #0
 8009e56:	014b      	lsls	r3, r1, #5
 8009e58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009e5c:	0142      	lsls	r2, r0, #5
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	ebb0 0008 	subs.w	r0, r0, r8
 8009e66:	eb61 0109 	sbc.w	r1, r1, r9
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	f04f 0300 	mov.w	r3, #0
 8009e72:	018b      	lsls	r3, r1, #6
 8009e74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009e78:	0182      	lsls	r2, r0, #6
 8009e7a:	1a12      	subs	r2, r2, r0
 8009e7c:	eb63 0301 	sbc.w	r3, r3, r1
 8009e80:	f04f 0000 	mov.w	r0, #0
 8009e84:	f04f 0100 	mov.w	r1, #0
 8009e88:	00d9      	lsls	r1, r3, #3
 8009e8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e8e:	00d0      	lsls	r0, r2, #3
 8009e90:	4602      	mov	r2, r0
 8009e92:	460b      	mov	r3, r1
 8009e94:	eb12 0208 	adds.w	r2, r2, r8
 8009e98:	eb43 0309 	adc.w	r3, r3, r9
 8009e9c:	f04f 0000 	mov.w	r0, #0
 8009ea0:	f04f 0100 	mov.w	r1, #0
 8009ea4:	0259      	lsls	r1, r3, #9
 8009ea6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009eaa:	0250      	lsls	r0, r2, #9
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f04f 0300 	mov.w	r3, #0
 8009ebc:	f7f6 fecc 	bl	8000c58 <__aeabi_uldivmod>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e04a      	b.n	8009f60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009eca:	4b31      	ldr	r3, [pc, #196]	; (8009f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	099b      	lsrs	r3, r3, #6
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009eda:	f04f 0100 	mov.w	r1, #0
 8009ede:	ea02 0400 	and.w	r4, r2, r0
 8009ee2:	ea03 0501 	and.w	r5, r3, r1
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	4629      	mov	r1, r5
 8009eea:	f04f 0200 	mov.w	r2, #0
 8009eee:	f04f 0300 	mov.w	r3, #0
 8009ef2:	014b      	lsls	r3, r1, #5
 8009ef4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009ef8:	0142      	lsls	r2, r0, #5
 8009efa:	4610      	mov	r0, r2
 8009efc:	4619      	mov	r1, r3
 8009efe:	1b00      	subs	r0, r0, r4
 8009f00:	eb61 0105 	sbc.w	r1, r1, r5
 8009f04:	f04f 0200 	mov.w	r2, #0
 8009f08:	f04f 0300 	mov.w	r3, #0
 8009f0c:	018b      	lsls	r3, r1, #6
 8009f0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009f12:	0182      	lsls	r2, r0, #6
 8009f14:	1a12      	subs	r2, r2, r0
 8009f16:	eb63 0301 	sbc.w	r3, r3, r1
 8009f1a:	f04f 0000 	mov.w	r0, #0
 8009f1e:	f04f 0100 	mov.w	r1, #0
 8009f22:	00d9      	lsls	r1, r3, #3
 8009f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f28:	00d0      	lsls	r0, r2, #3
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	1912      	adds	r2, r2, r4
 8009f30:	eb45 0303 	adc.w	r3, r5, r3
 8009f34:	f04f 0000 	mov.w	r0, #0
 8009f38:	f04f 0100 	mov.w	r1, #0
 8009f3c:	0299      	lsls	r1, r3, #10
 8009f3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009f42:	0290      	lsls	r0, r2, #10
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	f04f 0300 	mov.w	r3, #0
 8009f54:	f7f6 fe80 	bl	8000c58 <__aeabi_uldivmod>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009f60:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f78:	60bb      	str	r3, [r7, #8]
      break;
 8009f7a:	e002      	b.n	8009f82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009f7c:	4b05      	ldr	r3, [pc, #20]	; (8009f94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009f7e:	60bb      	str	r3, [r7, #8]
      break;
 8009f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009f82:	68bb      	ldr	r3, [r7, #8]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009f8e:	bf00      	nop
 8009f90:	40023800 	.word	0x40023800
 8009f94:	00f42400 	.word	0x00f42400
 8009f98:	007a1200 	.word	0x007a1200

08009f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fa0:	4b03      	ldr	r3, [pc, #12]	; (8009fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr
 8009fae:	bf00      	nop
 8009fb0:	200000d8 	.word	0x200000d8

08009fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009fb8:	f7ff fff0 	bl	8009f9c <HAL_RCC_GetHCLKFreq>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	0a9b      	lsrs	r3, r3, #10
 8009fc4:	f003 0307 	and.w	r3, r3, #7
 8009fc8:	4903      	ldr	r1, [pc, #12]	; (8009fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009fca:	5ccb      	ldrb	r3, [r1, r3]
 8009fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	08014054 	.word	0x08014054

08009fdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e18c      	b.n	800a308 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a75      	ldr	r2, [pc, #468]	; (800a1c8 <HAL_SPI_Init+0x1ec>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d018      	beq.n	800a02a <HAL_SPI_Init+0x4e>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a73      	ldr	r2, [pc, #460]	; (800a1cc <HAL_SPI_Init+0x1f0>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d013      	beq.n	800a02a <HAL_SPI_Init+0x4e>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a72      	ldr	r2, [pc, #456]	; (800a1d0 <HAL_SPI_Init+0x1f4>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d00e      	beq.n	800a02a <HAL_SPI_Init+0x4e>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a70      	ldr	r2, [pc, #448]	; (800a1d4 <HAL_SPI_Init+0x1f8>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d009      	beq.n	800a02a <HAL_SPI_Init+0x4e>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a6f      	ldr	r2, [pc, #444]	; (800a1d8 <HAL_SPI_Init+0x1fc>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d004      	beq.n	800a02a <HAL_SPI_Init+0x4e>
 800a020:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800a024:	486d      	ldr	r0, [pc, #436]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a026:	f7f9 fc6c 	bl	8003902 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d009      	beq.n	800a046 <HAL_SPI_Init+0x6a>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a03a:	d004      	beq.n	800a046 <HAL_SPI_Init+0x6a>
 800a03c:	f240 1143 	movw	r1, #323	; 0x143
 800a040:	4866      	ldr	r0, [pc, #408]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a042:	f7f9 fc5e 	bl	8003902 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00e      	beq.n	800a06c <HAL_SPI_Init+0x90>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a056:	d009      	beq.n	800a06c <HAL_SPI_Init+0x90>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a060:	d004      	beq.n	800a06c <HAL_SPI_Init+0x90>
 800a062:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a066:	485d      	ldr	r0, [pc, #372]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a068:	f7f9 fc4b 	bl	8003902 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a074:	d008      	beq.n	800a088 <HAL_SPI_Init+0xac>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68db      	ldr	r3, [r3, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <HAL_SPI_Init+0xac>
 800a07e:	f240 1145 	movw	r1, #325	; 0x145
 800a082:	4856      	ldr	r0, [pc, #344]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a084:	f7f9 fc3d 	bl	8003902 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	699b      	ldr	r3, [r3, #24]
 800a08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a090:	d00d      	beq.n	800a0ae <HAL_SPI_Init+0xd2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <HAL_SPI_Init+0xd2>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0a2:	d004      	beq.n	800a0ae <HAL_SPI_Init+0xd2>
 800a0a4:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800a0a8:	484c      	ldr	r0, [pc, #304]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a0aa:	f7f9 fc2a 	bl	8003902 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d020      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	2b08      	cmp	r3, #8
 800a0bc:	d01c      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	2b10      	cmp	r3, #16
 800a0c4:	d018      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	2b18      	cmp	r3, #24
 800a0cc:	d014      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	2b20      	cmp	r3, #32
 800a0d4:	d010      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	2b28      	cmp	r3, #40	; 0x28
 800a0dc:	d00c      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	69db      	ldr	r3, [r3, #28]
 800a0e2:	2b30      	cmp	r3, #48	; 0x30
 800a0e4:	d008      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	2b38      	cmp	r3, #56	; 0x38
 800a0ec:	d004      	beq.n	800a0f8 <HAL_SPI_Init+0x11c>
 800a0ee:	f240 1147 	movw	r1, #327	; 0x147
 800a0f2:	483a      	ldr	r0, [pc, #232]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a0f4:	f7f9 fc05 	bl	8003902 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a1b      	ldr	r3, [r3, #32]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d008      	beq.n	800a112 <HAL_SPI_Init+0x136>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	2b80      	cmp	r3, #128	; 0x80
 800a106:	d004      	beq.n	800a112 <HAL_SPI_Init+0x136>
 800a108:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800a10c:	4833      	ldr	r0, [pc, #204]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a10e:	f7f9 fbf8 	bl	8003902 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d008      	beq.n	800a12c <HAL_SPI_Init+0x150>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11e:	2b10      	cmp	r3, #16
 800a120:	d004      	beq.n	800a12c <HAL_SPI_Init+0x150>
 800a122:	f240 1149 	movw	r1, #329	; 0x149
 800a126:	482d      	ldr	r0, [pc, #180]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a128:	f7f9 fbeb 	bl	8003902 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b00      	cmp	r3, #0
 800a132:	d155      	bne.n	800a1e0 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d008      	beq.n	800a14e <HAL_SPI_Init+0x172>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d004      	beq.n	800a14e <HAL_SPI_Init+0x172>
 800a144:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800a148:	4824      	ldr	r0, [pc, #144]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a14a:	f7f9 fbda 	bl	8003902 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d008      	beq.n	800a168 <HAL_SPI_Init+0x18c>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d004      	beq.n	800a168 <HAL_SPI_Init+0x18c>
 800a15e:	f240 114d 	movw	r1, #333	; 0x14d
 800a162:	481e      	ldr	r0, [pc, #120]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a164:	f7f9 fbcd 	bl	8003902 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a170:	d125      	bne.n	800a1be <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d05d      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d059      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	2b10      	cmp	r3, #16
 800a188:	d055      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	69db      	ldr	r3, [r3, #28]
 800a18e:	2b18      	cmp	r3, #24
 800a190:	d051      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	2b20      	cmp	r3, #32
 800a198:	d04d      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	2b28      	cmp	r3, #40	; 0x28
 800a1a0:	d049      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	2b30      	cmp	r3, #48	; 0x30
 800a1a8:	d045      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	2b38      	cmp	r3, #56	; 0x38
 800a1b0:	d041      	beq.n	800a236 <HAL_SPI_Init+0x25a>
 800a1b2:	f240 1151 	movw	r1, #337	; 0x151
 800a1b6:	4809      	ldr	r0, [pc, #36]	; (800a1dc <HAL_SPI_Init+0x200>)
 800a1b8:	f7f9 fba3 	bl	8003902 <assert_failed>
 800a1bc:	e03b      	b.n	800a236 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	61da      	str	r2, [r3, #28]
 800a1c4:	e037      	b.n	800a236 <HAL_SPI_Init+0x25a>
 800a1c6:	bf00      	nop
 800a1c8:	40013000 	.word	0x40013000
 800a1cc:	40003800 	.word	0x40003800
 800a1d0:	40003c00 	.word	0x40003c00
 800a1d4:	40013400 	.word	0x40013400
 800a1d8:	40015000 	.word	0x40015000
 800a1dc:	08013984 	.word	0x08013984
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	69db      	ldr	r3, [r3, #28]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d020      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	69db      	ldr	r3, [r3, #28]
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d01c      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	d018      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	2b18      	cmp	r3, #24
 800a1fe:	d014      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	2b20      	cmp	r3, #32
 800a206:	d010      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	2b28      	cmp	r3, #40	; 0x28
 800a20e:	d00c      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	2b30      	cmp	r3, #48	; 0x30
 800a216:	d008      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	2b38      	cmp	r3, #56	; 0x38
 800a21e:	d004      	beq.n	800a22a <HAL_SPI_Init+0x24e>
 800a220:	f240 115b 	movw	r1, #347	; 0x15b
 800a224:	483a      	ldr	r0, [pc, #232]	; (800a310 <HAL_SPI_Init+0x334>)
 800a226:	f7f9 fb6c 	bl	8003902 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d106      	bne.n	800a256 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7f9 fbcd 	bl	80039f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2202      	movs	r2, #2
 800a25a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a26c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a27e:	431a      	orrs	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a288:	431a      	orrs	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	431a      	orrs	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ba:	ea42 0103 	orr.w	r1, r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	0c1b      	lsrs	r3, r3, #16
 800a2d4:	f003 0104 	and.w	r1, r3, #4
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	f003 0210 	and.w	r2, r3, #16
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69da      	ldr	r2, [r3, #28]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	08013984 	.word	0x08013984

0800a314 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d101      	bne.n	800a326 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e038      	b.n	800a398 <HAL_SPI_DeInit+0x84>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a1d      	ldr	r2, [pc, #116]	; (800a3a0 <HAL_SPI_DeInit+0x8c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d018      	beq.n	800a362 <HAL_SPI_DeInit+0x4e>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a1b      	ldr	r2, [pc, #108]	; (800a3a4 <HAL_SPI_DeInit+0x90>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d013      	beq.n	800a362 <HAL_SPI_DeInit+0x4e>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a1a      	ldr	r2, [pc, #104]	; (800a3a8 <HAL_SPI_DeInit+0x94>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00e      	beq.n	800a362 <HAL_SPI_DeInit+0x4e>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a18      	ldr	r2, [pc, #96]	; (800a3ac <HAL_SPI_DeInit+0x98>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d009      	beq.n	800a362 <HAL_SPI_DeInit+0x4e>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a17      	ldr	r2, [pc, #92]	; (800a3b0 <HAL_SPI_DeInit+0x9c>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d004      	beq.n	800a362 <HAL_SPI_DeInit+0x4e>
 800a358:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800a35c:	4815      	ldr	r0, [pc, #84]	; (800a3b4 <HAL_SPI_DeInit+0xa0>)
 800a35e:	f7f9 fad0 	bl	8003902 <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2202      	movs	r2, #2
 800a366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a378:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7f9 fbb6 	bl	8003aec <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	40013000 	.word	0x40013000
 800a3a4:	40003800 	.word	0x40003800
 800a3a8:	40003c00 	.word	0x40003c00
 800a3ac:	40013400 	.word	0x40013400
 800a3b0:	40015000 	.word	0x40015000
 800a3b4:	08013984 	.word	0x08013984

0800a3b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d009      	beq.n	800a3e8 <HAL_SPI_Transmit+0x30>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3dc:	d004      	beq.n	800a3e8 <HAL_SPI_Transmit+0x30>
 800a3de:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e2:	4893      	ldr	r0, [pc, #588]	; (800a630 <HAL_SPI_Transmit+0x278>)
 800a3e4:	f7f9 fa8d 	bl	8003902 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_SPI_Transmit+0x3e>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e128      	b.n	800a648 <HAL_SPI_Transmit+0x290>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3fe:	f7fa fbbb 	bl	8004b78 <HAL_GetTick>
 800a402:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a404:	88fb      	ldrh	r3, [r7, #6]
 800a406:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	2b01      	cmp	r3, #1
 800a412:	d002      	beq.n	800a41a <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800a414:	2302      	movs	r3, #2
 800a416:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a418:	e10d      	b.n	800a636 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <HAL_SPI_Transmit+0x6e>
 800a420:	88fb      	ldrh	r3, [r7, #6]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a42a:	e104      	b.n	800a636 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2203      	movs	r2, #3
 800a430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	88fa      	ldrh	r2, [r7, #6]
 800a444:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	88fa      	ldrh	r2, [r7, #6]
 800a44a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a472:	d10f      	bne.n	800a494 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a49e:	2b40      	cmp	r3, #64	; 0x40
 800a4a0:	d007      	beq.n	800a4b2 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ba:	d14b      	bne.n	800a554 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <HAL_SPI_Transmit+0x112>
 800a4c4:	8afb      	ldrh	r3, [r7, #22]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d13e      	bne.n	800a548 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	881a      	ldrh	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4da:	1c9a      	adds	r2, r3, #2
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a4ee:	e02b      	b.n	800a548 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f003 0302 	and.w	r3, r3, #2
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d112      	bne.n	800a524 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a502:	881a      	ldrh	r2, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	1c9a      	adds	r2, r3, #2
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a518:	b29b      	uxth	r3, r3
 800a51a:	3b01      	subs	r3, #1
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	86da      	strh	r2, [r3, #54]	; 0x36
 800a522:	e011      	b.n	800a548 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a524:	f7fa fb28 	bl	8004b78 <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d803      	bhi.n	800a53c <HAL_SPI_Transmit+0x184>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a53a:	d102      	bne.n	800a542 <HAL_SPI_Transmit+0x18a>
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d102      	bne.n	800a548 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a546:	e076      	b.n	800a636 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1ce      	bne.n	800a4f0 <HAL_SPI_Transmit+0x138>
 800a552:	e04c      	b.n	800a5ee <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <HAL_SPI_Transmit+0x1aa>
 800a55c:	8afb      	ldrh	r3, [r7, #22]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d140      	bne.n	800a5e4 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	330c      	adds	r3, #12
 800a56c:	7812      	ldrb	r2, [r2, #0]
 800a56e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a574:	1c5a      	adds	r2, r3, #1
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a57e:	b29b      	uxth	r3, r3
 800a580:	3b01      	subs	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a588:	e02c      	b.n	800a5e4 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b02      	cmp	r3, #2
 800a596:	d113      	bne.n	800a5c0 <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	330c      	adds	r3, #12
 800a5a2:	7812      	ldrb	r2, [r2, #0]
 800a5a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	86da      	strh	r2, [r3, #54]	; 0x36
 800a5be:	e011      	b.n	800a5e4 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5c0:	f7fa fada 	bl	8004b78 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d803      	bhi.n	800a5d8 <HAL_SPI_Transmit+0x220>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5d6:	d102      	bne.n	800a5de <HAL_SPI_Transmit+0x226>
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d102      	bne.n	800a5e4 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a5e2:	e028      	b.n	800a636 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d1cd      	bne.n	800a58a <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fa70 	bl	800aad8 <SPI_EndRxTxTransaction>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2220      	movs	r2, #32
 800a602:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a60c:	2300      	movs	r3, #0
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	613b      	str	r3, [r7, #16]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	613b      	str	r3, [r7, #16]
 800a620:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a626:	2b00      	cmp	r3, #0
 800a628:	d004      	beq.n	800a634 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	77fb      	strb	r3, [r7, #31]
 800a62e:	e002      	b.n	800a636 <HAL_SPI_Transmit+0x27e>
 800a630:	08013984 	.word	0x08013984
  }

error:
 800a634:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a646:	7ffb      	ldrb	r3, [r7, #31]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3720      	adds	r7, #32
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b08c      	sub	sp, #48	; 0x30
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a65e:	2301      	movs	r3, #1
 800a660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a662:	2300      	movs	r3, #0
 800a664:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d004      	beq.n	800a67a <HAL_SPI_TransmitReceive+0x2a>
 800a670:	f240 417e 	movw	r1, #1150	; 0x47e
 800a674:	4884      	ldr	r0, [pc, #528]	; (800a888 <HAL_SPI_TransmitReceive+0x238>)
 800a676:	f7f9 f944 	bl	8003902 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a680:	2b01      	cmp	r3, #1
 800a682:	d101      	bne.n	800a688 <HAL_SPI_TransmitReceive+0x38>
 800a684:	2302      	movs	r3, #2
 800a686:	e18d      	b.n	800a9a4 <HAL_SPI_TransmitReceive+0x354>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a690:	f7fa fa72 	bl	8004b78 <HAL_GetTick>
 800a694:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a69c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a6a6:	887b      	ldrh	r3, [r7, #2]
 800a6a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a6aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d00f      	beq.n	800a6d2 <HAL_SPI_TransmitReceive+0x82>
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6b8:	d107      	bne.n	800a6ca <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d103      	bne.n	800a6ca <HAL_SPI_TransmitReceive+0x7a>
 800a6c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d003      	beq.n	800a6d2 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a6d0:	e15e      	b.n	800a990 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d005      	beq.n	800a6e4 <HAL_SPI_TransmitReceive+0x94>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d002      	beq.n	800a6e4 <HAL_SPI_TransmitReceive+0x94>
 800a6de:	887b      	ldrh	r3, [r7, #2]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d103      	bne.n	800a6ec <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a6ea:	e151      	b.n	800a990 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d003      	beq.n	800a700 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2205      	movs	r2, #5
 800a6fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	887a      	ldrh	r2, [r7, #2]
 800a710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	887a      	ldrh	r2, [r7, #2]
 800a716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	887a      	ldrh	r2, [r7, #2]
 800a722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	887a      	ldrh	r2, [r7, #2]
 800a728:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a740:	2b40      	cmp	r3, #64	; 0x40
 800a742:	d007      	beq.n	800a754 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a75c:	d178      	bne.n	800a850 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d002      	beq.n	800a76c <HAL_SPI_TransmitReceive+0x11c>
 800a766:	8b7b      	ldrh	r3, [r7, #26]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d166      	bne.n	800a83a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a770:	881a      	ldrh	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	1c9a      	adds	r2, r3, #2
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a786:	b29b      	uxth	r3, r3
 800a788:	3b01      	subs	r3, #1
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a790:	e053      	b.n	800a83a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f003 0302 	and.w	r3, r3, #2
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d11b      	bne.n	800a7d8 <HAL_SPI_TransmitReceive+0x188>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d016      	beq.n	800a7d8 <HAL_SPI_TransmitReceive+0x188>
 800a7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d113      	bne.n	800a7d8 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b4:	881a      	ldrh	r2, [r3, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c0:	1c9a      	adds	r2, r3, #2
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d119      	bne.n	800a81a <HAL_SPI_TransmitReceive+0x1ca>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d014      	beq.n	800a81a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fa:	b292      	uxth	r2, r2
 800a7fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	1c9a      	adds	r2, r3, #2
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	3b01      	subs	r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a816:	2301      	movs	r3, #1
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a81a:	f7fa f9ad 	bl	8004b78 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a826:	429a      	cmp	r2, r3
 800a828:	d807      	bhi.n	800a83a <HAL_SPI_TransmitReceive+0x1ea>
 800a82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a830:	d003      	beq.n	800a83a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a838:	e0aa      	b.n	800a990 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a83e:	b29b      	uxth	r3, r3
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1a6      	bne.n	800a792 <HAL_SPI_TransmitReceive+0x142>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a848:	b29b      	uxth	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1a1      	bne.n	800a792 <HAL_SPI_TransmitReceive+0x142>
 800a84e:	e07f      	b.n	800a950 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <HAL_SPI_TransmitReceive+0x20e>
 800a858:	8b7b      	ldrh	r3, [r7, #26]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d16e      	bne.n	800a93c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	330c      	adds	r3, #12
 800a868:	7812      	ldrb	r2, [r2, #0]
 800a86a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a870:	1c5a      	adds	r2, r3, #1
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	3b01      	subs	r3, #1
 800a87e:	b29a      	uxth	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a884:	e05a      	b.n	800a93c <HAL_SPI_TransmitReceive+0x2ec>
 800a886:	bf00      	nop
 800a888:	08013984 	.word	0x08013984
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b02      	cmp	r3, #2
 800a898:	d11c      	bne.n	800a8d4 <HAL_SPI_TransmitReceive+0x284>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d017      	beq.n	800a8d4 <HAL_SPI_TransmitReceive+0x284>
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d114      	bne.n	800a8d4 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	330c      	adds	r3, #12
 800a8b4:	7812      	ldrb	r2, [r2, #0]
 800a8b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d119      	bne.n	800a916 <HAL_SPI_TransmitReceive+0x2c6>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d014      	beq.n	800a916 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f6:	b2d2      	uxtb	r2, r2
 800a8f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a908:	b29b      	uxth	r3, r3
 800a90a:	3b01      	subs	r3, #1
 800a90c:	b29a      	uxth	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a912:	2301      	movs	r3, #1
 800a914:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a916:	f7fa f92f 	bl	8004b78 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a922:	429a      	cmp	r2, r3
 800a924:	d803      	bhi.n	800a92e <HAL_SPI_TransmitReceive+0x2de>
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a92c:	d102      	bne.n	800a934 <HAL_SPI_TransmitReceive+0x2e4>
 800a92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a930:	2b00      	cmp	r3, #0
 800a932:	d103      	bne.n	800a93c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800a934:	2303      	movs	r3, #3
 800a936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a93a:	e029      	b.n	800a990 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a940:	b29b      	uxth	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1a2      	bne.n	800a88c <HAL_SPI_TransmitReceive+0x23c>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d19d      	bne.n	800a88c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 f8bf 	bl	800aad8 <SPI_EndRxTxTransaction>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d006      	beq.n	800a96e <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2220      	movs	r2, #32
 800a96a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a96c:	e010      	b.n	800a990 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d10b      	bne.n	800a98e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a976:	2300      	movs	r3, #0
 800a978:	617b      	str	r3, [r7, #20]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	617b      	str	r3, [r7, #20]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	e000      	b.n	800a990 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800a98e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a9a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3730      	adds	r7, #48	; 0x30
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9ba:	b2db      	uxtb	r3, r3
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a9d8:	f7fa f8ce 	bl	8004b78 <HAL_GetTick>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e0:	1a9b      	subs	r3, r3, r2
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a9e8:	f7fa f8c6 	bl	8004b78 <HAL_GetTick>
 800a9ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a9ee:	4b39      	ldr	r3, [pc, #228]	; (800aad4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	015b      	lsls	r3, r3, #5
 800a9f4:	0d1b      	lsrs	r3, r3, #20
 800a9f6:	69fa      	ldr	r2, [r7, #28]
 800a9f8:	fb02 f303 	mul.w	r3, r2, r3
 800a9fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a9fe:	e054      	b.n	800aaaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa06:	d050      	beq.n	800aaaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aa08:	f7fa f8b6 	bl	8004b78 <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	69fa      	ldr	r2, [r7, #28]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d902      	bls.n	800aa1e <SPI_WaitFlagStateUntilTimeout+0x56>
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d13d      	bne.n	800aa9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa36:	d111      	bne.n	800aa5c <SPI_WaitFlagStateUntilTimeout+0x94>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa40:	d004      	beq.n	800aa4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa4a:	d107      	bne.n	800aa5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa64:	d10f      	bne.n	800aa86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aa96:	2303      	movs	r3, #3
 800aa98:	e017      	b.n	800aaca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	4013      	ands	r3, r2
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	bf0c      	ite	eq
 800aaba:	2301      	moveq	r3, #1
 800aabc:	2300      	movne	r3, #0
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	461a      	mov	r2, r3
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d19b      	bne.n	800aa00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3720      	adds	r7, #32
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	200000d8 	.word	0x200000d8

0800aad8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af02      	add	r7, sp, #8
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aae4:	4b1b      	ldr	r3, [pc, #108]	; (800ab54 <SPI_EndRxTxTransaction+0x7c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a1b      	ldr	r2, [pc, #108]	; (800ab58 <SPI_EndRxTxTransaction+0x80>)
 800aaea:	fba2 2303 	umull	r2, r3, r2, r3
 800aaee:	0d5b      	lsrs	r3, r3, #21
 800aaf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aaf4:	fb02 f303 	mul.w	r3, r2, r3
 800aaf8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab02:	d112      	bne.n	800ab2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2180      	movs	r1, #128	; 0x80
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff ff5a 	bl	800a9c8 <SPI_WaitFlagStateUntilTimeout>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d016      	beq.n	800ab48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab1e:	f043 0220 	orr.w	r2, r3, #32
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e00f      	b.n	800ab4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00a      	beq.n	800ab46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab40:	2b80      	cmp	r3, #128	; 0x80
 800ab42:	d0f2      	beq.n	800ab2a <SPI_EndRxTxTransaction+0x52>
 800ab44:	e000      	b.n	800ab48 <SPI_EndRxTxTransaction+0x70>
        break;
 800ab46:	bf00      	nop
  }

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	200000d8 	.word	0x200000d8
 800ab58:	165e9f81 	.word	0x165e9f81

0800ab5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e0a7      	b.n	800acbe <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a55      	ldr	r2, [pc, #340]	; (800acc8 <HAL_TIM_Base_Init+0x16c>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d027      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab80:	d022      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a51      	ldr	r2, [pc, #324]	; (800accc <HAL_TIM_Base_Init+0x170>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d01d      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a4f      	ldr	r2, [pc, #316]	; (800acd0 <HAL_TIM_Base_Init+0x174>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d018      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a4e      	ldr	r2, [pc, #312]	; (800acd4 <HAL_TIM_Base_Init+0x178>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d013      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a4c      	ldr	r2, [pc, #304]	; (800acd8 <HAL_TIM_Base_Init+0x17c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00e      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a4b      	ldr	r2, [pc, #300]	; (800acdc <HAL_TIM_Base_Init+0x180>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d009      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a49      	ldr	r2, [pc, #292]	; (800ace0 <HAL_TIM_Base_Init+0x184>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d004      	beq.n	800abc8 <HAL_TIM_Base_Init+0x6c>
 800abbe:	f240 1113 	movw	r1, #275	; 0x113
 800abc2:	4848      	ldr	r0, [pc, #288]	; (800ace4 <HAL_TIM_Base_Init+0x188>)
 800abc4:	f7f8 fe9d 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d014      	beq.n	800abfa <HAL_TIM_Base_Init+0x9e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	2b10      	cmp	r3, #16
 800abd6:	d010      	beq.n	800abfa <HAL_TIM_Base_Init+0x9e>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	2b20      	cmp	r3, #32
 800abde:	d00c      	beq.n	800abfa <HAL_TIM_Base_Init+0x9e>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	2b40      	cmp	r3, #64	; 0x40
 800abe6:	d008      	beq.n	800abfa <HAL_TIM_Base_Init+0x9e>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	2b60      	cmp	r3, #96	; 0x60
 800abee:	d004      	beq.n	800abfa <HAL_TIM_Base_Init+0x9e>
 800abf0:	f44f 718a 	mov.w	r1, #276	; 0x114
 800abf4:	483b      	ldr	r0, [pc, #236]	; (800ace4 <HAL_TIM_Base_Init+0x188>)
 800abf6:	f7f8 fe84 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00e      	beq.n	800ac20 <HAL_TIM_Base_Init+0xc4>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac0a:	d009      	beq.n	800ac20 <HAL_TIM_Base_Init+0xc4>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac14:	d004      	beq.n	800ac20 <HAL_TIM_Base_Init+0xc4>
 800ac16:	f240 1115 	movw	r1, #277	; 0x115
 800ac1a:	4832      	ldr	r0, [pc, #200]	; (800ace4 <HAL_TIM_Base_Init+0x188>)
 800ac1c:	f7f8 fe71 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	699b      	ldr	r3, [r3, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d008      	beq.n	800ac3a <HAL_TIM_Base_Init+0xde>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	699b      	ldr	r3, [r3, #24]
 800ac2c:	2b80      	cmp	r3, #128	; 0x80
 800ac2e:	d004      	beq.n	800ac3a <HAL_TIM_Base_Init+0xde>
 800ac30:	f44f 718b 	mov.w	r1, #278	; 0x116
 800ac34:	482b      	ldr	r0, [pc, #172]	; (800ace4 <HAL_TIM_Base_Init+0x188>)
 800ac36:	f7f8 fe64 	bl	8003902 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d106      	bne.n	800ac54 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7f9 fe26 	bl	80048a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f001 fe9a 	bl	800c9a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	40010000 	.word	0x40010000
 800accc:	40000400 	.word	0x40000400
 800acd0:	40000800 	.word	0x40000800
 800acd4:	40000c00 	.word	0x40000c00
 800acd8:	40014000 	.word	0x40014000
 800acdc:	40014400 	.word	0x40014400
 800ace0:	40014800 	.word	0x40014800
 800ace4:	080139bc 	.word	0x080139bc

0800ace8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a25      	ldr	r2, [pc, #148]	; (800ad8c <HAL_TIM_Base_Stop+0xa4>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d027      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad02:	d022      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a21      	ldr	r2, [pc, #132]	; (800ad90 <HAL_TIM_Base_Stop+0xa8>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d01d      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a20      	ldr	r2, [pc, #128]	; (800ad94 <HAL_TIM_Base_Stop+0xac>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d018      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a1e      	ldr	r2, [pc, #120]	; (800ad98 <HAL_TIM_Base_Stop+0xb0>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d013      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a1d      	ldr	r2, [pc, #116]	; (800ad9c <HAL_TIM_Base_Stop+0xb4>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00e      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a1b      	ldr	r2, [pc, #108]	; (800ada0 <HAL_TIM_Base_Stop+0xb8>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d009      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a1a      	ldr	r2, [pc, #104]	; (800ada4 <HAL_TIM_Base_Stop+0xbc>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d004      	beq.n	800ad4a <HAL_TIM_Base_Stop+0x62>
 800ad40:	f240 11b9 	movw	r1, #441	; 0x1b9
 800ad44:	4818      	ldr	r0, [pc, #96]	; (800ada8 <HAL_TIM_Base_Stop+0xc0>)
 800ad46:	f7f8 fddc 	bl	8003902 <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6a1a      	ldr	r2, [r3, #32]
 800ad50:	f241 1311 	movw	r3, #4369	; 0x1111
 800ad54:	4013      	ands	r3, r2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10f      	bne.n	800ad7a <HAL_TIM_Base_Stop+0x92>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6a1a      	ldr	r2, [r3, #32]
 800ad60:	f240 4344 	movw	r3, #1092	; 0x444
 800ad64:	4013      	ands	r3, r2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d107      	bne.n	800ad7a <HAL_TIM_Base_Stop+0x92>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0201 	bic.w	r2, r2, #1
 800ad78:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	40010000 	.word	0x40010000
 800ad90:	40000400 	.word	0x40000400
 800ad94:	40000800 	.word	0x40000800
 800ad98:	40000c00 	.word	0x40000c00
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	40014400 	.word	0x40014400
 800ada4:	40014800 	.word	0x40014800
 800ada8:	080139bc 	.word	0x080139bc

0800adac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a3d      	ldr	r2, [pc, #244]	; (800aeb0 <HAL_TIM_Base_Start_IT+0x104>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d027      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc6:	d022      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a39      	ldr	r2, [pc, #228]	; (800aeb4 <HAL_TIM_Base_Start_IT+0x108>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d01d      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a38      	ldr	r2, [pc, #224]	; (800aeb8 <HAL_TIM_Base_Start_IT+0x10c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d018      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a36      	ldr	r2, [pc, #216]	; (800aebc <HAL_TIM_Base_Start_IT+0x110>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d013      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a35      	ldr	r2, [pc, #212]	; (800aec0 <HAL_TIM_Base_Start_IT+0x114>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00e      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a33      	ldr	r2, [pc, #204]	; (800aec4 <HAL_TIM_Base_Start_IT+0x118>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d009      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a32      	ldr	r2, [pc, #200]	; (800aec8 <HAL_TIM_Base_Start_IT+0x11c>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d004      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x62>
 800ae04:	f240 11cf 	movw	r1, #463	; 0x1cf
 800ae08:	4830      	ldr	r0, [pc, #192]	; (800aecc <HAL_TIM_Base_Start_IT+0x120>)
 800ae0a:	f7f8 fd7a 	bl	8003902 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d001      	beq.n	800ae1e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e044      	b.n	800aea8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2202      	movs	r2, #2
 800ae22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f042 0201 	orr.w	r2, r2, #1
 800ae34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a1d      	ldr	r2, [pc, #116]	; (800aeb0 <HAL_TIM_Base_Start_IT+0x104>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d018      	beq.n	800ae72 <HAL_TIM_Base_Start_IT+0xc6>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae48:	d013      	beq.n	800ae72 <HAL_TIM_Base_Start_IT+0xc6>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a19      	ldr	r2, [pc, #100]	; (800aeb4 <HAL_TIM_Base_Start_IT+0x108>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d00e      	beq.n	800ae72 <HAL_TIM_Base_Start_IT+0xc6>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a17      	ldr	r2, [pc, #92]	; (800aeb8 <HAL_TIM_Base_Start_IT+0x10c>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d009      	beq.n	800ae72 <HAL_TIM_Base_Start_IT+0xc6>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a16      	ldr	r2, [pc, #88]	; (800aebc <HAL_TIM_Base_Start_IT+0x110>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d004      	beq.n	800ae72 <HAL_TIM_Base_Start_IT+0xc6>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a14      	ldr	r2, [pc, #80]	; (800aec0 <HAL_TIM_Base_Start_IT+0x114>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d111      	bne.n	800ae96 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f003 0307 	and.w	r3, r3, #7
 800ae7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b06      	cmp	r3, #6
 800ae82:	d010      	beq.n	800aea6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f042 0201 	orr.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae94:	e007      	b.n	800aea6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f042 0201 	orr.w	r2, r2, #1
 800aea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	40010000 	.word	0x40010000
 800aeb4:	40000400 	.word	0x40000400
 800aeb8:	40000800 	.word	0x40000800
 800aebc:	40000c00 	.word	0x40000c00
 800aec0:	40014000 	.word	0x40014000
 800aec4:	40014400 	.word	0x40014400
 800aec8:	40014800 	.word	0x40014800
 800aecc:	080139bc 	.word	0x080139bc

0800aed0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e0a7      	b.n	800b032 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a55      	ldr	r2, [pc, #340]	; (800b03c <HAL_TIM_PWM_Init+0x16c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d027      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef4:	d022      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a51      	ldr	r2, [pc, #324]	; (800b040 <HAL_TIM_PWM_Init+0x170>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d01d      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a4f      	ldr	r2, [pc, #316]	; (800b044 <HAL_TIM_PWM_Init+0x174>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d018      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a4e      	ldr	r2, [pc, #312]	; (800b048 <HAL_TIM_PWM_Init+0x178>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d013      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a4c      	ldr	r2, [pc, #304]	; (800b04c <HAL_TIM_PWM_Init+0x17c>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d00e      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a4b      	ldr	r2, [pc, #300]	; (800b050 <HAL_TIM_PWM_Init+0x180>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d009      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a49      	ldr	r2, [pc, #292]	; (800b054 <HAL_TIM_PWM_Init+0x184>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d004      	beq.n	800af3c <HAL_TIM_PWM_Init+0x6c>
 800af32:	f240 5129 	movw	r1, #1321	; 0x529
 800af36:	4848      	ldr	r0, [pc, #288]	; (800b058 <HAL_TIM_PWM_Init+0x188>)
 800af38:	f7f8 fce3 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d014      	beq.n	800af6e <HAL_TIM_PWM_Init+0x9e>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	2b10      	cmp	r3, #16
 800af4a:	d010      	beq.n	800af6e <HAL_TIM_PWM_Init+0x9e>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	2b20      	cmp	r3, #32
 800af52:	d00c      	beq.n	800af6e <HAL_TIM_PWM_Init+0x9e>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	2b40      	cmp	r3, #64	; 0x40
 800af5a:	d008      	beq.n	800af6e <HAL_TIM_PWM_Init+0x9e>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	2b60      	cmp	r3, #96	; 0x60
 800af62:	d004      	beq.n	800af6e <HAL_TIM_PWM_Init+0x9e>
 800af64:	f240 512a 	movw	r1, #1322	; 0x52a
 800af68:	483b      	ldr	r0, [pc, #236]	; (800b058 <HAL_TIM_PWM_Init+0x188>)
 800af6a:	f7f8 fcca 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00e      	beq.n	800af94 <HAL_TIM_PWM_Init+0xc4>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af7e:	d009      	beq.n	800af94 <HAL_TIM_PWM_Init+0xc4>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af88:	d004      	beq.n	800af94 <HAL_TIM_PWM_Init+0xc4>
 800af8a:	f240 512b 	movw	r1, #1323	; 0x52b
 800af8e:	4832      	ldr	r0, [pc, #200]	; (800b058 <HAL_TIM_PWM_Init+0x188>)
 800af90:	f7f8 fcb7 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d008      	beq.n	800afae <HAL_TIM_PWM_Init+0xde>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	2b80      	cmp	r3, #128	; 0x80
 800afa2:	d004      	beq.n	800afae <HAL_TIM_PWM_Init+0xde>
 800afa4:	f240 512c 	movw	r1, #1324	; 0x52c
 800afa8:	482b      	ldr	r0, [pc, #172]	; (800b058 <HAL_TIM_PWM_Init+0x188>)
 800afaa:	f7f8 fcaa 	bl	8003902 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d106      	bne.n	800afc8 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f84a 	bl	800b05c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2202      	movs	r2, #2
 800afcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3304      	adds	r3, #4
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f001 fce0 	bl	800c9a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2201      	movs	r2, #1
 800affc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2201      	movs	r2, #1
 800b024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	40010000 	.word	0x40010000
 800b040:	40000400 	.word	0x40000400
 800b044:	40000800 	.word	0x40000800
 800b048:	40000c00 	.word	0x40000c00
 800b04c:	40014000 	.word	0x40014000
 800b050:	40014400 	.word	0x40014400
 800b054:	40014800 	.word	0x40014800
 800b058:	080139bc 	.word	0x080139bc

0800b05c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a9e      	ldr	r2, [pc, #632]	; (800b300 <HAL_TIM_PWM_Start_DMA+0x290>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d10b      	bne.n	800b0a4 <HAL_TIM_PWM_Start_DMA+0x34>
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d06c      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b04      	cmp	r3, #4
 800b096:	d069      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b08      	cmp	r3, #8
 800b09c:	d066      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	2b0c      	cmp	r3, #12
 800b0a2:	d063      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ac:	d10b      	bne.n	800b0c6 <HAL_TIM_PWM_Start_DMA+0x56>
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d05b      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	d058      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b08      	cmp	r3, #8
 800b0be:	d055      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b0c      	cmp	r3, #12
 800b0c4:	d052      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a8e      	ldr	r2, [pc, #568]	; (800b304 <HAL_TIM_PWM_Start_DMA+0x294>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d10b      	bne.n	800b0e8 <HAL_TIM_PWM_Start_DMA+0x78>
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d04a      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	d047      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	2b08      	cmp	r3, #8
 800b0e0:	d044      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b0c      	cmp	r3, #12
 800b0e6:	d041      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a86      	ldr	r2, [pc, #536]	; (800b308 <HAL_TIM_PWM_Start_DMA+0x298>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d10b      	bne.n	800b10a <HAL_TIM_PWM_Start_DMA+0x9a>
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d039      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d036      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2b08      	cmp	r3, #8
 800b102:	d033      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b0c      	cmp	r3, #12
 800b108:	d030      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a7f      	ldr	r2, [pc, #508]	; (800b30c <HAL_TIM_PWM_Start_DMA+0x29c>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d10b      	bne.n	800b12c <HAL_TIM_PWM_Start_DMA+0xbc>
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d028      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d025      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2b08      	cmp	r3, #8
 800b124:	d022      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b0c      	cmp	r3, #12
 800b12a:	d01f      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a77      	ldr	r2, [pc, #476]	; (800b310 <HAL_TIM_PWM_Start_DMA+0x2a0>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d105      	bne.n	800b142 <HAL_TIM_PWM_Start_DMA+0xd2>
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d017      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2b04      	cmp	r3, #4
 800b140:	d014      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a73      	ldr	r2, [pc, #460]	; (800b314 <HAL_TIM_PWM_Start_DMA+0x2a4>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d102      	bne.n	800b152 <HAL_TIM_PWM_Start_DMA+0xe2>
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00c      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a70      	ldr	r2, [pc, #448]	; (800b318 <HAL_TIM_PWM_Start_DMA+0x2a8>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d102      	bne.n	800b162 <HAL_TIM_PWM_Start_DMA+0xf2>
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <HAL_TIM_PWM_Start_DMA+0xfc>
 800b162:	f240 61b3 	movw	r1, #1715	; 0x6b3
 800b166:	486d      	ldr	r0, [pc, #436]	; (800b31c <HAL_TIM_PWM_Start_DMA+0x2ac>)
 800b168:	f7f8 fbcb 	bl	8003902 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d109      	bne.n	800b186 <HAL_TIM_PWM_Start_DMA+0x116>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	bf0c      	ite	eq
 800b17e:	2301      	moveq	r3, #1
 800b180:	2300      	movne	r3, #0
 800b182:	b2db      	uxtb	r3, r3
 800b184:	e022      	b.n	800b1cc <HAL_TIM_PWM_Start_DMA+0x15c>
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d109      	bne.n	800b1a0 <HAL_TIM_PWM_Start_DMA+0x130>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b02      	cmp	r3, #2
 800b196:	bf0c      	ite	eq
 800b198:	2301      	moveq	r3, #1
 800b19a:	2300      	movne	r3, #0
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	e015      	b.n	800b1cc <HAL_TIM_PWM_Start_DMA+0x15c>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b08      	cmp	r3, #8
 800b1a4:	d109      	bne.n	800b1ba <HAL_TIM_PWM_Start_DMA+0x14a>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	bf0c      	ite	eq
 800b1b2:	2301      	moveq	r3, #1
 800b1b4:	2300      	movne	r3, #0
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	e008      	b.n	800b1cc <HAL_TIM_PWM_Start_DMA+0x15c>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	bf0c      	ite	eq
 800b1c6:	2301      	moveq	r3, #1
 800b1c8:	2300      	movne	r3, #0
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <HAL_TIM_PWM_Start_DMA+0x164>
  {
    return HAL_BUSY;
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	e173      	b.n	800b4bc <HAL_TIM_PWM_Start_DMA+0x44c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d109      	bne.n	800b1ee <HAL_TIM_PWM_Start_DMA+0x17e>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	bf0c      	ite	eq
 800b1e6:	2301      	moveq	r3, #1
 800b1e8:	2300      	movne	r3, #0
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	e022      	b.n	800b234 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b04      	cmp	r3, #4
 800b1f2:	d109      	bne.n	800b208 <HAL_TIM_PWM_Start_DMA+0x198>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	bf0c      	ite	eq
 800b200:	2301      	moveq	r3, #1
 800b202:	2300      	movne	r3, #0
 800b204:	b2db      	uxtb	r3, r3
 800b206:	e015      	b.n	800b234 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b08      	cmp	r3, #8
 800b20c:	d109      	bne.n	800b222 <HAL_TIM_PWM_Start_DMA+0x1b2>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b01      	cmp	r3, #1
 800b218:	bf0c      	ite	eq
 800b21a:	2301      	moveq	r3, #1
 800b21c:	2300      	movne	r3, #0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	e008      	b.n	800b234 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	bf0c      	ite	eq
 800b22e:	2301      	moveq	r3, #1
 800b230:	2300      	movne	r3, #0
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	d024      	beq.n	800b282 <HAL_TIM_PWM_Start_DMA+0x212>
  {
    if ((pData == NULL) && (Length > 0U))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d104      	bne.n	800b248 <HAL_TIM_PWM_Start_DMA+0x1d8>
 800b23e:	887b      	ldrh	r3, [r7, #2]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d001      	beq.n	800b248 <HAL_TIM_PWM_Start_DMA+0x1d8>
    {
      return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e139      	b.n	800b4bc <HAL_TIM_PWM_Start_DMA+0x44c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d104      	bne.n	800b258 <HAL_TIM_PWM_Start_DMA+0x1e8>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2202      	movs	r2, #2
 800b252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b256:	e016      	b.n	800b286 <HAL_TIM_PWM_Start_DMA+0x216>
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d104      	bne.n	800b268 <HAL_TIM_PWM_Start_DMA+0x1f8>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2202      	movs	r2, #2
 800b262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b266:	e00e      	b.n	800b286 <HAL_TIM_PWM_Start_DMA+0x216>
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2b08      	cmp	r3, #8
 800b26c:	d104      	bne.n	800b278 <HAL_TIM_PWM_Start_DMA+0x208>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2202      	movs	r2, #2
 800b272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b276:	e006      	b.n	800b286 <HAL_TIM_PWM_Start_DMA+0x216>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b280:	e001      	b.n	800b286 <HAL_TIM_PWM_Start_DMA+0x216>
    }
  }
  else
  {
    return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e11a      	b.n	800b4bc <HAL_TIM_PWM_Start_DMA+0x44c>
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b0c      	cmp	r3, #12
 800b28a:	f200 80c4 	bhi.w	800b416 <HAL_TIM_PWM_Start_DMA+0x3a6>
 800b28e:	a201      	add	r2, pc, #4	; (adr r2, 800b294 <HAL_TIM_PWM_Start_DMA+0x224>)
 800b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b294:	0800b2c9 	.word	0x0800b2c9
 800b298:	0800b417 	.word	0x0800b417
 800b29c:	0800b417 	.word	0x0800b417
 800b2a0:	0800b417 	.word	0x0800b417
 800b2a4:	0800b33f 	.word	0x0800b33f
 800b2a8:	0800b417 	.word	0x0800b417
 800b2ac:	0800b417 	.word	0x0800b417
 800b2b0:	0800b417 	.word	0x0800b417
 800b2b4:	0800b387 	.word	0x0800b387
 800b2b8:	0800b417 	.word	0x0800b417
 800b2bc:	0800b417 	.word	0x0800b417
 800b2c0:	0800b417 	.word	0x0800b417
 800b2c4:	0800b3cf 	.word	0x0800b3cf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2cc:	4a14      	ldr	r2, [pc, #80]	; (800b320 <HAL_TIM_PWM_Start_DMA+0x2b0>)
 800b2ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	4a13      	ldr	r2, [pc, #76]	; (800b324 <HAL_TIM_PWM_Start_DMA+0x2b4>)
 800b2d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2dc:	4a12      	ldr	r2, [pc, #72]	; (800b328 <HAL_TIM_PWM_Start_DMA+0x2b8>)
 800b2de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b2e4:	6879      	ldr	r1, [r7, #4]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3334      	adds	r3, #52	; 0x34
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	887b      	ldrh	r3, [r7, #2]
 800b2f0:	f7fa fbac 	bl	8005a4c <HAL_DMA_Start_IT>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d018      	beq.n	800b32c <HAL_TIM_PWM_Start_DMA+0x2bc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e0de      	b.n	800b4bc <HAL_TIM_PWM_Start_DMA+0x44c>
 800b2fe:	bf00      	nop
 800b300:	40010000 	.word	0x40010000
 800b304:	40000400 	.word	0x40000400
 800b308:	40000800 	.word	0x40000800
 800b30c:	40000c00 	.word	0x40000c00
 800b310:	40014000 	.word	0x40014000
 800b314:	40014400 	.word	0x40014400
 800b318:	40014800 	.word	0x40014800
 800b31c:	080139bc 	.word	0x080139bc
 800b320:	0800c88f 	.word	0x0800c88f
 800b324:	0800c937 	.word	0x0800c937
 800b328:	0800c7fd 	.word	0x0800c7fd
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b33a:	60da      	str	r2, [r3, #12]
      break;
 800b33c:	e06e      	b.n	800b41c <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b342:	4a60      	ldr	r2, [pc, #384]	; (800b4c4 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b344:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	4a5f      	ldr	r2, [pc, #380]	; (800b4c8 <HAL_TIM_PWM_Start_DMA+0x458>)
 800b34c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	4a5e      	ldr	r2, [pc, #376]	; (800b4cc <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b354:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	3338      	adds	r3, #56	; 0x38
 800b362:	461a      	mov	r2, r3
 800b364:	887b      	ldrh	r3, [r7, #2]
 800b366:	f7fa fb71 	bl	8005a4c <HAL_DMA_Start_IT>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <HAL_TIM_PWM_Start_DMA+0x304>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e0a3      	b.n	800b4bc <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68da      	ldr	r2, [r3, #12]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b382:	60da      	str	r2, [r3, #12]
      break;
 800b384:	e04a      	b.n	800b41c <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38a:	4a4e      	ldr	r2, [pc, #312]	; (800b4c4 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b38c:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b392:	4a4d      	ldr	r2, [pc, #308]	; (800b4c8 <HAL_TIM_PWM_Start_DMA+0x458>)
 800b394:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	4a4c      	ldr	r2, [pc, #304]	; (800b4cc <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b39c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	333c      	adds	r3, #60	; 0x3c
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	887b      	ldrh	r3, [r7, #2]
 800b3ae:	f7fa fb4d 	bl	8005a4c <HAL_DMA_Start_IT>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <HAL_TIM_PWM_Start_DMA+0x34c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e07f      	b.n	800b4bc <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	68da      	ldr	r2, [r3, #12]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3ca:	60da      	str	r2, [r3, #12]
      break;
 800b3cc:	e026      	b.n	800b41c <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	4a3c      	ldr	r2, [pc, #240]	; (800b4c4 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b3d4:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3da:	4a3b      	ldr	r2, [pc, #236]	; (800b4c8 <HAL_TIM_PWM_Start_DMA+0x458>)
 800b3dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e2:	4a3a      	ldr	r2, [pc, #232]	; (800b4cc <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b3e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3340      	adds	r3, #64	; 0x40
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	887b      	ldrh	r3, [r7, #2]
 800b3f6:	f7fa fb29 	bl	8005a4c <HAL_DMA_Start_IT>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <HAL_TIM_PWM_Start_DMA+0x394>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e05b      	b.n	800b4bc <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b412:	60da      	str	r2, [r3, #12]
      break;
 800b414:	e002      	b.n	800b41c <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    default:
      status = HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	75fb      	strb	r3, [r7, #23]
      break;
 800b41a:	bf00      	nop
  }

  if (status == HAL_OK)
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d14b      	bne.n	800b4ba <HAL_TIM_PWM_Start_DMA+0x44a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2201      	movs	r2, #1
 800b428:	68b9      	ldr	r1, [r7, #8]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 ff06 	bl	800d23c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a26      	ldr	r2, [pc, #152]	; (800b4d0 <HAL_TIM_PWM_Start_DMA+0x460>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d107      	bne.n	800b44a <HAL_TIM_PWM_Start_DMA+0x3da>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b448:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a20      	ldr	r2, [pc, #128]	; (800b4d0 <HAL_TIM_PWM_Start_DMA+0x460>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d018      	beq.n	800b486 <HAL_TIM_PWM_Start_DMA+0x416>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b45c:	d013      	beq.n	800b486 <HAL_TIM_PWM_Start_DMA+0x416>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a1c      	ldr	r2, [pc, #112]	; (800b4d4 <HAL_TIM_PWM_Start_DMA+0x464>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d00e      	beq.n	800b486 <HAL_TIM_PWM_Start_DMA+0x416>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a1a      	ldr	r2, [pc, #104]	; (800b4d8 <HAL_TIM_PWM_Start_DMA+0x468>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d009      	beq.n	800b486 <HAL_TIM_PWM_Start_DMA+0x416>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a19      	ldr	r2, [pc, #100]	; (800b4dc <HAL_TIM_PWM_Start_DMA+0x46c>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d004      	beq.n	800b486 <HAL_TIM_PWM_Start_DMA+0x416>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a17      	ldr	r2, [pc, #92]	; (800b4e0 <HAL_TIM_PWM_Start_DMA+0x470>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d111      	bne.n	800b4aa <HAL_TIM_PWM_Start_DMA+0x43a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f003 0307 	and.w	r3, r3, #7
 800b490:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2b06      	cmp	r3, #6
 800b496:	d010      	beq.n	800b4ba <HAL_TIM_PWM_Start_DMA+0x44a>
      {
        __HAL_TIM_ENABLE(htim);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f042 0201 	orr.w	r2, r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a8:	e007      	b.n	800b4ba <HAL_TIM_PWM_Start_DMA+0x44a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f042 0201 	orr.w	r2, r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	0800c88f 	.word	0x0800c88f
 800b4c8:	0800c937 	.word	0x0800c937
 800b4cc:	0800c7fd 	.word	0x0800c7fd
 800b4d0:	40010000 	.word	0x40010000
 800b4d4:	40000400 	.word	0x40000400
 800b4d8:	40000800 	.word	0x40000800
 800b4dc:	40000c00 	.word	0x40000c00
 800b4e0:	40014000 	.word	0x40014000

0800b4e4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a97      	ldr	r2, [pc, #604]	; (800b754 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d10b      	bne.n	800b514 <HAL_TIM_PWM_Stop_DMA+0x30>
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d06c      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2b04      	cmp	r3, #4
 800b506:	d069      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	2b08      	cmp	r3, #8
 800b50c:	d066      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b0c      	cmp	r3, #12
 800b512:	d063      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b51c:	d10b      	bne.n	800b536 <HAL_TIM_PWM_Stop_DMA+0x52>
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d05b      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	2b04      	cmp	r3, #4
 800b528:	d058      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d055      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	2b0c      	cmp	r3, #12
 800b534:	d052      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a87      	ldr	r2, [pc, #540]	; (800b758 <HAL_TIM_PWM_Stop_DMA+0x274>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d10b      	bne.n	800b558 <HAL_TIM_PWM_Stop_DMA+0x74>
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d04a      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b04      	cmp	r3, #4
 800b54a:	d047      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b08      	cmp	r3, #8
 800b550:	d044      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b0c      	cmp	r3, #12
 800b556:	d041      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a7f      	ldr	r2, [pc, #508]	; (800b75c <HAL_TIM_PWM_Stop_DMA+0x278>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d10b      	bne.n	800b57a <HAL_TIM_PWM_Stop_DMA+0x96>
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d039      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d036      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b08      	cmp	r3, #8
 800b572:	d033      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	2b0c      	cmp	r3, #12
 800b578:	d030      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a78      	ldr	r2, [pc, #480]	; (800b760 <HAL_TIM_PWM_Stop_DMA+0x27c>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d10b      	bne.n	800b59c <HAL_TIM_PWM_Stop_DMA+0xb8>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d028      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b04      	cmp	r3, #4
 800b58e:	d025      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b08      	cmp	r3, #8
 800b594:	d022      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	2b0c      	cmp	r3, #12
 800b59a:	d01f      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a70      	ldr	r2, [pc, #448]	; (800b764 <HAL_TIM_PWM_Stop_DMA+0x280>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d105      	bne.n	800b5b2 <HAL_TIM_PWM_Stop_DMA+0xce>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d017      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d014      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a6c      	ldr	r2, [pc, #432]	; (800b768 <HAL_TIM_PWM_Stop_DMA+0x284>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d102      	bne.n	800b5c2 <HAL_TIM_PWM_Stop_DMA+0xde>
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00c      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a69      	ldr	r2, [pc, #420]	; (800b76c <HAL_TIM_PWM_Stop_DMA+0x288>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d102      	bne.n	800b5d2 <HAL_TIM_PWM_Stop_DMA+0xee>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d004      	beq.n	800b5dc <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b5d2:	f240 7154 	movw	r1, #1876	; 0x754
 800b5d6:	4866      	ldr	r0, [pc, #408]	; (800b770 <HAL_TIM_PWM_Stop_DMA+0x28c>)
 800b5d8:	f7f8 f993 	bl	8003902 <assert_failed>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	2b0c      	cmp	r3, #12
 800b5e0:	d854      	bhi.n	800b68c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b5e2:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <HAL_TIM_PWM_Stop_DMA+0x104>)
 800b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e8:	0800b61d 	.word	0x0800b61d
 800b5ec:	0800b68d 	.word	0x0800b68d
 800b5f0:	0800b68d 	.word	0x0800b68d
 800b5f4:	0800b68d 	.word	0x0800b68d
 800b5f8:	0800b639 	.word	0x0800b639
 800b5fc:	0800b68d 	.word	0x0800b68d
 800b600:	0800b68d 	.word	0x0800b68d
 800b604:	0800b68d 	.word	0x0800b68d
 800b608:	0800b655 	.word	0x0800b655
 800b60c:	0800b68d 	.word	0x0800b68d
 800b610:	0800b68d 	.word	0x0800b68d
 800b614:	0800b68d 	.word	0x0800b68d
 800b618:	0800b671 	.word	0x0800b671
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b62a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b630:	4618      	mov	r0, r3
 800b632:	f7fa fa71 	bl	8005b18 <HAL_DMA_Abort_IT>
      break;
 800b636:	e02c      	b.n	800b692 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68da      	ldr	r2, [r3, #12]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b646:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fa fa63 	bl	8005b18 <HAL_DMA_Abort_IT>
      break;
 800b652:	e01e      	b.n	800b692 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68da      	ldr	r2, [r3, #12]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b662:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fa fa55 	bl	8005b18 <HAL_DMA_Abort_IT>
      break;
 800b66e:	e010      	b.n	800b692 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b67e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b684:	4618      	mov	r0, r3
 800b686:	f7fa fa47 	bl	8005b18 <HAL_DMA_Abort_IT>
      break;
 800b68a:	e002      	b.n	800b692 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    default:
      status = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	73fb      	strb	r3, [r7, #15]
      break;
 800b690:	bf00      	nop
  }

  if (status == HAL_OK)
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d157      	bne.n	800b748 <HAL_TIM_PWM_Stop_DMA+0x264>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2200      	movs	r2, #0
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f001 fdcb 	bl	800d23c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a2a      	ldr	r2, [pc, #168]	; (800b754 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d117      	bne.n	800b6e0 <HAL_TIM_PWM_Stop_DMA+0x1fc>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6a1a      	ldr	r2, [r3, #32]
 800b6b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b6ba:	4013      	ands	r3, r2
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10f      	bne.n	800b6e0 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6a1a      	ldr	r2, [r3, #32]
 800b6c6:	f240 4344 	movw	r3, #1092	; 0x444
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d107      	bne.n	800b6e0 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b6de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6a1a      	ldr	r2, [r3, #32]
 800b6e6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b6ea:	4013      	ands	r3, r2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d10f      	bne.n	800b710 <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6a1a      	ldr	r2, [r3, #32]
 800b6f6:	f240 4344 	movw	r3, #1092	; 0x444
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d107      	bne.n	800b710 <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f022 0201 	bic.w	r2, r2, #1
 800b70e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d104      	bne.n	800b720 <HAL_TIM_PWM_Stop_DMA+0x23c>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b71e:	e013      	b.n	800b748 <HAL_TIM_PWM_Stop_DMA+0x264>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b04      	cmp	r3, #4
 800b724:	d104      	bne.n	800b730 <HAL_TIM_PWM_Stop_DMA+0x24c>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b72e:	e00b      	b.n	800b748 <HAL_TIM_PWM_Stop_DMA+0x264>
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2b08      	cmp	r3, #8
 800b734:	d104      	bne.n	800b740 <HAL_TIM_PWM_Stop_DMA+0x25c>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b73e:	e003      	b.n	800b748 <HAL_TIM_PWM_Stop_DMA+0x264>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800b748:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	40010000 	.word	0x40010000
 800b758:	40000400 	.word	0x40000400
 800b75c:	40000800 	.word	0x40000800
 800b760:	40000c00 	.word	0x40000c00
 800b764:	40014000 	.word	0x40014000
 800b768:	40014400 	.word	0x40014400
 800b76c:	40014800 	.word	0x40014800
 800b770:	080139bc 	.word	0x080139bc

0800b774 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d101      	bne.n	800b786 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e0a7      	b.n	800b8d6 <HAL_TIM_IC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a55      	ldr	r2, [pc, #340]	; (800b8e0 <HAL_TIM_IC_Init+0x16c>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d027      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b798:	d022      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a51      	ldr	r2, [pc, #324]	; (800b8e4 <HAL_TIM_IC_Init+0x170>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d01d      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a4f      	ldr	r2, [pc, #316]	; (800b8e8 <HAL_TIM_IC_Init+0x174>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d018      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a4e      	ldr	r2, [pc, #312]	; (800b8ec <HAL_TIM_IC_Init+0x178>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d013      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a4c      	ldr	r2, [pc, #304]	; (800b8f0 <HAL_TIM_IC_Init+0x17c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d00e      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a4b      	ldr	r2, [pc, #300]	; (800b8f4 <HAL_TIM_IC_Init+0x180>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d009      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a49      	ldr	r2, [pc, #292]	; (800b8f8 <HAL_TIM_IC_Init+0x184>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d004      	beq.n	800b7e0 <HAL_TIM_IC_Init+0x6c>
 800b7d6:	f240 71bf 	movw	r1, #1983	; 0x7bf
 800b7da:	4848      	ldr	r0, [pc, #288]	; (800b8fc <HAL_TIM_IC_Init+0x188>)
 800b7dc:	f7f8 f891 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d014      	beq.n	800b812 <HAL_TIM_IC_Init+0x9e>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	2b10      	cmp	r3, #16
 800b7ee:	d010      	beq.n	800b812 <HAL_TIM_IC_Init+0x9e>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	2b20      	cmp	r3, #32
 800b7f6:	d00c      	beq.n	800b812 <HAL_TIM_IC_Init+0x9e>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	2b40      	cmp	r3, #64	; 0x40
 800b7fe:	d008      	beq.n	800b812 <HAL_TIM_IC_Init+0x9e>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	2b60      	cmp	r3, #96	; 0x60
 800b806:	d004      	beq.n	800b812 <HAL_TIM_IC_Init+0x9e>
 800b808:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 800b80c:	483b      	ldr	r0, [pc, #236]	; (800b8fc <HAL_TIM_IC_Init+0x188>)
 800b80e:	f7f8 f878 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00e      	beq.n	800b838 <HAL_TIM_IC_Init+0xc4>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b822:	d009      	beq.n	800b838 <HAL_TIM_IC_Init+0xc4>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b82c:	d004      	beq.n	800b838 <HAL_TIM_IC_Init+0xc4>
 800b82e:	f240 71c1 	movw	r1, #1985	; 0x7c1
 800b832:	4832      	ldr	r0, [pc, #200]	; (800b8fc <HAL_TIM_IC_Init+0x188>)
 800b834:	f7f8 f865 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	699b      	ldr	r3, [r3, #24]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d008      	beq.n	800b852 <HAL_TIM_IC_Init+0xde>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	2b80      	cmp	r3, #128	; 0x80
 800b846:	d004      	beq.n	800b852 <HAL_TIM_IC_Init+0xde>
 800b848:	f240 71c2 	movw	r1, #1986	; 0x7c2
 800b84c:	482b      	ldr	r0, [pc, #172]	; (800b8fc <HAL_TIM_IC_Init+0x188>)
 800b84e:	f7f8 f858 	bl	8003902 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d106      	bne.n	800b86c <HAL_TIM_IC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f84a 	bl	800b900 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3304      	adds	r3, #4
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f001 f88e 	bl	800c9a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	40010000 	.word	0x40010000
 800b8e4:	40000400 	.word	0x40000400
 800b8e8:	40000800 	.word	0x40000800
 800b8ec:	40000c00 	.word	0x40000c00
 800b8f0:	40014000 	.word	0x40014000
 800b8f4:	40014400 	.word	0x40014400
 800b8f8:	40014800 	.word	0x40014800
 800b8fc:	080139bc 	.word	0x080139bc

0800b900 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b02      	cmp	r3, #2
 800b928:	d122      	bne.n	800b970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	f003 0302 	and.w	r3, r3, #2
 800b934:	2b02      	cmp	r3, #2
 800b936:	d11b      	bne.n	800b970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f06f 0202 	mvn.w	r2, #2
 800b940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2201      	movs	r2, #1
 800b946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 ff28 	bl	800c7ac <HAL_TIM_IC_CaptureCallback>
 800b95c:	e005      	b.n	800b96a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 ff1a 	bl	800c798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7f7 fa73 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	f003 0304 	and.w	r3, r3, #4
 800b97a:	2b04      	cmp	r3, #4
 800b97c:	d122      	bne.n	800b9c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b04      	cmp	r3, #4
 800b98a:	d11b      	bne.n	800b9c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f06f 0204 	mvn.w	r2, #4
 800b994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2202      	movs	r2, #2
 800b99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fefe 	bl	800c7ac <HAL_TIM_IC_CaptureCallback>
 800b9b0:	e005      	b.n	800b9be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fef0 	bl	800c798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f7f7 fa49 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	f003 0308 	and.w	r3, r3, #8
 800b9ce:	2b08      	cmp	r3, #8
 800b9d0:	d122      	bne.n	800ba18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	f003 0308 	and.w	r3, r3, #8
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	d11b      	bne.n	800ba18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f06f 0208 	mvn.w	r2, #8
 800b9e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2204      	movs	r2, #4
 800b9ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	f003 0303 	and.w	r3, r3, #3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fed4 	bl	800c7ac <HAL_TIM_IC_CaptureCallback>
 800ba04:	e005      	b.n	800ba12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fec6 	bl	800c798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7f7 fa1f 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	f003 0310 	and.w	r3, r3, #16
 800ba22:	2b10      	cmp	r3, #16
 800ba24:	d122      	bne.n	800ba6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	f003 0310 	and.w	r3, r3, #16
 800ba30:	2b10      	cmp	r3, #16
 800ba32:	d11b      	bne.n	800ba6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f06f 0210 	mvn.w	r2, #16
 800ba3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2208      	movs	r2, #8
 800ba42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	69db      	ldr	r3, [r3, #28]
 800ba4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 feaa 	bl	800c7ac <HAL_TIM_IC_CaptureCallback>
 800ba58:	e005      	b.n	800ba66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fe9c 	bl	800c798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f7f7 f9f5 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	f003 0301 	and.w	r3, r3, #1
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d10e      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d107      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f06f 0201 	mvn.w	r2, #1
 800ba90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7f7 f9b0 	bl	8002df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa2:	2b80      	cmp	r3, #128	; 0x80
 800baa4:	d10e      	bne.n	800bac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab0:	2b80      	cmp	r3, #128	; 0x80
 800bab2:	d107      	bne.n	800bac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800babc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f001 fdb6 	bl	800d630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bace:	2b40      	cmp	r3, #64	; 0x40
 800bad0:	d10e      	bne.n	800baf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800badc:	2b40      	cmp	r3, #64	; 0x40
 800bade:	d107      	bne.n	800baf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fe72 	bl	800c7d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	f003 0320 	and.w	r3, r3, #32
 800bafa:	2b20      	cmp	r3, #32
 800bafc:	d10e      	bne.n	800bb1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b20      	cmp	r3, #32
 800bb0a:	d107      	bne.n	800bb1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f06f 0220 	mvn.w	r2, #32
 800bb14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f001 fd80 	bl	800d61c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a8a      	ldr	r2, [pc, #552]	; (800bd64 <HAL_TIM_IC_ConfigChannel+0x240>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d027      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb46:	d022      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a86      	ldr	r2, [pc, #536]	; (800bd68 <HAL_TIM_IC_ConfigChannel+0x244>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d01d      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a85      	ldr	r2, [pc, #532]	; (800bd6c <HAL_TIM_IC_ConfigChannel+0x248>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d018      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a83      	ldr	r2, [pc, #524]	; (800bd70 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d013      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a82      	ldr	r2, [pc, #520]	; (800bd74 <HAL_TIM_IC_ConfigChannel+0x250>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00e      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a80      	ldr	r2, [pc, #512]	; (800bd78 <HAL_TIM_IC_ConfigChannel+0x254>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d009      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a7f      	ldr	r2, [pc, #508]	; (800bd7c <HAL_TIM_IC_ConfigChannel+0x258>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d004      	beq.n	800bb8e <HAL_TIM_IC_ConfigChannel+0x6a>
 800bb84:	f241 0112 	movw	r1, #4114	; 0x1012
 800bb88:	487d      	ldr	r0, [pc, #500]	; (800bd80 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800bb8a:	f7f7 feba 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00c      	beq.n	800bbb0 <HAL_TIM_IC_ConfigChannel+0x8c>
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d008      	beq.n	800bbb0 <HAL_TIM_IC_ConfigChannel+0x8c>
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b0a      	cmp	r3, #10
 800bba4:	d004      	beq.n	800bbb0 <HAL_TIM_IC_ConfigChannel+0x8c>
 800bba6:	f241 0113 	movw	r1, #4115	; 0x1013
 800bbaa:	4875      	ldr	r0, [pc, #468]	; (800bd80 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800bbac:	f7f7 fea9 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d00c      	beq.n	800bbd2 <HAL_TIM_IC_ConfigChannel+0xae>
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d008      	beq.n	800bbd2 <HAL_TIM_IC_ConfigChannel+0xae>
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d004      	beq.n	800bbd2 <HAL_TIM_IC_ConfigChannel+0xae>
 800bbc8:	f241 0114 	movw	r1, #4116	; 0x1014
 800bbcc:	486c      	ldr	r0, [pc, #432]	; (800bd80 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800bbce:	f7f7 fe98 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d010      	beq.n	800bbfc <HAL_TIM_IC_ConfigChannel+0xd8>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	2b04      	cmp	r3, #4
 800bbe0:	d00c      	beq.n	800bbfc <HAL_TIM_IC_ConfigChannel+0xd8>
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	2b08      	cmp	r3, #8
 800bbe8:	d008      	beq.n	800bbfc <HAL_TIM_IC_ConfigChannel+0xd8>
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	2b0c      	cmp	r3, #12
 800bbf0:	d004      	beq.n	800bbfc <HAL_TIM_IC_ConfigChannel+0xd8>
 800bbf2:	f241 0115 	movw	r1, #4117	; 0x1015
 800bbf6:	4862      	ldr	r0, [pc, #392]	; (800bd80 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800bbf8:	f7f7 fe83 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	2b0f      	cmp	r3, #15
 800bc02:	d904      	bls.n	800bc0e <HAL_TIM_IC_ConfigChannel+0xea>
 800bc04:	f241 0116 	movw	r1, #4118	; 0x1016
 800bc08:	485d      	ldr	r0, [pc, #372]	; (800bd80 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800bc0a:	f7f7 fe7a 	bl	8003902 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d101      	bne.n	800bc1c <HAL_TIM_IC_ConfigChannel+0xf8>
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e0f8      	b.n	800be0e <HAL_TIM_IC_ConfigChannel+0x2ea>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d11b      	bne.n	800bc62 <HAL_TIM_IC_ConfigChannel+0x13e>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6818      	ldr	r0, [r3, #0]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	f001 f947 	bl	800cecc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	699a      	ldr	r2, [r3, #24]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 020c 	bic.w	r2, r2, #12
 800bc4c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6999      	ldr	r1, [r3, #24]
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	689a      	ldr	r2, [r3, #8]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	430a      	orrs	r2, r1
 800bc5e:	619a      	str	r2, [r3, #24]
 800bc60:	e0d0      	b.n	800be04 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b04      	cmp	r3, #4
 800bc66:	d13f      	bne.n	800bce8 <HAL_TIM_IC_ConfigChannel+0x1c4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a3d      	ldr	r2, [pc, #244]	; (800bd64 <HAL_TIM_IC_ConfigChannel+0x240>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d01d      	beq.n	800bcae <HAL_TIM_IC_ConfigChannel+0x18a>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc7a:	d018      	beq.n	800bcae <HAL_TIM_IC_ConfigChannel+0x18a>
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a39      	ldr	r2, [pc, #228]	; (800bd68 <HAL_TIM_IC_ConfigChannel+0x244>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d013      	beq.n	800bcae <HAL_TIM_IC_ConfigChannel+0x18a>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a38      	ldr	r2, [pc, #224]	; (800bd6c <HAL_TIM_IC_ConfigChannel+0x248>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d00e      	beq.n	800bcae <HAL_TIM_IC_ConfigChannel+0x18a>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a36      	ldr	r2, [pc, #216]	; (800bd70 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d009      	beq.n	800bcae <HAL_TIM_IC_ConfigChannel+0x18a>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a35      	ldr	r2, [pc, #212]	; (800bd74 <HAL_TIM_IC_ConfigChannel+0x250>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d004      	beq.n	800bcae <HAL_TIM_IC_ConfigChannel+0x18a>
 800bca4:	f241 012c 	movw	r1, #4140	; 0x102c
 800bca8:	4835      	ldr	r0, [pc, #212]	; (800bd80 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800bcaa:	f7f7 fe2a 	bl	8003902 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	6819      	ldr	r1, [r3, #0]
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	f001 f99c 	bl	800cffa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	699a      	ldr	r2, [r3, #24]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bcd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	6999      	ldr	r1, [r3, #24]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	021a      	lsls	r2, r3, #8
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	619a      	str	r2, [r3, #24]
 800bce6:	e08d      	b.n	800be04 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b08      	cmp	r3, #8
 800bcec:	d14a      	bne.n	800bd84 <HAL_TIM_IC_ConfigChannel+0x260>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a1c      	ldr	r2, [pc, #112]	; (800bd64 <HAL_TIM_IC_ConfigChannel+0x240>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d018      	beq.n	800bd2a <HAL_TIM_IC_ConfigChannel+0x206>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d013      	beq.n	800bd2a <HAL_TIM_IC_ConfigChannel+0x206>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a18      	ldr	r2, [pc, #96]	; (800bd68 <HAL_TIM_IC_ConfigChannel+0x244>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d00e      	beq.n	800bd2a <HAL_TIM_IC_ConfigChannel+0x206>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a16      	ldr	r2, [pc, #88]	; (800bd6c <HAL_TIM_IC_ConfigChannel+0x248>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d009      	beq.n	800bd2a <HAL_TIM_IC_ConfigChannel+0x206>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a15      	ldr	r2, [pc, #84]	; (800bd70 <HAL_TIM_IC_ConfigChannel+0x24c>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d004      	beq.n	800bd2a <HAL_TIM_IC_ConfigChannel+0x206>
 800bd20:	f241 013c 	movw	r1, #4156	; 0x103c
 800bd24:	4816      	ldr	r0, [pc, #88]	; (800bd80 <HAL_TIM_IC_ConfigChannel+0x25c>)
 800bd26:	f7f7 fdec 	bl	8003902 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6818      	ldr	r0, [r3, #0]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6819      	ldr	r1, [r3, #0]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	685a      	ldr	r2, [r3, #4]
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	f001 f9cb 	bl	800d0d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69da      	ldr	r2, [r3, #28]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f022 020c 	bic.w	r2, r2, #12
 800bd4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	69d9      	ldr	r1, [r3, #28]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	689a      	ldr	r2, [r3, #8]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	430a      	orrs	r2, r1
 800bd5e:	61da      	str	r2, [r3, #28]
 800bd60:	e050      	b.n	800be04 <HAL_TIM_IC_ConfigChannel+0x2e0>
 800bd62:	bf00      	nop
 800bd64:	40010000 	.word	0x40010000
 800bd68:	40000400 	.word	0x40000400
 800bd6c:	40000800 	.word	0x40000800
 800bd70:	40000c00 	.word	0x40000c00
 800bd74:	40014000 	.word	0x40014000
 800bd78:	40014400 	.word	0x40014400
 800bd7c:	40014800 	.word	0x40014800
 800bd80:	080139bc 	.word	0x080139bc
  }
  else if (Channel == TIM_CHANNEL_4)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b0c      	cmp	r3, #12
 800bd88:	d13a      	bne.n	800be00 <HAL_TIM_IC_ConfigChannel+0x2dc>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a22      	ldr	r2, [pc, #136]	; (800be18 <HAL_TIM_IC_ConfigChannel+0x2f4>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d018      	beq.n	800bdc6 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd9c:	d013      	beq.n	800bdc6 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a1e      	ldr	r2, [pc, #120]	; (800be1c <HAL_TIM_IC_ConfigChannel+0x2f8>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d00e      	beq.n	800bdc6 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a1c      	ldr	r2, [pc, #112]	; (800be20 <HAL_TIM_IC_ConfigChannel+0x2fc>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d009      	beq.n	800bdc6 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a1b      	ldr	r2, [pc, #108]	; (800be24 <HAL_TIM_IC_ConfigChannel+0x300>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d004      	beq.n	800bdc6 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800bdbc:	f241 014c 	movw	r1, #4172	; 0x104c
 800bdc0:	4819      	ldr	r0, [pc, #100]	; (800be28 <HAL_TIM_IC_ConfigChannel+0x304>)
 800bdc2:	f7f7 fd9e 	bl	8003902 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	6819      	ldr	r1, [r3, #0]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	685a      	ldr	r2, [r3, #4]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	f001 f9b9 	bl	800d14c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	69da      	ldr	r2, [r3, #28]
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bde8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	69d9      	ldr	r1, [r3, #28]
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	021a      	lsls	r2, r3, #8
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	61da      	str	r2, [r3, #28]
 800bdfe:	e001      	b.n	800be04 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else
  {
    status = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	40010000 	.word	0x40010000
 800be1c:	40000400 	.word	0x40000400
 800be20:	40000800 	.word	0x40000800
 800be24:	40000c00 	.word	0x40000c00
 800be28:	080139bc 	.word	0x080139bc

0800be2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	60f8      	str	r0, [r7, #12]
 800be34:	60b9      	str	r1, [r7, #8]
 800be36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d010      	beq.n	800be64 <HAL_TIM_PWM_ConfigChannel+0x38>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2b04      	cmp	r3, #4
 800be46:	d00d      	beq.n	800be64 <HAL_TIM_PWM_ConfigChannel+0x38>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b08      	cmp	r3, #8
 800be4c:	d00a      	beq.n	800be64 <HAL_TIM_PWM_ConfigChannel+0x38>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b0c      	cmp	r3, #12
 800be52:	d007      	beq.n	800be64 <HAL_TIM_PWM_ConfigChannel+0x38>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b3c      	cmp	r3, #60	; 0x3c
 800be58:	d004      	beq.n	800be64 <HAL_TIM_PWM_ConfigChannel+0x38>
 800be5a:	f241 0177 	movw	r1, #4215	; 0x1077
 800be5e:	4893      	ldr	r0, [pc, #588]	; (800c0ac <HAL_TIM_PWM_ConfigChannel+0x280>)
 800be60:	f7f7 fd4f 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b60      	cmp	r3, #96	; 0x60
 800be6a:	d008      	beq.n	800be7e <HAL_TIM_PWM_ConfigChannel+0x52>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b70      	cmp	r3, #112	; 0x70
 800be72:	d004      	beq.n	800be7e <HAL_TIM_PWM_ConfigChannel+0x52>
 800be74:	f241 0178 	movw	r1, #4216	; 0x1078
 800be78:	488c      	ldr	r0, [pc, #560]	; (800c0ac <HAL_TIM_PWM_ConfigChannel+0x280>)
 800be7a:	f7f7 fd42 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d008      	beq.n	800be98 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d004      	beq.n	800be98 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800be8e:	f241 0179 	movw	r1, #4217	; 0x1079
 800be92:	4886      	ldr	r0, [pc, #536]	; (800c0ac <HAL_TIM_PWM_ConfigChannel+0x280>)
 800be94:	f7f7 fd35 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	691b      	ldr	r3, [r3, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d008      	beq.n	800beb2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	2b04      	cmp	r3, #4
 800bea6:	d004      	beq.n	800beb2 <HAL_TIM_PWM_ConfigChannel+0x86>
 800bea8:	f241 017a 	movw	r1, #4218	; 0x107a
 800beac:	487f      	ldr	r0, [pc, #508]	; (800c0ac <HAL_TIM_PWM_ConfigChannel+0x280>)
 800beae:	f7f7 fd28 	bl	8003902 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d101      	bne.n	800bec0 <HAL_TIM_PWM_ConfigChannel+0x94>
 800bebc:	2302      	movs	r3, #2
 800bebe:	e14c      	b.n	800c15a <HAL_TIM_PWM_ConfigChannel+0x32e>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b0c      	cmp	r3, #12
 800becc:	f200 813d 	bhi.w	800c14a <HAL_TIM_PWM_ConfigChannel+0x31e>
 800bed0:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800bed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed6:	bf00      	nop
 800bed8:	0800bf0d 	.word	0x0800bf0d
 800bedc:	0800c14b 	.word	0x0800c14b
 800bee0:	0800c14b 	.word	0x0800c14b
 800bee4:	0800c14b 	.word	0x0800c14b
 800bee8:	0800bfa7 	.word	0x0800bfa7
 800beec:	0800c14b 	.word	0x0800c14b
 800bef0:	0800c14b 	.word	0x0800c14b
 800bef4:	0800c14b 	.word	0x0800c14b
 800bef8:	0800c02f 	.word	0x0800c02f
 800befc:	0800c14b 	.word	0x0800c14b
 800bf00:	0800c14b 	.word	0x0800c14b
 800bf04:	0800c14b 	.word	0x0800c14b
 800bf08:	0800c0cd 	.word	0x0800c0cd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a67      	ldr	r2, [pc, #412]	; (800c0b0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d027      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf1e:	d022      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a63      	ldr	r2, [pc, #396]	; (800c0b4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d01d      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a62      	ldr	r2, [pc, #392]	; (800c0b8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d018      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a60      	ldr	r2, [pc, #384]	; (800c0bc <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d013      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a5f      	ldr	r2, [pc, #380]	; (800c0c0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d00e      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a5d      	ldr	r2, [pc, #372]	; (800c0c4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d009      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a5c      	ldr	r2, [pc, #368]	; (800c0c8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d004      	beq.n	800bf66 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bf5c:	f241 0184 	movw	r1, #4228	; 0x1084
 800bf60:	4852      	ldr	r0, [pc, #328]	; (800c0ac <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bf62:	f7f7 fcce 	bl	8003902 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 fd97 	bl	800caa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	699a      	ldr	r2, [r3, #24]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f042 0208 	orr.w	r2, r2, #8
 800bf80:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	699a      	ldr	r2, [r3, #24]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f022 0204 	bic.w	r2, r2, #4
 800bf90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	6999      	ldr	r1, [r3, #24]
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	691a      	ldr	r2, [r3, #16]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	430a      	orrs	r2, r1
 800bfa2:	619a      	str	r2, [r3, #24]
      break;
 800bfa4:	e0d4      	b.n	800c150 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a41      	ldr	r2, [pc, #260]	; (800c0b0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d01d      	beq.n	800bfec <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfb8:	d018      	beq.n	800bfec <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a3d      	ldr	r2, [pc, #244]	; (800c0b4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d013      	beq.n	800bfec <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a3b      	ldr	r2, [pc, #236]	; (800c0b8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d00e      	beq.n	800bfec <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a3a      	ldr	r2, [pc, #232]	; (800c0bc <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d009      	beq.n	800bfec <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a38      	ldr	r2, [pc, #224]	; (800c0c0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d004      	beq.n	800bfec <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bfe2:	f241 0195 	movw	r1, #4245	; 0x1095
 800bfe6:	4831      	ldr	r0, [pc, #196]	; (800c0ac <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bfe8:	f7f7 fc8b 	bl	8003902 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68b9      	ldr	r1, [r7, #8]
 800bff2:	4618      	mov	r0, r3
 800bff4:	f000 fde4 	bl	800cbc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	6999      	ldr	r1, [r3, #24]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	021a      	lsls	r2, r3, #8
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	430a      	orrs	r2, r1
 800c02a:	619a      	str	r2, [r3, #24]
      break;
 800c02c:	e090      	b.n	800c150 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a1f      	ldr	r2, [pc, #124]	; (800c0b0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d018      	beq.n	800c06a <HAL_TIM_PWM_ConfigChannel+0x23e>
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c040:	d013      	beq.n	800c06a <HAL_TIM_PWM_ConfigChannel+0x23e>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a1b      	ldr	r2, [pc, #108]	; (800c0b4 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d00e      	beq.n	800c06a <HAL_TIM_PWM_ConfigChannel+0x23e>
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a19      	ldr	r2, [pc, #100]	; (800c0b8 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d009      	beq.n	800c06a <HAL_TIM_PWM_ConfigChannel+0x23e>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a18      	ldr	r2, [pc, #96]	; (800c0bc <HAL_TIM_PWM_ConfigChannel+0x290>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d004      	beq.n	800c06a <HAL_TIM_PWM_ConfigChannel+0x23e>
 800c060:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800c064:	4811      	ldr	r0, [pc, #68]	; (800c0ac <HAL_TIM_PWM_ConfigChannel+0x280>)
 800c066:	f7f7 fc4c 	bl	8003902 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fe39 	bl	800cce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	69da      	ldr	r2, [r3, #28]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f042 0208 	orr.w	r2, r2, #8
 800c084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	69da      	ldr	r2, [r3, #28]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f022 0204 	bic.w	r2, r2, #4
 800c094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	69d9      	ldr	r1, [r3, #28]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	691a      	ldr	r2, [r3, #16]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	430a      	orrs	r2, r1
 800c0a6:	61da      	str	r2, [r3, #28]
      break;
 800c0a8:	e052      	b.n	800c150 <HAL_TIM_PWM_ConfigChannel+0x324>
 800c0aa:	bf00      	nop
 800c0ac:	080139bc 	.word	0x080139bc
 800c0b0:	40010000 	.word	0x40010000
 800c0b4:	40000400 	.word	0x40000400
 800c0b8:	40000800 	.word	0x40000800
 800c0bc:	40000c00 	.word	0x40000c00
 800c0c0:	40014000 	.word	0x40014000
 800c0c4:	40014400 	.word	0x40014400
 800c0c8:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a24      	ldr	r2, [pc, #144]	; (800c164 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d018      	beq.n	800c108 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0de:	d013      	beq.n	800c108 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a20      	ldr	r2, [pc, #128]	; (800c168 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d00e      	beq.n	800c108 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a1f      	ldr	r2, [pc, #124]	; (800c16c <HAL_TIM_PWM_ConfigChannel+0x340>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d009      	beq.n	800c108 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a1d      	ldr	r2, [pc, #116]	; (800c170 <HAL_TIM_PWM_ConfigChannel+0x344>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d004      	beq.n	800c108 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800c0fe:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800c102:	481c      	ldr	r0, [pc, #112]	; (800c174 <HAL_TIM_PWM_ConfigChannel+0x348>)
 800c104:	f7f7 fbfd 	bl	8003902 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68b9      	ldr	r1, [r7, #8]
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 fe7e 	bl	800ce10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	69da      	ldr	r2, [r3, #28]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c122:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	69da      	ldr	r2, [r3, #28]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c132:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	69d9      	ldr	r1, [r3, #28]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	021a      	lsls	r2, r3, #8
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	61da      	str	r2, [r3, #28]
      break;
 800c148:	e002      	b.n	800c150 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	75fb      	strb	r3, [r7, #23]
      break;
 800c14e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2200      	movs	r2, #0
 800c154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c158:	7dfb      	ldrb	r3, [r7, #23]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	40010000 	.word	0x40010000
 800c168:	40000400 	.word	0x40000400
 800c16c:	40000800 	.word	0x40000800
 800c170:	40000c00 	.word	0x40000c00
 800c174:	080139bc 	.word	0x080139bc

0800c178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d101      	bne.n	800c194 <HAL_TIM_ConfigClockSource+0x1c>
 800c190:	2302      	movs	r3, #2
 800c192:	e2f0      	b.n	800c776 <HAL_TIM_ConfigClockSource+0x5fe>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ac:	d029      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1b6:	d024      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d020      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b10      	cmp	r3, #16
 800c1c6:	d01c      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b20      	cmp	r3, #32
 800c1ce:	d018      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b30      	cmp	r3, #48	; 0x30
 800c1d6:	d014      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b40      	cmp	r3, #64	; 0x40
 800c1de:	d010      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b50      	cmp	r3, #80	; 0x50
 800c1e6:	d00c      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b60      	cmp	r3, #96	; 0x60
 800c1ee:	d008      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b70      	cmp	r3, #112	; 0x70
 800c1f6:	d004      	beq.n	800c202 <HAL_TIM_ConfigClockSource+0x8a>
 800c1f8:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800c1fc:	487c      	ldr	r0, [pc, #496]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x278>)
 800c1fe:	f7f7 fb80 	bl	8003902 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c210:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c218:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68ba      	ldr	r2, [r7, #8]
 800c220:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c22a:	f000 80f1 	beq.w	800c410 <HAL_TIM_ConfigClockSource+0x298>
 800c22e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c232:	f200 8293 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c23a:	d02d      	beq.n	800c298 <HAL_TIM_ConfigClockSource+0x120>
 800c23c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c240:	f200 828c 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c244:	2b70      	cmp	r3, #112	; 0x70
 800c246:	d05d      	beq.n	800c304 <HAL_TIM_ConfigClockSource+0x18c>
 800c248:	2b70      	cmp	r3, #112	; 0x70
 800c24a:	f200 8287 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c24e:	2b60      	cmp	r3, #96	; 0x60
 800c250:	f000 81a0 	beq.w	800c594 <HAL_TIM_ConfigClockSource+0x41c>
 800c254:	2b60      	cmp	r3, #96	; 0x60
 800c256:	f200 8281 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c25a:	2b50      	cmp	r3, #80	; 0x50
 800c25c:	f000 8144 	beq.w	800c4e8 <HAL_TIM_ConfigClockSource+0x370>
 800c260:	2b50      	cmp	r3, #80	; 0x50
 800c262:	f200 827b 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c266:	2b40      	cmp	r3, #64	; 0x40
 800c268:	f000 81f6 	beq.w	800c658 <HAL_TIM_ConfigClockSource+0x4e0>
 800c26c:	2b40      	cmp	r3, #64	; 0x40
 800c26e:	f200 8275 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c272:	2b30      	cmp	r3, #48	; 0x30
 800c274:	f000 8246 	beq.w	800c704 <HAL_TIM_ConfigClockSource+0x58c>
 800c278:	2b30      	cmp	r3, #48	; 0x30
 800c27a:	f200 826f 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c27e:	2b20      	cmp	r3, #32
 800c280:	f000 8240 	beq.w	800c704 <HAL_TIM_ConfigClockSource+0x58c>
 800c284:	2b20      	cmp	r3, #32
 800c286:	f200 8269 	bhi.w	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 823a 	beq.w	800c704 <HAL_TIM_ConfigClockSource+0x58c>
 800c290:	2b10      	cmp	r3, #16
 800c292:	f000 8237 	beq.w	800c704 <HAL_TIM_ConfigClockSource+0x58c>
 800c296:	e261      	b.n	800c75c <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a55      	ldr	r2, [pc, #340]	; (800c3f4 <HAL_TIM_ConfigClockSource+0x27c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	f000 825f 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ac:	f000 8259 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a50      	ldr	r2, [pc, #320]	; (800c3f8 <HAL_TIM_ConfigClockSource+0x280>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	f000 8253 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	4a4e      	ldr	r2, [pc, #312]	; (800c3fc <HAL_TIM_ConfigClockSource+0x284>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	f000 824d 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a4c      	ldr	r2, [pc, #304]	; (800c400 <HAL_TIM_ConfigClockSource+0x288>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	f000 8247 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a4a      	ldr	r2, [pc, #296]	; (800c404 <HAL_TIM_ConfigClockSource+0x28c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	f000 8241 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a48      	ldr	r2, [pc, #288]	; (800c408 <HAL_TIM_ConfigClockSource+0x290>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	f000 823b 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a46      	ldr	r2, [pc, #280]	; (800c40c <HAL_TIM_ConfigClockSource+0x294>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	f000 8235 	beq.w	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
 800c2f8:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800c2fc:	483c      	ldr	r0, [pc, #240]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x278>)
 800c2fe:	f7f7 fb00 	bl	8003902 <assert_failed>
      break;
 800c302:	e22e      	b.n	800c762 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a3a      	ldr	r2, [pc, #232]	; (800c3f4 <HAL_TIM_ConfigClockSource+0x27c>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d01d      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x1d2>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c316:	d018      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x1d2>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a36      	ldr	r2, [pc, #216]	; (800c3f8 <HAL_TIM_ConfigClockSource+0x280>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d013      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x1d2>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a35      	ldr	r2, [pc, #212]	; (800c3fc <HAL_TIM_ConfigClockSource+0x284>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d00e      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x1d2>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a33      	ldr	r2, [pc, #204]	; (800c400 <HAL_TIM_ConfigClockSource+0x288>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d009      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x1d2>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a32      	ldr	r2, [pc, #200]	; (800c404 <HAL_TIM_ConfigClockSource+0x28c>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d004      	beq.n	800c34a <HAL_TIM_ConfigClockSource+0x1d2>
 800c340:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800c344:	482a      	ldr	r0, [pc, #168]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x278>)
 800c346:	f7f7 fadc 	bl	8003902 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	689b      	ldr	r3, [r3, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d013      	beq.n	800c37a <HAL_TIM_ConfigClockSource+0x202>
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35a:	d00e      	beq.n	800c37a <HAL_TIM_ConfigClockSource+0x202>
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c364:	d009      	beq.n	800c37a <HAL_TIM_ConfigClockSource+0x202>
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c36e:	d004      	beq.n	800c37a <HAL_TIM_ConfigClockSource+0x202>
 800c370:	f241 41d1 	movw	r1, #5329	; 0x14d1
 800c374:	481e      	ldr	r0, [pc, #120]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x278>)
 800c376:	f7f7 fac4 	bl	8003902 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c382:	d014      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x236>
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d010      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x236>
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00c      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x236>
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d008      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x236>
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	2b0a      	cmp	r3, #10
 800c3a2:	d004      	beq.n	800c3ae <HAL_TIM_ConfigClockSource+0x236>
 800c3a4:	f241 41d2 	movw	r1, #5330	; 0x14d2
 800c3a8:	4811      	ldr	r0, [pc, #68]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x278>)
 800c3aa:	f7f7 faaa 	bl	8003902 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	2b0f      	cmp	r3, #15
 800c3b4:	d904      	bls.n	800c3c0 <HAL_TIM_ConfigClockSource+0x248>
 800c3b6:	f241 41d3 	movw	r1, #5331	; 0x14d3
 800c3ba:	480d      	ldr	r0, [pc, #52]	; (800c3f0 <HAL_TIM_ConfigClockSource+0x278>)
 800c3bc:	f7f7 faa1 	bl	8003902 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6818      	ldr	r0, [r3, #0]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	6899      	ldr	r1, [r3, #8]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	f000 ff14 	bl	800d1fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68ba      	ldr	r2, [r7, #8]
 800c3ea:	609a      	str	r2, [r3, #8]
      break;
 800c3ec:	e1ba      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x5ec>
 800c3ee:	bf00      	nop
 800c3f0:	080139bc 	.word	0x080139bc
 800c3f4:	40010000 	.word	0x40010000
 800c3f8:	40000400 	.word	0x40000400
 800c3fc:	40000800 	.word	0x40000800
 800c400:	40000c00 	.word	0x40000c00
 800c404:	40014000 	.word	0x40014000
 800c408:	40014400 	.word	0x40014400
 800c40c:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a8a      	ldr	r2, [pc, #552]	; (800c640 <HAL_TIM_ConfigClockSource+0x4c8>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d018      	beq.n	800c44c <HAL_TIM_ConfigClockSource+0x2d4>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c422:	d013      	beq.n	800c44c <HAL_TIM_ConfigClockSource+0x2d4>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a86      	ldr	r2, [pc, #536]	; (800c644 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d00e      	beq.n	800c44c <HAL_TIM_ConfigClockSource+0x2d4>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a85      	ldr	r2, [pc, #532]	; (800c648 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d009      	beq.n	800c44c <HAL_TIM_ConfigClockSource+0x2d4>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a83      	ldr	r2, [pc, #524]	; (800c64c <HAL_TIM_ConfigClockSource+0x4d4>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d004      	beq.n	800c44c <HAL_TIM_ConfigClockSource+0x2d4>
 800c442:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800c446:	4882      	ldr	r0, [pc, #520]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c448:	f7f7 fa5b 	bl	8003902 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d013      	beq.n	800c47c <HAL_TIM_ConfigClockSource+0x304>
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c45c:	d00e      	beq.n	800c47c <HAL_TIM_ConfigClockSource+0x304>
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c466:	d009      	beq.n	800c47c <HAL_TIM_ConfigClockSource+0x304>
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c470:	d004      	beq.n	800c47c <HAL_TIM_ConfigClockSource+0x304>
 800c472:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800c476:	4876      	ldr	r0, [pc, #472]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c478:	f7f7 fa43 	bl	8003902 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c484:	d014      	beq.n	800c4b0 <HAL_TIM_ConfigClockSource+0x338>
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d010      	beq.n	800c4b0 <HAL_TIM_ConfigClockSource+0x338>
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00c      	beq.n	800c4b0 <HAL_TIM_ConfigClockSource+0x338>
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d008      	beq.n	800c4b0 <HAL_TIM_ConfigClockSource+0x338>
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	2b0a      	cmp	r3, #10
 800c4a4:	d004      	beq.n	800c4b0 <HAL_TIM_ConfigClockSource+0x338>
 800c4a6:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800c4aa:	4869      	ldr	r0, [pc, #420]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c4ac:	f7f7 fa29 	bl	8003902 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	2b0f      	cmp	r3, #15
 800c4b6:	d904      	bls.n	800c4c2 <HAL_TIM_ConfigClockSource+0x34a>
 800c4b8:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800c4bc:	4864      	ldr	r0, [pc, #400]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c4be:	f7f7 fa20 	bl	8003902 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6818      	ldr	r0, [r3, #0]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	6899      	ldr	r1, [r3, #8]
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	f000 fe93 	bl	800d1fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	689a      	ldr	r2, [r3, #8]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4e4:	609a      	str	r2, [r3, #8]
      break;
 800c4e6:	e13d      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a54      	ldr	r2, [pc, #336]	; (800c640 <HAL_TIM_ConfigClockSource+0x4c8>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d01d      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x3b6>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4fa:	d018      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x3b6>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a50      	ldr	r2, [pc, #320]	; (800c644 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d013      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x3b6>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4a4f      	ldr	r2, [pc, #316]	; (800c648 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d00e      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x3b6>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a4d      	ldr	r2, [pc, #308]	; (800c64c <HAL_TIM_ConfigClockSource+0x4d4>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d009      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x3b6>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a4d      	ldr	r2, [pc, #308]	; (800c654 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d004      	beq.n	800c52e <HAL_TIM_ConfigClockSource+0x3b6>
 800c524:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800c528:	4849      	ldr	r0, [pc, #292]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c52a:	f7f7 f9ea 	bl	8003902 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c536:	d014      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0x3ea>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d010      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0x3ea>
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00c      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0x3ea>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d008      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0x3ea>
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	2b0a      	cmp	r3, #10
 800c556:	d004      	beq.n	800c562 <HAL_TIM_ConfigClockSource+0x3ea>
 800c558:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800c55c:	483c      	ldr	r0, [pc, #240]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c55e:	f7f7 f9d0 	bl	8003902 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	2b0f      	cmp	r3, #15
 800c568:	d904      	bls.n	800c574 <HAL_TIM_ConfigClockSource+0x3fc>
 800c56a:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800c56e:	4838      	ldr	r0, [pc, #224]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c570:	f7f7 f9c7 	bl	8003902 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	6859      	ldr	r1, [r3, #4]
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	461a      	mov	r2, r3
 800c582:	f000 fd0b 	bl	800cf9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2150      	movs	r1, #80	; 0x50
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fe1a 	bl	800d1c6 <TIM_ITRx_SetConfig>
      break;
 800c592:	e0e7      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a29      	ldr	r2, [pc, #164]	; (800c640 <HAL_TIM_ConfigClockSource+0x4c8>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d01d      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x462>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5a6:	d018      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x462>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a25      	ldr	r2, [pc, #148]	; (800c644 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d013      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x462>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a24      	ldr	r2, [pc, #144]	; (800c648 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00e      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x462>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a22      	ldr	r2, [pc, #136]	; (800c64c <HAL_TIM_ConfigClockSource+0x4d4>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d009      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x462>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a22      	ldr	r2, [pc, #136]	; (800c654 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d004      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x462>
 800c5d0:	f241 510a 	movw	r1, #5386	; 0x150a
 800c5d4:	481e      	ldr	r0, [pc, #120]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c5d6:	f7f7 f994 	bl	8003902 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e2:	d014      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x496>
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d010      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x496>
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00c      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x496>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d008      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x496>
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	2b0a      	cmp	r3, #10
 800c602:	d004      	beq.n	800c60e <HAL_TIM_ConfigClockSource+0x496>
 800c604:	f241 510d 	movw	r1, #5389	; 0x150d
 800c608:	4811      	ldr	r0, [pc, #68]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c60a:	f7f7 f97a 	bl	8003902 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	2b0f      	cmp	r3, #15
 800c614:	d904      	bls.n	800c620 <HAL_TIM_ConfigClockSource+0x4a8>
 800c616:	f241 510e 	movw	r1, #5390	; 0x150e
 800c61a:	480d      	ldr	r0, [pc, #52]	; (800c650 <HAL_TIM_ConfigClockSource+0x4d8>)
 800c61c:	f7f7 f971 	bl	8003902 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6818      	ldr	r0, [r3, #0]
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	6859      	ldr	r1, [r3, #4]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	461a      	mov	r2, r3
 800c62e:	f000 fd21 	bl	800d074 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2160      	movs	r1, #96	; 0x60
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fdc4 	bl	800d1c6 <TIM_ITRx_SetConfig>
      break;
 800c63e:	e091      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x5ec>
 800c640:	40010000 	.word	0x40010000
 800c644:	40000400 	.word	0x40000400
 800c648:	40000800 	.word	0x40000800
 800c64c:	40000c00 	.word	0x40000c00
 800c650:	080139bc 	.word	0x080139bc
 800c654:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a48      	ldr	r2, [pc, #288]	; (800c780 <HAL_TIM_ConfigClockSource+0x608>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d01d      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0x526>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c66a:	d018      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0x526>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a44      	ldr	r2, [pc, #272]	; (800c784 <HAL_TIM_ConfigClockSource+0x60c>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d013      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0x526>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a43      	ldr	r2, [pc, #268]	; (800c788 <HAL_TIM_ConfigClockSource+0x610>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d00e      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0x526>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a41      	ldr	r2, [pc, #260]	; (800c78c <HAL_TIM_ConfigClockSource+0x614>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d009      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0x526>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a40      	ldr	r2, [pc, #256]	; (800c790 <HAL_TIM_ConfigClockSource+0x618>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d004      	beq.n	800c69e <HAL_TIM_ConfigClockSource+0x526>
 800c694:	f241 511a 	movw	r1, #5402	; 0x151a
 800c698:	483e      	ldr	r0, [pc, #248]	; (800c794 <HAL_TIM_ConfigClockSource+0x61c>)
 800c69a:	f7f7 f932 	bl	8003902 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6a6:	d014      	beq.n	800c6d2 <HAL_TIM_ConfigClockSource+0x55a>
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d010      	beq.n	800c6d2 <HAL_TIM_ConfigClockSource+0x55a>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d00c      	beq.n	800c6d2 <HAL_TIM_ConfigClockSource+0x55a>
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d008      	beq.n	800c6d2 <HAL_TIM_ConfigClockSource+0x55a>
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	2b0a      	cmp	r3, #10
 800c6c6:	d004      	beq.n	800c6d2 <HAL_TIM_ConfigClockSource+0x55a>
 800c6c8:	f241 511d 	movw	r1, #5405	; 0x151d
 800c6cc:	4831      	ldr	r0, [pc, #196]	; (800c794 <HAL_TIM_ConfigClockSource+0x61c>)
 800c6ce:	f7f7 f918 	bl	8003902 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	2b0f      	cmp	r3, #15
 800c6d8:	d904      	bls.n	800c6e4 <HAL_TIM_ConfigClockSource+0x56c>
 800c6da:	f241 511e 	movw	r1, #5406	; 0x151e
 800c6de:	482d      	ldr	r0, [pc, #180]	; (800c794 <HAL_TIM_ConfigClockSource+0x61c>)
 800c6e0:	f7f7 f90f 	bl	8003902 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6818      	ldr	r0, [r3, #0]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	6859      	ldr	r1, [r3, #4]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	f000 fc53 	bl	800cf9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2140      	movs	r1, #64	; 0x40
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 fd62 	bl	800d1c6 <TIM_ITRx_SetConfig>
      break;
 800c702:	e02f      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a1d      	ldr	r2, [pc, #116]	; (800c780 <HAL_TIM_ConfigClockSource+0x608>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d01d      	beq.n	800c74a <HAL_TIM_ConfigClockSource+0x5d2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c716:	d018      	beq.n	800c74a <HAL_TIM_ConfigClockSource+0x5d2>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a19      	ldr	r2, [pc, #100]	; (800c784 <HAL_TIM_ConfigClockSource+0x60c>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d013      	beq.n	800c74a <HAL_TIM_ConfigClockSource+0x5d2>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a18      	ldr	r2, [pc, #96]	; (800c788 <HAL_TIM_ConfigClockSource+0x610>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00e      	beq.n	800c74a <HAL_TIM_ConfigClockSource+0x5d2>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a16      	ldr	r2, [pc, #88]	; (800c78c <HAL_TIM_ConfigClockSource+0x614>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d009      	beq.n	800c74a <HAL_TIM_ConfigClockSource+0x5d2>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a15      	ldr	r2, [pc, #84]	; (800c790 <HAL_TIM_ConfigClockSource+0x618>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d004      	beq.n	800c74a <HAL_TIM_ConfigClockSource+0x5d2>
 800c740:	f241 512d 	movw	r1, #5421	; 0x152d
 800c744:	4813      	ldr	r0, [pc, #76]	; (800c794 <HAL_TIM_ConfigClockSource+0x61c>)
 800c746:	f7f7 f8dc 	bl	8003902 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4619      	mov	r1, r3
 800c754:	4610      	mov	r0, r2
 800c756:	f000 fd36 	bl	800d1c6 <TIM_ITRx_SetConfig>
      break;
 800c75a:	e003      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
      break;
 800c760:	e000      	b.n	800c764 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800c762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c774:	7bfb      	ldrb	r3, [r7, #15]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	40010000 	.word	0x40010000
 800c784:	40000400 	.word	0x40000400
 800c788:	40000800 	.word	0x40000800
 800c78c:	40000c00 	.word	0x40000c00
 800c790:	40014000 	.word	0x40014000
 800c794:	080139bc 	.word	0x080139bc

0800c798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7a0:	bf00      	nop
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7b4:	bf00      	nop
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c7c8:	bf00      	nop
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c808:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d107      	bne.n	800c824 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2201      	movs	r2, #1
 800c818:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c822:	e02a      	b.n	800c87a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d107      	bne.n	800c83e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2202      	movs	r2, #2
 800c832:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c83c:	e01d      	b.n	800c87a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	429a      	cmp	r2, r3
 800c846:	d107      	bne.n	800c858 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2204      	movs	r2, #4
 800c84c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c856:	e010      	b.n	800c87a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d107      	bne.n	800c872 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2208      	movs	r2, #8
 800c866:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c870:	e003      	b.n	800c87a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2201      	movs	r2, #1
 800c876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f7ff ffb4 	bl	800c7e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2200      	movs	r2, #0
 800c884:	771a      	strb	r2, [r3, #28]
}
 800c886:	bf00      	nop
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d10b      	bne.n	800c8be <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	69db      	ldr	r3, [r3, #28]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d136      	bne.n	800c922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8bc:	e031      	b.n	800c922 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d10b      	bne.n	800c8e0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d125      	bne.n	800c922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2201      	movs	r2, #1
 800c8da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8de:	e020      	b.n	800c922 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d10b      	bne.n	800c902 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2204      	movs	r2, #4
 800c8ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	69db      	ldr	r3, [r3, #28]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d114      	bne.n	800c922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c900:	e00f      	b.n	800c922 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d10a      	bne.n	800c922 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2208      	movs	r2, #8
 800c910:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d103      	bne.n	800c922 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f7f6 fa94 	bl	8002e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	771a      	strb	r2, [r3, #28]
}
 800c92e:	bf00      	nop
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d103      	bne.n	800c956 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2201      	movs	r2, #1
 800c952:	771a      	strb	r2, [r3, #28]
 800c954:	e019      	b.n	800c98a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d103      	bne.n	800c968 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2202      	movs	r2, #2
 800c964:	771a      	strb	r2, [r3, #28]
 800c966:	e010      	b.n	800c98a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d103      	bne.n	800c97a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2204      	movs	r2, #4
 800c976:	771a      	strb	r2, [r3, #28]
 800c978:	e007      	b.n	800c98a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	429a      	cmp	r2, r3
 800c982:	d102      	bne.n	800c98a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2208      	movs	r2, #8
 800c988:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f7ff ff18 	bl	800c7c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2200      	movs	r2, #0
 800c994:	771a      	strb	r2, [r3, #28]
}
 800c996:	bf00      	nop
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
	...

0800c9a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a34      	ldr	r2, [pc, #208]	; (800ca84 <TIM_Base_SetConfig+0xe4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d00f      	beq.n	800c9d8 <TIM_Base_SetConfig+0x38>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9be:	d00b      	beq.n	800c9d8 <TIM_Base_SetConfig+0x38>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	4a31      	ldr	r2, [pc, #196]	; (800ca88 <TIM_Base_SetConfig+0xe8>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d007      	beq.n	800c9d8 <TIM_Base_SetConfig+0x38>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	4a30      	ldr	r2, [pc, #192]	; (800ca8c <TIM_Base_SetConfig+0xec>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d003      	beq.n	800c9d8 <TIM_Base_SetConfig+0x38>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	4a2f      	ldr	r2, [pc, #188]	; (800ca90 <TIM_Base_SetConfig+0xf0>)
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d108      	bne.n	800c9ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	4a25      	ldr	r2, [pc, #148]	; (800ca84 <TIM_Base_SetConfig+0xe4>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d01b      	beq.n	800ca2a <TIM_Base_SetConfig+0x8a>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f8:	d017      	beq.n	800ca2a <TIM_Base_SetConfig+0x8a>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	4a22      	ldr	r2, [pc, #136]	; (800ca88 <TIM_Base_SetConfig+0xe8>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d013      	beq.n	800ca2a <TIM_Base_SetConfig+0x8a>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	4a21      	ldr	r2, [pc, #132]	; (800ca8c <TIM_Base_SetConfig+0xec>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d00f      	beq.n	800ca2a <TIM_Base_SetConfig+0x8a>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	4a20      	ldr	r2, [pc, #128]	; (800ca90 <TIM_Base_SetConfig+0xf0>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d00b      	beq.n	800ca2a <TIM_Base_SetConfig+0x8a>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	4a1f      	ldr	r2, [pc, #124]	; (800ca94 <TIM_Base_SetConfig+0xf4>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d007      	beq.n	800ca2a <TIM_Base_SetConfig+0x8a>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a1e      	ldr	r2, [pc, #120]	; (800ca98 <TIM_Base_SetConfig+0xf8>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d003      	beq.n	800ca2a <TIM_Base_SetConfig+0x8a>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a1d      	ldr	r2, [pc, #116]	; (800ca9c <TIM_Base_SetConfig+0xfc>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d108      	bne.n	800ca3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	689a      	ldr	r2, [r3, #8]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a08      	ldr	r2, [pc, #32]	; (800ca84 <TIM_Base_SetConfig+0xe4>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d103      	bne.n	800ca70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	691a      	ldr	r2, [r3, #16]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	615a      	str	r2, [r3, #20]
}
 800ca76:	bf00      	nop
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	40010000 	.word	0x40010000
 800ca88:	40000400 	.word	0x40000400
 800ca8c:	40000800 	.word	0x40000800
 800ca90:	40000c00 	.word	0x40000c00
 800ca94:	40014000 	.word	0x40014000
 800ca98:	40014400 	.word	0x40014400
 800ca9c:	40014800 	.word	0x40014800

0800caa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	f023 0201 	bic.w	r2, r3, #1
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f023 0303 	bic.w	r3, r3, #3
 800cad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	4313      	orrs	r3, r2
 800cae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	f023 0302 	bic.w	r3, r3, #2
 800cae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a30      	ldr	r2, [pc, #192]	; (800cbb8 <TIM_OC1_SetConfig+0x118>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d119      	bne.n	800cb30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d008      	beq.n	800cb16 <TIM_OC1_SetConfig+0x76>
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	2b08      	cmp	r3, #8
 800cb0a:	d004      	beq.n	800cb16 <TIM_OC1_SetConfig+0x76>
 800cb0c:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800cb10:	482a      	ldr	r0, [pc, #168]	; (800cbbc <TIM_OC1_SetConfig+0x11c>)
 800cb12:	f7f6 fef6 	bl	8003902 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f023 0308 	bic.w	r3, r3, #8
 800cb1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	f023 0304 	bic.w	r3, r3, #4
 800cb2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	4a21      	ldr	r2, [pc, #132]	; (800cbb8 <TIM_OC1_SetConfig+0x118>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d12d      	bne.n	800cb94 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb40:	d008      	beq.n	800cb54 <TIM_OC1_SetConfig+0xb4>
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d004      	beq.n	800cb54 <TIM_OC1_SetConfig+0xb4>
 800cb4a:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800cb4e:	481b      	ldr	r0, [pc, #108]	; (800cbbc <TIM_OC1_SetConfig+0x11c>)
 800cb50:	f7f6 fed7 	bl	8003902 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb5c:	d008      	beq.n	800cb70 <TIM_OC1_SetConfig+0xd0>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d004      	beq.n	800cb70 <TIM_OC1_SetConfig+0xd0>
 800cb66:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800cb6a:	4814      	ldr	r0, [pc, #80]	; (800cbbc <TIM_OC1_SetConfig+0x11c>)
 800cb6c:	f7f6 fec9 	bl	8003902 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	695b      	ldr	r3, [r3, #20]
 800cb84:	693a      	ldr	r2, [r7, #16]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	699b      	ldr	r3, [r3, #24]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	693a      	ldr	r2, [r7, #16]
 800cb98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	621a      	str	r2, [r3, #32]
}
 800cbae:	bf00      	nop
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	40010000 	.word	0x40010000
 800cbbc:	080139bc 	.word	0x080139bc

0800cbc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1b      	ldr	r3, [r3, #32]
 800cbce:	f023 0210 	bic.w	r2, r3, #16
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	685b      	ldr	r3, [r3, #4]
 800cbe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	021b      	lsls	r3, r3, #8
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f023 0320 	bic.w	r3, r3, #32
 800cc0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	011b      	lsls	r3, r3, #4
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4a31      	ldr	r2, [pc, #196]	; (800cce0 <TIM_OC2_SetConfig+0x120>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d11a      	bne.n	800cc56 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d008      	beq.n	800cc3a <TIM_OC2_SetConfig+0x7a>
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	2b08      	cmp	r3, #8
 800cc2e:	d004      	beq.n	800cc3a <TIM_OC2_SetConfig+0x7a>
 800cc30:	f641 3116 	movw	r1, #6934	; 0x1b16
 800cc34:	482b      	ldr	r0, [pc, #172]	; (800cce4 <TIM_OC2_SetConfig+0x124>)
 800cc36:	f7f6 fe64 	bl	8003902 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	011b      	lsls	r3, r3, #4
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc54:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a21      	ldr	r2, [pc, #132]	; (800cce0 <TIM_OC2_SetConfig+0x120>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d12f      	bne.n	800ccbe <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc66:	d008      	beq.n	800cc7a <TIM_OC2_SetConfig+0xba>
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d004      	beq.n	800cc7a <TIM_OC2_SetConfig+0xba>
 800cc70:	f641 3124 	movw	r1, #6948	; 0x1b24
 800cc74:	481b      	ldr	r0, [pc, #108]	; (800cce4 <TIM_OC2_SetConfig+0x124>)
 800cc76:	f7f6 fe44 	bl	8003902 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc82:	d008      	beq.n	800cc96 <TIM_OC2_SetConfig+0xd6>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d004      	beq.n	800cc96 <TIM_OC2_SetConfig+0xd6>
 800cc8c:	f641 3125 	movw	r1, #6949	; 0x1b25
 800cc90:	4814      	ldr	r0, [pc, #80]	; (800cce4 <TIM_OC2_SetConfig+0x124>)
 800cc92:	f7f6 fe36 	bl	8003902 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cc9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	693a      	ldr	r2, [r7, #16]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	4313      	orrs	r3, r2
 800ccbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	693a      	ldr	r2, [r7, #16]
 800ccc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	697a      	ldr	r2, [r7, #20]
 800ccd6:	621a      	str	r2, [r3, #32]
}
 800ccd8:	bf00      	nop
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}
 800cce0:	40010000 	.word	0x40010000
 800cce4:	080139bc 	.word	0x080139bc

0800cce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f023 0303 	bic.w	r3, r3, #3
 800cd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	021b      	lsls	r3, r3, #8
 800cd38:	697a      	ldr	r2, [r7, #20]
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a31      	ldr	r2, [pc, #196]	; (800ce08 <TIM_OC3_SetConfig+0x120>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d11a      	bne.n	800cd7c <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d008      	beq.n	800cd60 <TIM_OC3_SetConfig+0x78>
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d004      	beq.n	800cd60 <TIM_OC3_SetConfig+0x78>
 800cd56:	f641 3161 	movw	r1, #7009	; 0x1b61
 800cd5a:	482c      	ldr	r0, [pc, #176]	; (800ce0c <TIM_OC3_SetConfig+0x124>)
 800cd5c:	f7f6 fdd1 	bl	8003902 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cd66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	021b      	lsls	r3, r3, #8
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a22      	ldr	r2, [pc, #136]	; (800ce08 <TIM_OC3_SetConfig+0x120>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d12f      	bne.n	800cde4 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd8c:	d008      	beq.n	800cda0 <TIM_OC3_SetConfig+0xb8>
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d004      	beq.n	800cda0 <TIM_OC3_SetConfig+0xb8>
 800cd96:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800cd9a:	481c      	ldr	r0, [pc, #112]	; (800ce0c <TIM_OC3_SetConfig+0x124>)
 800cd9c:	f7f6 fdb1 	bl	8003902 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cda8:	d008      	beq.n	800cdbc <TIM_OC3_SetConfig+0xd4>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d004      	beq.n	800cdbc <TIM_OC3_SetConfig+0xd4>
 800cdb2:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800cdb6:	4815      	ldr	r0, [pc, #84]	; (800ce0c <TIM_OC3_SetConfig+0x124>)
 800cdb8:	f7f6 fda3 	bl	8003902 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cdca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	011b      	lsls	r3, r3, #4
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	011b      	lsls	r3, r3, #4
 800cdde:	693a      	ldr	r2, [r7, #16]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	693a      	ldr	r2, [r7, #16]
 800cde8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	68fa      	ldr	r2, [r7, #12]
 800cdee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	685a      	ldr	r2, [r3, #4]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	621a      	str	r2, [r3, #32]
}
 800cdfe:	bf00      	nop
 800ce00:	3718      	adds	r7, #24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	40010000 	.word	0x40010000
 800ce0c:	080139bc 	.word	0x080139bc

0800ce10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a1b      	ldr	r3, [r3, #32]
 800ce1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a1b      	ldr	r3, [r3, #32]
 800ce2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	021b      	lsls	r3, r3, #8
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	031b      	lsls	r3, r3, #12
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	4a16      	ldr	r2, [pc, #88]	; (800cec4 <TIM_OC4_SetConfig+0xb4>)
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d117      	bne.n	800cea0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce78:	d008      	beq.n	800ce8c <TIM_OC4_SetConfig+0x7c>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	695b      	ldr	r3, [r3, #20]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d004      	beq.n	800ce8c <TIM_OC4_SetConfig+0x7c>
 800ce82:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800ce86:	4810      	ldr	r0, [pc, #64]	; (800cec8 <TIM_OC4_SetConfig+0xb8>)
 800ce88:	f7f6 fd3b 	bl	8003902 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	019b      	lsls	r3, r3, #6
 800ce9a:	697a      	ldr	r2, [r7, #20]
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	697a      	ldr	r2, [r7, #20]
 800cea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	693a      	ldr	r2, [r7, #16]
 800ceb8:	621a      	str	r2, [r3, #32]
}
 800ceba:	bf00      	nop
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	40010000 	.word	0x40010000
 800cec8:	080139bc 	.word	0x080139bc

0800cecc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cecc:	b480      	push	{r7}
 800cece:	b087      	sub	sp, #28
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	607a      	str	r2, [r7, #4]
 800ced8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	f023 0201 	bic.w	r2, r3, #1
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6a1b      	ldr	r3, [r3, #32]
 800cef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	4a24      	ldr	r2, [pc, #144]	; (800cf88 <TIM_TI1_SetConfig+0xbc>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d013      	beq.n	800cf22 <TIM_TI1_SetConfig+0x56>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf00:	d00f      	beq.n	800cf22 <TIM_TI1_SetConfig+0x56>
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	4a21      	ldr	r2, [pc, #132]	; (800cf8c <TIM_TI1_SetConfig+0xc0>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d00b      	beq.n	800cf22 <TIM_TI1_SetConfig+0x56>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	4a20      	ldr	r2, [pc, #128]	; (800cf90 <TIM_TI1_SetConfig+0xc4>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d007      	beq.n	800cf22 <TIM_TI1_SetConfig+0x56>
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	4a1f      	ldr	r2, [pc, #124]	; (800cf94 <TIM_TI1_SetConfig+0xc8>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d003      	beq.n	800cf22 <TIM_TI1_SetConfig+0x56>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4a1e      	ldr	r2, [pc, #120]	; (800cf98 <TIM_TI1_SetConfig+0xcc>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d101      	bne.n	800cf26 <TIM_TI1_SetConfig+0x5a>
 800cf22:	2301      	movs	r3, #1
 800cf24:	e000      	b.n	800cf28 <TIM_TI1_SetConfig+0x5c>
 800cf26:	2300      	movs	r3, #0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d008      	beq.n	800cf3e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	f023 0303 	bic.w	r3, r3, #3
 800cf32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	617b      	str	r3, [r7, #20]
 800cf3c:	e003      	b.n	800cf46 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	f043 0301 	orr.w	r3, r3, #1
 800cf44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	011b      	lsls	r3, r3, #4
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	f023 030a 	bic.w	r3, r3, #10
 800cf60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	f003 030a 	and.w	r3, r3, #10
 800cf68:	693a      	ldr	r2, [r7, #16]
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	697a      	ldr	r2, [r7, #20]
 800cf72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	693a      	ldr	r2, [r7, #16]
 800cf78:	621a      	str	r2, [r3, #32]
}
 800cf7a:	bf00      	nop
 800cf7c:	371c      	adds	r7, #28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	40010000 	.word	0x40010000
 800cf8c:	40000400 	.word	0x40000400
 800cf90:	40000800 	.word	0x40000800
 800cf94:	40000c00 	.word	0x40000c00
 800cf98:	40014000 	.word	0x40014000

0800cf9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b087      	sub	sp, #28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	6a1b      	ldr	r3, [r3, #32]
 800cfac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	f023 0201 	bic.w	r2, r3, #1
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	011b      	lsls	r3, r3, #4
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f023 030a 	bic.w	r3, r3, #10
 800cfd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	693a      	ldr	r2, [r7, #16]
 800cfe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	697a      	ldr	r2, [r7, #20]
 800cfec:	621a      	str	r2, [r3, #32]
}
 800cfee:	bf00      	nop
 800cff0:	371c      	adds	r7, #28
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b087      	sub	sp, #28
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	607a      	str	r2, [r7, #4]
 800d006:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6a1b      	ldr	r3, [r3, #32]
 800d00c:	f023 0210 	bic.w	r2, r3, #16
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	699b      	ldr	r3, [r3, #24]
 800d018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6a1b      	ldr	r3, [r3, #32]
 800d01e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	021b      	lsls	r3, r3, #8
 800d02c:	697a      	ldr	r2, [r7, #20]
 800d02e:	4313      	orrs	r3, r2
 800d030:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	031b      	lsls	r3, r3, #12
 800d03e:	b29b      	uxth	r3, r3
 800d040:	697a      	ldr	r2, [r7, #20]
 800d042:	4313      	orrs	r3, r2
 800d044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d04c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	011b      	lsls	r3, r3, #4
 800d052:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d056:	693a      	ldr	r2, [r7, #16]
 800d058:	4313      	orrs	r3, r2
 800d05a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	697a      	ldr	r2, [r7, #20]
 800d060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	621a      	str	r2, [r3, #32]
}
 800d068:	bf00      	nop
 800d06a:	371c      	adds	r7, #28
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d074:	b480      	push	{r7}
 800d076:	b087      	sub	sp, #28
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6a1b      	ldr	r3, [r3, #32]
 800d084:	f023 0210 	bic.w	r2, r3, #16
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	699b      	ldr	r3, [r3, #24]
 800d090:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d09e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	031b      	lsls	r3, r3, #12
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d0b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	011b      	lsls	r3, r3, #4
 800d0b6:	693a      	ldr	r2, [r7, #16]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	693a      	ldr	r2, [r7, #16]
 800d0c6:	621a      	str	r2, [r3, #32]
}
 800d0c8:	bf00      	nop
 800d0ca:	371c      	adds	r7, #28
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b087      	sub	sp, #28
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	607a      	str	r2, [r7, #4]
 800d0e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6a1b      	ldr	r3, [r3, #32]
 800d0e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	69db      	ldr	r3, [r3, #28]
 800d0f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f023 0303 	bic.w	r3, r3, #3
 800d100:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4313      	orrs	r3, r2
 800d108:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d110:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	011b      	lsls	r3, r3, #4
 800d116:	b2db      	uxtb	r3, r3
 800d118:	697a      	ldr	r2, [r7, #20]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d124:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	021b      	lsls	r3, r3, #8
 800d12a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	4313      	orrs	r3, r2
 800d132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	621a      	str	r2, [r3, #32]
}
 800d140:	bf00      	nop
 800d142:	371c      	adds	r7, #28
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	69db      	ldr	r3, [r3, #28]
 800d16a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	6a1b      	ldr	r3, [r3, #32]
 800d170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d178:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	021b      	lsls	r3, r3, #8
 800d17e:	697a      	ldr	r2, [r7, #20]
 800d180:	4313      	orrs	r3, r2
 800d182:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d18a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	031b      	lsls	r3, r3, #12
 800d190:	b29b      	uxth	r3, r3
 800d192:	697a      	ldr	r2, [r7, #20]
 800d194:	4313      	orrs	r3, r2
 800d196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d19e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	031b      	lsls	r3, r3, #12
 800d1a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	697a      	ldr	r2, [r7, #20]
 800d1b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	621a      	str	r2, [r3, #32]
}
 800d1ba:	bf00      	nop
 800d1bc:	371c      	adds	r7, #28
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr

0800d1c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1c6:	b480      	push	{r7}
 800d1c8:	b085      	sub	sp, #20
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
 800d1ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	f043 0307 	orr.w	r3, r3, #7
 800d1e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	609a      	str	r2, [r3, #8]
}
 800d1f0:	bf00      	nop
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b087      	sub	sp, #28
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	021a      	lsls	r2, r3, #8
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	431a      	orrs	r2, r3
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	4313      	orrs	r3, r2
 800d224:	697a      	ldr	r2, [r7, #20]
 800d226:	4313      	orrs	r3, r2
 800d228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	697a      	ldr	r2, [r7, #20]
 800d22e:	609a      	str	r2, [r3, #8]
}
 800d230:	bf00      	nop
 800d232:	371c      	adds	r7, #28
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	4a2a      	ldr	r2, [pc, #168]	; (800d2f4 <TIM_CCxChannelCmd+0xb8>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d020      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d256:	d01c      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	4a27      	ldr	r2, [pc, #156]	; (800d2f8 <TIM_CCxChannelCmd+0xbc>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d018      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4a26      	ldr	r2, [pc, #152]	; (800d2fc <TIM_CCxChannelCmd+0xc0>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d014      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	4a25      	ldr	r2, [pc, #148]	; (800d300 <TIM_CCxChannelCmd+0xc4>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d010      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	4a24      	ldr	r2, [pc, #144]	; (800d304 <TIM_CCxChannelCmd+0xc8>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d00c      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	4a23      	ldr	r2, [pc, #140]	; (800d308 <TIM_CCxChannelCmd+0xcc>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d008      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	4a22      	ldr	r2, [pc, #136]	; (800d30c <TIM_CCxChannelCmd+0xd0>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d004      	beq.n	800d292 <TIM_CCxChannelCmd+0x56>
 800d288:	f641 5198 	movw	r1, #7576	; 0x1d98
 800d28c:	4820      	ldr	r0, [pc, #128]	; (800d310 <TIM_CCxChannelCmd+0xd4>)
 800d28e:	f7f6 fb38 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d010      	beq.n	800d2ba <TIM_CCxChannelCmd+0x7e>
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2b04      	cmp	r3, #4
 800d29c:	d00d      	beq.n	800d2ba <TIM_CCxChannelCmd+0x7e>
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2b08      	cmp	r3, #8
 800d2a2:	d00a      	beq.n	800d2ba <TIM_CCxChannelCmd+0x7e>
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2b0c      	cmp	r3, #12
 800d2a8:	d007      	beq.n	800d2ba <TIM_CCxChannelCmd+0x7e>
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	2b3c      	cmp	r3, #60	; 0x3c
 800d2ae:	d004      	beq.n	800d2ba <TIM_CCxChannelCmd+0x7e>
 800d2b0:	f641 5199 	movw	r1, #7577	; 0x1d99
 800d2b4:	4816      	ldr	r0, [pc, #88]	; (800d310 <TIM_CCxChannelCmd+0xd4>)
 800d2b6:	f7f6 fb24 	bl	8003902 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	f003 031f 	and.w	r3, r3, #31
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6a1a      	ldr	r2, [r3, #32]
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	43db      	mvns	r3, r3
 800d2d0:	401a      	ands	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6a1a      	ldr	r2, [r3, #32]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	f003 031f 	and.w	r3, r3, #31
 800d2e0:	6879      	ldr	r1, [r7, #4]
 800d2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	621a      	str	r2, [r3, #32]
}
 800d2ec:	bf00      	nop
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	40010000 	.word	0x40010000
 800d2f8:	40000400 	.word	0x40000400
 800d2fc:	40000800 	.word	0x40000800
 800d300:	40000c00 	.word	0x40000c00
 800d304:	40014000 	.word	0x40014000
 800d308:	40014400 	.word	0x40014400
 800d30c:	40014800 	.word	0x40014800
 800d310:	080139bc 	.word	0x080139bc

0800d314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a55      	ldr	r2, [pc, #340]	; (800d478 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d018      	beq.n	800d35a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d330:	d013      	beq.n	800d35a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a51      	ldr	r2, [pc, #324]	; (800d47c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d00e      	beq.n	800d35a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a4f      	ldr	r2, [pc, #316]	; (800d480 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d009      	beq.n	800d35a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a4e      	ldr	r2, [pc, #312]	; (800d484 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800d34c:	4293      	cmp	r3, r2
 800d34e:	d004      	beq.n	800d35a <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d350:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800d354:	484c      	ldr	r0, [pc, #304]	; (800d488 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d356:	f7f6 fad4 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d020      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b10      	cmp	r3, #16
 800d368:	d01c      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b20      	cmp	r3, #32
 800d370:	d018      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b30      	cmp	r3, #48	; 0x30
 800d378:	d014      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b40      	cmp	r3, #64	; 0x40
 800d380:	d010      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b50      	cmp	r3, #80	; 0x50
 800d388:	d00c      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b60      	cmp	r3, #96	; 0x60
 800d390:	d008      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	2b70      	cmp	r3, #112	; 0x70
 800d398:	d004      	beq.n	800d3a4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d39a:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800d39e:	483a      	ldr	r0, [pc, #232]	; (800d488 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d3a0:	f7f6 faaf 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	2b80      	cmp	r3, #128	; 0x80
 800d3aa:	d008      	beq.n	800d3be <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d004      	beq.n	800d3be <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800d3b4:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800d3b8:	4833      	ldr	r0, [pc, #204]	; (800d488 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d3ba:	f7f6 faa2 	bl	8003902 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d101      	bne.n	800d3cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d3c8:	2302      	movs	r3, #2
 800d3ca:	e050      	b.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a1b      	ldr	r2, [pc, #108]	; (800d478 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d018      	beq.n	800d442 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d418:	d013      	beq.n	800d442 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	4a17      	ldr	r2, [pc, #92]	; (800d47c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d00e      	beq.n	800d442 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a15      	ldr	r2, [pc, #84]	; (800d480 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d009      	beq.n	800d442 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4a14      	ldr	r2, [pc, #80]	; (800d484 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d004      	beq.n	800d442 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a13      	ldr	r2, [pc, #76]	; (800d48c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d10c      	bne.n	800d45c <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	68ba      	ldr	r2, [r7, #8]
 800d450:	4313      	orrs	r3, r2
 800d452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d46c:	2300      	movs	r3, #0
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	40010000 	.word	0x40010000
 800d47c:	40000400 	.word	0x40000400
 800d480:	40000800 	.word	0x40000800
 800d484:	40000c00 	.word	0x40000c00
 800d488:	080139f4 	.word	0x080139f4
 800d48c:	40014000 	.word	0x40014000

0800d490 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d49a:	2300      	movs	r3, #0
 800d49c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4a5c      	ldr	r2, [pc, #368]	; (800d614 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d004      	beq.n	800d4b2 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 800d4a8:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800d4ac:	485a      	ldr	r0, [pc, #360]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d4ae:	f7f6 fa28 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4ba:	d008      	beq.n	800d4ce <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d004      	beq.n	800d4ce <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800d4c4:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800d4c8:	4853      	ldr	r0, [pc, #332]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d4ca:	f7f6 fa1a 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4d6:	d008      	beq.n	800d4ea <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800d4e0:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800d4e4:	484c      	ldr	r0, [pc, #304]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d4e6:	f7f6 fa0c 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d013      	beq.n	800d51a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4fa:	d00e      	beq.n	800d51a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d504:	d009      	beq.n	800d51a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d50e:	d004      	beq.n	800d51a <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d510:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800d514:	4840      	ldr	r0, [pc, #256]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d516:	f7f6 f9f4 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	2bff      	cmp	r3, #255	; 0xff
 800d520:	d904      	bls.n	800d52c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800d522:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800d526:	483c      	ldr	r0, [pc, #240]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d528:	f7f6 f9eb 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	691b      	ldr	r3, [r3, #16]
 800d530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d534:	d008      	beq.n	800d548 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d004      	beq.n	800d548 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d53e:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800d542:	4835      	ldr	r0, [pc, #212]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d544:	f7f6 f9dd 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	695b      	ldr	r3, [r3, #20]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d009      	beq.n	800d564 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	695b      	ldr	r3, [r3, #20]
 800d554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d558:	d004      	beq.n	800d564 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800d55a:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800d55e:	482e      	ldr	r0, [pc, #184]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d560:	f7f6 f9cf 	bl	8003902 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	69db      	ldr	r3, [r3, #28]
 800d568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d56c:	d008      	beq.n	800d580 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d004      	beq.n	800d580 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800d576:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800d57a:	4827      	ldr	r0, [pc, #156]	; (800d618 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d57c:	f7f6 f9c1 	bl	8003902 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d586:	2b01      	cmp	r3, #1
 800d588:	d101      	bne.n	800d58e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800d58a:	2302      	movs	r3, #2
 800d58c:	e03d      	b.n	800d60a <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4313      	orrs	r3, r2
 800d5cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	695b      	ldr	r3, [r3, #20]
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68fa      	ldr	r2, [r7, #12]
 800d5fe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d608:	2300      	movs	r3, #0
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	40010000 	.word	0x40010000
 800d618:	080139f4 	.word	0x080139f4

0800d61c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d644:	b084      	sub	sp, #16
 800d646:	b580      	push	{r7, lr}
 800d648:	b084      	sub	sp, #16
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	f107 001c 	add.w	r0, r7, #28
 800d652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d122      	bne.n	800d6a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d686:	2b01      	cmp	r3, #1
 800d688:	d105      	bne.n	800d696 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 f9a0 	bl	800d9dc <USB_CoreReset>
 800d69c:	4603      	mov	r3, r0
 800d69e:	73fb      	strb	r3, [r7, #15]
 800d6a0:	e01a      	b.n	800d6d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f994 	bl	800d9dc <USB_CoreReset>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d106      	bne.n	800d6cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	639a      	str	r2, [r3, #56]	; 0x38
 800d6ca:	e005      	b.n	800d6d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d10b      	bne.n	800d6f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	f043 0206 	orr.w	r2, r3, #6
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	f043 0220 	orr.w	r2, r3, #32
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d702:	b004      	add	sp, #16
 800d704:	4770      	bx	lr

0800d706 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	f043 0201 	orr.w	r2, r3, #1
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d71a:	2300      	movs	r3, #0
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	370c      	adds	r7, #12
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	f023 0201 	bic.w	r2, r3, #1
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	370c      	adds	r7, #12
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr

0800d74a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	460b      	mov	r3, r1
 800d754:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d756:	2300      	movs	r3, #0
 800d758:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d766:	78fb      	ldrb	r3, [r7, #3]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d115      	bne.n	800d798 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d778:	2001      	movs	r0, #1
 800d77a:	f7f7 fa09 	bl	8004b90 <HAL_Delay>
      ms++;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3301      	adds	r3, #1
 800d782:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f91a 	bl	800d9be <USB_GetMode>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d01e      	beq.n	800d7ce <USB_SetCurrentMode+0x84>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b31      	cmp	r3, #49	; 0x31
 800d794:	d9f0      	bls.n	800d778 <USB_SetCurrentMode+0x2e>
 800d796:	e01a      	b.n	800d7ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d798:	78fb      	ldrb	r3, [r7, #3]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d115      	bne.n	800d7ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	68db      	ldr	r3, [r3, #12]
 800d7a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d7aa:	2001      	movs	r0, #1
 800d7ac:	f7f7 f9f0 	bl	8004b90 <HAL_Delay>
      ms++;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f901 	bl	800d9be <USB_GetMode>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d005      	beq.n	800d7ce <USB_SetCurrentMode+0x84>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b31      	cmp	r3, #49	; 0x31
 800d7c6:	d9f0      	bls.n	800d7aa <USB_SetCurrentMode+0x60>
 800d7c8:	e001      	b.n	800d7ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e005      	b.n	800d7da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2b32      	cmp	r3, #50	; 0x32
 800d7d2:	d101      	bne.n	800d7d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	e000      	b.n	800d7da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	019b      	lsls	r3, r3, #6
 800d7f6:	f043 0220 	orr.w	r2, r3, #32
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	3301      	adds	r3, #1
 800d802:	60fb      	str	r3, [r7, #12]
 800d804:	4a08      	ldr	r2, [pc, #32]	; (800d828 <USB_FlushTxFifo+0x44>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d901      	bls.n	800d80e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800d80a:	2303      	movs	r3, #3
 800d80c:	e006      	b.n	800d81c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	f003 0320 	and.w	r3, r3, #32
 800d816:	2b20      	cmp	r3, #32
 800d818:	d0f1      	beq.n	800d7fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	00030d40 	.word	0x00030d40

0800d82c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2210      	movs	r2, #16
 800d83c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	3301      	adds	r3, #1
 800d842:	60fb      	str	r3, [r7, #12]
 800d844:	4a08      	ldr	r2, [pc, #32]	; (800d868 <USB_FlushRxFifo+0x3c>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d901      	bls.n	800d84e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800d84a:	2303      	movs	r3, #3
 800d84c:	e006      	b.n	800d85c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	f003 0310 	and.w	r3, r3, #16
 800d856:	2b10      	cmp	r3, #16
 800d858:	d0f1      	beq.n	800d83e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d85a:	2300      	movs	r3, #0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr
 800d868:	00030d40 	.word	0x00030d40

0800d86c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b089      	sub	sp, #36	; 0x24
 800d870:	af00      	add	r7, sp, #0
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	4611      	mov	r1, r2
 800d878:	461a      	mov	r2, r3
 800d87a:	460b      	mov	r3, r1
 800d87c:	71fb      	strb	r3, [r7, #7]
 800d87e:	4613      	mov	r3, r2
 800d880:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d88a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d123      	bne.n	800d8da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d892:	88bb      	ldrh	r3, [r7, #4]
 800d894:	3303      	adds	r3, #3
 800d896:	089b      	lsrs	r3, r3, #2
 800d898:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d89a:	2300      	movs	r3, #0
 800d89c:	61bb      	str	r3, [r7, #24]
 800d89e:	e018      	b.n	800d8d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d8a0:	79fb      	ldrb	r3, [r7, #7]
 800d8a2:	031a      	lsls	r2, r3, #12
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	4413      	add	r3, r2
 800d8a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ac:	461a      	mov	r2, r3
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	61bb      	str	r3, [r7, #24]
 800d8d2:	69ba      	ldr	r2, [r7, #24]
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d3e2      	bcc.n	800d8a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3724      	adds	r7, #36	; 0x24
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b08b      	sub	sp, #44	; 0x2c
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d8fe:	88fb      	ldrh	r3, [r7, #6]
 800d900:	089b      	lsrs	r3, r3, #2
 800d902:	b29b      	uxth	r3, r3
 800d904:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d906:	88fb      	ldrh	r3, [r7, #6]
 800d908:	f003 0303 	and.w	r3, r3, #3
 800d90c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d90e:	2300      	movs	r3, #0
 800d910:	623b      	str	r3, [r7, #32]
 800d912:	e014      	b.n	800d93e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d91e:	601a      	str	r2, [r3, #0]
    pDest++;
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	3301      	adds	r3, #1
 800d924:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	3301      	adds	r3, #1
 800d92a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d92e:	3301      	adds	r3, #1
 800d930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d934:	3301      	adds	r3, #1
 800d936:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d938:	6a3b      	ldr	r3, [r7, #32]
 800d93a:	3301      	adds	r3, #1
 800d93c:	623b      	str	r3, [r7, #32]
 800d93e:	6a3a      	ldr	r2, [r7, #32]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	429a      	cmp	r2, r3
 800d944:	d3e6      	bcc.n	800d914 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d946:	8bfb      	ldrh	r3, [r7, #30]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d01e      	beq.n	800d98a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d94c:	2300      	movs	r3, #0
 800d94e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d956:	461a      	mov	r2, r3
 800d958:	f107 0310 	add.w	r3, r7, #16
 800d95c:	6812      	ldr	r2, [r2, #0]
 800d95e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	b2db      	uxtb	r3, r3
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	fa22 f303 	lsr.w	r3, r2, r3
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d970:	701a      	strb	r2, [r3, #0]
      i++;
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	3301      	adds	r3, #1
 800d976:	623b      	str	r3, [r7, #32]
      pDest++;
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	3301      	adds	r3, #1
 800d97c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d97e:	8bfb      	ldrh	r3, [r7, #30]
 800d980:	3b01      	subs	r3, #1
 800d982:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d984:	8bfb      	ldrh	r3, [r7, #30]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1ea      	bne.n	800d960 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	372c      	adds	r7, #44	; 0x2c
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	695b      	ldr	r3, [r3, #20]
 800d9a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b083      	sub	sp, #12
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	f003 0301 	and.w	r3, r3, #1
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
	...

0800d9dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	4a13      	ldr	r2, [pc, #76]	; (800da3c <USB_CoreReset+0x60>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d901      	bls.n	800d9f8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	e01a      	b.n	800da2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	daf3      	bge.n	800d9e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da00:	2300      	movs	r3, #0
 800da02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	f043 0201 	orr.w	r2, r3, #1
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	3301      	adds	r3, #1
 800da14:	60fb      	str	r3, [r7, #12]
 800da16:	4a09      	ldr	r2, [pc, #36]	; (800da3c <USB_CoreReset+0x60>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d901      	bls.n	800da20 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800da1c:	2303      	movs	r3, #3
 800da1e:	e006      	b.n	800da2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	f003 0301 	and.w	r3, r3, #1
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d0f1      	beq.n	800da10 <USB_CoreReset+0x34>

  return HAL_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	00030d40 	.word	0x00030d40

0800da40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da40:	b084      	sub	sp, #16
 800da42:	b580      	push	{r7, lr}
 800da44:	b084      	sub	sp, #16
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	f107 001c 	add.w	r0, r7, #28
 800da4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800da5c:	461a      	mov	r2, r3
 800da5e:	2300      	movs	r3, #0
 800da60:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da72:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da7e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d018      	beq.n	800dac4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da94:	2b01      	cmp	r3, #1
 800da96:	d10a      	bne.n	800daae <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800daa6:	f043 0304 	orr.w	r3, r3, #4
 800daaa:	6013      	str	r3, [r2, #0]
 800daac:	e014      	b.n	800dad8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dabc:	f023 0304 	bic.w	r3, r3, #4
 800dac0:	6013      	str	r3, [r2, #0]
 800dac2:	e009      	b.n	800dad8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dad2:	f023 0304 	bic.w	r3, r3, #4
 800dad6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800dad8:	2110      	movs	r1, #16
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff fe82 	bl	800d7e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7ff fea3 	bl	800d82c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800dae6:	2300      	movs	r3, #0
 800dae8:	60fb      	str	r3, [r7, #12]
 800daea:	e015      	b.n	800db18 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	015a      	lsls	r2, r3, #5
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	4413      	add	r3, r2
 800daf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daf8:	461a      	mov	r2, r3
 800dafa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dafe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	015a      	lsls	r2, r3, #5
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	4413      	add	r3, r2
 800db08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db0c:	461a      	mov	r2, r3
 800db0e:	2300      	movs	r3, #0
 800db10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3301      	adds	r3, #1
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	6a3b      	ldr	r3, [r7, #32]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d3e5      	bcc.n	800daec <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db2c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00b      	beq.n	800db52 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db40:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4a13      	ldr	r2, [pc, #76]	; (800db94 <USB_HostInit+0x154>)
 800db46:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	4a13      	ldr	r2, [pc, #76]	; (800db98 <USB_HostInit+0x158>)
 800db4c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800db50:	e009      	b.n	800db66 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2280      	movs	r2, #128	; 0x80
 800db56:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a10      	ldr	r2, [pc, #64]	; (800db9c <USB_HostInit+0x15c>)
 800db5c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	4a0f      	ldr	r2, [pc, #60]	; (800dba0 <USB_HostInit+0x160>)
 800db62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800db66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d105      	bne.n	800db78 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	f043 0210 	orr.w	r2, r3, #16
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	699a      	ldr	r2, [r3, #24]
 800db7c:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <USB_HostInit+0x164>)
 800db7e:	4313      	orrs	r3, r2
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db90:	b004      	add	sp, #16
 800db92:	4770      	bx	lr
 800db94:	01000200 	.word	0x01000200
 800db98:	00e00300 	.word	0x00e00300
 800db9c:	00600080 	.word	0x00600080
 800dba0:	004000e0 	.word	0x004000e0
 800dba4:	a3200008 	.word	0xa3200008

0800dba8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	68fa      	ldr	r2, [r7, #12]
 800dbc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dbc6:	f023 0303 	bic.w	r3, r3, #3
 800dbca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	78fb      	ldrb	r3, [r7, #3]
 800dbd6:	f003 0303 	and.w	r3, r3, #3
 800dbda:	68f9      	ldr	r1, [r7, #12]
 800dbdc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800dbe4:	78fb      	ldrb	r3, [r7, #3]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d107      	bne.n	800dbfa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800dbf6:	6053      	str	r3, [r2, #4]
 800dbf8:	e009      	b.n	800dc0e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800dbfa:	78fb      	ldrb	r3, [r7, #3]
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d106      	bne.n	800dc0e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc06:	461a      	mov	r2, r3
 800dc08:	f241 7370 	movw	r3, #6000	; 0x1770
 800dc0c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3714      	adds	r7, #20
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dc3c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dc46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc4a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800dc4c:	2064      	movs	r0, #100	; 0x64
 800dc4e:	f7f6 ff9f 	bl	8004b90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dc5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc5e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800dc60:	200a      	movs	r0, #10
 800dc62:	f7f6 ff95 	bl	8004b90 <HAL_Delay>

  return HAL_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800dc94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d109      	bne.n	800dcb4 <USB_DriveVbus+0x44>
 800dca0:	78fb      	ldrb	r3, [r7, #3]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d106      	bne.n	800dcb4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dcae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dcb2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dcba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcbe:	d109      	bne.n	800dcd4 <USB_DriveVbus+0x64>
 800dcc0:	78fb      	ldrb	r3, [r7, #3]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d106      	bne.n	800dcd4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	68fa      	ldr	r2, [r7, #12]
 800dcca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800dcce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dcd2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3714      	adds	r7, #20
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr

0800dce2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800dce2:	b480      	push	{r7}
 800dce4:	b085      	sub	sp, #20
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	0c5b      	lsrs	r3, r3, #17
 800dd00:	f003 0303 	and.w	r3, r3, #3
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd22:	689b      	ldr	r3, [r3, #8]
 800dd24:	b29b      	uxth	r3, r3
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
	...

0800dd34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b088      	sub	sp, #32
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	4608      	mov	r0, r1
 800dd3e:	4611      	mov	r1, r2
 800dd40:	461a      	mov	r2, r3
 800dd42:	4603      	mov	r3, r0
 800dd44:	70fb      	strb	r3, [r7, #3]
 800dd46:	460b      	mov	r3, r1
 800dd48:	70bb      	strb	r3, [r7, #2]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800dd56:	78fb      	ldrb	r3, [r7, #3]
 800dd58:	015a      	lsls	r2, r3, #5
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd62:	461a      	mov	r2, r3
 800dd64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800dd6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dd6e:	2b03      	cmp	r3, #3
 800dd70:	d87e      	bhi.n	800de70 <USB_HC_Init+0x13c>
 800dd72:	a201      	add	r2, pc, #4	; (adr r2, 800dd78 <USB_HC_Init+0x44>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800dd89 	.word	0x0800dd89
 800dd7c:	0800de33 	.word	0x0800de33
 800dd80:	0800dd89 	.word	0x0800dd89
 800dd84:	0800ddf5 	.word	0x0800ddf5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dd88:	78fb      	ldrb	r3, [r7, #3]
 800dd8a:	015a      	lsls	r2, r3, #5
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	4413      	add	r3, r2
 800dd90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd94:	461a      	mov	r2, r3
 800dd96:	f240 439d 	movw	r3, #1181	; 0x49d
 800dd9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800dd9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	da10      	bge.n	800ddc6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dda4:	78fb      	ldrb	r3, [r7, #3]
 800dda6:	015a      	lsls	r2, r3, #5
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	78fa      	ldrb	r2, [r7, #3]
 800ddb4:	0151      	lsls	r1, r2, #5
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	440a      	add	r2, r1
 800ddba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddc2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ddc4:	e057      	b.n	800de76 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d051      	beq.n	800de76 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ddd2:	78fb      	ldrb	r3, [r7, #3]
 800ddd4:	015a      	lsls	r2, r3, #5
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	4413      	add	r3, r2
 800ddda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	78fa      	ldrb	r2, [r7, #3]
 800dde2:	0151      	lsls	r1, r2, #5
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	440a      	add	r2, r1
 800dde8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ddec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ddf0:	60d3      	str	r3, [r2, #12]
      break;
 800ddf2:	e040      	b.n	800de76 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ddf4:	78fb      	ldrb	r3, [r7, #3]
 800ddf6:	015a      	lsls	r2, r3, #5
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de00:	461a      	mov	r2, r3
 800de02:	f240 639d 	movw	r3, #1693	; 0x69d
 800de06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800de08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	da34      	bge.n	800de7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800de10:	78fb      	ldrb	r3, [r7, #3]
 800de12:	015a      	lsls	r2, r3, #5
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	4413      	add	r3, r2
 800de18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	78fa      	ldrb	r2, [r7, #3]
 800de20:	0151      	lsls	r1, r2, #5
 800de22:	693a      	ldr	r2, [r7, #16]
 800de24:	440a      	add	r2, r1
 800de26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800de30:	e023      	b.n	800de7a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800de32:	78fb      	ldrb	r3, [r7, #3]
 800de34:	015a      	lsls	r2, r3, #5
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	4413      	add	r3, r2
 800de3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de3e:	461a      	mov	r2, r3
 800de40:	f240 2325 	movw	r3, #549	; 0x225
 800de44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800de46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	da17      	bge.n	800de7e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800de4e:	78fb      	ldrb	r3, [r7, #3]
 800de50:	015a      	lsls	r2, r3, #5
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	4413      	add	r3, r2
 800de56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	78fa      	ldrb	r2, [r7, #3]
 800de5e:	0151      	lsls	r1, r2, #5
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	440a      	add	r2, r1
 800de64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800de6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800de6e:	e006      	b.n	800de7e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	77fb      	strb	r3, [r7, #31]
      break;
 800de74:	e004      	b.n	800de80 <USB_HC_Init+0x14c>
      break;
 800de76:	bf00      	nop
 800de78:	e002      	b.n	800de80 <USB_HC_Init+0x14c>
      break;
 800de7a:	bf00      	nop
 800de7c:	e000      	b.n	800de80 <USB_HC_Init+0x14c>
      break;
 800de7e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de86:	699a      	ldr	r2, [r3, #24]
 800de88:	78fb      	ldrb	r3, [r7, #3]
 800de8a:	f003 030f 	and.w	r3, r3, #15
 800de8e:	2101      	movs	r1, #1
 800de90:	fa01 f303 	lsl.w	r3, r1, r3
 800de94:	6939      	ldr	r1, [r7, #16]
 800de96:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800de9a:	4313      	orrs	r3, r2
 800de9c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	699b      	ldr	r3, [r3, #24]
 800dea2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800deaa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	da03      	bge.n	800deba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800deb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800deb6:	61bb      	str	r3, [r7, #24]
 800deb8:	e001      	b.n	800debe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800deba:	2300      	movs	r3, #0
 800debc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff ff0f 	bl	800dce2 <USB_GetHostSpeed>
 800dec4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dec6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800deca:	2b02      	cmp	r3, #2
 800decc:	d106      	bne.n	800dedc <USB_HC_Init+0x1a8>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2b02      	cmp	r3, #2
 800ded2:	d003      	beq.n	800dedc <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ded4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ded8:	617b      	str	r3, [r7, #20]
 800deda:	e001      	b.n	800dee0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dedc:	2300      	movs	r3, #0
 800dede:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dee0:	787b      	ldrb	r3, [r7, #1]
 800dee2:	059b      	lsls	r3, r3, #22
 800dee4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dee8:	78bb      	ldrb	r3, [r7, #2]
 800deea:	02db      	lsls	r3, r3, #11
 800deec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800def0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800def2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800def6:	049b      	lsls	r3, r3, #18
 800def8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800defc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800defe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800df00:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800df04:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800df0a:	78fb      	ldrb	r3, [r7, #3]
 800df0c:	0159      	lsls	r1, r3, #5
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	440b      	add	r3, r1
 800df12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df16:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800df1c:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800df1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800df22:	2b03      	cmp	r3, #3
 800df24:	d10f      	bne.n	800df46 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800df26:	78fb      	ldrb	r3, [r7, #3]
 800df28:	015a      	lsls	r2, r3, #5
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	4413      	add	r3, r2
 800df2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	78fa      	ldrb	r2, [r7, #3]
 800df36:	0151      	lsls	r1, r2, #5
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	440a      	add	r2, r1
 800df3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df44:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800df46:	7ffb      	ldrb	r3, [r7, #31]
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3720      	adds	r7, #32
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08c      	sub	sp, #48	; 0x30
 800df54:	af02      	add	r7, sp, #8
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	4613      	mov	r3, r2
 800df5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	785b      	ldrb	r3, [r3, #1]
 800df66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800df68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df6c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df76:	2b00      	cmp	r3, #0
 800df78:	d02d      	beq.n	800dfd6 <USB_HC_StartXfer+0x86>
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	791b      	ldrb	r3, [r3, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d129      	bne.n	800dfd6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800df82:	79fb      	ldrb	r3, [r7, #7]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d117      	bne.n	800dfb8 <USB_HC_StartXfer+0x68>
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	79db      	ldrb	r3, [r3, #7]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <USB_HC_StartXfer+0x48>
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	79db      	ldrb	r3, [r3, #7]
 800df94:	2b02      	cmp	r3, #2
 800df96:	d10f      	bne.n	800dfb8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	015a      	lsls	r2, r3, #5
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	4413      	add	r3, r2
 800dfa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	69fa      	ldr	r2, [r7, #28]
 800dfa8:	0151      	lsls	r1, r2, #5
 800dfaa:	6a3a      	ldr	r2, [r7, #32]
 800dfac:	440a      	add	r2, r1
 800dfae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfb6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10b      	bne.n	800dfd6 <USB_HC_StartXfer+0x86>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	795b      	ldrb	r3, [r3, #5]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d107      	bne.n	800dfd6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	785b      	ldrb	r3, [r3, #1]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f000 fa2f 	bl	800e430 <USB_DoPing>
      return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	e0f8      	b.n	800e1c8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	695b      	ldr	r3, [r3, #20]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d018      	beq.n	800e010 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	695b      	ldr	r3, [r3, #20]
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	8912      	ldrh	r2, [r2, #8]
 800dfe6:	4413      	add	r3, r2
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	8912      	ldrh	r2, [r2, #8]
 800dfee:	fbb3 f3f2 	udiv	r3, r3, r2
 800dff2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800dff4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dff6:	8b7b      	ldrh	r3, [r7, #26]
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d90b      	bls.n	800e014 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800dffc:	8b7b      	ldrh	r3, [r7, #26]
 800dffe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e000:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	8912      	ldrh	r2, [r2, #8]
 800e006:	fb02 f203 	mul.w	r2, r2, r3
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	611a      	str	r2, [r3, #16]
 800e00e:	e001      	b.n	800e014 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800e010:	2301      	movs	r3, #1
 800e012:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	78db      	ldrb	r3, [r3, #3]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d007      	beq.n	800e02c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e01c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	8912      	ldrh	r2, [r2, #8]
 800e022:	fb02 f203 	mul.w	r2, r2, r3
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	611a      	str	r2, [r3, #16]
 800e02a:	e003      	b.n	800e034 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	695a      	ldr	r2, [r3, #20]
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e03c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e03e:	04d9      	lsls	r1, r3, #19
 800e040:	4b63      	ldr	r3, [pc, #396]	; (800e1d0 <USB_HC_StartXfer+0x280>)
 800e042:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e044:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	7a9b      	ldrb	r3, [r3, #10]
 800e04a:	075b      	lsls	r3, r3, #29
 800e04c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e050:	69f9      	ldr	r1, [r7, #28]
 800e052:	0148      	lsls	r0, r1, #5
 800e054:	6a39      	ldr	r1, [r7, #32]
 800e056:	4401      	add	r1, r0
 800e058:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e05c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e05e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d009      	beq.n	800e07a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	68d9      	ldr	r1, [r3, #12]
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	015a      	lsls	r2, r3, #5
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	4413      	add	r3, r2
 800e072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e076:	460a      	mov	r2, r1
 800e078:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e080:	689b      	ldr	r3, [r3, #8]
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	2b00      	cmp	r3, #0
 800e088:	bf0c      	ite	eq
 800e08a:	2301      	moveq	r3, #1
 800e08c:	2300      	movne	r3, #0
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	015a      	lsls	r2, r3, #5
 800e096:	6a3b      	ldr	r3, [r7, #32]
 800e098:	4413      	add	r3, r2
 800e09a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	69fa      	ldr	r2, [r7, #28]
 800e0a2:	0151      	lsls	r1, r2, #5
 800e0a4:	6a3a      	ldr	r2, [r7, #32]
 800e0a6:	440a      	add	r2, r1
 800e0a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e0ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e0b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0be:	681a      	ldr	r2, [r3, #0]
 800e0c0:	7e7b      	ldrb	r3, [r7, #25]
 800e0c2:	075b      	lsls	r3, r3, #29
 800e0c4:	69f9      	ldr	r1, [r7, #28]
 800e0c6:	0148      	lsls	r0, r1, #5
 800e0c8:	6a39      	ldr	r1, [r7, #32]
 800e0ca:	4401      	add	r1, r0
 800e0cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e0ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	78db      	ldrb	r3, [r3, #3]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d004      	beq.n	800e0fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0fa:	613b      	str	r3, [r7, #16]
 800e0fc:	e003      	b.n	800e106 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e104:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e10c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	015a      	lsls	r2, r3, #5
 800e112:	6a3b      	ldr	r3, [r7, #32]
 800e114:	4413      	add	r3, r2
 800e116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e11a:	461a      	mov	r2, r3
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e120:	79fb      	ldrb	r3, [r7, #7]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d001      	beq.n	800e12a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	e04e      	b.n	800e1c8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	78db      	ldrb	r3, [r3, #3]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d149      	bne.n	800e1c6 <USB_HC_StartXfer+0x276>
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	695b      	ldr	r3, [r3, #20]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d045      	beq.n	800e1c6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	79db      	ldrb	r3, [r3, #7]
 800e13e:	2b03      	cmp	r3, #3
 800e140:	d830      	bhi.n	800e1a4 <USB_HC_StartXfer+0x254>
 800e142:	a201      	add	r2, pc, #4	; (adr r2, 800e148 <USB_HC_StartXfer+0x1f8>)
 800e144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e148:	0800e159 	.word	0x0800e159
 800e14c:	0800e17d 	.word	0x0800e17d
 800e150:	0800e159 	.word	0x0800e159
 800e154:	0800e17d 	.word	0x0800e17d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	695b      	ldr	r3, [r3, #20]
 800e15c:	3303      	adds	r3, #3
 800e15e:	089b      	lsrs	r3, r3, #2
 800e160:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e162:	8afa      	ldrh	r2, [r7, #22]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e168:	b29b      	uxth	r3, r3
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d91c      	bls.n	800e1a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	699b      	ldr	r3, [r3, #24]
 800e172:	f043 0220 	orr.w	r2, r3, #32
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	619a      	str	r2, [r3, #24]
        }
        break;
 800e17a:	e015      	b.n	800e1a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	695b      	ldr	r3, [r3, #20]
 800e180:	3303      	adds	r3, #3
 800e182:	089b      	lsrs	r3, r3, #2
 800e184:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e186:	8afa      	ldrh	r2, [r7, #22]
 800e188:	6a3b      	ldr	r3, [r7, #32]
 800e18a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	b29b      	uxth	r3, r3
 800e192:	429a      	cmp	r2, r3
 800e194:	d90a      	bls.n	800e1ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	699b      	ldr	r3, [r3, #24]
 800e19a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	619a      	str	r2, [r3, #24]
        }
        break;
 800e1a2:	e003      	b.n	800e1ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e1a4:	bf00      	nop
 800e1a6:	e002      	b.n	800e1ae <USB_HC_StartXfer+0x25e>
        break;
 800e1a8:	bf00      	nop
 800e1aa:	e000      	b.n	800e1ae <USB_HC_StartXfer+0x25e>
        break;
 800e1ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	68d9      	ldr	r1, [r3, #12]
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	785a      	ldrb	r2, [r3, #1]
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	695b      	ldr	r3, [r3, #20]
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	2000      	movs	r0, #0
 800e1be:	9000      	str	r0, [sp, #0]
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f7ff fb53 	bl	800d86c <USB_WritePacket>
  }

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3728      	adds	r7, #40	; 0x28
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	1ff80000 	.word	0x1ff80000

0800e1d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e1e6:	695b      	ldr	r3, [r3, #20]
 800e1e8:	b29b      	uxth	r3, r3
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3714      	adds	r7, #20
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e1f6:	b480      	push	{r7}
 800e1f8:	b089      	sub	sp, #36	; 0x24
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	460b      	mov	r3, r1
 800e200:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800e206:	78fb      	ldrb	r3, [r7, #3]
 800e208:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e20a:	2300      	movs	r3, #0
 800e20c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	015a      	lsls	r2, r3, #5
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	4413      	add	r3, r2
 800e216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	0c9b      	lsrs	r3, r3, #18
 800e21e:	f003 0303 	and.w	r3, r3, #3
 800e222:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	0fdb      	lsrs	r3, r3, #31
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	f003 0320 	and.w	r3, r3, #32
 800e242:	2b20      	cmp	r3, #32
 800e244:	d104      	bne.n	800e250 <USB_HC_Halt+0x5a>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d101      	bne.n	800e250 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e24c:	2300      	movs	r3, #0
 800e24e:	e0e8      	b.n	800e422 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <USB_HC_Halt+0x66>
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d173      	bne.n	800e344 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	015a      	lsls	r2, r3, #5
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	4413      	add	r3, r2
 800e264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	0151      	lsls	r1, r2, #5
 800e26e:	69ba      	ldr	r2, [r7, #24]
 800e270:	440a      	add	r2, r1
 800e272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e27a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	f003 0320 	and.w	r3, r3, #32
 800e284:	2b00      	cmp	r3, #0
 800e286:	f040 80cb 	bne.w	800e420 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e292:	2b00      	cmp	r3, #0
 800e294:	d143      	bne.n	800e31e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	015a      	lsls	r2, r3, #5
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	4413      	add	r3, r2
 800e29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	697a      	ldr	r2, [r7, #20]
 800e2a6:	0151      	lsls	r1, r2, #5
 800e2a8:	69ba      	ldr	r2, [r7, #24]
 800e2aa:	440a      	add	r2, r1
 800e2ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	015a      	lsls	r2, r3, #5
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	0151      	lsls	r1, r2, #5
 800e2c8:	69ba      	ldr	r2, [r7, #24]
 800e2ca:	440a      	add	r2, r1
 800e2cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e2d4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	697a      	ldr	r2, [r7, #20]
 800e2e6:	0151      	lsls	r1, r2, #5
 800e2e8:	69ba      	ldr	r2, [r7, #24]
 800e2ea:	440a      	add	r2, r1
 800e2ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e2f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e2f4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	61fb      	str	r3, [r7, #28]
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e302:	d81d      	bhi.n	800e340 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	015a      	lsls	r2, r3, #5
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	4413      	add	r3, r2
 800e30c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e31a:	d0ec      	beq.n	800e2f6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e31c:	e080      	b.n	800e420 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	015a      	lsls	r2, r3, #5
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	4413      	add	r3, r2
 800e326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	0151      	lsls	r1, r2, #5
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	440a      	add	r2, r1
 800e334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e33c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e33e:	e06f      	b.n	800e420 <USB_HC_Halt+0x22a>
            break;
 800e340:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e342:	e06d      	b.n	800e420 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	015a      	lsls	r2, r3, #5
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	4413      	add	r3, r2
 800e34c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	697a      	ldr	r2, [r7, #20]
 800e354:	0151      	lsls	r1, r2, #5
 800e356:	69ba      	ldr	r2, [r7, #24]
 800e358:	440a      	add	r2, r1
 800e35a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e35e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e362:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d143      	bne.n	800e3fc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	015a      	lsls	r2, r3, #5
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	4413      	add	r3, r2
 800e37c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	697a      	ldr	r2, [r7, #20]
 800e384:	0151      	lsls	r1, r2, #5
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	440a      	add	r2, r1
 800e38a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e38e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e392:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	015a      	lsls	r2, r3, #5
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	4413      	add	r3, r2
 800e39c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	697a      	ldr	r2, [r7, #20]
 800e3a4:	0151      	lsls	r1, r2, #5
 800e3a6:	69ba      	ldr	r2, [r7, #24]
 800e3a8:	440a      	add	r2, r1
 800e3aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e3b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	015a      	lsls	r2, r3, #5
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	697a      	ldr	r2, [r7, #20]
 800e3c4:	0151      	lsls	r1, r2, #5
 800e3c6:	69ba      	ldr	r2, [r7, #24]
 800e3c8:	440a      	add	r2, r1
 800e3ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e3ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e3d2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	61fb      	str	r3, [r7, #28]
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e3e0:	d81d      	bhi.n	800e41e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	015a      	lsls	r2, r3, #5
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e3f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e3f8:	d0ec      	beq.n	800e3d4 <USB_HC_Halt+0x1de>
 800e3fa:	e011      	b.n	800e420 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	015a      	lsls	r2, r3, #5
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	4413      	add	r3, r2
 800e404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	697a      	ldr	r2, [r7, #20]
 800e40c:	0151      	lsls	r1, r2, #5
 800e40e:	69ba      	ldr	r2, [r7, #24]
 800e410:	440a      	add	r2, r1
 800e412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e41a:	6013      	str	r3, [r2, #0]
 800e41c:	e000      	b.n	800e420 <USB_HC_Halt+0x22a>
          break;
 800e41e:	bf00      	nop
    }
  }

  return HAL_OK;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3724      	adds	r7, #36	; 0x24
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
	...

0800e430 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e430:	b480      	push	{r7}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e440:	78fb      	ldrb	r3, [r7, #3]
 800e442:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e444:	2301      	movs	r3, #1
 800e446:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	04da      	lsls	r2, r3, #19
 800e44c:	4b15      	ldr	r3, [pc, #84]	; (800e4a4 <USB_DoPing+0x74>)
 800e44e:	4013      	ands	r3, r2
 800e450:	693a      	ldr	r2, [r7, #16]
 800e452:	0151      	lsls	r1, r2, #5
 800e454:	697a      	ldr	r2, [r7, #20]
 800e456:	440a      	add	r2, r1
 800e458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e45c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e460:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	015a      	lsls	r2, r3, #5
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	4413      	add	r3, r2
 800e46a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e478:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e480:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	015a      	lsls	r2, r3, #5
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	4413      	add	r3, r2
 800e48a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e48e:	461a      	mov	r2, r3
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	371c      	adds	r7, #28
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr
 800e4a2:	bf00      	nop
 800e4a4:	1ff80000 	.word	0x1ff80000

0800e4a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f7ff f935 	bl	800d728 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e4be:	2110      	movs	r1, #16
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7ff f98f 	bl	800d7e4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f7ff f9b0 	bl	800d82c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	613b      	str	r3, [r7, #16]
 800e4d0:	e01f      	b.n	800e512 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	015a      	lsls	r2, r3, #5
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	4413      	add	r3, r2
 800e4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e4e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e4f8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	015a      	lsls	r2, r3, #5
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	4413      	add	r3, r2
 800e502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e506:	461a      	mov	r2, r3
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	3301      	adds	r3, #1
 800e510:	613b      	str	r3, [r7, #16]
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	2b0f      	cmp	r3, #15
 800e516:	d9dc      	bls.n	800e4d2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e518:	2300      	movs	r3, #0
 800e51a:	613b      	str	r3, [r7, #16]
 800e51c:	e034      	b.n	800e588 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	015a      	lsls	r2, r3, #5
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	4413      	add	r3, r2
 800e526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e534:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e53c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e544:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	015a      	lsls	r2, r3, #5
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	4413      	add	r3, r2
 800e54e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e552:	461a      	mov	r2, r3
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	3301      	adds	r3, #1
 800e55c:	617b      	str	r3, [r7, #20]
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e564:	d80c      	bhi.n	800e580 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	015a      	lsls	r2, r3, #5
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	4413      	add	r3, r2
 800e56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e57c:	d0ec      	beq.n	800e558 <USB_StopHost+0xb0>
 800e57e:	e000      	b.n	800e582 <USB_StopHost+0xda>
        break;
 800e580:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	3301      	adds	r3, #1
 800e586:	613b      	str	r3, [r7, #16]
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	2b0f      	cmp	r3, #15
 800e58c:	d9c7      	bls.n	800e51e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e594:	461a      	mov	r2, r3
 800e596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e59a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff f8ae 	bl	800d706 <USB_EnableGlobalInt>

  return HAL_OK;
 800e5aa:	2300      	movs	r3, #0
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e5b4:	b590      	push	{r4, r7, lr}
 800e5b6:	b089      	sub	sp, #36	; 0x24
 800e5b8:	af04      	add	r7, sp, #16
 800e5ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e5bc:	2301      	movs	r3, #1
 800e5be:	2202      	movs	r2, #2
 800e5c0:	2102      	movs	r1, #2
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f000 fc66 	bl	800ee94 <USBH_FindInterface>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e5cc:	7bfb      	ldrb	r3, [r7, #15]
 800e5ce:	2bff      	cmp	r3, #255	; 0xff
 800e5d0:	d002      	beq.n	800e5d8 <USBH_CDC_InterfaceInit+0x24>
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d901      	bls.n	800e5dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e5d8:	2302      	movs	r3, #2
 800e5da:	e13d      	b.n	800e858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fc3b 	bl	800ee5c <USBH_SelectInterface>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e5ea:	7bbb      	ldrb	r3, [r7, #14]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d001      	beq.n	800e5f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	e131      	b.n	800e858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e5fa:	2050      	movs	r0, #80	; 0x50
 800e5fc:	f002 fa00 	bl	8010a00 <malloc>
 800e600:	4603      	mov	r3, r0
 800e602:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e60a:	69db      	ldr	r3, [r3, #28]
 800e60c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d101      	bne.n	800e618 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e614:	2302      	movs	r3, #2
 800e616:	e11f      	b.n	800e858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e618:	2250      	movs	r2, #80	; 0x50
 800e61a:	2100      	movs	r1, #0
 800e61c:	68b8      	ldr	r0, [r7, #8]
 800e61e:	f002 f9ff 	bl	8010a20 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e622:	7bfb      	ldrb	r3, [r7, #15]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	211a      	movs	r1, #26
 800e628:	fb01 f303 	mul.w	r3, r1, r3
 800e62c:	4413      	add	r3, r2
 800e62e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	b25b      	sxtb	r3, r3
 800e636:	2b00      	cmp	r3, #0
 800e638:	da15      	bge.n	800e666 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	211a      	movs	r1, #26
 800e640:	fb01 f303 	mul.w	r3, r1, r3
 800e644:	4413      	add	r3, r2
 800e646:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e64a:	781a      	ldrb	r2, [r3, #0]
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e650:	7bfb      	ldrb	r3, [r7, #15]
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	211a      	movs	r1, #26
 800e656:	fb01 f303 	mul.w	r3, r1, r3
 800e65a:	4413      	add	r3, r2
 800e65c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e660:	881a      	ldrh	r2, [r3, #0]
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	785b      	ldrb	r3, [r3, #1]
 800e66a:	4619      	mov	r1, r3
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f001 fe32 	bl	80102d6 <USBH_AllocPipe>
 800e672:	4603      	mov	r3, r0
 800e674:	461a      	mov	r2, r3
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	7819      	ldrb	r1, [r3, #0]
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	7858      	ldrb	r0, [r3, #1]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	8952      	ldrh	r2, [r2, #10]
 800e692:	9202      	str	r2, [sp, #8]
 800e694:	2203      	movs	r2, #3
 800e696:	9201      	str	r2, [sp, #4]
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	4623      	mov	r3, r4
 800e69c:	4602      	mov	r2, r0
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f001 fdea 	bl	8010278 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f002 f8f9 	bl	80108a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	210a      	movs	r1, #10
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fbeb 	bl	800ee94 <USBH_FindInterface>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e6c2:	7bfb      	ldrb	r3, [r7, #15]
 800e6c4:	2bff      	cmp	r3, #255	; 0xff
 800e6c6:	d002      	beq.n	800e6ce <USBH_CDC_InterfaceInit+0x11a>
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d901      	bls.n	800e6d2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e6ce:	2302      	movs	r3, #2
 800e6d0:	e0c2      	b.n	800e858 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	211a      	movs	r1, #26
 800e6d8:	fb01 f303 	mul.w	r3, r1, r3
 800e6dc:	4413      	add	r3, r2
 800e6de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	b25b      	sxtb	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	da16      	bge.n	800e718 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e6ea:	7bfb      	ldrb	r3, [r7, #15]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	211a      	movs	r1, #26
 800e6f0:	fb01 f303 	mul.w	r3, r1, r3
 800e6f4:	4413      	add	r3, r2
 800e6f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e6fa:	781a      	ldrb	r2, [r3, #0]
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e700:	7bfb      	ldrb	r3, [r7, #15]
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	211a      	movs	r1, #26
 800e706:	fb01 f303 	mul.w	r3, r1, r3
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e710:	881a      	ldrh	r2, [r3, #0]
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	835a      	strh	r2, [r3, #26]
 800e716:	e015      	b.n	800e744 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	211a      	movs	r1, #26
 800e71e:	fb01 f303 	mul.w	r3, r1, r3
 800e722:	4413      	add	r3, r2
 800e724:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e728:	781a      	ldrb	r2, [r3, #0]
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e72e:	7bfb      	ldrb	r3, [r7, #15]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	211a      	movs	r1, #26
 800e734:	fb01 f303 	mul.w	r3, r1, r3
 800e738:	4413      	add	r3, r2
 800e73a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e73e:	881a      	ldrh	r2, [r3, #0]
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	211a      	movs	r1, #26
 800e74a:	fb01 f303 	mul.w	r3, r1, r3
 800e74e:	4413      	add	r3, r2
 800e750:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	b25b      	sxtb	r3, r3
 800e758:	2b00      	cmp	r3, #0
 800e75a:	da16      	bge.n	800e78a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	211a      	movs	r1, #26
 800e762:	fb01 f303 	mul.w	r3, r1, r3
 800e766:	4413      	add	r3, r2
 800e768:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e76c:	781a      	ldrb	r2, [r3, #0]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e772:	7bfb      	ldrb	r3, [r7, #15]
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	211a      	movs	r1, #26
 800e778:	fb01 f303 	mul.w	r3, r1, r3
 800e77c:	4413      	add	r3, r2
 800e77e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e782:	881a      	ldrh	r2, [r3, #0]
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	835a      	strh	r2, [r3, #26]
 800e788:	e015      	b.n	800e7b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	211a      	movs	r1, #26
 800e790:	fb01 f303 	mul.w	r3, r1, r3
 800e794:	4413      	add	r3, r2
 800e796:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e79a:	781a      	ldrb	r2, [r3, #0]
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e7a0:	7bfb      	ldrb	r3, [r7, #15]
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	211a      	movs	r1, #26
 800e7a6:	fb01 f303 	mul.w	r3, r1, r3
 800e7aa:	4413      	add	r3, r2
 800e7ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e7b0:	881a      	ldrh	r2, [r3, #0]
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	7b9b      	ldrb	r3, [r3, #14]
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f001 fd8a 	bl	80102d6 <USBH_AllocPipe>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	7bdb      	ldrb	r3, [r3, #15]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f001 fd80 	bl	80102d6 <USBH_AllocPipe>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	461a      	mov	r2, r3
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	7b59      	ldrb	r1, [r3, #13]
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	7b98      	ldrb	r0, [r3, #14]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	8b12      	ldrh	r2, [r2, #24]
 800e7f6:	9202      	str	r2, [sp, #8]
 800e7f8:	2202      	movs	r2, #2
 800e7fa:	9201      	str	r2, [sp, #4]
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	4623      	mov	r3, r4
 800e800:	4602      	mov	r2, r0
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f001 fd38 	bl	8010278 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	7b19      	ldrb	r1, [r3, #12]
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	7bd8      	ldrb	r0, [r3, #15]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	8b52      	ldrh	r2, [r2, #26]
 800e820:	9202      	str	r2, [sp, #8]
 800e822:	2202      	movs	r2, #2
 800e824:	9201      	str	r2, [sp, #4]
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	4623      	mov	r3, r4
 800e82a:	4602      	mov	r2, r0
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f001 fd23 	bl	8010278 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	7b5b      	ldrb	r3, [r3, #13]
 800e83e:	2200      	movs	r2, #0
 800e840:	4619      	mov	r1, r3
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f002 f82e 	bl	80108a4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	7b1b      	ldrb	r3, [r3, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	4619      	mov	r1, r3
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f002 f827 	bl	80108a4 <USBH_LL_SetToggle>

  return USBH_OK;
 800e856:	2300      	movs	r3, #0
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd90      	pop	{r4, r7, pc}

0800e860 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e86e:	69db      	ldr	r3, [r3, #28]
 800e870:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00e      	beq.n	800e898 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f001 fd18 	bl	80102b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f001 fd43 	bl	8010318 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2200      	movs	r2, #0
 800e896:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	7b1b      	ldrb	r3, [r3, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00e      	beq.n	800e8be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	7b1b      	ldrb	r3, [r3, #12]
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f001 fd05 	bl	80102b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	7b1b      	ldrb	r3, [r3, #12]
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f001 fd30 	bl	8010318 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	7b5b      	ldrb	r3, [r3, #13]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d00e      	beq.n	800e8e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	7b5b      	ldrb	r3, [r3, #13]
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f001 fcf2 	bl	80102b6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	7b5b      	ldrb	r3, [r3, #13]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f001 fd1d 	bl	8010318 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8ea:	69db      	ldr	r3, [r3, #28]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00b      	beq.n	800e908 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8f6:	69db      	ldr	r3, [r3, #28]
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f002 f889 	bl	8010a10 <free>
    phost->pActiveClass->pData = 0U;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e904:	2200      	movs	r2, #0
 800e906:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b084      	sub	sp, #16
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e920:	69db      	ldr	r3, [r3, #28]
 800e922:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	3340      	adds	r3, #64	; 0x40
 800e928:	4619      	mov	r1, r3
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f8b1 	bl	800ea92 <GetLineCoding>
 800e930:	4603      	mov	r3, r0
 800e932:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e934:	7afb      	ldrb	r3, [r7, #11]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d105      	bne.n	800e946 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e940:	2102      	movs	r1, #2
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e946:	7afb      	ldrb	r3, [r7, #11]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3710      	adds	r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}

0800e950 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e958:	2301      	movs	r3, #1
 800e95a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e966:	69db      	ldr	r3, [r3, #28]
 800e968:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e970:	2b04      	cmp	r3, #4
 800e972:	d877      	bhi.n	800ea64 <USBH_CDC_Process+0x114>
 800e974:	a201      	add	r2, pc, #4	; (adr r2, 800e97c <USBH_CDC_Process+0x2c>)
 800e976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e97a:	bf00      	nop
 800e97c:	0800e991 	.word	0x0800e991
 800e980:	0800e997 	.word	0x0800e997
 800e984:	0800e9c7 	.word	0x0800e9c7
 800e988:	0800ea3b 	.word	0x0800ea3b
 800e98c:	0800ea49 	.word	0x0800ea49
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	73fb      	strb	r3, [r7, #15]
      break;
 800e994:	e06d      	b.n	800ea72 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e99a:	4619      	mov	r1, r3
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f897 	bl	800ead0 <SetLineCoding>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e9a6:	7bbb      	ldrb	r3, [r7, #14]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d104      	bne.n	800e9b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e9b4:	e058      	b.n	800ea68 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e9b6:	7bbb      	ldrb	r3, [r7, #14]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d055      	beq.n	800ea68 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	2204      	movs	r2, #4
 800e9c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e9c4:	e050      	b.n	800ea68 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	3340      	adds	r3, #64	; 0x40
 800e9ca:	4619      	mov	r1, r3
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f860 	bl	800ea92 <GetLineCoding>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e9d6:	7bbb      	ldrb	r3, [r7, #14]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d126      	bne.n	800ea2a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9ee:	791b      	ldrb	r3, [r3, #4]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d13b      	bne.n	800ea6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d133      	bne.n	800ea6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea0e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d12b      	bne.n	800ea6c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea1c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d124      	bne.n	800ea6c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 f958 	bl	800ecd8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ea28:	e020      	b.n	800ea6c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ea2a:	7bbb      	ldrb	r3, [r7, #14]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d01d      	beq.n	800ea6c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	2204      	movs	r2, #4
 800ea34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ea38:	e018      	b.n	800ea6c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f867 	bl	800eb0e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 f8da 	bl	800ebfa <CDC_ProcessReception>
      break;
 800ea46:	e014      	b.n	800ea72 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ea48:	2100      	movs	r1, #0
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f000 ffe3 	bl	800fa16 <USBH_ClrFeature>
 800ea50:	4603      	mov	r3, r0
 800ea52:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ea54:	7bbb      	ldrb	r3, [r7, #14]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10a      	bne.n	800ea70 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ea62:	e005      	b.n	800ea70 <USBH_CDC_Process+0x120>

    default:
      break;
 800ea64:	bf00      	nop
 800ea66:	e004      	b.n	800ea72 <USBH_CDC_Process+0x122>
      break;
 800ea68:	bf00      	nop
 800ea6a:	e002      	b.n	800ea72 <USBH_CDC_Process+0x122>
      break;
 800ea6c:	bf00      	nop
 800ea6e:	e000      	b.n	800ea72 <USBH_CDC_Process+0x122>
      break;
 800ea70:	bf00      	nop

  }

  return status;
 800ea72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3710      	adds	r7, #16
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ea84:	2300      	movs	r3, #0
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	370c      	adds	r7, #12
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b082      	sub	sp, #8
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
 800ea9a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	22a1      	movs	r2, #161	; 0xa1
 800eaa0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2221      	movs	r2, #33	; 0x21
 800eaa6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2207      	movs	r2, #7
 800eab8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	2207      	movs	r2, #7
 800eabe:	4619      	mov	r1, r3
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f001 f988 	bl	800fdd6 <USBH_CtlReq>
 800eac6:	4603      	mov	r3, r0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2221      	movs	r2, #33	; 0x21
 800eade:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2220      	movs	r2, #32
 800eae4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2207      	movs	r2, #7
 800eaf6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	2207      	movs	r2, #7
 800eafc:	4619      	mov	r1, r3
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f001 f969 	bl	800fdd6 <USBH_CtlReq>
 800eb04:	4603      	mov	r3, r0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b086      	sub	sp, #24
 800eb12:	af02      	add	r7, sp, #8
 800eb14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eb1c:	69db      	ldr	r3, [r3, #28]
 800eb1e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eb20:	2300      	movs	r3, #0
 800eb22:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d002      	beq.n	800eb34 <CDC_ProcessTransmission+0x26>
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	d023      	beq.n	800eb7a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800eb32:	e05e      	b.n	800ebf2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	8b12      	ldrh	r2, [r2, #24]
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d90b      	bls.n	800eb58 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	69d9      	ldr	r1, [r3, #28]
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	8b1a      	ldrh	r2, [r3, #24]
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	7b5b      	ldrb	r3, [r3, #13]
 800eb4c:	2001      	movs	r0, #1
 800eb4e:	9000      	str	r0, [sp, #0]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f001 fb4e 	bl	80101f2 <USBH_BulkSendData>
 800eb56:	e00b      	b.n	800eb70 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	7b5b      	ldrb	r3, [r3, #13]
 800eb66:	2001      	movs	r0, #1
 800eb68:	9000      	str	r0, [sp, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f001 fb41 	bl	80101f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2202      	movs	r2, #2
 800eb74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800eb78:	e03b      	b.n	800ebf2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	7b5b      	ldrb	r3, [r3, #13]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f001 fe65 	bl	8010850 <USBH_LL_GetURBState>
 800eb86:	4603      	mov	r3, r0
 800eb88:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800eb8a:	7afb      	ldrb	r3, [r7, #11]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d128      	bne.n	800ebe2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	8b12      	ldrh	r2, [r2, #24]
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d90e      	bls.n	800ebba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	8b12      	ldrh	r2, [r2, #24]
 800eba4:	1a9a      	subs	r2, r3, r2
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	8b12      	ldrh	r2, [r2, #24]
 800ebb2:	441a      	add	r2, r3
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	61da      	str	r2, [r3, #28]
 800ebb8:	e002      	b.n	800ebc0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d004      	beq.n	800ebd2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2201      	movs	r2, #1
 800ebcc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ebd0:	e00e      	b.n	800ebf0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 f868 	bl	800ecb0 <USBH_CDC_TransmitCallback>
      break;
 800ebe0:	e006      	b.n	800ebf0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ebe2:	7afb      	ldrb	r3, [r7, #11]
 800ebe4:	2b02      	cmp	r3, #2
 800ebe6:	d103      	bne.n	800ebf0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ebf0:	bf00      	nop
  }
}
 800ebf2:	bf00      	nop
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}

0800ebfa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	b086      	sub	sp, #24
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec08:	69db      	ldr	r3, [r3, #28]
 800ec0a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ec16:	2b03      	cmp	r3, #3
 800ec18:	d002      	beq.n	800ec20 <CDC_ProcessReception+0x26>
 800ec1a:	2b04      	cmp	r3, #4
 800ec1c:	d00e      	beq.n	800ec3c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ec1e:	e043      	b.n	800eca8 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	6a19      	ldr	r1, [r3, #32]
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	8b5a      	ldrh	r2, [r3, #26]
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	7b1b      	ldrb	r3, [r3, #12]
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f001 fb05 	bl	801023c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	2204      	movs	r2, #4
 800ec36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ec3a:	e035      	b.n	800eca8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	7b1b      	ldrb	r3, [r3, #12]
 800ec40:	4619      	mov	r1, r3
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f001 fe04 	bl	8010850 <USBH_LL_GetURBState>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ec4c:	7cfb      	ldrb	r3, [r7, #19]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d129      	bne.n	800eca6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	7b1b      	ldrb	r3, [r3, #12]
 800ec56:	4619      	mov	r1, r3
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f001 fd67 	bl	801072c <USBH_LL_GetLastXferSize>
 800ec5e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d016      	beq.n	800ec98 <CDC_ProcessReception+0x9e>
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	8b5b      	ldrh	r3, [r3, #26]
 800ec6e:	461a      	mov	r2, r3
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d910      	bls.n	800ec98 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	1ad2      	subs	r2, r2, r3
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	6a1a      	ldr	r2, [r3, #32]
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	441a      	add	r2, r3
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	2203      	movs	r2, #3
 800ec92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ec96:	e006      	b.n	800eca6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f80f 	bl	800ecc4 <USBH_CDC_ReceiveCallback>
      break;
 800eca6:	bf00      	nop
  }
}
 800eca8:	bf00      	nop
 800ecaa:	3718      	adds	r7, #24
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800eccc:	bf00      	nop
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d101      	bne.n	800ed04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ed00:	2302      	movs	r3, #2
 800ed02:	e029      	b.n	800ed58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	79fa      	ldrb	r2, [r7, #7]
 800ed08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f000 f81f 	bl	800ed60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2200      	movs	r2, #0
 800ed26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d003      	beq.n	800ed50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f001 fc37 	bl	80105c4 <USBH_LL_Init>

  return USBH_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	e009      	b.n	800ed86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	33e0      	adds	r3, #224	; 0xe0
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4413      	add	r3, r2
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	3301      	adds	r3, #1
 800ed84:	60fb      	str	r3, [r7, #12]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2b0e      	cmp	r3, #14
 800ed8a:	d9f2      	bls.n	800ed72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	60fb      	str	r3, [r7, #12]
 800ed90:	e009      	b.n	800eda6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4413      	add	r3, r2
 800ed98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	3301      	adds	r3, #1
 800eda4:	60fb      	str	r3, [r7, #12]
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edac:	d3f1      	bcc.n	800ed92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2201      	movs	r2, #1
 800edbe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2240      	movs	r2, #64	; 0x40
 800edd2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2201      	movs	r2, #1
 800ede6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800edfa:	2300      	movs	r3, #0
}
 800edfc:	4618      	mov	r0, r3
 800edfe:	3714      	adds	r7, #20
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ee12:	2300      	movs	r3, #0
 800ee14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d016      	beq.n	800ee4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10e      	bne.n	800ee44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ee2c:	1c59      	adds	r1, r3, #1
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	33de      	adds	r3, #222	; 0xde
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	73fb      	strb	r3, [r7, #15]
 800ee42:	e004      	b.n	800ee4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ee44:	2302      	movs	r3, #2
 800ee46:	73fb      	strb	r3, [r7, #15]
 800ee48:	e001      	b.n	800ee4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ee4a:	2302      	movs	r3, #2
 800ee4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3714      	adds	r7, #20
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr

0800ee5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	460b      	mov	r3, r1
 800ee66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ee72:	78fa      	ldrb	r2, [r7, #3]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d204      	bcs.n	800ee82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	78fa      	ldrb	r2, [r7, #3]
 800ee7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ee80:	e001      	b.n	800ee86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ee82:	2302      	movs	r3, #2
 800ee84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ee86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3714      	adds	r7, #20
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ee94:	b480      	push	{r7}
 800ee96:	b087      	sub	sp, #28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	4611      	mov	r1, r2
 800eea0:	461a      	mov	r2, r3
 800eea2:	4603      	mov	r3, r0
 800eea4:	70fb      	strb	r3, [r7, #3]
 800eea6:	460b      	mov	r3, r1
 800eea8:	70bb      	strb	r3, [r7, #2]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eebc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eebe:	e025      	b.n	800ef0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800eec0:	7dfb      	ldrb	r3, [r7, #23]
 800eec2:	221a      	movs	r2, #26
 800eec4:	fb02 f303 	mul.w	r3, r2, r3
 800eec8:	3308      	adds	r3, #8
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	4413      	add	r3, r2
 800eece:	3302      	adds	r3, #2
 800eed0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	795b      	ldrb	r3, [r3, #5]
 800eed6:	78fa      	ldrb	r2, [r7, #3]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d002      	beq.n	800eee2 <USBH_FindInterface+0x4e>
 800eedc:	78fb      	ldrb	r3, [r7, #3]
 800eede:	2bff      	cmp	r3, #255	; 0xff
 800eee0:	d111      	bne.n	800ef06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eee6:	78ba      	ldrb	r2, [r7, #2]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d002      	beq.n	800eef2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eeec:	78bb      	ldrb	r3, [r7, #2]
 800eeee:	2bff      	cmp	r3, #255	; 0xff
 800eef0:	d109      	bne.n	800ef06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eef6:	787a      	ldrb	r2, [r7, #1]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d002      	beq.n	800ef02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eefc:	787b      	ldrb	r3, [r7, #1]
 800eefe:	2bff      	cmp	r3, #255	; 0xff
 800ef00:	d101      	bne.n	800ef06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ef02:	7dfb      	ldrb	r3, [r7, #23]
 800ef04:	e006      	b.n	800ef14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ef06:	7dfb      	ldrb	r3, [r7, #23]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	d9d6      	bls.n	800eec0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ef12:	23ff      	movs	r3, #255	; 0xff
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	371c      	adds	r7, #28
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr

0800ef20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f001 fb87 	bl	801063c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ef2e:	2101      	movs	r1, #1
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f001 fca0 	bl	8010876 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b088      	sub	sp, #32
 800ef44:	af04      	add	r7, sp, #16
 800ef46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ef48:	2302      	movs	r3, #2
 800ef4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ef56:	b2db      	uxtb	r3, r3
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d102      	bne.n	800ef62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2203      	movs	r2, #3
 800ef60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b0b      	cmp	r3, #11
 800ef6a:	f200 81b3 	bhi.w	800f2d4 <USBH_Process+0x394>
 800ef6e:	a201      	add	r2, pc, #4	; (adr r2, 800ef74 <USBH_Process+0x34>)
 800ef70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef74:	0800efa5 	.word	0x0800efa5
 800ef78:	0800efd7 	.word	0x0800efd7
 800ef7c:	0800f03f 	.word	0x0800f03f
 800ef80:	0800f26f 	.word	0x0800f26f
 800ef84:	0800f2d5 	.word	0x0800f2d5
 800ef88:	0800f0e3 	.word	0x0800f0e3
 800ef8c:	0800f215 	.word	0x0800f215
 800ef90:	0800f119 	.word	0x0800f119
 800ef94:	0800f139 	.word	0x0800f139
 800ef98:	0800f159 	.word	0x0800f159
 800ef9c:	0800f187 	.word	0x0800f187
 800efa0:	0800f257 	.word	0x0800f257
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	2b00      	cmp	r3, #0
 800efae:	f000 8193 	beq.w	800f2d8 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800efb8:	20c8      	movs	r0, #200	; 0xc8
 800efba:	f001 fca3 	bl	8010904 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f001 fb99 	bl	80106f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800efd4:	e180      	b.n	800f2d8 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d107      	bne.n	800eff0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2202      	movs	r2, #2
 800efec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800efee:	e182      	b.n	800f2f6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800eff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800effa:	d914      	bls.n	800f026 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f002:	3301      	adds	r3, #1
 800f004:	b2da      	uxtb	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f012:	2b03      	cmp	r3, #3
 800f014:	d903      	bls.n	800f01e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	220d      	movs	r2, #13
 800f01a:	701a      	strb	r2, [r3, #0]
      break;
 800f01c:	e16b      	b.n	800f2f6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	701a      	strb	r2, [r3, #0]
      break;
 800f024:	e167      	b.n	800f2f6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f02c:	f103 020a 	add.w	r2, r3, #10
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f036:	200a      	movs	r0, #10
 800f038:	f001 fc64 	bl	8010904 <USBH_Delay>
      break;
 800f03c:	e15b      	b.n	800f2f6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f044:	2b00      	cmp	r3, #0
 800f046:	d005      	beq.n	800f054 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f04e:	2104      	movs	r1, #4
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f054:	2064      	movs	r0, #100	; 0x64
 800f056:	f001 fc55 	bl	8010904 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f001 fb24 	bl	80106a8 <USBH_LL_GetSpeed>
 800f060:	4603      	mov	r3, r0
 800f062:	461a      	mov	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2205      	movs	r2, #5
 800f06e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f070:	2100      	movs	r1, #0
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f001 f92f 	bl	80102d6 <USBH_AllocPipe>
 800f078:	4603      	mov	r3, r0
 800f07a:	461a      	mov	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f080:	2180      	movs	r1, #128	; 0x80
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f001 f927 	bl	80102d6 <USBH_AllocPipe>
 800f088:	4603      	mov	r3, r0
 800f08a:	461a      	mov	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	7919      	ldrb	r1, [r3, #4]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f0a4:	b292      	uxth	r2, r2
 800f0a6:	9202      	str	r2, [sp, #8]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	9201      	str	r2, [sp, #4]
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2280      	movs	r2, #128	; 0x80
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f001 f8e0 	bl	8010278 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	7959      	ldrb	r1, [r3, #5]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f0cc:	b292      	uxth	r2, r2
 800f0ce:	9202      	str	r2, [sp, #8]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	9201      	str	r2, [sp, #4]
 800f0d4:	9300      	str	r3, [sp, #0]
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2200      	movs	r2, #0
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f001 f8cc 	bl	8010278 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f0e0:	e109      	b.n	800f2f6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 f90c 	bl	800f300 <USBH_HandleEnum>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f0ec:	7bbb      	ldrb	r3, [r7, #14]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f040 80f3 	bne.w	800f2dc <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f104:	2b01      	cmp	r3, #1
 800f106:	d103      	bne.n	800f110 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2208      	movs	r2, #8
 800f10c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f10e:	e0e5      	b.n	800f2dc <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2207      	movs	r2, #7
 800f114:	701a      	strb	r2, [r3, #0]
      break;
 800f116:	e0e1      	b.n	800f2dc <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f11e:	2b00      	cmp	r3, #0
 800f120:	f000 80de 	beq.w	800f2e0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f12a:	2101      	movs	r1, #1
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2208      	movs	r2, #8
 800f134:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800f136:	e0d3      	b.n	800f2e0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f13e:	b29b      	uxth	r3, r3
 800f140:	4619      	mov	r1, r3
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fc20 	bl	800f988 <USBH_SetCfg>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f040 80ca 	bne.w	800f2e4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2209      	movs	r2, #9
 800f154:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f156:	e0c5      	b.n	800f2e4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f15e:	f003 0320 	and.w	r3, r3, #32
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00b      	beq.n	800f17e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800f166:	2101      	movs	r1, #1
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fc30 	bl	800f9ce <USBH_SetFeature>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	f040 80b9 	bne.w	800f2e8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	220a      	movs	r2, #10
 800f17a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f17c:	e0b4      	b.n	800f2e8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	220a      	movs	r2, #10
 800f182:	701a      	strb	r2, [r3, #0]
      break;
 800f184:	e0b0      	b.n	800f2e8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f000 80ad 	beq.w	800f2ec <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2200      	movs	r2, #0
 800f196:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f19a:	2300      	movs	r3, #0
 800f19c:	73fb      	strb	r3, [r7, #15]
 800f19e:	e016      	b.n	800f1ce <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f1a0:	7bfa      	ldrb	r2, [r7, #15]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	32de      	adds	r2, #222	; 0xde
 800f1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1aa:	791a      	ldrb	r2, [r3, #4]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d108      	bne.n	800f1c8 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f1b6:	7bfa      	ldrb	r2, [r7, #15]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	32de      	adds	r2, #222	; 0xde
 800f1bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f1c6:	e005      	b.n	800f1d4 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f1c8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	73fb      	strb	r3, [r7, #15]
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d0e5      	beq.n	800f1a0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d016      	beq.n	800f20c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	4798      	blx	r3
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d109      	bne.n	800f204 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2206      	movs	r2, #6
 800f1f4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f1fc:	2103      	movs	r1, #3
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f202:	e073      	b.n	800f2ec <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	220d      	movs	r2, #13
 800f208:	701a      	strb	r2, [r3, #0]
      break;
 800f20a:	e06f      	b.n	800f2ec <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	220d      	movs	r2, #13
 800f210:	701a      	strb	r2, [r3, #0]
      break;
 800f212:	e06b      	b.n	800f2ec <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d017      	beq.n	800f24e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f224:	691b      	ldr	r3, [r3, #16]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	4798      	blx	r3
 800f22a:	4603      	mov	r3, r0
 800f22c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f22e:	7bbb      	ldrb	r3, [r7, #14]
 800f230:	b2db      	uxtb	r3, r3
 800f232:	2b00      	cmp	r3, #0
 800f234:	d103      	bne.n	800f23e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	220b      	movs	r2, #11
 800f23a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f23c:	e058      	b.n	800f2f0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800f23e:	7bbb      	ldrb	r3, [r7, #14]
 800f240:	b2db      	uxtb	r3, r3
 800f242:	2b02      	cmp	r3, #2
 800f244:	d154      	bne.n	800f2f0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	220d      	movs	r2, #13
 800f24a:	701a      	strb	r2, [r3, #0]
      break;
 800f24c:	e050      	b.n	800f2f0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	220d      	movs	r2, #13
 800f252:	701a      	strb	r2, [r3, #0]
      break;
 800f254:	e04c      	b.n	800f2f0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d049      	beq.n	800f2f4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	4798      	blx	r3
      }
      break;
 800f26c:	e042      	b.n	800f2f4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f7ff fd72 	bl	800ed60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f282:	2b00      	cmp	r3, #0
 800f284:	d009      	beq.n	800f29a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d005      	beq.n	800f2b0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f2aa:	2105      	movs	r1, #5
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	2b01      	cmp	r3, #1
 800f2ba:	d107      	bne.n	800f2cc <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f7ff fe2b 	bl	800ef20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800f2ca:	e014      	b.n	800f2f6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f001 f9b5 	bl	801063c <USBH_LL_Start>
      break;
 800f2d2:	e010      	b.n	800f2f6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f2d4:	bf00      	nop
 800f2d6:	e00e      	b.n	800f2f6 <USBH_Process+0x3b6>
      break;
 800f2d8:	bf00      	nop
 800f2da:	e00c      	b.n	800f2f6 <USBH_Process+0x3b6>
      break;
 800f2dc:	bf00      	nop
 800f2de:	e00a      	b.n	800f2f6 <USBH_Process+0x3b6>
    break;
 800f2e0:	bf00      	nop
 800f2e2:	e008      	b.n	800f2f6 <USBH_Process+0x3b6>
      break;
 800f2e4:	bf00      	nop
 800f2e6:	e006      	b.n	800f2f6 <USBH_Process+0x3b6>
      break;
 800f2e8:	bf00      	nop
 800f2ea:	e004      	b.n	800f2f6 <USBH_Process+0x3b6>
      break;
 800f2ec:	bf00      	nop
 800f2ee:	e002      	b.n	800f2f6 <USBH_Process+0x3b6>
      break;
 800f2f0:	bf00      	nop
 800f2f2:	e000      	b.n	800f2f6 <USBH_Process+0x3b6>
      break;
 800f2f4:	bf00      	nop
  }
  return USBH_OK;
 800f2f6:	2300      	movs	r3, #0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af04      	add	r7, sp, #16
 800f306:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f308:	2301      	movs	r3, #1
 800f30a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f30c:	2301      	movs	r3, #1
 800f30e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	785b      	ldrb	r3, [r3, #1]
 800f314:	2b07      	cmp	r3, #7
 800f316:	f200 81c1 	bhi.w	800f69c <USBH_HandleEnum+0x39c>
 800f31a:	a201      	add	r2, pc, #4	; (adr r2, 800f320 <USBH_HandleEnum+0x20>)
 800f31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f320:	0800f341 	.word	0x0800f341
 800f324:	0800f3ff 	.word	0x0800f3ff
 800f328:	0800f469 	.word	0x0800f469
 800f32c:	0800f4f7 	.word	0x0800f4f7
 800f330:	0800f561 	.word	0x0800f561
 800f334:	0800f5d1 	.word	0x0800f5d1
 800f338:	0800f617 	.word	0x0800f617
 800f33c:	0800f65d 	.word	0x0800f65d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f340:	2108      	movs	r1, #8
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fa50 	bl	800f7e8 <USBH_Get_DevDesc>
 800f348:	4603      	mov	r3, r0
 800f34a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d130      	bne.n	800f3b4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2201      	movs	r2, #1
 800f360:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	7919      	ldrb	r1, [r3, #4]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f376:	b292      	uxth	r2, r2
 800f378:	9202      	str	r2, [sp, #8]
 800f37a:	2200      	movs	r2, #0
 800f37c:	9201      	str	r2, [sp, #4]
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	4603      	mov	r3, r0
 800f382:	2280      	movs	r2, #128	; 0x80
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 ff77 	bl	8010278 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	7959      	ldrb	r1, [r3, #5]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f39e:	b292      	uxth	r2, r2
 800f3a0:	9202      	str	r2, [sp, #8]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	9201      	str	r2, [sp, #4]
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 ff63 	bl	8010278 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f3b2:	e175      	b.n	800f6a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f3b4:	7bbb      	ldrb	r3, [r7, #14]
 800f3b6:	2b03      	cmp	r3, #3
 800f3b8:	f040 8172 	bne.w	800f6a0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	b2da      	uxtb	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d903      	bls.n	800f3de <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	220d      	movs	r2, #13
 800f3da:	701a      	strb	r2, [r3, #0]
      break;
 800f3dc:	e160      	b.n	800f6a0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	795b      	ldrb	r3, [r3, #5]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 ff97 	bl	8010318 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	791b      	ldrb	r3, [r3, #4]
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 ff91 	bl	8010318 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	701a      	strb	r2, [r3, #0]
      break;
 800f3fc:	e150      	b.n	800f6a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f3fe:	2112      	movs	r1, #18
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 f9f1 	bl	800f7e8 <USBH_Get_DevDesc>
 800f406:	4603      	mov	r3, r0
 800f408:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f40a:	7bbb      	ldrb	r3, [r7, #14]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d103      	bne.n	800f418 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2202      	movs	r2, #2
 800f414:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f416:	e145      	b.n	800f6a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f418:	7bbb      	ldrb	r3, [r7, #14]
 800f41a:	2b03      	cmp	r3, #3
 800f41c:	f040 8142 	bne.w	800f6a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f426:	3301      	adds	r3, #1
 800f428:	b2da      	uxtb	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f436:	2b03      	cmp	r3, #3
 800f438:	d903      	bls.n	800f442 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	220d      	movs	r2, #13
 800f43e:	701a      	strb	r2, [r3, #0]
      break;
 800f440:	e130      	b.n	800f6a4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	795b      	ldrb	r3, [r3, #5]
 800f446:	4619      	mov	r1, r3
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 ff65 	bl	8010318 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	791b      	ldrb	r3, [r3, #4]
 800f452:	4619      	mov	r1, r3
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 ff5f 	bl	8010318 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2200      	movs	r2, #0
 800f45e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	701a      	strb	r2, [r3, #0]
      break;
 800f466:	e11d      	b.n	800f6a4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f468:	2101      	movs	r1, #1
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f000 fa68 	bl	800f940 <USBH_SetAddress>
 800f470:	4603      	mov	r3, r0
 800f472:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f474:	7bbb      	ldrb	r3, [r7, #14]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d132      	bne.n	800f4e0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f47a:	2002      	movs	r0, #2
 800f47c:	f001 fa42 	bl	8010904 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2201      	movs	r2, #1
 800f484:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2203      	movs	r2, #3
 800f48c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	7919      	ldrb	r1, [r3, #4]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f4a2:	b292      	uxth	r2, r2
 800f4a4:	9202      	str	r2, [sp, #8]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	9201      	str	r2, [sp, #4]
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	2280      	movs	r2, #128	; 0x80
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f000 fee1 	bl	8010278 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	7959      	ldrb	r1, [r3, #5]
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f4ca:	b292      	uxth	r2, r2
 800f4cc:	9202      	str	r2, [sp, #8]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	9201      	str	r2, [sp, #4]
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 fecd 	bl	8010278 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f4de:	e0e3      	b.n	800f6a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f4e0:	7bbb      	ldrb	r3, [r7, #14]
 800f4e2:	2b03      	cmp	r3, #3
 800f4e4:	f040 80e0 	bne.w	800f6a8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	220d      	movs	r2, #13
 800f4ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	705a      	strb	r2, [r3, #1]
      break;
 800f4f4:	e0d8      	b.n	800f6a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f4f6:	2109      	movs	r1, #9
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f000 f99d 	bl	800f838 <USBH_Get_CfgDesc>
 800f4fe:	4603      	mov	r3, r0
 800f500:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f502:	7bbb      	ldrb	r3, [r7, #14]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d103      	bne.n	800f510 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2204      	movs	r2, #4
 800f50c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f50e:	e0cd      	b.n	800f6ac <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f510:	7bbb      	ldrb	r3, [r7, #14]
 800f512:	2b03      	cmp	r3, #3
 800f514:	f040 80ca 	bne.w	800f6ac <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f51e:	3301      	adds	r3, #1
 800f520:	b2da      	uxtb	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f52e:	2b03      	cmp	r3, #3
 800f530:	d903      	bls.n	800f53a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	220d      	movs	r2, #13
 800f536:	701a      	strb	r2, [r3, #0]
      break;
 800f538:	e0b8      	b.n	800f6ac <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	795b      	ldrb	r3, [r3, #5]
 800f53e:	4619      	mov	r1, r3
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 fee9 	bl	8010318 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	791b      	ldrb	r3, [r3, #4]
 800f54a:	4619      	mov	r1, r3
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 fee3 	bl	8010318 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	701a      	strb	r2, [r3, #0]
      break;
 800f55e:	e0a5      	b.n	800f6ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f566:	4619      	mov	r1, r3
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f000 f965 	bl	800f838 <USBH_Get_CfgDesc>
 800f56e:	4603      	mov	r3, r0
 800f570:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f572:	7bbb      	ldrb	r3, [r7, #14]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d103      	bne.n	800f580 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2205      	movs	r2, #5
 800f57c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f57e:	e097      	b.n	800f6b0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	2b03      	cmp	r3, #3
 800f584:	f040 8094 	bne.w	800f6b0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f58e:	3301      	adds	r3, #1
 800f590:	b2da      	uxtb	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f59e:	2b03      	cmp	r3, #3
 800f5a0:	d903      	bls.n	800f5aa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	220d      	movs	r2, #13
 800f5a6:	701a      	strb	r2, [r3, #0]
      break;
 800f5a8:	e082      	b.n	800f6b0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	795b      	ldrb	r3, [r3, #5]
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f000 feb1 	bl	8010318 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	791b      	ldrb	r3, [r3, #4]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 feab 	bl	8010318 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	701a      	strb	r2, [r3, #0]
      break;
 800f5ce:	e06f      	b.n	800f6b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d019      	beq.n	800f60e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f5e6:	23ff      	movs	r3, #255	; 0xff
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f949 	bl	800f880 <USBH_Get_StringDesc>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f5f2:	7bbb      	ldrb	r3, [r7, #14]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d103      	bne.n	800f600 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2206      	movs	r2, #6
 800f5fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f5fe:	e059      	b.n	800f6b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f600:	7bbb      	ldrb	r3, [r7, #14]
 800f602:	2b03      	cmp	r3, #3
 800f604:	d156      	bne.n	800f6b4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2206      	movs	r2, #6
 800f60a:	705a      	strb	r2, [r3, #1]
      break;
 800f60c:	e052      	b.n	800f6b4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2206      	movs	r2, #6
 800f612:	705a      	strb	r2, [r3, #1]
      break;
 800f614:	e04e      	b.n	800f6b4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d019      	beq.n	800f654 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f62c:	23ff      	movs	r3, #255	; 0xff
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f926 	bl	800f880 <USBH_Get_StringDesc>
 800f634:	4603      	mov	r3, r0
 800f636:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f638:	7bbb      	ldrb	r3, [r7, #14]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d103      	bne.n	800f646 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2207      	movs	r2, #7
 800f642:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f644:	e038      	b.n	800f6b8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f646:	7bbb      	ldrb	r3, [r7, #14]
 800f648:	2b03      	cmp	r3, #3
 800f64a:	d135      	bne.n	800f6b8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2207      	movs	r2, #7
 800f650:	705a      	strb	r2, [r3, #1]
      break;
 800f652:	e031      	b.n	800f6b8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2207      	movs	r2, #7
 800f658:	705a      	strb	r2, [r3, #1]
      break;
 800f65a:	e02d      	b.n	800f6b8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f662:	2b00      	cmp	r3, #0
 800f664:	d017      	beq.n	800f696 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f672:	23ff      	movs	r3, #255	; 0xff
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f903 	bl	800f880 <USBH_Get_StringDesc>
 800f67a:	4603      	mov	r3, r0
 800f67c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f67e:	7bbb      	ldrb	r3, [r7, #14]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d102      	bne.n	800f68a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f688:	e018      	b.n	800f6bc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f68a:	7bbb      	ldrb	r3, [r7, #14]
 800f68c:	2b03      	cmp	r3, #3
 800f68e:	d115      	bne.n	800f6bc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f690:	2300      	movs	r3, #0
 800f692:	73fb      	strb	r3, [r7, #15]
      break;
 800f694:	e012      	b.n	800f6bc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f696:	2300      	movs	r3, #0
 800f698:	73fb      	strb	r3, [r7, #15]
      break;
 800f69a:	e00f      	b.n	800f6bc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f69c:	bf00      	nop
 800f69e:	e00e      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6a0:	bf00      	nop
 800f6a2:	e00c      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6a4:	bf00      	nop
 800f6a6:	e00a      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6a8:	bf00      	nop
 800f6aa:	e008      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6ac:	bf00      	nop
 800f6ae:	e006      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6b0:	bf00      	nop
 800f6b2:	e004      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6b4:	bf00      	nop
 800f6b6:	e002      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6b8:	bf00      	nop
 800f6ba:	e000      	b.n	800f6be <USBH_HandleEnum+0x3be>
      break;
 800f6bc:	bf00      	nop
  }
  return Status;
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	683a      	ldr	r2, [r7, #0]
 800f6d6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f6da:	bf00      	nop
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b082      	sub	sp, #8
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f6f4:	1c5a      	adds	r2, r3, #1
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f000 f804 	bl	800f70a <USBH_HandleSof>
}
 800f702:	bf00      	nop
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b082      	sub	sp, #8
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	b2db      	uxtb	r3, r3
 800f718:	2b0b      	cmp	r3, #11
 800f71a:	d10a      	bne.n	800f732 <USBH_HandleSof+0x28>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f722:	2b00      	cmp	r3, #0
 800f724:	d005      	beq.n	800f732 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f72c:	699b      	ldr	r3, [r3, #24]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	4798      	blx	r3
  }
}
 800f732:	bf00      	nop
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f73a:	b480      	push	{r7}
 800f73c:	b083      	sub	sp, #12
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2201      	movs	r2, #1
 800f746:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f74a:	bf00      	nop
}
 800f74c:	370c      	adds	r7, #12
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f756:	b480      	push	{r7}
 800f758:	b083      	sub	sp, #12
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f766:	bf00      	nop
}
 800f768:	370c      	adds	r7, #12
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr

0800f772 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f772:	b480      	push	{r7}
 800f774:	b083      	sub	sp, #12
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2201      	movs	r2, #1
 800f77e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2200      	movs	r2, #0
 800f786:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	370c      	adds	r7, #12
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 ff56 	bl	8010672 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	791b      	ldrb	r3, [r3, #4]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	6878      	ldr	r0, [r7, #4]
 800f7ce:	f000 fda3 	bl	8010318 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	795b      	ldrb	r3, [r3, #5]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 fd9d 	bl	8010318 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b086      	sub	sp, #24
 800f7ec:	af02      	add	r7, sp, #8
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f7fa:	78fb      	ldrb	r3, [r7, #3]
 800f7fc:	b29b      	uxth	r3, r3
 800f7fe:	9300      	str	r3, [sp, #0]
 800f800:	4613      	mov	r3, r2
 800f802:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f806:	2100      	movs	r1, #0
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 f864 	bl	800f8d6 <USBH_GetDescriptor>
 800f80e:	4603      	mov	r3, r0
 800f810:	73fb      	strb	r3, [r7, #15]
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d10a      	bne.n	800f82e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f824:	78fa      	ldrb	r2, [r7, #3]
 800f826:	b292      	uxth	r2, r2
 800f828:	4619      	mov	r1, r3
 800f82a:	f000 f918 	bl	800fa5e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b086      	sub	sp, #24
 800f83c:	af02      	add	r7, sp, #8
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	460b      	mov	r3, r1
 800f842:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	331c      	adds	r3, #28
 800f848:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f84a:	887b      	ldrh	r3, [r7, #2]
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f854:	2100      	movs	r1, #0
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 f83d 	bl	800f8d6 <USBH_GetDescriptor>
 800f85c:	4603      	mov	r3, r0
 800f85e:	72fb      	strb	r3, [r7, #11]
 800f860:	7afb      	ldrb	r3, [r7, #11]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d107      	bne.n	800f876 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f86c:	887a      	ldrh	r2, [r7, #2]
 800f86e:	68f9      	ldr	r1, [r7, #12]
 800f870:	4618      	mov	r0, r3
 800f872:	f000 f964 	bl	800fb3e <USBH_ParseCfgDesc>
  }

  return status;
 800f876:	7afb      	ldrb	r3, [r7, #11]
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3710      	adds	r7, #16
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b088      	sub	sp, #32
 800f884:	af02      	add	r7, sp, #8
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	607a      	str	r2, [r7, #4]
 800f88a:	461a      	mov	r2, r3
 800f88c:	460b      	mov	r3, r1
 800f88e:	72fb      	strb	r3, [r7, #11]
 800f890:	4613      	mov	r3, r2
 800f892:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f894:	7afb      	ldrb	r3, [r7, #11]
 800f896:	b29b      	uxth	r3, r3
 800f898:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f89c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f8a4:	893b      	ldrh	r3, [r7, #8]
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f000 f812 	bl	800f8d6 <USBH_GetDescriptor>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	75fb      	strb	r3, [r7, #23]
 800f8b6:	7dfb      	ldrb	r3, [r7, #23]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d107      	bne.n	800f8cc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f8c2:	893a      	ldrh	r2, [r7, #8]
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 fa37 	bl	800fd3a <USBH_ParseStringDesc>
  }

  return status;
 800f8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3718      	adds	r7, #24
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f8d6:	b580      	push	{r7, lr}
 800f8d8:	b084      	sub	sp, #16
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	60f8      	str	r0, [r7, #12]
 800f8de:	607b      	str	r3, [r7, #4]
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	72fb      	strb	r3, [r7, #11]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	789b      	ldrb	r3, [r3, #2]
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	d11c      	bne.n	800f92a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f8f0:	7afb      	ldrb	r3, [r7, #11]
 800f8f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2206      	movs	r2, #6
 800f900:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	893a      	ldrh	r2, [r7, #8]
 800f906:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f908:	893b      	ldrh	r3, [r7, #8]
 800f90a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f90e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f912:	d104      	bne.n	800f91e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f240 4209 	movw	r2, #1033	; 0x409
 800f91a:	829a      	strh	r2, [r3, #20]
 800f91c:	e002      	b.n	800f924 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	8b3a      	ldrh	r2, [r7, #24]
 800f928:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f92a:	8b3b      	ldrh	r3, [r7, #24]
 800f92c:	461a      	mov	r2, r3
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	68f8      	ldr	r0, [r7, #12]
 800f932:	f000 fa50 	bl	800fdd6 <USBH_CtlReq>
 800f936:	4603      	mov	r3, r0
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3710      	adds	r7, #16
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	460b      	mov	r3, r1
 800f94a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	789b      	ldrb	r3, [r3, #2]
 800f950:	2b01      	cmp	r3, #1
 800f952:	d10f      	bne.n	800f974 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2200      	movs	r2, #0
 800f958:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2205      	movs	r2, #5
 800f95e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f960:	78fb      	ldrb	r3, [r7, #3]
 800f962:	b29a      	uxth	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f974:	2200      	movs	r2, #0
 800f976:	2100      	movs	r1, #0
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 fa2c 	bl	800fdd6 <USBH_CtlReq>
 800f97e:	4603      	mov	r3, r0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	460b      	mov	r3, r1
 800f992:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	789b      	ldrb	r3, [r3, #2]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d10e      	bne.n	800f9ba <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2209      	movs	r2, #9
 800f9a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	887a      	ldrh	r2, [r7, #2]
 800f9ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	2100      	movs	r1, #0
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f000 fa09 	bl	800fdd6 <USBH_CtlReq>
 800f9c4:	4603      	mov	r3, r0
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3708      	adds	r7, #8
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}

0800f9ce <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f9ce:	b580      	push	{r7, lr}
 800f9d0:	b082      	sub	sp, #8
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	6078      	str	r0, [r7, #4]
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	789b      	ldrb	r3, [r3, #2]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d10f      	bne.n	800fa02 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2203      	movs	r2, #3
 800f9ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f9ee:	78fb      	ldrb	r3, [r7, #3]
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800fa02:	2200      	movs	r2, #0
 800fa04:	2100      	movs	r1, #0
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f9e5 	bl	800fdd6 <USBH_CtlReq>
 800fa0c:	4603      	mov	r3, r0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b082      	sub	sp, #8
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
 800fa1e:	460b      	mov	r3, r1
 800fa20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	789b      	ldrb	r3, [r3, #2]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d10f      	bne.n	800fa4a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2202      	movs	r2, #2
 800fa2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2201      	movs	r2, #1
 800fa34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fa3c:	78fb      	ldrb	r3, [r7, #3]
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 f9c1 	bl	800fdd6 <USBH_CtlReq>
 800fa54:	4603      	mov	r3, r0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3708      	adds	r7, #8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b085      	sub	sp, #20
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	60f8      	str	r0, [r7, #12]
 800fa66:	60b9      	str	r1, [r7, #8]
 800fa68:	4613      	mov	r3, r2
 800fa6a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	781a      	ldrb	r2, [r3, #0]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	785a      	ldrb	r2, [r3, #1]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	3302      	adds	r3, #2
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	b29a      	uxth	r2, r3
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	3303      	adds	r3, #3
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	021b      	lsls	r3, r3, #8
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	4313      	orrs	r3, r2
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	791a      	ldrb	r2, [r3, #4]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	795a      	ldrb	r2, [r3, #5]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	799a      	ldrb	r2, [r3, #6]
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	79da      	ldrb	r2, [r3, #7]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800fab8:	88fb      	ldrh	r3, [r7, #6]
 800faba:	2b08      	cmp	r3, #8
 800fabc:	d939      	bls.n	800fb32 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	3308      	adds	r3, #8
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	3309      	adds	r3, #9
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	b29b      	uxth	r3, r3
 800face:	021b      	lsls	r3, r3, #8
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	4313      	orrs	r3, r2
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	330a      	adds	r3, #10
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	330b      	adds	r3, #11
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	b29b      	uxth	r3, r3
 800faea:	021b      	lsls	r3, r3, #8
 800faec:	b29b      	uxth	r3, r3
 800faee:	4313      	orrs	r3, r2
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	330c      	adds	r3, #12
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	330d      	adds	r3, #13
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	021b      	lsls	r3, r3, #8
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	7b9a      	ldrb	r2, [r3, #14]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	7bda      	ldrb	r2, [r3, #15]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	7c1a      	ldrb	r2, [r3, #16]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	7c5a      	ldrb	r2, [r3, #17]
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	745a      	strb	r2, [r3, #17]
  }
}
 800fb32:	bf00      	nop
 800fb34:	3714      	adds	r7, #20
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr

0800fb3e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800fb3e:	b580      	push	{r7, lr}
 800fb40:	b08a      	sub	sp, #40	; 0x28
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	60f8      	str	r0, [r7, #12]
 800fb46:	60b9      	str	r1, [r7, #8]
 800fb48:	4613      	mov	r3, r2
 800fb4a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fb50:	2300      	movs	r3, #0
 800fb52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fb56:	2300      	movs	r3, #0
 800fb58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	781a      	ldrb	r2, [r3, #0]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	785a      	ldrb	r2, [r3, #1]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	3302      	adds	r3, #2
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	b29a      	uxth	r2, r3
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	3303      	adds	r3, #3
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	021b      	lsls	r3, r3, #8
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	4313      	orrs	r3, r2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	791a      	ldrb	r2, [r3, #4]
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	795a      	ldrb	r2, [r3, #5]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	799a      	ldrb	r2, [r3, #6]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	79da      	ldrb	r2, [r3, #7]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	7a1a      	ldrb	r2, [r3, #8]
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fbb4:	88fb      	ldrh	r3, [r7, #6]
 800fbb6:	2b09      	cmp	r3, #9
 800fbb8:	d95f      	bls.n	800fc7a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fbba:	2309      	movs	r3, #9
 800fbbc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fbc2:	e051      	b.n	800fc68 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fbc4:	f107 0316 	add.w	r3, r7, #22
 800fbc8:	4619      	mov	r1, r3
 800fbca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbcc:	f000 f8e8 	bl	800fda0 <USBH_GetNextDesc>
 800fbd0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd4:	785b      	ldrb	r3, [r3, #1]
 800fbd6:	2b04      	cmp	r3, #4
 800fbd8:	d146      	bne.n	800fc68 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fbda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fbde:	221a      	movs	r2, #26
 800fbe0:	fb02 f303 	mul.w	r3, r2, r3
 800fbe4:	3308      	adds	r3, #8
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	4413      	add	r3, r2
 800fbea:	3302      	adds	r3, #2
 800fbec:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fbee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbf0:	69f8      	ldr	r0, [r7, #28]
 800fbf2:	f000 f846 	bl	800fc82 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fc00:	e022      	b.n	800fc48 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fc02:	f107 0316 	add.w	r3, r7, #22
 800fc06:	4619      	mov	r1, r3
 800fc08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc0a:	f000 f8c9 	bl	800fda0 <USBH_GetNextDesc>
 800fc0e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc12:	785b      	ldrb	r3, [r3, #1]
 800fc14:	2b05      	cmp	r3, #5
 800fc16:	d117      	bne.n	800fc48 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fc18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc1c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fc20:	3201      	adds	r2, #1
 800fc22:	00d2      	lsls	r2, r2, #3
 800fc24:	211a      	movs	r1, #26
 800fc26:	fb01 f303 	mul.w	r3, r1, r3
 800fc2a:	4413      	add	r3, r2
 800fc2c:	3308      	adds	r3, #8
 800fc2e:	68fa      	ldr	r2, [r7, #12]
 800fc30:	4413      	add	r3, r2
 800fc32:	3304      	adds	r3, #4
 800fc34:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800fc36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc38:	69b8      	ldr	r0, [r7, #24]
 800fc3a:	f000 f851 	bl	800fce0 <USBH_ParseEPDesc>
            ep_ix++;
 800fc3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fc42:	3301      	adds	r3, #1
 800fc44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	791b      	ldrb	r3, [r3, #4]
 800fc4c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d204      	bcs.n	800fc5e <USBH_ParseCfgDesc+0x120>
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	885a      	ldrh	r2, [r3, #2]
 800fc58:	8afb      	ldrh	r3, [r7, #22]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d8d1      	bhi.n	800fc02 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fc5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc62:	3301      	adds	r3, #1
 800fc64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fc68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d804      	bhi.n	800fc7a <USBH_ParseCfgDesc+0x13c>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	885a      	ldrh	r2, [r3, #2]
 800fc74:	8afb      	ldrh	r3, [r7, #22]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d8a4      	bhi.n	800fbc4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fc7a:	bf00      	nop
 800fc7c:	3728      	adds	r7, #40	; 0x28
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fc82:	b480      	push	{r7}
 800fc84:	b083      	sub	sp, #12
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	781a      	ldrb	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	785a      	ldrb	r2, [r3, #1]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	789a      	ldrb	r2, [r3, #2]
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	78da      	ldrb	r2, [r3, #3]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	791a      	ldrb	r2, [r3, #4]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	795a      	ldrb	r2, [r3, #5]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	799a      	ldrb	r2, [r3, #6]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	79da      	ldrb	r2, [r3, #7]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	7a1a      	ldrb	r2, [r3, #8]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	721a      	strb	r2, [r3, #8]
}
 800fcd4:	bf00      	nop
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	781a      	ldrb	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	785a      	ldrb	r2, [r3, #1]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	789a      	ldrb	r2, [r3, #2]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	78da      	ldrb	r2, [r3, #3]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	3304      	adds	r3, #4
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	3305      	adds	r3, #5
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	021b      	lsls	r3, r3, #8
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	799a      	ldrb	r2, [r3, #6]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	719a      	strb	r2, [r3, #6]
}
 800fd2e:	bf00      	nop
 800fd30:	370c      	adds	r7, #12
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr

0800fd3a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fd3a:	b480      	push	{r7}
 800fd3c:	b087      	sub	sp, #28
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	60f8      	str	r0, [r7, #12]
 800fd42:	60b9      	str	r1, [r7, #8]
 800fd44:	4613      	mov	r3, r2
 800fd46:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	2b03      	cmp	r3, #3
 800fd50:	d120      	bne.n	800fd94 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	1e9a      	subs	r2, r3, #2
 800fd58:	88fb      	ldrh	r3, [r7, #6]
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	bf28      	it	cs
 800fd5e:	4613      	movcs	r3, r2
 800fd60:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	3302      	adds	r3, #2
 800fd66:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fd68:	2300      	movs	r3, #0
 800fd6a:	82fb      	strh	r3, [r7, #22]
 800fd6c:	e00b      	b.n	800fd86 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fd6e:	8afb      	ldrh	r3, [r7, #22]
 800fd70:	68fa      	ldr	r2, [r7, #12]
 800fd72:	4413      	add	r3, r2
 800fd74:	781a      	ldrb	r2, [r3, #0]
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fd80:	8afb      	ldrh	r3, [r7, #22]
 800fd82:	3302      	adds	r3, #2
 800fd84:	82fb      	strh	r3, [r7, #22]
 800fd86:	8afa      	ldrh	r2, [r7, #22]
 800fd88:	8abb      	ldrh	r3, [r7, #20]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d3ef      	bcc.n	800fd6e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2200      	movs	r2, #0
 800fd92:	701a      	strb	r2, [r3, #0]
  }
}
 800fd94:	bf00      	nop
 800fd96:	371c      	adds	r7, #28
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	881a      	ldrh	r2, [r3, #0]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4413      	add	r3, r2
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	3714      	adds	r7, #20
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr

0800fdd6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b086      	sub	sp, #24
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	60f8      	str	r0, [r7, #12]
 800fdde:	60b9      	str	r1, [r7, #8]
 800fde0:	4613      	mov	r3, r2
 800fde2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fde4:	2301      	movs	r3, #1
 800fde6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	789b      	ldrb	r3, [r3, #2]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d002      	beq.n	800fdf6 <USBH_CtlReq+0x20>
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	d00f      	beq.n	800fe14 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800fdf4:	e027      	b.n	800fe46 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	88fa      	ldrh	r2, [r7, #6]
 800fe00:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2201      	movs	r2, #1
 800fe06:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	75fb      	strb	r3, [r7, #23]
      break;
 800fe12:	e018      	b.n	800fe46 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f000 f81b 	bl	800fe50 <USBH_HandleControl>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fe1e:	7dfb      	ldrb	r3, [r7, #23]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <USBH_CtlReq+0x54>
 800fe24:	7dfb      	ldrb	r3, [r7, #23]
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d106      	bne.n	800fe38 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2200      	movs	r2, #0
 800fe34:	761a      	strb	r2, [r3, #24]
      break;
 800fe36:	e005      	b.n	800fe44 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800fe38:	7dfb      	ldrb	r3, [r7, #23]
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d102      	bne.n	800fe44 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2201      	movs	r2, #1
 800fe42:	709a      	strb	r2, [r3, #2]
      break;
 800fe44:	bf00      	nop
  }
  return status;
 800fe46:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	3718      	adds	r7, #24
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af02      	add	r7, sp, #8
 800fe56:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	7e1b      	ldrb	r3, [r3, #24]
 800fe64:	3b01      	subs	r3, #1
 800fe66:	2b0a      	cmp	r3, #10
 800fe68:	f200 8156 	bhi.w	8010118 <USBH_HandleControl+0x2c8>
 800fe6c:	a201      	add	r2, pc, #4	; (adr r2, 800fe74 <USBH_HandleControl+0x24>)
 800fe6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe72:	bf00      	nop
 800fe74:	0800fea1 	.word	0x0800fea1
 800fe78:	0800febb 	.word	0x0800febb
 800fe7c:	0800ff25 	.word	0x0800ff25
 800fe80:	0800ff4b 	.word	0x0800ff4b
 800fe84:	0800ff83 	.word	0x0800ff83
 800fe88:	0800ffad 	.word	0x0800ffad
 800fe8c:	0800ffff 	.word	0x0800ffff
 800fe90:	08010021 	.word	0x08010021
 800fe94:	0801005d 	.word	0x0801005d
 800fe98:	08010083 	.word	0x08010083
 800fe9c:	080100c1 	.word	0x080100c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f103 0110 	add.w	r1, r3, #16
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	795b      	ldrb	r3, [r3, #5]
 800feaa:	461a      	mov	r2, r3
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f000 f943 	bl	8010138 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2202      	movs	r2, #2
 800feb6:	761a      	strb	r2, [r3, #24]
      break;
 800feb8:	e139      	b.n	801012e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	795b      	ldrb	r3, [r3, #5]
 800febe:	4619      	mov	r1, r3
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 fcc5 	bl	8010850 <USBH_LL_GetURBState>
 800fec6:	4603      	mov	r3, r0
 800fec8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800feca:	7bbb      	ldrb	r3, [r7, #14]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d11e      	bne.n	800ff0e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	7c1b      	ldrb	r3, [r3, #16]
 800fed4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fed8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	8adb      	ldrh	r3, [r3, #22]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00a      	beq.n	800fef8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fee2:	7b7b      	ldrb	r3, [r7, #13]
 800fee4:	2b80      	cmp	r3, #128	; 0x80
 800fee6:	d103      	bne.n	800fef0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2203      	movs	r2, #3
 800feec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800feee:	e115      	b.n	801011c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2205      	movs	r2, #5
 800fef4:	761a      	strb	r2, [r3, #24]
      break;
 800fef6:	e111      	b.n	801011c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fef8:	7b7b      	ldrb	r3, [r7, #13]
 800fefa:	2b80      	cmp	r3, #128	; 0x80
 800fefc:	d103      	bne.n	800ff06 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2209      	movs	r2, #9
 800ff02:	761a      	strb	r2, [r3, #24]
      break;
 800ff04:	e10a      	b.n	801011c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2207      	movs	r2, #7
 800ff0a:	761a      	strb	r2, [r3, #24]
      break;
 800ff0c:	e106      	b.n	801011c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ff0e:	7bbb      	ldrb	r3, [r7, #14]
 800ff10:	2b04      	cmp	r3, #4
 800ff12:	d003      	beq.n	800ff1c <USBH_HandleControl+0xcc>
 800ff14:	7bbb      	ldrb	r3, [r7, #14]
 800ff16:	2b02      	cmp	r3, #2
 800ff18:	f040 8100 	bne.w	801011c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	220b      	movs	r2, #11
 800ff20:	761a      	strb	r2, [r3, #24]
      break;
 800ff22:	e0fb      	b.n	801011c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6899      	ldr	r1, [r3, #8]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	899a      	ldrh	r2, [r3, #12]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	791b      	ldrb	r3, [r3, #4]
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f000 f93a 	bl	80101b6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2204      	movs	r2, #4
 800ff46:	761a      	strb	r2, [r3, #24]
      break;
 800ff48:	e0f1      	b.n	801012e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	791b      	ldrb	r3, [r3, #4]
 800ff4e:	4619      	mov	r1, r3
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 fc7d 	bl	8010850 <USBH_LL_GetURBState>
 800ff56:	4603      	mov	r3, r0
 800ff58:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ff5a:	7bbb      	ldrb	r3, [r7, #14]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d102      	bne.n	800ff66 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2209      	movs	r2, #9
 800ff64:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ff66:	7bbb      	ldrb	r3, [r7, #14]
 800ff68:	2b05      	cmp	r3, #5
 800ff6a:	d102      	bne.n	800ff72 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ff6c:	2303      	movs	r3, #3
 800ff6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff70:	e0d6      	b.n	8010120 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ff72:	7bbb      	ldrb	r3, [r7, #14]
 800ff74:	2b04      	cmp	r3, #4
 800ff76:	f040 80d3 	bne.w	8010120 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	220b      	movs	r2, #11
 800ff7e:	761a      	strb	r2, [r3, #24]
      break;
 800ff80:	e0ce      	b.n	8010120 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6899      	ldr	r1, [r3, #8]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	899a      	ldrh	r2, [r3, #12]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	795b      	ldrb	r3, [r3, #5]
 800ff8e:	2001      	movs	r0, #1
 800ff90:	9000      	str	r0, [sp, #0]
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f000 f8ea 	bl	801016c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2206      	movs	r2, #6
 800ffa8:	761a      	strb	r2, [r3, #24]
      break;
 800ffaa:	e0c0      	b.n	801012e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	795b      	ldrb	r3, [r3, #5]
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f000 fc4c 	bl	8010850 <USBH_LL_GetURBState>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ffbc:	7bbb      	ldrb	r3, [r7, #14]
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d103      	bne.n	800ffca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2207      	movs	r2, #7
 800ffc6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ffc8:	e0ac      	b.n	8010124 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ffca:	7bbb      	ldrb	r3, [r7, #14]
 800ffcc:	2b05      	cmp	r3, #5
 800ffce:	d105      	bne.n	800ffdc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	220c      	movs	r2, #12
 800ffd4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ffd6:	2303      	movs	r3, #3
 800ffd8:	73fb      	strb	r3, [r7, #15]
      break;
 800ffda:	e0a3      	b.n	8010124 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ffdc:	7bbb      	ldrb	r3, [r7, #14]
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	d103      	bne.n	800ffea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2205      	movs	r2, #5
 800ffe6:	761a      	strb	r2, [r3, #24]
      break;
 800ffe8:	e09c      	b.n	8010124 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ffea:	7bbb      	ldrb	r3, [r7, #14]
 800ffec:	2b04      	cmp	r3, #4
 800ffee:	f040 8099 	bne.w	8010124 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	220b      	movs	r2, #11
 800fff6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fff8:	2302      	movs	r3, #2
 800fffa:	73fb      	strb	r3, [r7, #15]
      break;
 800fffc:	e092      	b.n	8010124 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	791b      	ldrb	r3, [r3, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	2100      	movs	r1, #0
 8010006:	6878      	ldr	r0, [r7, #4]
 8010008:	f000 f8d5 	bl	80101b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010012:	b29a      	uxth	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2208      	movs	r2, #8
 801001c:	761a      	strb	r2, [r3, #24]

      break;
 801001e:	e086      	b.n	801012e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	791b      	ldrb	r3, [r3, #4]
 8010024:	4619      	mov	r1, r3
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 fc12 	bl	8010850 <USBH_LL_GetURBState>
 801002c:	4603      	mov	r3, r0
 801002e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010030:	7bbb      	ldrb	r3, [r7, #14]
 8010032:	2b01      	cmp	r3, #1
 8010034:	d105      	bne.n	8010042 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	220d      	movs	r2, #13
 801003a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801003c:	2300      	movs	r3, #0
 801003e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010040:	e072      	b.n	8010128 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8010042:	7bbb      	ldrb	r3, [r7, #14]
 8010044:	2b04      	cmp	r3, #4
 8010046:	d103      	bne.n	8010050 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	220b      	movs	r2, #11
 801004c:	761a      	strb	r2, [r3, #24]
      break;
 801004e:	e06b      	b.n	8010128 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8010050:	7bbb      	ldrb	r3, [r7, #14]
 8010052:	2b05      	cmp	r3, #5
 8010054:	d168      	bne.n	8010128 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010056:	2303      	movs	r3, #3
 8010058:	73fb      	strb	r3, [r7, #15]
      break;
 801005a:	e065      	b.n	8010128 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	795b      	ldrb	r3, [r3, #5]
 8010060:	2201      	movs	r2, #1
 8010062:	9200      	str	r2, [sp, #0]
 8010064:	2200      	movs	r2, #0
 8010066:	2100      	movs	r1, #0
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 f87f 	bl	801016c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010074:	b29a      	uxth	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	220a      	movs	r2, #10
 801007e:	761a      	strb	r2, [r3, #24]
      break;
 8010080:	e055      	b.n	801012e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	795b      	ldrb	r3, [r3, #5]
 8010086:	4619      	mov	r1, r3
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 fbe1 	bl	8010850 <USBH_LL_GetURBState>
 801008e:	4603      	mov	r3, r0
 8010090:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010092:	7bbb      	ldrb	r3, [r7, #14]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d105      	bne.n	80100a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010098:	2300      	movs	r3, #0
 801009a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	220d      	movs	r2, #13
 80100a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80100a2:	e043      	b.n	801012c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80100a4:	7bbb      	ldrb	r3, [r7, #14]
 80100a6:	2b02      	cmp	r3, #2
 80100a8:	d103      	bne.n	80100b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2209      	movs	r2, #9
 80100ae:	761a      	strb	r2, [r3, #24]
      break;
 80100b0:	e03c      	b.n	801012c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80100b2:	7bbb      	ldrb	r3, [r7, #14]
 80100b4:	2b04      	cmp	r3, #4
 80100b6:	d139      	bne.n	801012c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	220b      	movs	r2, #11
 80100bc:	761a      	strb	r2, [r3, #24]
      break;
 80100be:	e035      	b.n	801012c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	7e5b      	ldrb	r3, [r3, #25]
 80100c4:	3301      	adds	r3, #1
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	765a      	strb	r2, [r3, #25]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	7e5b      	ldrb	r3, [r3, #25]
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d806      	bhi.n	80100e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2201      	movs	r2, #1
 80100de:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80100e0:	e025      	b.n	801012e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80100e8:	2106      	movs	r1, #6
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2200      	movs	r2, #0
 80100f2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	795b      	ldrb	r3, [r3, #5]
 80100f8:	4619      	mov	r1, r3
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 f90c 	bl	8010318 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	791b      	ldrb	r3, [r3, #4]
 8010104:	4619      	mov	r1, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f000 f906 	bl	8010318 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010112:	2302      	movs	r3, #2
 8010114:	73fb      	strb	r3, [r7, #15]
      break;
 8010116:	e00a      	b.n	801012e <USBH_HandleControl+0x2de>

    default:
      break;
 8010118:	bf00      	nop
 801011a:	e008      	b.n	801012e <USBH_HandleControl+0x2de>
      break;
 801011c:	bf00      	nop
 801011e:	e006      	b.n	801012e <USBH_HandleControl+0x2de>
      break;
 8010120:	bf00      	nop
 8010122:	e004      	b.n	801012e <USBH_HandleControl+0x2de>
      break;
 8010124:	bf00      	nop
 8010126:	e002      	b.n	801012e <USBH_HandleControl+0x2de>
      break;
 8010128:	bf00      	nop
 801012a:	e000      	b.n	801012e <USBH_HandleControl+0x2de>
      break;
 801012c:	bf00      	nop
  }

  return status;
 801012e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010130:	4618      	mov	r0, r3
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b088      	sub	sp, #32
 801013c:	af04      	add	r7, sp, #16
 801013e:	60f8      	str	r0, [r7, #12]
 8010140:	60b9      	str	r1, [r7, #8]
 8010142:	4613      	mov	r3, r2
 8010144:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010146:	79f9      	ldrb	r1, [r7, #7]
 8010148:	2300      	movs	r3, #0
 801014a:	9303      	str	r3, [sp, #12]
 801014c:	2308      	movs	r3, #8
 801014e:	9302      	str	r3, [sp, #8]
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	9301      	str	r3, [sp, #4]
 8010154:	2300      	movs	r3, #0
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	2300      	movs	r3, #0
 801015a:	2200      	movs	r2, #0
 801015c:	68f8      	ldr	r0, [r7, #12]
 801015e:	f000 fb46 	bl	80107ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8010162:	2300      	movs	r3, #0
}
 8010164:	4618      	mov	r0, r3
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b088      	sub	sp, #32
 8010170:	af04      	add	r7, sp, #16
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	4611      	mov	r1, r2
 8010178:	461a      	mov	r2, r3
 801017a:	460b      	mov	r3, r1
 801017c:	80fb      	strh	r3, [r7, #6]
 801017e:	4613      	mov	r3, r2
 8010180:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801018c:	2300      	movs	r3, #0
 801018e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010190:	7979      	ldrb	r1, [r7, #5]
 8010192:	7e3b      	ldrb	r3, [r7, #24]
 8010194:	9303      	str	r3, [sp, #12]
 8010196:	88fb      	ldrh	r3, [r7, #6]
 8010198:	9302      	str	r3, [sp, #8]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	9301      	str	r3, [sp, #4]
 801019e:	2301      	movs	r3, #1
 80101a0:	9300      	str	r3, [sp, #0]
 80101a2:	2300      	movs	r3, #0
 80101a4:	2200      	movs	r2, #0
 80101a6:	68f8      	ldr	r0, [r7, #12]
 80101a8:	f000 fb21 	bl	80107ee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b088      	sub	sp, #32
 80101ba:	af04      	add	r7, sp, #16
 80101bc:	60f8      	str	r0, [r7, #12]
 80101be:	60b9      	str	r1, [r7, #8]
 80101c0:	4611      	mov	r1, r2
 80101c2:	461a      	mov	r2, r3
 80101c4:	460b      	mov	r3, r1
 80101c6:	80fb      	strh	r3, [r7, #6]
 80101c8:	4613      	mov	r3, r2
 80101ca:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101cc:	7979      	ldrb	r1, [r7, #5]
 80101ce:	2300      	movs	r3, #0
 80101d0:	9303      	str	r3, [sp, #12]
 80101d2:	88fb      	ldrh	r3, [r7, #6]
 80101d4:	9302      	str	r3, [sp, #8]
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	9301      	str	r3, [sp, #4]
 80101da:	2301      	movs	r3, #1
 80101dc:	9300      	str	r3, [sp, #0]
 80101de:	2300      	movs	r3, #0
 80101e0:	2201      	movs	r2, #1
 80101e2:	68f8      	ldr	r0, [r7, #12]
 80101e4:	f000 fb03 	bl	80107ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80101e8:	2300      	movs	r3, #0

}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}

080101f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80101f2:	b580      	push	{r7, lr}
 80101f4:	b088      	sub	sp, #32
 80101f6:	af04      	add	r7, sp, #16
 80101f8:	60f8      	str	r0, [r7, #12]
 80101fa:	60b9      	str	r1, [r7, #8]
 80101fc:	4611      	mov	r1, r2
 80101fe:	461a      	mov	r2, r3
 8010200:	460b      	mov	r3, r1
 8010202:	80fb      	strh	r3, [r7, #6]
 8010204:	4613      	mov	r3, r2
 8010206:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 801020e:	2b00      	cmp	r3, #0
 8010210:	d001      	beq.n	8010216 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010212:	2300      	movs	r3, #0
 8010214:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010216:	7979      	ldrb	r1, [r7, #5]
 8010218:	7e3b      	ldrb	r3, [r7, #24]
 801021a:	9303      	str	r3, [sp, #12]
 801021c:	88fb      	ldrh	r3, [r7, #6]
 801021e:	9302      	str	r3, [sp, #8]
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	9301      	str	r3, [sp, #4]
 8010224:	2301      	movs	r3, #1
 8010226:	9300      	str	r3, [sp, #0]
 8010228:	2302      	movs	r3, #2
 801022a:	2200      	movs	r2, #0
 801022c:	68f8      	ldr	r0, [r7, #12]
 801022e:	f000 fade 	bl	80107ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	3710      	adds	r7, #16
 8010238:	46bd      	mov	sp, r7
 801023a:	bd80      	pop	{r7, pc}

0801023c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af04      	add	r7, sp, #16
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	4611      	mov	r1, r2
 8010248:	461a      	mov	r2, r3
 801024a:	460b      	mov	r3, r1
 801024c:	80fb      	strh	r3, [r7, #6]
 801024e:	4613      	mov	r3, r2
 8010250:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010252:	7979      	ldrb	r1, [r7, #5]
 8010254:	2300      	movs	r3, #0
 8010256:	9303      	str	r3, [sp, #12]
 8010258:	88fb      	ldrh	r3, [r7, #6]
 801025a:	9302      	str	r3, [sp, #8]
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	2301      	movs	r3, #1
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	2302      	movs	r3, #2
 8010266:	2201      	movs	r2, #1
 8010268:	68f8      	ldr	r0, [r7, #12]
 801026a:	f000 fac0 	bl	80107ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801026e:	2300      	movs	r3, #0
}
 8010270:	4618      	mov	r0, r3
 8010272:	3710      	adds	r7, #16
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af04      	add	r7, sp, #16
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	4608      	mov	r0, r1
 8010282:	4611      	mov	r1, r2
 8010284:	461a      	mov	r2, r3
 8010286:	4603      	mov	r3, r0
 8010288:	70fb      	strb	r3, [r7, #3]
 801028a:	460b      	mov	r3, r1
 801028c:	70bb      	strb	r3, [r7, #2]
 801028e:	4613      	mov	r3, r2
 8010290:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010292:	7878      	ldrb	r0, [r7, #1]
 8010294:	78ba      	ldrb	r2, [r7, #2]
 8010296:	78f9      	ldrb	r1, [r7, #3]
 8010298:	8b3b      	ldrh	r3, [r7, #24]
 801029a:	9302      	str	r3, [sp, #8]
 801029c:	7d3b      	ldrb	r3, [r7, #20]
 801029e:	9301      	str	r3, [sp, #4]
 80102a0:	7c3b      	ldrb	r3, [r7, #16]
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	4603      	mov	r3, r0
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 fa53 	bl	8010752 <USBH_LL_OpenPipe>

  return USBH_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	460b      	mov	r3, r1
 80102c0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80102c2:	78fb      	ldrb	r3, [r7, #3]
 80102c4:	4619      	mov	r1, r3
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 fa72 	bl	80107b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3708      	adds	r7, #8
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}

080102d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80102d6:	b580      	push	{r7, lr}
 80102d8:	b084      	sub	sp, #16
 80102da:	af00      	add	r7, sp, #0
 80102dc:	6078      	str	r0, [r7, #4]
 80102de:	460b      	mov	r3, r1
 80102e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f000 f836 	bl	8010354 <USBH_GetFreePipe>
 80102e8:	4603      	mov	r3, r0
 80102ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80102ec:	89fb      	ldrh	r3, [r7, #14]
 80102ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d00a      	beq.n	801030c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80102f6:	78fa      	ldrb	r2, [r7, #3]
 80102f8:	89fb      	ldrh	r3, [r7, #14]
 80102fa:	f003 030f 	and.w	r3, r3, #15
 80102fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010302:	6879      	ldr	r1, [r7, #4]
 8010304:	33e0      	adds	r3, #224	; 0xe0
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	440b      	add	r3, r1
 801030a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801030c:	89fb      	ldrh	r3, [r7, #14]
 801030e:	b2db      	uxtb	r3, r3
}
 8010310:	4618      	mov	r0, r3
 8010312:	3710      	adds	r7, #16
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010318:	b480      	push	{r7}
 801031a:	b083      	sub	sp, #12
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	460b      	mov	r3, r1
 8010322:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010324:	78fb      	ldrb	r3, [r7, #3]
 8010326:	2b0a      	cmp	r3, #10
 8010328:	d80d      	bhi.n	8010346 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801032a:	78fb      	ldrb	r3, [r7, #3]
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	33e0      	adds	r3, #224	; 0xe0
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	4413      	add	r3, r2
 8010334:	685a      	ldr	r2, [r3, #4]
 8010336:	78fb      	ldrb	r3, [r7, #3]
 8010338:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801033c:	6879      	ldr	r1, [r7, #4]
 801033e:	33e0      	adds	r3, #224	; 0xe0
 8010340:	009b      	lsls	r3, r3, #2
 8010342:	440b      	add	r3, r1
 8010344:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	370c      	adds	r7, #12
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010354:	b480      	push	{r7}
 8010356:	b085      	sub	sp, #20
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801035c:	2300      	movs	r3, #0
 801035e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010360:	2300      	movs	r3, #0
 8010362:	73fb      	strb	r3, [r7, #15]
 8010364:	e00f      	b.n	8010386 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010366:	7bfb      	ldrb	r3, [r7, #15]
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	33e0      	adds	r3, #224	; 0xe0
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	4413      	add	r3, r2
 8010370:	685b      	ldr	r3, [r3, #4]
 8010372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010376:	2b00      	cmp	r3, #0
 8010378:	d102      	bne.n	8010380 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801037a:	7bfb      	ldrb	r3, [r7, #15]
 801037c:	b29b      	uxth	r3, r3
 801037e:	e007      	b.n	8010390 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8010380:	7bfb      	ldrb	r3, [r7, #15]
 8010382:	3301      	adds	r3, #1
 8010384:	73fb      	strb	r3, [r7, #15]
 8010386:	7bfb      	ldrb	r3, [r7, #15]
 8010388:	2b0a      	cmp	r3, #10
 801038a:	d9ec      	bls.n	8010366 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801038c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010390:	4618      	mov	r0, r3
 8010392:	3714      	adds	r7, #20
 8010394:	46bd      	mov	sp, r7
 8010396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039a:	4770      	bx	lr

0801039c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80103a0:	2201      	movs	r2, #1
 80103a2:	490e      	ldr	r1, [pc, #56]	; (80103dc <MX_USB_HOST_Init+0x40>)
 80103a4:	480e      	ldr	r0, [pc, #56]	; (80103e0 <MX_USB_HOST_Init+0x44>)
 80103a6:	f7fe fca1 	bl	800ecec <USBH_Init>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80103b0:	f7f3 faa2 	bl	80038f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80103b4:	490b      	ldr	r1, [pc, #44]	; (80103e4 <MX_USB_HOST_Init+0x48>)
 80103b6:	480a      	ldr	r0, [pc, #40]	; (80103e0 <MX_USB_HOST_Init+0x44>)
 80103b8:	f7fe fd26 	bl	800ee08 <USBH_RegisterClass>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80103c2:	f7f3 fa99 	bl	80038f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80103c6:	4806      	ldr	r0, [pc, #24]	; (80103e0 <MX_USB_HOST_Init+0x44>)
 80103c8:	f7fe fdaa 	bl	800ef20 <USBH_Start>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80103d2:	f7f3 fa91 	bl	80038f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80103d6:	bf00      	nop
 80103d8:	bd80      	pop	{r7, pc}
 80103da:	bf00      	nop
 80103dc:	080103fd 	.word	0x080103fd
 80103e0:	20000f4c 	.word	0x20000f4c
 80103e4:	200000e4 	.word	0x200000e4

080103e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80103ec:	4802      	ldr	r0, [pc, #8]	; (80103f8 <MX_USB_HOST_Process+0x10>)
 80103ee:	f7fe fda7 	bl	800ef40 <USBH_Process>
}
 80103f2:	bf00      	nop
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	20000f4c 	.word	0x20000f4c

080103fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	460b      	mov	r3, r1
 8010406:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010408:	78fb      	ldrb	r3, [r7, #3]
 801040a:	3b01      	subs	r3, #1
 801040c:	2b04      	cmp	r3, #4
 801040e:	d819      	bhi.n	8010444 <USBH_UserProcess+0x48>
 8010410:	a201      	add	r2, pc, #4	; (adr r2, 8010418 <USBH_UserProcess+0x1c>)
 8010412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010416:	bf00      	nop
 8010418:	08010445 	.word	0x08010445
 801041c:	08010435 	.word	0x08010435
 8010420:	08010445 	.word	0x08010445
 8010424:	0801043d 	.word	0x0801043d
 8010428:	0801042d 	.word	0x0801042d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801042c:	4b09      	ldr	r3, [pc, #36]	; (8010454 <USBH_UserProcess+0x58>)
 801042e:	2203      	movs	r2, #3
 8010430:	701a      	strb	r2, [r3, #0]
  break;
 8010432:	e008      	b.n	8010446 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010434:	4b07      	ldr	r3, [pc, #28]	; (8010454 <USBH_UserProcess+0x58>)
 8010436:	2202      	movs	r2, #2
 8010438:	701a      	strb	r2, [r3, #0]
  break;
 801043a:	e004      	b.n	8010446 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801043c:	4b05      	ldr	r3, [pc, #20]	; (8010454 <USBH_UserProcess+0x58>)
 801043e:	2201      	movs	r2, #1
 8010440:	701a      	strb	r2, [r3, #0]
  break;
 8010442:	e000      	b.n	8010446 <USBH_UserProcess+0x4a>

  default:
  break;
 8010444:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010446:	bf00      	nop
 8010448:	370c      	adds	r7, #12
 801044a:	46bd      	mov	sp, r7
 801044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010450:	4770      	bx	lr
 8010452:	bf00      	nop
 8010454:	200003fc 	.word	0x200003fc

08010458 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b08a      	sub	sp, #40	; 0x28
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010460:	f107 0314 	add.w	r3, r7, #20
 8010464:	2200      	movs	r2, #0
 8010466:	601a      	str	r2, [r3, #0]
 8010468:	605a      	str	r2, [r3, #4]
 801046a:	609a      	str	r2, [r3, #8]
 801046c:	60da      	str	r2, [r3, #12]
 801046e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010478:	d147      	bne.n	801050a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801047a:	2300      	movs	r3, #0
 801047c:	613b      	str	r3, [r7, #16]
 801047e:	4b25      	ldr	r3, [pc, #148]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 8010480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010482:	4a24      	ldr	r2, [pc, #144]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 8010484:	f043 0301 	orr.w	r3, r3, #1
 8010488:	6313      	str	r3, [r2, #48]	; 0x30
 801048a:	4b22      	ldr	r3, [pc, #136]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 801048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801048e:	f003 0301 	and.w	r3, r3, #1
 8010492:	613b      	str	r3, [r7, #16]
 8010494:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010496:	f44f 7300 	mov.w	r3, #512	; 0x200
 801049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801049c:	2300      	movs	r3, #0
 801049e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104a0:	2300      	movs	r3, #0
 80104a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80104a4:	f107 0314 	add.w	r3, r7, #20
 80104a8:	4619      	mov	r1, r3
 80104aa:	481b      	ldr	r0, [pc, #108]	; (8010518 <HAL_HCD_MspInit+0xc0>)
 80104ac:	f7f5 fdc0 	bl	8006030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80104b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80104b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104b6:	2302      	movs	r3, #2
 80104b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104ba:	2300      	movs	r3, #0
 80104bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104be:	2303      	movs	r3, #3
 80104c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80104c2:	230a      	movs	r3, #10
 80104c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104c6:	f107 0314 	add.w	r3, r7, #20
 80104ca:	4619      	mov	r1, r3
 80104cc:	4812      	ldr	r0, [pc, #72]	; (8010518 <HAL_HCD_MspInit+0xc0>)
 80104ce:	f7f5 fdaf 	bl	8006030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80104d2:	4b10      	ldr	r3, [pc, #64]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 80104d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104d6:	4a0f      	ldr	r2, [pc, #60]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 80104d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104dc:	6353      	str	r3, [r2, #52]	; 0x34
 80104de:	2300      	movs	r3, #0
 80104e0:	60fb      	str	r3, [r7, #12]
 80104e2:	4b0c      	ldr	r3, [pc, #48]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 80104e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104e6:	4a0b      	ldr	r2, [pc, #44]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 80104e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80104ec:	6453      	str	r3, [r2, #68]	; 0x44
 80104ee:	4b09      	ldr	r3, [pc, #36]	; (8010514 <HAL_HCD_MspInit+0xbc>)
 80104f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80104f6:	60fb      	str	r3, [r7, #12]
 80104f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80104fa:	2200      	movs	r2, #0
 80104fc:	2100      	movs	r1, #0
 80104fe:	2043      	movs	r0, #67	; 0x43
 8010500:	f7f5 f838 	bl	8005574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010504:	2043      	movs	r0, #67	; 0x43
 8010506:	f7f5 f861 	bl	80055cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801050a:	bf00      	nop
 801050c:	3728      	adds	r7, #40	; 0x28
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	40023800 	.word	0x40023800
 8010518:	40020000 	.word	0x40020000

0801051c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801052a:	4618      	mov	r0, r3
 801052c:	f7ff f8db 	bl	800f6e6 <USBH_LL_IncTimer>
}
 8010530:	bf00      	nop
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010546:	4618      	mov	r0, r3
 8010548:	f7ff f913 	bl	800f772 <USBH_LL_Connect>
}
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff f91c 	bl	800f7a0 <USBH_LL_Disconnect>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	460b      	mov	r3, r1
 801057a:	70fb      	strb	r3, [r7, #3]
 801057c:	4613      	mov	r3, r2
 801057e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010580:	bf00      	nop
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801059a:	4618      	mov	r0, r3
 801059c:	f7ff f8cd 	bl	800f73a <USBH_LL_PortEnabled>
}
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7ff f8cd 	bl	800f756 <USBH_LL_PortDisabled>
}
 80105bc:	bf00      	nop
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80105d2:	2b01      	cmp	r3, #1
 80105d4:	d12a      	bne.n	801062c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80105d6:	4a18      	ldr	r2, [pc, #96]	; (8010638 <USBH_LL_Init+0x74>)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	4a15      	ldr	r2, [pc, #84]	; (8010638 <USBH_LL_Init+0x74>)
 80105e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80105e6:	4b14      	ldr	r3, [pc, #80]	; (8010638 <USBH_LL_Init+0x74>)
 80105e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80105ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80105ee:	4b12      	ldr	r3, [pc, #72]	; (8010638 <USBH_LL_Init+0x74>)
 80105f0:	2208      	movs	r2, #8
 80105f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80105f4:	4b10      	ldr	r3, [pc, #64]	; (8010638 <USBH_LL_Init+0x74>)
 80105f6:	2201      	movs	r2, #1
 80105f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105fa:	4b0f      	ldr	r3, [pc, #60]	; (8010638 <USBH_LL_Init+0x74>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010600:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <USBH_LL_Init+0x74>)
 8010602:	2202      	movs	r2, #2
 8010604:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010606:	4b0c      	ldr	r3, [pc, #48]	; (8010638 <USBH_LL_Init+0x74>)
 8010608:	2200      	movs	r2, #0
 801060a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801060c:	480a      	ldr	r0, [pc, #40]	; (8010638 <USBH_LL_Init+0x74>)
 801060e:	f7f6 f8f7 	bl	8006800 <HAL_HCD_Init>
 8010612:	4603      	mov	r3, r0
 8010614:	2b00      	cmp	r3, #0
 8010616:	d001      	beq.n	801061c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010618:	f7f3 f96e 	bl	80038f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801061c:	4806      	ldr	r0, [pc, #24]	; (8010638 <USBH_LL_Init+0x74>)
 801061e:	f7f6 fce6 	bl	8006fee <HAL_HCD_GetCurrentFrame>
 8010622:	4603      	mov	r3, r0
 8010624:	4619      	mov	r1, r3
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7ff f84e 	bl	800f6c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3708      	adds	r7, #8
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	20001324 	.word	0x20001324

0801063c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b084      	sub	sp, #16
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010644:	2300      	movs	r3, #0
 8010646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010648:	2300      	movs	r3, #0
 801064a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010652:	4618      	mov	r0, r3
 8010654:	f7f6 fc55 	bl	8006f02 <HAL_HCD_Start>
 8010658:	4603      	mov	r3, r0
 801065a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801065c:	7bfb      	ldrb	r3, [r7, #15]
 801065e:	4618      	mov	r0, r3
 8010660:	f000 f95c 	bl	801091c <USBH_Get_USB_Status>
 8010664:	4603      	mov	r3, r0
 8010666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010668:	7bbb      	ldrb	r3, [r7, #14]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3710      	adds	r7, #16
 801066e:	46bd      	mov	sp, r7
 8010670:	bd80      	pop	{r7, pc}

08010672 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801067a:	2300      	movs	r3, #0
 801067c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801067e:	2300      	movs	r3, #0
 8010680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010688:	4618      	mov	r0, r3
 801068a:	f7f6 fc5d 	bl	8006f48 <HAL_HCD_Stop>
 801068e:	4603      	mov	r3, r0
 8010690:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010692:	7bfb      	ldrb	r3, [r7, #15]
 8010694:	4618      	mov	r0, r3
 8010696:	f000 f941 	bl	801091c <USBH_Get_USB_Status>
 801069a:	4603      	mov	r3, r0
 801069c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801069e:	7bbb      	ldrb	r3, [r7, #14]
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3710      	adds	r7, #16
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80106b0:	2301      	movs	r3, #1
 80106b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7f6 fca5 	bl	800700a <HAL_HCD_GetCurrentSpeed>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d00c      	beq.n	80106e0 <USBH_LL_GetSpeed+0x38>
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d80d      	bhi.n	80106e6 <USBH_LL_GetSpeed+0x3e>
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d002      	beq.n	80106d4 <USBH_LL_GetSpeed+0x2c>
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d003      	beq.n	80106da <USBH_LL_GetSpeed+0x32>
 80106d2:	e008      	b.n	80106e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80106d4:	2300      	movs	r3, #0
 80106d6:	73fb      	strb	r3, [r7, #15]
    break;
 80106d8:	e008      	b.n	80106ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80106da:	2301      	movs	r3, #1
 80106dc:	73fb      	strb	r3, [r7, #15]
    break;
 80106de:	e005      	b.n	80106ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80106e0:	2302      	movs	r3, #2
 80106e2:	73fb      	strb	r3, [r7, #15]
    break;
 80106e4:	e002      	b.n	80106ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80106e6:	2301      	movs	r3, #1
 80106e8:	73fb      	strb	r3, [r7, #15]
    break;
 80106ea:	bf00      	nop
  }
  return  speed;
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010702:	2300      	movs	r3, #0
 8010704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801070c:	4618      	mov	r0, r3
 801070e:	f7f6 fc38 	bl	8006f82 <HAL_HCD_ResetPort>
 8010712:	4603      	mov	r3, r0
 8010714:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010716:	7bfb      	ldrb	r3, [r7, #15]
 8010718:	4618      	mov	r0, r3
 801071a:	f000 f8ff 	bl	801091c <USBH_Get_USB_Status>
 801071e:	4603      	mov	r3, r0
 8010720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010722:	7bbb      	ldrb	r3, [r7, #14]
}
 8010724:	4618      	mov	r0, r3
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	460b      	mov	r3, r1
 8010736:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801073e:	78fa      	ldrb	r2, [r7, #3]
 8010740:	4611      	mov	r1, r2
 8010742:	4618      	mov	r0, r3
 8010744:	f7f6 fc3f 	bl	8006fc6 <HAL_HCD_HC_GetXferCount>
 8010748:	4603      	mov	r3, r0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010752:	b590      	push	{r4, r7, lr}
 8010754:	b089      	sub	sp, #36	; 0x24
 8010756:	af04      	add	r7, sp, #16
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	4608      	mov	r0, r1
 801075c:	4611      	mov	r1, r2
 801075e:	461a      	mov	r2, r3
 8010760:	4603      	mov	r3, r0
 8010762:	70fb      	strb	r3, [r7, #3]
 8010764:	460b      	mov	r3, r1
 8010766:	70bb      	strb	r3, [r7, #2]
 8010768:	4613      	mov	r3, r2
 801076a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801076c:	2300      	movs	r3, #0
 801076e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010770:	2300      	movs	r3, #0
 8010772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801077a:	787c      	ldrb	r4, [r7, #1]
 801077c:	78ba      	ldrb	r2, [r7, #2]
 801077e:	78f9      	ldrb	r1, [r7, #3]
 8010780:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010782:	9302      	str	r3, [sp, #8]
 8010784:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010788:	9301      	str	r3, [sp, #4]
 801078a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	4623      	mov	r3, r4
 8010792:	f7f6 f8a3 	bl	80068dc <HAL_HCD_HC_Init>
 8010796:	4603      	mov	r3, r0
 8010798:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801079a:	7bfb      	ldrb	r3, [r7, #15]
 801079c:	4618      	mov	r0, r3
 801079e:	f000 f8bd 	bl	801091c <USBH_Get_USB_Status>
 80107a2:	4603      	mov	r3, r0
 80107a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107a8:	4618      	mov	r0, r3
 80107aa:	3714      	adds	r7, #20
 80107ac:	46bd      	mov	sp, r7
 80107ae:	bd90      	pop	{r4, r7, pc}

080107b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b084      	sub	sp, #16
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
 80107b8:	460b      	mov	r3, r1
 80107ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107bc:	2300      	movs	r3, #0
 80107be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107c0:	2300      	movs	r3, #0
 80107c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80107ca:	78fa      	ldrb	r2, [r7, #3]
 80107cc:	4611      	mov	r1, r2
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7f6 f913 	bl	80069fa <HAL_HCD_HC_Halt>
 80107d4:	4603      	mov	r3, r0
 80107d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
 80107da:	4618      	mov	r0, r3
 80107dc:	f000 f89e 	bl	801091c <USBH_Get_USB_Status>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80107ee:	b590      	push	{r4, r7, lr}
 80107f0:	b089      	sub	sp, #36	; 0x24
 80107f2:	af04      	add	r7, sp, #16
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	4608      	mov	r0, r1
 80107f8:	4611      	mov	r1, r2
 80107fa:	461a      	mov	r2, r3
 80107fc:	4603      	mov	r3, r0
 80107fe:	70fb      	strb	r3, [r7, #3]
 8010800:	460b      	mov	r3, r1
 8010802:	70bb      	strb	r3, [r7, #2]
 8010804:	4613      	mov	r3, r2
 8010806:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010808:	2300      	movs	r3, #0
 801080a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801080c:	2300      	movs	r3, #0
 801080e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010816:	787c      	ldrb	r4, [r7, #1]
 8010818:	78ba      	ldrb	r2, [r7, #2]
 801081a:	78f9      	ldrb	r1, [r7, #3]
 801081c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010820:	9303      	str	r3, [sp, #12]
 8010822:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010824:	9302      	str	r3, [sp, #8]
 8010826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010828:	9301      	str	r3, [sp, #4]
 801082a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	4623      	mov	r3, r4
 8010832:	f7f6 f905 	bl	8006a40 <HAL_HCD_HC_SubmitRequest>
 8010836:	4603      	mov	r3, r0
 8010838:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801083a:	7bfb      	ldrb	r3, [r7, #15]
 801083c:	4618      	mov	r0, r3
 801083e:	f000 f86d 	bl	801091c <USBH_Get_USB_Status>
 8010842:	4603      	mov	r3, r0
 8010844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010846:	7bbb      	ldrb	r3, [r7, #14]
}
 8010848:	4618      	mov	r0, r3
 801084a:	3714      	adds	r7, #20
 801084c:	46bd      	mov	sp, r7
 801084e:	bd90      	pop	{r4, r7, pc}

08010850 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	460b      	mov	r3, r1
 801085a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010862:	78fa      	ldrb	r2, [r7, #3]
 8010864:	4611      	mov	r1, r2
 8010866:	4618      	mov	r0, r3
 8010868:	f7f6 fb99 	bl	8006f9e <HAL_HCD_HC_GetURBState>
 801086c:	4603      	mov	r3, r0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3708      	adds	r7, #8
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	460b      	mov	r3, r1
 8010880:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010888:	2b01      	cmp	r3, #1
 801088a:	d103      	bne.n	8010894 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801088c:	78fb      	ldrb	r3, [r7, #3]
 801088e:	4618      	mov	r0, r3
 8010890:	f000 f870 	bl	8010974 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010894:	20c8      	movs	r0, #200	; 0xc8
 8010896:	f7f4 f97b 	bl	8004b90 <HAL_Delay>
  return USBH_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3708      	adds	r7, #8
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80108a4:	b480      	push	{r7}
 80108a6:	b085      	sub	sp, #20
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	460b      	mov	r3, r1
 80108ae:	70fb      	strb	r3, [r7, #3]
 80108b0:	4613      	mov	r3, r2
 80108b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80108ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80108bc:	78fb      	ldrb	r3, [r7, #3]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	212c      	movs	r1, #44	; 0x2c
 80108c2:	fb01 f303 	mul.w	r3, r1, r3
 80108c6:	4413      	add	r3, r2
 80108c8:	333b      	adds	r3, #59	; 0x3b
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d009      	beq.n	80108e4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80108d0:	78fb      	ldrb	r3, [r7, #3]
 80108d2:	68fa      	ldr	r2, [r7, #12]
 80108d4:	212c      	movs	r1, #44	; 0x2c
 80108d6:	fb01 f303 	mul.w	r3, r1, r3
 80108da:	4413      	add	r3, r2
 80108dc:	3354      	adds	r3, #84	; 0x54
 80108de:	78ba      	ldrb	r2, [r7, #2]
 80108e0:	701a      	strb	r2, [r3, #0]
 80108e2:	e008      	b.n	80108f6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80108e4:	78fb      	ldrb	r3, [r7, #3]
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	212c      	movs	r1, #44	; 0x2c
 80108ea:	fb01 f303 	mul.w	r3, r1, r3
 80108ee:	4413      	add	r3, r2
 80108f0:	3355      	adds	r3, #85	; 0x55
 80108f2:	78ba      	ldrb	r2, [r7, #2]
 80108f4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80108f6:	2300      	movs	r3, #0
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3714      	adds	r7, #20
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7f4 f93f 	bl	8004b90 <HAL_Delay>
}
 8010912:	bf00      	nop
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
	...

0801091c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801091c:	b480      	push	{r7}
 801091e:	b085      	sub	sp, #20
 8010920:	af00      	add	r7, sp, #0
 8010922:	4603      	mov	r3, r0
 8010924:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010926:	2300      	movs	r3, #0
 8010928:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801092a:	79fb      	ldrb	r3, [r7, #7]
 801092c:	2b03      	cmp	r3, #3
 801092e:	d817      	bhi.n	8010960 <USBH_Get_USB_Status+0x44>
 8010930:	a201      	add	r2, pc, #4	; (adr r2, 8010938 <USBH_Get_USB_Status+0x1c>)
 8010932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010936:	bf00      	nop
 8010938:	08010949 	.word	0x08010949
 801093c:	0801094f 	.word	0x0801094f
 8010940:	08010955 	.word	0x08010955
 8010944:	0801095b 	.word	0x0801095b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	73fb      	strb	r3, [r7, #15]
    break;
 801094c:	e00b      	b.n	8010966 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801094e:	2302      	movs	r3, #2
 8010950:	73fb      	strb	r3, [r7, #15]
    break;
 8010952:	e008      	b.n	8010966 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010954:	2301      	movs	r3, #1
 8010956:	73fb      	strb	r3, [r7, #15]
    break;
 8010958:	e005      	b.n	8010966 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801095a:	2302      	movs	r3, #2
 801095c:	73fb      	strb	r3, [r7, #15]
    break;
 801095e:	e002      	b.n	8010966 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010960:	2302      	movs	r3, #2
 8010962:	73fb      	strb	r3, [r7, #15]
    break;
 8010964:	bf00      	nop
  }
  return usb_status;
 8010966:	7bfb      	ldrb	r3, [r7, #15]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3714      	adds	r7, #20
 801096c:	46bd      	mov	sp, r7
 801096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010972:	4770      	bx	lr

08010974 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	4603      	mov	r3, r0
 801097c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801097e:	79fb      	ldrb	r3, [r7, #7]
 8010980:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010982:	79fb      	ldrb	r3, [r7, #7]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d102      	bne.n	801098e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010988:	2301      	movs	r3, #1
 801098a:	73fb      	strb	r3, [r7, #15]
 801098c:	e001      	b.n	8010992 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801098e:	2300      	movs	r3, #0
 8010990:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010992:	7bfb      	ldrb	r3, [r7, #15]
 8010994:	461a      	mov	r2, r3
 8010996:	2101      	movs	r1, #1
 8010998:	4803      	ldr	r0, [pc, #12]	; (80109a8 <MX_DriverVbusFS+0x34>)
 801099a:	f7f5 fee7 	bl	800676c <HAL_GPIO_WritePin>
}
 801099e:	bf00      	nop
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	40020800 	.word	0x40020800

080109ac <__errno>:
 80109ac:	4b01      	ldr	r3, [pc, #4]	; (80109b4 <__errno+0x8>)
 80109ae:	6818      	ldr	r0, [r3, #0]
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	20000104 	.word	0x20000104

080109b8 <__libc_init_array>:
 80109b8:	b570      	push	{r4, r5, r6, lr}
 80109ba:	4d0d      	ldr	r5, [pc, #52]	; (80109f0 <__libc_init_array+0x38>)
 80109bc:	4c0d      	ldr	r4, [pc, #52]	; (80109f4 <__libc_init_array+0x3c>)
 80109be:	1b64      	subs	r4, r4, r5
 80109c0:	10a4      	asrs	r4, r4, #2
 80109c2:	2600      	movs	r6, #0
 80109c4:	42a6      	cmp	r6, r4
 80109c6:	d109      	bne.n	80109dc <__libc_init_array+0x24>
 80109c8:	4d0b      	ldr	r5, [pc, #44]	; (80109f8 <__libc_init_array+0x40>)
 80109ca:	4c0c      	ldr	r4, [pc, #48]	; (80109fc <__libc_init_array+0x44>)
 80109cc:	f002 fed6 	bl	801377c <_init>
 80109d0:	1b64      	subs	r4, r4, r5
 80109d2:	10a4      	asrs	r4, r4, #2
 80109d4:	2600      	movs	r6, #0
 80109d6:	42a6      	cmp	r6, r4
 80109d8:	d105      	bne.n	80109e6 <__libc_init_array+0x2e>
 80109da:	bd70      	pop	{r4, r5, r6, pc}
 80109dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80109e0:	4798      	blx	r3
 80109e2:	3601      	adds	r6, #1
 80109e4:	e7ee      	b.n	80109c4 <__libc_init_array+0xc>
 80109e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80109ea:	4798      	blx	r3
 80109ec:	3601      	adds	r6, #1
 80109ee:	e7f2      	b.n	80109d6 <__libc_init_array+0x1e>
 80109f0:	08014454 	.word	0x08014454
 80109f4:	08014454 	.word	0x08014454
 80109f8:	08014454 	.word	0x08014454
 80109fc:	08014458 	.word	0x08014458

08010a00 <malloc>:
 8010a00:	4b02      	ldr	r3, [pc, #8]	; (8010a0c <malloc+0xc>)
 8010a02:	4601      	mov	r1, r0
 8010a04:	6818      	ldr	r0, [r3, #0]
 8010a06:	f000 b863 	b.w	8010ad0 <_malloc_r>
 8010a0a:	bf00      	nop
 8010a0c:	20000104 	.word	0x20000104

08010a10 <free>:
 8010a10:	4b02      	ldr	r3, [pc, #8]	; (8010a1c <free+0xc>)
 8010a12:	4601      	mov	r1, r0
 8010a14:	6818      	ldr	r0, [r3, #0]
 8010a16:	f000 b80b 	b.w	8010a30 <_free_r>
 8010a1a:	bf00      	nop
 8010a1c:	20000104 	.word	0x20000104

08010a20 <memset>:
 8010a20:	4402      	add	r2, r0
 8010a22:	4603      	mov	r3, r0
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d100      	bne.n	8010a2a <memset+0xa>
 8010a28:	4770      	bx	lr
 8010a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8010a2e:	e7f9      	b.n	8010a24 <memset+0x4>

08010a30 <_free_r>:
 8010a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a32:	2900      	cmp	r1, #0
 8010a34:	d048      	beq.n	8010ac8 <_free_r+0x98>
 8010a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a3a:	9001      	str	r0, [sp, #4]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8010a42:	bfb8      	it	lt
 8010a44:	18e4      	addlt	r4, r4, r3
 8010a46:	f001 fbdd 	bl	8012204 <__malloc_lock>
 8010a4a:	4a20      	ldr	r2, [pc, #128]	; (8010acc <_free_r+0x9c>)
 8010a4c:	9801      	ldr	r0, [sp, #4]
 8010a4e:	6813      	ldr	r3, [r2, #0]
 8010a50:	4615      	mov	r5, r2
 8010a52:	b933      	cbnz	r3, 8010a62 <_free_r+0x32>
 8010a54:	6063      	str	r3, [r4, #4]
 8010a56:	6014      	str	r4, [r2, #0]
 8010a58:	b003      	add	sp, #12
 8010a5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a5e:	f001 bbd7 	b.w	8012210 <__malloc_unlock>
 8010a62:	42a3      	cmp	r3, r4
 8010a64:	d90b      	bls.n	8010a7e <_free_r+0x4e>
 8010a66:	6821      	ldr	r1, [r4, #0]
 8010a68:	1862      	adds	r2, r4, r1
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	bf04      	itt	eq
 8010a6e:	681a      	ldreq	r2, [r3, #0]
 8010a70:	685b      	ldreq	r3, [r3, #4]
 8010a72:	6063      	str	r3, [r4, #4]
 8010a74:	bf04      	itt	eq
 8010a76:	1852      	addeq	r2, r2, r1
 8010a78:	6022      	streq	r2, [r4, #0]
 8010a7a:	602c      	str	r4, [r5, #0]
 8010a7c:	e7ec      	b.n	8010a58 <_free_r+0x28>
 8010a7e:	461a      	mov	r2, r3
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	b10b      	cbz	r3, 8010a88 <_free_r+0x58>
 8010a84:	42a3      	cmp	r3, r4
 8010a86:	d9fa      	bls.n	8010a7e <_free_r+0x4e>
 8010a88:	6811      	ldr	r1, [r2, #0]
 8010a8a:	1855      	adds	r5, r2, r1
 8010a8c:	42a5      	cmp	r5, r4
 8010a8e:	d10b      	bne.n	8010aa8 <_free_r+0x78>
 8010a90:	6824      	ldr	r4, [r4, #0]
 8010a92:	4421      	add	r1, r4
 8010a94:	1854      	adds	r4, r2, r1
 8010a96:	42a3      	cmp	r3, r4
 8010a98:	6011      	str	r1, [r2, #0]
 8010a9a:	d1dd      	bne.n	8010a58 <_free_r+0x28>
 8010a9c:	681c      	ldr	r4, [r3, #0]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	6053      	str	r3, [r2, #4]
 8010aa2:	4421      	add	r1, r4
 8010aa4:	6011      	str	r1, [r2, #0]
 8010aa6:	e7d7      	b.n	8010a58 <_free_r+0x28>
 8010aa8:	d902      	bls.n	8010ab0 <_free_r+0x80>
 8010aaa:	230c      	movs	r3, #12
 8010aac:	6003      	str	r3, [r0, #0]
 8010aae:	e7d3      	b.n	8010a58 <_free_r+0x28>
 8010ab0:	6825      	ldr	r5, [r4, #0]
 8010ab2:	1961      	adds	r1, r4, r5
 8010ab4:	428b      	cmp	r3, r1
 8010ab6:	bf04      	itt	eq
 8010ab8:	6819      	ldreq	r1, [r3, #0]
 8010aba:	685b      	ldreq	r3, [r3, #4]
 8010abc:	6063      	str	r3, [r4, #4]
 8010abe:	bf04      	itt	eq
 8010ac0:	1949      	addeq	r1, r1, r5
 8010ac2:	6021      	streq	r1, [r4, #0]
 8010ac4:	6054      	str	r4, [r2, #4]
 8010ac6:	e7c7      	b.n	8010a58 <_free_r+0x28>
 8010ac8:	b003      	add	sp, #12
 8010aca:	bd30      	pop	{r4, r5, pc}
 8010acc:	20000400 	.word	0x20000400

08010ad0 <_malloc_r>:
 8010ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad2:	1ccd      	adds	r5, r1, #3
 8010ad4:	f025 0503 	bic.w	r5, r5, #3
 8010ad8:	3508      	adds	r5, #8
 8010ada:	2d0c      	cmp	r5, #12
 8010adc:	bf38      	it	cc
 8010ade:	250c      	movcc	r5, #12
 8010ae0:	2d00      	cmp	r5, #0
 8010ae2:	4606      	mov	r6, r0
 8010ae4:	db01      	blt.n	8010aea <_malloc_r+0x1a>
 8010ae6:	42a9      	cmp	r1, r5
 8010ae8:	d903      	bls.n	8010af2 <_malloc_r+0x22>
 8010aea:	230c      	movs	r3, #12
 8010aec:	6033      	str	r3, [r6, #0]
 8010aee:	2000      	movs	r0, #0
 8010af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010af2:	f001 fb87 	bl	8012204 <__malloc_lock>
 8010af6:	4921      	ldr	r1, [pc, #132]	; (8010b7c <_malloc_r+0xac>)
 8010af8:	680a      	ldr	r2, [r1, #0]
 8010afa:	4614      	mov	r4, r2
 8010afc:	b99c      	cbnz	r4, 8010b26 <_malloc_r+0x56>
 8010afe:	4f20      	ldr	r7, [pc, #128]	; (8010b80 <_malloc_r+0xb0>)
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	b923      	cbnz	r3, 8010b0e <_malloc_r+0x3e>
 8010b04:	4621      	mov	r1, r4
 8010b06:	4630      	mov	r0, r6
 8010b08:	f000 fca6 	bl	8011458 <_sbrk_r>
 8010b0c:	6038      	str	r0, [r7, #0]
 8010b0e:	4629      	mov	r1, r5
 8010b10:	4630      	mov	r0, r6
 8010b12:	f000 fca1 	bl	8011458 <_sbrk_r>
 8010b16:	1c43      	adds	r3, r0, #1
 8010b18:	d123      	bne.n	8010b62 <_malloc_r+0x92>
 8010b1a:	230c      	movs	r3, #12
 8010b1c:	6033      	str	r3, [r6, #0]
 8010b1e:	4630      	mov	r0, r6
 8010b20:	f001 fb76 	bl	8012210 <__malloc_unlock>
 8010b24:	e7e3      	b.n	8010aee <_malloc_r+0x1e>
 8010b26:	6823      	ldr	r3, [r4, #0]
 8010b28:	1b5b      	subs	r3, r3, r5
 8010b2a:	d417      	bmi.n	8010b5c <_malloc_r+0x8c>
 8010b2c:	2b0b      	cmp	r3, #11
 8010b2e:	d903      	bls.n	8010b38 <_malloc_r+0x68>
 8010b30:	6023      	str	r3, [r4, #0]
 8010b32:	441c      	add	r4, r3
 8010b34:	6025      	str	r5, [r4, #0]
 8010b36:	e004      	b.n	8010b42 <_malloc_r+0x72>
 8010b38:	6863      	ldr	r3, [r4, #4]
 8010b3a:	42a2      	cmp	r2, r4
 8010b3c:	bf0c      	ite	eq
 8010b3e:	600b      	streq	r3, [r1, #0]
 8010b40:	6053      	strne	r3, [r2, #4]
 8010b42:	4630      	mov	r0, r6
 8010b44:	f001 fb64 	bl	8012210 <__malloc_unlock>
 8010b48:	f104 000b 	add.w	r0, r4, #11
 8010b4c:	1d23      	adds	r3, r4, #4
 8010b4e:	f020 0007 	bic.w	r0, r0, #7
 8010b52:	1ac2      	subs	r2, r0, r3
 8010b54:	d0cc      	beq.n	8010af0 <_malloc_r+0x20>
 8010b56:	1a1b      	subs	r3, r3, r0
 8010b58:	50a3      	str	r3, [r4, r2]
 8010b5a:	e7c9      	b.n	8010af0 <_malloc_r+0x20>
 8010b5c:	4622      	mov	r2, r4
 8010b5e:	6864      	ldr	r4, [r4, #4]
 8010b60:	e7cc      	b.n	8010afc <_malloc_r+0x2c>
 8010b62:	1cc4      	adds	r4, r0, #3
 8010b64:	f024 0403 	bic.w	r4, r4, #3
 8010b68:	42a0      	cmp	r0, r4
 8010b6a:	d0e3      	beq.n	8010b34 <_malloc_r+0x64>
 8010b6c:	1a21      	subs	r1, r4, r0
 8010b6e:	4630      	mov	r0, r6
 8010b70:	f000 fc72 	bl	8011458 <_sbrk_r>
 8010b74:	3001      	adds	r0, #1
 8010b76:	d1dd      	bne.n	8010b34 <_malloc_r+0x64>
 8010b78:	e7cf      	b.n	8010b1a <_malloc_r+0x4a>
 8010b7a:	bf00      	nop
 8010b7c:	20000400 	.word	0x20000400
 8010b80:	20000404 	.word	0x20000404

08010b84 <__cvt>:
 8010b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b88:	ec55 4b10 	vmov	r4, r5, d0
 8010b8c:	2d00      	cmp	r5, #0
 8010b8e:	460e      	mov	r6, r1
 8010b90:	4619      	mov	r1, r3
 8010b92:	462b      	mov	r3, r5
 8010b94:	bfbb      	ittet	lt
 8010b96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010b9a:	461d      	movlt	r5, r3
 8010b9c:	2300      	movge	r3, #0
 8010b9e:	232d      	movlt	r3, #45	; 0x2d
 8010ba0:	700b      	strb	r3, [r1, #0]
 8010ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ba4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010ba8:	4691      	mov	r9, r2
 8010baa:	f023 0820 	bic.w	r8, r3, #32
 8010bae:	bfbc      	itt	lt
 8010bb0:	4622      	movlt	r2, r4
 8010bb2:	4614      	movlt	r4, r2
 8010bb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010bb8:	d005      	beq.n	8010bc6 <__cvt+0x42>
 8010bba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010bbe:	d100      	bne.n	8010bc2 <__cvt+0x3e>
 8010bc0:	3601      	adds	r6, #1
 8010bc2:	2102      	movs	r1, #2
 8010bc4:	e000      	b.n	8010bc8 <__cvt+0x44>
 8010bc6:	2103      	movs	r1, #3
 8010bc8:	ab03      	add	r3, sp, #12
 8010bca:	9301      	str	r3, [sp, #4]
 8010bcc:	ab02      	add	r3, sp, #8
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	ec45 4b10 	vmov	d0, r4, r5
 8010bd4:	4653      	mov	r3, sl
 8010bd6:	4632      	mov	r2, r6
 8010bd8:	f000 fd16 	bl	8011608 <_dtoa_r>
 8010bdc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010be0:	4607      	mov	r7, r0
 8010be2:	d102      	bne.n	8010bea <__cvt+0x66>
 8010be4:	f019 0f01 	tst.w	r9, #1
 8010be8:	d022      	beq.n	8010c30 <__cvt+0xac>
 8010bea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010bee:	eb07 0906 	add.w	r9, r7, r6
 8010bf2:	d110      	bne.n	8010c16 <__cvt+0x92>
 8010bf4:	783b      	ldrb	r3, [r7, #0]
 8010bf6:	2b30      	cmp	r3, #48	; 0x30
 8010bf8:	d10a      	bne.n	8010c10 <__cvt+0x8c>
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	4620      	mov	r0, r4
 8010c00:	4629      	mov	r1, r5
 8010c02:	f7ef ff69 	bl	8000ad8 <__aeabi_dcmpeq>
 8010c06:	b918      	cbnz	r0, 8010c10 <__cvt+0x8c>
 8010c08:	f1c6 0601 	rsb	r6, r6, #1
 8010c0c:	f8ca 6000 	str.w	r6, [sl]
 8010c10:	f8da 3000 	ldr.w	r3, [sl]
 8010c14:	4499      	add	r9, r3
 8010c16:	2200      	movs	r2, #0
 8010c18:	2300      	movs	r3, #0
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	f7ef ff5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8010c22:	b108      	cbz	r0, 8010c28 <__cvt+0xa4>
 8010c24:	f8cd 900c 	str.w	r9, [sp, #12]
 8010c28:	2230      	movs	r2, #48	; 0x30
 8010c2a:	9b03      	ldr	r3, [sp, #12]
 8010c2c:	454b      	cmp	r3, r9
 8010c2e:	d307      	bcc.n	8010c40 <__cvt+0xbc>
 8010c30:	9b03      	ldr	r3, [sp, #12]
 8010c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c34:	1bdb      	subs	r3, r3, r7
 8010c36:	4638      	mov	r0, r7
 8010c38:	6013      	str	r3, [r2, #0]
 8010c3a:	b004      	add	sp, #16
 8010c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c40:	1c59      	adds	r1, r3, #1
 8010c42:	9103      	str	r1, [sp, #12]
 8010c44:	701a      	strb	r2, [r3, #0]
 8010c46:	e7f0      	b.n	8010c2a <__cvt+0xa6>

08010c48 <__exponent>:
 8010c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2900      	cmp	r1, #0
 8010c4e:	bfb8      	it	lt
 8010c50:	4249      	neglt	r1, r1
 8010c52:	f803 2b02 	strb.w	r2, [r3], #2
 8010c56:	bfb4      	ite	lt
 8010c58:	222d      	movlt	r2, #45	; 0x2d
 8010c5a:	222b      	movge	r2, #43	; 0x2b
 8010c5c:	2909      	cmp	r1, #9
 8010c5e:	7042      	strb	r2, [r0, #1]
 8010c60:	dd2a      	ble.n	8010cb8 <__exponent+0x70>
 8010c62:	f10d 0407 	add.w	r4, sp, #7
 8010c66:	46a4      	mov	ip, r4
 8010c68:	270a      	movs	r7, #10
 8010c6a:	46a6      	mov	lr, r4
 8010c6c:	460a      	mov	r2, r1
 8010c6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8010c72:	fb07 1516 	mls	r5, r7, r6, r1
 8010c76:	3530      	adds	r5, #48	; 0x30
 8010c78:	2a63      	cmp	r2, #99	; 0x63
 8010c7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010c7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8010c82:	4631      	mov	r1, r6
 8010c84:	dcf1      	bgt.n	8010c6a <__exponent+0x22>
 8010c86:	3130      	adds	r1, #48	; 0x30
 8010c88:	f1ae 0502 	sub.w	r5, lr, #2
 8010c8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010c90:	1c44      	adds	r4, r0, #1
 8010c92:	4629      	mov	r1, r5
 8010c94:	4561      	cmp	r1, ip
 8010c96:	d30a      	bcc.n	8010cae <__exponent+0x66>
 8010c98:	f10d 0209 	add.w	r2, sp, #9
 8010c9c:	eba2 020e 	sub.w	r2, r2, lr
 8010ca0:	4565      	cmp	r5, ip
 8010ca2:	bf88      	it	hi
 8010ca4:	2200      	movhi	r2, #0
 8010ca6:	4413      	add	r3, r2
 8010ca8:	1a18      	subs	r0, r3, r0
 8010caa:	b003      	add	sp, #12
 8010cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010cb6:	e7ed      	b.n	8010c94 <__exponent+0x4c>
 8010cb8:	2330      	movs	r3, #48	; 0x30
 8010cba:	3130      	adds	r1, #48	; 0x30
 8010cbc:	7083      	strb	r3, [r0, #2]
 8010cbe:	70c1      	strb	r1, [r0, #3]
 8010cc0:	1d03      	adds	r3, r0, #4
 8010cc2:	e7f1      	b.n	8010ca8 <__exponent+0x60>

08010cc4 <_printf_float>:
 8010cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc8:	ed2d 8b02 	vpush	{d8}
 8010ccc:	b08d      	sub	sp, #52	; 0x34
 8010cce:	460c      	mov	r4, r1
 8010cd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010cd4:	4616      	mov	r6, r2
 8010cd6:	461f      	mov	r7, r3
 8010cd8:	4605      	mov	r5, r0
 8010cda:	f001 fa81 	bl	80121e0 <_localeconv_r>
 8010cde:	f8d0 a000 	ldr.w	sl, [r0]
 8010ce2:	4650      	mov	r0, sl
 8010ce4:	f7ef fa7c 	bl	80001e0 <strlen>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	930a      	str	r3, [sp, #40]	; 0x28
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	9305      	str	r3, [sp, #20]
 8010cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8010cf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010cf8:	3307      	adds	r3, #7
 8010cfa:	f023 0307 	bic.w	r3, r3, #7
 8010cfe:	f103 0208 	add.w	r2, r3, #8
 8010d02:	f8c8 2000 	str.w	r2, [r8]
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010d0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010d12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010d16:	9307      	str	r3, [sp, #28]
 8010d18:	f8cd 8018 	str.w	r8, [sp, #24]
 8010d1c:	ee08 0a10 	vmov	s16, r0
 8010d20:	4b9f      	ldr	r3, [pc, #636]	; (8010fa0 <_printf_float+0x2dc>)
 8010d22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d2a:	f7ef ff07 	bl	8000b3c <__aeabi_dcmpun>
 8010d2e:	bb88      	cbnz	r0, 8010d94 <_printf_float+0xd0>
 8010d30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d34:	4b9a      	ldr	r3, [pc, #616]	; (8010fa0 <_printf_float+0x2dc>)
 8010d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d3a:	f7ef fee1 	bl	8000b00 <__aeabi_dcmple>
 8010d3e:	bb48      	cbnz	r0, 8010d94 <_printf_float+0xd0>
 8010d40:	2200      	movs	r2, #0
 8010d42:	2300      	movs	r3, #0
 8010d44:	4640      	mov	r0, r8
 8010d46:	4649      	mov	r1, r9
 8010d48:	f7ef fed0 	bl	8000aec <__aeabi_dcmplt>
 8010d4c:	b110      	cbz	r0, 8010d54 <_printf_float+0x90>
 8010d4e:	232d      	movs	r3, #45	; 0x2d
 8010d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d54:	4b93      	ldr	r3, [pc, #588]	; (8010fa4 <_printf_float+0x2e0>)
 8010d56:	4894      	ldr	r0, [pc, #592]	; (8010fa8 <_printf_float+0x2e4>)
 8010d58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010d5c:	bf94      	ite	ls
 8010d5e:	4698      	movls	r8, r3
 8010d60:	4680      	movhi	r8, r0
 8010d62:	2303      	movs	r3, #3
 8010d64:	6123      	str	r3, [r4, #16]
 8010d66:	9b05      	ldr	r3, [sp, #20]
 8010d68:	f023 0204 	bic.w	r2, r3, #4
 8010d6c:	6022      	str	r2, [r4, #0]
 8010d6e:	f04f 0900 	mov.w	r9, #0
 8010d72:	9700      	str	r7, [sp, #0]
 8010d74:	4633      	mov	r3, r6
 8010d76:	aa0b      	add	r2, sp, #44	; 0x2c
 8010d78:	4621      	mov	r1, r4
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f000 f9d8 	bl	8011130 <_printf_common>
 8010d80:	3001      	adds	r0, #1
 8010d82:	f040 8090 	bne.w	8010ea6 <_printf_float+0x1e2>
 8010d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d8a:	b00d      	add	sp, #52	; 0x34
 8010d8c:	ecbd 8b02 	vpop	{d8}
 8010d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d94:	4642      	mov	r2, r8
 8010d96:	464b      	mov	r3, r9
 8010d98:	4640      	mov	r0, r8
 8010d9a:	4649      	mov	r1, r9
 8010d9c:	f7ef fece 	bl	8000b3c <__aeabi_dcmpun>
 8010da0:	b140      	cbz	r0, 8010db4 <_printf_float+0xf0>
 8010da2:	464b      	mov	r3, r9
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	bfbc      	itt	lt
 8010da8:	232d      	movlt	r3, #45	; 0x2d
 8010daa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010dae:	487f      	ldr	r0, [pc, #508]	; (8010fac <_printf_float+0x2e8>)
 8010db0:	4b7f      	ldr	r3, [pc, #508]	; (8010fb0 <_printf_float+0x2ec>)
 8010db2:	e7d1      	b.n	8010d58 <_printf_float+0x94>
 8010db4:	6863      	ldr	r3, [r4, #4]
 8010db6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010dba:	9206      	str	r2, [sp, #24]
 8010dbc:	1c5a      	adds	r2, r3, #1
 8010dbe:	d13f      	bne.n	8010e40 <_printf_float+0x17c>
 8010dc0:	2306      	movs	r3, #6
 8010dc2:	6063      	str	r3, [r4, #4]
 8010dc4:	9b05      	ldr	r3, [sp, #20]
 8010dc6:	6861      	ldr	r1, [r4, #4]
 8010dc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010dcc:	2300      	movs	r3, #0
 8010dce:	9303      	str	r3, [sp, #12]
 8010dd0:	ab0a      	add	r3, sp, #40	; 0x28
 8010dd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010dd6:	ab09      	add	r3, sp, #36	; 0x24
 8010dd8:	ec49 8b10 	vmov	d0, r8, r9
 8010ddc:	9300      	str	r3, [sp, #0]
 8010dde:	6022      	str	r2, [r4, #0]
 8010de0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010de4:	4628      	mov	r0, r5
 8010de6:	f7ff fecd 	bl	8010b84 <__cvt>
 8010dea:	9b06      	ldr	r3, [sp, #24]
 8010dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010dee:	2b47      	cmp	r3, #71	; 0x47
 8010df0:	4680      	mov	r8, r0
 8010df2:	d108      	bne.n	8010e06 <_printf_float+0x142>
 8010df4:	1cc8      	adds	r0, r1, #3
 8010df6:	db02      	blt.n	8010dfe <_printf_float+0x13a>
 8010df8:	6863      	ldr	r3, [r4, #4]
 8010dfa:	4299      	cmp	r1, r3
 8010dfc:	dd41      	ble.n	8010e82 <_printf_float+0x1be>
 8010dfe:	f1ab 0b02 	sub.w	fp, fp, #2
 8010e02:	fa5f fb8b 	uxtb.w	fp, fp
 8010e06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010e0a:	d820      	bhi.n	8010e4e <_printf_float+0x18a>
 8010e0c:	3901      	subs	r1, #1
 8010e0e:	465a      	mov	r2, fp
 8010e10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010e14:	9109      	str	r1, [sp, #36]	; 0x24
 8010e16:	f7ff ff17 	bl	8010c48 <__exponent>
 8010e1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e1c:	1813      	adds	r3, r2, r0
 8010e1e:	2a01      	cmp	r2, #1
 8010e20:	4681      	mov	r9, r0
 8010e22:	6123      	str	r3, [r4, #16]
 8010e24:	dc02      	bgt.n	8010e2c <_printf_float+0x168>
 8010e26:	6822      	ldr	r2, [r4, #0]
 8010e28:	07d2      	lsls	r2, r2, #31
 8010e2a:	d501      	bpl.n	8010e30 <_printf_float+0x16c>
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	6123      	str	r3, [r4, #16]
 8010e30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d09c      	beq.n	8010d72 <_printf_float+0xae>
 8010e38:	232d      	movs	r3, #45	; 0x2d
 8010e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e3e:	e798      	b.n	8010d72 <_printf_float+0xae>
 8010e40:	9a06      	ldr	r2, [sp, #24]
 8010e42:	2a47      	cmp	r2, #71	; 0x47
 8010e44:	d1be      	bne.n	8010dc4 <_printf_float+0x100>
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1bc      	bne.n	8010dc4 <_printf_float+0x100>
 8010e4a:	2301      	movs	r3, #1
 8010e4c:	e7b9      	b.n	8010dc2 <_printf_float+0xfe>
 8010e4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010e52:	d118      	bne.n	8010e86 <_printf_float+0x1c2>
 8010e54:	2900      	cmp	r1, #0
 8010e56:	6863      	ldr	r3, [r4, #4]
 8010e58:	dd0b      	ble.n	8010e72 <_printf_float+0x1ae>
 8010e5a:	6121      	str	r1, [r4, #16]
 8010e5c:	b913      	cbnz	r3, 8010e64 <_printf_float+0x1a0>
 8010e5e:	6822      	ldr	r2, [r4, #0]
 8010e60:	07d0      	lsls	r0, r2, #31
 8010e62:	d502      	bpl.n	8010e6a <_printf_float+0x1a6>
 8010e64:	3301      	adds	r3, #1
 8010e66:	440b      	add	r3, r1
 8010e68:	6123      	str	r3, [r4, #16]
 8010e6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010e6c:	f04f 0900 	mov.w	r9, #0
 8010e70:	e7de      	b.n	8010e30 <_printf_float+0x16c>
 8010e72:	b913      	cbnz	r3, 8010e7a <_printf_float+0x1b6>
 8010e74:	6822      	ldr	r2, [r4, #0]
 8010e76:	07d2      	lsls	r2, r2, #31
 8010e78:	d501      	bpl.n	8010e7e <_printf_float+0x1ba>
 8010e7a:	3302      	adds	r3, #2
 8010e7c:	e7f4      	b.n	8010e68 <_printf_float+0x1a4>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e7f2      	b.n	8010e68 <_printf_float+0x1a4>
 8010e82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e88:	4299      	cmp	r1, r3
 8010e8a:	db05      	blt.n	8010e98 <_printf_float+0x1d4>
 8010e8c:	6823      	ldr	r3, [r4, #0]
 8010e8e:	6121      	str	r1, [r4, #16]
 8010e90:	07d8      	lsls	r0, r3, #31
 8010e92:	d5ea      	bpl.n	8010e6a <_printf_float+0x1a6>
 8010e94:	1c4b      	adds	r3, r1, #1
 8010e96:	e7e7      	b.n	8010e68 <_printf_float+0x1a4>
 8010e98:	2900      	cmp	r1, #0
 8010e9a:	bfd4      	ite	le
 8010e9c:	f1c1 0202 	rsble	r2, r1, #2
 8010ea0:	2201      	movgt	r2, #1
 8010ea2:	4413      	add	r3, r2
 8010ea4:	e7e0      	b.n	8010e68 <_printf_float+0x1a4>
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	055a      	lsls	r2, r3, #21
 8010eaa:	d407      	bmi.n	8010ebc <_printf_float+0x1f8>
 8010eac:	6923      	ldr	r3, [r4, #16]
 8010eae:	4642      	mov	r2, r8
 8010eb0:	4631      	mov	r1, r6
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	47b8      	blx	r7
 8010eb6:	3001      	adds	r0, #1
 8010eb8:	d12c      	bne.n	8010f14 <_printf_float+0x250>
 8010eba:	e764      	b.n	8010d86 <_printf_float+0xc2>
 8010ebc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ec0:	f240 80e0 	bls.w	8011084 <_printf_float+0x3c0>
 8010ec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ec8:	2200      	movs	r2, #0
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f7ef fe04 	bl	8000ad8 <__aeabi_dcmpeq>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d034      	beq.n	8010f3e <_printf_float+0x27a>
 8010ed4:	4a37      	ldr	r2, [pc, #220]	; (8010fb4 <_printf_float+0x2f0>)
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	4631      	mov	r1, r6
 8010eda:	4628      	mov	r0, r5
 8010edc:	47b8      	blx	r7
 8010ede:	3001      	adds	r0, #1
 8010ee0:	f43f af51 	beq.w	8010d86 <_printf_float+0xc2>
 8010ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	db02      	blt.n	8010ef2 <_printf_float+0x22e>
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	07d8      	lsls	r0, r3, #31
 8010ef0:	d510      	bpl.n	8010f14 <_printf_float+0x250>
 8010ef2:	ee18 3a10 	vmov	r3, s16
 8010ef6:	4652      	mov	r2, sl
 8010ef8:	4631      	mov	r1, r6
 8010efa:	4628      	mov	r0, r5
 8010efc:	47b8      	blx	r7
 8010efe:	3001      	adds	r0, #1
 8010f00:	f43f af41 	beq.w	8010d86 <_printf_float+0xc2>
 8010f04:	f04f 0800 	mov.w	r8, #0
 8010f08:	f104 091a 	add.w	r9, r4, #26
 8010f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f0e:	3b01      	subs	r3, #1
 8010f10:	4543      	cmp	r3, r8
 8010f12:	dc09      	bgt.n	8010f28 <_printf_float+0x264>
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	079b      	lsls	r3, r3, #30
 8010f18:	f100 8105 	bmi.w	8011126 <_printf_float+0x462>
 8010f1c:	68e0      	ldr	r0, [r4, #12]
 8010f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f20:	4298      	cmp	r0, r3
 8010f22:	bfb8      	it	lt
 8010f24:	4618      	movlt	r0, r3
 8010f26:	e730      	b.n	8010d8a <_printf_float+0xc6>
 8010f28:	2301      	movs	r3, #1
 8010f2a:	464a      	mov	r2, r9
 8010f2c:	4631      	mov	r1, r6
 8010f2e:	4628      	mov	r0, r5
 8010f30:	47b8      	blx	r7
 8010f32:	3001      	adds	r0, #1
 8010f34:	f43f af27 	beq.w	8010d86 <_printf_float+0xc2>
 8010f38:	f108 0801 	add.w	r8, r8, #1
 8010f3c:	e7e6      	b.n	8010f0c <_printf_float+0x248>
 8010f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	dc39      	bgt.n	8010fb8 <_printf_float+0x2f4>
 8010f44:	4a1b      	ldr	r2, [pc, #108]	; (8010fb4 <_printf_float+0x2f0>)
 8010f46:	2301      	movs	r3, #1
 8010f48:	4631      	mov	r1, r6
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	47b8      	blx	r7
 8010f4e:	3001      	adds	r0, #1
 8010f50:	f43f af19 	beq.w	8010d86 <_printf_float+0xc2>
 8010f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	d102      	bne.n	8010f62 <_printf_float+0x29e>
 8010f5c:	6823      	ldr	r3, [r4, #0]
 8010f5e:	07d9      	lsls	r1, r3, #31
 8010f60:	d5d8      	bpl.n	8010f14 <_printf_float+0x250>
 8010f62:	ee18 3a10 	vmov	r3, s16
 8010f66:	4652      	mov	r2, sl
 8010f68:	4631      	mov	r1, r6
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	47b8      	blx	r7
 8010f6e:	3001      	adds	r0, #1
 8010f70:	f43f af09 	beq.w	8010d86 <_printf_float+0xc2>
 8010f74:	f04f 0900 	mov.w	r9, #0
 8010f78:	f104 0a1a 	add.w	sl, r4, #26
 8010f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f7e:	425b      	negs	r3, r3
 8010f80:	454b      	cmp	r3, r9
 8010f82:	dc01      	bgt.n	8010f88 <_printf_float+0x2c4>
 8010f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f86:	e792      	b.n	8010eae <_printf_float+0x1ea>
 8010f88:	2301      	movs	r3, #1
 8010f8a:	4652      	mov	r2, sl
 8010f8c:	4631      	mov	r1, r6
 8010f8e:	4628      	mov	r0, r5
 8010f90:	47b8      	blx	r7
 8010f92:	3001      	adds	r0, #1
 8010f94:	f43f aef7 	beq.w	8010d86 <_printf_float+0xc2>
 8010f98:	f109 0901 	add.w	r9, r9, #1
 8010f9c:	e7ee      	b.n	8010f7c <_printf_float+0x2b8>
 8010f9e:	bf00      	nop
 8010fa0:	7fefffff 	.word	0x7fefffff
 8010fa4:	0801416c 	.word	0x0801416c
 8010fa8:	08014170 	.word	0x08014170
 8010fac:	08014178 	.word	0x08014178
 8010fb0:	08014174 	.word	0x08014174
 8010fb4:	0801417c 	.word	0x0801417c
 8010fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010fba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	bfa8      	it	ge
 8010fc0:	461a      	movge	r2, r3
 8010fc2:	2a00      	cmp	r2, #0
 8010fc4:	4691      	mov	r9, r2
 8010fc6:	dc37      	bgt.n	8011038 <_printf_float+0x374>
 8010fc8:	f04f 0b00 	mov.w	fp, #0
 8010fcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010fd0:	f104 021a 	add.w	r2, r4, #26
 8010fd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010fd6:	9305      	str	r3, [sp, #20]
 8010fd8:	eba3 0309 	sub.w	r3, r3, r9
 8010fdc:	455b      	cmp	r3, fp
 8010fde:	dc33      	bgt.n	8011048 <_printf_float+0x384>
 8010fe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	db3b      	blt.n	8011060 <_printf_float+0x39c>
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	07da      	lsls	r2, r3, #31
 8010fec:	d438      	bmi.n	8011060 <_printf_float+0x39c>
 8010fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ff0:	9b05      	ldr	r3, [sp, #20]
 8010ff2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ff4:	1ad3      	subs	r3, r2, r3
 8010ff6:	eba2 0901 	sub.w	r9, r2, r1
 8010ffa:	4599      	cmp	r9, r3
 8010ffc:	bfa8      	it	ge
 8010ffe:	4699      	movge	r9, r3
 8011000:	f1b9 0f00 	cmp.w	r9, #0
 8011004:	dc35      	bgt.n	8011072 <_printf_float+0x3ae>
 8011006:	f04f 0800 	mov.w	r8, #0
 801100a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801100e:	f104 0a1a 	add.w	sl, r4, #26
 8011012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011016:	1a9b      	subs	r3, r3, r2
 8011018:	eba3 0309 	sub.w	r3, r3, r9
 801101c:	4543      	cmp	r3, r8
 801101e:	f77f af79 	ble.w	8010f14 <_printf_float+0x250>
 8011022:	2301      	movs	r3, #1
 8011024:	4652      	mov	r2, sl
 8011026:	4631      	mov	r1, r6
 8011028:	4628      	mov	r0, r5
 801102a:	47b8      	blx	r7
 801102c:	3001      	adds	r0, #1
 801102e:	f43f aeaa 	beq.w	8010d86 <_printf_float+0xc2>
 8011032:	f108 0801 	add.w	r8, r8, #1
 8011036:	e7ec      	b.n	8011012 <_printf_float+0x34e>
 8011038:	4613      	mov	r3, r2
 801103a:	4631      	mov	r1, r6
 801103c:	4642      	mov	r2, r8
 801103e:	4628      	mov	r0, r5
 8011040:	47b8      	blx	r7
 8011042:	3001      	adds	r0, #1
 8011044:	d1c0      	bne.n	8010fc8 <_printf_float+0x304>
 8011046:	e69e      	b.n	8010d86 <_printf_float+0xc2>
 8011048:	2301      	movs	r3, #1
 801104a:	4631      	mov	r1, r6
 801104c:	4628      	mov	r0, r5
 801104e:	9205      	str	r2, [sp, #20]
 8011050:	47b8      	blx	r7
 8011052:	3001      	adds	r0, #1
 8011054:	f43f ae97 	beq.w	8010d86 <_printf_float+0xc2>
 8011058:	9a05      	ldr	r2, [sp, #20]
 801105a:	f10b 0b01 	add.w	fp, fp, #1
 801105e:	e7b9      	b.n	8010fd4 <_printf_float+0x310>
 8011060:	ee18 3a10 	vmov	r3, s16
 8011064:	4652      	mov	r2, sl
 8011066:	4631      	mov	r1, r6
 8011068:	4628      	mov	r0, r5
 801106a:	47b8      	blx	r7
 801106c:	3001      	adds	r0, #1
 801106e:	d1be      	bne.n	8010fee <_printf_float+0x32a>
 8011070:	e689      	b.n	8010d86 <_printf_float+0xc2>
 8011072:	9a05      	ldr	r2, [sp, #20]
 8011074:	464b      	mov	r3, r9
 8011076:	4442      	add	r2, r8
 8011078:	4631      	mov	r1, r6
 801107a:	4628      	mov	r0, r5
 801107c:	47b8      	blx	r7
 801107e:	3001      	adds	r0, #1
 8011080:	d1c1      	bne.n	8011006 <_printf_float+0x342>
 8011082:	e680      	b.n	8010d86 <_printf_float+0xc2>
 8011084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011086:	2a01      	cmp	r2, #1
 8011088:	dc01      	bgt.n	801108e <_printf_float+0x3ca>
 801108a:	07db      	lsls	r3, r3, #31
 801108c:	d538      	bpl.n	8011100 <_printf_float+0x43c>
 801108e:	2301      	movs	r3, #1
 8011090:	4642      	mov	r2, r8
 8011092:	4631      	mov	r1, r6
 8011094:	4628      	mov	r0, r5
 8011096:	47b8      	blx	r7
 8011098:	3001      	adds	r0, #1
 801109a:	f43f ae74 	beq.w	8010d86 <_printf_float+0xc2>
 801109e:	ee18 3a10 	vmov	r3, s16
 80110a2:	4652      	mov	r2, sl
 80110a4:	4631      	mov	r1, r6
 80110a6:	4628      	mov	r0, r5
 80110a8:	47b8      	blx	r7
 80110aa:	3001      	adds	r0, #1
 80110ac:	f43f ae6b 	beq.w	8010d86 <_printf_float+0xc2>
 80110b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80110b4:	2200      	movs	r2, #0
 80110b6:	2300      	movs	r3, #0
 80110b8:	f7ef fd0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80110bc:	b9d8      	cbnz	r0, 80110f6 <_printf_float+0x432>
 80110be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110c0:	f108 0201 	add.w	r2, r8, #1
 80110c4:	3b01      	subs	r3, #1
 80110c6:	4631      	mov	r1, r6
 80110c8:	4628      	mov	r0, r5
 80110ca:	47b8      	blx	r7
 80110cc:	3001      	adds	r0, #1
 80110ce:	d10e      	bne.n	80110ee <_printf_float+0x42a>
 80110d0:	e659      	b.n	8010d86 <_printf_float+0xc2>
 80110d2:	2301      	movs	r3, #1
 80110d4:	4652      	mov	r2, sl
 80110d6:	4631      	mov	r1, r6
 80110d8:	4628      	mov	r0, r5
 80110da:	47b8      	blx	r7
 80110dc:	3001      	adds	r0, #1
 80110de:	f43f ae52 	beq.w	8010d86 <_printf_float+0xc2>
 80110e2:	f108 0801 	add.w	r8, r8, #1
 80110e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e8:	3b01      	subs	r3, #1
 80110ea:	4543      	cmp	r3, r8
 80110ec:	dcf1      	bgt.n	80110d2 <_printf_float+0x40e>
 80110ee:	464b      	mov	r3, r9
 80110f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80110f4:	e6dc      	b.n	8010eb0 <_printf_float+0x1ec>
 80110f6:	f04f 0800 	mov.w	r8, #0
 80110fa:	f104 0a1a 	add.w	sl, r4, #26
 80110fe:	e7f2      	b.n	80110e6 <_printf_float+0x422>
 8011100:	2301      	movs	r3, #1
 8011102:	4642      	mov	r2, r8
 8011104:	e7df      	b.n	80110c6 <_printf_float+0x402>
 8011106:	2301      	movs	r3, #1
 8011108:	464a      	mov	r2, r9
 801110a:	4631      	mov	r1, r6
 801110c:	4628      	mov	r0, r5
 801110e:	47b8      	blx	r7
 8011110:	3001      	adds	r0, #1
 8011112:	f43f ae38 	beq.w	8010d86 <_printf_float+0xc2>
 8011116:	f108 0801 	add.w	r8, r8, #1
 801111a:	68e3      	ldr	r3, [r4, #12]
 801111c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801111e:	1a5b      	subs	r3, r3, r1
 8011120:	4543      	cmp	r3, r8
 8011122:	dcf0      	bgt.n	8011106 <_printf_float+0x442>
 8011124:	e6fa      	b.n	8010f1c <_printf_float+0x258>
 8011126:	f04f 0800 	mov.w	r8, #0
 801112a:	f104 0919 	add.w	r9, r4, #25
 801112e:	e7f4      	b.n	801111a <_printf_float+0x456>

08011130 <_printf_common>:
 8011130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011134:	4616      	mov	r6, r2
 8011136:	4699      	mov	r9, r3
 8011138:	688a      	ldr	r2, [r1, #8]
 801113a:	690b      	ldr	r3, [r1, #16]
 801113c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011140:	4293      	cmp	r3, r2
 8011142:	bfb8      	it	lt
 8011144:	4613      	movlt	r3, r2
 8011146:	6033      	str	r3, [r6, #0]
 8011148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801114c:	4607      	mov	r7, r0
 801114e:	460c      	mov	r4, r1
 8011150:	b10a      	cbz	r2, 8011156 <_printf_common+0x26>
 8011152:	3301      	adds	r3, #1
 8011154:	6033      	str	r3, [r6, #0]
 8011156:	6823      	ldr	r3, [r4, #0]
 8011158:	0699      	lsls	r1, r3, #26
 801115a:	bf42      	ittt	mi
 801115c:	6833      	ldrmi	r3, [r6, #0]
 801115e:	3302      	addmi	r3, #2
 8011160:	6033      	strmi	r3, [r6, #0]
 8011162:	6825      	ldr	r5, [r4, #0]
 8011164:	f015 0506 	ands.w	r5, r5, #6
 8011168:	d106      	bne.n	8011178 <_printf_common+0x48>
 801116a:	f104 0a19 	add.w	sl, r4, #25
 801116e:	68e3      	ldr	r3, [r4, #12]
 8011170:	6832      	ldr	r2, [r6, #0]
 8011172:	1a9b      	subs	r3, r3, r2
 8011174:	42ab      	cmp	r3, r5
 8011176:	dc26      	bgt.n	80111c6 <_printf_common+0x96>
 8011178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801117c:	1e13      	subs	r3, r2, #0
 801117e:	6822      	ldr	r2, [r4, #0]
 8011180:	bf18      	it	ne
 8011182:	2301      	movne	r3, #1
 8011184:	0692      	lsls	r2, r2, #26
 8011186:	d42b      	bmi.n	80111e0 <_printf_common+0xb0>
 8011188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801118c:	4649      	mov	r1, r9
 801118e:	4638      	mov	r0, r7
 8011190:	47c0      	blx	r8
 8011192:	3001      	adds	r0, #1
 8011194:	d01e      	beq.n	80111d4 <_printf_common+0xa4>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	68e5      	ldr	r5, [r4, #12]
 801119a:	6832      	ldr	r2, [r6, #0]
 801119c:	f003 0306 	and.w	r3, r3, #6
 80111a0:	2b04      	cmp	r3, #4
 80111a2:	bf08      	it	eq
 80111a4:	1aad      	subeq	r5, r5, r2
 80111a6:	68a3      	ldr	r3, [r4, #8]
 80111a8:	6922      	ldr	r2, [r4, #16]
 80111aa:	bf0c      	ite	eq
 80111ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80111b0:	2500      	movne	r5, #0
 80111b2:	4293      	cmp	r3, r2
 80111b4:	bfc4      	itt	gt
 80111b6:	1a9b      	subgt	r3, r3, r2
 80111b8:	18ed      	addgt	r5, r5, r3
 80111ba:	2600      	movs	r6, #0
 80111bc:	341a      	adds	r4, #26
 80111be:	42b5      	cmp	r5, r6
 80111c0:	d11a      	bne.n	80111f8 <_printf_common+0xc8>
 80111c2:	2000      	movs	r0, #0
 80111c4:	e008      	b.n	80111d8 <_printf_common+0xa8>
 80111c6:	2301      	movs	r3, #1
 80111c8:	4652      	mov	r2, sl
 80111ca:	4649      	mov	r1, r9
 80111cc:	4638      	mov	r0, r7
 80111ce:	47c0      	blx	r8
 80111d0:	3001      	adds	r0, #1
 80111d2:	d103      	bne.n	80111dc <_printf_common+0xac>
 80111d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111dc:	3501      	adds	r5, #1
 80111de:	e7c6      	b.n	801116e <_printf_common+0x3e>
 80111e0:	18e1      	adds	r1, r4, r3
 80111e2:	1c5a      	adds	r2, r3, #1
 80111e4:	2030      	movs	r0, #48	; 0x30
 80111e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80111ea:	4422      	add	r2, r4
 80111ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80111f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80111f4:	3302      	adds	r3, #2
 80111f6:	e7c7      	b.n	8011188 <_printf_common+0x58>
 80111f8:	2301      	movs	r3, #1
 80111fa:	4622      	mov	r2, r4
 80111fc:	4649      	mov	r1, r9
 80111fe:	4638      	mov	r0, r7
 8011200:	47c0      	blx	r8
 8011202:	3001      	adds	r0, #1
 8011204:	d0e6      	beq.n	80111d4 <_printf_common+0xa4>
 8011206:	3601      	adds	r6, #1
 8011208:	e7d9      	b.n	80111be <_printf_common+0x8e>
	...

0801120c <_printf_i>:
 801120c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011210:	460c      	mov	r4, r1
 8011212:	4691      	mov	r9, r2
 8011214:	7e27      	ldrb	r7, [r4, #24]
 8011216:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011218:	2f78      	cmp	r7, #120	; 0x78
 801121a:	4680      	mov	r8, r0
 801121c:	469a      	mov	sl, r3
 801121e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011222:	d807      	bhi.n	8011234 <_printf_i+0x28>
 8011224:	2f62      	cmp	r7, #98	; 0x62
 8011226:	d80a      	bhi.n	801123e <_printf_i+0x32>
 8011228:	2f00      	cmp	r7, #0
 801122a:	f000 80d8 	beq.w	80113de <_printf_i+0x1d2>
 801122e:	2f58      	cmp	r7, #88	; 0x58
 8011230:	f000 80a3 	beq.w	801137a <_printf_i+0x16e>
 8011234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801123c:	e03a      	b.n	80112b4 <_printf_i+0xa8>
 801123e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011242:	2b15      	cmp	r3, #21
 8011244:	d8f6      	bhi.n	8011234 <_printf_i+0x28>
 8011246:	a001      	add	r0, pc, #4	; (adr r0, 801124c <_printf_i+0x40>)
 8011248:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801124c:	080112a5 	.word	0x080112a5
 8011250:	080112b9 	.word	0x080112b9
 8011254:	08011235 	.word	0x08011235
 8011258:	08011235 	.word	0x08011235
 801125c:	08011235 	.word	0x08011235
 8011260:	08011235 	.word	0x08011235
 8011264:	080112b9 	.word	0x080112b9
 8011268:	08011235 	.word	0x08011235
 801126c:	08011235 	.word	0x08011235
 8011270:	08011235 	.word	0x08011235
 8011274:	08011235 	.word	0x08011235
 8011278:	080113c5 	.word	0x080113c5
 801127c:	080112e9 	.word	0x080112e9
 8011280:	080113a7 	.word	0x080113a7
 8011284:	08011235 	.word	0x08011235
 8011288:	08011235 	.word	0x08011235
 801128c:	080113e7 	.word	0x080113e7
 8011290:	08011235 	.word	0x08011235
 8011294:	080112e9 	.word	0x080112e9
 8011298:	08011235 	.word	0x08011235
 801129c:	08011235 	.word	0x08011235
 80112a0:	080113af 	.word	0x080113af
 80112a4:	680b      	ldr	r3, [r1, #0]
 80112a6:	1d1a      	adds	r2, r3, #4
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	600a      	str	r2, [r1, #0]
 80112ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80112b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112b4:	2301      	movs	r3, #1
 80112b6:	e0a3      	b.n	8011400 <_printf_i+0x1f4>
 80112b8:	6825      	ldr	r5, [r4, #0]
 80112ba:	6808      	ldr	r0, [r1, #0]
 80112bc:	062e      	lsls	r6, r5, #24
 80112be:	f100 0304 	add.w	r3, r0, #4
 80112c2:	d50a      	bpl.n	80112da <_printf_i+0xce>
 80112c4:	6805      	ldr	r5, [r0, #0]
 80112c6:	600b      	str	r3, [r1, #0]
 80112c8:	2d00      	cmp	r5, #0
 80112ca:	da03      	bge.n	80112d4 <_printf_i+0xc8>
 80112cc:	232d      	movs	r3, #45	; 0x2d
 80112ce:	426d      	negs	r5, r5
 80112d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112d4:	485e      	ldr	r0, [pc, #376]	; (8011450 <_printf_i+0x244>)
 80112d6:	230a      	movs	r3, #10
 80112d8:	e019      	b.n	801130e <_printf_i+0x102>
 80112da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80112de:	6805      	ldr	r5, [r0, #0]
 80112e0:	600b      	str	r3, [r1, #0]
 80112e2:	bf18      	it	ne
 80112e4:	b22d      	sxthne	r5, r5
 80112e6:	e7ef      	b.n	80112c8 <_printf_i+0xbc>
 80112e8:	680b      	ldr	r3, [r1, #0]
 80112ea:	6825      	ldr	r5, [r4, #0]
 80112ec:	1d18      	adds	r0, r3, #4
 80112ee:	6008      	str	r0, [r1, #0]
 80112f0:	0628      	lsls	r0, r5, #24
 80112f2:	d501      	bpl.n	80112f8 <_printf_i+0xec>
 80112f4:	681d      	ldr	r5, [r3, #0]
 80112f6:	e002      	b.n	80112fe <_printf_i+0xf2>
 80112f8:	0669      	lsls	r1, r5, #25
 80112fa:	d5fb      	bpl.n	80112f4 <_printf_i+0xe8>
 80112fc:	881d      	ldrh	r5, [r3, #0]
 80112fe:	4854      	ldr	r0, [pc, #336]	; (8011450 <_printf_i+0x244>)
 8011300:	2f6f      	cmp	r7, #111	; 0x6f
 8011302:	bf0c      	ite	eq
 8011304:	2308      	moveq	r3, #8
 8011306:	230a      	movne	r3, #10
 8011308:	2100      	movs	r1, #0
 801130a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801130e:	6866      	ldr	r6, [r4, #4]
 8011310:	60a6      	str	r6, [r4, #8]
 8011312:	2e00      	cmp	r6, #0
 8011314:	bfa2      	ittt	ge
 8011316:	6821      	ldrge	r1, [r4, #0]
 8011318:	f021 0104 	bicge.w	r1, r1, #4
 801131c:	6021      	strge	r1, [r4, #0]
 801131e:	b90d      	cbnz	r5, 8011324 <_printf_i+0x118>
 8011320:	2e00      	cmp	r6, #0
 8011322:	d04d      	beq.n	80113c0 <_printf_i+0x1b4>
 8011324:	4616      	mov	r6, r2
 8011326:	fbb5 f1f3 	udiv	r1, r5, r3
 801132a:	fb03 5711 	mls	r7, r3, r1, r5
 801132e:	5dc7      	ldrb	r7, [r0, r7]
 8011330:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011334:	462f      	mov	r7, r5
 8011336:	42bb      	cmp	r3, r7
 8011338:	460d      	mov	r5, r1
 801133a:	d9f4      	bls.n	8011326 <_printf_i+0x11a>
 801133c:	2b08      	cmp	r3, #8
 801133e:	d10b      	bne.n	8011358 <_printf_i+0x14c>
 8011340:	6823      	ldr	r3, [r4, #0]
 8011342:	07df      	lsls	r7, r3, #31
 8011344:	d508      	bpl.n	8011358 <_printf_i+0x14c>
 8011346:	6923      	ldr	r3, [r4, #16]
 8011348:	6861      	ldr	r1, [r4, #4]
 801134a:	4299      	cmp	r1, r3
 801134c:	bfde      	ittt	le
 801134e:	2330      	movle	r3, #48	; 0x30
 8011350:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011354:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011358:	1b92      	subs	r2, r2, r6
 801135a:	6122      	str	r2, [r4, #16]
 801135c:	f8cd a000 	str.w	sl, [sp]
 8011360:	464b      	mov	r3, r9
 8011362:	aa03      	add	r2, sp, #12
 8011364:	4621      	mov	r1, r4
 8011366:	4640      	mov	r0, r8
 8011368:	f7ff fee2 	bl	8011130 <_printf_common>
 801136c:	3001      	adds	r0, #1
 801136e:	d14c      	bne.n	801140a <_printf_i+0x1fe>
 8011370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011374:	b004      	add	sp, #16
 8011376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137a:	4835      	ldr	r0, [pc, #212]	; (8011450 <_printf_i+0x244>)
 801137c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011380:	6823      	ldr	r3, [r4, #0]
 8011382:	680e      	ldr	r6, [r1, #0]
 8011384:	061f      	lsls	r7, r3, #24
 8011386:	f856 5b04 	ldr.w	r5, [r6], #4
 801138a:	600e      	str	r6, [r1, #0]
 801138c:	d514      	bpl.n	80113b8 <_printf_i+0x1ac>
 801138e:	07d9      	lsls	r1, r3, #31
 8011390:	bf44      	itt	mi
 8011392:	f043 0320 	orrmi.w	r3, r3, #32
 8011396:	6023      	strmi	r3, [r4, #0]
 8011398:	b91d      	cbnz	r5, 80113a2 <_printf_i+0x196>
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	f023 0320 	bic.w	r3, r3, #32
 80113a0:	6023      	str	r3, [r4, #0]
 80113a2:	2310      	movs	r3, #16
 80113a4:	e7b0      	b.n	8011308 <_printf_i+0xfc>
 80113a6:	6823      	ldr	r3, [r4, #0]
 80113a8:	f043 0320 	orr.w	r3, r3, #32
 80113ac:	6023      	str	r3, [r4, #0]
 80113ae:	2378      	movs	r3, #120	; 0x78
 80113b0:	4828      	ldr	r0, [pc, #160]	; (8011454 <_printf_i+0x248>)
 80113b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113b6:	e7e3      	b.n	8011380 <_printf_i+0x174>
 80113b8:	065e      	lsls	r6, r3, #25
 80113ba:	bf48      	it	mi
 80113bc:	b2ad      	uxthmi	r5, r5
 80113be:	e7e6      	b.n	801138e <_printf_i+0x182>
 80113c0:	4616      	mov	r6, r2
 80113c2:	e7bb      	b.n	801133c <_printf_i+0x130>
 80113c4:	680b      	ldr	r3, [r1, #0]
 80113c6:	6826      	ldr	r6, [r4, #0]
 80113c8:	6960      	ldr	r0, [r4, #20]
 80113ca:	1d1d      	adds	r5, r3, #4
 80113cc:	600d      	str	r5, [r1, #0]
 80113ce:	0635      	lsls	r5, r6, #24
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	d501      	bpl.n	80113d8 <_printf_i+0x1cc>
 80113d4:	6018      	str	r0, [r3, #0]
 80113d6:	e002      	b.n	80113de <_printf_i+0x1d2>
 80113d8:	0671      	lsls	r1, r6, #25
 80113da:	d5fb      	bpl.n	80113d4 <_printf_i+0x1c8>
 80113dc:	8018      	strh	r0, [r3, #0]
 80113de:	2300      	movs	r3, #0
 80113e0:	6123      	str	r3, [r4, #16]
 80113e2:	4616      	mov	r6, r2
 80113e4:	e7ba      	b.n	801135c <_printf_i+0x150>
 80113e6:	680b      	ldr	r3, [r1, #0]
 80113e8:	1d1a      	adds	r2, r3, #4
 80113ea:	600a      	str	r2, [r1, #0]
 80113ec:	681e      	ldr	r6, [r3, #0]
 80113ee:	6862      	ldr	r2, [r4, #4]
 80113f0:	2100      	movs	r1, #0
 80113f2:	4630      	mov	r0, r6
 80113f4:	f7ee fefc 	bl	80001f0 <memchr>
 80113f8:	b108      	cbz	r0, 80113fe <_printf_i+0x1f2>
 80113fa:	1b80      	subs	r0, r0, r6
 80113fc:	6060      	str	r0, [r4, #4]
 80113fe:	6863      	ldr	r3, [r4, #4]
 8011400:	6123      	str	r3, [r4, #16]
 8011402:	2300      	movs	r3, #0
 8011404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011408:	e7a8      	b.n	801135c <_printf_i+0x150>
 801140a:	6923      	ldr	r3, [r4, #16]
 801140c:	4632      	mov	r2, r6
 801140e:	4649      	mov	r1, r9
 8011410:	4640      	mov	r0, r8
 8011412:	47d0      	blx	sl
 8011414:	3001      	adds	r0, #1
 8011416:	d0ab      	beq.n	8011370 <_printf_i+0x164>
 8011418:	6823      	ldr	r3, [r4, #0]
 801141a:	079b      	lsls	r3, r3, #30
 801141c:	d413      	bmi.n	8011446 <_printf_i+0x23a>
 801141e:	68e0      	ldr	r0, [r4, #12]
 8011420:	9b03      	ldr	r3, [sp, #12]
 8011422:	4298      	cmp	r0, r3
 8011424:	bfb8      	it	lt
 8011426:	4618      	movlt	r0, r3
 8011428:	e7a4      	b.n	8011374 <_printf_i+0x168>
 801142a:	2301      	movs	r3, #1
 801142c:	4632      	mov	r2, r6
 801142e:	4649      	mov	r1, r9
 8011430:	4640      	mov	r0, r8
 8011432:	47d0      	blx	sl
 8011434:	3001      	adds	r0, #1
 8011436:	d09b      	beq.n	8011370 <_printf_i+0x164>
 8011438:	3501      	adds	r5, #1
 801143a:	68e3      	ldr	r3, [r4, #12]
 801143c:	9903      	ldr	r1, [sp, #12]
 801143e:	1a5b      	subs	r3, r3, r1
 8011440:	42ab      	cmp	r3, r5
 8011442:	dcf2      	bgt.n	801142a <_printf_i+0x21e>
 8011444:	e7eb      	b.n	801141e <_printf_i+0x212>
 8011446:	2500      	movs	r5, #0
 8011448:	f104 0619 	add.w	r6, r4, #25
 801144c:	e7f5      	b.n	801143a <_printf_i+0x22e>
 801144e:	bf00      	nop
 8011450:	0801417e 	.word	0x0801417e
 8011454:	0801418f 	.word	0x0801418f

08011458 <_sbrk_r>:
 8011458:	b538      	push	{r3, r4, r5, lr}
 801145a:	4d06      	ldr	r5, [pc, #24]	; (8011474 <_sbrk_r+0x1c>)
 801145c:	2300      	movs	r3, #0
 801145e:	4604      	mov	r4, r0
 8011460:	4608      	mov	r0, r1
 8011462:	602b      	str	r3, [r5, #0]
 8011464:	f7f3 f8ec 	bl	8004640 <_sbrk>
 8011468:	1c43      	adds	r3, r0, #1
 801146a:	d102      	bne.n	8011472 <_sbrk_r+0x1a>
 801146c:	682b      	ldr	r3, [r5, #0]
 801146e:	b103      	cbz	r3, 8011472 <_sbrk_r+0x1a>
 8011470:	6023      	str	r3, [r4, #0]
 8011472:	bd38      	pop	{r3, r4, r5, pc}
 8011474:	20001628 	.word	0x20001628

08011478 <_vsniprintf_r>:
 8011478:	b530      	push	{r4, r5, lr}
 801147a:	1e14      	subs	r4, r2, #0
 801147c:	4605      	mov	r5, r0
 801147e:	b09b      	sub	sp, #108	; 0x6c
 8011480:	4618      	mov	r0, r3
 8011482:	da05      	bge.n	8011490 <_vsniprintf_r+0x18>
 8011484:	238b      	movs	r3, #139	; 0x8b
 8011486:	602b      	str	r3, [r5, #0]
 8011488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801148c:	b01b      	add	sp, #108	; 0x6c
 801148e:	bd30      	pop	{r4, r5, pc}
 8011490:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011494:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011498:	bf14      	ite	ne
 801149a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801149e:	4623      	moveq	r3, r4
 80114a0:	9302      	str	r3, [sp, #8]
 80114a2:	9305      	str	r3, [sp, #20]
 80114a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80114a8:	9100      	str	r1, [sp, #0]
 80114aa:	9104      	str	r1, [sp, #16]
 80114ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80114b0:	4602      	mov	r2, r0
 80114b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80114b4:	4669      	mov	r1, sp
 80114b6:	4628      	mov	r0, r5
 80114b8:	f001 fa98 	bl	80129ec <_svfiprintf_r>
 80114bc:	1c43      	adds	r3, r0, #1
 80114be:	bfbc      	itt	lt
 80114c0:	238b      	movlt	r3, #139	; 0x8b
 80114c2:	602b      	strlt	r3, [r5, #0]
 80114c4:	2c00      	cmp	r4, #0
 80114c6:	d0e1      	beq.n	801148c <_vsniprintf_r+0x14>
 80114c8:	9b00      	ldr	r3, [sp, #0]
 80114ca:	2200      	movs	r2, #0
 80114cc:	701a      	strb	r2, [r3, #0]
 80114ce:	e7dd      	b.n	801148c <_vsniprintf_r+0x14>

080114d0 <vsniprintf>:
 80114d0:	b507      	push	{r0, r1, r2, lr}
 80114d2:	9300      	str	r3, [sp, #0]
 80114d4:	4613      	mov	r3, r2
 80114d6:	460a      	mov	r2, r1
 80114d8:	4601      	mov	r1, r0
 80114da:	4803      	ldr	r0, [pc, #12]	; (80114e8 <vsniprintf+0x18>)
 80114dc:	6800      	ldr	r0, [r0, #0]
 80114de:	f7ff ffcb 	bl	8011478 <_vsniprintf_r>
 80114e2:	b003      	add	sp, #12
 80114e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114e8:	20000104 	.word	0x20000104

080114ec <quorem>:
 80114ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f0:	6903      	ldr	r3, [r0, #16]
 80114f2:	690c      	ldr	r4, [r1, #16]
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	4607      	mov	r7, r0
 80114f8:	f2c0 8081 	blt.w	80115fe <quorem+0x112>
 80114fc:	3c01      	subs	r4, #1
 80114fe:	f101 0814 	add.w	r8, r1, #20
 8011502:	f100 0514 	add.w	r5, r0, #20
 8011506:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801150a:	9301      	str	r3, [sp, #4]
 801150c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011514:	3301      	adds	r3, #1
 8011516:	429a      	cmp	r2, r3
 8011518:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801151c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011520:	fbb2 f6f3 	udiv	r6, r2, r3
 8011524:	d331      	bcc.n	801158a <quorem+0x9e>
 8011526:	f04f 0e00 	mov.w	lr, #0
 801152a:	4640      	mov	r0, r8
 801152c:	46ac      	mov	ip, r5
 801152e:	46f2      	mov	sl, lr
 8011530:	f850 2b04 	ldr.w	r2, [r0], #4
 8011534:	b293      	uxth	r3, r2
 8011536:	fb06 e303 	mla	r3, r6, r3, lr
 801153a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801153e:	b29b      	uxth	r3, r3
 8011540:	ebaa 0303 	sub.w	r3, sl, r3
 8011544:	0c12      	lsrs	r2, r2, #16
 8011546:	f8dc a000 	ldr.w	sl, [ip]
 801154a:	fb06 e202 	mla	r2, r6, r2, lr
 801154e:	fa13 f38a 	uxtah	r3, r3, sl
 8011552:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011556:	fa1f fa82 	uxth.w	sl, r2
 801155a:	f8dc 2000 	ldr.w	r2, [ip]
 801155e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011562:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011566:	b29b      	uxth	r3, r3
 8011568:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801156c:	4581      	cmp	r9, r0
 801156e:	f84c 3b04 	str.w	r3, [ip], #4
 8011572:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011576:	d2db      	bcs.n	8011530 <quorem+0x44>
 8011578:	f855 300b 	ldr.w	r3, [r5, fp]
 801157c:	b92b      	cbnz	r3, 801158a <quorem+0x9e>
 801157e:	9b01      	ldr	r3, [sp, #4]
 8011580:	3b04      	subs	r3, #4
 8011582:	429d      	cmp	r5, r3
 8011584:	461a      	mov	r2, r3
 8011586:	d32e      	bcc.n	80115e6 <quorem+0xfa>
 8011588:	613c      	str	r4, [r7, #16]
 801158a:	4638      	mov	r0, r7
 801158c:	f001 f8c4 	bl	8012718 <__mcmp>
 8011590:	2800      	cmp	r0, #0
 8011592:	db24      	blt.n	80115de <quorem+0xf2>
 8011594:	3601      	adds	r6, #1
 8011596:	4628      	mov	r0, r5
 8011598:	f04f 0c00 	mov.w	ip, #0
 801159c:	f858 2b04 	ldr.w	r2, [r8], #4
 80115a0:	f8d0 e000 	ldr.w	lr, [r0]
 80115a4:	b293      	uxth	r3, r2
 80115a6:	ebac 0303 	sub.w	r3, ip, r3
 80115aa:	0c12      	lsrs	r2, r2, #16
 80115ac:	fa13 f38e 	uxtah	r3, r3, lr
 80115b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80115b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115be:	45c1      	cmp	r9, r8
 80115c0:	f840 3b04 	str.w	r3, [r0], #4
 80115c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80115c8:	d2e8      	bcs.n	801159c <quorem+0xb0>
 80115ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115d2:	b922      	cbnz	r2, 80115de <quorem+0xf2>
 80115d4:	3b04      	subs	r3, #4
 80115d6:	429d      	cmp	r5, r3
 80115d8:	461a      	mov	r2, r3
 80115da:	d30a      	bcc.n	80115f2 <quorem+0x106>
 80115dc:	613c      	str	r4, [r7, #16]
 80115de:	4630      	mov	r0, r6
 80115e0:	b003      	add	sp, #12
 80115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115e6:	6812      	ldr	r2, [r2, #0]
 80115e8:	3b04      	subs	r3, #4
 80115ea:	2a00      	cmp	r2, #0
 80115ec:	d1cc      	bne.n	8011588 <quorem+0x9c>
 80115ee:	3c01      	subs	r4, #1
 80115f0:	e7c7      	b.n	8011582 <quorem+0x96>
 80115f2:	6812      	ldr	r2, [r2, #0]
 80115f4:	3b04      	subs	r3, #4
 80115f6:	2a00      	cmp	r2, #0
 80115f8:	d1f0      	bne.n	80115dc <quorem+0xf0>
 80115fa:	3c01      	subs	r4, #1
 80115fc:	e7eb      	b.n	80115d6 <quorem+0xea>
 80115fe:	2000      	movs	r0, #0
 8011600:	e7ee      	b.n	80115e0 <quorem+0xf4>
 8011602:	0000      	movs	r0, r0
 8011604:	0000      	movs	r0, r0
	...

08011608 <_dtoa_r>:
 8011608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160c:	ed2d 8b02 	vpush	{d8}
 8011610:	ec57 6b10 	vmov	r6, r7, d0
 8011614:	b095      	sub	sp, #84	; 0x54
 8011616:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011618:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801161c:	9105      	str	r1, [sp, #20]
 801161e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011622:	4604      	mov	r4, r0
 8011624:	9209      	str	r2, [sp, #36]	; 0x24
 8011626:	930f      	str	r3, [sp, #60]	; 0x3c
 8011628:	b975      	cbnz	r5, 8011648 <_dtoa_r+0x40>
 801162a:	2010      	movs	r0, #16
 801162c:	f7ff f9e8 	bl	8010a00 <malloc>
 8011630:	4602      	mov	r2, r0
 8011632:	6260      	str	r0, [r4, #36]	; 0x24
 8011634:	b920      	cbnz	r0, 8011640 <_dtoa_r+0x38>
 8011636:	4bb2      	ldr	r3, [pc, #712]	; (8011900 <_dtoa_r+0x2f8>)
 8011638:	21ea      	movs	r1, #234	; 0xea
 801163a:	48b2      	ldr	r0, [pc, #712]	; (8011904 <_dtoa_r+0x2fc>)
 801163c:	f001 fad6 	bl	8012bec <__assert_func>
 8011640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011644:	6005      	str	r5, [r0, #0]
 8011646:	60c5      	str	r5, [r0, #12]
 8011648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801164a:	6819      	ldr	r1, [r3, #0]
 801164c:	b151      	cbz	r1, 8011664 <_dtoa_r+0x5c>
 801164e:	685a      	ldr	r2, [r3, #4]
 8011650:	604a      	str	r2, [r1, #4]
 8011652:	2301      	movs	r3, #1
 8011654:	4093      	lsls	r3, r2
 8011656:	608b      	str	r3, [r1, #8]
 8011658:	4620      	mov	r0, r4
 801165a:	f000 fe1f 	bl	801229c <_Bfree>
 801165e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011660:	2200      	movs	r2, #0
 8011662:	601a      	str	r2, [r3, #0]
 8011664:	1e3b      	subs	r3, r7, #0
 8011666:	bfb9      	ittee	lt
 8011668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801166c:	9303      	strlt	r3, [sp, #12]
 801166e:	2300      	movge	r3, #0
 8011670:	f8c8 3000 	strge.w	r3, [r8]
 8011674:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011678:	4ba3      	ldr	r3, [pc, #652]	; (8011908 <_dtoa_r+0x300>)
 801167a:	bfbc      	itt	lt
 801167c:	2201      	movlt	r2, #1
 801167e:	f8c8 2000 	strlt.w	r2, [r8]
 8011682:	ea33 0309 	bics.w	r3, r3, r9
 8011686:	d11b      	bne.n	80116c0 <_dtoa_r+0xb8>
 8011688:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801168a:	f242 730f 	movw	r3, #9999	; 0x270f
 801168e:	6013      	str	r3, [r2, #0]
 8011690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011694:	4333      	orrs	r3, r6
 8011696:	f000 857a 	beq.w	801218e <_dtoa_r+0xb86>
 801169a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801169c:	b963      	cbnz	r3, 80116b8 <_dtoa_r+0xb0>
 801169e:	4b9b      	ldr	r3, [pc, #620]	; (801190c <_dtoa_r+0x304>)
 80116a0:	e024      	b.n	80116ec <_dtoa_r+0xe4>
 80116a2:	4b9b      	ldr	r3, [pc, #620]	; (8011910 <_dtoa_r+0x308>)
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	3308      	adds	r3, #8
 80116a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80116aa:	6013      	str	r3, [r2, #0]
 80116ac:	9800      	ldr	r0, [sp, #0]
 80116ae:	b015      	add	sp, #84	; 0x54
 80116b0:	ecbd 8b02 	vpop	{d8}
 80116b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b8:	4b94      	ldr	r3, [pc, #592]	; (801190c <_dtoa_r+0x304>)
 80116ba:	9300      	str	r3, [sp, #0]
 80116bc:	3303      	adds	r3, #3
 80116be:	e7f3      	b.n	80116a8 <_dtoa_r+0xa0>
 80116c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116c4:	2200      	movs	r2, #0
 80116c6:	ec51 0b17 	vmov	r0, r1, d7
 80116ca:	2300      	movs	r3, #0
 80116cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80116d0:	f7ef fa02 	bl	8000ad8 <__aeabi_dcmpeq>
 80116d4:	4680      	mov	r8, r0
 80116d6:	b158      	cbz	r0, 80116f0 <_dtoa_r+0xe8>
 80116d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116da:	2301      	movs	r3, #1
 80116dc:	6013      	str	r3, [r2, #0]
 80116de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 8551 	beq.w	8012188 <_dtoa_r+0xb80>
 80116e6:	488b      	ldr	r0, [pc, #556]	; (8011914 <_dtoa_r+0x30c>)
 80116e8:	6018      	str	r0, [r3, #0]
 80116ea:	1e43      	subs	r3, r0, #1
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	e7dd      	b.n	80116ac <_dtoa_r+0xa4>
 80116f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80116f4:	aa12      	add	r2, sp, #72	; 0x48
 80116f6:	a913      	add	r1, sp, #76	; 0x4c
 80116f8:	4620      	mov	r0, r4
 80116fa:	f001 f8b1 	bl	8012860 <__d2b>
 80116fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011702:	4683      	mov	fp, r0
 8011704:	2d00      	cmp	r5, #0
 8011706:	d07c      	beq.n	8011802 <_dtoa_r+0x1fa>
 8011708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801170a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801170e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011712:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011716:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801171a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801171e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011722:	4b7d      	ldr	r3, [pc, #500]	; (8011918 <_dtoa_r+0x310>)
 8011724:	2200      	movs	r2, #0
 8011726:	4630      	mov	r0, r6
 8011728:	4639      	mov	r1, r7
 801172a:	f7ee fdb5 	bl	8000298 <__aeabi_dsub>
 801172e:	a36e      	add	r3, pc, #440	; (adr r3, 80118e8 <_dtoa_r+0x2e0>)
 8011730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011734:	f7ee ff68 	bl	8000608 <__aeabi_dmul>
 8011738:	a36d      	add	r3, pc, #436	; (adr r3, 80118f0 <_dtoa_r+0x2e8>)
 801173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173e:	f7ee fdad 	bl	800029c <__adddf3>
 8011742:	4606      	mov	r6, r0
 8011744:	4628      	mov	r0, r5
 8011746:	460f      	mov	r7, r1
 8011748:	f7ee fef4 	bl	8000534 <__aeabi_i2d>
 801174c:	a36a      	add	r3, pc, #424	; (adr r3, 80118f8 <_dtoa_r+0x2f0>)
 801174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011752:	f7ee ff59 	bl	8000608 <__aeabi_dmul>
 8011756:	4602      	mov	r2, r0
 8011758:	460b      	mov	r3, r1
 801175a:	4630      	mov	r0, r6
 801175c:	4639      	mov	r1, r7
 801175e:	f7ee fd9d 	bl	800029c <__adddf3>
 8011762:	4606      	mov	r6, r0
 8011764:	460f      	mov	r7, r1
 8011766:	f7ef f9ff 	bl	8000b68 <__aeabi_d2iz>
 801176a:	2200      	movs	r2, #0
 801176c:	4682      	mov	sl, r0
 801176e:	2300      	movs	r3, #0
 8011770:	4630      	mov	r0, r6
 8011772:	4639      	mov	r1, r7
 8011774:	f7ef f9ba 	bl	8000aec <__aeabi_dcmplt>
 8011778:	b148      	cbz	r0, 801178e <_dtoa_r+0x186>
 801177a:	4650      	mov	r0, sl
 801177c:	f7ee feda 	bl	8000534 <__aeabi_i2d>
 8011780:	4632      	mov	r2, r6
 8011782:	463b      	mov	r3, r7
 8011784:	f7ef f9a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8011788:	b908      	cbnz	r0, 801178e <_dtoa_r+0x186>
 801178a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801178e:	f1ba 0f16 	cmp.w	sl, #22
 8011792:	d854      	bhi.n	801183e <_dtoa_r+0x236>
 8011794:	4b61      	ldr	r3, [pc, #388]	; (801191c <_dtoa_r+0x314>)
 8011796:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80117a2:	f7ef f9a3 	bl	8000aec <__aeabi_dcmplt>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	d04b      	beq.n	8011842 <_dtoa_r+0x23a>
 80117aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80117ae:	2300      	movs	r3, #0
 80117b0:	930e      	str	r3, [sp, #56]	; 0x38
 80117b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80117b4:	1b5d      	subs	r5, r3, r5
 80117b6:	1e6b      	subs	r3, r5, #1
 80117b8:	9304      	str	r3, [sp, #16]
 80117ba:	bf43      	ittte	mi
 80117bc:	2300      	movmi	r3, #0
 80117be:	f1c5 0801 	rsbmi	r8, r5, #1
 80117c2:	9304      	strmi	r3, [sp, #16]
 80117c4:	f04f 0800 	movpl.w	r8, #0
 80117c8:	f1ba 0f00 	cmp.w	sl, #0
 80117cc:	db3b      	blt.n	8011846 <_dtoa_r+0x23e>
 80117ce:	9b04      	ldr	r3, [sp, #16]
 80117d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80117d4:	4453      	add	r3, sl
 80117d6:	9304      	str	r3, [sp, #16]
 80117d8:	2300      	movs	r3, #0
 80117da:	9306      	str	r3, [sp, #24]
 80117dc:	9b05      	ldr	r3, [sp, #20]
 80117de:	2b09      	cmp	r3, #9
 80117e0:	d869      	bhi.n	80118b6 <_dtoa_r+0x2ae>
 80117e2:	2b05      	cmp	r3, #5
 80117e4:	bfc4      	itt	gt
 80117e6:	3b04      	subgt	r3, #4
 80117e8:	9305      	strgt	r3, [sp, #20]
 80117ea:	9b05      	ldr	r3, [sp, #20]
 80117ec:	f1a3 0302 	sub.w	r3, r3, #2
 80117f0:	bfcc      	ite	gt
 80117f2:	2500      	movgt	r5, #0
 80117f4:	2501      	movle	r5, #1
 80117f6:	2b03      	cmp	r3, #3
 80117f8:	d869      	bhi.n	80118ce <_dtoa_r+0x2c6>
 80117fa:	e8df f003 	tbb	[pc, r3]
 80117fe:	4e2c      	.short	0x4e2c
 8011800:	5a4c      	.short	0x5a4c
 8011802:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011806:	441d      	add	r5, r3
 8011808:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801180c:	2b20      	cmp	r3, #32
 801180e:	bfc1      	itttt	gt
 8011810:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011814:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011818:	fa09 f303 	lslgt.w	r3, r9, r3
 801181c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011820:	bfda      	itte	le
 8011822:	f1c3 0320 	rsble	r3, r3, #32
 8011826:	fa06 f003 	lslle.w	r0, r6, r3
 801182a:	4318      	orrgt	r0, r3
 801182c:	f7ee fe72 	bl	8000514 <__aeabi_ui2d>
 8011830:	2301      	movs	r3, #1
 8011832:	4606      	mov	r6, r0
 8011834:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011838:	3d01      	subs	r5, #1
 801183a:	9310      	str	r3, [sp, #64]	; 0x40
 801183c:	e771      	b.n	8011722 <_dtoa_r+0x11a>
 801183e:	2301      	movs	r3, #1
 8011840:	e7b6      	b.n	80117b0 <_dtoa_r+0x1a8>
 8011842:	900e      	str	r0, [sp, #56]	; 0x38
 8011844:	e7b5      	b.n	80117b2 <_dtoa_r+0x1aa>
 8011846:	f1ca 0300 	rsb	r3, sl, #0
 801184a:	9306      	str	r3, [sp, #24]
 801184c:	2300      	movs	r3, #0
 801184e:	eba8 080a 	sub.w	r8, r8, sl
 8011852:	930d      	str	r3, [sp, #52]	; 0x34
 8011854:	e7c2      	b.n	80117dc <_dtoa_r+0x1d4>
 8011856:	2300      	movs	r3, #0
 8011858:	9308      	str	r3, [sp, #32]
 801185a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801185c:	2b00      	cmp	r3, #0
 801185e:	dc39      	bgt.n	80118d4 <_dtoa_r+0x2cc>
 8011860:	f04f 0901 	mov.w	r9, #1
 8011864:	f8cd 9004 	str.w	r9, [sp, #4]
 8011868:	464b      	mov	r3, r9
 801186a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801186e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011870:	2200      	movs	r2, #0
 8011872:	6042      	str	r2, [r0, #4]
 8011874:	2204      	movs	r2, #4
 8011876:	f102 0614 	add.w	r6, r2, #20
 801187a:	429e      	cmp	r6, r3
 801187c:	6841      	ldr	r1, [r0, #4]
 801187e:	d92f      	bls.n	80118e0 <_dtoa_r+0x2d8>
 8011880:	4620      	mov	r0, r4
 8011882:	f000 fccb 	bl	801221c <_Balloc>
 8011886:	9000      	str	r0, [sp, #0]
 8011888:	2800      	cmp	r0, #0
 801188a:	d14b      	bne.n	8011924 <_dtoa_r+0x31c>
 801188c:	4b24      	ldr	r3, [pc, #144]	; (8011920 <_dtoa_r+0x318>)
 801188e:	4602      	mov	r2, r0
 8011890:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011894:	e6d1      	b.n	801163a <_dtoa_r+0x32>
 8011896:	2301      	movs	r3, #1
 8011898:	e7de      	b.n	8011858 <_dtoa_r+0x250>
 801189a:	2300      	movs	r3, #0
 801189c:	9308      	str	r3, [sp, #32]
 801189e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118a0:	eb0a 0903 	add.w	r9, sl, r3
 80118a4:	f109 0301 	add.w	r3, r9, #1
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	9301      	str	r3, [sp, #4]
 80118ac:	bfb8      	it	lt
 80118ae:	2301      	movlt	r3, #1
 80118b0:	e7dd      	b.n	801186e <_dtoa_r+0x266>
 80118b2:	2301      	movs	r3, #1
 80118b4:	e7f2      	b.n	801189c <_dtoa_r+0x294>
 80118b6:	2501      	movs	r5, #1
 80118b8:	2300      	movs	r3, #0
 80118ba:	9305      	str	r3, [sp, #20]
 80118bc:	9508      	str	r5, [sp, #32]
 80118be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80118c2:	2200      	movs	r2, #0
 80118c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80118c8:	2312      	movs	r3, #18
 80118ca:	9209      	str	r2, [sp, #36]	; 0x24
 80118cc:	e7cf      	b.n	801186e <_dtoa_r+0x266>
 80118ce:	2301      	movs	r3, #1
 80118d0:	9308      	str	r3, [sp, #32]
 80118d2:	e7f4      	b.n	80118be <_dtoa_r+0x2b6>
 80118d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80118d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80118dc:	464b      	mov	r3, r9
 80118de:	e7c6      	b.n	801186e <_dtoa_r+0x266>
 80118e0:	3101      	adds	r1, #1
 80118e2:	6041      	str	r1, [r0, #4]
 80118e4:	0052      	lsls	r2, r2, #1
 80118e6:	e7c6      	b.n	8011876 <_dtoa_r+0x26e>
 80118e8:	636f4361 	.word	0x636f4361
 80118ec:	3fd287a7 	.word	0x3fd287a7
 80118f0:	8b60c8b3 	.word	0x8b60c8b3
 80118f4:	3fc68a28 	.word	0x3fc68a28
 80118f8:	509f79fb 	.word	0x509f79fb
 80118fc:	3fd34413 	.word	0x3fd34413
 8011900:	080141ad 	.word	0x080141ad
 8011904:	080141c4 	.word	0x080141c4
 8011908:	7ff00000 	.word	0x7ff00000
 801190c:	080141a9 	.word	0x080141a9
 8011910:	080141a0 	.word	0x080141a0
 8011914:	0801417d 	.word	0x0801417d
 8011918:	3ff80000 	.word	0x3ff80000
 801191c:	080142c0 	.word	0x080142c0
 8011920:	08014223 	.word	0x08014223
 8011924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011926:	9a00      	ldr	r2, [sp, #0]
 8011928:	601a      	str	r2, [r3, #0]
 801192a:	9b01      	ldr	r3, [sp, #4]
 801192c:	2b0e      	cmp	r3, #14
 801192e:	f200 80ad 	bhi.w	8011a8c <_dtoa_r+0x484>
 8011932:	2d00      	cmp	r5, #0
 8011934:	f000 80aa 	beq.w	8011a8c <_dtoa_r+0x484>
 8011938:	f1ba 0f00 	cmp.w	sl, #0
 801193c:	dd36      	ble.n	80119ac <_dtoa_r+0x3a4>
 801193e:	4ac3      	ldr	r2, [pc, #780]	; (8011c4c <_dtoa_r+0x644>)
 8011940:	f00a 030f 	and.w	r3, sl, #15
 8011944:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011948:	ed93 7b00 	vldr	d7, [r3]
 801194c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011950:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011954:	eeb0 8a47 	vmov.f32	s16, s14
 8011958:	eef0 8a67 	vmov.f32	s17, s15
 801195c:	d016      	beq.n	801198c <_dtoa_r+0x384>
 801195e:	4bbc      	ldr	r3, [pc, #752]	; (8011c50 <_dtoa_r+0x648>)
 8011960:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011968:	f7ee ff78 	bl	800085c <__aeabi_ddiv>
 801196c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011970:	f007 070f 	and.w	r7, r7, #15
 8011974:	2503      	movs	r5, #3
 8011976:	4eb6      	ldr	r6, [pc, #728]	; (8011c50 <_dtoa_r+0x648>)
 8011978:	b957      	cbnz	r7, 8011990 <_dtoa_r+0x388>
 801197a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801197e:	ec53 2b18 	vmov	r2, r3, d8
 8011982:	f7ee ff6b 	bl	800085c <__aeabi_ddiv>
 8011986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801198a:	e029      	b.n	80119e0 <_dtoa_r+0x3d8>
 801198c:	2502      	movs	r5, #2
 801198e:	e7f2      	b.n	8011976 <_dtoa_r+0x36e>
 8011990:	07f9      	lsls	r1, r7, #31
 8011992:	d508      	bpl.n	80119a6 <_dtoa_r+0x39e>
 8011994:	ec51 0b18 	vmov	r0, r1, d8
 8011998:	e9d6 2300 	ldrd	r2, r3, [r6]
 801199c:	f7ee fe34 	bl	8000608 <__aeabi_dmul>
 80119a0:	ec41 0b18 	vmov	d8, r0, r1
 80119a4:	3501      	adds	r5, #1
 80119a6:	107f      	asrs	r7, r7, #1
 80119a8:	3608      	adds	r6, #8
 80119aa:	e7e5      	b.n	8011978 <_dtoa_r+0x370>
 80119ac:	f000 80a6 	beq.w	8011afc <_dtoa_r+0x4f4>
 80119b0:	f1ca 0600 	rsb	r6, sl, #0
 80119b4:	4ba5      	ldr	r3, [pc, #660]	; (8011c4c <_dtoa_r+0x644>)
 80119b6:	4fa6      	ldr	r7, [pc, #664]	; (8011c50 <_dtoa_r+0x648>)
 80119b8:	f006 020f 	and.w	r2, r6, #15
 80119bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80119c8:	f7ee fe1e 	bl	8000608 <__aeabi_dmul>
 80119cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119d0:	1136      	asrs	r6, r6, #4
 80119d2:	2300      	movs	r3, #0
 80119d4:	2502      	movs	r5, #2
 80119d6:	2e00      	cmp	r6, #0
 80119d8:	f040 8085 	bne.w	8011ae6 <_dtoa_r+0x4de>
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1d2      	bne.n	8011986 <_dtoa_r+0x37e>
 80119e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 808c 	beq.w	8011b00 <_dtoa_r+0x4f8>
 80119e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80119ec:	4b99      	ldr	r3, [pc, #612]	; (8011c54 <_dtoa_r+0x64c>)
 80119ee:	2200      	movs	r2, #0
 80119f0:	4630      	mov	r0, r6
 80119f2:	4639      	mov	r1, r7
 80119f4:	f7ef f87a 	bl	8000aec <__aeabi_dcmplt>
 80119f8:	2800      	cmp	r0, #0
 80119fa:	f000 8081 	beq.w	8011b00 <_dtoa_r+0x4f8>
 80119fe:	9b01      	ldr	r3, [sp, #4]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d07d      	beq.n	8011b00 <_dtoa_r+0x4f8>
 8011a04:	f1b9 0f00 	cmp.w	r9, #0
 8011a08:	dd3c      	ble.n	8011a84 <_dtoa_r+0x47c>
 8011a0a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011a0e:	9307      	str	r3, [sp, #28]
 8011a10:	2200      	movs	r2, #0
 8011a12:	4b91      	ldr	r3, [pc, #580]	; (8011c58 <_dtoa_r+0x650>)
 8011a14:	4630      	mov	r0, r6
 8011a16:	4639      	mov	r1, r7
 8011a18:	f7ee fdf6 	bl	8000608 <__aeabi_dmul>
 8011a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a20:	3501      	adds	r5, #1
 8011a22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011a26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	f7ee fd82 	bl	8000534 <__aeabi_i2d>
 8011a30:	4632      	mov	r2, r6
 8011a32:	463b      	mov	r3, r7
 8011a34:	f7ee fde8 	bl	8000608 <__aeabi_dmul>
 8011a38:	4b88      	ldr	r3, [pc, #544]	; (8011c5c <_dtoa_r+0x654>)
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f7ee fc2e 	bl	800029c <__adddf3>
 8011a40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011a48:	9303      	str	r3, [sp, #12]
 8011a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d15c      	bne.n	8011b0a <_dtoa_r+0x502>
 8011a50:	4b83      	ldr	r3, [pc, #524]	; (8011c60 <_dtoa_r+0x658>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	4630      	mov	r0, r6
 8011a56:	4639      	mov	r1, r7
 8011a58:	f7ee fc1e 	bl	8000298 <__aeabi_dsub>
 8011a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a60:	4606      	mov	r6, r0
 8011a62:	460f      	mov	r7, r1
 8011a64:	f7ef f860 	bl	8000b28 <__aeabi_dcmpgt>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	f040 8296 	bne.w	8011f9a <_dtoa_r+0x992>
 8011a6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011a72:	4630      	mov	r0, r6
 8011a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a78:	4639      	mov	r1, r7
 8011a7a:	f7ef f837 	bl	8000aec <__aeabi_dcmplt>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	f040 8288 	bne.w	8011f94 <_dtoa_r+0x98c>
 8011a84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011a88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	f2c0 8158 	blt.w	8011d44 <_dtoa_r+0x73c>
 8011a94:	f1ba 0f0e 	cmp.w	sl, #14
 8011a98:	f300 8154 	bgt.w	8011d44 <_dtoa_r+0x73c>
 8011a9c:	4b6b      	ldr	r3, [pc, #428]	; (8011c4c <_dtoa_r+0x644>)
 8011a9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011aa2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f280 80e3 	bge.w	8011c74 <_dtoa_r+0x66c>
 8011aae:	9b01      	ldr	r3, [sp, #4]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	f300 80df 	bgt.w	8011c74 <_dtoa_r+0x66c>
 8011ab6:	f040 826d 	bne.w	8011f94 <_dtoa_r+0x98c>
 8011aba:	4b69      	ldr	r3, [pc, #420]	; (8011c60 <_dtoa_r+0x658>)
 8011abc:	2200      	movs	r2, #0
 8011abe:	4640      	mov	r0, r8
 8011ac0:	4649      	mov	r1, r9
 8011ac2:	f7ee fda1 	bl	8000608 <__aeabi_dmul>
 8011ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011aca:	f7ef f823 	bl	8000b14 <__aeabi_dcmpge>
 8011ace:	9e01      	ldr	r6, [sp, #4]
 8011ad0:	4637      	mov	r7, r6
 8011ad2:	2800      	cmp	r0, #0
 8011ad4:	f040 8243 	bne.w	8011f5e <_dtoa_r+0x956>
 8011ad8:	9d00      	ldr	r5, [sp, #0]
 8011ada:	2331      	movs	r3, #49	; 0x31
 8011adc:	f805 3b01 	strb.w	r3, [r5], #1
 8011ae0:	f10a 0a01 	add.w	sl, sl, #1
 8011ae4:	e23f      	b.n	8011f66 <_dtoa_r+0x95e>
 8011ae6:	07f2      	lsls	r2, r6, #31
 8011ae8:	d505      	bpl.n	8011af6 <_dtoa_r+0x4ee>
 8011aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011aee:	f7ee fd8b 	bl	8000608 <__aeabi_dmul>
 8011af2:	3501      	adds	r5, #1
 8011af4:	2301      	movs	r3, #1
 8011af6:	1076      	asrs	r6, r6, #1
 8011af8:	3708      	adds	r7, #8
 8011afa:	e76c      	b.n	80119d6 <_dtoa_r+0x3ce>
 8011afc:	2502      	movs	r5, #2
 8011afe:	e76f      	b.n	80119e0 <_dtoa_r+0x3d8>
 8011b00:	9b01      	ldr	r3, [sp, #4]
 8011b02:	f8cd a01c 	str.w	sl, [sp, #28]
 8011b06:	930c      	str	r3, [sp, #48]	; 0x30
 8011b08:	e78d      	b.n	8011a26 <_dtoa_r+0x41e>
 8011b0a:	9900      	ldr	r1, [sp, #0]
 8011b0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011b0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b10:	4b4e      	ldr	r3, [pc, #312]	; (8011c4c <_dtoa_r+0x644>)
 8011b12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011b16:	4401      	add	r1, r0
 8011b18:	9102      	str	r1, [sp, #8]
 8011b1a:	9908      	ldr	r1, [sp, #32]
 8011b1c:	eeb0 8a47 	vmov.f32	s16, s14
 8011b20:	eef0 8a67 	vmov.f32	s17, s15
 8011b24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011b2c:	2900      	cmp	r1, #0
 8011b2e:	d045      	beq.n	8011bbc <_dtoa_r+0x5b4>
 8011b30:	494c      	ldr	r1, [pc, #304]	; (8011c64 <_dtoa_r+0x65c>)
 8011b32:	2000      	movs	r0, #0
 8011b34:	f7ee fe92 	bl	800085c <__aeabi_ddiv>
 8011b38:	ec53 2b18 	vmov	r2, r3, d8
 8011b3c:	f7ee fbac 	bl	8000298 <__aeabi_dsub>
 8011b40:	9d00      	ldr	r5, [sp, #0]
 8011b42:	ec41 0b18 	vmov	d8, r0, r1
 8011b46:	4639      	mov	r1, r7
 8011b48:	4630      	mov	r0, r6
 8011b4a:	f7ef f80d 	bl	8000b68 <__aeabi_d2iz>
 8011b4e:	900c      	str	r0, [sp, #48]	; 0x30
 8011b50:	f7ee fcf0 	bl	8000534 <__aeabi_i2d>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4630      	mov	r0, r6
 8011b5a:	4639      	mov	r1, r7
 8011b5c:	f7ee fb9c 	bl	8000298 <__aeabi_dsub>
 8011b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b62:	3330      	adds	r3, #48	; 0x30
 8011b64:	f805 3b01 	strb.w	r3, [r5], #1
 8011b68:	ec53 2b18 	vmov	r2, r3, d8
 8011b6c:	4606      	mov	r6, r0
 8011b6e:	460f      	mov	r7, r1
 8011b70:	f7ee ffbc 	bl	8000aec <__aeabi_dcmplt>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d165      	bne.n	8011c44 <_dtoa_r+0x63c>
 8011b78:	4632      	mov	r2, r6
 8011b7a:	463b      	mov	r3, r7
 8011b7c:	4935      	ldr	r1, [pc, #212]	; (8011c54 <_dtoa_r+0x64c>)
 8011b7e:	2000      	movs	r0, #0
 8011b80:	f7ee fb8a 	bl	8000298 <__aeabi_dsub>
 8011b84:	ec53 2b18 	vmov	r2, r3, d8
 8011b88:	f7ee ffb0 	bl	8000aec <__aeabi_dcmplt>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	f040 80b9 	bne.w	8011d04 <_dtoa_r+0x6fc>
 8011b92:	9b02      	ldr	r3, [sp, #8]
 8011b94:	429d      	cmp	r5, r3
 8011b96:	f43f af75 	beq.w	8011a84 <_dtoa_r+0x47c>
 8011b9a:	4b2f      	ldr	r3, [pc, #188]	; (8011c58 <_dtoa_r+0x650>)
 8011b9c:	ec51 0b18 	vmov	r0, r1, d8
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f7ee fd31 	bl	8000608 <__aeabi_dmul>
 8011ba6:	4b2c      	ldr	r3, [pc, #176]	; (8011c58 <_dtoa_r+0x650>)
 8011ba8:	ec41 0b18 	vmov	d8, r0, r1
 8011bac:	2200      	movs	r2, #0
 8011bae:	4630      	mov	r0, r6
 8011bb0:	4639      	mov	r1, r7
 8011bb2:	f7ee fd29 	bl	8000608 <__aeabi_dmul>
 8011bb6:	4606      	mov	r6, r0
 8011bb8:	460f      	mov	r7, r1
 8011bba:	e7c4      	b.n	8011b46 <_dtoa_r+0x53e>
 8011bbc:	ec51 0b17 	vmov	r0, r1, d7
 8011bc0:	f7ee fd22 	bl	8000608 <__aeabi_dmul>
 8011bc4:	9b02      	ldr	r3, [sp, #8]
 8011bc6:	9d00      	ldr	r5, [sp, #0]
 8011bc8:	930c      	str	r3, [sp, #48]	; 0x30
 8011bca:	ec41 0b18 	vmov	d8, r0, r1
 8011bce:	4639      	mov	r1, r7
 8011bd0:	4630      	mov	r0, r6
 8011bd2:	f7ee ffc9 	bl	8000b68 <__aeabi_d2iz>
 8011bd6:	9011      	str	r0, [sp, #68]	; 0x44
 8011bd8:	f7ee fcac 	bl	8000534 <__aeabi_i2d>
 8011bdc:	4602      	mov	r2, r0
 8011bde:	460b      	mov	r3, r1
 8011be0:	4630      	mov	r0, r6
 8011be2:	4639      	mov	r1, r7
 8011be4:	f7ee fb58 	bl	8000298 <__aeabi_dsub>
 8011be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011bea:	3330      	adds	r3, #48	; 0x30
 8011bec:	f805 3b01 	strb.w	r3, [r5], #1
 8011bf0:	9b02      	ldr	r3, [sp, #8]
 8011bf2:	429d      	cmp	r5, r3
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	460f      	mov	r7, r1
 8011bf8:	f04f 0200 	mov.w	r2, #0
 8011bfc:	d134      	bne.n	8011c68 <_dtoa_r+0x660>
 8011bfe:	4b19      	ldr	r3, [pc, #100]	; (8011c64 <_dtoa_r+0x65c>)
 8011c00:	ec51 0b18 	vmov	r0, r1, d8
 8011c04:	f7ee fb4a 	bl	800029c <__adddf3>
 8011c08:	4602      	mov	r2, r0
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	4639      	mov	r1, r7
 8011c10:	f7ee ff8a 	bl	8000b28 <__aeabi_dcmpgt>
 8011c14:	2800      	cmp	r0, #0
 8011c16:	d175      	bne.n	8011d04 <_dtoa_r+0x6fc>
 8011c18:	ec53 2b18 	vmov	r2, r3, d8
 8011c1c:	4911      	ldr	r1, [pc, #68]	; (8011c64 <_dtoa_r+0x65c>)
 8011c1e:	2000      	movs	r0, #0
 8011c20:	f7ee fb3a 	bl	8000298 <__aeabi_dsub>
 8011c24:	4602      	mov	r2, r0
 8011c26:	460b      	mov	r3, r1
 8011c28:	4630      	mov	r0, r6
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	f7ee ff5e 	bl	8000aec <__aeabi_dcmplt>
 8011c30:	2800      	cmp	r0, #0
 8011c32:	f43f af27 	beq.w	8011a84 <_dtoa_r+0x47c>
 8011c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c38:	1e6b      	subs	r3, r5, #1
 8011c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8011c3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c40:	2b30      	cmp	r3, #48	; 0x30
 8011c42:	d0f8      	beq.n	8011c36 <_dtoa_r+0x62e>
 8011c44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011c48:	e04a      	b.n	8011ce0 <_dtoa_r+0x6d8>
 8011c4a:	bf00      	nop
 8011c4c:	080142c0 	.word	0x080142c0
 8011c50:	08014298 	.word	0x08014298
 8011c54:	3ff00000 	.word	0x3ff00000
 8011c58:	40240000 	.word	0x40240000
 8011c5c:	401c0000 	.word	0x401c0000
 8011c60:	40140000 	.word	0x40140000
 8011c64:	3fe00000 	.word	0x3fe00000
 8011c68:	4baf      	ldr	r3, [pc, #700]	; (8011f28 <_dtoa_r+0x920>)
 8011c6a:	f7ee fccd 	bl	8000608 <__aeabi_dmul>
 8011c6e:	4606      	mov	r6, r0
 8011c70:	460f      	mov	r7, r1
 8011c72:	e7ac      	b.n	8011bce <_dtoa_r+0x5c6>
 8011c74:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011c78:	9d00      	ldr	r5, [sp, #0]
 8011c7a:	4642      	mov	r2, r8
 8011c7c:	464b      	mov	r3, r9
 8011c7e:	4630      	mov	r0, r6
 8011c80:	4639      	mov	r1, r7
 8011c82:	f7ee fdeb 	bl	800085c <__aeabi_ddiv>
 8011c86:	f7ee ff6f 	bl	8000b68 <__aeabi_d2iz>
 8011c8a:	9002      	str	r0, [sp, #8]
 8011c8c:	f7ee fc52 	bl	8000534 <__aeabi_i2d>
 8011c90:	4642      	mov	r2, r8
 8011c92:	464b      	mov	r3, r9
 8011c94:	f7ee fcb8 	bl	8000608 <__aeabi_dmul>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	460b      	mov	r3, r1
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	4639      	mov	r1, r7
 8011ca0:	f7ee fafa 	bl	8000298 <__aeabi_dsub>
 8011ca4:	9e02      	ldr	r6, [sp, #8]
 8011ca6:	9f01      	ldr	r7, [sp, #4]
 8011ca8:	3630      	adds	r6, #48	; 0x30
 8011caa:	f805 6b01 	strb.w	r6, [r5], #1
 8011cae:	9e00      	ldr	r6, [sp, #0]
 8011cb0:	1bae      	subs	r6, r5, r6
 8011cb2:	42b7      	cmp	r7, r6
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	d137      	bne.n	8011d2a <_dtoa_r+0x722>
 8011cba:	f7ee faef 	bl	800029c <__adddf3>
 8011cbe:	4642      	mov	r2, r8
 8011cc0:	464b      	mov	r3, r9
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	460f      	mov	r7, r1
 8011cc6:	f7ee ff2f 	bl	8000b28 <__aeabi_dcmpgt>
 8011cca:	b9c8      	cbnz	r0, 8011d00 <_dtoa_r+0x6f8>
 8011ccc:	4642      	mov	r2, r8
 8011cce:	464b      	mov	r3, r9
 8011cd0:	4630      	mov	r0, r6
 8011cd2:	4639      	mov	r1, r7
 8011cd4:	f7ee ff00 	bl	8000ad8 <__aeabi_dcmpeq>
 8011cd8:	b110      	cbz	r0, 8011ce0 <_dtoa_r+0x6d8>
 8011cda:	9b02      	ldr	r3, [sp, #8]
 8011cdc:	07d9      	lsls	r1, r3, #31
 8011cde:	d40f      	bmi.n	8011d00 <_dtoa_r+0x6f8>
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	4659      	mov	r1, fp
 8011ce4:	f000 fada 	bl	801229c <_Bfree>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	702b      	strb	r3, [r5, #0]
 8011cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cee:	f10a 0001 	add.w	r0, sl, #1
 8011cf2:	6018      	str	r0, [r3, #0]
 8011cf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	f43f acd8 	beq.w	80116ac <_dtoa_r+0xa4>
 8011cfc:	601d      	str	r5, [r3, #0]
 8011cfe:	e4d5      	b.n	80116ac <_dtoa_r+0xa4>
 8011d00:	f8cd a01c 	str.w	sl, [sp, #28]
 8011d04:	462b      	mov	r3, r5
 8011d06:	461d      	mov	r5, r3
 8011d08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011d0c:	2a39      	cmp	r2, #57	; 0x39
 8011d0e:	d108      	bne.n	8011d22 <_dtoa_r+0x71a>
 8011d10:	9a00      	ldr	r2, [sp, #0]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d1f7      	bne.n	8011d06 <_dtoa_r+0x6fe>
 8011d16:	9a07      	ldr	r2, [sp, #28]
 8011d18:	9900      	ldr	r1, [sp, #0]
 8011d1a:	3201      	adds	r2, #1
 8011d1c:	9207      	str	r2, [sp, #28]
 8011d1e:	2230      	movs	r2, #48	; 0x30
 8011d20:	700a      	strb	r2, [r1, #0]
 8011d22:	781a      	ldrb	r2, [r3, #0]
 8011d24:	3201      	adds	r2, #1
 8011d26:	701a      	strb	r2, [r3, #0]
 8011d28:	e78c      	b.n	8011c44 <_dtoa_r+0x63c>
 8011d2a:	4b7f      	ldr	r3, [pc, #508]	; (8011f28 <_dtoa_r+0x920>)
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	f7ee fc6b 	bl	8000608 <__aeabi_dmul>
 8011d32:	2200      	movs	r2, #0
 8011d34:	2300      	movs	r3, #0
 8011d36:	4606      	mov	r6, r0
 8011d38:	460f      	mov	r7, r1
 8011d3a:	f7ee fecd 	bl	8000ad8 <__aeabi_dcmpeq>
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d09b      	beq.n	8011c7a <_dtoa_r+0x672>
 8011d42:	e7cd      	b.n	8011ce0 <_dtoa_r+0x6d8>
 8011d44:	9a08      	ldr	r2, [sp, #32]
 8011d46:	2a00      	cmp	r2, #0
 8011d48:	f000 80c4 	beq.w	8011ed4 <_dtoa_r+0x8cc>
 8011d4c:	9a05      	ldr	r2, [sp, #20]
 8011d4e:	2a01      	cmp	r2, #1
 8011d50:	f300 80a8 	bgt.w	8011ea4 <_dtoa_r+0x89c>
 8011d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d56:	2a00      	cmp	r2, #0
 8011d58:	f000 80a0 	beq.w	8011e9c <_dtoa_r+0x894>
 8011d5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011d60:	9e06      	ldr	r6, [sp, #24]
 8011d62:	4645      	mov	r5, r8
 8011d64:	9a04      	ldr	r2, [sp, #16]
 8011d66:	2101      	movs	r1, #1
 8011d68:	441a      	add	r2, r3
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	4498      	add	r8, r3
 8011d6e:	9204      	str	r2, [sp, #16]
 8011d70:	f000 fb50 	bl	8012414 <__i2b>
 8011d74:	4607      	mov	r7, r0
 8011d76:	2d00      	cmp	r5, #0
 8011d78:	dd0b      	ble.n	8011d92 <_dtoa_r+0x78a>
 8011d7a:	9b04      	ldr	r3, [sp, #16]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	dd08      	ble.n	8011d92 <_dtoa_r+0x78a>
 8011d80:	42ab      	cmp	r3, r5
 8011d82:	9a04      	ldr	r2, [sp, #16]
 8011d84:	bfa8      	it	ge
 8011d86:	462b      	movge	r3, r5
 8011d88:	eba8 0803 	sub.w	r8, r8, r3
 8011d8c:	1aed      	subs	r5, r5, r3
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	9304      	str	r3, [sp, #16]
 8011d92:	9b06      	ldr	r3, [sp, #24]
 8011d94:	b1fb      	cbz	r3, 8011dd6 <_dtoa_r+0x7ce>
 8011d96:	9b08      	ldr	r3, [sp, #32]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f000 809f 	beq.w	8011edc <_dtoa_r+0x8d4>
 8011d9e:	2e00      	cmp	r6, #0
 8011da0:	dd11      	ble.n	8011dc6 <_dtoa_r+0x7be>
 8011da2:	4639      	mov	r1, r7
 8011da4:	4632      	mov	r2, r6
 8011da6:	4620      	mov	r0, r4
 8011da8:	f000 fbf0 	bl	801258c <__pow5mult>
 8011dac:	465a      	mov	r2, fp
 8011dae:	4601      	mov	r1, r0
 8011db0:	4607      	mov	r7, r0
 8011db2:	4620      	mov	r0, r4
 8011db4:	f000 fb44 	bl	8012440 <__multiply>
 8011db8:	4659      	mov	r1, fp
 8011dba:	9007      	str	r0, [sp, #28]
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f000 fa6d 	bl	801229c <_Bfree>
 8011dc2:	9b07      	ldr	r3, [sp, #28]
 8011dc4:	469b      	mov	fp, r3
 8011dc6:	9b06      	ldr	r3, [sp, #24]
 8011dc8:	1b9a      	subs	r2, r3, r6
 8011dca:	d004      	beq.n	8011dd6 <_dtoa_r+0x7ce>
 8011dcc:	4659      	mov	r1, fp
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f000 fbdc 	bl	801258c <__pow5mult>
 8011dd4:	4683      	mov	fp, r0
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f000 fb1b 	bl	8012414 <__i2b>
 8011dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	4606      	mov	r6, r0
 8011de4:	dd7c      	ble.n	8011ee0 <_dtoa_r+0x8d8>
 8011de6:	461a      	mov	r2, r3
 8011de8:	4601      	mov	r1, r0
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 fbce 	bl	801258c <__pow5mult>
 8011df0:	9b05      	ldr	r3, [sp, #20]
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	4606      	mov	r6, r0
 8011df6:	dd76      	ble.n	8011ee6 <_dtoa_r+0x8de>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	9306      	str	r3, [sp, #24]
 8011dfc:	6933      	ldr	r3, [r6, #16]
 8011dfe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011e02:	6918      	ldr	r0, [r3, #16]
 8011e04:	f000 fab6 	bl	8012374 <__hi0bits>
 8011e08:	f1c0 0020 	rsb	r0, r0, #32
 8011e0c:	9b04      	ldr	r3, [sp, #16]
 8011e0e:	4418      	add	r0, r3
 8011e10:	f010 001f 	ands.w	r0, r0, #31
 8011e14:	f000 8086 	beq.w	8011f24 <_dtoa_r+0x91c>
 8011e18:	f1c0 0320 	rsb	r3, r0, #32
 8011e1c:	2b04      	cmp	r3, #4
 8011e1e:	dd7f      	ble.n	8011f20 <_dtoa_r+0x918>
 8011e20:	f1c0 001c 	rsb	r0, r0, #28
 8011e24:	9b04      	ldr	r3, [sp, #16]
 8011e26:	4403      	add	r3, r0
 8011e28:	4480      	add	r8, r0
 8011e2a:	4405      	add	r5, r0
 8011e2c:	9304      	str	r3, [sp, #16]
 8011e2e:	f1b8 0f00 	cmp.w	r8, #0
 8011e32:	dd05      	ble.n	8011e40 <_dtoa_r+0x838>
 8011e34:	4659      	mov	r1, fp
 8011e36:	4642      	mov	r2, r8
 8011e38:	4620      	mov	r0, r4
 8011e3a:	f000 fc01 	bl	8012640 <__lshift>
 8011e3e:	4683      	mov	fp, r0
 8011e40:	9b04      	ldr	r3, [sp, #16]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	dd05      	ble.n	8011e52 <_dtoa_r+0x84a>
 8011e46:	4631      	mov	r1, r6
 8011e48:	461a      	mov	r2, r3
 8011e4a:	4620      	mov	r0, r4
 8011e4c:	f000 fbf8 	bl	8012640 <__lshift>
 8011e50:	4606      	mov	r6, r0
 8011e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d069      	beq.n	8011f2c <_dtoa_r+0x924>
 8011e58:	4631      	mov	r1, r6
 8011e5a:	4658      	mov	r0, fp
 8011e5c:	f000 fc5c 	bl	8012718 <__mcmp>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	da63      	bge.n	8011f2c <_dtoa_r+0x924>
 8011e64:	2300      	movs	r3, #0
 8011e66:	4659      	mov	r1, fp
 8011e68:	220a      	movs	r2, #10
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f000 fa38 	bl	80122e0 <__multadd>
 8011e70:	9b08      	ldr	r3, [sp, #32]
 8011e72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011e76:	4683      	mov	fp, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f000 818f 	beq.w	801219c <_dtoa_r+0xb94>
 8011e7e:	4639      	mov	r1, r7
 8011e80:	2300      	movs	r3, #0
 8011e82:	220a      	movs	r2, #10
 8011e84:	4620      	mov	r0, r4
 8011e86:	f000 fa2b 	bl	80122e0 <__multadd>
 8011e8a:	f1b9 0f00 	cmp.w	r9, #0
 8011e8e:	4607      	mov	r7, r0
 8011e90:	f300 808e 	bgt.w	8011fb0 <_dtoa_r+0x9a8>
 8011e94:	9b05      	ldr	r3, [sp, #20]
 8011e96:	2b02      	cmp	r3, #2
 8011e98:	dc50      	bgt.n	8011f3c <_dtoa_r+0x934>
 8011e9a:	e089      	b.n	8011fb0 <_dtoa_r+0x9a8>
 8011e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011ea2:	e75d      	b.n	8011d60 <_dtoa_r+0x758>
 8011ea4:	9b01      	ldr	r3, [sp, #4]
 8011ea6:	1e5e      	subs	r6, r3, #1
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	42b3      	cmp	r3, r6
 8011eac:	bfbf      	itttt	lt
 8011eae:	9b06      	ldrlt	r3, [sp, #24]
 8011eb0:	9606      	strlt	r6, [sp, #24]
 8011eb2:	1af2      	sublt	r2, r6, r3
 8011eb4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011eb6:	bfb6      	itet	lt
 8011eb8:	189b      	addlt	r3, r3, r2
 8011eba:	1b9e      	subge	r6, r3, r6
 8011ebc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011ebe:	9b01      	ldr	r3, [sp, #4]
 8011ec0:	bfb8      	it	lt
 8011ec2:	2600      	movlt	r6, #0
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	bfb5      	itete	lt
 8011ec8:	eba8 0503 	sublt.w	r5, r8, r3
 8011ecc:	9b01      	ldrge	r3, [sp, #4]
 8011ece:	2300      	movlt	r3, #0
 8011ed0:	4645      	movge	r5, r8
 8011ed2:	e747      	b.n	8011d64 <_dtoa_r+0x75c>
 8011ed4:	9e06      	ldr	r6, [sp, #24]
 8011ed6:	9f08      	ldr	r7, [sp, #32]
 8011ed8:	4645      	mov	r5, r8
 8011eda:	e74c      	b.n	8011d76 <_dtoa_r+0x76e>
 8011edc:	9a06      	ldr	r2, [sp, #24]
 8011ede:	e775      	b.n	8011dcc <_dtoa_r+0x7c4>
 8011ee0:	9b05      	ldr	r3, [sp, #20]
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	dc18      	bgt.n	8011f18 <_dtoa_r+0x910>
 8011ee6:	9b02      	ldr	r3, [sp, #8]
 8011ee8:	b9b3      	cbnz	r3, 8011f18 <_dtoa_r+0x910>
 8011eea:	9b03      	ldr	r3, [sp, #12]
 8011eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ef0:	b9a3      	cbnz	r3, 8011f1c <_dtoa_r+0x914>
 8011ef2:	9b03      	ldr	r3, [sp, #12]
 8011ef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011ef8:	0d1b      	lsrs	r3, r3, #20
 8011efa:	051b      	lsls	r3, r3, #20
 8011efc:	b12b      	cbz	r3, 8011f0a <_dtoa_r+0x902>
 8011efe:	9b04      	ldr	r3, [sp, #16]
 8011f00:	3301      	adds	r3, #1
 8011f02:	9304      	str	r3, [sp, #16]
 8011f04:	f108 0801 	add.w	r8, r8, #1
 8011f08:	2301      	movs	r3, #1
 8011f0a:	9306      	str	r3, [sp, #24]
 8011f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	f47f af74 	bne.w	8011dfc <_dtoa_r+0x7f4>
 8011f14:	2001      	movs	r0, #1
 8011f16:	e779      	b.n	8011e0c <_dtoa_r+0x804>
 8011f18:	2300      	movs	r3, #0
 8011f1a:	e7f6      	b.n	8011f0a <_dtoa_r+0x902>
 8011f1c:	9b02      	ldr	r3, [sp, #8]
 8011f1e:	e7f4      	b.n	8011f0a <_dtoa_r+0x902>
 8011f20:	d085      	beq.n	8011e2e <_dtoa_r+0x826>
 8011f22:	4618      	mov	r0, r3
 8011f24:	301c      	adds	r0, #28
 8011f26:	e77d      	b.n	8011e24 <_dtoa_r+0x81c>
 8011f28:	40240000 	.word	0x40240000
 8011f2c:	9b01      	ldr	r3, [sp, #4]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	dc38      	bgt.n	8011fa4 <_dtoa_r+0x99c>
 8011f32:	9b05      	ldr	r3, [sp, #20]
 8011f34:	2b02      	cmp	r3, #2
 8011f36:	dd35      	ble.n	8011fa4 <_dtoa_r+0x99c>
 8011f38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011f3c:	f1b9 0f00 	cmp.w	r9, #0
 8011f40:	d10d      	bne.n	8011f5e <_dtoa_r+0x956>
 8011f42:	4631      	mov	r1, r6
 8011f44:	464b      	mov	r3, r9
 8011f46:	2205      	movs	r2, #5
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f000 f9c9 	bl	80122e0 <__multadd>
 8011f4e:	4601      	mov	r1, r0
 8011f50:	4606      	mov	r6, r0
 8011f52:	4658      	mov	r0, fp
 8011f54:	f000 fbe0 	bl	8012718 <__mcmp>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	f73f adbd 	bgt.w	8011ad8 <_dtoa_r+0x4d0>
 8011f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f60:	9d00      	ldr	r5, [sp, #0]
 8011f62:	ea6f 0a03 	mvn.w	sl, r3
 8011f66:	f04f 0800 	mov.w	r8, #0
 8011f6a:	4631      	mov	r1, r6
 8011f6c:	4620      	mov	r0, r4
 8011f6e:	f000 f995 	bl	801229c <_Bfree>
 8011f72:	2f00      	cmp	r7, #0
 8011f74:	f43f aeb4 	beq.w	8011ce0 <_dtoa_r+0x6d8>
 8011f78:	f1b8 0f00 	cmp.w	r8, #0
 8011f7c:	d005      	beq.n	8011f8a <_dtoa_r+0x982>
 8011f7e:	45b8      	cmp	r8, r7
 8011f80:	d003      	beq.n	8011f8a <_dtoa_r+0x982>
 8011f82:	4641      	mov	r1, r8
 8011f84:	4620      	mov	r0, r4
 8011f86:	f000 f989 	bl	801229c <_Bfree>
 8011f8a:	4639      	mov	r1, r7
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	f000 f985 	bl	801229c <_Bfree>
 8011f92:	e6a5      	b.n	8011ce0 <_dtoa_r+0x6d8>
 8011f94:	2600      	movs	r6, #0
 8011f96:	4637      	mov	r7, r6
 8011f98:	e7e1      	b.n	8011f5e <_dtoa_r+0x956>
 8011f9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011f9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011fa0:	4637      	mov	r7, r6
 8011fa2:	e599      	b.n	8011ad8 <_dtoa_r+0x4d0>
 8011fa4:	9b08      	ldr	r3, [sp, #32]
 8011fa6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	f000 80fd 	beq.w	80121aa <_dtoa_r+0xba2>
 8011fb0:	2d00      	cmp	r5, #0
 8011fb2:	dd05      	ble.n	8011fc0 <_dtoa_r+0x9b8>
 8011fb4:	4639      	mov	r1, r7
 8011fb6:	462a      	mov	r2, r5
 8011fb8:	4620      	mov	r0, r4
 8011fba:	f000 fb41 	bl	8012640 <__lshift>
 8011fbe:	4607      	mov	r7, r0
 8011fc0:	9b06      	ldr	r3, [sp, #24]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d05c      	beq.n	8012080 <_dtoa_r+0xa78>
 8011fc6:	6879      	ldr	r1, [r7, #4]
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f000 f927 	bl	801221c <_Balloc>
 8011fce:	4605      	mov	r5, r0
 8011fd0:	b928      	cbnz	r0, 8011fde <_dtoa_r+0x9d6>
 8011fd2:	4b80      	ldr	r3, [pc, #512]	; (80121d4 <_dtoa_r+0xbcc>)
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011fda:	f7ff bb2e 	b.w	801163a <_dtoa_r+0x32>
 8011fde:	693a      	ldr	r2, [r7, #16]
 8011fe0:	3202      	adds	r2, #2
 8011fe2:	0092      	lsls	r2, r2, #2
 8011fe4:	f107 010c 	add.w	r1, r7, #12
 8011fe8:	300c      	adds	r0, #12
 8011fea:	f000 f8fd 	bl	80121e8 <memcpy>
 8011fee:	2201      	movs	r2, #1
 8011ff0:	4629      	mov	r1, r5
 8011ff2:	4620      	mov	r0, r4
 8011ff4:	f000 fb24 	bl	8012640 <__lshift>
 8011ff8:	9b00      	ldr	r3, [sp, #0]
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	9301      	str	r3, [sp, #4]
 8011ffe:	9b00      	ldr	r3, [sp, #0]
 8012000:	444b      	add	r3, r9
 8012002:	9307      	str	r3, [sp, #28]
 8012004:	9b02      	ldr	r3, [sp, #8]
 8012006:	f003 0301 	and.w	r3, r3, #1
 801200a:	46b8      	mov	r8, r7
 801200c:	9306      	str	r3, [sp, #24]
 801200e:	4607      	mov	r7, r0
 8012010:	9b01      	ldr	r3, [sp, #4]
 8012012:	4631      	mov	r1, r6
 8012014:	3b01      	subs	r3, #1
 8012016:	4658      	mov	r0, fp
 8012018:	9302      	str	r3, [sp, #8]
 801201a:	f7ff fa67 	bl	80114ec <quorem>
 801201e:	4603      	mov	r3, r0
 8012020:	3330      	adds	r3, #48	; 0x30
 8012022:	9004      	str	r0, [sp, #16]
 8012024:	4641      	mov	r1, r8
 8012026:	4658      	mov	r0, fp
 8012028:	9308      	str	r3, [sp, #32]
 801202a:	f000 fb75 	bl	8012718 <__mcmp>
 801202e:	463a      	mov	r2, r7
 8012030:	4681      	mov	r9, r0
 8012032:	4631      	mov	r1, r6
 8012034:	4620      	mov	r0, r4
 8012036:	f000 fb8b 	bl	8012750 <__mdiff>
 801203a:	68c2      	ldr	r2, [r0, #12]
 801203c:	9b08      	ldr	r3, [sp, #32]
 801203e:	4605      	mov	r5, r0
 8012040:	bb02      	cbnz	r2, 8012084 <_dtoa_r+0xa7c>
 8012042:	4601      	mov	r1, r0
 8012044:	4658      	mov	r0, fp
 8012046:	f000 fb67 	bl	8012718 <__mcmp>
 801204a:	9b08      	ldr	r3, [sp, #32]
 801204c:	4602      	mov	r2, r0
 801204e:	4629      	mov	r1, r5
 8012050:	4620      	mov	r0, r4
 8012052:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012056:	f000 f921 	bl	801229c <_Bfree>
 801205a:	9b05      	ldr	r3, [sp, #20]
 801205c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801205e:	9d01      	ldr	r5, [sp, #4]
 8012060:	ea43 0102 	orr.w	r1, r3, r2
 8012064:	9b06      	ldr	r3, [sp, #24]
 8012066:	430b      	orrs	r3, r1
 8012068:	9b08      	ldr	r3, [sp, #32]
 801206a:	d10d      	bne.n	8012088 <_dtoa_r+0xa80>
 801206c:	2b39      	cmp	r3, #57	; 0x39
 801206e:	d029      	beq.n	80120c4 <_dtoa_r+0xabc>
 8012070:	f1b9 0f00 	cmp.w	r9, #0
 8012074:	dd01      	ble.n	801207a <_dtoa_r+0xa72>
 8012076:	9b04      	ldr	r3, [sp, #16]
 8012078:	3331      	adds	r3, #49	; 0x31
 801207a:	9a02      	ldr	r2, [sp, #8]
 801207c:	7013      	strb	r3, [r2, #0]
 801207e:	e774      	b.n	8011f6a <_dtoa_r+0x962>
 8012080:	4638      	mov	r0, r7
 8012082:	e7b9      	b.n	8011ff8 <_dtoa_r+0x9f0>
 8012084:	2201      	movs	r2, #1
 8012086:	e7e2      	b.n	801204e <_dtoa_r+0xa46>
 8012088:	f1b9 0f00 	cmp.w	r9, #0
 801208c:	db06      	blt.n	801209c <_dtoa_r+0xa94>
 801208e:	9905      	ldr	r1, [sp, #20]
 8012090:	ea41 0909 	orr.w	r9, r1, r9
 8012094:	9906      	ldr	r1, [sp, #24]
 8012096:	ea59 0101 	orrs.w	r1, r9, r1
 801209a:	d120      	bne.n	80120de <_dtoa_r+0xad6>
 801209c:	2a00      	cmp	r2, #0
 801209e:	ddec      	ble.n	801207a <_dtoa_r+0xa72>
 80120a0:	4659      	mov	r1, fp
 80120a2:	2201      	movs	r2, #1
 80120a4:	4620      	mov	r0, r4
 80120a6:	9301      	str	r3, [sp, #4]
 80120a8:	f000 faca 	bl	8012640 <__lshift>
 80120ac:	4631      	mov	r1, r6
 80120ae:	4683      	mov	fp, r0
 80120b0:	f000 fb32 	bl	8012718 <__mcmp>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	9b01      	ldr	r3, [sp, #4]
 80120b8:	dc02      	bgt.n	80120c0 <_dtoa_r+0xab8>
 80120ba:	d1de      	bne.n	801207a <_dtoa_r+0xa72>
 80120bc:	07da      	lsls	r2, r3, #31
 80120be:	d5dc      	bpl.n	801207a <_dtoa_r+0xa72>
 80120c0:	2b39      	cmp	r3, #57	; 0x39
 80120c2:	d1d8      	bne.n	8012076 <_dtoa_r+0xa6e>
 80120c4:	9a02      	ldr	r2, [sp, #8]
 80120c6:	2339      	movs	r3, #57	; 0x39
 80120c8:	7013      	strb	r3, [r2, #0]
 80120ca:	462b      	mov	r3, r5
 80120cc:	461d      	mov	r5, r3
 80120ce:	3b01      	subs	r3, #1
 80120d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80120d4:	2a39      	cmp	r2, #57	; 0x39
 80120d6:	d050      	beq.n	801217a <_dtoa_r+0xb72>
 80120d8:	3201      	adds	r2, #1
 80120da:	701a      	strb	r2, [r3, #0]
 80120dc:	e745      	b.n	8011f6a <_dtoa_r+0x962>
 80120de:	2a00      	cmp	r2, #0
 80120e0:	dd03      	ble.n	80120ea <_dtoa_r+0xae2>
 80120e2:	2b39      	cmp	r3, #57	; 0x39
 80120e4:	d0ee      	beq.n	80120c4 <_dtoa_r+0xabc>
 80120e6:	3301      	adds	r3, #1
 80120e8:	e7c7      	b.n	801207a <_dtoa_r+0xa72>
 80120ea:	9a01      	ldr	r2, [sp, #4]
 80120ec:	9907      	ldr	r1, [sp, #28]
 80120ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80120f2:	428a      	cmp	r2, r1
 80120f4:	d02a      	beq.n	801214c <_dtoa_r+0xb44>
 80120f6:	4659      	mov	r1, fp
 80120f8:	2300      	movs	r3, #0
 80120fa:	220a      	movs	r2, #10
 80120fc:	4620      	mov	r0, r4
 80120fe:	f000 f8ef 	bl	80122e0 <__multadd>
 8012102:	45b8      	cmp	r8, r7
 8012104:	4683      	mov	fp, r0
 8012106:	f04f 0300 	mov.w	r3, #0
 801210a:	f04f 020a 	mov.w	r2, #10
 801210e:	4641      	mov	r1, r8
 8012110:	4620      	mov	r0, r4
 8012112:	d107      	bne.n	8012124 <_dtoa_r+0xb1c>
 8012114:	f000 f8e4 	bl	80122e0 <__multadd>
 8012118:	4680      	mov	r8, r0
 801211a:	4607      	mov	r7, r0
 801211c:	9b01      	ldr	r3, [sp, #4]
 801211e:	3301      	adds	r3, #1
 8012120:	9301      	str	r3, [sp, #4]
 8012122:	e775      	b.n	8012010 <_dtoa_r+0xa08>
 8012124:	f000 f8dc 	bl	80122e0 <__multadd>
 8012128:	4639      	mov	r1, r7
 801212a:	4680      	mov	r8, r0
 801212c:	2300      	movs	r3, #0
 801212e:	220a      	movs	r2, #10
 8012130:	4620      	mov	r0, r4
 8012132:	f000 f8d5 	bl	80122e0 <__multadd>
 8012136:	4607      	mov	r7, r0
 8012138:	e7f0      	b.n	801211c <_dtoa_r+0xb14>
 801213a:	f1b9 0f00 	cmp.w	r9, #0
 801213e:	9a00      	ldr	r2, [sp, #0]
 8012140:	bfcc      	ite	gt
 8012142:	464d      	movgt	r5, r9
 8012144:	2501      	movle	r5, #1
 8012146:	4415      	add	r5, r2
 8012148:	f04f 0800 	mov.w	r8, #0
 801214c:	4659      	mov	r1, fp
 801214e:	2201      	movs	r2, #1
 8012150:	4620      	mov	r0, r4
 8012152:	9301      	str	r3, [sp, #4]
 8012154:	f000 fa74 	bl	8012640 <__lshift>
 8012158:	4631      	mov	r1, r6
 801215a:	4683      	mov	fp, r0
 801215c:	f000 fadc 	bl	8012718 <__mcmp>
 8012160:	2800      	cmp	r0, #0
 8012162:	dcb2      	bgt.n	80120ca <_dtoa_r+0xac2>
 8012164:	d102      	bne.n	801216c <_dtoa_r+0xb64>
 8012166:	9b01      	ldr	r3, [sp, #4]
 8012168:	07db      	lsls	r3, r3, #31
 801216a:	d4ae      	bmi.n	80120ca <_dtoa_r+0xac2>
 801216c:	462b      	mov	r3, r5
 801216e:	461d      	mov	r5, r3
 8012170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012174:	2a30      	cmp	r2, #48	; 0x30
 8012176:	d0fa      	beq.n	801216e <_dtoa_r+0xb66>
 8012178:	e6f7      	b.n	8011f6a <_dtoa_r+0x962>
 801217a:	9a00      	ldr	r2, [sp, #0]
 801217c:	429a      	cmp	r2, r3
 801217e:	d1a5      	bne.n	80120cc <_dtoa_r+0xac4>
 8012180:	f10a 0a01 	add.w	sl, sl, #1
 8012184:	2331      	movs	r3, #49	; 0x31
 8012186:	e779      	b.n	801207c <_dtoa_r+0xa74>
 8012188:	4b13      	ldr	r3, [pc, #76]	; (80121d8 <_dtoa_r+0xbd0>)
 801218a:	f7ff baaf 	b.w	80116ec <_dtoa_r+0xe4>
 801218e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012190:	2b00      	cmp	r3, #0
 8012192:	f47f aa86 	bne.w	80116a2 <_dtoa_r+0x9a>
 8012196:	4b11      	ldr	r3, [pc, #68]	; (80121dc <_dtoa_r+0xbd4>)
 8012198:	f7ff baa8 	b.w	80116ec <_dtoa_r+0xe4>
 801219c:	f1b9 0f00 	cmp.w	r9, #0
 80121a0:	dc03      	bgt.n	80121aa <_dtoa_r+0xba2>
 80121a2:	9b05      	ldr	r3, [sp, #20]
 80121a4:	2b02      	cmp	r3, #2
 80121a6:	f73f aec9 	bgt.w	8011f3c <_dtoa_r+0x934>
 80121aa:	9d00      	ldr	r5, [sp, #0]
 80121ac:	4631      	mov	r1, r6
 80121ae:	4658      	mov	r0, fp
 80121b0:	f7ff f99c 	bl	80114ec <quorem>
 80121b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80121b8:	f805 3b01 	strb.w	r3, [r5], #1
 80121bc:	9a00      	ldr	r2, [sp, #0]
 80121be:	1aaa      	subs	r2, r5, r2
 80121c0:	4591      	cmp	r9, r2
 80121c2:	ddba      	ble.n	801213a <_dtoa_r+0xb32>
 80121c4:	4659      	mov	r1, fp
 80121c6:	2300      	movs	r3, #0
 80121c8:	220a      	movs	r2, #10
 80121ca:	4620      	mov	r0, r4
 80121cc:	f000 f888 	bl	80122e0 <__multadd>
 80121d0:	4683      	mov	fp, r0
 80121d2:	e7eb      	b.n	80121ac <_dtoa_r+0xba4>
 80121d4:	08014223 	.word	0x08014223
 80121d8:	0801417c 	.word	0x0801417c
 80121dc:	080141a0 	.word	0x080141a0

080121e0 <_localeconv_r>:
 80121e0:	4800      	ldr	r0, [pc, #0]	; (80121e4 <_localeconv_r+0x4>)
 80121e2:	4770      	bx	lr
 80121e4:	20000258 	.word	0x20000258

080121e8 <memcpy>:
 80121e8:	440a      	add	r2, r1
 80121ea:	4291      	cmp	r1, r2
 80121ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80121f0:	d100      	bne.n	80121f4 <memcpy+0xc>
 80121f2:	4770      	bx	lr
 80121f4:	b510      	push	{r4, lr}
 80121f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121fe:	4291      	cmp	r1, r2
 8012200:	d1f9      	bne.n	80121f6 <memcpy+0xe>
 8012202:	bd10      	pop	{r4, pc}

08012204 <__malloc_lock>:
 8012204:	4801      	ldr	r0, [pc, #4]	; (801220c <__malloc_lock+0x8>)
 8012206:	f000 bd22 	b.w	8012c4e <__retarget_lock_acquire_recursive>
 801220a:	bf00      	nop
 801220c:	20001630 	.word	0x20001630

08012210 <__malloc_unlock>:
 8012210:	4801      	ldr	r0, [pc, #4]	; (8012218 <__malloc_unlock+0x8>)
 8012212:	f000 bd1d 	b.w	8012c50 <__retarget_lock_release_recursive>
 8012216:	bf00      	nop
 8012218:	20001630 	.word	0x20001630

0801221c <_Balloc>:
 801221c:	b570      	push	{r4, r5, r6, lr}
 801221e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012220:	4604      	mov	r4, r0
 8012222:	460d      	mov	r5, r1
 8012224:	b976      	cbnz	r6, 8012244 <_Balloc+0x28>
 8012226:	2010      	movs	r0, #16
 8012228:	f7fe fbea 	bl	8010a00 <malloc>
 801222c:	4602      	mov	r2, r0
 801222e:	6260      	str	r0, [r4, #36]	; 0x24
 8012230:	b920      	cbnz	r0, 801223c <_Balloc+0x20>
 8012232:	4b18      	ldr	r3, [pc, #96]	; (8012294 <_Balloc+0x78>)
 8012234:	4818      	ldr	r0, [pc, #96]	; (8012298 <_Balloc+0x7c>)
 8012236:	2166      	movs	r1, #102	; 0x66
 8012238:	f000 fcd8 	bl	8012bec <__assert_func>
 801223c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012240:	6006      	str	r6, [r0, #0]
 8012242:	60c6      	str	r6, [r0, #12]
 8012244:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012246:	68f3      	ldr	r3, [r6, #12]
 8012248:	b183      	cbz	r3, 801226c <_Balloc+0x50>
 801224a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801224c:	68db      	ldr	r3, [r3, #12]
 801224e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012252:	b9b8      	cbnz	r0, 8012284 <_Balloc+0x68>
 8012254:	2101      	movs	r1, #1
 8012256:	fa01 f605 	lsl.w	r6, r1, r5
 801225a:	1d72      	adds	r2, r6, #5
 801225c:	0092      	lsls	r2, r2, #2
 801225e:	4620      	mov	r0, r4
 8012260:	f000 fb5a 	bl	8012918 <_calloc_r>
 8012264:	b160      	cbz	r0, 8012280 <_Balloc+0x64>
 8012266:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801226a:	e00e      	b.n	801228a <_Balloc+0x6e>
 801226c:	2221      	movs	r2, #33	; 0x21
 801226e:	2104      	movs	r1, #4
 8012270:	4620      	mov	r0, r4
 8012272:	f000 fb51 	bl	8012918 <_calloc_r>
 8012276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012278:	60f0      	str	r0, [r6, #12]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d1e4      	bne.n	801224a <_Balloc+0x2e>
 8012280:	2000      	movs	r0, #0
 8012282:	bd70      	pop	{r4, r5, r6, pc}
 8012284:	6802      	ldr	r2, [r0, #0]
 8012286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801228a:	2300      	movs	r3, #0
 801228c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012290:	e7f7      	b.n	8012282 <_Balloc+0x66>
 8012292:	bf00      	nop
 8012294:	080141ad 	.word	0x080141ad
 8012298:	08014234 	.word	0x08014234

0801229c <_Bfree>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122a0:	4605      	mov	r5, r0
 80122a2:	460c      	mov	r4, r1
 80122a4:	b976      	cbnz	r6, 80122c4 <_Bfree+0x28>
 80122a6:	2010      	movs	r0, #16
 80122a8:	f7fe fbaa 	bl	8010a00 <malloc>
 80122ac:	4602      	mov	r2, r0
 80122ae:	6268      	str	r0, [r5, #36]	; 0x24
 80122b0:	b920      	cbnz	r0, 80122bc <_Bfree+0x20>
 80122b2:	4b09      	ldr	r3, [pc, #36]	; (80122d8 <_Bfree+0x3c>)
 80122b4:	4809      	ldr	r0, [pc, #36]	; (80122dc <_Bfree+0x40>)
 80122b6:	218a      	movs	r1, #138	; 0x8a
 80122b8:	f000 fc98 	bl	8012bec <__assert_func>
 80122bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122c0:	6006      	str	r6, [r0, #0]
 80122c2:	60c6      	str	r6, [r0, #12]
 80122c4:	b13c      	cbz	r4, 80122d6 <_Bfree+0x3a>
 80122c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80122c8:	6862      	ldr	r2, [r4, #4]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122d0:	6021      	str	r1, [r4, #0]
 80122d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122d6:	bd70      	pop	{r4, r5, r6, pc}
 80122d8:	080141ad 	.word	0x080141ad
 80122dc:	08014234 	.word	0x08014234

080122e0 <__multadd>:
 80122e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e4:	690e      	ldr	r6, [r1, #16]
 80122e6:	4607      	mov	r7, r0
 80122e8:	4698      	mov	r8, r3
 80122ea:	460c      	mov	r4, r1
 80122ec:	f101 0014 	add.w	r0, r1, #20
 80122f0:	2300      	movs	r3, #0
 80122f2:	6805      	ldr	r5, [r0, #0]
 80122f4:	b2a9      	uxth	r1, r5
 80122f6:	fb02 8101 	mla	r1, r2, r1, r8
 80122fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80122fe:	0c2d      	lsrs	r5, r5, #16
 8012300:	fb02 c505 	mla	r5, r2, r5, ip
 8012304:	b289      	uxth	r1, r1
 8012306:	3301      	adds	r3, #1
 8012308:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801230c:	429e      	cmp	r6, r3
 801230e:	f840 1b04 	str.w	r1, [r0], #4
 8012312:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012316:	dcec      	bgt.n	80122f2 <__multadd+0x12>
 8012318:	f1b8 0f00 	cmp.w	r8, #0
 801231c:	d022      	beq.n	8012364 <__multadd+0x84>
 801231e:	68a3      	ldr	r3, [r4, #8]
 8012320:	42b3      	cmp	r3, r6
 8012322:	dc19      	bgt.n	8012358 <__multadd+0x78>
 8012324:	6861      	ldr	r1, [r4, #4]
 8012326:	4638      	mov	r0, r7
 8012328:	3101      	adds	r1, #1
 801232a:	f7ff ff77 	bl	801221c <_Balloc>
 801232e:	4605      	mov	r5, r0
 8012330:	b928      	cbnz	r0, 801233e <__multadd+0x5e>
 8012332:	4602      	mov	r2, r0
 8012334:	4b0d      	ldr	r3, [pc, #52]	; (801236c <__multadd+0x8c>)
 8012336:	480e      	ldr	r0, [pc, #56]	; (8012370 <__multadd+0x90>)
 8012338:	21b5      	movs	r1, #181	; 0xb5
 801233a:	f000 fc57 	bl	8012bec <__assert_func>
 801233e:	6922      	ldr	r2, [r4, #16]
 8012340:	3202      	adds	r2, #2
 8012342:	f104 010c 	add.w	r1, r4, #12
 8012346:	0092      	lsls	r2, r2, #2
 8012348:	300c      	adds	r0, #12
 801234a:	f7ff ff4d 	bl	80121e8 <memcpy>
 801234e:	4621      	mov	r1, r4
 8012350:	4638      	mov	r0, r7
 8012352:	f7ff ffa3 	bl	801229c <_Bfree>
 8012356:	462c      	mov	r4, r5
 8012358:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801235c:	3601      	adds	r6, #1
 801235e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012362:	6126      	str	r6, [r4, #16]
 8012364:	4620      	mov	r0, r4
 8012366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801236a:	bf00      	nop
 801236c:	08014223 	.word	0x08014223
 8012370:	08014234 	.word	0x08014234

08012374 <__hi0bits>:
 8012374:	0c03      	lsrs	r3, r0, #16
 8012376:	041b      	lsls	r3, r3, #16
 8012378:	b9d3      	cbnz	r3, 80123b0 <__hi0bits+0x3c>
 801237a:	0400      	lsls	r0, r0, #16
 801237c:	2310      	movs	r3, #16
 801237e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012382:	bf04      	itt	eq
 8012384:	0200      	lsleq	r0, r0, #8
 8012386:	3308      	addeq	r3, #8
 8012388:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801238c:	bf04      	itt	eq
 801238e:	0100      	lsleq	r0, r0, #4
 8012390:	3304      	addeq	r3, #4
 8012392:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012396:	bf04      	itt	eq
 8012398:	0080      	lsleq	r0, r0, #2
 801239a:	3302      	addeq	r3, #2
 801239c:	2800      	cmp	r0, #0
 801239e:	db05      	blt.n	80123ac <__hi0bits+0x38>
 80123a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80123a4:	f103 0301 	add.w	r3, r3, #1
 80123a8:	bf08      	it	eq
 80123aa:	2320      	moveq	r3, #32
 80123ac:	4618      	mov	r0, r3
 80123ae:	4770      	bx	lr
 80123b0:	2300      	movs	r3, #0
 80123b2:	e7e4      	b.n	801237e <__hi0bits+0xa>

080123b4 <__lo0bits>:
 80123b4:	6803      	ldr	r3, [r0, #0]
 80123b6:	f013 0207 	ands.w	r2, r3, #7
 80123ba:	4601      	mov	r1, r0
 80123bc:	d00b      	beq.n	80123d6 <__lo0bits+0x22>
 80123be:	07da      	lsls	r2, r3, #31
 80123c0:	d424      	bmi.n	801240c <__lo0bits+0x58>
 80123c2:	0798      	lsls	r0, r3, #30
 80123c4:	bf49      	itett	mi
 80123c6:	085b      	lsrmi	r3, r3, #1
 80123c8:	089b      	lsrpl	r3, r3, #2
 80123ca:	2001      	movmi	r0, #1
 80123cc:	600b      	strmi	r3, [r1, #0]
 80123ce:	bf5c      	itt	pl
 80123d0:	600b      	strpl	r3, [r1, #0]
 80123d2:	2002      	movpl	r0, #2
 80123d4:	4770      	bx	lr
 80123d6:	b298      	uxth	r0, r3
 80123d8:	b9b0      	cbnz	r0, 8012408 <__lo0bits+0x54>
 80123da:	0c1b      	lsrs	r3, r3, #16
 80123dc:	2010      	movs	r0, #16
 80123de:	f013 0fff 	tst.w	r3, #255	; 0xff
 80123e2:	bf04      	itt	eq
 80123e4:	0a1b      	lsreq	r3, r3, #8
 80123e6:	3008      	addeq	r0, #8
 80123e8:	071a      	lsls	r2, r3, #28
 80123ea:	bf04      	itt	eq
 80123ec:	091b      	lsreq	r3, r3, #4
 80123ee:	3004      	addeq	r0, #4
 80123f0:	079a      	lsls	r2, r3, #30
 80123f2:	bf04      	itt	eq
 80123f4:	089b      	lsreq	r3, r3, #2
 80123f6:	3002      	addeq	r0, #2
 80123f8:	07da      	lsls	r2, r3, #31
 80123fa:	d403      	bmi.n	8012404 <__lo0bits+0x50>
 80123fc:	085b      	lsrs	r3, r3, #1
 80123fe:	f100 0001 	add.w	r0, r0, #1
 8012402:	d005      	beq.n	8012410 <__lo0bits+0x5c>
 8012404:	600b      	str	r3, [r1, #0]
 8012406:	4770      	bx	lr
 8012408:	4610      	mov	r0, r2
 801240a:	e7e8      	b.n	80123de <__lo0bits+0x2a>
 801240c:	2000      	movs	r0, #0
 801240e:	4770      	bx	lr
 8012410:	2020      	movs	r0, #32
 8012412:	4770      	bx	lr

08012414 <__i2b>:
 8012414:	b510      	push	{r4, lr}
 8012416:	460c      	mov	r4, r1
 8012418:	2101      	movs	r1, #1
 801241a:	f7ff feff 	bl	801221c <_Balloc>
 801241e:	4602      	mov	r2, r0
 8012420:	b928      	cbnz	r0, 801242e <__i2b+0x1a>
 8012422:	4b05      	ldr	r3, [pc, #20]	; (8012438 <__i2b+0x24>)
 8012424:	4805      	ldr	r0, [pc, #20]	; (801243c <__i2b+0x28>)
 8012426:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801242a:	f000 fbdf 	bl	8012bec <__assert_func>
 801242e:	2301      	movs	r3, #1
 8012430:	6144      	str	r4, [r0, #20]
 8012432:	6103      	str	r3, [r0, #16]
 8012434:	bd10      	pop	{r4, pc}
 8012436:	bf00      	nop
 8012438:	08014223 	.word	0x08014223
 801243c:	08014234 	.word	0x08014234

08012440 <__multiply>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	4614      	mov	r4, r2
 8012446:	690a      	ldr	r2, [r1, #16]
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	429a      	cmp	r2, r3
 801244c:	bfb8      	it	lt
 801244e:	460b      	movlt	r3, r1
 8012450:	460d      	mov	r5, r1
 8012452:	bfbc      	itt	lt
 8012454:	4625      	movlt	r5, r4
 8012456:	461c      	movlt	r4, r3
 8012458:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801245c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012460:	68ab      	ldr	r3, [r5, #8]
 8012462:	6869      	ldr	r1, [r5, #4]
 8012464:	eb0a 0709 	add.w	r7, sl, r9
 8012468:	42bb      	cmp	r3, r7
 801246a:	b085      	sub	sp, #20
 801246c:	bfb8      	it	lt
 801246e:	3101      	addlt	r1, #1
 8012470:	f7ff fed4 	bl	801221c <_Balloc>
 8012474:	b930      	cbnz	r0, 8012484 <__multiply+0x44>
 8012476:	4602      	mov	r2, r0
 8012478:	4b42      	ldr	r3, [pc, #264]	; (8012584 <__multiply+0x144>)
 801247a:	4843      	ldr	r0, [pc, #268]	; (8012588 <__multiply+0x148>)
 801247c:	f240 115d 	movw	r1, #349	; 0x15d
 8012480:	f000 fbb4 	bl	8012bec <__assert_func>
 8012484:	f100 0614 	add.w	r6, r0, #20
 8012488:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801248c:	4633      	mov	r3, r6
 801248e:	2200      	movs	r2, #0
 8012490:	4543      	cmp	r3, r8
 8012492:	d31e      	bcc.n	80124d2 <__multiply+0x92>
 8012494:	f105 0c14 	add.w	ip, r5, #20
 8012498:	f104 0314 	add.w	r3, r4, #20
 801249c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80124a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80124a4:	9202      	str	r2, [sp, #8]
 80124a6:	ebac 0205 	sub.w	r2, ip, r5
 80124aa:	3a15      	subs	r2, #21
 80124ac:	f022 0203 	bic.w	r2, r2, #3
 80124b0:	3204      	adds	r2, #4
 80124b2:	f105 0115 	add.w	r1, r5, #21
 80124b6:	458c      	cmp	ip, r1
 80124b8:	bf38      	it	cc
 80124ba:	2204      	movcc	r2, #4
 80124bc:	9201      	str	r2, [sp, #4]
 80124be:	9a02      	ldr	r2, [sp, #8]
 80124c0:	9303      	str	r3, [sp, #12]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d808      	bhi.n	80124d8 <__multiply+0x98>
 80124c6:	2f00      	cmp	r7, #0
 80124c8:	dc55      	bgt.n	8012576 <__multiply+0x136>
 80124ca:	6107      	str	r7, [r0, #16]
 80124cc:	b005      	add	sp, #20
 80124ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d2:	f843 2b04 	str.w	r2, [r3], #4
 80124d6:	e7db      	b.n	8012490 <__multiply+0x50>
 80124d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80124dc:	f1ba 0f00 	cmp.w	sl, #0
 80124e0:	d020      	beq.n	8012524 <__multiply+0xe4>
 80124e2:	f105 0e14 	add.w	lr, r5, #20
 80124e6:	46b1      	mov	r9, r6
 80124e8:	2200      	movs	r2, #0
 80124ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 80124ee:	f8d9 b000 	ldr.w	fp, [r9]
 80124f2:	b2a1      	uxth	r1, r4
 80124f4:	fa1f fb8b 	uxth.w	fp, fp
 80124f8:	fb0a b101 	mla	r1, sl, r1, fp
 80124fc:	4411      	add	r1, r2
 80124fe:	f8d9 2000 	ldr.w	r2, [r9]
 8012502:	0c24      	lsrs	r4, r4, #16
 8012504:	0c12      	lsrs	r2, r2, #16
 8012506:	fb0a 2404 	mla	r4, sl, r4, r2
 801250a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801250e:	b289      	uxth	r1, r1
 8012510:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012514:	45f4      	cmp	ip, lr
 8012516:	f849 1b04 	str.w	r1, [r9], #4
 801251a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801251e:	d8e4      	bhi.n	80124ea <__multiply+0xaa>
 8012520:	9901      	ldr	r1, [sp, #4]
 8012522:	5072      	str	r2, [r6, r1]
 8012524:	9a03      	ldr	r2, [sp, #12]
 8012526:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801252a:	3304      	adds	r3, #4
 801252c:	f1b9 0f00 	cmp.w	r9, #0
 8012530:	d01f      	beq.n	8012572 <__multiply+0x132>
 8012532:	6834      	ldr	r4, [r6, #0]
 8012534:	f105 0114 	add.w	r1, r5, #20
 8012538:	46b6      	mov	lr, r6
 801253a:	f04f 0a00 	mov.w	sl, #0
 801253e:	880a      	ldrh	r2, [r1, #0]
 8012540:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012544:	fb09 b202 	mla	r2, r9, r2, fp
 8012548:	4492      	add	sl, r2
 801254a:	b2a4      	uxth	r4, r4
 801254c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012550:	f84e 4b04 	str.w	r4, [lr], #4
 8012554:	f851 4b04 	ldr.w	r4, [r1], #4
 8012558:	f8be 2000 	ldrh.w	r2, [lr]
 801255c:	0c24      	lsrs	r4, r4, #16
 801255e:	fb09 2404 	mla	r4, r9, r4, r2
 8012562:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012566:	458c      	cmp	ip, r1
 8012568:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801256c:	d8e7      	bhi.n	801253e <__multiply+0xfe>
 801256e:	9a01      	ldr	r2, [sp, #4]
 8012570:	50b4      	str	r4, [r6, r2]
 8012572:	3604      	adds	r6, #4
 8012574:	e7a3      	b.n	80124be <__multiply+0x7e>
 8012576:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801257a:	2b00      	cmp	r3, #0
 801257c:	d1a5      	bne.n	80124ca <__multiply+0x8a>
 801257e:	3f01      	subs	r7, #1
 8012580:	e7a1      	b.n	80124c6 <__multiply+0x86>
 8012582:	bf00      	nop
 8012584:	08014223 	.word	0x08014223
 8012588:	08014234 	.word	0x08014234

0801258c <__pow5mult>:
 801258c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012590:	4615      	mov	r5, r2
 8012592:	f012 0203 	ands.w	r2, r2, #3
 8012596:	4606      	mov	r6, r0
 8012598:	460f      	mov	r7, r1
 801259a:	d007      	beq.n	80125ac <__pow5mult+0x20>
 801259c:	4c25      	ldr	r4, [pc, #148]	; (8012634 <__pow5mult+0xa8>)
 801259e:	3a01      	subs	r2, #1
 80125a0:	2300      	movs	r3, #0
 80125a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80125a6:	f7ff fe9b 	bl	80122e0 <__multadd>
 80125aa:	4607      	mov	r7, r0
 80125ac:	10ad      	asrs	r5, r5, #2
 80125ae:	d03d      	beq.n	801262c <__pow5mult+0xa0>
 80125b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80125b2:	b97c      	cbnz	r4, 80125d4 <__pow5mult+0x48>
 80125b4:	2010      	movs	r0, #16
 80125b6:	f7fe fa23 	bl	8010a00 <malloc>
 80125ba:	4602      	mov	r2, r0
 80125bc:	6270      	str	r0, [r6, #36]	; 0x24
 80125be:	b928      	cbnz	r0, 80125cc <__pow5mult+0x40>
 80125c0:	4b1d      	ldr	r3, [pc, #116]	; (8012638 <__pow5mult+0xac>)
 80125c2:	481e      	ldr	r0, [pc, #120]	; (801263c <__pow5mult+0xb0>)
 80125c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80125c8:	f000 fb10 	bl	8012bec <__assert_func>
 80125cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80125d0:	6004      	str	r4, [r0, #0]
 80125d2:	60c4      	str	r4, [r0, #12]
 80125d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80125d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80125dc:	b94c      	cbnz	r4, 80125f2 <__pow5mult+0x66>
 80125de:	f240 2171 	movw	r1, #625	; 0x271
 80125e2:	4630      	mov	r0, r6
 80125e4:	f7ff ff16 	bl	8012414 <__i2b>
 80125e8:	2300      	movs	r3, #0
 80125ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80125ee:	4604      	mov	r4, r0
 80125f0:	6003      	str	r3, [r0, #0]
 80125f2:	f04f 0900 	mov.w	r9, #0
 80125f6:	07eb      	lsls	r3, r5, #31
 80125f8:	d50a      	bpl.n	8012610 <__pow5mult+0x84>
 80125fa:	4639      	mov	r1, r7
 80125fc:	4622      	mov	r2, r4
 80125fe:	4630      	mov	r0, r6
 8012600:	f7ff ff1e 	bl	8012440 <__multiply>
 8012604:	4639      	mov	r1, r7
 8012606:	4680      	mov	r8, r0
 8012608:	4630      	mov	r0, r6
 801260a:	f7ff fe47 	bl	801229c <_Bfree>
 801260e:	4647      	mov	r7, r8
 8012610:	106d      	asrs	r5, r5, #1
 8012612:	d00b      	beq.n	801262c <__pow5mult+0xa0>
 8012614:	6820      	ldr	r0, [r4, #0]
 8012616:	b938      	cbnz	r0, 8012628 <__pow5mult+0x9c>
 8012618:	4622      	mov	r2, r4
 801261a:	4621      	mov	r1, r4
 801261c:	4630      	mov	r0, r6
 801261e:	f7ff ff0f 	bl	8012440 <__multiply>
 8012622:	6020      	str	r0, [r4, #0]
 8012624:	f8c0 9000 	str.w	r9, [r0]
 8012628:	4604      	mov	r4, r0
 801262a:	e7e4      	b.n	80125f6 <__pow5mult+0x6a>
 801262c:	4638      	mov	r0, r7
 801262e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012632:	bf00      	nop
 8012634:	08014388 	.word	0x08014388
 8012638:	080141ad 	.word	0x080141ad
 801263c:	08014234 	.word	0x08014234

08012640 <__lshift>:
 8012640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012644:	460c      	mov	r4, r1
 8012646:	6849      	ldr	r1, [r1, #4]
 8012648:	6923      	ldr	r3, [r4, #16]
 801264a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801264e:	68a3      	ldr	r3, [r4, #8]
 8012650:	4607      	mov	r7, r0
 8012652:	4691      	mov	r9, r2
 8012654:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012658:	f108 0601 	add.w	r6, r8, #1
 801265c:	42b3      	cmp	r3, r6
 801265e:	db0b      	blt.n	8012678 <__lshift+0x38>
 8012660:	4638      	mov	r0, r7
 8012662:	f7ff fddb 	bl	801221c <_Balloc>
 8012666:	4605      	mov	r5, r0
 8012668:	b948      	cbnz	r0, 801267e <__lshift+0x3e>
 801266a:	4602      	mov	r2, r0
 801266c:	4b28      	ldr	r3, [pc, #160]	; (8012710 <__lshift+0xd0>)
 801266e:	4829      	ldr	r0, [pc, #164]	; (8012714 <__lshift+0xd4>)
 8012670:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012674:	f000 faba 	bl	8012bec <__assert_func>
 8012678:	3101      	adds	r1, #1
 801267a:	005b      	lsls	r3, r3, #1
 801267c:	e7ee      	b.n	801265c <__lshift+0x1c>
 801267e:	2300      	movs	r3, #0
 8012680:	f100 0114 	add.w	r1, r0, #20
 8012684:	f100 0210 	add.w	r2, r0, #16
 8012688:	4618      	mov	r0, r3
 801268a:	4553      	cmp	r3, sl
 801268c:	db33      	blt.n	80126f6 <__lshift+0xb6>
 801268e:	6920      	ldr	r0, [r4, #16]
 8012690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012694:	f104 0314 	add.w	r3, r4, #20
 8012698:	f019 091f 	ands.w	r9, r9, #31
 801269c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80126a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80126a4:	d02b      	beq.n	80126fe <__lshift+0xbe>
 80126a6:	f1c9 0e20 	rsb	lr, r9, #32
 80126aa:	468a      	mov	sl, r1
 80126ac:	2200      	movs	r2, #0
 80126ae:	6818      	ldr	r0, [r3, #0]
 80126b0:	fa00 f009 	lsl.w	r0, r0, r9
 80126b4:	4302      	orrs	r2, r0
 80126b6:	f84a 2b04 	str.w	r2, [sl], #4
 80126ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80126be:	459c      	cmp	ip, r3
 80126c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80126c4:	d8f3      	bhi.n	80126ae <__lshift+0x6e>
 80126c6:	ebac 0304 	sub.w	r3, ip, r4
 80126ca:	3b15      	subs	r3, #21
 80126cc:	f023 0303 	bic.w	r3, r3, #3
 80126d0:	3304      	adds	r3, #4
 80126d2:	f104 0015 	add.w	r0, r4, #21
 80126d6:	4584      	cmp	ip, r0
 80126d8:	bf38      	it	cc
 80126da:	2304      	movcc	r3, #4
 80126dc:	50ca      	str	r2, [r1, r3]
 80126de:	b10a      	cbz	r2, 80126e4 <__lshift+0xa4>
 80126e0:	f108 0602 	add.w	r6, r8, #2
 80126e4:	3e01      	subs	r6, #1
 80126e6:	4638      	mov	r0, r7
 80126e8:	612e      	str	r6, [r5, #16]
 80126ea:	4621      	mov	r1, r4
 80126ec:	f7ff fdd6 	bl	801229c <_Bfree>
 80126f0:	4628      	mov	r0, r5
 80126f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80126fa:	3301      	adds	r3, #1
 80126fc:	e7c5      	b.n	801268a <__lshift+0x4a>
 80126fe:	3904      	subs	r1, #4
 8012700:	f853 2b04 	ldr.w	r2, [r3], #4
 8012704:	f841 2f04 	str.w	r2, [r1, #4]!
 8012708:	459c      	cmp	ip, r3
 801270a:	d8f9      	bhi.n	8012700 <__lshift+0xc0>
 801270c:	e7ea      	b.n	80126e4 <__lshift+0xa4>
 801270e:	bf00      	nop
 8012710:	08014223 	.word	0x08014223
 8012714:	08014234 	.word	0x08014234

08012718 <__mcmp>:
 8012718:	b530      	push	{r4, r5, lr}
 801271a:	6902      	ldr	r2, [r0, #16]
 801271c:	690c      	ldr	r4, [r1, #16]
 801271e:	1b12      	subs	r2, r2, r4
 8012720:	d10e      	bne.n	8012740 <__mcmp+0x28>
 8012722:	f100 0314 	add.w	r3, r0, #20
 8012726:	3114      	adds	r1, #20
 8012728:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801272c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012730:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012734:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012738:	42a5      	cmp	r5, r4
 801273a:	d003      	beq.n	8012744 <__mcmp+0x2c>
 801273c:	d305      	bcc.n	801274a <__mcmp+0x32>
 801273e:	2201      	movs	r2, #1
 8012740:	4610      	mov	r0, r2
 8012742:	bd30      	pop	{r4, r5, pc}
 8012744:	4283      	cmp	r3, r0
 8012746:	d3f3      	bcc.n	8012730 <__mcmp+0x18>
 8012748:	e7fa      	b.n	8012740 <__mcmp+0x28>
 801274a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801274e:	e7f7      	b.n	8012740 <__mcmp+0x28>

08012750 <__mdiff>:
 8012750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012754:	460c      	mov	r4, r1
 8012756:	4606      	mov	r6, r0
 8012758:	4611      	mov	r1, r2
 801275a:	4620      	mov	r0, r4
 801275c:	4617      	mov	r7, r2
 801275e:	f7ff ffdb 	bl	8012718 <__mcmp>
 8012762:	1e05      	subs	r5, r0, #0
 8012764:	d110      	bne.n	8012788 <__mdiff+0x38>
 8012766:	4629      	mov	r1, r5
 8012768:	4630      	mov	r0, r6
 801276a:	f7ff fd57 	bl	801221c <_Balloc>
 801276e:	b930      	cbnz	r0, 801277e <__mdiff+0x2e>
 8012770:	4b39      	ldr	r3, [pc, #228]	; (8012858 <__mdiff+0x108>)
 8012772:	4602      	mov	r2, r0
 8012774:	f240 2132 	movw	r1, #562	; 0x232
 8012778:	4838      	ldr	r0, [pc, #224]	; (801285c <__mdiff+0x10c>)
 801277a:	f000 fa37 	bl	8012bec <__assert_func>
 801277e:	2301      	movs	r3, #1
 8012780:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012788:	bfa4      	itt	ge
 801278a:	463b      	movge	r3, r7
 801278c:	4627      	movge	r7, r4
 801278e:	4630      	mov	r0, r6
 8012790:	6879      	ldr	r1, [r7, #4]
 8012792:	bfa6      	itte	ge
 8012794:	461c      	movge	r4, r3
 8012796:	2500      	movge	r5, #0
 8012798:	2501      	movlt	r5, #1
 801279a:	f7ff fd3f 	bl	801221c <_Balloc>
 801279e:	b920      	cbnz	r0, 80127aa <__mdiff+0x5a>
 80127a0:	4b2d      	ldr	r3, [pc, #180]	; (8012858 <__mdiff+0x108>)
 80127a2:	4602      	mov	r2, r0
 80127a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80127a8:	e7e6      	b.n	8012778 <__mdiff+0x28>
 80127aa:	693e      	ldr	r6, [r7, #16]
 80127ac:	60c5      	str	r5, [r0, #12]
 80127ae:	6925      	ldr	r5, [r4, #16]
 80127b0:	f107 0114 	add.w	r1, r7, #20
 80127b4:	f104 0914 	add.w	r9, r4, #20
 80127b8:	f100 0e14 	add.w	lr, r0, #20
 80127bc:	f107 0210 	add.w	r2, r7, #16
 80127c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80127c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80127c8:	46f2      	mov	sl, lr
 80127ca:	2700      	movs	r7, #0
 80127cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80127d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80127d4:	fa1f f883 	uxth.w	r8, r3
 80127d8:	fa17 f78b 	uxtah	r7, r7, fp
 80127dc:	0c1b      	lsrs	r3, r3, #16
 80127de:	eba7 0808 	sub.w	r8, r7, r8
 80127e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80127e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80127ea:	fa1f f888 	uxth.w	r8, r8
 80127ee:	141f      	asrs	r7, r3, #16
 80127f0:	454d      	cmp	r5, r9
 80127f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80127f6:	f84a 3b04 	str.w	r3, [sl], #4
 80127fa:	d8e7      	bhi.n	80127cc <__mdiff+0x7c>
 80127fc:	1b2b      	subs	r3, r5, r4
 80127fe:	3b15      	subs	r3, #21
 8012800:	f023 0303 	bic.w	r3, r3, #3
 8012804:	3304      	adds	r3, #4
 8012806:	3415      	adds	r4, #21
 8012808:	42a5      	cmp	r5, r4
 801280a:	bf38      	it	cc
 801280c:	2304      	movcc	r3, #4
 801280e:	4419      	add	r1, r3
 8012810:	4473      	add	r3, lr
 8012812:	469e      	mov	lr, r3
 8012814:	460d      	mov	r5, r1
 8012816:	4565      	cmp	r5, ip
 8012818:	d30e      	bcc.n	8012838 <__mdiff+0xe8>
 801281a:	f10c 0203 	add.w	r2, ip, #3
 801281e:	1a52      	subs	r2, r2, r1
 8012820:	f022 0203 	bic.w	r2, r2, #3
 8012824:	3903      	subs	r1, #3
 8012826:	458c      	cmp	ip, r1
 8012828:	bf38      	it	cc
 801282a:	2200      	movcc	r2, #0
 801282c:	441a      	add	r2, r3
 801282e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012832:	b17b      	cbz	r3, 8012854 <__mdiff+0x104>
 8012834:	6106      	str	r6, [r0, #16]
 8012836:	e7a5      	b.n	8012784 <__mdiff+0x34>
 8012838:	f855 8b04 	ldr.w	r8, [r5], #4
 801283c:	fa17 f488 	uxtah	r4, r7, r8
 8012840:	1422      	asrs	r2, r4, #16
 8012842:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012846:	b2a4      	uxth	r4, r4
 8012848:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801284c:	f84e 4b04 	str.w	r4, [lr], #4
 8012850:	1417      	asrs	r7, r2, #16
 8012852:	e7e0      	b.n	8012816 <__mdiff+0xc6>
 8012854:	3e01      	subs	r6, #1
 8012856:	e7ea      	b.n	801282e <__mdiff+0xde>
 8012858:	08014223 	.word	0x08014223
 801285c:	08014234 	.word	0x08014234

08012860 <__d2b>:
 8012860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012864:	4689      	mov	r9, r1
 8012866:	2101      	movs	r1, #1
 8012868:	ec57 6b10 	vmov	r6, r7, d0
 801286c:	4690      	mov	r8, r2
 801286e:	f7ff fcd5 	bl	801221c <_Balloc>
 8012872:	4604      	mov	r4, r0
 8012874:	b930      	cbnz	r0, 8012884 <__d2b+0x24>
 8012876:	4602      	mov	r2, r0
 8012878:	4b25      	ldr	r3, [pc, #148]	; (8012910 <__d2b+0xb0>)
 801287a:	4826      	ldr	r0, [pc, #152]	; (8012914 <__d2b+0xb4>)
 801287c:	f240 310a 	movw	r1, #778	; 0x30a
 8012880:	f000 f9b4 	bl	8012bec <__assert_func>
 8012884:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801288c:	bb35      	cbnz	r5, 80128dc <__d2b+0x7c>
 801288e:	2e00      	cmp	r6, #0
 8012890:	9301      	str	r3, [sp, #4]
 8012892:	d028      	beq.n	80128e6 <__d2b+0x86>
 8012894:	4668      	mov	r0, sp
 8012896:	9600      	str	r6, [sp, #0]
 8012898:	f7ff fd8c 	bl	80123b4 <__lo0bits>
 801289c:	9900      	ldr	r1, [sp, #0]
 801289e:	b300      	cbz	r0, 80128e2 <__d2b+0x82>
 80128a0:	9a01      	ldr	r2, [sp, #4]
 80128a2:	f1c0 0320 	rsb	r3, r0, #32
 80128a6:	fa02 f303 	lsl.w	r3, r2, r3
 80128aa:	430b      	orrs	r3, r1
 80128ac:	40c2      	lsrs	r2, r0
 80128ae:	6163      	str	r3, [r4, #20]
 80128b0:	9201      	str	r2, [sp, #4]
 80128b2:	9b01      	ldr	r3, [sp, #4]
 80128b4:	61a3      	str	r3, [r4, #24]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	bf14      	ite	ne
 80128ba:	2202      	movne	r2, #2
 80128bc:	2201      	moveq	r2, #1
 80128be:	6122      	str	r2, [r4, #16]
 80128c0:	b1d5      	cbz	r5, 80128f8 <__d2b+0x98>
 80128c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128c6:	4405      	add	r5, r0
 80128c8:	f8c9 5000 	str.w	r5, [r9]
 80128cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128d0:	f8c8 0000 	str.w	r0, [r8]
 80128d4:	4620      	mov	r0, r4
 80128d6:	b003      	add	sp, #12
 80128d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128e0:	e7d5      	b.n	801288e <__d2b+0x2e>
 80128e2:	6161      	str	r1, [r4, #20]
 80128e4:	e7e5      	b.n	80128b2 <__d2b+0x52>
 80128e6:	a801      	add	r0, sp, #4
 80128e8:	f7ff fd64 	bl	80123b4 <__lo0bits>
 80128ec:	9b01      	ldr	r3, [sp, #4]
 80128ee:	6163      	str	r3, [r4, #20]
 80128f0:	2201      	movs	r2, #1
 80128f2:	6122      	str	r2, [r4, #16]
 80128f4:	3020      	adds	r0, #32
 80128f6:	e7e3      	b.n	80128c0 <__d2b+0x60>
 80128f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80128fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012900:	f8c9 0000 	str.w	r0, [r9]
 8012904:	6918      	ldr	r0, [r3, #16]
 8012906:	f7ff fd35 	bl	8012374 <__hi0bits>
 801290a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801290e:	e7df      	b.n	80128d0 <__d2b+0x70>
 8012910:	08014223 	.word	0x08014223
 8012914:	08014234 	.word	0x08014234

08012918 <_calloc_r>:
 8012918:	b513      	push	{r0, r1, r4, lr}
 801291a:	434a      	muls	r2, r1
 801291c:	4611      	mov	r1, r2
 801291e:	9201      	str	r2, [sp, #4]
 8012920:	f7fe f8d6 	bl	8010ad0 <_malloc_r>
 8012924:	4604      	mov	r4, r0
 8012926:	b118      	cbz	r0, 8012930 <_calloc_r+0x18>
 8012928:	9a01      	ldr	r2, [sp, #4]
 801292a:	2100      	movs	r1, #0
 801292c:	f7fe f878 	bl	8010a20 <memset>
 8012930:	4620      	mov	r0, r4
 8012932:	b002      	add	sp, #8
 8012934:	bd10      	pop	{r4, pc}

08012936 <__ssputs_r>:
 8012936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801293a:	688e      	ldr	r6, [r1, #8]
 801293c:	429e      	cmp	r6, r3
 801293e:	4682      	mov	sl, r0
 8012940:	460c      	mov	r4, r1
 8012942:	4690      	mov	r8, r2
 8012944:	461f      	mov	r7, r3
 8012946:	d838      	bhi.n	80129ba <__ssputs_r+0x84>
 8012948:	898a      	ldrh	r2, [r1, #12]
 801294a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801294e:	d032      	beq.n	80129b6 <__ssputs_r+0x80>
 8012950:	6825      	ldr	r5, [r4, #0]
 8012952:	6909      	ldr	r1, [r1, #16]
 8012954:	eba5 0901 	sub.w	r9, r5, r1
 8012958:	6965      	ldr	r5, [r4, #20]
 801295a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801295e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012962:	3301      	adds	r3, #1
 8012964:	444b      	add	r3, r9
 8012966:	106d      	asrs	r5, r5, #1
 8012968:	429d      	cmp	r5, r3
 801296a:	bf38      	it	cc
 801296c:	461d      	movcc	r5, r3
 801296e:	0553      	lsls	r3, r2, #21
 8012970:	d531      	bpl.n	80129d6 <__ssputs_r+0xa0>
 8012972:	4629      	mov	r1, r5
 8012974:	f7fe f8ac 	bl	8010ad0 <_malloc_r>
 8012978:	4606      	mov	r6, r0
 801297a:	b950      	cbnz	r0, 8012992 <__ssputs_r+0x5c>
 801297c:	230c      	movs	r3, #12
 801297e:	f8ca 3000 	str.w	r3, [sl]
 8012982:	89a3      	ldrh	r3, [r4, #12]
 8012984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012988:	81a3      	strh	r3, [r4, #12]
 801298a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012992:	6921      	ldr	r1, [r4, #16]
 8012994:	464a      	mov	r2, r9
 8012996:	f7ff fc27 	bl	80121e8 <memcpy>
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80129a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129a4:	81a3      	strh	r3, [r4, #12]
 80129a6:	6126      	str	r6, [r4, #16]
 80129a8:	6165      	str	r5, [r4, #20]
 80129aa:	444e      	add	r6, r9
 80129ac:	eba5 0509 	sub.w	r5, r5, r9
 80129b0:	6026      	str	r6, [r4, #0]
 80129b2:	60a5      	str	r5, [r4, #8]
 80129b4:	463e      	mov	r6, r7
 80129b6:	42be      	cmp	r6, r7
 80129b8:	d900      	bls.n	80129bc <__ssputs_r+0x86>
 80129ba:	463e      	mov	r6, r7
 80129bc:	4632      	mov	r2, r6
 80129be:	6820      	ldr	r0, [r4, #0]
 80129c0:	4641      	mov	r1, r8
 80129c2:	f000 f958 	bl	8012c76 <memmove>
 80129c6:	68a3      	ldr	r3, [r4, #8]
 80129c8:	6822      	ldr	r2, [r4, #0]
 80129ca:	1b9b      	subs	r3, r3, r6
 80129cc:	4432      	add	r2, r6
 80129ce:	60a3      	str	r3, [r4, #8]
 80129d0:	6022      	str	r2, [r4, #0]
 80129d2:	2000      	movs	r0, #0
 80129d4:	e7db      	b.n	801298e <__ssputs_r+0x58>
 80129d6:	462a      	mov	r2, r5
 80129d8:	f000 f967 	bl	8012caa <_realloc_r>
 80129dc:	4606      	mov	r6, r0
 80129de:	2800      	cmp	r0, #0
 80129e0:	d1e1      	bne.n	80129a6 <__ssputs_r+0x70>
 80129e2:	6921      	ldr	r1, [r4, #16]
 80129e4:	4650      	mov	r0, sl
 80129e6:	f7fe f823 	bl	8010a30 <_free_r>
 80129ea:	e7c7      	b.n	801297c <__ssputs_r+0x46>

080129ec <_svfiprintf_r>:
 80129ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f0:	4698      	mov	r8, r3
 80129f2:	898b      	ldrh	r3, [r1, #12]
 80129f4:	061b      	lsls	r3, r3, #24
 80129f6:	b09d      	sub	sp, #116	; 0x74
 80129f8:	4607      	mov	r7, r0
 80129fa:	460d      	mov	r5, r1
 80129fc:	4614      	mov	r4, r2
 80129fe:	d50e      	bpl.n	8012a1e <_svfiprintf_r+0x32>
 8012a00:	690b      	ldr	r3, [r1, #16]
 8012a02:	b963      	cbnz	r3, 8012a1e <_svfiprintf_r+0x32>
 8012a04:	2140      	movs	r1, #64	; 0x40
 8012a06:	f7fe f863 	bl	8010ad0 <_malloc_r>
 8012a0a:	6028      	str	r0, [r5, #0]
 8012a0c:	6128      	str	r0, [r5, #16]
 8012a0e:	b920      	cbnz	r0, 8012a1a <_svfiprintf_r+0x2e>
 8012a10:	230c      	movs	r3, #12
 8012a12:	603b      	str	r3, [r7, #0]
 8012a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a18:	e0d1      	b.n	8012bbe <_svfiprintf_r+0x1d2>
 8012a1a:	2340      	movs	r3, #64	; 0x40
 8012a1c:	616b      	str	r3, [r5, #20]
 8012a1e:	2300      	movs	r3, #0
 8012a20:	9309      	str	r3, [sp, #36]	; 0x24
 8012a22:	2320      	movs	r3, #32
 8012a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a2c:	2330      	movs	r3, #48	; 0x30
 8012a2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012bd8 <_svfiprintf_r+0x1ec>
 8012a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a36:	f04f 0901 	mov.w	r9, #1
 8012a3a:	4623      	mov	r3, r4
 8012a3c:	469a      	mov	sl, r3
 8012a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a42:	b10a      	cbz	r2, 8012a48 <_svfiprintf_r+0x5c>
 8012a44:	2a25      	cmp	r2, #37	; 0x25
 8012a46:	d1f9      	bne.n	8012a3c <_svfiprintf_r+0x50>
 8012a48:	ebba 0b04 	subs.w	fp, sl, r4
 8012a4c:	d00b      	beq.n	8012a66 <_svfiprintf_r+0x7a>
 8012a4e:	465b      	mov	r3, fp
 8012a50:	4622      	mov	r2, r4
 8012a52:	4629      	mov	r1, r5
 8012a54:	4638      	mov	r0, r7
 8012a56:	f7ff ff6e 	bl	8012936 <__ssputs_r>
 8012a5a:	3001      	adds	r0, #1
 8012a5c:	f000 80aa 	beq.w	8012bb4 <_svfiprintf_r+0x1c8>
 8012a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a62:	445a      	add	r2, fp
 8012a64:	9209      	str	r2, [sp, #36]	; 0x24
 8012a66:	f89a 3000 	ldrb.w	r3, [sl]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	f000 80a2 	beq.w	8012bb4 <_svfiprintf_r+0x1c8>
 8012a70:	2300      	movs	r3, #0
 8012a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a7a:	f10a 0a01 	add.w	sl, sl, #1
 8012a7e:	9304      	str	r3, [sp, #16]
 8012a80:	9307      	str	r3, [sp, #28]
 8012a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a86:	931a      	str	r3, [sp, #104]	; 0x68
 8012a88:	4654      	mov	r4, sl
 8012a8a:	2205      	movs	r2, #5
 8012a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a90:	4851      	ldr	r0, [pc, #324]	; (8012bd8 <_svfiprintf_r+0x1ec>)
 8012a92:	f7ed fbad 	bl	80001f0 <memchr>
 8012a96:	9a04      	ldr	r2, [sp, #16]
 8012a98:	b9d8      	cbnz	r0, 8012ad2 <_svfiprintf_r+0xe6>
 8012a9a:	06d0      	lsls	r0, r2, #27
 8012a9c:	bf44      	itt	mi
 8012a9e:	2320      	movmi	r3, #32
 8012aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aa4:	0711      	lsls	r1, r2, #28
 8012aa6:	bf44      	itt	mi
 8012aa8:	232b      	movmi	r3, #43	; 0x2b
 8012aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012aae:	f89a 3000 	ldrb.w	r3, [sl]
 8012ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8012ab4:	d015      	beq.n	8012ae2 <_svfiprintf_r+0xf6>
 8012ab6:	9a07      	ldr	r2, [sp, #28]
 8012ab8:	4654      	mov	r4, sl
 8012aba:	2000      	movs	r0, #0
 8012abc:	f04f 0c0a 	mov.w	ip, #10
 8012ac0:	4621      	mov	r1, r4
 8012ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ac6:	3b30      	subs	r3, #48	; 0x30
 8012ac8:	2b09      	cmp	r3, #9
 8012aca:	d94e      	bls.n	8012b6a <_svfiprintf_r+0x17e>
 8012acc:	b1b0      	cbz	r0, 8012afc <_svfiprintf_r+0x110>
 8012ace:	9207      	str	r2, [sp, #28]
 8012ad0:	e014      	b.n	8012afc <_svfiprintf_r+0x110>
 8012ad2:	eba0 0308 	sub.w	r3, r0, r8
 8012ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8012ada:	4313      	orrs	r3, r2
 8012adc:	9304      	str	r3, [sp, #16]
 8012ade:	46a2      	mov	sl, r4
 8012ae0:	e7d2      	b.n	8012a88 <_svfiprintf_r+0x9c>
 8012ae2:	9b03      	ldr	r3, [sp, #12]
 8012ae4:	1d19      	adds	r1, r3, #4
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	9103      	str	r1, [sp, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	bfbb      	ittet	lt
 8012aee:	425b      	neglt	r3, r3
 8012af0:	f042 0202 	orrlt.w	r2, r2, #2
 8012af4:	9307      	strge	r3, [sp, #28]
 8012af6:	9307      	strlt	r3, [sp, #28]
 8012af8:	bfb8      	it	lt
 8012afa:	9204      	strlt	r2, [sp, #16]
 8012afc:	7823      	ldrb	r3, [r4, #0]
 8012afe:	2b2e      	cmp	r3, #46	; 0x2e
 8012b00:	d10c      	bne.n	8012b1c <_svfiprintf_r+0x130>
 8012b02:	7863      	ldrb	r3, [r4, #1]
 8012b04:	2b2a      	cmp	r3, #42	; 0x2a
 8012b06:	d135      	bne.n	8012b74 <_svfiprintf_r+0x188>
 8012b08:	9b03      	ldr	r3, [sp, #12]
 8012b0a:	1d1a      	adds	r2, r3, #4
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	9203      	str	r2, [sp, #12]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	bfb8      	it	lt
 8012b14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012b18:	3402      	adds	r4, #2
 8012b1a:	9305      	str	r3, [sp, #20]
 8012b1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012be8 <_svfiprintf_r+0x1fc>
 8012b20:	7821      	ldrb	r1, [r4, #0]
 8012b22:	2203      	movs	r2, #3
 8012b24:	4650      	mov	r0, sl
 8012b26:	f7ed fb63 	bl	80001f0 <memchr>
 8012b2a:	b140      	cbz	r0, 8012b3e <_svfiprintf_r+0x152>
 8012b2c:	2340      	movs	r3, #64	; 0x40
 8012b2e:	eba0 000a 	sub.w	r0, r0, sl
 8012b32:	fa03 f000 	lsl.w	r0, r3, r0
 8012b36:	9b04      	ldr	r3, [sp, #16]
 8012b38:	4303      	orrs	r3, r0
 8012b3a:	3401      	adds	r4, #1
 8012b3c:	9304      	str	r3, [sp, #16]
 8012b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b42:	4826      	ldr	r0, [pc, #152]	; (8012bdc <_svfiprintf_r+0x1f0>)
 8012b44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b48:	2206      	movs	r2, #6
 8012b4a:	f7ed fb51 	bl	80001f0 <memchr>
 8012b4e:	2800      	cmp	r0, #0
 8012b50:	d038      	beq.n	8012bc4 <_svfiprintf_r+0x1d8>
 8012b52:	4b23      	ldr	r3, [pc, #140]	; (8012be0 <_svfiprintf_r+0x1f4>)
 8012b54:	bb1b      	cbnz	r3, 8012b9e <_svfiprintf_r+0x1b2>
 8012b56:	9b03      	ldr	r3, [sp, #12]
 8012b58:	3307      	adds	r3, #7
 8012b5a:	f023 0307 	bic.w	r3, r3, #7
 8012b5e:	3308      	adds	r3, #8
 8012b60:	9303      	str	r3, [sp, #12]
 8012b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b64:	4433      	add	r3, r6
 8012b66:	9309      	str	r3, [sp, #36]	; 0x24
 8012b68:	e767      	b.n	8012a3a <_svfiprintf_r+0x4e>
 8012b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b6e:	460c      	mov	r4, r1
 8012b70:	2001      	movs	r0, #1
 8012b72:	e7a5      	b.n	8012ac0 <_svfiprintf_r+0xd4>
 8012b74:	2300      	movs	r3, #0
 8012b76:	3401      	adds	r4, #1
 8012b78:	9305      	str	r3, [sp, #20]
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	f04f 0c0a 	mov.w	ip, #10
 8012b80:	4620      	mov	r0, r4
 8012b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b86:	3a30      	subs	r2, #48	; 0x30
 8012b88:	2a09      	cmp	r2, #9
 8012b8a:	d903      	bls.n	8012b94 <_svfiprintf_r+0x1a8>
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d0c5      	beq.n	8012b1c <_svfiprintf_r+0x130>
 8012b90:	9105      	str	r1, [sp, #20]
 8012b92:	e7c3      	b.n	8012b1c <_svfiprintf_r+0x130>
 8012b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b98:	4604      	mov	r4, r0
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	e7f0      	b.n	8012b80 <_svfiprintf_r+0x194>
 8012b9e:	ab03      	add	r3, sp, #12
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	462a      	mov	r2, r5
 8012ba4:	4b0f      	ldr	r3, [pc, #60]	; (8012be4 <_svfiprintf_r+0x1f8>)
 8012ba6:	a904      	add	r1, sp, #16
 8012ba8:	4638      	mov	r0, r7
 8012baa:	f7fe f88b 	bl	8010cc4 <_printf_float>
 8012bae:	1c42      	adds	r2, r0, #1
 8012bb0:	4606      	mov	r6, r0
 8012bb2:	d1d6      	bne.n	8012b62 <_svfiprintf_r+0x176>
 8012bb4:	89ab      	ldrh	r3, [r5, #12]
 8012bb6:	065b      	lsls	r3, r3, #25
 8012bb8:	f53f af2c 	bmi.w	8012a14 <_svfiprintf_r+0x28>
 8012bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bbe:	b01d      	add	sp, #116	; 0x74
 8012bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc4:	ab03      	add	r3, sp, #12
 8012bc6:	9300      	str	r3, [sp, #0]
 8012bc8:	462a      	mov	r2, r5
 8012bca:	4b06      	ldr	r3, [pc, #24]	; (8012be4 <_svfiprintf_r+0x1f8>)
 8012bcc:	a904      	add	r1, sp, #16
 8012bce:	4638      	mov	r0, r7
 8012bd0:	f7fe fb1c 	bl	801120c <_printf_i>
 8012bd4:	e7eb      	b.n	8012bae <_svfiprintf_r+0x1c2>
 8012bd6:	bf00      	nop
 8012bd8:	08014394 	.word	0x08014394
 8012bdc:	0801439e 	.word	0x0801439e
 8012be0:	08010cc5 	.word	0x08010cc5
 8012be4:	08012937 	.word	0x08012937
 8012be8:	0801439a 	.word	0x0801439a

08012bec <__assert_func>:
 8012bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bee:	4614      	mov	r4, r2
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	4b09      	ldr	r3, [pc, #36]	; (8012c18 <__assert_func+0x2c>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	4605      	mov	r5, r0
 8012bf8:	68d8      	ldr	r0, [r3, #12]
 8012bfa:	b14c      	cbz	r4, 8012c10 <__assert_func+0x24>
 8012bfc:	4b07      	ldr	r3, [pc, #28]	; (8012c1c <__assert_func+0x30>)
 8012bfe:	9100      	str	r1, [sp, #0]
 8012c00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c04:	4906      	ldr	r1, [pc, #24]	; (8012c20 <__assert_func+0x34>)
 8012c06:	462b      	mov	r3, r5
 8012c08:	f000 f80e 	bl	8012c28 <fiprintf>
 8012c0c:	f000 fa9a 	bl	8013144 <abort>
 8012c10:	4b04      	ldr	r3, [pc, #16]	; (8012c24 <__assert_func+0x38>)
 8012c12:	461c      	mov	r4, r3
 8012c14:	e7f3      	b.n	8012bfe <__assert_func+0x12>
 8012c16:	bf00      	nop
 8012c18:	20000104 	.word	0x20000104
 8012c1c:	080143a5 	.word	0x080143a5
 8012c20:	080143b2 	.word	0x080143b2
 8012c24:	080143e0 	.word	0x080143e0

08012c28 <fiprintf>:
 8012c28:	b40e      	push	{r1, r2, r3}
 8012c2a:	b503      	push	{r0, r1, lr}
 8012c2c:	4601      	mov	r1, r0
 8012c2e:	ab03      	add	r3, sp, #12
 8012c30:	4805      	ldr	r0, [pc, #20]	; (8012c48 <fiprintf+0x20>)
 8012c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c36:	6800      	ldr	r0, [r0, #0]
 8012c38:	9301      	str	r3, [sp, #4]
 8012c3a:	f000 f885 	bl	8012d48 <_vfiprintf_r>
 8012c3e:	b002      	add	sp, #8
 8012c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c44:	b003      	add	sp, #12
 8012c46:	4770      	bx	lr
 8012c48:	20000104 	.word	0x20000104

08012c4c <__retarget_lock_init_recursive>:
 8012c4c:	4770      	bx	lr

08012c4e <__retarget_lock_acquire_recursive>:
 8012c4e:	4770      	bx	lr

08012c50 <__retarget_lock_release_recursive>:
 8012c50:	4770      	bx	lr

08012c52 <__ascii_mbtowc>:
 8012c52:	b082      	sub	sp, #8
 8012c54:	b901      	cbnz	r1, 8012c58 <__ascii_mbtowc+0x6>
 8012c56:	a901      	add	r1, sp, #4
 8012c58:	b142      	cbz	r2, 8012c6c <__ascii_mbtowc+0x1a>
 8012c5a:	b14b      	cbz	r3, 8012c70 <__ascii_mbtowc+0x1e>
 8012c5c:	7813      	ldrb	r3, [r2, #0]
 8012c5e:	600b      	str	r3, [r1, #0]
 8012c60:	7812      	ldrb	r2, [r2, #0]
 8012c62:	1e10      	subs	r0, r2, #0
 8012c64:	bf18      	it	ne
 8012c66:	2001      	movne	r0, #1
 8012c68:	b002      	add	sp, #8
 8012c6a:	4770      	bx	lr
 8012c6c:	4610      	mov	r0, r2
 8012c6e:	e7fb      	b.n	8012c68 <__ascii_mbtowc+0x16>
 8012c70:	f06f 0001 	mvn.w	r0, #1
 8012c74:	e7f8      	b.n	8012c68 <__ascii_mbtowc+0x16>

08012c76 <memmove>:
 8012c76:	4288      	cmp	r0, r1
 8012c78:	b510      	push	{r4, lr}
 8012c7a:	eb01 0402 	add.w	r4, r1, r2
 8012c7e:	d902      	bls.n	8012c86 <memmove+0x10>
 8012c80:	4284      	cmp	r4, r0
 8012c82:	4623      	mov	r3, r4
 8012c84:	d807      	bhi.n	8012c96 <memmove+0x20>
 8012c86:	1e43      	subs	r3, r0, #1
 8012c88:	42a1      	cmp	r1, r4
 8012c8a:	d008      	beq.n	8012c9e <memmove+0x28>
 8012c8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c94:	e7f8      	b.n	8012c88 <memmove+0x12>
 8012c96:	4402      	add	r2, r0
 8012c98:	4601      	mov	r1, r0
 8012c9a:	428a      	cmp	r2, r1
 8012c9c:	d100      	bne.n	8012ca0 <memmove+0x2a>
 8012c9e:	bd10      	pop	{r4, pc}
 8012ca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ca4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ca8:	e7f7      	b.n	8012c9a <memmove+0x24>

08012caa <_realloc_r>:
 8012caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cac:	4607      	mov	r7, r0
 8012cae:	4614      	mov	r4, r2
 8012cb0:	460e      	mov	r6, r1
 8012cb2:	b921      	cbnz	r1, 8012cbe <_realloc_r+0x14>
 8012cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012cb8:	4611      	mov	r1, r2
 8012cba:	f7fd bf09 	b.w	8010ad0 <_malloc_r>
 8012cbe:	b922      	cbnz	r2, 8012cca <_realloc_r+0x20>
 8012cc0:	f7fd feb6 	bl	8010a30 <_free_r>
 8012cc4:	4625      	mov	r5, r4
 8012cc6:	4628      	mov	r0, r5
 8012cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cca:	f000 fc5f 	bl	801358c <_malloc_usable_size_r>
 8012cce:	42a0      	cmp	r0, r4
 8012cd0:	d20f      	bcs.n	8012cf2 <_realloc_r+0x48>
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	4638      	mov	r0, r7
 8012cd6:	f7fd fefb 	bl	8010ad0 <_malloc_r>
 8012cda:	4605      	mov	r5, r0
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d0f2      	beq.n	8012cc6 <_realloc_r+0x1c>
 8012ce0:	4631      	mov	r1, r6
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	f7ff fa80 	bl	80121e8 <memcpy>
 8012ce8:	4631      	mov	r1, r6
 8012cea:	4638      	mov	r0, r7
 8012cec:	f7fd fea0 	bl	8010a30 <_free_r>
 8012cf0:	e7e9      	b.n	8012cc6 <_realloc_r+0x1c>
 8012cf2:	4635      	mov	r5, r6
 8012cf4:	e7e7      	b.n	8012cc6 <_realloc_r+0x1c>

08012cf6 <__sfputc_r>:
 8012cf6:	6893      	ldr	r3, [r2, #8]
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	b410      	push	{r4}
 8012cfe:	6093      	str	r3, [r2, #8]
 8012d00:	da08      	bge.n	8012d14 <__sfputc_r+0x1e>
 8012d02:	6994      	ldr	r4, [r2, #24]
 8012d04:	42a3      	cmp	r3, r4
 8012d06:	db01      	blt.n	8012d0c <__sfputc_r+0x16>
 8012d08:	290a      	cmp	r1, #10
 8012d0a:	d103      	bne.n	8012d14 <__sfputc_r+0x1e>
 8012d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d10:	f000 b94a 	b.w	8012fa8 <__swbuf_r>
 8012d14:	6813      	ldr	r3, [r2, #0]
 8012d16:	1c58      	adds	r0, r3, #1
 8012d18:	6010      	str	r0, [r2, #0]
 8012d1a:	7019      	strb	r1, [r3, #0]
 8012d1c:	4608      	mov	r0, r1
 8012d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <__sfputs_r>:
 8012d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d26:	4606      	mov	r6, r0
 8012d28:	460f      	mov	r7, r1
 8012d2a:	4614      	mov	r4, r2
 8012d2c:	18d5      	adds	r5, r2, r3
 8012d2e:	42ac      	cmp	r4, r5
 8012d30:	d101      	bne.n	8012d36 <__sfputs_r+0x12>
 8012d32:	2000      	movs	r0, #0
 8012d34:	e007      	b.n	8012d46 <__sfputs_r+0x22>
 8012d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d3a:	463a      	mov	r2, r7
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f7ff ffda 	bl	8012cf6 <__sfputc_r>
 8012d42:	1c43      	adds	r3, r0, #1
 8012d44:	d1f3      	bne.n	8012d2e <__sfputs_r+0xa>
 8012d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012d48 <_vfiprintf_r>:
 8012d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d4c:	460d      	mov	r5, r1
 8012d4e:	b09d      	sub	sp, #116	; 0x74
 8012d50:	4614      	mov	r4, r2
 8012d52:	4698      	mov	r8, r3
 8012d54:	4606      	mov	r6, r0
 8012d56:	b118      	cbz	r0, 8012d60 <_vfiprintf_r+0x18>
 8012d58:	6983      	ldr	r3, [r0, #24]
 8012d5a:	b90b      	cbnz	r3, 8012d60 <_vfiprintf_r+0x18>
 8012d5c:	f000 fb14 	bl	8013388 <__sinit>
 8012d60:	4b89      	ldr	r3, [pc, #548]	; (8012f88 <_vfiprintf_r+0x240>)
 8012d62:	429d      	cmp	r5, r3
 8012d64:	d11b      	bne.n	8012d9e <_vfiprintf_r+0x56>
 8012d66:	6875      	ldr	r5, [r6, #4]
 8012d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d6a:	07d9      	lsls	r1, r3, #31
 8012d6c:	d405      	bmi.n	8012d7a <_vfiprintf_r+0x32>
 8012d6e:	89ab      	ldrh	r3, [r5, #12]
 8012d70:	059a      	lsls	r2, r3, #22
 8012d72:	d402      	bmi.n	8012d7a <_vfiprintf_r+0x32>
 8012d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d76:	f7ff ff6a 	bl	8012c4e <__retarget_lock_acquire_recursive>
 8012d7a:	89ab      	ldrh	r3, [r5, #12]
 8012d7c:	071b      	lsls	r3, r3, #28
 8012d7e:	d501      	bpl.n	8012d84 <_vfiprintf_r+0x3c>
 8012d80:	692b      	ldr	r3, [r5, #16]
 8012d82:	b9eb      	cbnz	r3, 8012dc0 <_vfiprintf_r+0x78>
 8012d84:	4629      	mov	r1, r5
 8012d86:	4630      	mov	r0, r6
 8012d88:	f000 f96e 	bl	8013068 <__swsetup_r>
 8012d8c:	b1c0      	cbz	r0, 8012dc0 <_vfiprintf_r+0x78>
 8012d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d90:	07dc      	lsls	r4, r3, #31
 8012d92:	d50e      	bpl.n	8012db2 <_vfiprintf_r+0x6a>
 8012d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d98:	b01d      	add	sp, #116	; 0x74
 8012d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d9e:	4b7b      	ldr	r3, [pc, #492]	; (8012f8c <_vfiprintf_r+0x244>)
 8012da0:	429d      	cmp	r5, r3
 8012da2:	d101      	bne.n	8012da8 <_vfiprintf_r+0x60>
 8012da4:	68b5      	ldr	r5, [r6, #8]
 8012da6:	e7df      	b.n	8012d68 <_vfiprintf_r+0x20>
 8012da8:	4b79      	ldr	r3, [pc, #484]	; (8012f90 <_vfiprintf_r+0x248>)
 8012daa:	429d      	cmp	r5, r3
 8012dac:	bf08      	it	eq
 8012dae:	68f5      	ldreq	r5, [r6, #12]
 8012db0:	e7da      	b.n	8012d68 <_vfiprintf_r+0x20>
 8012db2:	89ab      	ldrh	r3, [r5, #12]
 8012db4:	0598      	lsls	r0, r3, #22
 8012db6:	d4ed      	bmi.n	8012d94 <_vfiprintf_r+0x4c>
 8012db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dba:	f7ff ff49 	bl	8012c50 <__retarget_lock_release_recursive>
 8012dbe:	e7e9      	b.n	8012d94 <_vfiprintf_r+0x4c>
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8012dc4:	2320      	movs	r3, #32
 8012dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8012dce:	2330      	movs	r3, #48	; 0x30
 8012dd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012f94 <_vfiprintf_r+0x24c>
 8012dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012dd8:	f04f 0901 	mov.w	r9, #1
 8012ddc:	4623      	mov	r3, r4
 8012dde:	469a      	mov	sl, r3
 8012de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012de4:	b10a      	cbz	r2, 8012dea <_vfiprintf_r+0xa2>
 8012de6:	2a25      	cmp	r2, #37	; 0x25
 8012de8:	d1f9      	bne.n	8012dde <_vfiprintf_r+0x96>
 8012dea:	ebba 0b04 	subs.w	fp, sl, r4
 8012dee:	d00b      	beq.n	8012e08 <_vfiprintf_r+0xc0>
 8012df0:	465b      	mov	r3, fp
 8012df2:	4622      	mov	r2, r4
 8012df4:	4629      	mov	r1, r5
 8012df6:	4630      	mov	r0, r6
 8012df8:	f7ff ff94 	bl	8012d24 <__sfputs_r>
 8012dfc:	3001      	adds	r0, #1
 8012dfe:	f000 80aa 	beq.w	8012f56 <_vfiprintf_r+0x20e>
 8012e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e04:	445a      	add	r2, fp
 8012e06:	9209      	str	r2, [sp, #36]	; 0x24
 8012e08:	f89a 3000 	ldrb.w	r3, [sl]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	f000 80a2 	beq.w	8012f56 <_vfiprintf_r+0x20e>
 8012e12:	2300      	movs	r3, #0
 8012e14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e1c:	f10a 0a01 	add.w	sl, sl, #1
 8012e20:	9304      	str	r3, [sp, #16]
 8012e22:	9307      	str	r3, [sp, #28]
 8012e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e28:	931a      	str	r3, [sp, #104]	; 0x68
 8012e2a:	4654      	mov	r4, sl
 8012e2c:	2205      	movs	r2, #5
 8012e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e32:	4858      	ldr	r0, [pc, #352]	; (8012f94 <_vfiprintf_r+0x24c>)
 8012e34:	f7ed f9dc 	bl	80001f0 <memchr>
 8012e38:	9a04      	ldr	r2, [sp, #16]
 8012e3a:	b9d8      	cbnz	r0, 8012e74 <_vfiprintf_r+0x12c>
 8012e3c:	06d1      	lsls	r1, r2, #27
 8012e3e:	bf44      	itt	mi
 8012e40:	2320      	movmi	r3, #32
 8012e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e46:	0713      	lsls	r3, r2, #28
 8012e48:	bf44      	itt	mi
 8012e4a:	232b      	movmi	r3, #43	; 0x2b
 8012e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e50:	f89a 3000 	ldrb.w	r3, [sl]
 8012e54:	2b2a      	cmp	r3, #42	; 0x2a
 8012e56:	d015      	beq.n	8012e84 <_vfiprintf_r+0x13c>
 8012e58:	9a07      	ldr	r2, [sp, #28]
 8012e5a:	4654      	mov	r4, sl
 8012e5c:	2000      	movs	r0, #0
 8012e5e:	f04f 0c0a 	mov.w	ip, #10
 8012e62:	4621      	mov	r1, r4
 8012e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e68:	3b30      	subs	r3, #48	; 0x30
 8012e6a:	2b09      	cmp	r3, #9
 8012e6c:	d94e      	bls.n	8012f0c <_vfiprintf_r+0x1c4>
 8012e6e:	b1b0      	cbz	r0, 8012e9e <_vfiprintf_r+0x156>
 8012e70:	9207      	str	r2, [sp, #28]
 8012e72:	e014      	b.n	8012e9e <_vfiprintf_r+0x156>
 8012e74:	eba0 0308 	sub.w	r3, r0, r8
 8012e78:	fa09 f303 	lsl.w	r3, r9, r3
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	9304      	str	r3, [sp, #16]
 8012e80:	46a2      	mov	sl, r4
 8012e82:	e7d2      	b.n	8012e2a <_vfiprintf_r+0xe2>
 8012e84:	9b03      	ldr	r3, [sp, #12]
 8012e86:	1d19      	adds	r1, r3, #4
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	9103      	str	r1, [sp, #12]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	bfbb      	ittet	lt
 8012e90:	425b      	neglt	r3, r3
 8012e92:	f042 0202 	orrlt.w	r2, r2, #2
 8012e96:	9307      	strge	r3, [sp, #28]
 8012e98:	9307      	strlt	r3, [sp, #28]
 8012e9a:	bfb8      	it	lt
 8012e9c:	9204      	strlt	r2, [sp, #16]
 8012e9e:	7823      	ldrb	r3, [r4, #0]
 8012ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8012ea2:	d10c      	bne.n	8012ebe <_vfiprintf_r+0x176>
 8012ea4:	7863      	ldrb	r3, [r4, #1]
 8012ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8012ea8:	d135      	bne.n	8012f16 <_vfiprintf_r+0x1ce>
 8012eaa:	9b03      	ldr	r3, [sp, #12]
 8012eac:	1d1a      	adds	r2, r3, #4
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	9203      	str	r2, [sp, #12]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	bfb8      	it	lt
 8012eb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012eba:	3402      	adds	r4, #2
 8012ebc:	9305      	str	r3, [sp, #20]
 8012ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012fa4 <_vfiprintf_r+0x25c>
 8012ec2:	7821      	ldrb	r1, [r4, #0]
 8012ec4:	2203      	movs	r2, #3
 8012ec6:	4650      	mov	r0, sl
 8012ec8:	f7ed f992 	bl	80001f0 <memchr>
 8012ecc:	b140      	cbz	r0, 8012ee0 <_vfiprintf_r+0x198>
 8012ece:	2340      	movs	r3, #64	; 0x40
 8012ed0:	eba0 000a 	sub.w	r0, r0, sl
 8012ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8012ed8:	9b04      	ldr	r3, [sp, #16]
 8012eda:	4303      	orrs	r3, r0
 8012edc:	3401      	adds	r4, #1
 8012ede:	9304      	str	r3, [sp, #16]
 8012ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ee4:	482c      	ldr	r0, [pc, #176]	; (8012f98 <_vfiprintf_r+0x250>)
 8012ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012eea:	2206      	movs	r2, #6
 8012eec:	f7ed f980 	bl	80001f0 <memchr>
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	d03f      	beq.n	8012f74 <_vfiprintf_r+0x22c>
 8012ef4:	4b29      	ldr	r3, [pc, #164]	; (8012f9c <_vfiprintf_r+0x254>)
 8012ef6:	bb1b      	cbnz	r3, 8012f40 <_vfiprintf_r+0x1f8>
 8012ef8:	9b03      	ldr	r3, [sp, #12]
 8012efa:	3307      	adds	r3, #7
 8012efc:	f023 0307 	bic.w	r3, r3, #7
 8012f00:	3308      	adds	r3, #8
 8012f02:	9303      	str	r3, [sp, #12]
 8012f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f06:	443b      	add	r3, r7
 8012f08:	9309      	str	r3, [sp, #36]	; 0x24
 8012f0a:	e767      	b.n	8012ddc <_vfiprintf_r+0x94>
 8012f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f10:	460c      	mov	r4, r1
 8012f12:	2001      	movs	r0, #1
 8012f14:	e7a5      	b.n	8012e62 <_vfiprintf_r+0x11a>
 8012f16:	2300      	movs	r3, #0
 8012f18:	3401      	adds	r4, #1
 8012f1a:	9305      	str	r3, [sp, #20]
 8012f1c:	4619      	mov	r1, r3
 8012f1e:	f04f 0c0a 	mov.w	ip, #10
 8012f22:	4620      	mov	r0, r4
 8012f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f28:	3a30      	subs	r2, #48	; 0x30
 8012f2a:	2a09      	cmp	r2, #9
 8012f2c:	d903      	bls.n	8012f36 <_vfiprintf_r+0x1ee>
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d0c5      	beq.n	8012ebe <_vfiprintf_r+0x176>
 8012f32:	9105      	str	r1, [sp, #20]
 8012f34:	e7c3      	b.n	8012ebe <_vfiprintf_r+0x176>
 8012f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	e7f0      	b.n	8012f22 <_vfiprintf_r+0x1da>
 8012f40:	ab03      	add	r3, sp, #12
 8012f42:	9300      	str	r3, [sp, #0]
 8012f44:	462a      	mov	r2, r5
 8012f46:	4b16      	ldr	r3, [pc, #88]	; (8012fa0 <_vfiprintf_r+0x258>)
 8012f48:	a904      	add	r1, sp, #16
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f7fd feba 	bl	8010cc4 <_printf_float>
 8012f50:	4607      	mov	r7, r0
 8012f52:	1c78      	adds	r0, r7, #1
 8012f54:	d1d6      	bne.n	8012f04 <_vfiprintf_r+0x1bc>
 8012f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f58:	07d9      	lsls	r1, r3, #31
 8012f5a:	d405      	bmi.n	8012f68 <_vfiprintf_r+0x220>
 8012f5c:	89ab      	ldrh	r3, [r5, #12]
 8012f5e:	059a      	lsls	r2, r3, #22
 8012f60:	d402      	bmi.n	8012f68 <_vfiprintf_r+0x220>
 8012f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f64:	f7ff fe74 	bl	8012c50 <__retarget_lock_release_recursive>
 8012f68:	89ab      	ldrh	r3, [r5, #12]
 8012f6a:	065b      	lsls	r3, r3, #25
 8012f6c:	f53f af12 	bmi.w	8012d94 <_vfiprintf_r+0x4c>
 8012f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f72:	e711      	b.n	8012d98 <_vfiprintf_r+0x50>
 8012f74:	ab03      	add	r3, sp, #12
 8012f76:	9300      	str	r3, [sp, #0]
 8012f78:	462a      	mov	r2, r5
 8012f7a:	4b09      	ldr	r3, [pc, #36]	; (8012fa0 <_vfiprintf_r+0x258>)
 8012f7c:	a904      	add	r1, sp, #16
 8012f7e:	4630      	mov	r0, r6
 8012f80:	f7fe f944 	bl	801120c <_printf_i>
 8012f84:	e7e4      	b.n	8012f50 <_vfiprintf_r+0x208>
 8012f86:	bf00      	nop
 8012f88:	0801440c 	.word	0x0801440c
 8012f8c:	0801442c 	.word	0x0801442c
 8012f90:	080143ec 	.word	0x080143ec
 8012f94:	08014394 	.word	0x08014394
 8012f98:	0801439e 	.word	0x0801439e
 8012f9c:	08010cc5 	.word	0x08010cc5
 8012fa0:	08012d25 	.word	0x08012d25
 8012fa4:	0801439a 	.word	0x0801439a

08012fa8 <__swbuf_r>:
 8012fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012faa:	460e      	mov	r6, r1
 8012fac:	4614      	mov	r4, r2
 8012fae:	4605      	mov	r5, r0
 8012fb0:	b118      	cbz	r0, 8012fba <__swbuf_r+0x12>
 8012fb2:	6983      	ldr	r3, [r0, #24]
 8012fb4:	b90b      	cbnz	r3, 8012fba <__swbuf_r+0x12>
 8012fb6:	f000 f9e7 	bl	8013388 <__sinit>
 8012fba:	4b21      	ldr	r3, [pc, #132]	; (8013040 <__swbuf_r+0x98>)
 8012fbc:	429c      	cmp	r4, r3
 8012fbe:	d12b      	bne.n	8013018 <__swbuf_r+0x70>
 8012fc0:	686c      	ldr	r4, [r5, #4]
 8012fc2:	69a3      	ldr	r3, [r4, #24]
 8012fc4:	60a3      	str	r3, [r4, #8]
 8012fc6:	89a3      	ldrh	r3, [r4, #12]
 8012fc8:	071a      	lsls	r2, r3, #28
 8012fca:	d52f      	bpl.n	801302c <__swbuf_r+0x84>
 8012fcc:	6923      	ldr	r3, [r4, #16]
 8012fce:	b36b      	cbz	r3, 801302c <__swbuf_r+0x84>
 8012fd0:	6923      	ldr	r3, [r4, #16]
 8012fd2:	6820      	ldr	r0, [r4, #0]
 8012fd4:	1ac0      	subs	r0, r0, r3
 8012fd6:	6963      	ldr	r3, [r4, #20]
 8012fd8:	b2f6      	uxtb	r6, r6
 8012fda:	4283      	cmp	r3, r0
 8012fdc:	4637      	mov	r7, r6
 8012fde:	dc04      	bgt.n	8012fea <__swbuf_r+0x42>
 8012fe0:	4621      	mov	r1, r4
 8012fe2:	4628      	mov	r0, r5
 8012fe4:	f000 f93c 	bl	8013260 <_fflush_r>
 8012fe8:	bb30      	cbnz	r0, 8013038 <__swbuf_r+0x90>
 8012fea:	68a3      	ldr	r3, [r4, #8]
 8012fec:	3b01      	subs	r3, #1
 8012fee:	60a3      	str	r3, [r4, #8]
 8012ff0:	6823      	ldr	r3, [r4, #0]
 8012ff2:	1c5a      	adds	r2, r3, #1
 8012ff4:	6022      	str	r2, [r4, #0]
 8012ff6:	701e      	strb	r6, [r3, #0]
 8012ff8:	6963      	ldr	r3, [r4, #20]
 8012ffa:	3001      	adds	r0, #1
 8012ffc:	4283      	cmp	r3, r0
 8012ffe:	d004      	beq.n	801300a <__swbuf_r+0x62>
 8013000:	89a3      	ldrh	r3, [r4, #12]
 8013002:	07db      	lsls	r3, r3, #31
 8013004:	d506      	bpl.n	8013014 <__swbuf_r+0x6c>
 8013006:	2e0a      	cmp	r6, #10
 8013008:	d104      	bne.n	8013014 <__swbuf_r+0x6c>
 801300a:	4621      	mov	r1, r4
 801300c:	4628      	mov	r0, r5
 801300e:	f000 f927 	bl	8013260 <_fflush_r>
 8013012:	b988      	cbnz	r0, 8013038 <__swbuf_r+0x90>
 8013014:	4638      	mov	r0, r7
 8013016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013018:	4b0a      	ldr	r3, [pc, #40]	; (8013044 <__swbuf_r+0x9c>)
 801301a:	429c      	cmp	r4, r3
 801301c:	d101      	bne.n	8013022 <__swbuf_r+0x7a>
 801301e:	68ac      	ldr	r4, [r5, #8]
 8013020:	e7cf      	b.n	8012fc2 <__swbuf_r+0x1a>
 8013022:	4b09      	ldr	r3, [pc, #36]	; (8013048 <__swbuf_r+0xa0>)
 8013024:	429c      	cmp	r4, r3
 8013026:	bf08      	it	eq
 8013028:	68ec      	ldreq	r4, [r5, #12]
 801302a:	e7ca      	b.n	8012fc2 <__swbuf_r+0x1a>
 801302c:	4621      	mov	r1, r4
 801302e:	4628      	mov	r0, r5
 8013030:	f000 f81a 	bl	8013068 <__swsetup_r>
 8013034:	2800      	cmp	r0, #0
 8013036:	d0cb      	beq.n	8012fd0 <__swbuf_r+0x28>
 8013038:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801303c:	e7ea      	b.n	8013014 <__swbuf_r+0x6c>
 801303e:	bf00      	nop
 8013040:	0801440c 	.word	0x0801440c
 8013044:	0801442c 	.word	0x0801442c
 8013048:	080143ec 	.word	0x080143ec

0801304c <__ascii_wctomb>:
 801304c:	b149      	cbz	r1, 8013062 <__ascii_wctomb+0x16>
 801304e:	2aff      	cmp	r2, #255	; 0xff
 8013050:	bf85      	ittet	hi
 8013052:	238a      	movhi	r3, #138	; 0x8a
 8013054:	6003      	strhi	r3, [r0, #0]
 8013056:	700a      	strbls	r2, [r1, #0]
 8013058:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801305c:	bf98      	it	ls
 801305e:	2001      	movls	r0, #1
 8013060:	4770      	bx	lr
 8013062:	4608      	mov	r0, r1
 8013064:	4770      	bx	lr
	...

08013068 <__swsetup_r>:
 8013068:	4b32      	ldr	r3, [pc, #200]	; (8013134 <__swsetup_r+0xcc>)
 801306a:	b570      	push	{r4, r5, r6, lr}
 801306c:	681d      	ldr	r5, [r3, #0]
 801306e:	4606      	mov	r6, r0
 8013070:	460c      	mov	r4, r1
 8013072:	b125      	cbz	r5, 801307e <__swsetup_r+0x16>
 8013074:	69ab      	ldr	r3, [r5, #24]
 8013076:	b913      	cbnz	r3, 801307e <__swsetup_r+0x16>
 8013078:	4628      	mov	r0, r5
 801307a:	f000 f985 	bl	8013388 <__sinit>
 801307e:	4b2e      	ldr	r3, [pc, #184]	; (8013138 <__swsetup_r+0xd0>)
 8013080:	429c      	cmp	r4, r3
 8013082:	d10f      	bne.n	80130a4 <__swsetup_r+0x3c>
 8013084:	686c      	ldr	r4, [r5, #4]
 8013086:	89a3      	ldrh	r3, [r4, #12]
 8013088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801308c:	0719      	lsls	r1, r3, #28
 801308e:	d42c      	bmi.n	80130ea <__swsetup_r+0x82>
 8013090:	06dd      	lsls	r5, r3, #27
 8013092:	d411      	bmi.n	80130b8 <__swsetup_r+0x50>
 8013094:	2309      	movs	r3, #9
 8013096:	6033      	str	r3, [r6, #0]
 8013098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801309c:	81a3      	strh	r3, [r4, #12]
 801309e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130a2:	e03e      	b.n	8013122 <__swsetup_r+0xba>
 80130a4:	4b25      	ldr	r3, [pc, #148]	; (801313c <__swsetup_r+0xd4>)
 80130a6:	429c      	cmp	r4, r3
 80130a8:	d101      	bne.n	80130ae <__swsetup_r+0x46>
 80130aa:	68ac      	ldr	r4, [r5, #8]
 80130ac:	e7eb      	b.n	8013086 <__swsetup_r+0x1e>
 80130ae:	4b24      	ldr	r3, [pc, #144]	; (8013140 <__swsetup_r+0xd8>)
 80130b0:	429c      	cmp	r4, r3
 80130b2:	bf08      	it	eq
 80130b4:	68ec      	ldreq	r4, [r5, #12]
 80130b6:	e7e6      	b.n	8013086 <__swsetup_r+0x1e>
 80130b8:	0758      	lsls	r0, r3, #29
 80130ba:	d512      	bpl.n	80130e2 <__swsetup_r+0x7a>
 80130bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130be:	b141      	cbz	r1, 80130d2 <__swsetup_r+0x6a>
 80130c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130c4:	4299      	cmp	r1, r3
 80130c6:	d002      	beq.n	80130ce <__swsetup_r+0x66>
 80130c8:	4630      	mov	r0, r6
 80130ca:	f7fd fcb1 	bl	8010a30 <_free_r>
 80130ce:	2300      	movs	r3, #0
 80130d0:	6363      	str	r3, [r4, #52]	; 0x34
 80130d2:	89a3      	ldrh	r3, [r4, #12]
 80130d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80130d8:	81a3      	strh	r3, [r4, #12]
 80130da:	2300      	movs	r3, #0
 80130dc:	6063      	str	r3, [r4, #4]
 80130de:	6923      	ldr	r3, [r4, #16]
 80130e0:	6023      	str	r3, [r4, #0]
 80130e2:	89a3      	ldrh	r3, [r4, #12]
 80130e4:	f043 0308 	orr.w	r3, r3, #8
 80130e8:	81a3      	strh	r3, [r4, #12]
 80130ea:	6923      	ldr	r3, [r4, #16]
 80130ec:	b94b      	cbnz	r3, 8013102 <__swsetup_r+0x9a>
 80130ee:	89a3      	ldrh	r3, [r4, #12]
 80130f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80130f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130f8:	d003      	beq.n	8013102 <__swsetup_r+0x9a>
 80130fa:	4621      	mov	r1, r4
 80130fc:	4630      	mov	r0, r6
 80130fe:	f000 fa05 	bl	801350c <__smakebuf_r>
 8013102:	89a0      	ldrh	r0, [r4, #12]
 8013104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013108:	f010 0301 	ands.w	r3, r0, #1
 801310c:	d00a      	beq.n	8013124 <__swsetup_r+0xbc>
 801310e:	2300      	movs	r3, #0
 8013110:	60a3      	str	r3, [r4, #8]
 8013112:	6963      	ldr	r3, [r4, #20]
 8013114:	425b      	negs	r3, r3
 8013116:	61a3      	str	r3, [r4, #24]
 8013118:	6923      	ldr	r3, [r4, #16]
 801311a:	b943      	cbnz	r3, 801312e <__swsetup_r+0xc6>
 801311c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013120:	d1ba      	bne.n	8013098 <__swsetup_r+0x30>
 8013122:	bd70      	pop	{r4, r5, r6, pc}
 8013124:	0781      	lsls	r1, r0, #30
 8013126:	bf58      	it	pl
 8013128:	6963      	ldrpl	r3, [r4, #20]
 801312a:	60a3      	str	r3, [r4, #8]
 801312c:	e7f4      	b.n	8013118 <__swsetup_r+0xb0>
 801312e:	2000      	movs	r0, #0
 8013130:	e7f7      	b.n	8013122 <__swsetup_r+0xba>
 8013132:	bf00      	nop
 8013134:	20000104 	.word	0x20000104
 8013138:	0801440c 	.word	0x0801440c
 801313c:	0801442c 	.word	0x0801442c
 8013140:	080143ec 	.word	0x080143ec

08013144 <abort>:
 8013144:	b508      	push	{r3, lr}
 8013146:	2006      	movs	r0, #6
 8013148:	f000 fa50 	bl	80135ec <raise>
 801314c:	2001      	movs	r0, #1
 801314e:	f7f1 f9ff 	bl	8004550 <_exit>
	...

08013154 <__sflush_r>:
 8013154:	898a      	ldrh	r2, [r1, #12]
 8013156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801315a:	4605      	mov	r5, r0
 801315c:	0710      	lsls	r0, r2, #28
 801315e:	460c      	mov	r4, r1
 8013160:	d458      	bmi.n	8013214 <__sflush_r+0xc0>
 8013162:	684b      	ldr	r3, [r1, #4]
 8013164:	2b00      	cmp	r3, #0
 8013166:	dc05      	bgt.n	8013174 <__sflush_r+0x20>
 8013168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801316a:	2b00      	cmp	r3, #0
 801316c:	dc02      	bgt.n	8013174 <__sflush_r+0x20>
 801316e:	2000      	movs	r0, #0
 8013170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013176:	2e00      	cmp	r6, #0
 8013178:	d0f9      	beq.n	801316e <__sflush_r+0x1a>
 801317a:	2300      	movs	r3, #0
 801317c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013180:	682f      	ldr	r7, [r5, #0]
 8013182:	602b      	str	r3, [r5, #0]
 8013184:	d032      	beq.n	80131ec <__sflush_r+0x98>
 8013186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013188:	89a3      	ldrh	r3, [r4, #12]
 801318a:	075a      	lsls	r2, r3, #29
 801318c:	d505      	bpl.n	801319a <__sflush_r+0x46>
 801318e:	6863      	ldr	r3, [r4, #4]
 8013190:	1ac0      	subs	r0, r0, r3
 8013192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013194:	b10b      	cbz	r3, 801319a <__sflush_r+0x46>
 8013196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013198:	1ac0      	subs	r0, r0, r3
 801319a:	2300      	movs	r3, #0
 801319c:	4602      	mov	r2, r0
 801319e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131a0:	6a21      	ldr	r1, [r4, #32]
 80131a2:	4628      	mov	r0, r5
 80131a4:	47b0      	blx	r6
 80131a6:	1c43      	adds	r3, r0, #1
 80131a8:	89a3      	ldrh	r3, [r4, #12]
 80131aa:	d106      	bne.n	80131ba <__sflush_r+0x66>
 80131ac:	6829      	ldr	r1, [r5, #0]
 80131ae:	291d      	cmp	r1, #29
 80131b0:	d82c      	bhi.n	801320c <__sflush_r+0xb8>
 80131b2:	4a2a      	ldr	r2, [pc, #168]	; (801325c <__sflush_r+0x108>)
 80131b4:	40ca      	lsrs	r2, r1
 80131b6:	07d6      	lsls	r6, r2, #31
 80131b8:	d528      	bpl.n	801320c <__sflush_r+0xb8>
 80131ba:	2200      	movs	r2, #0
 80131bc:	6062      	str	r2, [r4, #4]
 80131be:	04d9      	lsls	r1, r3, #19
 80131c0:	6922      	ldr	r2, [r4, #16]
 80131c2:	6022      	str	r2, [r4, #0]
 80131c4:	d504      	bpl.n	80131d0 <__sflush_r+0x7c>
 80131c6:	1c42      	adds	r2, r0, #1
 80131c8:	d101      	bne.n	80131ce <__sflush_r+0x7a>
 80131ca:	682b      	ldr	r3, [r5, #0]
 80131cc:	b903      	cbnz	r3, 80131d0 <__sflush_r+0x7c>
 80131ce:	6560      	str	r0, [r4, #84]	; 0x54
 80131d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131d2:	602f      	str	r7, [r5, #0]
 80131d4:	2900      	cmp	r1, #0
 80131d6:	d0ca      	beq.n	801316e <__sflush_r+0x1a>
 80131d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131dc:	4299      	cmp	r1, r3
 80131de:	d002      	beq.n	80131e6 <__sflush_r+0x92>
 80131e0:	4628      	mov	r0, r5
 80131e2:	f7fd fc25 	bl	8010a30 <_free_r>
 80131e6:	2000      	movs	r0, #0
 80131e8:	6360      	str	r0, [r4, #52]	; 0x34
 80131ea:	e7c1      	b.n	8013170 <__sflush_r+0x1c>
 80131ec:	6a21      	ldr	r1, [r4, #32]
 80131ee:	2301      	movs	r3, #1
 80131f0:	4628      	mov	r0, r5
 80131f2:	47b0      	blx	r6
 80131f4:	1c41      	adds	r1, r0, #1
 80131f6:	d1c7      	bne.n	8013188 <__sflush_r+0x34>
 80131f8:	682b      	ldr	r3, [r5, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d0c4      	beq.n	8013188 <__sflush_r+0x34>
 80131fe:	2b1d      	cmp	r3, #29
 8013200:	d001      	beq.n	8013206 <__sflush_r+0xb2>
 8013202:	2b16      	cmp	r3, #22
 8013204:	d101      	bne.n	801320a <__sflush_r+0xb6>
 8013206:	602f      	str	r7, [r5, #0]
 8013208:	e7b1      	b.n	801316e <__sflush_r+0x1a>
 801320a:	89a3      	ldrh	r3, [r4, #12]
 801320c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013210:	81a3      	strh	r3, [r4, #12]
 8013212:	e7ad      	b.n	8013170 <__sflush_r+0x1c>
 8013214:	690f      	ldr	r7, [r1, #16]
 8013216:	2f00      	cmp	r7, #0
 8013218:	d0a9      	beq.n	801316e <__sflush_r+0x1a>
 801321a:	0793      	lsls	r3, r2, #30
 801321c:	680e      	ldr	r6, [r1, #0]
 801321e:	bf08      	it	eq
 8013220:	694b      	ldreq	r3, [r1, #20]
 8013222:	600f      	str	r7, [r1, #0]
 8013224:	bf18      	it	ne
 8013226:	2300      	movne	r3, #0
 8013228:	eba6 0807 	sub.w	r8, r6, r7
 801322c:	608b      	str	r3, [r1, #8]
 801322e:	f1b8 0f00 	cmp.w	r8, #0
 8013232:	dd9c      	ble.n	801316e <__sflush_r+0x1a>
 8013234:	6a21      	ldr	r1, [r4, #32]
 8013236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013238:	4643      	mov	r3, r8
 801323a:	463a      	mov	r2, r7
 801323c:	4628      	mov	r0, r5
 801323e:	47b0      	blx	r6
 8013240:	2800      	cmp	r0, #0
 8013242:	dc06      	bgt.n	8013252 <__sflush_r+0xfe>
 8013244:	89a3      	ldrh	r3, [r4, #12]
 8013246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801324a:	81a3      	strh	r3, [r4, #12]
 801324c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013250:	e78e      	b.n	8013170 <__sflush_r+0x1c>
 8013252:	4407      	add	r7, r0
 8013254:	eba8 0800 	sub.w	r8, r8, r0
 8013258:	e7e9      	b.n	801322e <__sflush_r+0xda>
 801325a:	bf00      	nop
 801325c:	20400001 	.word	0x20400001

08013260 <_fflush_r>:
 8013260:	b538      	push	{r3, r4, r5, lr}
 8013262:	690b      	ldr	r3, [r1, #16]
 8013264:	4605      	mov	r5, r0
 8013266:	460c      	mov	r4, r1
 8013268:	b913      	cbnz	r3, 8013270 <_fflush_r+0x10>
 801326a:	2500      	movs	r5, #0
 801326c:	4628      	mov	r0, r5
 801326e:	bd38      	pop	{r3, r4, r5, pc}
 8013270:	b118      	cbz	r0, 801327a <_fflush_r+0x1a>
 8013272:	6983      	ldr	r3, [r0, #24]
 8013274:	b90b      	cbnz	r3, 801327a <_fflush_r+0x1a>
 8013276:	f000 f887 	bl	8013388 <__sinit>
 801327a:	4b14      	ldr	r3, [pc, #80]	; (80132cc <_fflush_r+0x6c>)
 801327c:	429c      	cmp	r4, r3
 801327e:	d11b      	bne.n	80132b8 <_fflush_r+0x58>
 8013280:	686c      	ldr	r4, [r5, #4]
 8013282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d0ef      	beq.n	801326a <_fflush_r+0xa>
 801328a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801328c:	07d0      	lsls	r0, r2, #31
 801328e:	d404      	bmi.n	801329a <_fflush_r+0x3a>
 8013290:	0599      	lsls	r1, r3, #22
 8013292:	d402      	bmi.n	801329a <_fflush_r+0x3a>
 8013294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013296:	f7ff fcda 	bl	8012c4e <__retarget_lock_acquire_recursive>
 801329a:	4628      	mov	r0, r5
 801329c:	4621      	mov	r1, r4
 801329e:	f7ff ff59 	bl	8013154 <__sflush_r>
 80132a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132a4:	07da      	lsls	r2, r3, #31
 80132a6:	4605      	mov	r5, r0
 80132a8:	d4e0      	bmi.n	801326c <_fflush_r+0xc>
 80132aa:	89a3      	ldrh	r3, [r4, #12]
 80132ac:	059b      	lsls	r3, r3, #22
 80132ae:	d4dd      	bmi.n	801326c <_fflush_r+0xc>
 80132b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132b2:	f7ff fccd 	bl	8012c50 <__retarget_lock_release_recursive>
 80132b6:	e7d9      	b.n	801326c <_fflush_r+0xc>
 80132b8:	4b05      	ldr	r3, [pc, #20]	; (80132d0 <_fflush_r+0x70>)
 80132ba:	429c      	cmp	r4, r3
 80132bc:	d101      	bne.n	80132c2 <_fflush_r+0x62>
 80132be:	68ac      	ldr	r4, [r5, #8]
 80132c0:	e7df      	b.n	8013282 <_fflush_r+0x22>
 80132c2:	4b04      	ldr	r3, [pc, #16]	; (80132d4 <_fflush_r+0x74>)
 80132c4:	429c      	cmp	r4, r3
 80132c6:	bf08      	it	eq
 80132c8:	68ec      	ldreq	r4, [r5, #12]
 80132ca:	e7da      	b.n	8013282 <_fflush_r+0x22>
 80132cc:	0801440c 	.word	0x0801440c
 80132d0:	0801442c 	.word	0x0801442c
 80132d4:	080143ec 	.word	0x080143ec

080132d8 <std>:
 80132d8:	2300      	movs	r3, #0
 80132da:	b510      	push	{r4, lr}
 80132dc:	4604      	mov	r4, r0
 80132de:	e9c0 3300 	strd	r3, r3, [r0]
 80132e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80132e6:	6083      	str	r3, [r0, #8]
 80132e8:	8181      	strh	r1, [r0, #12]
 80132ea:	6643      	str	r3, [r0, #100]	; 0x64
 80132ec:	81c2      	strh	r2, [r0, #14]
 80132ee:	6183      	str	r3, [r0, #24]
 80132f0:	4619      	mov	r1, r3
 80132f2:	2208      	movs	r2, #8
 80132f4:	305c      	adds	r0, #92	; 0x5c
 80132f6:	f7fd fb93 	bl	8010a20 <memset>
 80132fa:	4b05      	ldr	r3, [pc, #20]	; (8013310 <std+0x38>)
 80132fc:	6263      	str	r3, [r4, #36]	; 0x24
 80132fe:	4b05      	ldr	r3, [pc, #20]	; (8013314 <std+0x3c>)
 8013300:	62a3      	str	r3, [r4, #40]	; 0x28
 8013302:	4b05      	ldr	r3, [pc, #20]	; (8013318 <std+0x40>)
 8013304:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013306:	4b05      	ldr	r3, [pc, #20]	; (801331c <std+0x44>)
 8013308:	6224      	str	r4, [r4, #32]
 801330a:	6323      	str	r3, [r4, #48]	; 0x30
 801330c:	bd10      	pop	{r4, pc}
 801330e:	bf00      	nop
 8013310:	08013625 	.word	0x08013625
 8013314:	08013647 	.word	0x08013647
 8013318:	0801367f 	.word	0x0801367f
 801331c:	080136a3 	.word	0x080136a3

08013320 <_cleanup_r>:
 8013320:	4901      	ldr	r1, [pc, #4]	; (8013328 <_cleanup_r+0x8>)
 8013322:	f000 b8af 	b.w	8013484 <_fwalk_reent>
 8013326:	bf00      	nop
 8013328:	08013261 	.word	0x08013261

0801332c <__sfmoreglue>:
 801332c:	b570      	push	{r4, r5, r6, lr}
 801332e:	1e4a      	subs	r2, r1, #1
 8013330:	2568      	movs	r5, #104	; 0x68
 8013332:	4355      	muls	r5, r2
 8013334:	460e      	mov	r6, r1
 8013336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801333a:	f7fd fbc9 	bl	8010ad0 <_malloc_r>
 801333e:	4604      	mov	r4, r0
 8013340:	b140      	cbz	r0, 8013354 <__sfmoreglue+0x28>
 8013342:	2100      	movs	r1, #0
 8013344:	e9c0 1600 	strd	r1, r6, [r0]
 8013348:	300c      	adds	r0, #12
 801334a:	60a0      	str	r0, [r4, #8]
 801334c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013350:	f7fd fb66 	bl	8010a20 <memset>
 8013354:	4620      	mov	r0, r4
 8013356:	bd70      	pop	{r4, r5, r6, pc}

08013358 <__sfp_lock_acquire>:
 8013358:	4801      	ldr	r0, [pc, #4]	; (8013360 <__sfp_lock_acquire+0x8>)
 801335a:	f7ff bc78 	b.w	8012c4e <__retarget_lock_acquire_recursive>
 801335e:	bf00      	nop
 8013360:	20001634 	.word	0x20001634

08013364 <__sfp_lock_release>:
 8013364:	4801      	ldr	r0, [pc, #4]	; (801336c <__sfp_lock_release+0x8>)
 8013366:	f7ff bc73 	b.w	8012c50 <__retarget_lock_release_recursive>
 801336a:	bf00      	nop
 801336c:	20001634 	.word	0x20001634

08013370 <__sinit_lock_acquire>:
 8013370:	4801      	ldr	r0, [pc, #4]	; (8013378 <__sinit_lock_acquire+0x8>)
 8013372:	f7ff bc6c 	b.w	8012c4e <__retarget_lock_acquire_recursive>
 8013376:	bf00      	nop
 8013378:	2000162f 	.word	0x2000162f

0801337c <__sinit_lock_release>:
 801337c:	4801      	ldr	r0, [pc, #4]	; (8013384 <__sinit_lock_release+0x8>)
 801337e:	f7ff bc67 	b.w	8012c50 <__retarget_lock_release_recursive>
 8013382:	bf00      	nop
 8013384:	2000162f 	.word	0x2000162f

08013388 <__sinit>:
 8013388:	b510      	push	{r4, lr}
 801338a:	4604      	mov	r4, r0
 801338c:	f7ff fff0 	bl	8013370 <__sinit_lock_acquire>
 8013390:	69a3      	ldr	r3, [r4, #24]
 8013392:	b11b      	cbz	r3, 801339c <__sinit+0x14>
 8013394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013398:	f7ff bff0 	b.w	801337c <__sinit_lock_release>
 801339c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80133a0:	6523      	str	r3, [r4, #80]	; 0x50
 80133a2:	4b13      	ldr	r3, [pc, #76]	; (80133f0 <__sinit+0x68>)
 80133a4:	4a13      	ldr	r2, [pc, #76]	; (80133f4 <__sinit+0x6c>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80133aa:	42a3      	cmp	r3, r4
 80133ac:	bf04      	itt	eq
 80133ae:	2301      	moveq	r3, #1
 80133b0:	61a3      	streq	r3, [r4, #24]
 80133b2:	4620      	mov	r0, r4
 80133b4:	f000 f820 	bl	80133f8 <__sfp>
 80133b8:	6060      	str	r0, [r4, #4]
 80133ba:	4620      	mov	r0, r4
 80133bc:	f000 f81c 	bl	80133f8 <__sfp>
 80133c0:	60a0      	str	r0, [r4, #8]
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 f818 	bl	80133f8 <__sfp>
 80133c8:	2200      	movs	r2, #0
 80133ca:	60e0      	str	r0, [r4, #12]
 80133cc:	2104      	movs	r1, #4
 80133ce:	6860      	ldr	r0, [r4, #4]
 80133d0:	f7ff ff82 	bl	80132d8 <std>
 80133d4:	68a0      	ldr	r0, [r4, #8]
 80133d6:	2201      	movs	r2, #1
 80133d8:	2109      	movs	r1, #9
 80133da:	f7ff ff7d 	bl	80132d8 <std>
 80133de:	68e0      	ldr	r0, [r4, #12]
 80133e0:	2202      	movs	r2, #2
 80133e2:	2112      	movs	r1, #18
 80133e4:	f7ff ff78 	bl	80132d8 <std>
 80133e8:	2301      	movs	r3, #1
 80133ea:	61a3      	str	r3, [r4, #24]
 80133ec:	e7d2      	b.n	8013394 <__sinit+0xc>
 80133ee:	bf00      	nop
 80133f0:	08014168 	.word	0x08014168
 80133f4:	08013321 	.word	0x08013321

080133f8 <__sfp>:
 80133f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133fa:	4607      	mov	r7, r0
 80133fc:	f7ff ffac 	bl	8013358 <__sfp_lock_acquire>
 8013400:	4b1e      	ldr	r3, [pc, #120]	; (801347c <__sfp+0x84>)
 8013402:	681e      	ldr	r6, [r3, #0]
 8013404:	69b3      	ldr	r3, [r6, #24]
 8013406:	b913      	cbnz	r3, 801340e <__sfp+0x16>
 8013408:	4630      	mov	r0, r6
 801340a:	f7ff ffbd 	bl	8013388 <__sinit>
 801340e:	3648      	adds	r6, #72	; 0x48
 8013410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013414:	3b01      	subs	r3, #1
 8013416:	d503      	bpl.n	8013420 <__sfp+0x28>
 8013418:	6833      	ldr	r3, [r6, #0]
 801341a:	b30b      	cbz	r3, 8013460 <__sfp+0x68>
 801341c:	6836      	ldr	r6, [r6, #0]
 801341e:	e7f7      	b.n	8013410 <__sfp+0x18>
 8013420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013424:	b9d5      	cbnz	r5, 801345c <__sfp+0x64>
 8013426:	4b16      	ldr	r3, [pc, #88]	; (8013480 <__sfp+0x88>)
 8013428:	60e3      	str	r3, [r4, #12]
 801342a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801342e:	6665      	str	r5, [r4, #100]	; 0x64
 8013430:	f7ff fc0c 	bl	8012c4c <__retarget_lock_init_recursive>
 8013434:	f7ff ff96 	bl	8013364 <__sfp_lock_release>
 8013438:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801343c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013440:	6025      	str	r5, [r4, #0]
 8013442:	61a5      	str	r5, [r4, #24]
 8013444:	2208      	movs	r2, #8
 8013446:	4629      	mov	r1, r5
 8013448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801344c:	f7fd fae8 	bl	8010a20 <memset>
 8013450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013458:	4620      	mov	r0, r4
 801345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801345c:	3468      	adds	r4, #104	; 0x68
 801345e:	e7d9      	b.n	8013414 <__sfp+0x1c>
 8013460:	2104      	movs	r1, #4
 8013462:	4638      	mov	r0, r7
 8013464:	f7ff ff62 	bl	801332c <__sfmoreglue>
 8013468:	4604      	mov	r4, r0
 801346a:	6030      	str	r0, [r6, #0]
 801346c:	2800      	cmp	r0, #0
 801346e:	d1d5      	bne.n	801341c <__sfp+0x24>
 8013470:	f7ff ff78 	bl	8013364 <__sfp_lock_release>
 8013474:	230c      	movs	r3, #12
 8013476:	603b      	str	r3, [r7, #0]
 8013478:	e7ee      	b.n	8013458 <__sfp+0x60>
 801347a:	bf00      	nop
 801347c:	08014168 	.word	0x08014168
 8013480:	ffff0001 	.word	0xffff0001

08013484 <_fwalk_reent>:
 8013484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013488:	4606      	mov	r6, r0
 801348a:	4688      	mov	r8, r1
 801348c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013490:	2700      	movs	r7, #0
 8013492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013496:	f1b9 0901 	subs.w	r9, r9, #1
 801349a:	d505      	bpl.n	80134a8 <_fwalk_reent+0x24>
 801349c:	6824      	ldr	r4, [r4, #0]
 801349e:	2c00      	cmp	r4, #0
 80134a0:	d1f7      	bne.n	8013492 <_fwalk_reent+0xe>
 80134a2:	4638      	mov	r0, r7
 80134a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134a8:	89ab      	ldrh	r3, [r5, #12]
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d907      	bls.n	80134be <_fwalk_reent+0x3a>
 80134ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134b2:	3301      	adds	r3, #1
 80134b4:	d003      	beq.n	80134be <_fwalk_reent+0x3a>
 80134b6:	4629      	mov	r1, r5
 80134b8:	4630      	mov	r0, r6
 80134ba:	47c0      	blx	r8
 80134bc:	4307      	orrs	r7, r0
 80134be:	3568      	adds	r5, #104	; 0x68
 80134c0:	e7e9      	b.n	8013496 <_fwalk_reent+0x12>

080134c2 <__swhatbuf_r>:
 80134c2:	b570      	push	{r4, r5, r6, lr}
 80134c4:	460e      	mov	r6, r1
 80134c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ca:	2900      	cmp	r1, #0
 80134cc:	b096      	sub	sp, #88	; 0x58
 80134ce:	4614      	mov	r4, r2
 80134d0:	461d      	mov	r5, r3
 80134d2:	da07      	bge.n	80134e4 <__swhatbuf_r+0x22>
 80134d4:	2300      	movs	r3, #0
 80134d6:	602b      	str	r3, [r5, #0]
 80134d8:	89b3      	ldrh	r3, [r6, #12]
 80134da:	061a      	lsls	r2, r3, #24
 80134dc:	d410      	bmi.n	8013500 <__swhatbuf_r+0x3e>
 80134de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134e2:	e00e      	b.n	8013502 <__swhatbuf_r+0x40>
 80134e4:	466a      	mov	r2, sp
 80134e6:	f000 f903 	bl	80136f0 <_fstat_r>
 80134ea:	2800      	cmp	r0, #0
 80134ec:	dbf2      	blt.n	80134d4 <__swhatbuf_r+0x12>
 80134ee:	9a01      	ldr	r2, [sp, #4]
 80134f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80134f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80134f8:	425a      	negs	r2, r3
 80134fa:	415a      	adcs	r2, r3
 80134fc:	602a      	str	r2, [r5, #0]
 80134fe:	e7ee      	b.n	80134de <__swhatbuf_r+0x1c>
 8013500:	2340      	movs	r3, #64	; 0x40
 8013502:	2000      	movs	r0, #0
 8013504:	6023      	str	r3, [r4, #0]
 8013506:	b016      	add	sp, #88	; 0x58
 8013508:	bd70      	pop	{r4, r5, r6, pc}
	...

0801350c <__smakebuf_r>:
 801350c:	898b      	ldrh	r3, [r1, #12]
 801350e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013510:	079d      	lsls	r5, r3, #30
 8013512:	4606      	mov	r6, r0
 8013514:	460c      	mov	r4, r1
 8013516:	d507      	bpl.n	8013528 <__smakebuf_r+0x1c>
 8013518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801351c:	6023      	str	r3, [r4, #0]
 801351e:	6123      	str	r3, [r4, #16]
 8013520:	2301      	movs	r3, #1
 8013522:	6163      	str	r3, [r4, #20]
 8013524:	b002      	add	sp, #8
 8013526:	bd70      	pop	{r4, r5, r6, pc}
 8013528:	ab01      	add	r3, sp, #4
 801352a:	466a      	mov	r2, sp
 801352c:	f7ff ffc9 	bl	80134c2 <__swhatbuf_r>
 8013530:	9900      	ldr	r1, [sp, #0]
 8013532:	4605      	mov	r5, r0
 8013534:	4630      	mov	r0, r6
 8013536:	f7fd facb 	bl	8010ad0 <_malloc_r>
 801353a:	b948      	cbnz	r0, 8013550 <__smakebuf_r+0x44>
 801353c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013540:	059a      	lsls	r2, r3, #22
 8013542:	d4ef      	bmi.n	8013524 <__smakebuf_r+0x18>
 8013544:	f023 0303 	bic.w	r3, r3, #3
 8013548:	f043 0302 	orr.w	r3, r3, #2
 801354c:	81a3      	strh	r3, [r4, #12]
 801354e:	e7e3      	b.n	8013518 <__smakebuf_r+0xc>
 8013550:	4b0d      	ldr	r3, [pc, #52]	; (8013588 <__smakebuf_r+0x7c>)
 8013552:	62b3      	str	r3, [r6, #40]	; 0x28
 8013554:	89a3      	ldrh	r3, [r4, #12]
 8013556:	6020      	str	r0, [r4, #0]
 8013558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801355c:	81a3      	strh	r3, [r4, #12]
 801355e:	9b00      	ldr	r3, [sp, #0]
 8013560:	6163      	str	r3, [r4, #20]
 8013562:	9b01      	ldr	r3, [sp, #4]
 8013564:	6120      	str	r0, [r4, #16]
 8013566:	b15b      	cbz	r3, 8013580 <__smakebuf_r+0x74>
 8013568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801356c:	4630      	mov	r0, r6
 801356e:	f000 f8d1 	bl	8013714 <_isatty_r>
 8013572:	b128      	cbz	r0, 8013580 <__smakebuf_r+0x74>
 8013574:	89a3      	ldrh	r3, [r4, #12]
 8013576:	f023 0303 	bic.w	r3, r3, #3
 801357a:	f043 0301 	orr.w	r3, r3, #1
 801357e:	81a3      	strh	r3, [r4, #12]
 8013580:	89a0      	ldrh	r0, [r4, #12]
 8013582:	4305      	orrs	r5, r0
 8013584:	81a5      	strh	r5, [r4, #12]
 8013586:	e7cd      	b.n	8013524 <__smakebuf_r+0x18>
 8013588:	08013321 	.word	0x08013321

0801358c <_malloc_usable_size_r>:
 801358c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013590:	1f18      	subs	r0, r3, #4
 8013592:	2b00      	cmp	r3, #0
 8013594:	bfbc      	itt	lt
 8013596:	580b      	ldrlt	r3, [r1, r0]
 8013598:	18c0      	addlt	r0, r0, r3
 801359a:	4770      	bx	lr

0801359c <_raise_r>:
 801359c:	291f      	cmp	r1, #31
 801359e:	b538      	push	{r3, r4, r5, lr}
 80135a0:	4604      	mov	r4, r0
 80135a2:	460d      	mov	r5, r1
 80135a4:	d904      	bls.n	80135b0 <_raise_r+0x14>
 80135a6:	2316      	movs	r3, #22
 80135a8:	6003      	str	r3, [r0, #0]
 80135aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135ae:	bd38      	pop	{r3, r4, r5, pc}
 80135b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80135b2:	b112      	cbz	r2, 80135ba <_raise_r+0x1e>
 80135b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80135b8:	b94b      	cbnz	r3, 80135ce <_raise_r+0x32>
 80135ba:	4620      	mov	r0, r4
 80135bc:	f000 f830 	bl	8013620 <_getpid_r>
 80135c0:	462a      	mov	r2, r5
 80135c2:	4601      	mov	r1, r0
 80135c4:	4620      	mov	r0, r4
 80135c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135ca:	f000 b817 	b.w	80135fc <_kill_r>
 80135ce:	2b01      	cmp	r3, #1
 80135d0:	d00a      	beq.n	80135e8 <_raise_r+0x4c>
 80135d2:	1c59      	adds	r1, r3, #1
 80135d4:	d103      	bne.n	80135de <_raise_r+0x42>
 80135d6:	2316      	movs	r3, #22
 80135d8:	6003      	str	r3, [r0, #0]
 80135da:	2001      	movs	r0, #1
 80135dc:	e7e7      	b.n	80135ae <_raise_r+0x12>
 80135de:	2400      	movs	r4, #0
 80135e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80135e4:	4628      	mov	r0, r5
 80135e6:	4798      	blx	r3
 80135e8:	2000      	movs	r0, #0
 80135ea:	e7e0      	b.n	80135ae <_raise_r+0x12>

080135ec <raise>:
 80135ec:	4b02      	ldr	r3, [pc, #8]	; (80135f8 <raise+0xc>)
 80135ee:	4601      	mov	r1, r0
 80135f0:	6818      	ldr	r0, [r3, #0]
 80135f2:	f7ff bfd3 	b.w	801359c <_raise_r>
 80135f6:	bf00      	nop
 80135f8:	20000104 	.word	0x20000104

080135fc <_kill_r>:
 80135fc:	b538      	push	{r3, r4, r5, lr}
 80135fe:	4d07      	ldr	r5, [pc, #28]	; (801361c <_kill_r+0x20>)
 8013600:	2300      	movs	r3, #0
 8013602:	4604      	mov	r4, r0
 8013604:	4608      	mov	r0, r1
 8013606:	4611      	mov	r1, r2
 8013608:	602b      	str	r3, [r5, #0]
 801360a:	f7f0 ff91 	bl	8004530 <_kill>
 801360e:	1c43      	adds	r3, r0, #1
 8013610:	d102      	bne.n	8013618 <_kill_r+0x1c>
 8013612:	682b      	ldr	r3, [r5, #0]
 8013614:	b103      	cbz	r3, 8013618 <_kill_r+0x1c>
 8013616:	6023      	str	r3, [r4, #0]
 8013618:	bd38      	pop	{r3, r4, r5, pc}
 801361a:	bf00      	nop
 801361c:	20001628 	.word	0x20001628

08013620 <_getpid_r>:
 8013620:	f7f0 bf7e 	b.w	8004520 <_getpid>

08013624 <__sread>:
 8013624:	b510      	push	{r4, lr}
 8013626:	460c      	mov	r4, r1
 8013628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801362c:	f000 f894 	bl	8013758 <_read_r>
 8013630:	2800      	cmp	r0, #0
 8013632:	bfab      	itete	ge
 8013634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013636:	89a3      	ldrhlt	r3, [r4, #12]
 8013638:	181b      	addge	r3, r3, r0
 801363a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801363e:	bfac      	ite	ge
 8013640:	6563      	strge	r3, [r4, #84]	; 0x54
 8013642:	81a3      	strhlt	r3, [r4, #12]
 8013644:	bd10      	pop	{r4, pc}

08013646 <__swrite>:
 8013646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801364a:	461f      	mov	r7, r3
 801364c:	898b      	ldrh	r3, [r1, #12]
 801364e:	05db      	lsls	r3, r3, #23
 8013650:	4605      	mov	r5, r0
 8013652:	460c      	mov	r4, r1
 8013654:	4616      	mov	r6, r2
 8013656:	d505      	bpl.n	8013664 <__swrite+0x1e>
 8013658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801365c:	2302      	movs	r3, #2
 801365e:	2200      	movs	r2, #0
 8013660:	f000 f868 	bl	8013734 <_lseek_r>
 8013664:	89a3      	ldrh	r3, [r4, #12]
 8013666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801366a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801366e:	81a3      	strh	r3, [r4, #12]
 8013670:	4632      	mov	r2, r6
 8013672:	463b      	mov	r3, r7
 8013674:	4628      	mov	r0, r5
 8013676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801367a:	f000 b817 	b.w	80136ac <_write_r>

0801367e <__sseek>:
 801367e:	b510      	push	{r4, lr}
 8013680:	460c      	mov	r4, r1
 8013682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013686:	f000 f855 	bl	8013734 <_lseek_r>
 801368a:	1c43      	adds	r3, r0, #1
 801368c:	89a3      	ldrh	r3, [r4, #12]
 801368e:	bf15      	itete	ne
 8013690:	6560      	strne	r0, [r4, #84]	; 0x54
 8013692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801369a:	81a3      	strheq	r3, [r4, #12]
 801369c:	bf18      	it	ne
 801369e:	81a3      	strhne	r3, [r4, #12]
 80136a0:	bd10      	pop	{r4, pc}

080136a2 <__sclose>:
 80136a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a6:	f000 b813 	b.w	80136d0 <_close_r>
	...

080136ac <_write_r>:
 80136ac:	b538      	push	{r3, r4, r5, lr}
 80136ae:	4d07      	ldr	r5, [pc, #28]	; (80136cc <_write_r+0x20>)
 80136b0:	4604      	mov	r4, r0
 80136b2:	4608      	mov	r0, r1
 80136b4:	4611      	mov	r1, r2
 80136b6:	2200      	movs	r2, #0
 80136b8:	602a      	str	r2, [r5, #0]
 80136ba:	461a      	mov	r2, r3
 80136bc:	f7f0 ff6f 	bl	800459e <_write>
 80136c0:	1c43      	adds	r3, r0, #1
 80136c2:	d102      	bne.n	80136ca <_write_r+0x1e>
 80136c4:	682b      	ldr	r3, [r5, #0]
 80136c6:	b103      	cbz	r3, 80136ca <_write_r+0x1e>
 80136c8:	6023      	str	r3, [r4, #0]
 80136ca:	bd38      	pop	{r3, r4, r5, pc}
 80136cc:	20001628 	.word	0x20001628

080136d0 <_close_r>:
 80136d0:	b538      	push	{r3, r4, r5, lr}
 80136d2:	4d06      	ldr	r5, [pc, #24]	; (80136ec <_close_r+0x1c>)
 80136d4:	2300      	movs	r3, #0
 80136d6:	4604      	mov	r4, r0
 80136d8:	4608      	mov	r0, r1
 80136da:	602b      	str	r3, [r5, #0]
 80136dc:	f7f0 ff7b 	bl	80045d6 <_close>
 80136e0:	1c43      	adds	r3, r0, #1
 80136e2:	d102      	bne.n	80136ea <_close_r+0x1a>
 80136e4:	682b      	ldr	r3, [r5, #0]
 80136e6:	b103      	cbz	r3, 80136ea <_close_r+0x1a>
 80136e8:	6023      	str	r3, [r4, #0]
 80136ea:	bd38      	pop	{r3, r4, r5, pc}
 80136ec:	20001628 	.word	0x20001628

080136f0 <_fstat_r>:
 80136f0:	b538      	push	{r3, r4, r5, lr}
 80136f2:	4d07      	ldr	r5, [pc, #28]	; (8013710 <_fstat_r+0x20>)
 80136f4:	2300      	movs	r3, #0
 80136f6:	4604      	mov	r4, r0
 80136f8:	4608      	mov	r0, r1
 80136fa:	4611      	mov	r1, r2
 80136fc:	602b      	str	r3, [r5, #0]
 80136fe:	f7f0 ff76 	bl	80045ee <_fstat>
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	d102      	bne.n	801370c <_fstat_r+0x1c>
 8013706:	682b      	ldr	r3, [r5, #0]
 8013708:	b103      	cbz	r3, 801370c <_fstat_r+0x1c>
 801370a:	6023      	str	r3, [r4, #0]
 801370c:	bd38      	pop	{r3, r4, r5, pc}
 801370e:	bf00      	nop
 8013710:	20001628 	.word	0x20001628

08013714 <_isatty_r>:
 8013714:	b538      	push	{r3, r4, r5, lr}
 8013716:	4d06      	ldr	r5, [pc, #24]	; (8013730 <_isatty_r+0x1c>)
 8013718:	2300      	movs	r3, #0
 801371a:	4604      	mov	r4, r0
 801371c:	4608      	mov	r0, r1
 801371e:	602b      	str	r3, [r5, #0]
 8013720:	f7f0 ff75 	bl	800460e <_isatty>
 8013724:	1c43      	adds	r3, r0, #1
 8013726:	d102      	bne.n	801372e <_isatty_r+0x1a>
 8013728:	682b      	ldr	r3, [r5, #0]
 801372a:	b103      	cbz	r3, 801372e <_isatty_r+0x1a>
 801372c:	6023      	str	r3, [r4, #0]
 801372e:	bd38      	pop	{r3, r4, r5, pc}
 8013730:	20001628 	.word	0x20001628

08013734 <_lseek_r>:
 8013734:	b538      	push	{r3, r4, r5, lr}
 8013736:	4d07      	ldr	r5, [pc, #28]	; (8013754 <_lseek_r+0x20>)
 8013738:	4604      	mov	r4, r0
 801373a:	4608      	mov	r0, r1
 801373c:	4611      	mov	r1, r2
 801373e:	2200      	movs	r2, #0
 8013740:	602a      	str	r2, [r5, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	f7f0 ff6e 	bl	8004624 <_lseek>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	d102      	bne.n	8013752 <_lseek_r+0x1e>
 801374c:	682b      	ldr	r3, [r5, #0]
 801374e:	b103      	cbz	r3, 8013752 <_lseek_r+0x1e>
 8013750:	6023      	str	r3, [r4, #0]
 8013752:	bd38      	pop	{r3, r4, r5, pc}
 8013754:	20001628 	.word	0x20001628

08013758 <_read_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	4d07      	ldr	r5, [pc, #28]	; (8013778 <_read_r+0x20>)
 801375c:	4604      	mov	r4, r0
 801375e:	4608      	mov	r0, r1
 8013760:	4611      	mov	r1, r2
 8013762:	2200      	movs	r2, #0
 8013764:	602a      	str	r2, [r5, #0]
 8013766:	461a      	mov	r2, r3
 8013768:	f7f0 fefc 	bl	8004564 <_read>
 801376c:	1c43      	adds	r3, r0, #1
 801376e:	d102      	bne.n	8013776 <_read_r+0x1e>
 8013770:	682b      	ldr	r3, [r5, #0]
 8013772:	b103      	cbz	r3, 8013776 <_read_r+0x1e>
 8013774:	6023      	str	r3, [r4, #0]
 8013776:	bd38      	pop	{r3, r4, r5, pc}
 8013778:	20001628 	.word	0x20001628

0801377c <_init>:
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	bf00      	nop
 8013780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013782:	bc08      	pop	{r3}
 8013784:	469e      	mov	lr, r3
 8013786:	4770      	bx	lr

08013788 <_fini>:
 8013788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801378a:	bf00      	nop
 801378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801378e:	bc08      	pop	{r3}
 8013790:	469e      	mov	lr, r3
 8013792:	4770      	bx	lr
