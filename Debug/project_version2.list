
project_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c6c  080130d8  080130d8  000230d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d44  08013d44  000302d4  2**0
                  CONTENTS
  4 .ARM          00000008  08013d44  08013d44  00023d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d4c  08013d4c  000302d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d4c  08013d4c  00023d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d50  08013d50  00023d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08013d54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  200002d8  08014028  000302d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  08014028  00031630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a944  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ff9  00000000  00000000  0005ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00060c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b78  00000000  00000000  00062a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df42  00000000  00000000  000645b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a60  00000000  00000000  000824fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab63  00000000  00000000  000a9f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154abd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b6c  00000000  00000000  00154b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080130c0 	.word	0x080130c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	080130c0 	.word	0x080130c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000f5e:	f002 fdff 	bl	8003b60 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8000f68:	f107 030f 	add.w	r3, r7, #15
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4618      	mov	r0, r3
 8000f72:	f002 fe3f 	bl	8003bf4 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 8000f80:	f107 030f 	add.w	r3, r7, #15
 8000f84:	2201      	movs	r2, #1
 8000f86:	2123      	movs	r1, #35	; 0x23
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f002 fe33 	bl	8003bf4 <GYRO_IO_Write>
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8000faa:	f002 fdd9 	bl	8003b60 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	210f      	movs	r1, #15
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fe4f 	bl	8003c58 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2124      	movs	r1, #36	; 0x24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fe41 	bl	8003c58 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2124      	movs	r1, #36	; 0x24
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fe04 	bl	8003bf4 <GYRO_IO_Write>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8001008:	f107 030f 	add.w	r3, r7, #15
 800100c:	2201      	movs	r2, #1
 800100e:	2120      	movs	r1, #32
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fdef 	bl	8003bf4 <GYRO_IO_Write>
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	2300      	movs	r3, #0
 800102e:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001030:	f107 030f 	add.w	r3, r7, #15
 8001034:	2201      	movs	r2, #1
 8001036:	2130      	movs	r1, #48	; 0x30
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fe0d 	bl	8003c58 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800103e:	f107 030e 	add.w	r3, r7, #14
 8001042:	2201      	movs	r2, #1
 8001044:	2122      	movs	r1, #34	; 0x22
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fe06 	bl	8003c58 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	121b      	asrs	r3, r3, #8
 800105c:	b25a      	sxtb	r2, r3
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25b      	sxtb	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f023 0320 	bic.w	r3, r3, #32
 8001070:	b2db      	uxtb	r3, r3
 8001072:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8001074:	88fb      	ldrh	r3, [r7, #6]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	4313      	orrs	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8001080:	f107 030f 	add.w	r3, r7, #15
 8001084:	2201      	movs	r2, #1
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fdb3 	bl	8003bf4 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800108e:	f107 030e 	add.w	r3, r7, #14
 8001092:	2201      	movs	r2, #1
 8001094:	2122      	movs	r1, #34	; 0x22
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fdac 	bl	8003bf4 <GYRO_IO_Write>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80010ae:	f107 030f 	add.w	r3, r7, #15
 80010b2:	2201      	movs	r2, #1
 80010b4:	2122      	movs	r1, #34	; 0x22
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fdce 	bl	8003c58 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10a      	bne.n	80010d8 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e00c      	b.n	80010f2 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d109      	bne.n	80010f2 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	f023 0308 	bic.w	r3, r3, #8
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80010f2:	f107 030f 	add.w	r3, r7, #15
 80010f6:	2201      	movs	r2, #1
 80010f8:	2122      	movs	r1, #34	; 0x22
 80010fa:	4618      	mov	r0, r3
 80010fc:	f002 fd7a 	bl	8003bf4 <GYRO_IO_Write>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8001112:	f107 030f 	add.w	r3, r7, #15
 8001116:	2201      	movs	r2, #1
 8001118:	2122      	movs	r1, #34	; 0x22
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fd9c 	bl	8003c58 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800112c:	b2db      	uxtb	r3, r3
 800112e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e009      	b.n	800114a <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d106      	bne.n	800114a <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	f023 0308 	bic.w	r3, r3, #8
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800114a:	f107 030f 	add.w	r3, r7, #15
 800114e:	2201      	movs	r2, #1
 8001150:	2122      	movs	r1, #34	; 0x22
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fd4e 	bl	8003bf4 <GYRO_IO_Write>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800116a:	f107 030f 	add.w	r3, r7, #15
 800116e:	2201      	movs	r2, #1
 8001170:	2121      	movs	r1, #33	; 0x21
 8001172:	4618      	mov	r0, r3
 8001174:	f002 fd70 	bl	8003c58 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800117e:	b2db      	uxtb	r3, r3
 8001180:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4313      	orrs	r3, r2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800118c:	f107 030f 	add.w	r3, r7, #15
 8001190:	2201      	movs	r2, #1
 8001192:	2121      	movs	r1, #33	; 0x21
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fd2d 	bl	8003bf4 <GYRO_IO_Write>
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80011ac:	f107 030f 	add.w	r3, r7, #15
 80011b0:	2201      	movs	r2, #1
 80011b2:	2124      	movs	r1, #36	; 0x24
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fd4f 	bl	8003c58 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f023 0310 	bic.w	r3, r3, #16
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80011ce:	f107 030f 	add.w	r3, r7, #15
 80011d2:	2201      	movs	r2, #1
 80011d4:	2124      	movs	r1, #36	; 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fd0c 	bl	8003bf4 <GYRO_IO_Write>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
 80011f0:	2300      	movs	r3, #0
 80011f2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800120c:	f107 030f 	add.w	r3, r7, #15
 8001210:	2201      	movs	r2, #1
 8001212:	2123      	movs	r1, #35	; 0x23
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fd1f 	bl	8003c58 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	2206      	movs	r2, #6
 8001220:	2128      	movs	r1, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fd18 	bl	8003c58 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d126      	bne.n	8001280 <I3G4250D_ReadXYZAngRate+0x9c>
  {
    for (i = 0; i < 3; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	e01f      	b.n	8001278 <I3G4250D_ReadXYZAngRate+0x94>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8001238:	6a3b      	ldr	r3, [r7, #32]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	3301      	adds	r3, #1
 800123e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001242:	4413      	add	r3, r2
 8001244:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001248:	b29b      	uxth	r3, r3
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	b29a      	uxth	r2, r3
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001256:	440b      	add	r3, r1
 8001258:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4413      	add	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	b21a      	sxth	r2, r3
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800126c:	440b      	add	r3, r1
 800126e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	3301      	adds	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2b02      	cmp	r3, #2
 800127c:	dddc      	ble.n	8001238 <I3G4250D_ReadXYZAngRate+0x54>
 800127e:	e025      	b.n	80012cc <I3G4250D_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	e01f      	b.n	80012c6 <I3G4250D_ReadXYZAngRate+0xe2>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800128e:	4413      	add	r3, r2
 8001290:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001294:	b29b      	uxth	r3, r3
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b29a      	uxth	r2, r3
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	3301      	adds	r3, #1
 80012a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012a4:	440b      	add	r3, r1
 80012a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	b21a      	sxth	r2, r3
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012ba:	440b      	add	r3, r1
 80012bc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3301      	adds	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	dddc      	ble.n	8001286 <I3G4250D_ReadXYZAngRate+0xa2>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d00c      	beq.n	80012f0 <I3G4250D_ReadXYZAngRate+0x10c>
 80012d6:	2b20      	cmp	r3, #32
 80012d8:	dc0d      	bgt.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <I3G4250D_ReadXYZAngRate+0x100>
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d003      	beq.n	80012ea <I3G4250D_ReadXYZAngRate+0x106>
 80012e2:	e008      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <I3G4250D_ReadXYZAngRate+0x158>)
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012e8:	e005      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <I3G4250D_ReadXYZAngRate+0x15c>)
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012ee:	e002      	b.n	80012f6 <I3G4250D_ReadXYZAngRate+0x112>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <I3G4250D_ReadXYZAngRate+0x160>)
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012f4:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	e017      	b.n	800132c <I3G4250D_ReadXYZAngRate+0x148>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001304:	4413      	add	r3, r2
 8001306:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	3301      	adds	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	2b02      	cmp	r3, #2
 8001330:	dde4      	ble.n	80012fc <I3G4250D_ReadXYZAngRate+0x118>
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	410c0000 	.word	0x410c0000
 8001340:	418c0000 	.word	0x418c0000
 8001344:	428c0000 	.word	0x428c0000

08001348 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001356:	f002 fc03 	bl	8003b60 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001360:	f107 030f 	add.w	r3, r7, #15
 8001364:	2201      	movs	r2, #1
 8001366:	2120      	movs	r1, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fc43 	bl	8003bf4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b29b      	uxth	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001378:	f107 030f 	add.w	r3, r7, #15
 800137c:	2201      	movs	r2, #1
 800137e:	2123      	movs	r1, #35	; 0x23
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fc37 	bl	8003bf4 <GYRO_IO_Write>
}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80013a2:	f002 fbdd 	bl	8003b60 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80013a6:	1dfb      	adds	r3, r7, #7
 80013a8:	2201      	movs	r2, #1
 80013aa:	210f      	movs	r1, #15
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fc53 	bl	8003c58 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	2201      	movs	r2, #1
 80013c6:	2124      	movs	r1, #36	; 0x24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fc45 	bl	8003c58 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	2201      	movs	r2, #1
 80013dc:	2124      	movs	r1, #36	; 0x24
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fc08 	bl	8003bf4 <GYRO_IO_Write>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001400:	f107 030f 	add.w	r3, r7, #15
 8001404:	2201      	movs	r2, #1
 8001406:	2120      	movs	r1, #32
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fbf3 	bl	8003bf4 <GYRO_IO_Write>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	2300      	movs	r3, #0
 8001426:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001428:	f107 030f 	add.w	r3, r7, #15
 800142c:	2201      	movs	r2, #1
 800142e:	2130      	movs	r1, #48	; 0x30
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fc11 	bl	8003c58 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001436:	f107 030e 	add.w	r3, r7, #14
 800143a:	2201      	movs	r2, #1
 800143c:	2122      	movs	r1, #34	; 0x22
 800143e:	4618      	mov	r0, r3
 8001440:	f002 fc0a 	bl	8003c58 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800144a:	b2db      	uxtb	r3, r3
 800144c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	121b      	asrs	r3, r3, #8
 8001454:	b25a      	sxtb	r2, r3
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	f023 0320 	bic.w	r3, r3, #32
 8001468:	b2db      	uxtb	r3, r3
 800146a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	4313      	orrs	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001478:	f107 030f 	add.w	r3, r7, #15
 800147c:	2201      	movs	r2, #1
 800147e:	2130      	movs	r1, #48	; 0x30
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fbb7 	bl	8003bf4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001486:	f107 030e 	add.w	r3, r7, #14
 800148a:	2201      	movs	r2, #1
 800148c:	2122      	movs	r1, #34	; 0x22
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fbb0 	bl	8003bf4 <GYRO_IO_Write>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80014a6:	f107 030f 	add.w	r3, r7, #15
 80014aa:	2201      	movs	r2, #1
 80014ac:	2122      	movs	r1, #34	; 0x22
 80014ae:	4618      	mov	r0, r3
 80014b0:	f002 fbd2 	bl	8003c58 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10a      	bne.n	80014d0 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e00c      	b.n	80014ea <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d109      	bne.n	80014ea <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	f023 0308 	bic.w	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80014ea:	f107 030f 	add.w	r3, r7, #15
 80014ee:	2201      	movs	r2, #1
 80014f0:	2122      	movs	r1, #34	; 0x22
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fb7e 	bl	8003bf4 <GYRO_IO_Write>
}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800150a:	f107 030f 	add.w	r3, r7, #15
 800150e:	2201      	movs	r2, #1
 8001510:	2122      	movs	r1, #34	; 0x22
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fba0 	bl	8003c58 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001524:	b2db      	uxtb	r3, r3
 8001526:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e009      	b.n	8001542 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	f023 0308 	bic.w	r3, r3, #8
 800153a:	b2db      	uxtb	r3, r3
 800153c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001542:	f107 030f 	add.w	r3, r7, #15
 8001546:	2201      	movs	r2, #1
 8001548:	2122      	movs	r1, #34	; 0x22
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fb52 	bl	8003bf4 <GYRO_IO_Write>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001562:	f107 030f 	add.w	r3, r7, #15
 8001566:	2201      	movs	r2, #1
 8001568:	2121      	movs	r1, #33	; 0x21
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fb74 	bl	8003c58 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001576:	b2db      	uxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800157a:	7bfa      	ldrb	r2, [r7, #15]
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001584:	f107 030f 	add.w	r3, r7, #15
 8001588:	2201      	movs	r2, #1
 800158a:	2121      	movs	r1, #33	; 0x21
 800158c:	4618      	mov	r0, r3
 800158e:	f002 fb31 	bl	8003bf4 <GYRO_IO_Write>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80015a4:	f107 030f 	add.w	r3, r7, #15
 80015a8:	2201      	movs	r2, #1
 80015aa:	2124      	movs	r1, #36	; 0x24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fb53 	bl	8003c58 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	f023 0310 	bic.w	r3, r3, #16
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80015c6:	f107 030f 	add.w	r3, r7, #15
 80015ca:	2201      	movs	r2, #1
 80015cc:	2124      	movs	r1, #36	; 0x24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fb10 	bl	8003bf4 <GYRO_IO_Write>
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	2300      	movs	r3, #0
 80015ea:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001604:	f107 030f 	add.w	r3, r7, #15
 8001608:	2201      	movs	r2, #1
 800160a:	2123      	movs	r1, #35	; 0x23
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fb23 	bl	8003c58 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001612:	f107 0318 	add.w	r3, r7, #24
 8001616:	2206      	movs	r2, #6
 8001618:	2128      	movs	r1, #40	; 0x28
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fb1c 	bl	8003c58 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d126      	bne.n	8001678 <L3GD20_ReadXYZAngRate+0x9c>
  {
    for(i=0; i<3; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	e01f      	b.n	8001670 <L3GD20_ReadXYZAngRate+0x94>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	3301      	adds	r3, #1
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001640:	b29b      	uxth	r3, r3
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b29a      	uxth	r2, r3
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800164e:	440b      	add	r3, r1
 8001650:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001654:	b29b      	uxth	r3, r3
 8001656:	4413      	add	r3, r2
 8001658:	b29b      	uxth	r3, r3
 800165a:	b21a      	sxth	r2, r3
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001664:	440b      	add	r3, r1
 8001666:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3301      	adds	r3, #1
 800166e:	623b      	str	r3, [r7, #32]
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	2b02      	cmp	r3, #2
 8001674:	dddc      	ble.n	8001630 <L3GD20_ReadXYZAngRate+0x54>
 8001676:	e025      	b.n	80016c4 <L3GD20_ReadXYZAngRate+0xe8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	e01f      	b.n	80016be <L3GD20_ReadXYZAngRate+0xe2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001686:	4413      	add	r3, r2
 8001688:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800168c:	b29b      	uxth	r3, r3
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b29a      	uxth	r2, r3
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	3301      	adds	r3, #1
 8001698:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800169c:	440b      	add	r3, r1
 800169e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016b2:	440b      	add	r3, r1
 80016b4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	3301      	adds	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	dddc      	ble.n	800167e <L3GD20_ReadXYZAngRate+0xa2>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d00c      	beq.n	80016e8 <L3GD20_ReadXYZAngRate+0x10c>
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	dc0d      	bgt.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <L3GD20_ReadXYZAngRate+0x100>
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d003      	beq.n	80016e2 <L3GD20_ReadXYZAngRate+0x106>
 80016da:	e008      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <L3GD20_ReadXYZAngRate+0x158>)
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016e0:	e005      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <L3GD20_ReadXYZAngRate+0x15c>)
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016e6:	e002      	b.n	80016ee <L3GD20_ReadXYZAngRate+0x112>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <L3GD20_ReadXYZAngRate+0x160>)
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80016ec:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
 80016f2:	e017      	b.n	8001724 <L3GD20_ReadXYZAngRate+0x148>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016fc:	4413      	add	r3, r2
 80016fe:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	3301      	adds	r3, #1
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	2b02      	cmp	r3, #2
 8001728:	dde4      	ble.n	80016f4 <L3GD20_ReadXYZAngRate+0x118>
  }
}
 800172a:	bf00      	nop
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	; 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	410c0000 	.word	0x410c0000
 8001738:	418c0000 	.word	0x418c0000
 800173c:	428c0000 	.word	0x428c0000

08001740 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800174e:	f002 fabd 	bl	8003ccc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	461a      	mov	r2, r3
 800175a:	2120      	movs	r1, #32
 800175c:	2032      	movs	r0, #50	; 0x32
 800175e:	f002 fb0d 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	461a      	mov	r2, r3
 800176a:	2123      	movs	r1, #35	; 0x23
 800176c:	2032      	movs	r0, #50	; 0x32
 800176e:	f002 fb05 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001792:	f002 fa9b 	bl	8003ccc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8001796:	210f      	movs	r1, #15
 8001798:	2032      	movs	r0, #50	; 0x32
 800179a:	f002 fb02 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80017a2:	79fb      	ldrb	r3, [r7, #7]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80017b2:	2124      	movs	r1, #36	; 0x24
 80017b4:	2032      	movs	r0, #50	; 0x32
 80017b6:	f002 faf4 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017c4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	461a      	mov	r2, r3
 80017ca:	2124      	movs	r1, #36	; 0x24
 80017cc:	2032      	movs	r0, #50	; 0x32
 80017ce:	f002 fad5 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80017e4:	2121      	movs	r1, #33	; 0x21
 80017e6:	2032      	movs	r0, #50	; 0x32
 80017e8:	f002 fadb 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 80017ec:	4603      	mov	r3, r0
 80017ee:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80017f8:	7bfa      	ldrb	r2, [r7, #15]
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	461a      	mov	r2, r3
 8001804:	2121      	movs	r1, #33	; 0x21
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f002 fab8 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800181e:	2121      	movs	r1, #33	; 0x21
 8001820:	2032      	movs	r0, #50	; 0x32
 8001822:	f002 fabe 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f023 0308 	bic.w	r3, r3, #8
 8001830:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4313      	orrs	r3, r2
 8001838:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	461a      	mov	r2, r3
 800183e:	2121      	movs	r1, #33	; 0x21
 8001840:	2032      	movs	r0, #50	; 0x32
 8001842:	f002 fa9b 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001846:	bf00      	nop
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b088      	sub	sp, #32
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001856:	2300      	movs	r3, #0
 8001858:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800185e:	2301      	movs	r3, #1
 8001860:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8001862:	2123      	movs	r1, #35	; 0x23
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f002 fa9c 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 800186a:	4603      	mov	r3, r0
 800186c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800186e:	2124      	movs	r1, #36	; 0x24
 8001870:	2032      	movs	r0, #50	; 0x32
 8001872:	f002 fa96 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001876:	4603      	mov	r3, r0
 8001878:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800187a:	2128      	movs	r1, #40	; 0x28
 800187c:	2032      	movs	r0, #50	; 0x32
 800187e:	f002 fa90 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001882:	4603      	mov	r3, r0
 8001884:	b25b      	sxtb	r3, r3
 8001886:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8001888:	2129      	movs	r1, #41	; 0x29
 800188a:	2032      	movs	r0, #50	; 0x32
 800188c:	f002 fa89 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001890:	4603      	mov	r3, r0
 8001892:	b25b      	sxtb	r3, r3
 8001894:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8001896:	212a      	movs	r1, #42	; 0x2a
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f002 fa82 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 800189e:	4603      	mov	r3, r0
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80018a4:	212b      	movs	r1, #43	; 0x2b
 80018a6:	2032      	movs	r0, #50	; 0x32
 80018a8:	f002 fa7b 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	2032      	movs	r0, #50	; 0x32
 80018b6:	f002 fa74 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 80018c0:	212d      	movs	r1, #45	; 0x2d
 80018c2:	2032      	movs	r0, #50	; 0x32
 80018c4:	f002 fa6d 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 80018ce:	7d3b      	ldrb	r3, [r7, #20]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d126      	bne.n	8001926 <LSM303AGR_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
 80018dc:	e01f      	b.n	800191e <LSM303AGR_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	3301      	adds	r3, #1
 80018e4:	f107 0220 	add.w	r2, r7, #32
 80018e8:	4413      	add	r3, r2
 80018ea:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	f107 0120 	add.w	r1, r7, #32
 80018fc:	440b      	add	r3, r1
 80018fe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001902:	b29b      	uxth	r3, r3
 8001904:	4413      	add	r3, r2
 8001906:	b29a      	uxth	r2, r3
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	b212      	sxth	r2, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	f107 0120 	add.w	r1, r7, #32
 8001912:	440b      	add	r3, r1
 8001914:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001918:	7ffb      	ldrb	r3, [r7, #31]
 800191a:	3301      	adds	r3, #1
 800191c:	77fb      	strb	r3, [r7, #31]
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d9dc      	bls.n	80018de <LSM303AGR_AccReadXYZ+0x90>
 8001924:	e025      	b.n	8001972 <LSM303AGR_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	77fb      	strb	r3, [r7, #31]
 800192a:	e01f      	b.n	800196c <LSM303AGR_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	f107 0220 	add.w	r2, r7, #32
 8001934:	4413      	add	r3, r2
 8001936:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800193a:	b29b      	uxth	r3, r3
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b29a      	uxth	r2, r3
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	3301      	adds	r3, #1
 8001946:	f107 0120 	add.w	r1, r7, #32
 800194a:	440b      	add	r3, r1
 800194c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4413      	add	r3, r2
 8001954:	b29a      	uxth	r2, r3
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	b212      	sxth	r2, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	f107 0120 	add.w	r1, r7, #32
 8001960:	440b      	add	r3, r1
 8001962:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	3301      	adds	r3, #1
 800196a:	77fb      	strb	r3, [r7, #31]
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	2b02      	cmp	r3, #2
 8001970:	d9dc      	bls.n	800192c <LSM303AGR_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8001972:	7d3b      	ldrb	r3, [r7, #20]
 8001974:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001978:	2b30      	cmp	r3, #48	; 0x30
 800197a:	d013      	beq.n	80019a4 <LSM303AGR_AccReadXYZ+0x156>
 800197c:	2b30      	cmp	r3, #48	; 0x30
 800197e:	dc14      	bgt.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
 8001980:	2b20      	cmp	r3, #32
 8001982:	d00c      	beq.n	800199e <LSM303AGR_AccReadXYZ+0x150>
 8001984:	2b20      	cmp	r3, #32
 8001986:	dc10      	bgt.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <LSM303AGR_AccReadXYZ+0x144>
 800198c:	2b10      	cmp	r3, #16
 800198e:	d003      	beq.n	8001998 <LSM303AGR_AccReadXYZ+0x14a>
 8001990:	e00b      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8001992:	2301      	movs	r3, #1
 8001994:	77bb      	strb	r3, [r7, #30]
    break;
 8001996:	e008      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001998:	2302      	movs	r3, #2
 800199a:	77bb      	strb	r3, [r7, #30]
    break;
 800199c:	e005      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800199e:	2304      	movs	r3, #4
 80019a0:	77bb      	strb	r3, [r7, #30]
    break;
 80019a2:	e002      	b.n	80019aa <LSM303AGR_AccReadXYZ+0x15c>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 80019a4:	230c      	movs	r3, #12
 80019a6:	77bb      	strb	r3, [r7, #30]
    break;
 80019a8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	e015      	b.n	80019dc <LSM303AGR_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	f107 0220 	add.w	r2, r7, #32
 80019b8:	4413      	add	r3, r2
 80019ba:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	7fbb      	ldrb	r3, [r7, #30]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	fb12 f303 	smulbb	r3, r2, r3
 80019c8:	b299      	uxth	r1, r3
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	b20a      	sxth	r2, r1
 80019d4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80019d6:	7ffb      	ldrb	r3, [r7, #31]
 80019d8:	3301      	adds	r3, #1
 80019da:	77fb      	strb	r3, [r7, #31]
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d9e6      	bls.n	80019b0 <LSM303AGR_AccReadXYZ+0x162>
  }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3720      	adds	r7, #32
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80019fa:	2121      	movs	r1, #33	; 0x21
 80019fc:	2032      	movs	r0, #50	; 0x32
 80019fe:	f002 f9d0 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	f023 0304 	bic.w	r3, r3, #4
 8001a0c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	2121      	movs	r1, #33	; 0x21
 8001a1c:	2032      	movs	r0, #50	; 0x32
 8001a1e:	f002 f9ad 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8001a38:	2122      	movs	r1, #34	; 0x22
 8001a3a:	2032      	movs	r0, #50	; 0x32
 8001a3c:	f002 f9b1 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2122      	movs	r1, #34	; 0x22
 8001a52:	2032      	movs	r0, #50	; 0x32
 8001a54:	f002 f992 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001a6e:	2138      	movs	r1, #56	; 0x38
 8001a70:	2032      	movs	r0, #50	; 0x32
 8001a72:	f002 f996 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	461a      	mov	r2, r3
 8001a86:	2138      	movs	r1, #56	; 0x38
 8001a88:	2032      	movs	r0, #50	; 0x32
 8001a8a:	f002 f977 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001a8e:	230a      	movs	r3, #10
 8001a90:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	461a      	mov	r2, r3
 8001a96:	213a      	movs	r1, #58	; 0x3a
 8001a98:	2032      	movs	r0, #50	; 0x32
 8001a9a:	f002 f96f 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	213b      	movs	r1, #59	; 0x3b
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f002 f967 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	213c      	movs	r1, #60	; 0x3c
 8001ab4:	2032      	movs	r0, #50	; 0x32
 8001ab6:	f002 f961 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001aba:	2332      	movs	r3, #50	; 0x32
 8001abc:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	213d      	movs	r1, #61	; 0x3d
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f002 f959 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001ad6:	f002 f921 	bl	8003d1c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001ada:	2080      	movs	r0, #128	; 0x80
 8001adc:	f7ff ffa5 	bl	8001a2a <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001ae0:	2004      	movs	r0, #4
 8001ae2:	f7ff ff83 	bl	80019ec <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8001ae6:	2010      	movs	r0, #16
 8001ae8:	f7ff ffba 	bl	8001a60 <LSM303AGR_AccClickITEnable>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001afe:	f002 f8e5 	bl	8003ccc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	2032      	movs	r0, #50	; 0x32
 8001b0e:	f002 f935 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2123      	movs	r1, #35	; 0x23
 8001b1c:	2032      	movs	r0, #50	; 0x32
 8001b1e:	f002 f92d 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8001b42:	f002 f8c3 	bl	8003ccc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8001b46:	210f      	movs	r1, #15
 8001b48:	2032      	movs	r0, #50	; 0x32
 8001b4a:	f002 f92a 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001b52:	79fb      	ldrb	r3, [r7, #7]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001b62:	2124      	movs	r1, #36	; 0x24
 8001b64:	2032      	movs	r0, #50	; 0x32
 8001b66:	f002 f91c 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b74:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2124      	movs	r1, #36	; 0x24
 8001b7c:	2032      	movs	r0, #50	; 0x32
 8001b7e:	f002 f8fd 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001b94:	2121      	movs	r1, #33	; 0x21
 8001b96:	2032      	movs	r0, #50	; 0x32
 8001b98:	f002 f903 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	2121      	movs	r1, #33	; 0x21
 8001bb6:	2032      	movs	r0, #50	; 0x32
 8001bb8:	f002 f8e0 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001bce:	2121      	movs	r1, #33	; 0x21
 8001bd0:	2032      	movs	r0, #50	; 0x32
 8001bd2:	f002 f8e6 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	f023 0308 	bic.w	r3, r3, #8
 8001be0:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	461a      	mov	r2, r3
 8001bee:	2121      	movs	r1, #33	; 0x21
 8001bf0:	2032      	movs	r0, #50	; 0x32
 8001bf2:	f002 f8c3 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b088      	sub	sp, #32
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001c06:	2300      	movs	r3, #0
 8001c08:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001c12:	2123      	movs	r1, #35	; 0x23
 8001c14:	2032      	movs	r0, #50	; 0x32
 8001c16:	f002 f8c4 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001c1e:	2124      	movs	r1, #36	; 0x24
 8001c20:	2032      	movs	r0, #50	; 0x32
 8001c22:	f002 f8be 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001c2a:	2128      	movs	r1, #40	; 0x28
 8001c2c:	2032      	movs	r0, #50	; 0x32
 8001c2e:	f002 f8b8 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001c38:	2129      	movs	r1, #41	; 0x29
 8001c3a:	2032      	movs	r0, #50	; 0x32
 8001c3c:	f002 f8b1 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c40:	4603      	mov	r3, r0
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8001c46:	212a      	movs	r1, #42	; 0x2a
 8001c48:	2032      	movs	r0, #50	; 0x32
 8001c4a:	f002 f8aa 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001c54:	212b      	movs	r1, #43	; 0x2b
 8001c56:	2032      	movs	r0, #50	; 0x32
 8001c58:	f002 f8a3 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	2032      	movs	r0, #50	; 0x32
 8001c66:	f002 f89c 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001c70:	212d      	movs	r1, #45	; 0x2d
 8001c72:	2032      	movs	r0, #50	; 0x32
 8001c74:	f002 f895 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001c7e:	7d3b      	ldrb	r3, [r7, #20]
 8001c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d126      	bne.n	8001cd6 <LSM303DLHC_AccReadXYZ+0xd8>
  {
    for(i=0; i<3; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
 8001c8c:	e01f      	b.n	8001cce <LSM303DLHC_AccReadXYZ+0xd0>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001c8e:	7ffb      	ldrb	r3, [r7, #31]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3301      	adds	r3, #1
 8001c94:	f107 0220 	add.w	r2, r7, #32
 8001c98:	4413      	add	r3, r2
 8001c9a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	7ffb      	ldrb	r3, [r7, #31]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	f107 0120 	add.w	r1, r7, #32
 8001cac:	440b      	add	r3, r1
 8001cae:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	7ffb      	ldrb	r3, [r7, #31]
 8001cba:	b212      	sxth	r2, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	f107 0120 	add.w	r1, r7, #32
 8001cc2:	440b      	add	r3, r1
 8001cc4:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	77fb      	strb	r3, [r7, #31]
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d9dc      	bls.n	8001c8e <LSM303DLHC_AccReadXYZ+0x90>
 8001cd4:	e025      	b.n	8001d22 <LSM303DLHC_AccReadXYZ+0x124>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	77fb      	strb	r3, [r7, #31]
 8001cda:	e01f      	b.n	8001d1c <LSM303DLHC_AccReadXYZ+0x11e>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001cdc:	7ffb      	ldrb	r3, [r7, #31]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	f107 0220 	add.w	r2, r7, #32
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f107 0120 	add.w	r1, r7, #32
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	b212      	sxth	r2, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	f107 0120 	add.w	r1, r7, #32
 8001d10:	440b      	add	r3, r1
 8001d12:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001d16:	7ffb      	ldrb	r3, [r7, #31]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	77fb      	strb	r3, [r7, #31]
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d9dc      	bls.n	8001cdc <LSM303DLHC_AccReadXYZ+0xde>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001d22:	7d3b      	ldrb	r3, [r7, #20]
 8001d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d28:	2b30      	cmp	r3, #48	; 0x30
 8001d2a:	d013      	beq.n	8001d54 <LSM303DLHC_AccReadXYZ+0x156>
 8001d2c:	2b30      	cmp	r3, #48	; 0x30
 8001d2e:	dc14      	bgt.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d00c      	beq.n	8001d4e <LSM303DLHC_AccReadXYZ+0x150>
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	dc10      	bgt.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <LSM303DLHC_AccReadXYZ+0x144>
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d003      	beq.n	8001d48 <LSM303DLHC_AccReadXYZ+0x14a>
 8001d40:	e00b      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77bb      	strb	r3, [r7, #30]
    break;
 8001d46:	e008      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	77bb      	strb	r3, [r7, #30]
    break;
 8001d4c:	e005      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001d4e:	2304      	movs	r3, #4
 8001d50:	77bb      	strb	r3, [r7, #30]
    break;
 8001d52:	e002      	b.n	8001d5a <LSM303DLHC_AccReadXYZ+0x15c>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001d54:	230c      	movs	r3, #12
 8001d56:	77bb      	strb	r3, [r7, #30]
    break;
 8001d58:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	77fb      	strb	r3, [r7, #31]
 8001d5e:	e015      	b.n	8001d8c <LSM303DLHC_AccReadXYZ+0x18e>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	f107 0220 	add.w	r2, r7, #32
 8001d68:	4413      	add	r3, r2
 8001d6a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	7fbb      	ldrb	r3, [r7, #30]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	fb12 f303 	smulbb	r3, r2, r3
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	7ffb      	ldrb	r3, [r7, #31]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	b20a      	sxth	r2, r1
 8001d84:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	77fb      	strb	r3, [r7, #31]
 8001d8c:	7ffb      	ldrb	r3, [r7, #31]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d9e6      	bls.n	8001d60 <LSM303DLHC_AccReadXYZ+0x162>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001daa:	2121      	movs	r1, #33	; 0x21
 8001dac:	2032      	movs	r0, #50	; 0x32
 8001dae:	f001 fff8 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2121      	movs	r1, #33	; 0x21
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f001 ffd5 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001de8:	2122      	movs	r1, #34	; 0x22
 8001dea:	2032      	movs	r0, #50	; 0x32
 8001dec:	f001 ffd9 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2122      	movs	r1, #34	; 0x22
 8001e02:	2032      	movs	r0, #50	; 0x32
 8001e04:	f001 ffba 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001e1e:	2138      	movs	r1, #56	; 0x38
 8001e20:	2032      	movs	r0, #50	; 0x32
 8001e22:	f001 ffbe 	bl	8003da2 <COMPASSACCELERO_IO_Read>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	461a      	mov	r2, r3
 8001e36:	2138      	movs	r1, #56	; 0x38
 8001e38:	2032      	movs	r0, #50	; 0x32
 8001e3a:	f001 ff9f 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001e3e:	230a      	movs	r3, #10
 8001e40:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	461a      	mov	r2, r3
 8001e46:	213a      	movs	r1, #58	; 0x3a
 8001e48:	2032      	movs	r0, #50	; 0x32
 8001e4a:	f001 ff97 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001e4e:	2305      	movs	r3, #5
 8001e50:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	461a      	mov	r2, r3
 8001e56:	213b      	movs	r1, #59	; 0x3b
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f001 ff8f 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	461a      	mov	r2, r3
 8001e62:	213c      	movs	r1, #60	; 0x3c
 8001e64:	2032      	movs	r0, #50	; 0x32
 8001e66:	f001 ff89 	bl	8003d7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001e6a:	2332      	movs	r3, #50	; 0x32
 8001e6c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	461a      	mov	r2, r3
 8001e72:	213d      	movs	r1, #61	; 0x3d
 8001e74:	2032      	movs	r0, #50	; 0x32
 8001e76:	f001 ff81 	bl	8003d7c <COMPASSACCELERO_IO_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001e86:	f001 ff49 	bl	8003d1c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001e8a:	2080      	movs	r0, #128	; 0x80
 8001e8c:	f7ff ffa5 	bl	8001dda <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001e90:	2004      	movs	r0, #4
 8001e92:	f7ff ff83 	bl	8001d9c <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001e96:	2010      	movs	r0, #16
 8001e98:	f7ff ffba 	bl	8001e10 <LSM303DLHC_AccClickITEnable>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eb4:	4a28      	ldr	r2, [pc, #160]	; (8001f58 <MX_ADC1_Init+0xb8>)
 8001eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	; (8001f5c <MX_ADC1_Init+0xbc>)
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001efe:	4815      	ldr	r0, [pc, #84]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f00:	f002 fce8 	bl	80048d4 <HAL_ADC_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f0a:	f001 fb77 	bl	80035fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f16:	2307      	movs	r3, #7
 8001f18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f20:	f002 fe36 	bl	8004b90 <HAL_ADC_ConfigChannel>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f2a:	f001 fb67 	bl	80035fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f32:	2302      	movs	r3, #2
 8001f34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4806      	ldr	r0, [pc, #24]	; (8001f54 <MX_ADC1_Init+0xb4>)
 8001f3c:	f002 fe28 	bl	8004b90 <HAL_ADC_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001f46:	f001 fb59 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000400 	.word	0x20000400
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	0f000001 	.word	0x0f000001

08001f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	; (800203c <HAL_ADC_MspInit+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d157      	bne.n	8002032 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_ADC_MspInit+0xe0>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001fba:	2306      	movs	r3, #6
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	481d      	ldr	r0, [pc, #116]	; (8002044 <HAL_ADC_MspInit+0xe4>)
 8001fce:	f003 fead 	bl	8005d2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fd4:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_ADC_MspInit+0xec>)
 8001fd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ff8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8001ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002000:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002008:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800200c:	2200      	movs	r2, #0
 800200e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002016:	480c      	ldr	r0, [pc, #48]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 8002018:	f003 f97a 	bl	8005310 <HAL_DMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002022:	f001 faeb 	bl	80035fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_ADC_MspInit+0xe8>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40012000 	.word	0x40012000
 8002040:	40023800 	.word	0x40023800
 8002044:	40020000 	.word	0x40020000
 8002048:	20000448 	.word	0x20000448
 800204c:	40026410 	.word	0x40026410

08002050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_DMA_Init+0x4c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	4a0f      	ldr	r2, [pc, #60]	; (800209c <MX_DMA_Init+0x4c>)
 8002060:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002064:	6313      	str	r3, [r2, #48]	; 0x30
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <MX_DMA_Init+0x4c>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2038      	movs	r0, #56	; 0x38
 8002078:	f003 f8fa 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800207c:	2038      	movs	r0, #56	; 0x38
 800207e:	f003 f923 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2039      	movs	r0, #57	; 0x39
 8002088:	f003 f8f2 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800208c:	2039      	movs	r0, #57	; 0x39
 800208e:	f003 f91b 	bl	80052c8 <HAL_NVIC_EnableIRQ>

}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	f107 031c 	add.w	r3, r7, #28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	4b8f      	ldr	r3, [pc, #572]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a8e      	ldr	r2, [pc, #568]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a87      	ldr	r2, [pc, #540]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a80      	ldr	r2, [pc, #512]	; (80022f8 <MX_GPIO_Init+0x258>)
 80020f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b7e      	ldr	r3, [pc, #504]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <MX_GPIO_Init+0x258>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <MX_GPIO_Init+0x258>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a72      	ldr	r2, [pc, #456]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b70      	ldr	r3, [pc, #448]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a6b      	ldr	r2, [pc, #428]	; (80022f8 <MX_GPIO_Init+0x258>)
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b69      	ldr	r3, [pc, #420]	; (80022f8 <MX_GPIO_Init+0x258>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2108      	movs	r1, #8
 8002162:	4866      	ldr	r0, [pc, #408]	; (80022fc <MX_GPIO_Init+0x25c>)
 8002164:	f004 f980 	bl	8006468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	2101      	movs	r1, #1
 800216c:	4864      	ldr	r0, [pc, #400]	; (8002300 <MX_GPIO_Init+0x260>)
 800216e:	f004 f97b 	bl	8006468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	f244 0182 	movw	r1, #16514	; 0x4082
 8002178:	4862      	ldr	r0, [pc, #392]	; (8002304 <MX_GPIO_Init+0x264>)
 800217a:	f004 f975 	bl	8006468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 800217e:	2200      	movs	r2, #0
 8002180:	f24f 2110 	movw	r1, #61968	; 0xf210
 8002184:	4860      	ldr	r0, [pc, #384]	; (8002308 <MX_GPIO_Init+0x268>)
 8002186:	f004 f96f 	bl	8006468 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800218a:	2304      	movs	r3, #4
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4857      	ldr	r0, [pc, #348]	; (80022fc <MX_GPIO_Init+0x25c>)
 800219e:	f003 fdc5 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80021a2:	2308      	movs	r3, #8
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	4850      	ldr	r0, [pc, #320]	; (80022fc <MX_GPIO_Init+0x25c>)
 80021ba:	f003 fdb7 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80021be:	2332      	movs	r3, #50	; 0x32
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	484a      	ldr	r0, [pc, #296]	; (80022fc <MX_GPIO_Init+0x25c>)
 80021d4:	f003 fdaa 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4844      	ldr	r0, [pc, #272]	; (8002300 <MX_GPIO_Init+0x260>)
 80021f0:	f003 fd9c 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80021f4:	2308      	movs	r3, #8
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002204:	2305      	movs	r3, #5
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	483c      	ldr	r0, [pc, #240]	; (8002300 <MX_GPIO_Init+0x260>)
 8002210:	f003 fd8c 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002214:	2301      	movs	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4619      	mov	r1, r3
 8002226:	4839      	ldr	r0, [pc, #228]	; (800230c <MX_GPIO_Init+0x26c>)
 8002228:	f003 fd80 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800222c:	2310      	movs	r3, #16
 800222e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800223c:	2306      	movs	r3, #6
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	4619      	mov	r1, r3
 8002246:	4831      	ldr	r0, [pc, #196]	; (800230c <MX_GPIO_Init+0x26c>)
 8002248:	f003 fd70 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD1_RST_Pin;
 800224c:	f244 0382 	movw	r3, #16514	; 0x4082
 8002250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 031c 	add.w	r3, r7, #28
 8002262:	4619      	mov	r1, r3
 8002264:	4827      	ldr	r0, [pc, #156]	; (8002304 <MX_GPIO_Init+0x264>)
 8002266:	f003 fd61 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800226a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800226e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002270:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002274:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4821      	ldr	r0, [pc, #132]	; (8002308 <MX_GPIO_Init+0x268>)
 8002282:	f003 fd53 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LD4_Pin|LD3_Pin|LD5_Pin
 8002286:	f24f 2310 	movw	r3, #61968	; 0xf210
 800228a:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	4619      	mov	r1, r3
 800229e:	481a      	ldr	r0, [pc, #104]	; (8002308 <MX_GPIO_Init+0x268>)
 80022a0:	f003 fd44 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80022a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80022a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022b6:	2306      	movs	r3, #6
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	480f      	ldr	r0, [pc, #60]	; (8002300 <MX_GPIO_Init+0x260>)
 80022c2:	f003 fd33 	bl	8005d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022c6:	2320      	movs	r3, #32
 80022c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <MX_GPIO_Init+0x268>)
 80022da:	f003 fd27 	bl	8005d2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	2017      	movs	r0, #23
 80022e4:	f002 ffc4 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022e8:	2017      	movs	r0, #23
 80022ea:	f002 ffed 	bl	80052c8 <HAL_NVIC_EnableIRQ>

}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	; 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40021000 	.word	0x40021000
 8002300:	40020800 	.word	0x40020800
 8002304:	40020400 	.word	0x40020400
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40020000 	.word	0x40020000

08002310 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <MX_I2C1_Init+0x50>)
 8002316:	4a13      	ldr	r2, [pc, #76]	; (8002364 <MX_I2C1_Init+0x54>)
 8002318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_I2C1_Init+0x50>)
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <MX_I2C1_Init+0x58>)
 800231e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <MX_I2C1_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_I2C1_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_I2C1_Init+0x50>)
 800232e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <MX_I2C1_Init+0x50>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_I2C1_Init+0x50>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800234c:	4804      	ldr	r0, [pc, #16]	; (8002360 <MX_I2C1_Init+0x50>)
 800234e:	f005 fe51 	bl	8007ff4 <HAL_I2C_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002358:	f001 f950 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200004a8 	.word	0x200004a8
 8002364:	40005400 	.word	0x40005400
 8002368:	000186a0 	.word	0x000186a0

0800236c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002370:	4b12      	ldr	r3, [pc, #72]	; (80023bc <MX_I2C2_Init+0x50>)
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <MX_I2C2_Init+0x54>)
 8002374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <MX_I2C2_Init+0x50>)
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <MX_I2C2_Init+0x58>)
 800237a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <MX_I2C2_Init+0x50>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <MX_I2C2_Init+0x50>)
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <MX_I2C2_Init+0x50>)
 800238a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800238e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <MX_I2C2_Init+0x50>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <MX_I2C2_Init+0x50>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <MX_I2C2_Init+0x50>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MX_I2C2_Init+0x50>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <MX_I2C2_Init+0x50>)
 80023aa:	f005 fe23 	bl	8007ff4 <HAL_I2C_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023b4:	f001 f922 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200004fc 	.word	0x200004fc
 80023c0:	40005800 	.word	0x40005800
 80023c4:	000186a0 	.word	0x000186a0

080023c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	; 0x30
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <HAL_I2C_MspInit+0x10c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d12d      	bne.n	8002446 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a39      	ldr	r2, [pc, #228]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002406:	f44f 7310 	mov.w	r3, #576	; 0x240
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240c:	2312      	movs	r3, #18
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002410:	2301      	movs	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002418:	2304      	movs	r3, #4
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	482e      	ldr	r0, [pc, #184]	; (80024dc <HAL_I2C_MspInit+0x114>)
 8002424:	f003 fc82 	bl	8005d2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 8002432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
 8002438:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002444:	e041      	b.n	80024ca <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <HAL_I2C_MspInit+0x118>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d13c      	bne.n	80024ca <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 800245a:	f043 0302 	orr.w	r3, r3, #2
 800245e:	6313      	str	r3, [r2, #48]	; 0x30
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800246c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002472:	2312      	movs	r3, #18
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800247e:	2304      	movs	r3, #4
 8002480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4814      	ldr	r0, [pc, #80]	; (80024dc <HAL_I2C_MspInit+0x114>)
 800248a:	f003 fc4f 	bl	8005d2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800248e:	2308      	movs	r3, #8
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002492:	2312      	movs	r3, #18
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800249e:	2309      	movs	r3, #9
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	480c      	ldr	r0, [pc, #48]	; (80024dc <HAL_I2C_MspInit+0x114>)
 80024aa:	f003 fc3f 	bl	8005d2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80024b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_I2C_MspInit+0x110>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
}
 80024ca:	bf00      	nop
 80024cc:	3730      	adds	r7, #48	; 0x30
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40005400 	.word	0x40005400
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40005800 	.word	0x40005800

080024e4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_I2C_MspDeInit+0x64>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10f      	bne.n	8002516 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 80024fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8002502:	2140      	movs	r1, #64	; 0x40
 8002504:	4812      	ldr	r0, [pc, #72]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 8002506:	f003 fead 	bl	8006264 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 800250a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 8002510:	f003 fea8 	bl	8006264 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8002514:	e013      	b.n	800253e <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_I2C_MspDeInit+0x70>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d10e      	bne.n	800253e <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_I2C_MspDeInit+0x68>)
 8002526:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800252c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002530:	4807      	ldr	r0, [pc, #28]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 8002532:	f003 fe97 	bl	8006264 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8002536:	2108      	movs	r1, #8
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <HAL_I2C_MspDeInit+0x6c>)
 800253a:	f003 fe93 	bl	8006264 <HAL_GPIO_DeInit>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40005400 	.word	0x40005400
 800254c:	40023800 	.word	0x40023800
 8002550:	40020400 	.word	0x40020400
 8002554:	40005800 	.word	0x40005800

08002558 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fb5d 	bl	8002c22 <LCD5110_refresh_ll>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f87c 	bl	8002684 <LCD5110_wprint>
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8002594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002596:	b08b      	sub	sp, #44	; 0x2c
 8002598:	af04      	add	r7, sp, #16
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db41      	blt.n	8002632 <LCD5110_wputchar+0x9e>
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db3c      	blt.n	8002632 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025be:	461a      	mov	r2, r3
 80025c0:	2306      	movs	r3, #6
 80025c2:	4413      	add	r3, r2
 80025c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d833      	bhi.n	8002636 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80025d4:	461a      	mov	r2, r3
 80025d6:	2308      	movs	r3, #8
 80025d8:	4413      	add	r3, r2
 80025da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025dc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d828      	bhi.n	8002636 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <LCD5110_wputchar+0xac>)
 80025e6:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	18d0      	adds	r0, r2, r3
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	18d1      	adds	r1, r2, r3
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2206      	movs	r2, #6
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	441a      	add	r2, r3
 800260c:	2306      	movs	r3, #6
 800260e:	461e      	mov	r6, r3
 8002610:	2308      	movs	r3, #8
 8002612:	461c      	mov	r4, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461d      	mov	r5, r3
 8002622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002624:	9302      	str	r3, [sp, #8]
 8002626:	9501      	str	r5, [sp, #4]
 8002628:	9400      	str	r4, [sp, #0]
 800262a:	4633      	mov	r3, r6
 800262c:	f000 f8f6 	bl	800281c <LCD5110_drawBitmap>
 8002630:	e002      	b.n	8002638 <LCD5110_wputchar+0xa4>
		return;
 8002632:	bf00      	nop
 8002634:	e000      	b.n	8002638 <LCD5110_wputchar+0xa4>
		return;
 8002636:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800263e:	bf00      	nop
 8002640:	08013330 	.word	0x08013330

08002644 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002654:	b29a      	uxth	r2, r3
 8002656:	2308      	movs	r3, #8
 8002658:	b29b      	uxth	r3, r3
 800265a:	4413      	add	r3, r2
 800265c:	b29b      	uxth	r3, r3
 800265e:	3301      	adds	r3, #1
 8002660:	b29b      	uxth	r3, r3
 8002662:	b21a      	sxth	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7b1b      	ldrb	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8002676:	6838      	ldr	r0, [r7, #0]
 8002678:	f7ff ff6e 	bl	8002558 <LCD5110_refresh>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8002692:	e053      	b.n	800273c <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b0a      	cmp	r3, #10
 800269a:	d010      	beq.n	80026be <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80026aa:	4619      	mov	r1, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	f7ff ff6b 	bl	8002594 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	2306      	movs	r3, #6
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026da:	461a      	mov	r2, r3
 80026dc:	2306      	movs	r3, #6
 80026de:	4413      	add	r3, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d904      	bls.n	80026f4 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3301      	adds	r3, #1
 80026ee:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80026f0:	2b0a      	cmp	r3, #10
 80026f2:	d103      	bne.n	80026fc <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	d111      	bne.n	8002720 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffa0 	bl	8002644 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	3301      	adds	r3, #1
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	4a10      	ldr	r2, [pc, #64]	; (8002750 <LCD5110_wprint+0xcc>)
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <LCD5110_wprint+0x9c>
				++str;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3301      	adds	r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002726:	461a      	mov	r2, r3
 8002728:	2308      	movs	r3, #8
 800272a:	4413      	add	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002732:	4293      	cmp	r3, r2
 8002734:	d807      	bhi.n	8002746 <LCD5110_wprint+0xc2>
			break;
		str++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3301      	adds	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1a7      	bne.n	8002694 <LCD5110_wprint+0x10>

	}
}
 8002744:	e000      	b.n	8002748 <LCD5110_wprint+0xc4>
			break;
 8002746:	bf00      	nop
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	08013960 	.word	0x08013960

08002754 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	10db      	asrs	r3, r3, #3
 8002764:	2254      	movs	r2, #84	; 0x54
 8002766:	fb02 f203 	mul.w	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	2201      	movs	r2, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	753b      	strb	r3, [r7, #20]

	return res;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	461a      	mov	r2, r3
 8002784:	f107 0310 	add.w	r3, r7, #16
 8002788:	e893 0003 	ldmia.w	r3, {r0, r1}
 800278c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db31      	blt.n	8002814 <LCD5110_putpix+0x78>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db2e      	blt.n	8002814 <LCD5110_putpix+0x78>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b53      	cmp	r3, #83	; 0x53
 80027ba:	dc2b      	bgt.n	8002814 <LCD5110_putpix+0x78>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b2f      	cmp	r3, #47	; 0x2f
 80027c0:	dc28      	bgt.n	8002814 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ffc2 	bl	8002754 <xy_to_pix>

	if (color)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00c      	beq.n	80027f0 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	7f19      	ldrb	r1, [r3, #28]
 80027de:	7d3a      	ldrb	r2, [r7, #20]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	b2d1      	uxtb	r1, r2
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	460a      	mov	r2, r1
 80027ec:	771a      	strb	r2, [r3, #28]
 80027ee:	e012      	b.n	8002816 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	7f1b      	ldrb	r3, [r3, #28]
 80027f8:	b25a      	sxtb	r2, r3
 80027fa:	7d3b      	ldrb	r3, [r7, #20]
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	b25b      	sxtb	r3, r3
 8002802:	4013      	ands	r3, r2
 8002804:	b25a      	sxtb	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	b2d1      	uxtb	r1, r2
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	4413      	add	r3, r2
 800280e:	460a      	mov	r2, r1
 8002810:	771a      	strb	r2, [r3, #28]
 8002812:	e000      	b.n	8002816 <LCD5110_putpix+0x7a>
		return;
 8002814:	bf00      	nop
}
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e042      	b.n	80028b6 <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	e038      	b.n	80028a8 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	da00      	bge.n	800283e <LCD5110_drawBitmap+0x22>
 800283c:	3307      	adds	r3, #7
 800283e:	10db      	asrs	r3, r3, #3
 8002840:	461a      	mov	r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	fb03 f202 	mul.w	r2, r3, r2
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	425a      	negs	r2, r3
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	f002 0207 	and.w	r2, r2, #7
 8002862:	bf58      	it	pl
 8002864:	4253      	negpl	r3, r2
 8002866:	2201      	movs	r2, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	b25a      	sxtb	r2, r3
 800286e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002872:	4013      	ands	r3, r2
 8002874:	b25b      	sxtb	r3, r3
 8002876:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	18d0      	adds	r0, r2, r3
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	18d1      	adds	r1, r2, r3
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <LCD5110_drawBitmap+0x7e>
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	e000      	b.n	800289c <LCD5110_drawBitmap+0x80>
 800289a:	7dfa      	ldrb	r2, [r7, #23]
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	f7ff ff7d 	bl	800279c <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbc2      	blt.n	8002836 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	3301      	adds	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	dbb8      	blt.n	8002830 <LCD5110_drawBitmap+0x14>
		}
	}
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	1df9      	adds	r1, r7, #7
 80028da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028de:	2201      	movs	r2, #1
 80028e0:	f007 fbe8 	bl	800a0b4 <HAL_SPI_Transmit>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	460b      	mov	r3, r1
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	897a      	ldrh	r2, [r7, #10]
 8002902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002906:	68f9      	ldr	r1, [r7, #12]
 8002908:	f007 fbd4 	bl	800a0b4 <HAL_SPI_Transmit>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6898      	ldr	r0, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	889b      	ldrh	r3, [r3, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	4619      	mov	r1, r3
 800292a:	f003 fd9d 	bl	8006468 <HAL_GPIO_WritePin>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6998      	ldr	r0, [r3, #24]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8a9b      	ldrh	r3, [r3, #20]
 8002946:	2201      	movs	r2, #1
 8002948:	4619      	mov	r1, r3
 800294a:	f003 fd8d 	bl	8006468 <HAL_GPIO_WritePin>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6998      	ldr	r0, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8a9b      	ldrh	r3, [r3, #20]
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	f003 fd7d 	bl	8006468 <HAL_GPIO_WritePin>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6918      	ldr	r0, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	899b      	ldrh	r3, [r3, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	4619      	mov	r1, r3
 800298a:	f003 fd6d 	bl	8006468 <HAL_GPIO_WritePin>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6918      	ldr	r0, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	899b      	ldrh	r3, [r3, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	4619      	mov	r1, r3
 80029aa:	f003 fd5d 	bl	8006468 <HAL_GPIO_WritePin>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	6039      	str	r1, [r7, #0]
 80029c0:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f023 0320 	bic.w	r3, r3, #32
 80029c8:	2b07      	cmp	r3, #7
 80029ca:	dd01      	ble.n	80029d0 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e008      	b.n	80029e2 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f043 0320 	orr.w	r3, r3, #32
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	6839      	ldr	r1, [r7, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff74 	bl	80028c8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	6039      	str	r1, [r7, #0]
 80029f4:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f023 030d 	bic.w	r3, r3, #13
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8002a00:	2302      	movs	r3, #2
 8002a02:	e005      	b.n	8002a10 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5d 	bl	80028c8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	da01      	bge.n	8002a30 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e008      	b.n	8002a42 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	6839      	ldr	r1, [r7, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff44 	bl	80028c8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	6039      	str	r1, [r7, #0]
 8002a54:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d901      	bls.n	8002a60 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e008      	b.n	8002a72 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff ff2c 	bl	80028c8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	6039      	str	r1, [r7, #0]
 8002a84:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	2b07      	cmp	r3, #7
 8002a8a:	d901      	bls.n	8002a90 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8002a8c:	2305      	movs	r3, #5
 8002a8e:	e008      	b.n	8002aa2 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	f043 0310 	orr.w	r3, r3, #16
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff14 	bl	80028c8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	6039      	str	r1, [r7, #0]
 8002ab4:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8002ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db03      	blt.n	8002ac6 <LCD5110_set_X_base+0x1c>
 8002abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ac2:	2b53      	cmp	r3, #83	; 0x53
 8002ac4:	dd01      	ble.n	8002aca <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	e00a      	b.n	8002ae0 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fef5 	bl	80028c8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8002af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db03      	blt.n	8002b04 <LCD5110_set_Y_base+0x1c>
 8002afc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	dd01      	ble.n	8002b08 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8002b04:	2307      	movs	r3, #7
 8002b06:	e00a      	b.n	8002b1e <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	b25b      	sxtb	r3, r3
 8002b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fed6 	bl	80028c8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	603a      	str	r2, [r7, #0]
 8002b30:	80fb      	strh	r3, [r7, #6]
 8002b32:	460b      	mov	r3, r1
 8002b34:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8002b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3a:	6839      	ldr	r1, [r7, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ffb4 	bl	8002aaa <LCD5110_set_X_base>
 8002b42:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <LCD5110_set_XY_base+0x28>
		return res;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	e00c      	b.n	8002b68 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8002b4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff ffc7 	bl	8002ae8 <LCD5110_set_Y_base>
 8002b5a:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <LCD5110_set_XY_base+0x40>
		return res;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	e000      	b.n	8002b68 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	4608      	mov	r0, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	70fb      	strb	r3, [r7, #3]
 8002baa:	460b      	mov	r3, r1
 8002bac:	70bb      	strb	r3, [r7, #2]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ffdc 	bl	8002b70 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff feac 	bl	8002916 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fee9 	bl	8002996 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8002bc4:	2364      	movs	r3, #100	; 0x64
 8002bc6:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8002bc8:	bf00      	nop
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1fa      	bne.n	8002bca <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fece 	bl	8002976 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff febb 	bl	8002956 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	2001      	movs	r0, #1
 8002be4:	f7ff fee7 	bl	80029b6 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8002be8:	78bb      	ldrb	r3, [r7, #2]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff13 	bl	8002a18 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8002bf2:	787b      	ldrb	r3, [r7, #1]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff27 	bl	8002a4a <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8002bfc:	7e3b      	ldrb	r3, [r7, #24]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff3a 	bl	8002a7a <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff fed4 	bl	80029b6 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fee9 	bl	80029ea <LCD5110_set_mode_base>

	return LCD5110_OK;
 8002c18:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff fe73 	bl	8002916 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fe90 	bl	8002956 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7ff ff73 	bl	8002b26 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fe78 	bl	8002936 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	331c      	adds	r3, #28
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fe4c 	bl	80028ee <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <HAL_GPIO_EXTI_Callback>:
volatile int pressed = 0;
volatile int button_is_pressed = 0;
volatile int loop_counter = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]

 if (GPIO_Pin == GPIO_PIN_8) {
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d136      	bne.n	8002ce0 <HAL_GPIO_EXTI_Callback+0x80>

  static uint32_t last_change_tick;
  if (HAL_GetTick() - last_change_tick < 50) {
 8002c72:	f001 fdff 	bl	8004874 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x88>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b31      	cmp	r3, #49	; 0x31
 8002c80:	d92d      	bls.n	8002cde <HAL_GPIO_EXTI_Callback+0x7e>
	  return;
  }

  last_change_tick = HAL_GetTick();
 8002c82:	f001 fdf7 	bl	8004874 <HAL_GetTick>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_GPIO_EXTI_Callback+0x88>)
 8002c8a:	6013      	str	r3, [r2, #0]

  if (fall_down == 0) {
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <HAL_GPIO_EXTI_Callback+0x8c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11c      	bne.n	8002cce <HAL_GPIO_EXTI_Callback+0x6e>
	  if (button_is_pressed) {
 8002c94:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d015      	beq.n	8002cc8 <HAL_GPIO_EXTI_Callback+0x68>

		  button_is_pressed = 0;
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
		  ++pressed;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <HAL_GPIO_EXTI_Callback+0x94>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a12      	ldr	r2, [pc, #72]	; (8002cf4 <HAL_GPIO_EXTI_Callback+0x94>)
 8002caa:	6013      	str	r3, [r2, #0]
		  if (light == -1) {
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb4:	d103      	bne.n	8002cbe <HAL_GPIO_EXTI_Callback+0x5e>
			  light = 0;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <HAL_GPIO_EXTI_Callback+0x6e>
		  } else {
			  light = -1;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e002      	b.n	8002cce <HAL_GPIO_EXTI_Callback+0x6e>
		  }
	  } else {
		  button_is_pressed = 1;
 8002cc8:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
	  }
  }

  if (fall_down) {
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_GPIO_EXTI_Callback+0x8c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d004      	beq.n	8002ce0 <HAL_GPIO_EXTI_Callback+0x80>
	  fall_down = 0;
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_GPIO_EXTI_Callback+0x8c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_EXTI_Callback+0x80>
	  return;
 8002cde:	bf00      	nop
  }
 }
}
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000338 	.word	0x20000338
 8002cec:	200002f4 	.word	0x200002f4
 8002cf0:	20000300 	.word	0x20000300
 8002cf4:	200002fc 	.word	0x200002fc
 8002cf8:	200002f8 	.word	0x200002f8

08002cfc <HAL_TIM_PeriodElapsedCallback>:
double Fall_Down_Y = 0;
double Fall_Down_Z = 0;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  if (htim -> Instance == TIM10) {
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d103      	bne.n	8002d16 <HAL_TIM_PeriodElapsedCallback+0x1a>
	  MPU6050_Read_Accel_L();
 8002d0e:	f000 f927 	bl	8002f60 <MPU6050_Read_Accel_L>
//	  MPU6050_Read_Accel_R();
	  show_accelerometer();
 8002d12:	f000 f9ad 	bl	8003070 <show_accelerometer>
  }

}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40014400 	.word	0x40014400

08002d24 <TIM10_reinit>:

static inline void TIM10_reinit() {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Stop(&htim10);
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <TIM10_reinit+0x24>)
 8002d2a:	f007 fe5b 	bl	800a9e4 <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_COUNTER( &htim10, 0 );
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <TIM10_reinit+0x24>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
	tim10_overflows = 0;
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <TIM10_reinit+0x28>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8002d3c:	4802      	ldr	r0, [pc, #8]	; (8002d48 <TIM10_reinit+0x24>)
 8002d3e:	f007 feb3 	bl	800aaa8 <HAL_TIM_Base_Start_IT>

}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000eb0 	.word	0x20000eb0
 8002d4c:	20000308 	.word	0x20000308

08002d50 <HAL_TIM_PWM_PulseFinishedCallback>:

	while( get_tim10_us() < before+useconds){}

}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {  // callback when dma finished data transfering
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);  // stop dma, when data transfering has finished
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002d5c:	f008 fa40 	bl	800b1e0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000ef8 	.word	0x20000ef8
 8002d74:	2000030c 	.word	0x2000030c

08002d78 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	b2d9      	uxtb	r1, r3
 8002d8a:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <Set_LED+0x58>)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	b2d9      	uxtb	r1, r3
 8002d96:	4a0e      	ldr	r2, [pc, #56]	; (8002dd0 <Set_LED+0x58>)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	460a      	mov	r2, r1
 8002da0:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	b2d9      	uxtb	r1, r3
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <Set_LED+0x58>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	460a      	mov	r2, r1
 8002db0:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2d9      	uxtb	r1, r3
 8002db6:	4a06      	ldr	r2, [pc, #24]	; (8002dd0 <Set_LED+0x58>)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	70da      	strb	r2, [r3, #3]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000778 	.word	0x20000778

08002dd4 <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50]; // 24 bits leds + 50 eset code

void WS2812_Send (void) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0

	uint32_t indx=0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i = 0; i < MAX_LED; i++) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	e036      	b.n	8002e52 <WS2812_Send+0x7e>

		#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
		#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8002de4:	4a2e      	ldr	r2, [pc, #184]	; (8002ea0 <WS2812_Send+0xcc>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	041a      	lsls	r2, r3, #16
 8002df0:	492b      	ldr	r1, [pc, #172]	; (8002ea0 <WS2812_Send+0xcc>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	789b      	ldrb	r3, [r3, #2]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	4928      	ldr	r1, [pc, #160]	; (8002ea0 <WS2812_Send+0xcc>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	78db      	ldrb	r3, [r3, #3]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	607b      	str	r3, [r7, #4]
		#endif

		for (int i = 23; i >= 0; i--) {
 8002e0c:	2317      	movs	r3, #23
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e019      	b.n	8002e46 <WS2812_Send+0x72>

			if (color&(1 << i)) {
 8002e12:	2201      	movs	r2, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <WS2812_Send+0x5c>
				pwmData[indx] = 57; // duty cycle is 64% from datasheet
 8002e24:	4a1f      	ldr	r2, [pc, #124]	; (8002ea4 <WS2812_Send+0xd0>)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2139      	movs	r1, #57	; 0x39
 8002e2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002e2e:	e004      	b.n	8002e3a <WS2812_Send+0x66>
			}

			else pwmData[indx] = 28;  // if the bit is 0, the duty cycle is 32%
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <WS2812_Send+0xd0>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	211c      	movs	r1, #28
 8002e36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			indx++;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
		for (int i = 23; i >= 0; i--) {
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	dae2      	bge.n	8002e12 <WS2812_Send+0x3e>
	for (int i = 0; i < MAX_LED; i++) {
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b19      	cmp	r3, #25
 8002e56:	ddc5      	ble.n	8002de4 <WS2812_Send+0x10>
		}
	}

	for (int i = 0; i < 50; i++) { // reset code
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e00a      	b.n	8002e74 <WS2812_Send+0xa0>
		pwmData[indx] = 0;
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <WS2812_Send+0xd0>)
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2100      	movs	r1, #0
 8002e64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 50; i++) { // reset code
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3301      	adds	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b31      	cmp	r3, #49	; 0x31
 8002e78:	ddf1      	ble.n	8002e5e <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send to dma
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <WS2812_Send+0xd0>)
 8002e80:	2100      	movs	r1, #0
 8002e82:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <WS2812_Send+0xd4>)
 8002e84:	f007 ff72 	bl	800ad6c <HAL_TIM_PWM_Start_DMA>

	while (!datasentflag){};  // set flag when data has been transmitted
 8002e88:	bf00      	nop
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <WS2812_Send+0xd8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0fb      	beq.n	8002e8a <WS2812_Send+0xb6>
	datasentflag = 0;
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <WS2812_Send+0xd8>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000778 	.word	0x20000778
 8002ea4:	20000850 	.word	0x20000850
 8002ea8:	20000ef8 	.word	0x20000ef8
 8002eac:	2000030c 	.word	0x2000030c

08002eb0 <MPU6050_Init_L>:

void MPU6050_Init_L(void) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af04      	add	r7, sp, #16

	uint8_t check;
	uint8_t Data;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	1dfb      	adds	r3, r7, #7
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	2275      	movs	r2, #117	; 0x75
 8002ec8:	21d0      	movs	r1, #208	; 0xd0
 8002eca:	4823      	ldr	r0, [pc, #140]	; (8002f58 <MPU6050_Init_L+0xa8>)
 8002ecc:	f005 fbb0 	bl	8008630 <HAL_I2C_Mem_Read>

	if (check == 104) { // 0x68 will be returned by the sensor if everything goes well
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	2b68      	cmp	r3, #104	; 0x68
 8002ed4:	d13b      	bne.n	8002f4e <MPU6050_Init_L+0x9e>
    // power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8002eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ede:	9302      	str	r3, [sp, #8]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	9301      	str	r3, [sp, #4]
 8002ee4:	1dbb      	adds	r3, r7, #6
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2301      	movs	r3, #1
 8002eea:	226b      	movs	r2, #107	; 0x6b
 8002eec:	21d0      	movs	r1, #208	; 0xd0
 8002eee:	481a      	ldr	r0, [pc, #104]	; (8002f58 <MPU6050_Init_L+0xa8>)
 8002ef0:	f005 fa98 	bl	8008424 <HAL_I2C_Mem_Write>

    // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	2301      	movs	r3, #1
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	1dbb      	adds	r3, r7, #6
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2301      	movs	r3, #1
 8002f08:	2219      	movs	r2, #25
 8002f0a:	21d0      	movs	r1, #208	; 0xd0
 8002f0c:	4812      	ldr	r0, [pc, #72]	; (8002f58 <MPU6050_Init_L+0xa8>)
 8002f0e:	f005 fa89 	bl	8008424 <HAL_I2C_Mem_Write>

    // Set accelerometer configuration in ACCEL_CONFIG Register
    // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
		Data = 0x00;
 8002f12:	2300      	movs	r3, #0
 8002f14:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	1dbb      	adds	r3, r7, #6
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2301      	movs	r3, #1
 8002f26:	221c      	movs	r2, #28
 8002f28:	21d0      	movs	r1, #208	; 0xd0
 8002f2a:	480b      	ldr	r0, [pc, #44]	; (8002f58 <MPU6050_Init_L+0xa8>)
 8002f2c:	f005 fa7a 	bl	8008424 <HAL_I2C_Mem_Write>

    // Set Gyroscopic configuration in GYRO_CONFIG Register
    // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
    	Data = 0x00;
 8002f30:	2300      	movs	r3, #0
 8002f32:	71bb      	strb	r3, [r7, #6]
    	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8002f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f38:	9302      	str	r3, [sp, #8]
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	1dbb      	adds	r3, r7, #6
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	2301      	movs	r3, #1
 8002f44:	221b      	movs	r2, #27
 8002f46:	21d0      	movs	r1, #208	; 0xd0
 8002f48:	4803      	ldr	r0, [pc, #12]	; (8002f58 <MPU6050_Init_L+0xa8>)
 8002f4a:	f005 fa6b 	bl	8008424 <HAL_I2C_Mem_Write>
	}

}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200004a8 	.word	0x200004a8
 8002f5c:	00000000 	.word	0x00000000

08002f60 <MPU6050_Read_Accel_L>:
    	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
	}

}

void MPU6050_Read_Accel_L (void) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6a:	9302      	str	r3, [sp, #8]
 8002f6c:	2306      	movs	r3, #6
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	463b      	mov	r3, r7
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2301      	movs	r3, #1
 8002f76:	223b      	movs	r2, #59	; 0x3b
 8002f78:	21d0      	movs	r1, #208	; 0xd0
 8002f7a:	4835      	ldr	r0, [pc, #212]	; (8003050 <MPU6050_Read_Accel_L+0xf0>)
 8002f7c:	f005 fb58 	bl	8008630 <HAL_I2C_Mem_Read>

	Accel_X_RAW_L = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8002f80:	783b      	ldrb	r3, [r7, #0]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	b21a      	sxth	r2, r3
 8002f86:	787b      	ldrb	r3, [r7, #1]
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	4b31      	ldr	r3, [pc, #196]	; (8003054 <MPU6050_Read_Accel_L+0xf4>)
 8002f90:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW_L = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8002f92:	78bb      	ldrb	r3, [r7, #2]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b21a      	sxth	r2, r3
 8002fa0:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <MPU6050_Read_Accel_L+0xf8>)
 8002fa2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW_L = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002fa4:	793b      	ldrb	r3, [r7, #4]
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	b21a      	sxth	r2, r3
 8002faa:	797b      	ldrb	r3, [r7, #5]
 8002fac:	b21b      	sxth	r3, r3
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	b21a      	sxth	r2, r3
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	; (800305c <MPU6050_Read_Accel_L+0xfc>)
 8002fb4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
       we have to divide according to the Full scale value set in FS_SEL
       I have configured FS_SEL = 0. So I am dividing by 16384.0
       for more details check ACCEL_CONFIG Register              ****/

	Lx = Accel_X_RAW_L/16384.0;
 8002fb6:	4b27      	ldr	r3, [pc, #156]	; (8003054 <MPU6050_Read_Accel_L+0xf4>)
 8002fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fab9 	bl	8000534 <__aeabi_i2d>
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <MPU6050_Read_Accel_L+0x100>)
 8002fc8:	f7fd fc48 	bl	800085c <__aeabi_ddiv>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f7fd fdf0 	bl	8000bb8 <__aeabi_d2f>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4a22      	ldr	r2, [pc, #136]	; (8003064 <MPU6050_Read_Accel_L+0x104>)
 8002fdc:	6013      	str	r3, [r2, #0]
	Ly = Accel_Y_RAW_L/16384.0;
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <MPU6050_Read_Accel_L+0xf8>)
 8002fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd faa5 	bl	8000534 <__aeabi_i2d>
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <MPU6050_Read_Accel_L+0x100>)
 8002ff0:	f7fd fc34 	bl	800085c <__aeabi_ddiv>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f7fd fddc 	bl	8000bb8 <__aeabi_d2f>
 8003000:	4603      	mov	r3, r0
 8003002:	4a19      	ldr	r2, [pc, #100]	; (8003068 <MPU6050_Read_Accel_L+0x108>)
 8003004:	6013      	str	r3, [r2, #0]
	Lz = (Accel_Z_RAW_L/16384.0) - ACCEL_ERROR;
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <MPU6050_Read_Accel_L+0xfc>)
 8003008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fa91 	bl	8000534 <__aeabi_i2d>
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	4b12      	ldr	r3, [pc, #72]	; (8003060 <MPU6050_Read_Accel_L+0x100>)
 8003018:	f7fd fc20 	bl	800085c <__aeabi_ddiv>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	a308      	add	r3, pc, #32	; (adr r3, 8003048 <MPU6050_Read_Accel_L+0xe8>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd f935 	bl	8000298 <__aeabi_dsub>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f7fd fdbf 	bl	8000bb8 <__aeabi_d2f>
 800303a:	4603      	mov	r3, r0
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <MPU6050_Read_Accel_L+0x10c>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	8f5c28f6 	.word	0x8f5c28f6
 800304c:	3fc8f5c2 	.word	0x3fc8f5c2
 8003050:	200004a8 	.word	0x200004a8
 8003054:	20000310 	.word	0x20000310
 8003058:	20000312 	.word	0x20000312
 800305c:	20000314 	.word	0x20000314
 8003060:	40d00000 	.word	0x40d00000
 8003064:	20000d9c 	.word	0x20000d9c
 8003068:	20000d94 	.word	0x20000d94
 800306c:	20000d98 	.word	0x20000d98

08003070 <show_accelerometer>:
}

int16_t buffer[3] = {0};


void show_accelerometer(void) {
 8003070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003074:	af00      	add	r7, sp, #0

  BSP_ACCELERO_GetXYZ(buffer);
 8003076:	483a      	ldr	r0, [pc, #232]	; (8003160 <show_accelerometer+0xf0>)
 8003078:	f000 ff68 	bl	8003f4c <BSP_ACCELERO_GetXYZ>
	Fall_Down_X = (buffer[0]/16)/1000.0;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <show_accelerometer+0xf0>)
 800307e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003082:	2b00      	cmp	r3, #0
 8003084:	da00      	bge.n	8003088 <show_accelerometer+0x18>
 8003086:	330f      	adds	r3, #15
 8003088:	111b      	asrs	r3, r3, #4
 800308a:	b21b      	sxth	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa51 	bl	8000534 <__aeabi_i2d>
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	4b33      	ldr	r3, [pc, #204]	; (8003164 <show_accelerometer+0xf4>)
 8003098:	f7fd fbe0 	bl	800085c <__aeabi_ddiv>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4931      	ldr	r1, [pc, #196]	; (8003168 <show_accelerometer+0xf8>)
 80030a2:	e9c1 2300 	strd	r2, r3, [r1]
	Fall_Down_Y = (double)(buffer[1]/16)/1000.0;
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <show_accelerometer+0xf0>)
 80030a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <show_accelerometer+0x42>
 80030b0:	330f      	adds	r3, #15
 80030b2:	111b      	asrs	r3, r3, #4
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fa3c 	bl	8000534 <__aeabi_i2d>
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <show_accelerometer+0xf4>)
 80030c2:	f7fd fbcb 	bl	800085c <__aeabi_ddiv>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4928      	ldr	r1, [pc, #160]	; (800316c <show_accelerometer+0xfc>)
 80030cc:	e9c1 2300 	strd	r2, r3, [r1]
	Fall_Down_Z = (double)(buffer[2]/16)/1000.0;
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <show_accelerometer+0xf0>)
 80030d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da00      	bge.n	80030dc <show_accelerometer+0x6c>
 80030da:	330f      	adds	r3, #15
 80030dc:	111b      	asrs	r3, r3, #4
 80030de:	b21b      	sxth	r3, r3
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd fa27 	bl	8000534 <__aeabi_i2d>
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <show_accelerometer+0xf4>)
 80030ec:	f7fd fbb6 	bl	800085c <__aeabi_ddiv>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	491e      	ldr	r1, [pc, #120]	; (8003170 <show_accelerometer+0x100>)
 80030f6:	e9c1 2300 	strd	r2, r3, [r1]

  if (fabs(Fall_Down_Z) > 0.85 ||  fabs(Fall_Down_X) > 0.8) {
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <show_accelerometer+0x100>)
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	4690      	mov	r8, r2
 8003102:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003106:	a312      	add	r3, pc, #72	; (adr r3, 8003150 <show_accelerometer+0xe0>)
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	4640      	mov	r0, r8
 800310e:	4649      	mov	r1, r9
 8003110:	f7fd fd0a 	bl	8000b28 <__aeabi_dcmpgt>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <show_accelerometer+0xca>
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <show_accelerometer+0xf8>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	4614      	mov	r4, r2
 8003122:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003126:	a30c      	add	r3, pc, #48	; (adr r3, 8003158 <show_accelerometer+0xe8>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	4620      	mov	r0, r4
 800312e:	4629      	mov	r1, r5
 8003130:	f7fd fcfa 	bl	8000b28 <__aeabi_dcmpgt>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <show_accelerometer+0xd0>
	  fall_down = 1;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <show_accelerometer+0x104>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  }

  loop_counter++;
 8003140:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <show_accelerometer+0x108>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3301      	adds	r3, #1
 8003146:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <show_accelerometer+0x108>)
 8003148:	6013      	str	r3, [r2, #0]

}
 800314a:	bf00      	nop
 800314c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003150:	33333333 	.word	0x33333333
 8003154:	3feb3333 	.word	0x3feb3333
 8003158:	9999999a 	.word	0x9999999a
 800315c:	3fe99999 	.word	0x3fe99999
 8003160:	20000330 	.word	0x20000330
 8003164:	408f4000 	.word	0x408f4000
 8003168:	20000318 	.word	0x20000318
 800316c:	20000320 	.word	0x20000320
 8003170:	20000328 	.word	0x20000328
 8003174:	200002f4 	.word	0x200002f4
 8003178:	20000304 	.word	0x20000304

0800317c <attention_signal.10465>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	  void attention_signal() {
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	f8c7 c004 	str.w	ip, [r7, #4]

		  for (int i = 0; i < 30; i++) {
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e008      	b.n	800319e <attention_signal.10465+0x22>
			  Set_LED(i, 139, 0, 0);
 800318c:	2300      	movs	r3, #0
 800318e:	2200      	movs	r2, #0
 8003190:	218b      	movs	r1, #139	; 0x8b
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff fdf0 	bl	8002d78 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b1d      	cmp	r3, #29
 80031a2:	ddf3      	ble.n	800318c <attention_signal.10465+0x10>
		  }

		  WS2812_Send();
 80031a4:	f7ff fe16 	bl	8002dd4 <WS2812_Send>
		  HAL_Delay(700);
 80031a8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80031ac:	f001 fb6e 	bl	800488c <HAL_Delay>

		  for (int i = 0; i < 30; i++) {
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	e008      	b.n	80031c8 <attention_signal.10465+0x4c>
			  Set_LED(i, 0, 0, 0);
 80031b6:	2300      	movs	r3, #0
 80031b8:	2200      	movs	r2, #0
 80031ba:	2100      	movs	r1, #0
 80031bc:	68b8      	ldr	r0, [r7, #8]
 80031be:	f7ff fddb 	bl	8002d78 <Set_LED>
		  for (int i = 0; i < 30; i++) {
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b1d      	cmp	r3, #29
 80031cc:	ddf3      	ble.n	80031b6 <attention_signal.10465+0x3a>
		  }

		  WS2812_Send();
 80031ce:	f7ff fe01 	bl	8002dd4 <WS2812_Send>
		  HAL_Delay(550);
 80031d2:	f240 2026 	movw	r0, #550	; 0x226
 80031d6:	f001 fb59 	bl	800488c <HAL_Delay>

	  };
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	0000      	movs	r0, r0
 80031e4:	0000      	movs	r0, r0
	...

080031e8 <main>:
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af02      	add	r7, sp, #8
int main(void)
 80031ee:	f107 0318 	add.w	r3, r7, #24
 80031f2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031f4:	f001 fad8 	bl	80047a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031f8:	f000 f998 	bl	800352c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031fc:	f7fe ff50 	bl	80020a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003200:	f7ff f886 	bl	8002310 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003204:	f000 fa0a 	bl	800361c <MX_SPI1_Init>
  MX_DMA_Init();
 8003208:	f7fe ff22 	bl	8002050 <MX_DMA_Init>
  MX_USB_HOST_Init();
 800320c:	f00c ff44 	bl	8010098 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8003210:	f001 f8dc 	bl	80043cc <MX_TIM1_Init>
  MX_ADC1_Init();
 8003214:	f7fe fe44 	bl	8001ea0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8003218:	f000 fa36 	bl	8003688 <MX_SPI2_Init>
  MX_TIM10_Init();
 800321c:	f001 f976 	bl	800450c <MX_TIM10_Init>
  MX_I2C2_Init();
 8003220:	f7ff f8a4 	bl	800236c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  lcd1.hw_conf.spi_handle = &hspi2;
 8003224:	4b62      	ldr	r3, [pc, #392]	; (80033b0 <main+0x1c8>)
 8003226:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <main+0x1cc>)
 8003228:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 800322a:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <main+0x1c8>)
 800322c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003230:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 8003232:	4b5f      	ldr	r3, [pc, #380]	; (80033b0 <main+0x1c8>)
 8003234:	4a60      	ldr	r2, [pc, #384]	; (80033b8 <main+0x1d0>)
 8003236:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <main+0x1c8>)
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 800323e:	4b5c      	ldr	r3, [pc, #368]	; (80033b0 <main+0x1c8>)
 8003240:	4a5d      	ldr	r2, [pc, #372]	; (80033b8 <main+0x1d0>)
 8003242:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 8003244:	4b5a      	ldr	r3, [pc, #360]	; (80033b0 <main+0x1c8>)
 8003246:	2202      	movs	r2, #2
 8003248:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 800324a:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <main+0x1c8>)
 800324c:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <main+0x1d0>)
 800324e:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8003250:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <main+0x1c8>)
 8003252:	4a5a      	ldr	r2, [pc, #360]	; (80033bc <main+0x1d4>)
 8003254:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003258:	4614      	mov	r4, r2
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	6861      	ldr	r1, [r4, #4]
 800325e:	68a2      	ldr	r2, [r4, #8]
 8003260:	c307      	stmia	r3!, {r0, r1, r2}
 8003262:	89a2      	ldrh	r2, [r4, #12]
 8003264:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8003266:	2303      	movs	r3, #3
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2302      	movs	r3, #2
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	210c      	movs	r1, #12
 8003270:	484f      	ldr	r0, [pc, #316]	; (80033b0 <main+0x1c8>)
 8003272:	f7ff fc91 	bl	8002b98 <LCD5110_init>

  if (BSP_ACCELERO_Init() != HAL_OK) {
 8003276:	f000 fda7 	bl	8003dc8 <BSP_ACCELERO_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d005      	beq.n	800328c <main+0xa4>
    /* Initialization Error */
	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 8003280:	4a4b      	ldr	r2, [pc, #300]	; (80033b0 <main+0x1c8>)
 8003282:	2101      	movs	r1, #1
 8003284:	484e      	ldr	r0, [pc, #312]	; (80033c0 <main+0x1d8>)
 8003286:	f7ff f973 	bl	8002570 <LCD5110_print>
	  while(1){}
 800328a:	e7fe      	b.n	800328a <main+0xa2>
  }

  if (BSP_GYRO_Init() != HAL_OK) {
 800328c:	f000 fe8a 	bl	8003fa4 <BSP_GYRO_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <main+0xba>
	  /* Initialization Error */
	  LCD5110_print("Error initializing HAL.", BLACK, &lcd1);
 8003296:	4a46      	ldr	r2, [pc, #280]	; (80033b0 <main+0x1c8>)
 8003298:	2101      	movs	r1, #1
 800329a:	4849      	ldr	r0, [pc, #292]	; (80033c0 <main+0x1d8>)
 800329c:	f7ff f968 	bl	8002570 <LCD5110_print>
	  while(1){}
 80032a0:	e7fe      	b.n	80032a0 <main+0xb8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  MPU6050_Init_L();
 80032a2:	f7ff fe05 	bl	8002eb0 <MPU6050_Init_L>
//  MPU6050_Init_R();
  TIM10_reinit();
 80032a6:	f7ff fd3d 	bl	8002d24 <TIM10_reinit>

  while (1)
  {

	  if ((Lz > LZ_ACTIVE_BOUND || Rx > RX_ACTIVE_BOUND) & fall_down == 0) {
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <main+0x1dc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fd f952 	bl	8000558 <__aeabi_f2d>
 80032b4:	a33c      	add	r3, pc, #240	; (adr r3, 80033a8 <main+0x1c0>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd fc35 	bl	8000b28 <__aeabi_dcmpgt>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10c      	bne.n	80032de <main+0xf6>
 80032c4:	4b40      	ldr	r3, [pc, #256]	; (80033c8 <main+0x1e0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f945 	bl	8000558 <__aeabi_f2d>
 80032ce:	a336      	add	r3, pc, #216	; (adr r3, 80033a8 <main+0x1c0>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f7fd fc28 	bl	8000b28 <__aeabi_dcmpgt>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <main+0xfa>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <main+0xfc>
 80032e2:	2300      	movs	r3, #0
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <main+0x1e4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf0c      	ite	eq
 80032f2:	2301      	moveq	r3, #1
 80032f4:	2300      	movne	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	4013      	ands	r3, r2
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <main+0x124>
		  turn_signal(1);
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	469c      	mov	ip, r3
 8003304:	2001      	movs	r0, #1
 8003306:	f000 f869 	bl	80033dc <turn_signal.10476>
 800330a:	e047      	b.n	800339c <main+0x1b4>
	  } else if ((Rz > RZ_ACTIVE_BOUND || Lx > LX_ACTIVE_BOUND) & fall_down == 0) {
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <main+0x1e8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd f921 	bl	8000558 <__aeabi_f2d>
 8003316:	a324      	add	r3, pc, #144	; (adr r3, 80033a8 <main+0x1c0>)
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f7fd fc04 	bl	8000b28 <__aeabi_dcmpgt>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10c      	bne.n	8003340 <main+0x158>
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <main+0x1ec>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f914 	bl	8000558 <__aeabi_f2d>
 8003330:	a31d      	add	r3, pc, #116	; (adr r3, 80033a8 <main+0x1c0>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd fbf7 	bl	8000b28 <__aeabi_dcmpgt>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <main+0x15c>
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <main+0x15e>
 8003344:	2300      	movs	r3, #0
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	b2da      	uxtb	r2, r3
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <main+0x1e4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4013      	ands	r3, r2
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <main+0x188>
		  turn_signal(-1);
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	469c      	mov	ip, r3
 8003366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336a:	f000 f837 	bl	80033dc <turn_signal.10476>
 800336e:	e015      	b.n	800339c <main+0x1b4>
		} else if (button_is_pressed) {
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <main+0x1f0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <main+0x19a>
			warning_signal();
 8003378:	1d3b      	adds	r3, r7, #4
 800337a:	469c      	mov	ip, r3
 800337c:	f000 f87e 	bl	800347c <warning_signal.10491>
 8003380:	e00c      	b.n	800339c <main+0x1b4>
		} else if (fall_down) {
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <main+0x1e4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d004      	beq.n	8003394 <main+0x1ac>
			warning_signal();
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	469c      	mov	ip, r3
 800338e:	f000 f875 	bl	800347c <warning_signal.10491>
 8003392:	e003      	b.n	800339c <main+0x1b4>
		}
	  else {
			attention_signal();
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	469c      	mov	ip, r3
 8003398:	f7ff fef0 	bl	800317c <attention_signal.10465>




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800339c:	f00c fea2 	bl	80100e4 <MX_USB_HOST_Process>
	  if ((Lz > LZ_ACTIVE_BOUND || Rx > RX_ACTIVE_BOUND) & fall_down == 0) {
 80033a0:	e783      	b.n	80032aa <main+0xc2>
 80033a2:	bf00      	nop
 80033a4:	f3af 8000 	nop.w
 80033a8:	a3d70a3d 	.word	0xa3d70a3d
 80033ac:	3fea3d70 	.word	0x3fea3d70
 80033b0:	20000554 	.word	0x20000554
 80033b4:	20000da0 	.word	0x20000da0
 80033b8:	40020400 	.word	0x40020400
 80033bc:	08013930 	.word	0x08013930
 80033c0:	080130d8 	.word	0x080130d8
 80033c4:	20000d98 	.word	0x20000d98
 80033c8:	2000084c 	.word	0x2000084c
 80033cc:	200002f4 	.word	0x200002f4
 80033d0:	20000848 	.word	0x20000848
 80033d4:	20000d9c 	.word	0x20000d9c
 80033d8:	20000300 	.word	0x20000300

080033dc <turn_signal.10476>:
	  void turn_signal (int direction) {
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	f8c7 c000 	str.w	ip, [r7]
		  int mid = MAX_LED / 2;
 80033e8:	230d      	movs	r3, #13
 80033ea:	60bb      	str	r3, [r7, #8]
		  if (direction == -1) {
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f2:	d113      	bne.n	800341c <turn_signal.10476+0x40>
			  for (int i = mid; i >= 0; i--) {
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	e00d      	b.n	8003416 <turn_signal.10476+0x3a>
				  Set_LED(i, 255, 69, 0);
 80033fa:	2300      	movs	r3, #0
 80033fc:	2245      	movs	r2, #69	; 0x45
 80033fe:	21ff      	movs	r1, #255	; 0xff
 8003400:	6978      	ldr	r0, [r7, #20]
 8003402:	f7ff fcb9 	bl	8002d78 <Set_LED>
				  WS2812_Send();
 8003406:	f7ff fce5 	bl	8002dd4 <WS2812_Send>
				  HAL_Delay(30);
 800340a:	201e      	movs	r0, #30
 800340c:	f001 fa3e 	bl	800488c <HAL_Delay>
			  for (int i = mid; i >= 0; i--) {
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3b01      	subs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	daee      	bge.n	80033fa <turn_signal.10476+0x1e>
		  if (direction == 1) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d113      	bne.n	800344a <turn_signal.10476+0x6e>
			  for (int i = mid; i < MAX_LED; i++) {
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	e00d      	b.n	8003444 <turn_signal.10476+0x68>
				  Set_LED(i, 255, 69, 0);
 8003428:	2300      	movs	r3, #0
 800342a:	2245      	movs	r2, #69	; 0x45
 800342c:	21ff      	movs	r1, #255	; 0xff
 800342e:	6938      	ldr	r0, [r7, #16]
 8003430:	f7ff fca2 	bl	8002d78 <Set_LED>
				  WS2812_Send();
 8003434:	f7ff fcce 	bl	8002dd4 <WS2812_Send>
				  HAL_Delay(30);
 8003438:	201e      	movs	r0, #30
 800343a:	f001 fa27 	bl	800488c <HAL_Delay>
			  for (int i = mid; i < MAX_LED; i++) {
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	3301      	adds	r3, #1
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2b19      	cmp	r3, #25
 8003448:	ddee      	ble.n	8003428 <turn_signal.10476+0x4c>
		 for (int i = 0; i < MAX_LED; i++) {
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e008      	b.n	8003462 <turn_signal.10476+0x86>
			 Set_LED(i, 0, 0, 0);
 8003450:	2300      	movs	r3, #0
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff fc8e 	bl	8002d78 <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b19      	cmp	r3, #25
 8003466:	ddf3      	ble.n	8003450 <turn_signal.10476+0x74>
		 HAL_Delay(120);
 8003468:	2078      	movs	r0, #120	; 0x78
 800346a:	f001 fa0f 	bl	800488c <HAL_Delay>
		 WS2812_Send();
 800346e:	f7ff fcb1 	bl	8002dd4 <WS2812_Send>
	  };
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <warning_signal.10491>:
	  void warning_signal() {
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	f8c7 c004 	str.w	ip, [r7, #4]
		  int mid = MAX_LED / 2;
 8003486:	230d      	movs	r3, #13
 8003488:	60fb      	str	r3, [r7, #12]
		  for (int i = 0; i <= mid; i++) {
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e017      	b.n	80034c0 <warning_signal.10491+0x44>
			  Set_LED(mid + i, 255, 69, 0);
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	18d0      	adds	r0, r2, r3
 8003496:	2300      	movs	r3, #0
 8003498:	2245      	movs	r2, #69	; 0x45
 800349a:	21ff      	movs	r1, #255	; 0xff
 800349c:	f7ff fc6c 	bl	8002d78 <Set_LED>
			  Set_LED(mid - i, 255, 69, 0);
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	1ad0      	subs	r0, r2, r3
 80034a6:	2300      	movs	r3, #0
 80034a8:	2245      	movs	r2, #69	; 0x45
 80034aa:	21ff      	movs	r1, #255	; 0xff
 80034ac:	f7ff fc64 	bl	8002d78 <Set_LED>
			  WS2812_Send();
 80034b0:	f7ff fc90 	bl	8002dd4 <WS2812_Send>
			  HAL_Delay(30);
 80034b4:	201e      	movs	r0, #30
 80034b6:	f001 f9e9 	bl	800488c <HAL_Delay>
		  for (int i = 0; i <= mid; i++) {
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3301      	adds	r3, #1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	dde3      	ble.n	8003490 <warning_signal.10491+0x14>
		 for (int i = 0; i < MAX_LED; i++) {
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e008      	b.n	80034e0 <warning_signal.10491+0x64>
		 	Set_LED(i, 0, 0, 0);
 80034ce:	2300      	movs	r3, #0
 80034d0:	2200      	movs	r2, #0
 80034d2:	2100      	movs	r1, #0
 80034d4:	6938      	ldr	r0, [r7, #16]
 80034d6:	f7ff fc4f 	bl	8002d78 <Set_LED>
		 for (int i = 0; i < MAX_LED; i++) {
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3301      	adds	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b19      	cmp	r3, #25
 80034e4:	ddf3      	ble.n	80034ce <warning_signal.10491+0x52>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80034e6:	2201      	movs	r2, #1
 80034e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ec:	480e      	ldr	r0, [pc, #56]	; (8003528 <warning_signal.10491+0xac>)
 80034ee:	f002 ffbb 	bl	8006468 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80034f2:	2201      	movs	r2, #1
 80034f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <warning_signal.10491+0xac>)
 80034fa:	f002 ffb5 	bl	8006468 <HAL_GPIO_WritePin>
		 HAL_Delay(120);
 80034fe:	2078      	movs	r0, #120	; 0x78
 8003500:	f001 f9c4 	bl	800488c <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8003504:	2200      	movs	r2, #0
 8003506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800350a:	4807      	ldr	r0, [pc, #28]	; (8003528 <warning_signal.10491+0xac>)
 800350c:	f002 ffac 	bl	8006468 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8003510:	2200      	movs	r2, #0
 8003512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003516:	4804      	ldr	r0, [pc, #16]	; (8003528 <warning_signal.10491+0xac>)
 8003518:	f002 ffa6 	bl	8006468 <HAL_GPIO_WritePin>
		 WS2812_Send();
 800351c:	f7ff fc5a 	bl	8002dd4 <WS2812_Send>
	  };
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40020c00 	.word	0x40020c00

0800352c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b094      	sub	sp, #80	; 0x50
 8003530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003532:	f107 0320 	add.w	r3, r7, #32
 8003536:	2230      	movs	r2, #48	; 0x30
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f00d f8ee 	bl	801071c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <SystemClock_Config+0xc8>)
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	4a26      	ldr	r2, [pc, #152]	; (80035f4 <SystemClock_Config+0xc8>)
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355e:	6413      	str	r3, [r2, #64]	; 0x40
 8003560:	4b24      	ldr	r3, [pc, #144]	; (80035f4 <SystemClock_Config+0xc8>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800356c:	2300      	movs	r3, #0
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <SystemClock_Config+0xcc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a20      	ldr	r2, [pc, #128]	; (80035f8 <SystemClock_Config+0xcc>)
 8003576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <SystemClock_Config+0xcc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003588:	2301      	movs	r3, #1
 800358a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800358c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003592:	2302      	movs	r3, #2
 8003594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800359c:	2304      	movs	r3, #4
 800359e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80035a0:	2348      	movs	r3, #72	; 0x48
 80035a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035a4:	2302      	movs	r3, #2
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80035a8:	2303      	movs	r3, #3
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035ac:	f107 0320 	add.w	r3, r7, #32
 80035b0:	4618      	mov	r0, r3
 80035b2:	f005 fdd9 	bl	8009168 <HAL_RCC_OscConfig>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80035bc:	f000 f81e 	bl	80035fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c0:	230f      	movs	r3, #15
 80035c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c4:	2302      	movs	r3, #2
 80035c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035d6:	f107 030c 	add.w	r3, r7, #12
 80035da:	2102      	movs	r1, #2
 80035dc:	4618      	mov	r0, r3
 80035de:	f006 f8eb 	bl	80097b8 <HAL_RCC_ClockConfig>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80035e8:	f000 f808 	bl	80035fc <Error_Handler>
  }
}
 80035ec:	bf00      	nop
 80035ee:	3750      	adds	r7, #80	; 0x50
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40007000 	.word	0x40007000

080035fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003600:	b672      	cpsid	i
}
 8003602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003604:	e7fe      	b.n	8003604 <Error_Handler+0x8>

08003606 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003620:	4b17      	ldr	r3, [pc, #92]	; (8003680 <MX_SPI1_Init+0x64>)
 8003622:	4a18      	ldr	r2, [pc, #96]	; (8003684 <MX_SPI1_Init+0x68>)
 8003624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003626:	4b16      	ldr	r3, [pc, #88]	; (8003680 <MX_SPI1_Init+0x64>)
 8003628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800362c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800362e:	4b14      	ldr	r3, [pc, #80]	; (8003680 <MX_SPI1_Init+0x64>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003634:	4b12      	ldr	r3, [pc, #72]	; (8003680 <MX_SPI1_Init+0x64>)
 8003636:	2200      	movs	r2, #0
 8003638:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <MX_SPI1_Init+0x64>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <MX_SPI1_Init+0x64>)
 8003642:	2200      	movs	r2, #0
 8003644:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <MX_SPI1_Init+0x64>)
 8003648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <MX_SPI1_Init+0x64>)
 8003650:	2200      	movs	r2, #0
 8003652:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <MX_SPI1_Init+0x64>)
 8003656:	2200      	movs	r2, #0
 8003658:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <MX_SPI1_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <MX_SPI1_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <MX_SPI1_Init+0x64>)
 8003668:	220a      	movs	r2, #10
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800366c:	4804      	ldr	r0, [pc, #16]	; (8003680 <MX_SPI1_Init+0x64>)
 800366e:	f006 fb33 	bl	8009cd8 <HAL_SPI_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003678:	f7ff ffc0 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000df8 	.word	0x20000df8
 8003684:	40013000 	.word	0x40013000

08003688 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800368c:	4b17      	ldr	r3, [pc, #92]	; (80036ec <MX_SPI2_Init+0x64>)
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <MX_SPI2_Init+0x68>)
 8003690:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <MX_SPI2_Init+0x64>)
 8003694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003698:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <MX_SPI2_Init+0x64>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036a0:	4b12      	ldr	r3, [pc, #72]	; (80036ec <MX_SPI2_Init+0x64>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a6:	4b11      	ldr	r3, [pc, #68]	; (80036ec <MX_SPI2_Init+0x64>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <MX_SPI2_Init+0x64>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <MX_SPI2_Init+0x64>)
 80036b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80036ba:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <MX_SPI2_Init+0x64>)
 80036bc:	2210      	movs	r2, #16
 80036be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <MX_SPI2_Init+0x64>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <MX_SPI2_Init+0x64>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <MX_SPI2_Init+0x64>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <MX_SPI2_Init+0x64>)
 80036d4:	220a      	movs	r2, #10
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036d8:	4804      	ldr	r0, [pc, #16]	; (80036ec <MX_SPI2_Init+0x64>)
 80036da:	f006 fafd 	bl	8009cd8 <HAL_SPI_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80036e4:	f7ff ff8a 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036e8:	bf00      	nop
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000da0 	.word	0x20000da0
 80036f0:	40003800 	.word	0x40003800

080036f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08c      	sub	sp, #48	; 0x30
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a32      	ldr	r2, [pc, #200]	; (80037dc <HAL_SPI_MspInit+0xe8>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d12c      	bne.n	8003770 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	4a30      	ldr	r2, [pc, #192]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 8003720:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003724:	6453      	str	r3, [r2, #68]	; 0x44
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	4b2a      	ldr	r3, [pc, #168]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800374e:	23e0      	movs	r3, #224	; 0xe0
 8003750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003752:	2302      	movs	r3, #2
 8003754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375a:	2303      	movs	r3, #3
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800375e:	2305      	movs	r3, #5
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	4619      	mov	r1, r3
 8003768:	481e      	ldr	r0, [pc, #120]	; (80037e4 <HAL_SPI_MspInit+0xf0>)
 800376a:	f002 fadf 	bl	8005d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800376e:	e031      	b.n	80037d4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <HAL_SPI_MspInit+0xf4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d12c      	bne.n	80037d4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 8003784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003788:	6413      	str	r3, [r2, #64]	; 0x40
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HAL_SPI_MspInit+0xec>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80037b2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c0:	2303      	movs	r3, #3
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037c4:	2305      	movs	r3, #5
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	4619      	mov	r1, r3
 80037ce:	4807      	ldr	r0, [pc, #28]	; (80037ec <HAL_SPI_MspInit+0xf8>)
 80037d0:	f002 faac 	bl	8005d2c <HAL_GPIO_Init>
}
 80037d4:	bf00      	nop
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40013000 	.word	0x40013000
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40003800 	.word	0x40003800
 80037ec:	40020400 	.word	0x40020400

080037f0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a10      	ldr	r2, [pc, #64]	; (8003840 <HAL_SPI_MspDeInit+0x50>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10a      	bne.n	8003818 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_SPI_MspDeInit+0x54>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_SPI_MspDeInit+0x54>)
 8003808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800380c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 800380e:	21e0      	movs	r1, #224	; 0xe0
 8003810:	480d      	ldr	r0, [pc, #52]	; (8003848 <HAL_SPI_MspDeInit+0x58>)
 8003812:	f002 fd27 	bl	8006264 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8003816:	e00f      	b.n	8003838 <HAL_SPI_MspDeInit+0x48>
  else if(spiHandle->Instance==SPI2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0b      	ldr	r2, [pc, #44]	; (800384c <HAL_SPI_MspDeInit+0x5c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d10a      	bne.n	8003838 <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_SPI_MspDeInit+0x54>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <HAL_SPI_MspDeInit+0x54>)
 8003828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 800382e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8003832:	4807      	ldr	r0, [pc, #28]	; (8003850 <HAL_SPI_MspDeInit+0x60>)
 8003834:	f002 fd16 	bl	8006264 <HAL_GPIO_DeInit>
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40013000 	.word	0x40013000
 8003844:	40023800 	.word	0x40023800
 8003848:	40020000 	.word	0x40020000
 800384c:	40003800 	.word	0x40003800
 8003850:	40020400 	.word	0x40020400

08003854 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003858:	4814      	ldr	r0, [pc, #80]	; (80038ac <I2Cx_Init+0x58>)
 800385a:	f005 f91b 	bl	8008a94 <HAL_I2C_GetState>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d121      	bne.n	80038a8 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <I2Cx_Init+0x58>)
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <I2Cx_Init+0x5c>)
 8003868:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <I2Cx_Init+0x58>)
 800386c:	2243      	movs	r2, #67	; 0x43
 800386e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <I2Cx_Init+0x58>)
 8003872:	4a10      	ldr	r2, [pc, #64]	; (80038b4 <I2Cx_Init+0x60>)
 8003874:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <I2Cx_Init+0x58>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <I2Cx_Init+0x58>)
 800387e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003882:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <I2Cx_Init+0x58>)
 8003886:	2200      	movs	r2, #0
 8003888:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <I2Cx_Init+0x58>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <I2Cx_Init+0x58>)
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <I2Cx_Init+0x58>)
 8003898:	2200      	movs	r2, #0
 800389a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <I2Cx_Init+0x58>)
 800389e:	f000 f86b 	bl	8003978 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80038a2:	4802      	ldr	r0, [pc, #8]	; (80038ac <I2Cx_Init+0x58>)
 80038a4:	f004 fba6 	bl	8007ff4 <HAL_I2C_Init>
  }
}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	2000033c 	.word	0x2000033c
 80038b0:	40005400 	.word	0x40005400
 80038b4:	000186a0 	.word	0x000186a0

080038b8 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af04      	add	r7, sp, #16
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
 80038c2:	460b      	mov	r3, r1
 80038c4:	717b      	strb	r3, [r7, #5]
 80038c6:	4613      	mov	r3, r2
 80038c8:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80038ce:	797b      	ldrb	r3, [r7, #5]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <I2Cx_WriteData+0x48>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	88f9      	ldrh	r1, [r7, #6]
 80038d8:	9302      	str	r3, [sp, #8]
 80038da:	2301      	movs	r3, #1
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	2301      	movs	r3, #1
 80038e4:	4807      	ldr	r0, [pc, #28]	; (8003904 <I2Cx_WriteData+0x4c>)
 80038e6:	f004 fd9d 	bl	8008424 <HAL_I2C_Mem_Write>
 80038ea:	4603      	mov	r3, r0
 80038ec:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80038f4:	f000 f834 	bl	8003960 <I2Cx_Error>
  }
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	200000d0 	.word	0x200000d0
 8003904:	2000033c 	.word	0x2000033c

08003908 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af04      	add	r7, sp, #16
 800390e:	4603      	mov	r3, r0
 8003910:	460a      	mov	r2, r1
 8003912:	80fb      	strh	r3, [r7, #6]
 8003914:	4613      	mov	r3, r2
 8003916:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003918:	2300      	movs	r3, #0
 800391a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003920:	797b      	ldrb	r3, [r7, #5]
 8003922:	b29a      	uxth	r2, r3
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <I2Cx_ReadData+0x50>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	88f9      	ldrh	r1, [r7, #6]
 800392a:	9302      	str	r3, [sp, #8]
 800392c:	2301      	movs	r3, #1
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	f107 030e 	add.w	r3, r7, #14
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	2301      	movs	r3, #1
 8003938:	4808      	ldr	r0, [pc, #32]	; (800395c <I2Cx_ReadData+0x54>)
 800393a:	f004 fe79 	bl	8008630 <HAL_I2C_Mem_Read>
 800393e:	4603      	mov	r3, r0
 8003940:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8003948:	f000 f80a 	bl	8003960 <I2Cx_Error>
  }
  return value;
 800394c:	7bbb      	ldrb	r3, [r7, #14]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200000d0 	.word	0x200000d0
 800395c:	2000033c 	.word	0x2000033c

08003960 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003964:	4803      	ldr	r0, [pc, #12]	; (8003974 <I2Cx_Error+0x14>)
 8003966:	f004 fd11 	bl	800838c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800396a:	f7ff ff73 	bl	8003854 <I2Cx_Init>
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	2000033c 	.word	0x2000033c

08003978 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <I2Cx_MspInit+0xa4>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <I2Cx_MspInit+0xa4>)
 800398a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <I2Cx_MspInit+0xa4>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <I2Cx_MspInit+0xa4>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <I2Cx_MspInit+0xa4>)
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	6313      	str	r3, [r2, #48]	; 0x30
 80039ac:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <I2Cx_MspInit+0xa4>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 80039b8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80039bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80039be:	2312      	movs	r3, #18
 80039c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80039c6:	2302      	movs	r3, #2
 80039c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80039ca:	2304      	movs	r3, #4
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	4812      	ldr	r0, [pc, #72]	; (8003a20 <I2Cx_MspInit+0xa8>)
 80039d6:	f002 f9a9 	bl	8005d2c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <I2Cx_MspInit+0xa4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <I2Cx_MspInit+0xa4>)
 80039e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e4:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <I2Cx_MspInit+0xa4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a0c      	ldr	r2, [pc, #48]	; (8003a1c <I2Cx_MspInit+0xa4>)
 80039ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039f0:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	210f      	movs	r1, #15
 80039f6:	201f      	movs	r0, #31
 80039f8:	f001 fc3a 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80039fc:	201f      	movs	r0, #31
 80039fe:	f001 fc63 	bl	80052c8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	210f      	movs	r1, #15
 8003a06:	2020      	movs	r0, #32
 8003a08:	f001 fc32 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8003a0c:	2020      	movs	r0, #32
 8003a0e:	f001 fc5b 	bl	80052c8 <HAL_NVIC_EnableIRQ>
}
 8003a12:	bf00      	nop
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020400 	.word	0x40020400

08003a24 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization.
  */
static void SPIx_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003a28:	4819      	ldr	r0, [pc, #100]	; (8003a90 <SPIx_Init+0x6c>)
 8003a2a:	f006 fe3d 	bl	800a6a8 <HAL_SPI_GetState>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d12b      	bne.n	8003a8c <SPIx_Init+0x68>
  {
    /* SPI Configuration */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003a34:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <SPIx_Init+0x6c>)
 8003a36:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <SPIx_Init+0x70>)
 8003a38:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       L3GD20 SPI interface max baudrate is 10MHz for write/read
       PCLK2 frequency is set to 90 MHz 
      */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a3a:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <SPIx_Init+0x6c>)
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <SPIx_Init+0x6c>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <SPIx_Init+0x6c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <SPIx_Init+0x6c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <SPIx_Init+0x6c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <SPIx_Init+0x6c>)
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <SPIx_Init+0x6c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <SPIx_Init+0x6c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <SPIx_Init+0x6c>)
 8003a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a70:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <SPIx_Init+0x6c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <SPIx_Init+0x6c>)
 8003a7a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a7e:	605a      	str	r2, [r3, #4]
    
    SPIx_MspInit(&SpiHandle);
 8003a80:	4803      	ldr	r0, [pc, #12]	; (8003a90 <SPIx_Init+0x6c>)
 8003a82:	f000 f835 	bl	8003af0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8003a86:	4802      	ldr	r0, [pc, #8]	; (8003a90 <SPIx_Init+0x6c>)
 8003a88:	f006 f926 	bl	8009cd8 <HAL_SPI_Init>
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20000390 	.word	0x20000390
 8003a94:	40013000 	.word	0x40013000

08003a98 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <SPIx_WriteRead+0x38>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f107 020f 	add.w	r2, r7, #15
 8003aae:	1df9      	adds	r1, r7, #7
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	4807      	ldr	r0, [pc, #28]	; (8003ad4 <SPIx_WriteRead+0x3c>)
 8003ab6:	f006 fc49 	bl	800a34c <HAL_SPI_TransmitReceive>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8003ac0:	f000 f80a 	bl	8003ad8 <SPIx_Error>
  }
  
  return receivedbyte;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200000d4 	.word	0x200000d4
 8003ad4:	20000390 	.word	0x20000390

08003ad8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error (void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003adc:	4803      	ldr	r0, [pc, #12]	; (8003aec <SPIx_Error+0x14>)
 8003ade:	f006 fa97 	bl	800a010 <HAL_SPI_DeInit>
  
  /* Re-Initiaize the SPI comunication BUS */
  SPIx_Init();
 8003ae2:	f7ff ff9f 	bl	8003a24 <SPIx_Init>
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000390 	.word	0x20000390

08003af0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;
  
  /* Enable SPIx clock  */
  DISCOVERY_SPIx_CLOCK_ENABLE();
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <SPIx_MspInit+0x68>)
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <SPIx_MspInit+0x68>)
 8003b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b06:	6453      	str	r3, [r2, #68]	; 0x44
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <SPIx_MspInit+0x68>)
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b10:	613b      	str	r3, [r7, #16]
 8003b12:	693b      	ldr	r3, [r7, #16]
  
  /* Enable SPIx GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <SPIx_MspInit+0x68>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <SPIx_MspInit+0x68>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6313      	str	r3, [r2, #48]	; 0x30
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <SPIx_MspInit+0x68>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure SPIx SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003b30:	23e0      	movs	r3, #224	; 0xe0
 8003b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003b34:	2302      	movs	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003b40:	2305      	movs	r3, #5
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4804      	ldr	r0, [pc, #16]	; (8003b5c <SPIx_MspInit+0x6c>)
 8003b4c:	f002 f8ee 	bl	8005d2c <HAL_GPIO_Init>
}
 8003b50:	bf00      	nop
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40020000 	.word	0x40020000

08003b60 <GYRO_IO_Init>:
/********************************* LINK GYROSCOPE *****************************/
/**
  * @brief  Configures the GYRO SPI interface.
  */
void GYRO_IO_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8003b66:	2300      	movs	r3, #0
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <GYRO_IO_Init+0x8c>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <GYRO_IO_Init+0x8c>)
 8003b70:	f043 0310 	orr.w	r3, r3, #16
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b1d      	ldr	r3, [pc, #116]	; (8003bec <GYRO_IO_Init+0x8c>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8003b82:	2308      	movs	r3, #8
 8003b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8003b86:	2301      	movs	r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	4619      	mov	r1, r3
 8003b98:	4815      	ldr	r0, [pc, #84]	; (8003bf0 <GYRO_IO_Init+0x90>)
 8003b9a:	f002 f8c7 	bl	8005d2c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2108      	movs	r1, #8
 8003ba2:	4813      	ldr	r0, [pc, #76]	; (8003bf0 <GYRO_IO_Init+0x90>)
 8003ba4:	f002 fc60 	bl	8006468 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8003ba8:	2300      	movs	r3, #0
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <GYRO_IO_Init+0x8c>)
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <GYRO_IO_Init+0x8c>)
 8003bb2:	f043 0310 	orr.w	r3, r3, #16
 8003bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <GYRO_IO_Init+0x8c>)
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003bd4:	f107 030c 	add.w	r3, r7, #12
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <GYRO_IO_Init+0x90>)
 8003bdc:	f002 f8a6 	bl	8005d2c <HAL_GPIO_Init>
  
  SPIx_Init();
 8003be0:	f7ff ff20 	bl	8003a24 <SPIx_Init>
}
 8003be4:	bf00      	nop
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <GYRO_IO_Write>:
  * @param  pBuffer: pointer to the buffer  containing the data to be written to the GYRO.
  * @param  WriteAddr : GYRO's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
 8003c00:	4613      	mov	r3, r2
 8003c02:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8003c04:	883b      	ldrh	r3, [r7, #0]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d903      	bls.n	8003c12 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c10:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003c12:	2200      	movs	r2, #0
 8003c14:	2108      	movs	r1, #8
 8003c16:	480f      	ldr	r0, [pc, #60]	; (8003c54 <GYRO_IO_Write+0x60>)
 8003c18:	f002 fc26 	bl	8006468 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff ff3a 	bl	8003a98 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8003c24:	e00a      	b.n	8003c3c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff ff34 	bl	8003a98 <SPIx_WriteRead>
    NumByteToWrite--;
 8003c30:	883b      	ldrh	r3, [r7, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8003c3c:	883b      	ldrh	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f1      	bne.n	8003c26 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003c42:	2201      	movs	r2, #1
 8003c44:	2108      	movs	r1, #8
 8003c46:	4803      	ldr	r0, [pc, #12]	; (8003c54 <GYRO_IO_Write+0x60>)
 8003c48:	f002 fc0e 	bl	8006468 <HAL_GPIO_WritePin>
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000

08003c58 <GYRO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the GYRO.
  * @param  ReadAddr: GYRO's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the GYRO.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
 8003c64:	4613      	mov	r3, r2
 8003c66:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8003c68:	883b      	ldrh	r3, [r7, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d904      	bls.n	8003c78 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003c74:	70fb      	strb	r3, [r7, #3]
 8003c76:	e003      	b.n	8003c80 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c7e:	70fb      	strb	r3, [r7, #3]
  }
  
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8003c80:	2200      	movs	r2, #0
 8003c82:	2108      	movs	r1, #8
 8003c84:	4810      	ldr	r0, [pc, #64]	; (8003cc8 <GYRO_IO_Read+0x70>)
 8003c86:	f002 fbef 	bl	8006468 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff03 	bl	8003a98 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8003c92:	e00c      	b.n	8003cae <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYRO (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7ff feff 	bl	8003a98 <SPIx_WriteRead>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8003ca2:	883b      	ldrh	r3, [r7, #0]
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3301      	adds	r3, #1
 8003cac:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8003cae:	883b      	ldrh	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1ef      	bne.n	8003c94 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	2108      	movs	r1, #8
 8003cb8:	4803      	ldr	r0, [pc, #12]	; (8003cc8 <GYRO_IO_Read+0x70>)
 8003cba:	f002 fbd5 	bl	8006468 <HAL_GPIO_WritePin>
}  
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000

08003ccc <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <COMPASSACCELERO_IO_Init+0x48>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <COMPASSACCELERO_IO_Init+0x48>)
 8003cdc:	f043 0310 	orr.w	r3, r3, #16
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <COMPASSACCELERO_IO_Init+0x48>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8003cee:	2304      	movs	r3, #4
 8003cf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4805      	ldr	r0, [pc, #20]	; (8003d18 <COMPASSACCELERO_IO_Init+0x4c>)
 8003d04:	f002 f812 	bl	8005d2c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8003d08:	f7ff fda4 	bl	8003854 <I2Cx_Init>
}
 8003d0c:	bf00      	nop
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40021000 	.word	0x40021000

08003d1c <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	4b13      	ldr	r3, [pc, #76]	; (8003d74 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003d2c:	f043 0310 	orr.w	r3, r3, #16
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8003d3e:	2330      	movs	r3, #48	; 0x30
 8003d40:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8003d42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4808      	ldr	r0, [pc, #32]	; (8003d78 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8003d56:	f001 ffe9 	bl	8005d2c <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	210f      	movs	r1, #15
 8003d5e:	200a      	movs	r0, #10
 8003d60:	f001 fa86 	bl	8005270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8003d64:	200a      	movs	r0, #10
 8003d66:	f001 faaf 	bl	80052c8 <HAL_NVIC_EnableIRQ>
}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40021000 	.word	0x40021000

08003d7c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	80fb      	strh	r3, [r7, #6]
 8003d86:	460b      	mov	r3, r1
 8003d88:	717b      	strb	r3, [r7, #5]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8003d8e:	793a      	ldrb	r2, [r7, #4]
 8003d90:	7979      	ldrb	r1, [r7, #5]
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fd8f 	bl	80038b8 <I2Cx_WriteData>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	4603      	mov	r3, r0
 8003daa:	460a      	mov	r2, r1
 8003dac:	80fb      	strh	r3, [r7, #6]
 8003dae:	4613      	mov	r3, r2
 8003db0:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8003db2:	797a      	ldrb	r2, [r7, #5]
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fda5 	bl	8003908 <I2Cx_ReadData>
 8003dbe:	4603      	mov	r3, r0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8003dd6:	1d3b      	adds	r3, r7, #4
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8003dde:	4b58      	ldr	r3, [pc, #352]	; (8003f40 <BSP_ACCELERO_Init+0x178>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4798      	blx	r3
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b33      	cmp	r3, #51	; 0x33
 8003de8:	d14f      	bne.n	8003e8a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8003dea:	4b56      	ldr	r3, [pc, #344]	; (8003f44 <BSP_ACCELERO_Init+0x17c>)
 8003dec:	4a54      	ldr	r2, [pc, #336]	; (8003f40 <BSP_ACCELERO_Init+0x178>)
 8003dee:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8003df4:	2340      	movs	r3, #64	; 0x40
 8003df6:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8003df8:	2307      	movs	r3, #7
 8003dfa:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8003e00:	2300      	movs	r3, #0
 8003e02:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8003e04:	2300      	movs	r3, #0
 8003e06:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8003e08:	2308      	movs	r3, #8
 8003e0a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003e0c:	7b3a      	ldrb	r2, [r7, #12]
 8003e0e:	7b7b      	ldrb	r3, [r7, #13]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003e14:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	8abb      	ldrh	r3, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003e22:	7c3a      	ldrb	r2, [r7, #16]
 8003e24:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003e26:	4313      	orrs	r3, r2
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	7cbb      	ldrb	r3, [r7, #18]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003e38:	b21a      	sxth	r2, r3
 8003e3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003e44:	4b3f      	ldr	r3, [pc, #252]	; (8003f44 <BSP_ACCELERO_Init+0x17c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	8aba      	ldrh	r2, [r7, #20]
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8003e54:	2310      	movs	r3, #16
 8003e56:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e60:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003e62:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e64:	4313      	orrs	r3, r2
 8003e66:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003e68:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003e76:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <BSP_ACCELERO_Init+0x17c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	8aba      	ldrh	r2, [r7, #20]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	4610      	mov	r0, r2
 8003e82:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	75fb      	strb	r3, [r7, #23]
 8003e88:	e054      	b.n	8003f34 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8003e8a:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <BSP_ACCELERO_Init+0x180>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	4798      	blx	r3
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b33      	cmp	r3, #51	; 0x33
 8003e94:	d14e      	bne.n	8003f34 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8003e96:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <BSP_ACCELERO_Init+0x17c>)
 8003e98:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <BSP_ACCELERO_Init+0x180>)
 8003e9a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8003ea4:	2307      	movs	r3, #7
 8003ea6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8003eac:	2300      	movs	r3, #0
 8003eae:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003eb8:	7b3a      	ldrb	r2, [r7, #12]
 8003eba:	7b7b      	ldrb	r3, [r7, #13]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8003ec0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	8abb      	ldrh	r3, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003ece:	7c3a      	ldrb	r2, [r7, #16]
 8003ed0:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	7cbb      	ldrb	r3, [r7, #18]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8003ee4:	b21a      	sxth	r2, r3
 8003ee6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003ef0:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <BSP_ACCELERO_Init+0x17c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	8aba      	ldrh	r2, [r7, #20]
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8003f00:	2310      	movs	r3, #16
 8003f02:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8003f04:	2300      	movs	r3, #0
 8003f06:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003f0c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8003f0e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8003f14:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003f16:	4313      	orrs	r3, r2
 8003f18:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <BSP_ACCELERO_Init+0x17c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	8aba      	ldrh	r2, [r7, #20]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000009c 	.word	0x2000009c
 8003f44:	200003e8 	.word	0x200003e8
 8003f48:	20000068 	.word	0x20000068

08003f4c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <BSP_ACCELERO_GetXYZ+0x50>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d018      	beq.n	8003f94 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <BSP_ACCELERO_GetXYZ+0x50>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <BSP_ACCELERO_GetXYZ+0x50>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <BSP_ACCELERO_GetXYZ+0x54>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d10e      	bne.n	8003f94 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8003f86:	89fb      	ldrh	r3, [r7, #14]
 8003f88:	425b      	negs	r3, r3
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3302      	adds	r3, #2
 8003f90:	b212      	sxth	r2, r2
 8003f92:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200003e8 	.word	0x200003e8
 8003fa0:	2000009c 	.word	0x2000009c

08003fa4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	703b      	strb	r3, [r7, #0]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8003fba:	4b52      	ldr	r3, [pc, #328]	; (8004104 <BSP_GYRO_Init+0x160>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4798      	blx	r3
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2bd4      	cmp	r3, #212	; 0xd4
 8003fc4:	d005      	beq.n	8003fd2 <BSP_GYRO_Init+0x2e>
 8003fc6:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <BSP_GYRO_Init+0x160>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4798      	blx	r3
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2bd5      	cmp	r3, #213	; 0xd5
 8003fd0:	d146      	bne.n	8004060 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8003fd2:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <BSP_GYRO_Init+0x164>)
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	; (8004104 <BSP_GYRO_Init+0x160>)
 8003fd6:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8003fd8:	2308      	movs	r3, #8
 8003fda:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8003fe0:	2307      	movs	r3, #7
 8003fe2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8003fe4:	2330      	movs	r3, #48	; 0x30
 8003fe6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8003fec:	2300      	movs	r3, #0
 8003fee:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ff4:	793a      	ldrb	r2, [r7, #4]
 8003ff6:	797b      	ldrb	r3, [r7, #5]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8003ffc:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8003ffe:	4313      	orrs	r3, r2
 8004000:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004002:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004004:	4313      	orrs	r3, r2
 8004006:	b2db      	uxtb	r3, r3
 8004008:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800400a:	7a3a      	ldrb	r2, [r7, #8]
 800400c:	7a7b      	ldrb	r3, [r7, #9]
 800400e:	4313      	orrs	r3, r2
 8004010:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004012:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004014:	4313      	orrs	r3, r2
 8004016:	b2db      	uxtb	r3, r3
 8004018:	b29b      	uxth	r3, r3
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	b29a      	uxth	r2, r3
 800401e:	89bb      	ldrh	r3, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004024:	4b38      	ldr	r3, [pc, #224]	; (8004108 <BSP_GYRO_Init+0x164>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	89ba      	ldrh	r2, [r7, #12]
 800402c:	4610      	mov	r0, r2
 800402e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8004030:	2300      	movs	r3, #0
 8004032:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8004034:	2300      	movs	r3, #0
 8004036:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004038:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800403a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800403c:	4313      	orrs	r3, r2
 800403e:	b2db      	uxtb	r3, r3
 8004040:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <BSP_GYRO_Init+0x164>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	89ba      	ldrh	r2, [r7, #12]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	4610      	mov	r0, r2
 800404e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <BSP_GYRO_Init+0x164>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	2010      	movs	r0, #16
 8004058:	4798      	blx	r3

    ret = GYRO_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
 800405e:	e04b      	b.n	80040f8 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <BSP_GYRO_Init+0x168>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4798      	blx	r3
 8004066:	4603      	mov	r3, r0
 8004068:	2bd3      	cmp	r3, #211	; 0xd3
 800406a:	d145      	bne.n	80040f8 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <BSP_GYRO_Init+0x164>)
 800406e:	4a27      	ldr	r2, [pc, #156]	; (800410c <BSP_GYRO_Init+0x168>)
 8004070:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8004072:	2308      	movs	r3, #8
 8004074:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8004076:	2300      	movs	r3, #0
 8004078:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 800407a:	2307      	movs	r3, #7
 800407c:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 800407e:	2330      	movs	r3, #48	; 0x30
 8004080:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8004082:	2300      	movs	r3, #0
 8004084:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8004086:	2300      	movs	r3, #0
 8004088:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 800408a:	2310      	movs	r3, #16
 800408c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800408e:	793a      	ldrb	r2, [r7, #4]
 8004090:	797b      	ldrb	r3, [r7, #5]
 8004092:	4313      	orrs	r3, r2
 8004094:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004096:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004098:	4313      	orrs	r3, r2
 800409a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800409c:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800409e:	4313      	orrs	r3, r2
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80040a4:	7a3a      	ldrb	r2, [r7, #8]
 80040a6:	7a7b      	ldrb	r3, [r7, #9]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80040ac:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80040ae:	4313      	orrs	r3, r2
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	89bb      	ldrh	r3, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <BSP_GYRO_Init+0x164>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	89ba      	ldrh	r2, [r7, #12]
 80040c6:	4610      	mov	r0, r2
 80040c8:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 80040ca:	2300      	movs	r3, #0
 80040cc:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80040d2:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80040d4:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <BSP_GYRO_Init+0x164>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	89ba      	ldrh	r2, [r7, #12]
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	4610      	mov	r0, r2
 80040e8:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <BSP_GYRO_Init+0x164>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f0:	2010      	movs	r0, #16
 80040f2:	4798      	blx	r3

    ret = GYRO_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000034 	.word	0x20000034
 8004108:	200003ec 	.word	0x200003ec
 800410c:	20000000 	.word	0x20000000

08004110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <HAL_MspInit+0x4c>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	4a0f      	ldr	r2, [pc, #60]	; (800415c <HAL_MspInit+0x4c>)
 8004120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004124:	6453      	str	r3, [r2, #68]	; 0x44
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <HAL_MspInit+0x4c>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_MspInit+0x4c>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <HAL_MspInit+0x4c>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	6413      	str	r3, [r2, #64]	; 0x40
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_MspInit+0x4c>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800414e:	2007      	movs	r0, #7
 8004150:	f001 f86e 	bl	8005230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800

08004160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <NMI_Handler+0x4>

08004166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <HardFault_Handler+0x4>

0800416c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004170:	e7fe      	b.n	8004170 <MemManage_Handler+0x4>

08004172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004176:	e7fe      	b.n	8004176 <BusFault_Handler+0x4>

08004178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800417c:	e7fe      	b.n	800417c <UsageFault_Handler+0x4>

0800417e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041ac:	f000 fb4e 	bl	800484c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80041b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041bc:	f002 f986 	bl	80064cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041c8:	4803      	ldr	r0, [pc, #12]	; (80041d8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80041ca:	f007 fa21 	bl	800b610 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80041ce:	4803      	ldr	r0, [pc, #12]	; (80041dc <TIM1_UP_TIM10_IRQHandler+0x18>)
 80041d0:	f007 fa1e 	bl	800b610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000ef8 	.word	0x20000ef8
 80041dc:	20000eb0 	.word	0x20000eb0

080041e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80041e4:	4802      	ldr	r0, [pc, #8]	; (80041f0 <DMA2_Stream0_IRQHandler+0x10>)
 80041e6:	f001 fb37 	bl	8005858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000448 	.word	0x20000448

080041f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80041f8:	4802      	ldr	r0, [pc, #8]	; (8004204 <DMA2_Stream1_IRQHandler+0x10>)
 80041fa:	f001 fb2d 	bl	8005858 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000e50 	.word	0x20000e50

08004208 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <OTG_FS_IRQHandler+0x10>)
 800420e:	f002 fbeb 	bl	80069e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	2000131c 	.word	0x2000131c

0800421c <_getpid>:
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
 8004220:	2301      	movs	r3, #1
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <_kill>:
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
 8004236:	f00c fa37 	bl	80106a8 <__errno>
 800423a:	4603      	mov	r3, r0
 800423c:	2216      	movs	r2, #22
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <_exit>:
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ffe7 	bl	800422c <_kill>
 800425e:	e7fe      	b.n	800425e <_exit+0x12>

08004260 <_read>:
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e00a      	b.n	8004288 <_read+0x28>
 8004272:	f3af 8000 	nop.w
 8004276:	4601      	mov	r1, r0
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	60ba      	str	r2, [r7, #8]
 800427e:	b2ca      	uxtb	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3301      	adds	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	dbf0      	blt.n	8004272 <_read+0x12>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <_write>:
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e009      	b.n	80042c0 <_write+0x26>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	60ba      	str	r2, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f3af 8000 	nop.w
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	3301      	adds	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	dbf1      	blt.n	80042ac <_write+0x12>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_close>:
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <_fstat>:
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	6039      	str	r1, [r7, #0]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042fa:	605a      	str	r2, [r3, #4]
 80042fc:	2300      	movs	r3, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <_isatty>:
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	2301      	movs	r3, #1
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <_lseek>:
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	2300      	movs	r3, #0
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <_sbrk>:
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	4a14      	ldr	r2, [pc, #80]	; (8004398 <_sbrk+0x5c>)
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <_sbrk+0x60>)
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <_sbrk+0x64>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <_sbrk+0x22>
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <_sbrk+0x64>)
 800435a:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <_sbrk+0x68>)
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <_sbrk+0x64>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d207      	bcs.n	800437c <_sbrk+0x40>
 800436c:	f00c f99c 	bl	80106a8 <__errno>
 8004370:	4603      	mov	r3, r0
 8004372:	220c      	movs	r2, #12
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800437a:	e009      	b.n	8004390 <_sbrk+0x54>
 800437c:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <_sbrk+0x64>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <_sbrk+0x64>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <_sbrk+0x64>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20020000 	.word	0x20020000
 800439c:	00000400 	.word	0x00000400
 80043a0:	200003f0 	.word	0x200003f0
 80043a4:	20001630 	.word	0x20001630

080043a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <SystemInit+0x20>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <SystemInit+0x20>)
 80043b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b096      	sub	sp, #88	; 0x58
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	611a      	str	r2, [r3, #16]
 80043fa:	615a      	str	r2, [r3, #20]
 80043fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043fe:	1d3b      	adds	r3, r7, #4
 8004400:	2220      	movs	r2, #32
 8004402:	2100      	movs	r1, #0
 8004404:	4618      	mov	r0, r3
 8004406:	f00c f989 	bl	801071c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <MX_TIM1_Init+0x138>)
 800440c:	4a3e      	ldr	r2, [pc, #248]	; (8004508 <MX_TIM1_Init+0x13c>)
 800440e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004410:	4b3c      	ldr	r3, [pc, #240]	; (8004504 <MX_TIM1_Init+0x138>)
 8004412:	2200      	movs	r2, #0
 8004414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <MX_TIM1_Init+0x138>)
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 800441c:	4b39      	ldr	r3, [pc, #228]	; (8004504 <MX_TIM1_Init+0x138>)
 800441e:	2259      	movs	r2, #89	; 0x59
 8004420:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004422:	4b38      	ldr	r3, [pc, #224]	; (8004504 <MX_TIM1_Init+0x138>)
 8004424:	2200      	movs	r2, #0
 8004426:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <MX_TIM1_Init+0x138>)
 800442a:	2200      	movs	r2, #0
 800442c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442e:	4b35      	ldr	r3, [pc, #212]	; (8004504 <MX_TIM1_Init+0x138>)
 8004430:	2200      	movs	r2, #0
 8004432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004434:	4833      	ldr	r0, [pc, #204]	; (8004504 <MX_TIM1_Init+0x138>)
 8004436:	f006 fa0f 	bl	800a858 <HAL_TIM_Base_Init>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004440:	f7ff f8dc 	bl	80035fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004448:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800444a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800444e:	4619      	mov	r1, r3
 8004450:	482c      	ldr	r0, [pc, #176]	; (8004504 <MX_TIM1_Init+0x138>)
 8004452:	f007 fd0f 	bl	800be74 <HAL_TIM_ConfigClockSource>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800445c:	f7ff f8ce 	bl	80035fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004460:	4828      	ldr	r0, [pc, #160]	; (8004504 <MX_TIM1_Init+0x138>)
 8004462:	f006 fbb3 	bl	800abcc <HAL_TIM_PWM_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800446c:	f7ff f8c6 	bl	80035fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004470:	2300      	movs	r3, #0
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004478:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800447c:	4619      	mov	r1, r3
 800447e:	4821      	ldr	r0, [pc, #132]	; (8004504 <MX_TIM1_Init+0x138>)
 8004480:	f008 fdc6 	bl	800d010 <HAL_TIMEx_MasterConfigSynchronization>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800448a:	f7ff f8b7 	bl	80035fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800448e:	2360      	movs	r3, #96	; 0x60
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004496:	2300      	movs	r3, #0
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800449a:	2300      	movs	r3, #0
 800449c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044a2:	2300      	movs	r3, #0
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ae:	2200      	movs	r2, #0
 80044b0:	4619      	mov	r1, r3
 80044b2:	4814      	ldr	r0, [pc, #80]	; (8004504 <MX_TIM1_Init+0x138>)
 80044b4:	f007 fb38 	bl	800bb28 <HAL_TIM_PWM_ConfigChannel>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80044be:	f7ff f89d 	bl	80035fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044dc:	2300      	movs	r3, #0
 80044de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044e0:	1d3b      	adds	r3, r7, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4807      	ldr	r0, [pc, #28]	; (8004504 <MX_TIM1_Init+0x138>)
 80044e6:	f008 fe51 	bl	800d18c <HAL_TIMEx_ConfigBreakDeadTime>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80044f0:	f7ff f884 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044f4:	4803      	ldr	r0, [pc, #12]	; (8004504 <MX_TIM1_Init+0x138>)
 80044f6:	f000 f8f3 	bl	80046e0 <HAL_TIM_MspPostInit>

}
 80044fa:	bf00      	nop
 80044fc:	3758      	adds	r7, #88	; 0x58
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000ef8 	.word	0x20000ef8
 8004508:	40010000 	.word	0x40010000

0800450c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8004512:	463b      	mov	r3, r7
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <MX_TIM10_Init+0x88>)
 8004520:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <MX_TIM10_Init+0x8c>)
 8004522:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 71;
 8004524:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <MX_TIM10_Init+0x88>)
 8004526:	2247      	movs	r2, #71	; 0x47
 8004528:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <MX_TIM10_Init+0x88>)
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004530:	4b18      	ldr	r3, [pc, #96]	; (8004594 <MX_TIM10_Init+0x88>)
 8004532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004536:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004538:	4b16      	ldr	r3, [pc, #88]	; (8004594 <MX_TIM10_Init+0x88>)
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800453e:	4b15      	ldr	r3, [pc, #84]	; (8004594 <MX_TIM10_Init+0x88>)
 8004540:	2200      	movs	r2, #0
 8004542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004544:	4813      	ldr	r0, [pc, #76]	; (8004594 <MX_TIM10_Init+0x88>)
 8004546:	f006 f987 	bl	800a858 <HAL_TIM_Base_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM10_Init+0x48>
  {
    Error_Handler();
 8004550:	f7ff f854 	bl	80035fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim10) != HAL_OK)
 8004554:	480f      	ldr	r0, [pc, #60]	; (8004594 <MX_TIM10_Init+0x88>)
 8004556:	f006 ff8b 	bl	800b470 <HAL_TIM_IC_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_TIM10_Init+0x58>
  {
    Error_Handler();
 8004560:	f7ff f84c 	bl	80035fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004564:	2300      	movs	r3, #0
 8004566:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004568:	2301      	movs	r3, #1
 800456a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800456c:	2300      	movs	r3, #0
 800456e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim10, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004574:	463b      	mov	r3, r7
 8004576:	2200      	movs	r2, #0
 8004578:	4619      	mov	r1, r3
 800457a:	4806      	ldr	r0, [pc, #24]	; (8004594 <MX_TIM10_Init+0x88>)
 800457c:	f007 f950 	bl	800b820 <HAL_TIM_IC_ConfigChannel>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <MX_TIM10_Init+0x7e>
  {
    Error_Handler();
 8004586:	f7ff f839 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000eb0 	.word	0x20000eb0
 8004598:	40014400 	.word	0x40014400

0800459c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a43      	ldr	r2, [pc, #268]	; (80046c8 <HAL_TIM_Base_MspInit+0x12c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d146      	bne.n	800464c <HAL_TIM_Base_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	4b42      	ldr	r3, [pc, #264]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4a41      	ldr	r2, [pc, #260]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80045da:	4b3d      	ldr	r3, [pc, #244]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 80045dc:	4a3d      	ldr	r2, [pc, #244]	; (80046d4 <HAL_TIM_Base_MspInit+0x138>)
 80045de:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80045e0:	4b3b      	ldr	r3, [pc, #236]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 80045e2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80045e6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80045e8:	4b39      	ldr	r3, [pc, #228]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 80045ea:	2240      	movs	r2, #64	; 0x40
 80045ec:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045ee:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80045f4:	4b36      	ldr	r3, [pc, #216]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 80045f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045fa:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045fc:	4b34      	ldr	r3, [pc, #208]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 80045fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004602:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004604:	4b32      	ldr	r3, [pc, #200]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 8004606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800460a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800460c:	4b30      	ldr	r3, [pc, #192]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 800460e:	2200      	movs	r2, #0
 8004610:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004612:	4b2f      	ldr	r3, [pc, #188]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 8004614:	2200      	movs	r2, #0
 8004616:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004618:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 800461a:	2200      	movs	r2, #0
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800461e:	482c      	ldr	r0, [pc, #176]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 8004620:	f000 fe76 	bl	8005310 <HAL_DMA_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_TIM_Base_MspInit+0x92>
    {
      Error_Handler();
 800462a:	f7fe ffe7 	bl	80035fc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a27      	ldr	r2, [pc, #156]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 8004632:	625a      	str	r2, [r3, #36]	; 0x24
 8004634:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <HAL_TIM_Base_MspInit+0x134>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	2100      	movs	r1, #0
 800463e:	2019      	movs	r0, #25
 8004640:	f000 fe16 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004644:	2019      	movs	r0, #25
 8004646:	f000 fe3f 	bl	80052c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800464a:	e039      	b.n	80046c0 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM10)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a21      	ldr	r2, [pc, #132]	; (80046d8 <HAL_TIM_Base_MspInit+0x13c>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d134      	bne.n	80046c0 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	4a1b      	ldr	r2, [pc, #108]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 8004660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004664:	6453      	str	r3, [r2, #68]	; 0x44
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	4b15      	ldr	r3, [pc, #84]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a14      	ldr	r2, [pc, #80]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_TIM_Base_MspInit+0x130>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800468e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004694:	2302      	movs	r3, #2
 8004696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80046a0:	2303      	movs	r3, #3
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	4619      	mov	r1, r3
 80046aa:	480c      	ldr	r0, [pc, #48]	; (80046dc <HAL_TIM_Base_MspInit+0x140>)
 80046ac:	f001 fb3e 	bl	8005d2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	2100      	movs	r1, #0
 80046b4:	2019      	movs	r0, #25
 80046b6:	f000 fddb 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80046ba:	2019      	movs	r0, #25
 80046bc:	f000 fe04 	bl	80052c8 <HAL_NVIC_EnableIRQ>
}
 80046c0:	bf00      	nop
 80046c2:	3728      	adds	r7, #40	; 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40023800 	.word	0x40023800
 80046d0:	20000e50 	.word	0x20000e50
 80046d4:	40026428 	.word	0x40026428
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40020400 	.word	0x40020400

080046e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a12      	ldr	r2, [pc, #72]	; (8004748 <HAL_TIM_MspPostInit+0x68>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d11e      	bne.n	8004740 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <HAL_TIM_MspPostInit+0x6c>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4a10      	ldr	r2, [pc, #64]	; (800474c <HAL_TIM_MspPostInit+0x6c>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	6313      	str	r3, [r2, #48]	; 0x30
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <HAL_TIM_MspPostInit+0x6c>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800471e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004722:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004730:	2301      	movs	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	4619      	mov	r1, r3
 800473a:	4805      	ldr	r0, [pc, #20]	; (8004750 <HAL_TIM_MspPostInit+0x70>)
 800473c:	f001 faf6 	bl	8005d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004740:	bf00      	nop
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40010000 	.word	0x40010000
 800474c:	40023800 	.word	0x40023800
 8004750:	40020000 	.word	0x40020000

08004754 <Reset_Handler>:
 8004754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800478c <LoopFillZerobss+0x12>
 8004758:	480d      	ldr	r0, [pc, #52]	; (8004790 <LoopFillZerobss+0x16>)
 800475a:	490e      	ldr	r1, [pc, #56]	; (8004794 <LoopFillZerobss+0x1a>)
 800475c:	4a0e      	ldr	r2, [pc, #56]	; (8004798 <LoopFillZerobss+0x1e>)
 800475e:	2300      	movs	r3, #0
 8004760:	e002      	b.n	8004768 <LoopCopyDataInit>

08004762 <CopyDataInit>:
 8004762:	58d4      	ldr	r4, [r2, r3]
 8004764:	50c4      	str	r4, [r0, r3]
 8004766:	3304      	adds	r3, #4

08004768 <LoopCopyDataInit>:
 8004768:	18c4      	adds	r4, r0, r3
 800476a:	428c      	cmp	r4, r1
 800476c:	d3f9      	bcc.n	8004762 <CopyDataInit>
 800476e:	4a0b      	ldr	r2, [pc, #44]	; (800479c <LoopFillZerobss+0x22>)
 8004770:	4c0b      	ldr	r4, [pc, #44]	; (80047a0 <LoopFillZerobss+0x26>)
 8004772:	2300      	movs	r3, #0
 8004774:	e001      	b.n	800477a <LoopFillZerobss>

08004776 <FillZerobss>:
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	3204      	adds	r2, #4

0800477a <LoopFillZerobss>:
 800477a:	42a2      	cmp	r2, r4
 800477c:	d3fb      	bcc.n	8004776 <FillZerobss>
 800477e:	f7ff fe13 	bl	80043a8 <SystemInit>
 8004782:	f00b ff97 	bl	80106b4 <__libc_init_array>
 8004786:	f7fe fd2f 	bl	80031e8 <main>
 800478a:	4770      	bx	lr
 800478c:	20020000 	.word	0x20020000
 8004790:	20000000 	.word	0x20000000
 8004794:	200002d4 	.word	0x200002d4
 8004798:	08013d54 	.word	0x08013d54
 800479c:	200002d8 	.word	0x200002d8
 80047a0:	20001630 	.word	0x20001630

080047a4 <ADC_IRQHandler>:
 80047a4:	e7fe      	b.n	80047a4 <ADC_IRQHandler>
	...

080047a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047ac:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <HAL_Init+0x40>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <HAL_Init+0x40>)
 80047b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_Init+0x40>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <HAL_Init+0x40>)
 80047be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_Init+0x40>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <HAL_Init+0x40>)
 80047ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047d0:	2003      	movs	r0, #3
 80047d2:	f000 fd2d 	bl	8005230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047d6:	2000      	movs	r0, #0
 80047d8:	f000 f808 	bl	80047ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047dc:	f7ff fc98 	bl	8004110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40023c00 	.word	0x40023c00

080047ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_InitTick+0x54>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <HAL_InitTick+0x58>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	4619      	mov	r1, r3
 80047fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004802:	fbb3 f3f1 	udiv	r3, r3, r1
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fd74 	bl	80052f8 <HAL_SYSTICK_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e00e      	b.n	8004838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b0f      	cmp	r3, #15
 800481e:	d80a      	bhi.n	8004836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004820:	2200      	movs	r2, #0
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004828:	f000 fd22 	bl	8005270 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800482c:	4a06      	ldr	r2, [pc, #24]	; (8004848 <HAL_InitTick+0x5c>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	200000d8 	.word	0x200000d8
 8004844:	200000e0 	.word	0x200000e0
 8004848:	200000dc 	.word	0x200000dc

0800484c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_IncTick+0x20>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_IncTick+0x24>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4413      	add	r3, r2
 800485c:	4a04      	ldr	r2, [pc, #16]	; (8004870 <HAL_IncTick+0x24>)
 800485e:	6013      	str	r3, [r2, #0]
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	200000e0 	.word	0x200000e0
 8004870:	20000f40 	.word	0x20000f40

08004874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return uwTick;
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <HAL_GetTick+0x14>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000f40 	.word	0x20000f40

0800488c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004894:	f7ff ffee 	bl	8004874 <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a4:	d005      	beq.n	80048b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_Delay+0x44>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048b2:	bf00      	nop
 80048b4:	f7ff ffde 	bl	8004874 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d8f7      	bhi.n	80048b4 <HAL_Delay+0x28>
  {
  }
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200000e0 	.word	0x200000e0

080048d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e147      	b.n	8004b7a <HAL_ADC_Init+0x2a6>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4aa5      	ldr	r2, [pc, #660]	; (8004b84 <HAL_ADC_Init+0x2b0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d004      	beq.n	80048fe <HAL_ADC_Init+0x2a>
 80048f4:	f240 1143 	movw	r1, #323	; 0x143
 80048f8:	48a3      	ldr	r0, [pc, #652]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 80048fa:	f7fe fe84 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d013      	beq.n	800492e <HAL_ADC_Init+0x5a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490e:	d00e      	beq.n	800492e <HAL_ADC_Init+0x5a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004918:	d009      	beq.n	800492e <HAL_ADC_Init+0x5a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004922:	d004      	beq.n	800492e <HAL_ADC_Init+0x5a>
 8004924:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004928:	4897      	ldr	r0, [pc, #604]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 800492a:	f7fe fe6c 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d013      	beq.n	800495e <HAL_ADC_Init+0x8a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800493e:	d00e      	beq.n	800495e <HAL_ADC_Init+0x8a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004948:	d009      	beq.n	800495e <HAL_ADC_Init+0x8a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004952:	d004      	beq.n	800495e <HAL_ADC_Init+0x8a>
 8004954:	f240 1145 	movw	r1, #325	; 0x145
 8004958:	488b      	ldr	r0, [pc, #556]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 800495a:	f7fe fe54 	bl	8003606 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_ADC_Init+0xa4>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d004      	beq.n	8004978 <HAL_ADC_Init+0xa4>
 800496e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004972:	4885      	ldr	r0, [pc, #532]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004974:	f7fe fe47 	bl	8003606 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7e1b      	ldrb	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_ADC_Init+0xbe>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	7e1b      	ldrb	r3, [r3, #24]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d004      	beq.n	8004992 <HAL_ADC_Init+0xbe>
 8004988:	f240 1147 	movw	r1, #327	; 0x147
 800498c:	487e      	ldr	r0, [pc, #504]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 800498e:	f7fe fe3a 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	2b00      	cmp	r3, #0
 8004998:	d054      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049a2:	d04f      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ac:	d04a      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049b6:	d045      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049c0:	d040      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049ca:	d03b      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80049d4:	d036      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80049de:	d031      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049e8:	d02c      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80049f2:	d027      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80049fc:	d022      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8004a06:	d01d      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004a10:	d018      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a16:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8004a1a:	d013      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004a24:	d00e      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004a2e:	d009      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	4a55      	ldr	r2, [pc, #340]	; (8004b8c <HAL_ADC_Init+0x2b8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d004      	beq.n	8004a44 <HAL_ADC_Init+0x170>
 8004a3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004a3e:	4852      	ldr	r0, [pc, #328]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004a40:	f7fe fde1 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d009      	beq.n	8004a60 <HAL_ADC_Init+0x18c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a54:	d004      	beq.n	8004a60 <HAL_ADC_Init+0x18c>
 8004a56:	f240 1149 	movw	r1, #329	; 0x149
 8004a5a:	484b      	ldr	r0, [pc, #300]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004a5c:	f7fe fdd3 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_ADC_Init+0x19c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	2b10      	cmp	r3, #16
 8004a6e:	d904      	bls.n	8004a7a <HAL_ADC_Init+0x1a6>
 8004a70:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004a74:	4844      	ldr	r0, [pc, #272]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004a76:	f7fe fdc6 	bl	8003606 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d009      	beq.n	8004a98 <HAL_ADC_Init+0x1c4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d004      	beq.n	8004a98 <HAL_ADC_Init+0x1c4>
 8004a8e:	f240 114b 	movw	r1, #331	; 0x14b
 8004a92:	483d      	ldr	r0, [pc, #244]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004a94:	f7fe fdb7 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d00c      	beq.n	8004aba <HAL_ADC_Init+0x1e6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_ADC_Init+0x1e6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d004      	beq.n	8004aba <HAL_ADC_Init+0x1e6>
 8004ab0:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004ab4:	4834      	ldr	r0, [pc, #208]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004ab6:	f7fe fda6 	bl	8003606 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <HAL_ADC_Init+0x204>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d004      	beq.n	8004ad8 <HAL_ADC_Init+0x204>
 8004ace:	f240 114d 	movw	r1, #333	; 0x14d
 8004ad2:	482d      	ldr	r0, [pc, #180]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004ad4:	f7fe fd97 	bl	8003606 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	4a2b      	ldr	r2, [pc, #172]	; (8004b8c <HAL_ADC_Init+0x2b8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d017      	beq.n	8004b12 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d013      	beq.n	8004b12 <HAL_ADC_Init+0x23e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004af2:	d00e      	beq.n	8004b12 <HAL_ADC_Init+0x23e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afc:	d009      	beq.n	8004b12 <HAL_ADC_Init+0x23e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b06:	d004      	beq.n	8004b12 <HAL_ADC_Init+0x23e>
 8004b08:	f240 1151 	movw	r1, #337	; 0x151
 8004b0c:	481e      	ldr	r0, [pc, #120]	; (8004b88 <HAL_ADC_Init+0x2b4>)
 8004b0e:	f7fe fd7a 	bl	8003606 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_ADC_Init+0x25a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd fa20 	bl	8001f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d118      	bne.n	8004b6c <HAL_ADC_Init+0x298>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b42:	f023 0302 	bic.w	r3, r3, #2
 8004b46:	f043 0202 	orr.w	r2, r3, #2
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f994 	bl	8004e7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	f043 0201 	orr.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	641a      	str	r2, [r3, #64]	; 0x40
 8004b6a:	e001      	b.n	8004b70 <HAL_ADC_Init+0x29c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40012000 	.word	0x40012000
 8004b88:	080130f0 	.word	0x080130f0
 8004b8c:	0f000001 	.word	0x0f000001

08004b90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b12      	cmp	r3, #18
 8004ba4:	d909      	bls.n	8004bba <HAL_ADC_ConfigChannel+0x2a>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a72      	ldr	r2, [pc, #456]	; (8004d74 <HAL_ADC_ConfigChannel+0x1e4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d004      	beq.n	8004bba <HAL_ADC_ConfigChannel+0x2a>
 8004bb0:	f240 6189 	movw	r1, #1673	; 0x689
 8004bb4:	4870      	ldr	r0, [pc, #448]	; (8004d78 <HAL_ADC_ConfigChannel+0x1e8>)
 8004bb6:	f7fe fd26 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_ADC_ConfigChannel+0x3a>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d904      	bls.n	8004bd4 <HAL_ADC_ConfigChannel+0x44>
 8004bca:	f240 618a 	movw	r1, #1674	; 0x68a
 8004bce:	486a      	ldr	r0, [pc, #424]	; (8004d78 <HAL_ADC_ConfigChannel+0x1e8>)
 8004bd0:	f7fe fd19 	bl	8003606 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d01c      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d018      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d014      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d010      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b05      	cmp	r3, #5
 8004c02:	d00c      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b06      	cmp	r3, #6
 8004c0a:	d008      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	d004      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x8e>
 8004c14:	f240 618b 	movw	r1, #1675	; 0x68b
 8004c18:	4857      	ldr	r0, [pc, #348]	; (8004d78 <HAL_ADC_ConfigChannel+0x1e8>)
 8004c1a:	f7fe fcf4 	bl	8003606 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x9c>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e118      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x2ce>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b09      	cmp	r3, #9
 8004c3a:	d925      	bls.n	8004c88 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68d9      	ldr	r1, [r3, #12]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	4413      	add	r3, r2
 8004c50:	3b1e      	subs	r3, #30
 8004c52:	2207      	movs	r2, #7
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43da      	mvns	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	400a      	ands	r2, r1
 8004c60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68d9      	ldr	r1, [r3, #12]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4618      	mov	r0, r3
 8004c74:	4603      	mov	r3, r0
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4403      	add	r3, r0
 8004c7a:	3b1e      	subs	r3, #30
 8004c7c:	409a      	lsls	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	60da      	str	r2, [r3, #12]
 8004c86:	e022      	b.n	8004cce <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6919      	ldr	r1, [r3, #16]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	2207      	movs	r2, #7
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	400a      	ands	r2, r1
 8004caa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6919      	ldr	r1, [r3, #16]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	4403      	add	r3, r0
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d824      	bhi.n	8004d20 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3b05      	subs	r3, #5
 8004ce8:	221f      	movs	r2, #31
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	43da      	mvns	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	4618      	mov	r0, r3
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	3b05      	subs	r3, #5
 8004d12:	fa00 f203 	lsl.w	r2, r0, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d1e:	e051      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d829      	bhi.n	8004d7c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	3b23      	subs	r3, #35	; 0x23
 8004d3a:	221f      	movs	r2, #31
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43da      	mvns	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	400a      	ands	r2, r1
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	4618      	mov	r0, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	3b23      	subs	r3, #35	; 0x23
 8004d64:	fa00 f203 	lsl.w	r2, r0, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8004d70:	e028      	b.n	8004dc4 <HAL_ADC_ConfigChannel+0x234>
 8004d72:	bf00      	nop
 8004d74:	10000012 	.word	0x10000012
 8004d78:	080130f0 	.word	0x080130f0
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3b41      	subs	r3, #65	; 0x41
 8004d8e:	221f      	movs	r2, #31
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43da      	mvns	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	4618      	mov	r0, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	3b41      	subs	r3, #65	; 0x41
 8004db8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dc4:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_ADC_ConfigChannel+0x2d8>)
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <HAL_ADC_ConfigChannel+0x2dc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10f      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x262>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b12      	cmp	r3, #18
 8004dd8:	d10b      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <HAL_ADC_ConfigChannel+0x2dc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d12b      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x2c4>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_ADC_ConfigChannel+0x2e0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <HAL_ADC_ConfigChannel+0x27e>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b11      	cmp	r3, #17
 8004e0c:	d122      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a11      	ldr	r2, [pc, #68]	; (8004e70 <HAL_ADC_ConfigChannel+0x2e0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d111      	bne.n	8004e54 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_ADC_ConfigChannel+0x2e4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <HAL_ADC_ConfigChannel+0x2e8>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0c9a      	lsrs	r2, r3, #18
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e46:	e002      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f9      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40012300 	.word	0x40012300
 8004e6c:	40012000 	.word	0x40012000
 8004e70:	10000012 	.word	0x10000012
 8004e74:	200000d8 	.word	0x200000d8
 8004e78:	431bde83 	.word	0x431bde83

08004e7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e84:	4b7f      	ldr	r3, [pc, #508]	; (8005084 <ADC_Init+0x208>)
 8004e86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	021a      	lsls	r2, r3, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6859      	ldr	r1, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	4a5e      	ldr	r2, [pc, #376]	; (8005088 <ADC_Init+0x20c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6899      	ldr	r1, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	e00f      	b.n	8004f7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0202 	bic.w	r2, r2, #2
 8004f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	7e1b      	ldrb	r3, [r3, #24]
 8004f94:	005a      	lsls	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d028      	beq.n	8004ffa <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <ADC_Init+0x13c>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d904      	bls.n	8004fc2 <ADC_Init+0x146>
 8004fb8:	f240 71a6 	movw	r1, #1958	; 0x7a6
 8004fbc:	4833      	ldr	r0, [pc, #204]	; (800508c <ADC_Init+0x210>)
 8004fbe:	f7fe fb22 	bl	8003606 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fe0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	3b01      	subs	r3, #1
 8004fee:	035a      	lsls	r2, r3, #13
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	e007      	b.n	800500a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005008:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	3b01      	subs	r3, #1
 8005026:	051a      	lsls	r2, r3, #20
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800503e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6899      	ldr	r1, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800504c:	025a      	lsls	r2, r3, #9
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005064:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6899      	ldr	r1, [r3, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	029a      	lsls	r2, r3, #10
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40012300 	.word	0x40012300
 8005088:	0f000001 	.word	0x0f000001
 800508c:	080130f0 	.word	0x080130f0

08005090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050ac:	4013      	ands	r3, r2
 80050ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050c2:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <__NVIC_SetPriorityGrouping+0x44>)
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	60d3      	str	r3, [r2, #12]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	e000ed00 	.word	0xe000ed00

080050d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <__NVIC_GetPriorityGrouping+0x18>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	f003 0307 	and.w	r3, r3, #7
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	2b00      	cmp	r3, #0
 8005104:	db0b      	blt.n	800511e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	f003 021f 	and.w	r2, r3, #31
 800510c:	4907      	ldr	r1, [pc, #28]	; (800512c <__NVIC_EnableIRQ+0x38>)
 800510e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2001      	movs	r0, #1
 8005116:	fa00 f202 	lsl.w	r2, r0, r2
 800511a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	e000e100 	.word	0xe000e100

08005130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	6039      	str	r1, [r7, #0]
 800513a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db0a      	blt.n	800515a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	b2da      	uxtb	r2, r3
 8005148:	490c      	ldr	r1, [pc, #48]	; (800517c <__NVIC_SetPriority+0x4c>)
 800514a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	440b      	add	r3, r1
 8005154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005158:	e00a      	b.n	8005170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	b2da      	uxtb	r2, r3
 800515e:	4908      	ldr	r1, [pc, #32]	; (8005180 <__NVIC_SetPriority+0x50>)
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3b04      	subs	r3, #4
 8005168:	0112      	lsls	r2, r2, #4
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	440b      	add	r3, r1
 800516e:	761a      	strb	r2, [r3, #24]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005184:	b480      	push	{r7}
 8005186:	b089      	sub	sp, #36	; 0x24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f1c3 0307 	rsb	r3, r3, #7
 800519e:	2b04      	cmp	r3, #4
 80051a0:	bf28      	it	cs
 80051a2:	2304      	movcs	r3, #4
 80051a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2b06      	cmp	r3, #6
 80051ac:	d902      	bls.n	80051b4 <NVIC_EncodePriority+0x30>
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	3b03      	subs	r3, #3
 80051b2:	e000      	b.n	80051b6 <NVIC_EncodePriority+0x32>
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43da      	mvns	r2, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	401a      	ands	r2, r3
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	43d9      	mvns	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	4313      	orrs	r3, r2
         );
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3724      	adds	r7, #36	; 0x24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051fc:	d301      	bcc.n	8005202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005202:	4a0a      	ldr	r2, [pc, #40]	; (800522c <SysTick_Config+0x40>)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800520a:	210f      	movs	r1, #15
 800520c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005210:	f7ff ff8e 	bl	8005130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <SysTick_Config+0x40>)
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <SysTick_Config+0x40>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	e000e010 	.word	0xe000e010

08005230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b07      	cmp	r3, #7
 800523c:	d00f      	beq.n	800525e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b06      	cmp	r3, #6
 8005242:	d00c      	beq.n	800525e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b05      	cmp	r3, #5
 8005248:	d009      	beq.n	800525e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d006      	beq.n	800525e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b03      	cmp	r3, #3
 8005254:	d003      	beq.n	800525e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005256:	2192      	movs	r1, #146	; 0x92
 8005258:	4804      	ldr	r0, [pc, #16]	; (800526c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800525a:	f7fe f9d4 	bl	8003606 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff ff16 	bl	8005090 <__NVIC_SetPriorityGrouping>
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08013128 	.word	0x08013128

08005270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d903      	bls.n	8005290 <HAL_NVIC_SetPriority+0x20>
 8005288:	21aa      	movs	r1, #170	; 0xaa
 800528a:	480e      	ldr	r0, [pc, #56]	; (80052c4 <HAL_NVIC_SetPriority+0x54>)
 800528c:	f7fe f9bb 	bl	8003606 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b0f      	cmp	r3, #15
 8005294:	d903      	bls.n	800529e <HAL_NVIC_SetPriority+0x2e>
 8005296:	21ab      	movs	r1, #171	; 0xab
 8005298:	480a      	ldr	r0, [pc, #40]	; (80052c4 <HAL_NVIC_SetPriority+0x54>)
 800529a:	f7fe f9b4 	bl	8003606 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800529e:	f7ff ff1b 	bl	80050d8 <__NVIC_GetPriorityGrouping>
 80052a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68b9      	ldr	r1, [r7, #8]
 80052a8:	6978      	ldr	r0, [r7, #20]
 80052aa:	f7ff ff6b 	bl	8005184 <NVIC_EncodePriority>
 80052ae:	4602      	mov	r2, r0
 80052b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ff3a 	bl	8005130 <__NVIC_SetPriority>
}
 80052bc:	bf00      	nop
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08013128 	.word	0x08013128

080052c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	da03      	bge.n	80052e2 <HAL_NVIC_EnableIRQ+0x1a>
 80052da:	21be      	movs	r1, #190	; 0xbe
 80052dc:	4805      	ldr	r0, [pc, #20]	; (80052f4 <HAL_NVIC_EnableIRQ+0x2c>)
 80052de:	f7fe f992 	bl	8003606 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff ff04 	bl	80050f4 <__NVIC_EnableIRQ>
}
 80052ec:	bf00      	nop
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	08013128 	.word	0x08013128

080052f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ff73 	bl	80051ec <SysTick_Config>
 8005306:	4603      	mov	r3, r0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800531c:	f7ff faaa 	bl	8004874 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e204      	b.n	8005736 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a97      	ldr	r2, [pc, #604]	; (8005590 <HAL_DMA_Init+0x280>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d04e      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a96      	ldr	r2, [pc, #600]	; (8005594 <HAL_DMA_Init+0x284>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d049      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a94      	ldr	r2, [pc, #592]	; (8005598 <HAL_DMA_Init+0x288>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d044      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a93      	ldr	r2, [pc, #588]	; (800559c <HAL_DMA_Init+0x28c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d03f      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a91      	ldr	r2, [pc, #580]	; (80055a0 <HAL_DMA_Init+0x290>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d03a      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a90      	ldr	r2, [pc, #576]	; (80055a4 <HAL_DMA_Init+0x294>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d035      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a8e      	ldr	r2, [pc, #568]	; (80055a8 <HAL_DMA_Init+0x298>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d030      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a8d      	ldr	r2, [pc, #564]	; (80055ac <HAL_DMA_Init+0x29c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d02b      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a8b      	ldr	r2, [pc, #556]	; (80055b0 <HAL_DMA_Init+0x2a0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d026      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a8a      	ldr	r2, [pc, #552]	; (80055b4 <HAL_DMA_Init+0x2a4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d021      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a88      	ldr	r2, [pc, #544]	; (80055b8 <HAL_DMA_Init+0x2a8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01c      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a87      	ldr	r2, [pc, #540]	; (80055bc <HAL_DMA_Init+0x2ac>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d017      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a85      	ldr	r2, [pc, #532]	; (80055c0 <HAL_DMA_Init+0x2b0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d012      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a84      	ldr	r2, [pc, #528]	; (80055c4 <HAL_DMA_Init+0x2b4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00d      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a82      	ldr	r2, [pc, #520]	; (80055c8 <HAL_DMA_Init+0x2b8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d008      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a81      	ldr	r2, [pc, #516]	; (80055cc <HAL_DMA_Init+0x2bc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d003      	beq.n	80053d4 <HAL_DMA_Init+0xc4>
 80053cc:	21b8      	movs	r1, #184	; 0xb8
 80053ce:	4880      	ldr	r0, [pc, #512]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 80053d0:	f7fe f919 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d026      	beq.n	800542a <HAL_DMA_Init+0x11a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e4:	d021      	beq.n	800542a <HAL_DMA_Init+0x11a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ee:	d01c      	beq.n	800542a <HAL_DMA_Init+0x11a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80053f8:	d017      	beq.n	800542a <HAL_DMA_Init+0x11a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005402:	d012      	beq.n	800542a <HAL_DMA_Init+0x11a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800540c:	d00d      	beq.n	800542a <HAL_DMA_Init+0x11a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005416:	d008      	beq.n	800542a <HAL_DMA_Init+0x11a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005420:	d003      	beq.n	800542a <HAL_DMA_Init+0x11a>
 8005422:	21b9      	movs	r1, #185	; 0xb9
 8005424:	486a      	ldr	r0, [pc, #424]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 8005426:	f7fe f8ee 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_DMA_Init+0x13a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d007      	beq.n	800544a <HAL_DMA_Init+0x13a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b80      	cmp	r3, #128	; 0x80
 8005440:	d003      	beq.n	800544a <HAL_DMA_Init+0x13a>
 8005442:	21ba      	movs	r1, #186	; 0xba
 8005444:	4862      	ldr	r0, [pc, #392]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 8005446:	f7fe f8de 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005452:	d007      	beq.n	8005464 <HAL_DMA_Init+0x154>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_DMA_Init+0x154>
 800545c:	21bb      	movs	r1, #187	; 0xbb
 800545e:	485c      	ldr	r0, [pc, #368]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 8005460:	f7fe f8d1 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546c:	d007      	beq.n	800547e <HAL_DMA_Init+0x16e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_DMA_Init+0x16e>
 8005476:	21bc      	movs	r1, #188	; 0xbc
 8005478:	4855      	ldr	r0, [pc, #340]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 800547a:	f7fe f8c4 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <HAL_DMA_Init+0x192>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d008      	beq.n	80054a2 <HAL_DMA_Init+0x192>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d003      	beq.n	80054a2 <HAL_DMA_Init+0x192>
 800549a:	21bd      	movs	r1, #189	; 0xbd
 800549c:	484c      	ldr	r0, [pc, #304]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 800549e:	f7fe f8b2 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <HAL_DMA_Init+0x1b6>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b2:	d008      	beq.n	80054c6 <HAL_DMA_Init+0x1b6>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054bc:	d003      	beq.n	80054c6 <HAL_DMA_Init+0x1b6>
 80054be:	21be      	movs	r1, #190	; 0xbe
 80054c0:	4843      	ldr	r0, [pc, #268]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 80054c2:	f7fe f8a0 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00c      	beq.n	80054e8 <HAL_DMA_Init+0x1d8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d6:	d007      	beq.n	80054e8 <HAL_DMA_Init+0x1d8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d003      	beq.n	80054e8 <HAL_DMA_Init+0x1d8>
 80054e0:	21bf      	movs	r1, #191	; 0xbf
 80054e2:	483b      	ldr	r0, [pc, #236]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 80054e4:	f7fe f88f 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d012      	beq.n	8005516 <HAL_DMA_Init+0x206>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f8:	d00d      	beq.n	8005516 <HAL_DMA_Init+0x206>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005502:	d008      	beq.n	8005516 <HAL_DMA_Init+0x206>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800550c:	d003      	beq.n	8005516 <HAL_DMA_Init+0x206>
 800550e:	21c0      	movs	r1, #192	; 0xc0
 8005510:	482f      	ldr	r0, [pc, #188]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 8005512:	f7fe f878 	bl	8003606 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <HAL_DMA_Init+0x21e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2b04      	cmp	r3, #4
 8005524:	d003      	beq.n	800552e <HAL_DMA_Init+0x21e>
 8005526:	21c1      	movs	r1, #193	; 0xc1
 8005528:	4829      	ldr	r0, [pc, #164]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 800552a:	f7fe f86c 	bl	8003606 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	2b00      	cmp	r3, #0
 8005534:	d065      	beq.n	8005602 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <HAL_DMA_Init+0x24e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	2b01      	cmp	r3, #1
 8005544:	d00b      	beq.n	800555e <HAL_DMA_Init+0x24e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	2b02      	cmp	r3, #2
 800554c:	d007      	beq.n	800555e <HAL_DMA_Init+0x24e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	2b03      	cmp	r3, #3
 8005554:	d003      	beq.n	800555e <HAL_DMA_Init+0x24e>
 8005556:	21c6      	movs	r1, #198	; 0xc6
 8005558:	481d      	ldr	r0, [pc, #116]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 800555a:	f7fe f854 	bl	8003606 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	2b00      	cmp	r3, #0
 8005564:	d036      	beq.n	80055d4 <HAL_DMA_Init+0x2c4>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800556e:	d031      	beq.n	80055d4 <HAL_DMA_Init+0x2c4>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005578:	d02c      	beq.n	80055d4 <HAL_DMA_Init+0x2c4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005582:	d027      	beq.n	80055d4 <HAL_DMA_Init+0x2c4>
 8005584:	21c7      	movs	r1, #199	; 0xc7
 8005586:	4812      	ldr	r0, [pc, #72]	; (80055d0 <HAL_DMA_Init+0x2c0>)
 8005588:	f7fe f83d 	bl	8003606 <assert_failed>
 800558c:	e022      	b.n	80055d4 <HAL_DMA_Init+0x2c4>
 800558e:	bf00      	nop
 8005590:	40026010 	.word	0x40026010
 8005594:	40026028 	.word	0x40026028
 8005598:	40026040 	.word	0x40026040
 800559c:	40026058 	.word	0x40026058
 80055a0:	40026070 	.word	0x40026070
 80055a4:	40026088 	.word	0x40026088
 80055a8:	400260a0 	.word	0x400260a0
 80055ac:	400260b8 	.word	0x400260b8
 80055b0:	40026410 	.word	0x40026410
 80055b4:	40026428 	.word	0x40026428
 80055b8:	40026440 	.word	0x40026440
 80055bc:	40026458 	.word	0x40026458
 80055c0:	40026470 	.word	0x40026470
 80055c4:	40026488 	.word	0x40026488
 80055c8:	400264a0 	.word	0x400264a0
 80055cc:	400264b8 	.word	0x400264b8
 80055d0:	08013164 	.word	0x08013164
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d012      	beq.n	8005602 <HAL_DMA_Init+0x2f2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e4:	d00d      	beq.n	8005602 <HAL_DMA_Init+0x2f2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ee:	d008      	beq.n	8005602 <HAL_DMA_Init+0x2f2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055f8:	d003      	beq.n	8005602 <HAL_DMA_Init+0x2f2>
 80055fa:	21c8      	movs	r1, #200	; 0xc8
 80055fc:	4850      	ldr	r0, [pc, #320]	; (8005740 <HAL_DMA_Init+0x430>)
 80055fe:	f7fe f802 	bl	8003606 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005622:	e00f      	b.n	8005644 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005624:	f7ff f926 	bl	8004874 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b05      	cmp	r3, #5
 8005630:	d908      	bls.n	8005644 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2220      	movs	r2, #32
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2203      	movs	r2, #3
 800563c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e078      	b.n	8005736 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e8      	bne.n	8005624 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4b39      	ldr	r3, [pc, #228]	; (8005744 <HAL_DMA_Init+0x434>)
 800565e:	4013      	ands	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800567c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	2b04      	cmp	r3, #4
 800569c:	d107      	bne.n	80056ae <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	4313      	orrs	r3, r2
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 0307 	bic.w	r3, r3, #7
 80056c4:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	2b04      	cmp	r3, #4
 80056d6:	d117      	bne.n	8005708 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00e      	beq.n	8005708 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 faa2 	bl	8005c34 <DMA_CheckFifoParam>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2240      	movs	r2, #64	; 0x40
 80056fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005704:	2301      	movs	r3, #1
 8005706:	e016      	b.n	8005736 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa59 	bl	8005bc8 <DMA_CalcBaseAndBitshift>
 8005716:	4603      	mov	r3, r0
 8005718:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	223f      	movs	r2, #63	; 0x3f
 8005720:	409a      	lsls	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	08013164 	.word	0x08013164
 8005744:	f010803f 	.word	0xf010803f

08005748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
 8005754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800575e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_DMA_Start_IT+0x26>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576c:	d304      	bcc.n	8005778 <HAL_DMA_Start_IT+0x30>
 800576e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8005772:	4827      	ldr	r0, [pc, #156]	; (8005810 <HAL_DMA_Start_IT+0xc8>)
 8005774:	f7fd ff47 	bl	8003606 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_DMA_Start_IT+0x3e>
 8005782:	2302      	movs	r3, #2
 8005784:	e040      	b.n	8005808 <HAL_DMA_Start_IT+0xc0>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	d12f      	bne.n	80057fa <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68b9      	ldr	r1, [r7, #8]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 f9dc 	bl	8005b6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b8:	223f      	movs	r2, #63	; 0x3f
 80057ba:	409a      	lsls	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0216 	orr.w	r2, r2, #22
 80057ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d007      	beq.n	80057e8 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0208 	orr.w	r2, r2, #8
 80057e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	e005      	b.n	8005806 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005802:	2302      	movs	r3, #2
 8005804:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005806:	7dfb      	ldrb	r3, [r7, #23]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	08013164 	.word	0x08013164

08005814 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d004      	beq.n	8005832 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e00c      	b.n	800584c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2205      	movs	r2, #5
 8005836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005864:	4b92      	ldr	r3, [pc, #584]	; (8005ab0 <HAL_DMA_IRQHandler+0x258>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a92      	ldr	r2, [pc, #584]	; (8005ab4 <HAL_DMA_IRQHandler+0x25c>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0a9b      	lsrs	r3, r3, #10
 8005870:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005876:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	2208      	movs	r2, #8
 8005884:	409a      	lsls	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d01a      	beq.n	80058c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0204 	bic.w	r2, r2, #4
 80058aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b0:	2208      	movs	r2, #8
 80058b2:	409a      	lsls	r2, r3
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058bc:	f043 0201 	orr.w	r2, r3, #1
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c8:	2201      	movs	r2, #1
 80058ca:	409a      	lsls	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d012      	beq.n	80058fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e6:	2201      	movs	r2, #1
 80058e8:	409a      	lsls	r2, r3
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f043 0202 	orr.w	r2, r3, #2
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	2204      	movs	r2, #4
 8005900:	409a      	lsls	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d012      	beq.n	8005930 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	2204      	movs	r2, #4
 800591e:	409a      	lsls	r2, r3
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005928:	f043 0204 	orr.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	2210      	movs	r2, #16
 8005936:	409a      	lsls	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d043      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d03c      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005952:	2210      	movs	r2, #16
 8005954:	409a      	lsls	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d018      	beq.n	800599a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d108      	bne.n	8005988 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d024      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
 8005986:	e01f      	b.n	80059c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01b      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
 8005998:	e016      	b.n	80059c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d107      	bne.n	80059b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0208 	bic.w	r2, r2, #8
 80059b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059cc:	2220      	movs	r2, #32
 80059ce:	409a      	lsls	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 808e 	beq.w	8005af6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8086 	beq.w	8005af6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ee:	2220      	movs	r2, #32
 80059f0:	409a      	lsls	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d136      	bne.n	8005a70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0216 	bic.w	r2, r2, #22
 8005a10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <HAL_DMA_IRQHandler+0x1da>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0208 	bic.w	r2, r2, #8
 8005a40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a46:	223f      	movs	r2, #63	; 0x3f
 8005a48:	409a      	lsls	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d07d      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
        }
        return;
 8005a6e:	e078      	b.n	8005b62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01c      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d108      	bne.n	8005a9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d030      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
 8005a9c:	e02b      	b.n	8005af6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d027      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
 8005aae:	e022      	b.n	8005af6 <HAL_DMA_IRQHandler+0x29e>
 8005ab0:	200000d8 	.word	0x200000d8
 8005ab4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0210 	bic.w	r2, r2, #16
 8005ad4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d032      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d022      	beq.n	8005b50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2205      	movs	r2, #5
 8005b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60bb      	str	r3, [r7, #8]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d307      	bcc.n	8005b3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f2      	bne.n	8005b22 <HAL_DMA_IRQHandler+0x2ca>
 8005b3c:	e000      	b.n	8005b40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005b3e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
 8005b60:	e000      	b.n	8005b64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005b62:	bf00      	nop
    }
  }
}
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop

08005b6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d108      	bne.n	8005bac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005baa:	e007      	b.n	8005bbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]
}
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	3b10      	subs	r3, #16
 8005bd8:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <DMA_CalcBaseAndBitshift+0x64>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005be2:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <DMA_CalcBaseAndBitshift+0x68>)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d909      	bls.n	8005c0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	659a      	str	r2, [r3, #88]	; 0x58
 8005c08:	e007      	b.n	8005c1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	aaaaaaab 	.word	0xaaaaaaab
 8005c30:	08013958 	.word	0x08013958

08005c34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11f      	bne.n	8005c8e <DMA_CheckFifoParam+0x5a>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d856      	bhi.n	8005d02 <DMA_CheckFifoParam+0xce>
 8005c54:	a201      	add	r2, pc, #4	; (adr r2, 8005c5c <DMA_CheckFifoParam+0x28>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005c6d 	.word	0x08005c6d
 8005c60:	08005c7f 	.word	0x08005c7f
 8005c64:	08005c6d 	.word	0x08005c6d
 8005c68:	08005d03 	.word	0x08005d03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d046      	beq.n	8005d06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c7c:	e043      	b.n	8005d06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c86:	d140      	bne.n	8005d0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c8c:	e03d      	b.n	8005d0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c96:	d121      	bne.n	8005cdc <DMA_CheckFifoParam+0xa8>
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d837      	bhi.n	8005d0e <DMA_CheckFifoParam+0xda>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <DMA_CheckFifoParam+0x70>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cbb 	.word	0x08005cbb
 8005cac:	08005cb5 	.word	0x08005cb5
 8005cb0:	08005ccd 	.word	0x08005ccd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb8:	e030      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d025      	beq.n	8005d12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cca:	e022      	b.n	8005d12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cd4:	d11f      	bne.n	8005d16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cda:	e01c      	b.n	8005d16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d903      	bls.n	8005cea <DMA_CheckFifoParam+0xb6>
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d003      	beq.n	8005cf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ce8:	e018      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
      break;
 8005cee:	e015      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00e      	beq.n	8005d1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	e00b      	b.n	8005d1a <DMA_CheckFifoParam+0xe6>
      break;
 8005d02:	bf00      	nop
 8005d04:	e00a      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      break;
 8005d06:	bf00      	nop
 8005d08:	e008      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      break;
 8005d0a:	bf00      	nop
 8005d0c:	e006      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      break;   
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
      break;
 8005d1a:	bf00      	nop
    }
  } 
  
  return status; 
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop

08005d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a33      	ldr	r2, [pc, #204]	; (8005e14 <HAL_GPIO_Init+0xe8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d017      	beq.n	8005d7a <HAL_GPIO_Init+0x4e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a32      	ldr	r2, [pc, #200]	; (8005e18 <HAL_GPIO_Init+0xec>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_GPIO_Init+0x4e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a31      	ldr	r2, [pc, #196]	; (8005e1c <HAL_GPIO_Init+0xf0>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00f      	beq.n	8005d7a <HAL_GPIO_Init+0x4e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a30      	ldr	r2, [pc, #192]	; (8005e20 <HAL_GPIO_Init+0xf4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00b      	beq.n	8005d7a <HAL_GPIO_Init+0x4e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2f      	ldr	r2, [pc, #188]	; (8005e24 <HAL_GPIO_Init+0xf8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d007      	beq.n	8005d7a <HAL_GPIO_Init+0x4e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	; (8005e28 <HAL_GPIO_Init+0xfc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <HAL_GPIO_Init+0x4e>
 8005d72:	21ac      	movs	r1, #172	; 0xac
 8005d74:	482d      	ldr	r0, [pc, #180]	; (8005e2c <HAL_GPIO_Init+0x100>)
 8005d76:	f7fd fc46 	bl	8003606 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_GPIO_Init+0x64>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	041b      	lsls	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_GPIO_Init+0x6c>
 8005d90:	21ad      	movs	r1, #173	; 0xad
 8005d92:	4826      	ldr	r0, [pc, #152]	; (8005e2c <HAL_GPIO_Init+0x100>)
 8005d94:	f7fd fc37 	bl	8003606 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d035      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d031      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b11      	cmp	r3, #17
 8005dae:	d02d      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d029      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b12      	cmp	r3, #18
 8005dbe:	d025      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005dc8:	d020      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005dd2:	d01b      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005ddc:	d016      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005de6:	d011      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005df0:	d00c      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005dfa:	d007      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d003      	beq.n	8005e0c <HAL_GPIO_Init+0xe0>
 8005e04:	21ae      	movs	r1, #174	; 0xae
 8005e06:	4809      	ldr	r0, [pc, #36]	; (8005e2c <HAL_GPIO_Init+0x100>)
 8005e08:	f7fd fbfd 	bl	8003606 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e211      	b.n	8006236 <HAL_GPIO_Init+0x50a>
 8005e12:	bf00      	nop
 8005e14:	40020000 	.word	0x40020000
 8005e18:	40020400 	.word	0x40020400
 8005e1c:	40020800 	.word	0x40020800
 8005e20:	40020c00 	.word	0x40020c00
 8005e24:	40021000 	.word	0x40021000
 8005e28:	40021c00 	.word	0x40021c00
 8005e2c:	0801319c 	.word	0x0801319c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e30:	2201      	movs	r2, #1
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4013      	ands	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	f040 81f1 	bne.w	8006230 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d005      	beq.n	8005e66 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d144      	bne.n	8005ef0 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <HAL_GPIO_Init+0x162>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d00b      	beq.n	8005e8e <HAL_GPIO_Init+0x162>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d007      	beq.n	8005e8e <HAL_GPIO_Init+0x162>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d003      	beq.n	8005e8e <HAL_GPIO_Init+0x162>
 8005e86:	21c0      	movs	r1, #192	; 0xc0
 8005e88:	489f      	ldr	r0, [pc, #636]	; (8006108 <HAL_GPIO_Init+0x3dc>)
 8005e8a:	f7fd fbbc 	bl	8003606 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	2203      	movs	r2, #3
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43db      	mvns	r3, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	091b      	lsrs	r3, r3, #4
 8005eda:	f003 0201 	and.w	r2, r3, #1
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d027      	beq.n	8005f4c <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_GPIO_Init+0x1f0>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d007      	beq.n	8005f1c <HAL_GPIO_Init+0x1f0>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d003      	beq.n	8005f1c <HAL_GPIO_Init+0x1f0>
 8005f14:	21d1      	movs	r1, #209	; 0xd1
 8005f16:	487c      	ldr	r0, [pc, #496]	; (8006108 <HAL_GPIO_Init+0x3dc>)
 8005f18:	f7fd fb75 	bl	8003606 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	2203      	movs	r2, #3
 8005f28:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	f040 80a0 	bne.w	800609a <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d077      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b09      	cmp	r3, #9
 8005f68:	d073      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d06f      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06b      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d067      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d063      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d05f      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d05b      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d057      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d053      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d04f      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d04b      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d047      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d043      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d03f      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b05      	cmp	r3, #5
 8005fd8:	d03b      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d037      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b06      	cmp	r3, #6
 8005fe8:	d033      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b06      	cmp	r3, #6
 8005ff0:	d02f      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d02b      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b06      	cmp	r3, #6
 8006000:	d027      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b07      	cmp	r3, #7
 8006008:	d023      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b07      	cmp	r3, #7
 8006010:	d01f      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b07      	cmp	r3, #7
 8006018:	d01b      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b08      	cmp	r3, #8
 8006020:	d017      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	2b0a      	cmp	r3, #10
 8006028:	d013      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	2b09      	cmp	r3, #9
 8006030:	d00f      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	2b09      	cmp	r3, #9
 8006038:	d00b      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b0c      	cmp	r3, #12
 8006040:	d007      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b0f      	cmp	r3, #15
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_Init+0x326>
 800604a:	21de      	movs	r1, #222	; 0xde
 800604c:	482e      	ldr	r0, [pc, #184]	; (8006108 <HAL_GPIO_Init+0x3dc>)
 800604e:	f7fd fada 	bl	8003606 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	08da      	lsrs	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3208      	adds	r2, #8
 800605a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	220f      	movs	r2, #15
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4313      	orrs	r3, r2
 800608a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	08da      	lsrs	r2, r3, #3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3208      	adds	r2, #8
 8006094:	69b9      	ldr	r1, [r7, #24]
 8006096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	2203      	movs	r2, #3
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f003 0203 	and.w	r2, r3, #3
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80aa 	beq.w	8006230 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <HAL_GPIO_Init+0x3e0>)
 80060e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e4:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_GPIO_Init+0x3e0>)
 80060e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ea:	6453      	str	r3, [r2, #68]	; 0x44
 80060ec:	4b07      	ldr	r3, [pc, #28]	; (800610c <HAL_GPIO_Init+0x3e0>)
 80060ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060f8:	4a05      	ldr	r2, [pc, #20]	; (8006110 <HAL_GPIO_Init+0x3e4>)
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	089b      	lsrs	r3, r3, #2
 80060fe:	3302      	adds	r3, #2
 8006100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006104:	e006      	b.n	8006114 <HAL_GPIO_Init+0x3e8>
 8006106:	bf00      	nop
 8006108:	0801319c 	.word	0x0801319c
 800610c:	40023800 	.word	0x40023800
 8006110:	40013800 	.word	0x40013800
 8006114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	220f      	movs	r2, #15
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4013      	ands	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a46      	ldr	r2, [pc, #280]	; (8006248 <HAL_GPIO_Init+0x51c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d019      	beq.n	8006168 <HAL_GPIO_Init+0x43c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a45      	ldr	r2, [pc, #276]	; (800624c <HAL_GPIO_Init+0x520>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d013      	beq.n	8006164 <HAL_GPIO_Init+0x438>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a44      	ldr	r2, [pc, #272]	; (8006250 <HAL_GPIO_Init+0x524>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00d      	beq.n	8006160 <HAL_GPIO_Init+0x434>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a43      	ldr	r2, [pc, #268]	; (8006254 <HAL_GPIO_Init+0x528>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <HAL_GPIO_Init+0x430>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a42      	ldr	r2, [pc, #264]	; (8006258 <HAL_GPIO_Init+0x52c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d101      	bne.n	8006158 <HAL_GPIO_Init+0x42c>
 8006154:	2304      	movs	r3, #4
 8006156:	e008      	b.n	800616a <HAL_GPIO_Init+0x43e>
 8006158:	2307      	movs	r3, #7
 800615a:	e006      	b.n	800616a <HAL_GPIO_Init+0x43e>
 800615c:	2303      	movs	r3, #3
 800615e:	e004      	b.n	800616a <HAL_GPIO_Init+0x43e>
 8006160:	2302      	movs	r3, #2
 8006162:	e002      	b.n	800616a <HAL_GPIO_Init+0x43e>
 8006164:	2301      	movs	r3, #1
 8006166:	e000      	b.n	800616a <HAL_GPIO_Init+0x43e>
 8006168:	2300      	movs	r3, #0
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	f002 0203 	and.w	r2, r2, #3
 8006170:	0092      	lsls	r2, r2, #2
 8006172:	4093      	lsls	r3, r2
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800617a:	4938      	ldr	r1, [pc, #224]	; (800625c <HAL_GPIO_Init+0x530>)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	089b      	lsrs	r3, r3, #2
 8006180:	3302      	adds	r3, #2
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006188:	4b35      	ldr	r3, [pc, #212]	; (8006260 <HAL_GPIO_Init+0x534>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061ac:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <HAL_GPIO_Init+0x534>)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061b2:	4b2b      	ldr	r3, [pc, #172]	; (8006260 <HAL_GPIO_Init+0x534>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061d6:	4a22      	ldr	r2, [pc, #136]	; (8006260 <HAL_GPIO_Init+0x534>)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061dc:	4b20      	ldr	r3, [pc, #128]	; (8006260 <HAL_GPIO_Init+0x534>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006200:	4a17      	ldr	r2, [pc, #92]	; (8006260 <HAL_GPIO_Init+0x534>)
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006206:	4b16      	ldr	r3, [pc, #88]	; (8006260 <HAL_GPIO_Init+0x534>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	43db      	mvns	r3, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4013      	ands	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800622a:	4a0d      	ldr	r2, [pc, #52]	; (8006260 <HAL_GPIO_Init+0x534>)
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	3301      	adds	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	2b0f      	cmp	r3, #15
 800623a:	f67f adf9 	bls.w	8005e30 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800623e:	bf00      	nop
 8006240:	bf00      	nop
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40020000 	.word	0x40020000
 800624c:	40020400 	.word	0x40020400
 8006250:	40020800 	.word	0x40020800
 8006254:	40020c00 	.word	0x40020c00
 8006258:	40021000 	.word	0x40021000
 800625c:	40013800 	.word	0x40013800
 8006260:	40013c00 	.word	0x40013c00

08006264 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a71      	ldr	r2, [pc, #452]	; (8006444 <HAL_GPIO_DeInit+0x1e0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_GPIO_DeInit+0x50>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a70      	ldr	r2, [pc, #448]	; (8006448 <HAL_GPIO_DeInit+0x1e4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d014      	beq.n	80062b4 <HAL_GPIO_DeInit+0x50>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a6f      	ldr	r2, [pc, #444]	; (800644c <HAL_GPIO_DeInit+0x1e8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d010      	beq.n	80062b4 <HAL_GPIO_DeInit+0x50>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a6e      	ldr	r2, [pc, #440]	; (8006450 <HAL_GPIO_DeInit+0x1ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00c      	beq.n	80062b4 <HAL_GPIO_DeInit+0x50>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a6d      	ldr	r2, [pc, #436]	; (8006454 <HAL_GPIO_DeInit+0x1f0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d008      	beq.n	80062b4 <HAL_GPIO_DeInit+0x50>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a6c      	ldr	r2, [pc, #432]	; (8006458 <HAL_GPIO_DeInit+0x1f4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_GPIO_DeInit+0x50>
 80062aa:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80062ae:	486b      	ldr	r0, [pc, #428]	; (800645c <HAL_GPIO_DeInit+0x1f8>)
 80062b0:	f7fd f9a9 	bl	8003606 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e0bb      	b.n	8006432 <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062ba:	2201      	movs	r2, #1
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	fa02 f303 	lsl.w	r3, r2, r3
 80062c2:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4013      	ands	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	f040 80ab 	bne.w	800642c <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80062d6:	4a62      	ldr	r2, [pc, #392]	; (8006460 <HAL_GPIO_DeInit+0x1fc>)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	089b      	lsrs	r3, r3, #2
 80062dc:	3302      	adds	r3, #2
 80062de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e2:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	220f      	movs	r2, #15
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	4013      	ands	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a52      	ldr	r2, [pc, #328]	; (8006444 <HAL_GPIO_DeInit+0x1e0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d019      	beq.n	8006334 <HAL_GPIO_DeInit+0xd0>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a51      	ldr	r2, [pc, #324]	; (8006448 <HAL_GPIO_DeInit+0x1e4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d013      	beq.n	8006330 <HAL_GPIO_DeInit+0xcc>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a50      	ldr	r2, [pc, #320]	; (800644c <HAL_GPIO_DeInit+0x1e8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00d      	beq.n	800632c <HAL_GPIO_DeInit+0xc8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a4f      	ldr	r2, [pc, #316]	; (8006450 <HAL_GPIO_DeInit+0x1ec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d007      	beq.n	8006328 <HAL_GPIO_DeInit+0xc4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a4e      	ldr	r2, [pc, #312]	; (8006454 <HAL_GPIO_DeInit+0x1f0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d101      	bne.n	8006324 <HAL_GPIO_DeInit+0xc0>
 8006320:	2304      	movs	r3, #4
 8006322:	e008      	b.n	8006336 <HAL_GPIO_DeInit+0xd2>
 8006324:	2307      	movs	r3, #7
 8006326:	e006      	b.n	8006336 <HAL_GPIO_DeInit+0xd2>
 8006328:	2303      	movs	r3, #3
 800632a:	e004      	b.n	8006336 <HAL_GPIO_DeInit+0xd2>
 800632c:	2302      	movs	r3, #2
 800632e:	e002      	b.n	8006336 <HAL_GPIO_DeInit+0xd2>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <HAL_GPIO_DeInit+0xd2>
 8006334:	2300      	movs	r3, #0
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	f002 0203 	and.w	r2, r2, #3
 800633c:	0092      	lsls	r2, r2, #2
 800633e:	4093      	lsls	r3, r2
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	429a      	cmp	r2, r3
 8006344:	d132      	bne.n	80063ac <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006346:	4b47      	ldr	r3, [pc, #284]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	43db      	mvns	r3, r3
 800634e:	4945      	ldr	r1, [pc, #276]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 8006350:	4013      	ands	r3, r2
 8006352:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006354:	4b43      	ldr	r3, [pc, #268]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	43db      	mvns	r3, r3
 800635c:	4941      	ldr	r1, [pc, #260]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 800635e:	4013      	ands	r3, r2
 8006360:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006362:	4b40      	ldr	r3, [pc, #256]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	43db      	mvns	r3, r3
 800636a:	493e      	ldr	r1, [pc, #248]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 800636c:	4013      	ands	r3, r2
 800636e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006370:	4b3c      	ldr	r3, [pc, #240]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	43db      	mvns	r3, r3
 8006378:	493a      	ldr	r1, [pc, #232]	; (8006464 <HAL_GPIO_DeInit+0x200>)
 800637a:	4013      	ands	r3, r2
 800637c:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 0303 	and.w	r3, r3, #3
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	220f      	movs	r2, #15
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800638e:	4a34      	ldr	r2, [pc, #208]	; (8006460 <HAL_GPIO_DeInit+0x1fc>)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	3302      	adds	r3, #2
 8006396:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	43da      	mvns	r2, r3
 800639e:	4830      	ldr	r0, [pc, #192]	; (8006460 <HAL_GPIO_DeInit+0x1fc>)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	089b      	lsrs	r3, r3, #2
 80063a4:	400a      	ands	r2, r1
 80063a6:	3302      	adds	r3, #2
 80063a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	2103      	movs	r1, #3
 80063b6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	401a      	ands	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	08da      	lsrs	r2, r3, #3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3208      	adds	r2, #8
 80063ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	220f      	movs	r2, #15
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	08d2      	lsrs	r2, r2, #3
 80063e2:	4019      	ands	r1, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3208      	adds	r2, #8
 80063e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	2103      	movs	r1, #3
 80063f6:	fa01 f303 	lsl.w	r3, r1, r3
 80063fa:	43db      	mvns	r3, r3
 80063fc:	401a      	ands	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	2101      	movs	r1, #1
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	fa01 f303 	lsl.w	r3, r1, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	401a      	ands	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	2103      	movs	r1, #3
 8006420:	fa01 f303 	lsl.w	r3, r1, r3
 8006424:	43db      	mvns	r3, r3
 8006426:	401a      	ands	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	3301      	adds	r3, #1
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b0f      	cmp	r3, #15
 8006436:	f67f af40 	bls.w	80062ba <HAL_GPIO_DeInit+0x56>
    }
  }
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40020000 	.word	0x40020000
 8006448:	40020400 	.word	0x40020400
 800644c:	40020800 	.word	0x40020800
 8006450:	40020c00 	.word	0x40020c00
 8006454:	40021000 	.word	0x40021000
 8006458:	40021c00 	.word	0x40021c00
 800645c:	0801319c 	.word	0x0801319c
 8006460:	40013800 	.word	0x40013800
 8006464:	40013c00 	.word	0x40013c00

08006468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	807b      	strh	r3, [r7, #2]
 8006474:	4613      	mov	r3, r2
 8006476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006478:	887b      	ldrh	r3, [r7, #2]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d004      	beq.n	8006488 <HAL_GPIO_WritePin+0x20>
 800647e:	887b      	ldrh	r3, [r7, #2]
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <HAL_GPIO_WritePin+0x2a>
 8006488:	f240 119d 	movw	r1, #413	; 0x19d
 800648c:	480e      	ldr	r0, [pc, #56]	; (80064c8 <HAL_GPIO_WritePin+0x60>)
 800648e:	f7fd f8ba 	bl	8003606 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006492:	787b      	ldrb	r3, [r7, #1]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <HAL_GPIO_WritePin+0x40>
 8006498:	787b      	ldrb	r3, [r7, #1]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d004      	beq.n	80064a8 <HAL_GPIO_WritePin+0x40>
 800649e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80064a2:	4809      	ldr	r0, [pc, #36]	; (80064c8 <HAL_GPIO_WritePin+0x60>)
 80064a4:	f7fd f8af 	bl	8003606 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80064a8:	787b      	ldrb	r3, [r7, #1]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064ae:	887a      	ldrh	r2, [r7, #2]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064b4:	e003      	b.n	80064be <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064b6:	887b      	ldrh	r3, [r7, #2]
 80064b8:	041a      	lsls	r2, r3, #16
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	619a      	str	r2, [r3, #24]
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	0801319c 	.word	0x0801319c

080064cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	4603      	mov	r3, r0
 80064d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064d6:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d8:	695a      	ldr	r2, [r3, #20]
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	4013      	ands	r3, r2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064e2:	4a05      	ldr	r2, [pc, #20]	; (80064f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fc fbb8 	bl	8002c60 <HAL_GPIO_EXTI_Callback>
  }
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40013c00 	.word	0x40013c00

080064fc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80064fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fe:	b08f      	sub	sp, #60	; 0x3c
 8006500:	af0a      	add	r7, sp, #40	; 0x28
 8006502:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e05d      	b.n	80065ca <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006516:	d003      	beq.n	8006520 <HAL_HCD_Init+0x24>
 8006518:	2179      	movs	r1, #121	; 0x79
 800651a:	482e      	ldr	r0, [pc, #184]	; (80065d4 <HAL_HCD_Init+0xd8>)
 800651c:	f7fd f873 	bl	8003606 <assert_failed>

  USBx = hhcd->Instance;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f009 fe0a 	bl	8010154 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2203      	movs	r2, #3
 8006544:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f006 ff60 	bl	800d424 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	687e      	ldr	r6, [r7, #4]
 800656c:	466d      	mov	r5, sp
 800656e:	f106 0410 	add.w	r4, r6, #16
 8006572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800657a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800657e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006582:	1d33      	adds	r3, r6, #4
 8006584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006586:	6838      	ldr	r0, [r7, #0]
 8006588:	f006 feda 	bl	800d340 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f006 ff57 	bl	800d446 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	687e      	ldr	r6, [r7, #4]
 80065a0:	466d      	mov	r5, sp
 80065a2:	f106 0410 	add.w	r4, r6, #16
 80065a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80065b6:	1d33      	adds	r3, r6, #4
 80065b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065ba:	6838      	ldr	r0, [r7, #0]
 80065bc:	f007 f8be 	bl	800d73c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d2:	bf00      	nop
 80065d4:	080131d8 	.word	0x080131d8

080065d8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b089      	sub	sp, #36	; 0x24
 80065dc:	af04      	add	r7, sp, #16
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	4608      	mov	r0, r1
 80065e2:	4611      	mov	r1, r2
 80065e4:	461a      	mov	r2, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	70fb      	strb	r3, [r7, #3]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70bb      	strb	r3, [r7, #2]
 80065ee:	4613      	mov	r3, r2
 80065f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_HCD_HC_Init+0x28>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e076      	b.n	80066ee <HAL_HCD_HC_Init+0x116>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	212c      	movs	r1, #44	; 0x2c
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	333d      	adds	r3, #61	; 0x3d
 8006616:	2200      	movs	r2, #0
 8006618:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	212c      	movs	r1, #44	; 0x2c
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	3338      	adds	r3, #56	; 0x38
 8006628:	787a      	ldrb	r2, [r7, #1]
 800662a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	212c      	movs	r1, #44	; 0x2c
 8006632:	fb01 f303 	mul.w	r3, r1, r3
 8006636:	4413      	add	r3, r2
 8006638:	3340      	adds	r3, #64	; 0x40
 800663a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800663c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	212c      	movs	r1, #44	; 0x2c
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	3339      	adds	r3, #57	; 0x39
 800664c:	78fa      	ldrb	r2, [r7, #3]
 800664e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	212c      	movs	r1, #44	; 0x2c
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	4413      	add	r3, r2
 800665c:	333f      	adds	r3, #63	; 0x3f
 800665e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	78ba      	ldrb	r2, [r7, #2]
 8006668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800666c:	b2d0      	uxtb	r0, r2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	212c      	movs	r1, #44	; 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	333a      	adds	r3, #58	; 0x3a
 800667a:	4602      	mov	r2, r0
 800667c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800667e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006682:	2b00      	cmp	r3, #0
 8006684:	da09      	bge.n	800669a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	212c      	movs	r1, #44	; 0x2c
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	4413      	add	r3, r2
 8006692:	333b      	adds	r3, #59	; 0x3b
 8006694:	2201      	movs	r2, #1
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	e008      	b.n	80066ac <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800669a:	78fb      	ldrb	r3, [r7, #3]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	212c      	movs	r1, #44	; 0x2c
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	333b      	adds	r3, #59	; 0x3b
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80066ac:	78fb      	ldrb	r3, [r7, #3]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	212c      	movs	r1, #44	; 0x2c
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	4413      	add	r3, r2
 80066b8:	333c      	adds	r3, #60	; 0x3c
 80066ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80066be:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	787c      	ldrb	r4, [r7, #1]
 80066c6:	78ba      	ldrb	r2, [r7, #2]
 80066c8:	78f9      	ldrb	r1, [r7, #3]
 80066ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066cc:	9302      	str	r3, [sp, #8]
 80066ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066d2:	9301      	str	r3, [sp, #4]
 80066d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4623      	mov	r3, r4
 80066dc:	f007 f9a8 	bl	800da30 <USB_HC_Init>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd90      	pop	{r4, r7, pc}

080066f6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
 80066fe:	460b      	mov	r3, r1
 8006700:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_HCD_HC_Halt+0x1e>
 8006710:	2302      	movs	r3, #2
 8006712:	e00f      	b.n	8006734 <HAL_HCD_HC_Halt+0x3e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f007 fbe4 	bl	800def2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	70fb      	strb	r3, [r7, #3]
 800674e:	460b      	mov	r3, r1
 8006750:	70bb      	strb	r3, [r7, #2]
 8006752:	4613      	mov	r3, r2
 8006754:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006756:	78fb      	ldrb	r3, [r7, #3]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	212c      	movs	r1, #44	; 0x2c
 800675c:	fb01 f303 	mul.w	r3, r1, r3
 8006760:	4413      	add	r3, r2
 8006762:	333b      	adds	r3, #59	; 0x3b
 8006764:	78ba      	ldrb	r2, [r7, #2]
 8006766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	212c      	movs	r1, #44	; 0x2c
 800676e:	fb01 f303 	mul.w	r3, r1, r3
 8006772:	4413      	add	r3, r2
 8006774:	333f      	adds	r3, #63	; 0x3f
 8006776:	787a      	ldrb	r2, [r7, #1]
 8006778:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800677a:	7c3b      	ldrb	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d112      	bne.n	80067a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	212c      	movs	r1, #44	; 0x2c
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	3342      	adds	r3, #66	; 0x42
 800678e:	2203      	movs	r2, #3
 8006790:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	212c      	movs	r1, #44	; 0x2c
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	333d      	adds	r3, #61	; 0x3d
 80067a0:	7f3a      	ldrb	r2, [r7, #28]
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e008      	b.n	80067b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	212c      	movs	r1, #44	; 0x2c
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	3342      	adds	r3, #66	; 0x42
 80067b4:	2202      	movs	r2, #2
 80067b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80067b8:	787b      	ldrb	r3, [r7, #1]
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	f200 80c6 	bhi.w	800694c <HAL_HCD_HC_SubmitRequest+0x210>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	08006939 	.word	0x08006939
 80067d0:	0800683d 	.word	0x0800683d
 80067d4:	080068bb 	.word	0x080068bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80067d8:	7c3b      	ldrb	r3, [r7, #16]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	f040 80b8 	bne.w	8006950 <HAL_HCD_HC_SubmitRequest+0x214>
 80067e0:	78bb      	ldrb	r3, [r7, #2]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 80b4 	bne.w	8006950 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80067e8:	8b3b      	ldrh	r3, [r7, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d108      	bne.n	8006800 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	212c      	movs	r1, #44	; 0x2c
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	4413      	add	r3, r2
 80067fa:	3355      	adds	r3, #85	; 0x55
 80067fc:	2201      	movs	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	212c      	movs	r1, #44	; 0x2c
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	4413      	add	r3, r2
 800680c:	3355      	adds	r3, #85	; 0x55
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	212c      	movs	r1, #44	; 0x2c
 800681a:	fb01 f303 	mul.w	r3, r1, r3
 800681e:	4413      	add	r3, r2
 8006820:	3342      	adds	r3, #66	; 0x42
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006826:	e093      	b.n	8006950 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	212c      	movs	r1, #44	; 0x2c
 800682e:	fb01 f303 	mul.w	r3, r1, r3
 8006832:	4413      	add	r3, r2
 8006834:	3342      	adds	r3, #66	; 0x42
 8006836:	2202      	movs	r2, #2
 8006838:	701a      	strb	r2, [r3, #0]
      break;
 800683a:	e089      	b.n	8006950 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800683c:	78bb      	ldrb	r3, [r7, #2]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d11d      	bne.n	800687e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	212c      	movs	r1, #44	; 0x2c
 8006848:	fb01 f303 	mul.w	r3, r1, r3
 800684c:	4413      	add	r3, r2
 800684e:	3355      	adds	r3, #85	; 0x55
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	212c      	movs	r1, #44	; 0x2c
 800685c:	fb01 f303 	mul.w	r3, r1, r3
 8006860:	4413      	add	r3, r2
 8006862:	3342      	adds	r3, #66	; 0x42
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006868:	e073      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	212c      	movs	r1, #44	; 0x2c
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	4413      	add	r3, r2
 8006876:	3342      	adds	r3, #66	; 0x42
 8006878:	2202      	movs	r2, #2
 800687a:	701a      	strb	r2, [r3, #0]
      break;
 800687c:	e069      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	212c      	movs	r1, #44	; 0x2c
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	3354      	adds	r3, #84	; 0x54
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	212c      	movs	r1, #44	; 0x2c
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	4413      	add	r3, r2
 800689e:	3342      	adds	r3, #66	; 0x42
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
      break;
 80068a4:	e055      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	212c      	movs	r1, #44	; 0x2c
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	4413      	add	r3, r2
 80068b2:	3342      	adds	r3, #66	; 0x42
 80068b4:	2202      	movs	r2, #2
 80068b6:	701a      	strb	r2, [r3, #0]
      break;
 80068b8:	e04b      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80068ba:	78bb      	ldrb	r3, [r7, #2]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d11d      	bne.n	80068fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	212c      	movs	r1, #44	; 0x2c
 80068c6:	fb01 f303 	mul.w	r3, r1, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	3355      	adds	r3, #85	; 0x55
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	212c      	movs	r1, #44	; 0x2c
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	4413      	add	r3, r2
 80068e0:	3342      	adds	r3, #66	; 0x42
 80068e2:	2200      	movs	r2, #0
 80068e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80068e6:	e034      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	212c      	movs	r1, #44	; 0x2c
 80068ee:	fb01 f303 	mul.w	r3, r1, r3
 80068f2:	4413      	add	r3, r2
 80068f4:	3342      	adds	r3, #66	; 0x42
 80068f6:	2202      	movs	r2, #2
 80068f8:	701a      	strb	r2, [r3, #0]
      break;
 80068fa:	e02a      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	212c      	movs	r1, #44	; 0x2c
 8006902:	fb01 f303 	mul.w	r3, r1, r3
 8006906:	4413      	add	r3, r2
 8006908:	3354      	adds	r3, #84	; 0x54
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d109      	bne.n	8006924 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	212c      	movs	r1, #44	; 0x2c
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	4413      	add	r3, r2
 800691c:	3342      	adds	r3, #66	; 0x42
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
      break;
 8006922:	e016      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	212c      	movs	r1, #44	; 0x2c
 800692a:	fb01 f303 	mul.w	r3, r1, r3
 800692e:	4413      	add	r3, r2
 8006930:	3342      	adds	r3, #66	; 0x42
 8006932:	2202      	movs	r2, #2
 8006934:	701a      	strb	r2, [r3, #0]
      break;
 8006936:	e00c      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	212c      	movs	r1, #44	; 0x2c
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	4413      	add	r3, r2
 8006944:	3342      	adds	r3, #66	; 0x42
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
      break;
 800694a:	e002      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800694c:	bf00      	nop
 800694e:	e000      	b.n	8006952 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006950:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	212c      	movs	r1, #44	; 0x2c
 8006958:	fb01 f303 	mul.w	r3, r1, r3
 800695c:	4413      	add	r3, r2
 800695e:	3344      	adds	r3, #68	; 0x44
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	8b3a      	ldrh	r2, [r7, #24]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	202c      	movs	r0, #44	; 0x2c
 800696c:	fb00 f303 	mul.w	r3, r0, r3
 8006970:	440b      	add	r3, r1
 8006972:	334c      	adds	r3, #76	; 0x4c
 8006974:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	212c      	movs	r1, #44	; 0x2c
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	3360      	adds	r3, #96	; 0x60
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	212c      	movs	r1, #44	; 0x2c
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	3350      	adds	r3, #80	; 0x50
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	212c      	movs	r1, #44	; 0x2c
 80069a0:	fb01 f303 	mul.w	r3, r1, r3
 80069a4:	4413      	add	r3, r2
 80069a6:	3339      	adds	r3, #57	; 0x39
 80069a8:	78fa      	ldrb	r2, [r7, #3]
 80069aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	212c      	movs	r1, #44	; 0x2c
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	4413      	add	r3, r2
 80069b8:	3361      	adds	r3, #97	; 0x61
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	222c      	movs	r2, #44	; 0x2c
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	3338      	adds	r3, #56	; 0x38
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	18d1      	adds	r1, r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	f007 f938 	bl	800dc4c <USB_HC_StartXfer>
 80069dc:	4603      	mov	r3, r0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop

080069e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f006 fe5b 	bl	800d6ba <USB_GetMode>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	f040 80f6 	bne.w	8006bf8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f006 fe3f 	bl	800d694 <USB_ReadInterrupts>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 80ec 	beq.w	8006bf6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f006 fe36 	bl	800d694 <USB_ReadInterrupts>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a32:	d104      	bne.n	8006a3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f006 fe26 	bl	800d694 <USB_ReadInterrupts>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a52:	d104      	bne.n	8006a5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f006 fe16 	bl	800d694 <USB_ReadInterrupts>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a72:	d104      	bne.n	8006a7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f006 fe06 	bl	800d694 <USB_ReadInterrupts>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d103      	bne.n	8006a9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2202      	movs	r2, #2
 8006a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f006 fdf8 	bl	800d694 <USB_ReadInterrupts>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aae:	d11c      	bne.n	8006aea <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006ab8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006aca:	2110      	movs	r1, #16
 8006acc:	6938      	ldr	r0, [r7, #16]
 8006ace:	f006 fd07 	bl	800d4e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006ad2:	6938      	ldr	r0, [r7, #16]
 8006ad4:	f006 fd28 	bl	800d528 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2101      	movs	r1, #1
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f006 fee0 	bl	800d8a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f009 fbb3 	bl	8010250 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f006 fdd0 	bl	800d694 <USB_ReadInterrupts>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006afa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006afe:	d102      	bne.n	8006b06 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 fa03 	bl	8007f0c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f006 fdc2 	bl	800d694 <USB_ReadInterrupts>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d106      	bne.n	8006b28 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f009 fb7c 	bl	8010218 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2208      	movs	r2, #8
 8006b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f006 fdb1 	bl	800d694 <USB_ReadInterrupts>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d101      	bne.n	8006b40 <HAL_HCD_IRQHandler+0x158>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e000      	b.n	8006b42 <HAL_HCD_IRQHandler+0x15a>
 8006b40:	2300      	movs	r3, #0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d012      	beq.n	8006b6c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0210 	bic.w	r2, r2, #16
 8006b54:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f906 	bl	8007d68 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0210 	orr.w	r2, r2, #16
 8006b6a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f006 fd8f 	bl	800d694 <USB_ReadInterrupts>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b80:	d13a      	bne.n	8006bf8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f007 f9a2 	bl	800ded0 <USB_HC_ReadInterrupt>
 8006b8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e025      	b.n	8006be0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d018      	beq.n	8006bda <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bbe:	d106      	bne.n	8006bce <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8ab 	bl	8006d22 <HCD_HC_IN_IRQHandler>
 8006bcc:	e005      	b.n	8006bda <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fcc6 	bl	8007566 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d3d4      	bcc.n	8006b94 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bf2:	615a      	str	r2, [r3, #20]
 8006bf4:	e000      	b.n	8006bf8 <HAL_HCD_IRQHandler+0x210>
      return;
 8006bf6:	bf00      	nop
    }
  }
}
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_HCD_Start+0x16>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e013      	b.n	8006c3c <HAL_HCD_Start+0x3e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2101      	movs	r1, #1
 8006c22:	4618      	mov	r0, r3
 8006c24:	f006 fea2 	bl	800d96c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f006 fbe8 	bl	800d402 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3708      	adds	r7, #8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_HCD_Stop+0x16>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e00d      	b.n	8006c76 <HAL_HCD_Stop+0x32>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f007 fa9c 	bl	800e1a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f006 fe44 	bl	800d918 <USB_ResetPort>
 8006c90:	4603      	mov	r3, r0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	212c      	movs	r1, #44	; 0x2c
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3360      	adds	r3, #96	; 0x60
 8006cb4:	781b      	ldrb	r3, [r3, #0]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006cce:	78fb      	ldrb	r3, [r7, #3]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	212c      	movs	r1, #44	; 0x2c
 8006cd4:	fb01 f303 	mul.w	r3, r1, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	3350      	adds	r3, #80	; 0x50
 8006cdc:	681b      	ldr	r3, [r3, #0]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f006 fe88 	bl	800da0c <USB_GetCurrentFrame>
 8006cfc:	4603      	mov	r3, r0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f006 fe63 	bl	800d9de <USB_GetHostSpeed>
 8006d18:	4603      	mov	r3, r0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b086      	sub	sp, #24
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006d38:	78fb      	ldrb	r3, [r7, #3]
 8006d3a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d119      	bne.n	8006d86 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5e:	461a      	mov	r2, r3
 8006d60:	2304      	movs	r3, #4
 8006d62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7e:	f043 0302 	orr.w	r3, r3, #2
 8006d82:	60d3      	str	r3, [r2, #12]
 8006d84:	e101      	b.n	8006f8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9c:	d12b      	bne.n	8006df6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006daa:	461a      	mov	r2, r3
 8006dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	212c      	movs	r1, #44	; 0x2c
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3361      	adds	r3, #97	; 0x61
 8006dc0:	2207      	movs	r2, #7
 8006dc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dde:	f043 0302 	orr.w	r3, r3, #2
 8006de2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f007 f87f 	bl	800def2 <USB_HC_Halt>
 8006df4:	e0c9      	b.n	8006f8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d109      	bne.n	8006e20 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2320      	movs	r3, #32
 8006e1c:	6093      	str	r3, [r2, #8]
 8006e1e:	e0b4      	b.n	8006f8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	d133      	bne.n	8006e9e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	0151      	lsls	r1, r2, #5
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	440a      	add	r2, r1
 8006e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e50:	f043 0302 	orr.w	r3, r3, #2
 8006e54:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	212c      	movs	r1, #44	; 0x2c
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	4413      	add	r3, r2
 8006e62:	3361      	adds	r3, #97	; 0x61
 8006e64:	2205      	movs	r2, #5
 8006e66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e74:	461a      	mov	r2, r3
 8006e76:	2310      	movs	r3, #16
 8006e78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e86:	461a      	mov	r2, r3
 8006e88:	2308      	movs	r3, #8
 8006e8a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f007 f82b 	bl	800def2 <USB_HC_Halt>
 8006e9c:	e075      	b.n	8006f8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb4:	d134      	bne.n	8006f20 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	212c      	movs	r1, #44	; 0x2c
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	3361      	adds	r3, #97	; 0x61
 8006ee4:	2208      	movs	r2, #8
 8006ee6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	2310      	movs	r3, #16
 8006ef8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f06:	461a      	mov	r2, r3
 8006f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f0c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	b2d2      	uxtb	r2, r2
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f006 ffea 	bl	800def2 <USB_HC_Halt>
 8006f1e:	e034      	b.n	8006f8a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d129      	bne.n	8006f8a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f50:	f043 0302 	orr.w	r3, r3, #2
 8006f54:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	212c      	movs	r1, #44	; 0x2c
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	3361      	adds	r3, #97	; 0x61
 8006f64:	2206      	movs	r2, #6
 8006f66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f006 ffbd 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	461a      	mov	r2, r3
 8006f86:	2380      	movs	r3, #128	; 0x80
 8006f88:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa0:	d122      	bne.n	8006fe8 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	0151      	lsls	r1, r2, #5
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	440a      	add	r2, r1
 8006fb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fbc:	f043 0302 	orr.w	r3, r3, #2
 8006fc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	4611      	mov	r1, r2
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f006 ff90 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006fe6:	e2ba      	b.n	800755e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	f040 811b 	bne.w	8007236 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d019      	beq.n	800703c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	212c      	movs	r1, #44	; 0x2c
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	4413      	add	r3, r2
 8007014:	3348      	adds	r3, #72	; 0x48
 8007016:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	0159      	lsls	r1, r3, #5
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	440b      	add	r3, r1
 8007020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	202c      	movs	r0, #44	; 0x2c
 8007032:	fb00 f303 	mul.w	r3, r0, r3
 8007036:	440b      	add	r3, r1
 8007038:	3350      	adds	r3, #80	; 0x50
 800703a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	212c      	movs	r1, #44	; 0x2c
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	4413      	add	r3, r2
 8007048:	3361      	adds	r3, #97	; 0x61
 800704a:	2201      	movs	r2, #1
 800704c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	212c      	movs	r1, #44	; 0x2c
 8007054:	fb01 f303 	mul.w	r3, r1, r3
 8007058:	4413      	add	r3, r2
 800705a:	335c      	adds	r3, #92	; 0x5c
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	461a      	mov	r2, r3
 800706e:	2301      	movs	r3, #1
 8007070:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	212c      	movs	r1, #44	; 0x2c
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	4413      	add	r3, r2
 800707e:	333f      	adds	r3, #63	; 0x3f
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	212c      	movs	r1, #44	; 0x2c
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	4413      	add	r3, r2
 8007092:	333f      	adds	r3, #63	; 0x3f
 8007094:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007096:	2b02      	cmp	r3, #2
 8007098:	d121      	bne.n	80070de <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b4:	f043 0302 	orr.w	r3, r3, #2
 80070b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f006 ff14 	bl	800def2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	461a      	mov	r2, r3
 80070d8:	2310      	movs	r3, #16
 80070da:	6093      	str	r3, [r2, #8]
 80070dc:	e066      	b.n	80071ac <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	212c      	movs	r1, #44	; 0x2c
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	333f      	adds	r3, #63	; 0x3f
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	d127      	bne.n	8007142 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	440a      	add	r2, r1
 8007108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800710c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007110:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	212c      	movs	r1, #44	; 0x2c
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	4413      	add	r3, r2
 800711e:	3360      	adds	r3, #96	; 0x60
 8007120:	2201      	movs	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	b2d9      	uxtb	r1, r3
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	202c      	movs	r0, #44	; 0x2c
 800712e:	fb00 f303 	mul.w	r3, r0, r3
 8007132:	4413      	add	r3, r2
 8007134:	3360      	adds	r3, #96	; 0x60
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f009 f896 	bl	801026c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007140:	e034      	b.n	80071ac <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	212c      	movs	r1, #44	; 0x2c
 8007148:	fb01 f303 	mul.w	r3, r1, r3
 800714c:	4413      	add	r3, r2
 800714e:	333f      	adds	r3, #63	; 0x3f
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d12a      	bne.n	80071ac <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	212c      	movs	r1, #44	; 0x2c
 800715c:	fb01 f303 	mul.w	r3, r1, r3
 8007160:	4413      	add	r3, r2
 8007162:	3360      	adds	r3, #96	; 0x60
 8007164:	2201      	movs	r2, #1
 8007166:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	212c      	movs	r1, #44	; 0x2c
 800716e:	fb01 f303 	mul.w	r3, r1, r3
 8007172:	4413      	add	r3, r2
 8007174:	3354      	adds	r3, #84	; 0x54
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f083 0301 	eor.w	r3, r3, #1
 800717c:	b2d8      	uxtb	r0, r3
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	212c      	movs	r1, #44	; 0x2c
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	4413      	add	r3, r2
 800718a:	3354      	adds	r3, #84	; 0x54
 800718c:	4602      	mov	r2, r0
 800718e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	b2d9      	uxtb	r1, r3
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	202c      	movs	r0, #44	; 0x2c
 800719a:	fb00 f303 	mul.w	r3, r0, r3
 800719e:	4413      	add	r3, r2
 80071a0:	3360      	adds	r3, #96	; 0x60
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f009 f860 	bl	801026c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d12b      	bne.n	800720c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	212c      	movs	r1, #44	; 0x2c
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	4413      	add	r3, r2
 80071c0:	3348      	adds	r3, #72	; 0x48
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	202c      	movs	r0, #44	; 0x2c
 80071ca:	fb00 f202 	mul.w	r2, r0, r2
 80071ce:	440a      	add	r2, r1
 80071d0:	3240      	adds	r2, #64	; 0x40
 80071d2:	8812      	ldrh	r2, [r2, #0]
 80071d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 81be 	beq.w	800755e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	212c      	movs	r1, #44	; 0x2c
 80071e8:	fb01 f303 	mul.w	r3, r1, r3
 80071ec:	4413      	add	r3, r2
 80071ee:	3354      	adds	r3, #84	; 0x54
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f083 0301 	eor.w	r3, r3, #1
 80071f6:	b2d8      	uxtb	r0, r3
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	212c      	movs	r1, #44	; 0x2c
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	4413      	add	r3, r2
 8007204:	3354      	adds	r3, #84	; 0x54
 8007206:	4602      	mov	r2, r0
 8007208:	701a      	strb	r2, [r3, #0]
}
 800720a:	e1a8      	b.n	800755e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	212c      	movs	r1, #44	; 0x2c
 8007212:	fb01 f303 	mul.w	r3, r1, r3
 8007216:	4413      	add	r3, r2
 8007218:	3354      	adds	r3, #84	; 0x54
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f083 0301 	eor.w	r3, r3, #1
 8007220:	b2d8      	uxtb	r0, r3
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	212c      	movs	r1, #44	; 0x2c
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	4413      	add	r3, r2
 800722e:	3354      	adds	r3, #84	; 0x54
 8007230:	4602      	mov	r2, r0
 8007232:	701a      	strb	r2, [r3, #0]
}
 8007234:	e193      	b.n	800755e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b02      	cmp	r3, #2
 800724a:	f040 8106 	bne.w	800745a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	440a      	add	r2, r1
 8007264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007268:	f023 0302 	bic.w	r3, r3, #2
 800726c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	212c      	movs	r1, #44	; 0x2c
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	3361      	adds	r3, #97	; 0x61
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d109      	bne.n	8007296 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	212c      	movs	r1, #44	; 0x2c
 8007288:	fb01 f303 	mul.w	r3, r1, r3
 800728c:	4413      	add	r3, r2
 800728e:	3360      	adds	r3, #96	; 0x60
 8007290:	2201      	movs	r2, #1
 8007292:	701a      	strb	r2, [r3, #0]
 8007294:	e0c9      	b.n	800742a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	212c      	movs	r1, #44	; 0x2c
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	4413      	add	r3, r2
 80072a2:	3361      	adds	r3, #97	; 0x61
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d109      	bne.n	80072be <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	212c      	movs	r1, #44	; 0x2c
 80072b0:	fb01 f303 	mul.w	r3, r1, r3
 80072b4:	4413      	add	r3, r2
 80072b6:	3360      	adds	r3, #96	; 0x60
 80072b8:	2205      	movs	r2, #5
 80072ba:	701a      	strb	r2, [r3, #0]
 80072bc:	e0b5      	b.n	800742a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	212c      	movs	r1, #44	; 0x2c
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	3361      	adds	r3, #97	; 0x61
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b06      	cmp	r3, #6
 80072d0:	d009      	beq.n	80072e6 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	212c      	movs	r1, #44	; 0x2c
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	4413      	add	r3, r2
 80072de:	3361      	adds	r3, #97	; 0x61
 80072e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d150      	bne.n	8007388 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	212c      	movs	r1, #44	; 0x2c
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	4413      	add	r3, r2
 80072f2:	335c      	adds	r3, #92	; 0x5c
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	202c      	movs	r0, #44	; 0x2c
 80072fe:	fb00 f303 	mul.w	r3, r0, r3
 8007302:	440b      	add	r3, r1
 8007304:	335c      	adds	r3, #92	; 0x5c
 8007306:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	212c      	movs	r1, #44	; 0x2c
 800730e:	fb01 f303 	mul.w	r3, r1, r3
 8007312:	4413      	add	r3, r2
 8007314:	335c      	adds	r3, #92	; 0x5c
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d912      	bls.n	8007342 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	212c      	movs	r1, #44	; 0x2c
 8007322:	fb01 f303 	mul.w	r3, r1, r3
 8007326:	4413      	add	r3, r2
 8007328:	335c      	adds	r3, #92	; 0x5c
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	212c      	movs	r1, #44	; 0x2c
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	4413      	add	r3, r2
 800733a:	3360      	adds	r3, #96	; 0x60
 800733c:	2204      	movs	r2, #4
 800733e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007340:	e073      	b.n	800742a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	212c      	movs	r1, #44	; 0x2c
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	3360      	adds	r3, #96	; 0x60
 8007350:	2202      	movs	r2, #2
 8007352:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800736a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007372:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007380:	461a      	mov	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007386:	e050      	b.n	800742a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	212c      	movs	r1, #44	; 0x2c
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	4413      	add	r3, r2
 8007394:	3361      	adds	r3, #97	; 0x61
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d122      	bne.n	80073e2 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	212c      	movs	r1, #44	; 0x2c
 80073a2:	fb01 f303 	mul.w	r3, r1, r3
 80073a6:	4413      	add	r3, r2
 80073a8:	3360      	adds	r3, #96	; 0x60
 80073aa:	2202      	movs	r2, #2
 80073ac:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073c4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	e023      	b.n	800742a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	212c      	movs	r1, #44	; 0x2c
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	4413      	add	r3, r2
 80073ee:	3361      	adds	r3, #97	; 0x61
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b07      	cmp	r3, #7
 80073f4:	d119      	bne.n	800742a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	212c      	movs	r1, #44	; 0x2c
 80073fc:	fb01 f303 	mul.w	r3, r1, r3
 8007400:	4413      	add	r3, r2
 8007402:	335c      	adds	r3, #92	; 0x5c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	202c      	movs	r0, #44	; 0x2c
 800740e:	fb00 f303 	mul.w	r3, r0, r3
 8007412:	440b      	add	r3, r1
 8007414:	335c      	adds	r3, #92	; 0x5c
 8007416:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	212c      	movs	r1, #44	; 0x2c
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4413      	add	r3, r2
 8007424:	3360      	adds	r3, #96	; 0x60
 8007426:	2204      	movs	r2, #4
 8007428:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	4413      	add	r3, r2
 8007432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007436:	461a      	mov	r2, r3
 8007438:	2302      	movs	r3, #2
 800743a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	b2d9      	uxtb	r1, r3
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	202c      	movs	r0, #44	; 0x2c
 8007446:	fb00 f303 	mul.w	r3, r0, r3
 800744a:	4413      	add	r3, r2
 800744c:	3360      	adds	r3, #96	; 0x60
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f008 ff0a 	bl	801026c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007458:	e081      	b.n	800755e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b10      	cmp	r3, #16
 800746e:	d176      	bne.n	800755e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	212c      	movs	r1, #44	; 0x2c
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	4413      	add	r3, r2
 800747c:	333f      	adds	r3, #63	; 0x3f
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d121      	bne.n	80074c8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	212c      	movs	r1, #44	; 0x2c
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	335c      	adds	r3, #92	; 0x5c
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	4413      	add	r3, r2
 800749e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	b2d2      	uxtb	r2, r2
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f006 fd16 	bl	800def2 <USB_HC_Halt>
 80074c6:	e041      	b.n	800754c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	212c      	movs	r1, #44	; 0x2c
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	333f      	adds	r3, #63	; 0x3f
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	212c      	movs	r1, #44	; 0x2c
 80074e2:	fb01 f303 	mul.w	r3, r1, r3
 80074e6:	4413      	add	r3, r2
 80074e8:	333f      	adds	r3, #63	; 0x3f
 80074ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d12d      	bne.n	800754c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	212c      	movs	r1, #44	; 0x2c
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	335c      	adds	r3, #92	; 0x5c
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d120      	bne.n	800754c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	212c      	movs	r1, #44	; 0x2c
 8007510:	fb01 f303 	mul.w	r3, r1, r3
 8007514:	4413      	add	r3, r2
 8007516:	3361      	adds	r3, #97	; 0x61
 8007518:	2203      	movs	r2, #3
 800751a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	4413      	add	r3, r2
 8007524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	440a      	add	r2, r1
 8007532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007536:	f043 0302 	orr.w	r3, r3, #2
 800753a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	4611      	mov	r1, r2
 8007546:	4618      	mov	r0, r3
 8007548:	f006 fcd3 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	4413      	add	r3, r2
 8007554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007558:	461a      	mov	r2, r3
 800755a:	2310      	movs	r3, #16
 800755c:	6093      	str	r3, [r2, #8]
}
 800755e:	bf00      	nop
 8007560:	3718      	adds	r7, #24
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b088      	sub	sp, #32
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	460b      	mov	r3, r1
 8007570:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b04      	cmp	r3, #4
 8007594:	d119      	bne.n	80075ca <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	4413      	add	r3, r2
 800759e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a2:	461a      	mov	r2, r3
 80075a4:	2304      	movs	r3, #4
 80075a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c2:	f043 0302 	orr.w	r3, r3, #2
 80075c6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80075c8:	e3ca      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d13e      	bne.n	800765e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ec:	461a      	mov	r2, r3
 80075ee:	2320      	movs	r3, #32
 80075f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	212c      	movs	r1, #44	; 0x2c
 80075f8:	fb01 f303 	mul.w	r3, r1, r3
 80075fc:	4413      	add	r3, r2
 80075fe:	333d      	adds	r3, #61	; 0x3d
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b01      	cmp	r3, #1
 8007604:	f040 83ac 	bne.w	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	212c      	movs	r1, #44	; 0x2c
 800760e:	fb01 f303 	mul.w	r3, r1, r3
 8007612:	4413      	add	r3, r2
 8007614:	333d      	adds	r3, #61	; 0x3d
 8007616:	2200      	movs	r2, #0
 8007618:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	212c      	movs	r1, #44	; 0x2c
 8007620:	fb01 f303 	mul.w	r3, r1, r3
 8007624:	4413      	add	r3, r2
 8007626:	3360      	adds	r3, #96	; 0x60
 8007628:	2202      	movs	r2, #2
 800762a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	4413      	add	r3, r2
 8007634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	440a      	add	r2, r1
 8007642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007646:	f043 0302 	orr.w	r3, r3, #2
 800764a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	4611      	mov	r1, r2
 8007656:	4618      	mov	r0, r3
 8007658:	f006 fc4b 	bl	800def2 <USB_HC_Halt>
}
 800765c:	e380      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	4413      	add	r3, r2
 8007666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007674:	d122      	bne.n	80076bc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	4413      	add	r3, r2
 800767e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	440a      	add	r2, r1
 800768c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007690:	f043 0302 	orr.w	r3, r3, #2
 8007694:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	b2d2      	uxtb	r2, r2
 800769e:	4611      	mov	r1, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f006 fc26 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b2:	461a      	mov	r2, r3
 80076b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076b8:	6093      	str	r3, [r2, #8]
}
 80076ba:	e351      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d150      	bne.n	8007774 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	212c      	movs	r1, #44	; 0x2c
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	4413      	add	r3, r2
 80076de:	335c      	adds	r3, #92	; 0x5c
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d111      	bne.n	800771e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	212c      	movs	r1, #44	; 0x2c
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	4413      	add	r3, r2
 8007706:	333d      	adds	r3, #61	; 0x3d
 8007708:	2201      	movs	r2, #1
 800770a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007718:	461a      	mov	r2, r3
 800771a:	2340      	movs	r3, #64	; 0x40
 800771c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	4413      	add	r3, r2
 8007726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	0151      	lsls	r1, r2, #5
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	440a      	add	r2, r1
 8007734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007738:	f043 0302 	orr.w	r3, r3, #2
 800773c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	b2d2      	uxtb	r2, r2
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f006 fbd2 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	4413      	add	r3, r2
 8007756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800775a:	461a      	mov	r2, r3
 800775c:	2301      	movs	r3, #1
 800775e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	212c      	movs	r1, #44	; 0x2c
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	4413      	add	r3, r2
 800776c:	3361      	adds	r3, #97	; 0x61
 800776e:	2201      	movs	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
}
 8007772:	e2f5      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	4413      	add	r3, r2
 800777c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b40      	cmp	r3, #64	; 0x40
 8007788:	d13c      	bne.n	8007804 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	212c      	movs	r1, #44	; 0x2c
 8007790:	fb01 f303 	mul.w	r3, r1, r3
 8007794:	4413      	add	r3, r2
 8007796:	3361      	adds	r3, #97	; 0x61
 8007798:	2204      	movs	r2, #4
 800779a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	212c      	movs	r1, #44	; 0x2c
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	333d      	adds	r3, #61	; 0x3d
 80077aa:	2201      	movs	r2, #1
 80077ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	212c      	movs	r1, #44	; 0x2c
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
 80077b8:	4413      	add	r3, r2
 80077ba:	335c      	adds	r3, #92	; 0x5c
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077da:	f043 0302 	orr.w	r3, r3, #2
 80077de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	4611      	mov	r1, r2
 80077ea:	4618      	mov	r0, r3
 80077ec:	f006 fb81 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fc:	461a      	mov	r2, r3
 80077fe:	2340      	movs	r3, #64	; 0x40
 8007800:	6093      	str	r3, [r2, #8]
}
 8007802:	e2ad      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	4413      	add	r3, r2
 800780c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b08      	cmp	r3, #8
 8007818:	d12a      	bne.n	8007870 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	4413      	add	r3, r2
 8007822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007826:	461a      	mov	r2, r3
 8007828:	2308      	movs	r3, #8
 800782a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	4413      	add	r3, r2
 8007834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	440a      	add	r2, r1
 8007842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007846:	f043 0302 	orr.w	r3, r3, #2
 800784a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	b2d2      	uxtb	r2, r2
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f006 fb4b 	bl	800def2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	212c      	movs	r1, #44	; 0x2c
 8007862:	fb01 f303 	mul.w	r3, r1, r3
 8007866:	4413      	add	r3, r2
 8007868:	3361      	adds	r3, #97	; 0x61
 800786a:	2205      	movs	r2, #5
 800786c:	701a      	strb	r2, [r3, #0]
}
 800786e:	e277      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	4413      	add	r3, r2
 8007878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0310 	and.w	r3, r3, #16
 8007882:	2b10      	cmp	r3, #16
 8007884:	d150      	bne.n	8007928 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	212c      	movs	r1, #44	; 0x2c
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	4413      	add	r3, r2
 8007892:	335c      	adds	r3, #92	; 0x5c
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	212c      	movs	r1, #44	; 0x2c
 800789e:	fb01 f303 	mul.w	r3, r1, r3
 80078a2:	4413      	add	r3, r2
 80078a4:	3361      	adds	r3, #97	; 0x61
 80078a6:	2203      	movs	r2, #3
 80078a8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	212c      	movs	r1, #44	; 0x2c
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	4413      	add	r3, r2
 80078b6:	333d      	adds	r3, #61	; 0x3d
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d112      	bne.n	80078e4 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	212c      	movs	r1, #44	; 0x2c
 80078c4:	fb01 f303 	mul.w	r3, r1, r3
 80078c8:	4413      	add	r3, r2
 80078ca:	333c      	adds	r3, #60	; 0x3c
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d108      	bne.n	80078e4 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	212c      	movs	r1, #44	; 0x2c
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	4413      	add	r3, r2
 80078de:	333d      	adds	r3, #61	; 0x3d
 80078e0:	2201      	movs	r2, #1
 80078e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078fe:	f043 0302 	orr.w	r3, r3, #2
 8007902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	4611      	mov	r1, r2
 800790e:	4618      	mov	r0, r3
 8007910:	f006 faef 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	4413      	add	r3, r2
 800791c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007920:	461a      	mov	r2, r3
 8007922:	2310      	movs	r3, #16
 8007924:	6093      	str	r3, [r2, #8]
}
 8007926:	e21b      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	4413      	add	r3, r2
 8007930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800793a:	2b80      	cmp	r3, #128	; 0x80
 800793c:	d174      	bne.n	8007a28 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d121      	bne.n	800798a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	212c      	movs	r1, #44	; 0x2c
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	4413      	add	r3, r2
 8007952:	3361      	adds	r3, #97	; 0x61
 8007954:	2206      	movs	r2, #6
 8007956:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	440a      	add	r2, r1
 800796e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007972:	f043 0302 	orr.w	r3, r3, #2
 8007976:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	b2d2      	uxtb	r2, r2
 8007980:	4611      	mov	r1, r2
 8007982:	4618      	mov	r0, r3
 8007984:	f006 fab5 	bl	800def2 <USB_HC_Halt>
 8007988:	e044      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	212c      	movs	r1, #44	; 0x2c
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	4413      	add	r3, r2
 8007996:	335c      	adds	r3, #92	; 0x5c
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	202c      	movs	r0, #44	; 0x2c
 80079a2:	fb00 f303 	mul.w	r3, r0, r3
 80079a6:	440b      	add	r3, r1
 80079a8:	335c      	adds	r3, #92	; 0x5c
 80079aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	212c      	movs	r1, #44	; 0x2c
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	335c      	adds	r3, #92	; 0x5c
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d920      	bls.n	8007a02 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	212c      	movs	r1, #44	; 0x2c
 80079c6:	fb01 f303 	mul.w	r3, r1, r3
 80079ca:	4413      	add	r3, r2
 80079cc:	335c      	adds	r3, #92	; 0x5c
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	212c      	movs	r1, #44	; 0x2c
 80079d8:	fb01 f303 	mul.w	r3, r1, r3
 80079dc:	4413      	add	r3, r2
 80079de:	3360      	adds	r3, #96	; 0x60
 80079e0:	2204      	movs	r2, #4
 80079e2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	b2d9      	uxtb	r1, r3
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	202c      	movs	r0, #44	; 0x2c
 80079ee:	fb00 f303 	mul.w	r3, r0, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	3360      	adds	r3, #96	; 0x60
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	461a      	mov	r2, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f008 fc36 	bl	801026c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a00:	e008      	b.n	8007a14 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	212c      	movs	r1, #44	; 0x2c
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3360      	adds	r3, #96	; 0x60
 8007a10:	2202      	movs	r2, #2
 8007a12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a20:	461a      	mov	r2, r3
 8007a22:	2380      	movs	r3, #128	; 0x80
 8007a24:	6093      	str	r3, [r2, #8]
}
 8007a26:	e19b      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a3e:	d134      	bne.n	8007aaa <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a5a:	f043 0302 	orr.w	r3, r3, #2
 8007a5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f006 fa41 	bl	800def2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	2310      	movs	r3, #16
 8007a80:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a94:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	212c      	movs	r1, #44	; 0x2c
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3361      	adds	r3, #97	; 0x61
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	701a      	strb	r2, [r3, #0]
}
 8007aa8:	e15a      	b.n	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	015a      	lsls	r2, r3, #5
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	f040 814f 	bne.w	8007d60 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	0151      	lsls	r1, r2, #5
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	440a      	add	r2, r1
 8007ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007adc:	f023 0302 	bic.w	r3, r3, #2
 8007ae0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	212c      	movs	r1, #44	; 0x2c
 8007ae8:	fb01 f303 	mul.w	r3, r1, r3
 8007aec:	4413      	add	r3, r2
 8007aee:	3361      	adds	r3, #97	; 0x61
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d17d      	bne.n	8007bf2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	212c      	movs	r1, #44	; 0x2c
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	4413      	add	r3, r2
 8007b02:	3360      	adds	r3, #96	; 0x60
 8007b04:	2201      	movs	r2, #1
 8007b06:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	212c      	movs	r1, #44	; 0x2c
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	333f      	adds	r3, #63	; 0x3f
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d00a      	beq.n	8007b32 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	212c      	movs	r1, #44	; 0x2c
 8007b22:	fb01 f303 	mul.w	r3, r1, r3
 8007b26:	4413      	add	r3, r2
 8007b28:	333f      	adds	r3, #63	; 0x3f
 8007b2a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	f040 8100 	bne.w	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d113      	bne.n	8007b62 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	212c      	movs	r1, #44	; 0x2c
 8007b40:	fb01 f303 	mul.w	r3, r1, r3
 8007b44:	4413      	add	r3, r2
 8007b46:	3355      	adds	r3, #85	; 0x55
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	f083 0301 	eor.w	r3, r3, #1
 8007b4e:	b2d8      	uxtb	r0, r3
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	212c      	movs	r1, #44	; 0x2c
 8007b56:	fb01 f303 	mul.w	r3, r1, r3
 8007b5a:	4413      	add	r3, r2
 8007b5c:	3355      	adds	r3, #85	; 0x55
 8007b5e:	4602      	mov	r2, r0
 8007b60:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	f040 80e3 	bne.w	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	212c      	movs	r1, #44	; 0x2c
 8007b72:	fb01 f303 	mul.w	r3, r1, r3
 8007b76:	4413      	add	r3, r2
 8007b78:	334c      	adds	r3, #76	; 0x4c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80d8 	beq.w	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	212c      	movs	r1, #44	; 0x2c
 8007b88:	fb01 f303 	mul.w	r3, r1, r3
 8007b8c:	4413      	add	r3, r2
 8007b8e:	334c      	adds	r3, #76	; 0x4c
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	202c      	movs	r0, #44	; 0x2c
 8007b98:	fb00 f202 	mul.w	r2, r0, r2
 8007b9c:	440a      	add	r2, r1
 8007b9e:	3240      	adds	r2, #64	; 0x40
 8007ba0:	8812      	ldrh	r2, [r2, #0]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	202c      	movs	r0, #44	; 0x2c
 8007bac:	fb00 f202 	mul.w	r2, r0, r2
 8007bb0:	440a      	add	r2, r1
 8007bb2:	3240      	adds	r2, #64	; 0x40
 8007bb4:	8812      	ldrh	r2, [r2, #0]
 8007bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 80b5 	beq.w	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	212c      	movs	r1, #44	; 0x2c
 8007bce:	fb01 f303 	mul.w	r3, r1, r3
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3355      	adds	r3, #85	; 0x55
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f083 0301 	eor.w	r3, r3, #1
 8007bdc:	b2d8      	uxtb	r0, r3
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	212c      	movs	r1, #44	; 0x2c
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	3355      	adds	r3, #85	; 0x55
 8007bec:	4602      	mov	r2, r0
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	e09f      	b.n	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	212c      	movs	r1, #44	; 0x2c
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	3361      	adds	r3, #97	; 0x61
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d109      	bne.n	8007c1a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	212c      	movs	r1, #44	; 0x2c
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	3360      	adds	r3, #96	; 0x60
 8007c14:	2202      	movs	r2, #2
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e08b      	b.n	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	212c      	movs	r1, #44	; 0x2c
 8007c20:	fb01 f303 	mul.w	r3, r1, r3
 8007c24:	4413      	add	r3, r2
 8007c26:	3361      	adds	r3, #97	; 0x61
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d109      	bne.n	8007c42 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	212c      	movs	r1, #44	; 0x2c
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	3360      	adds	r3, #96	; 0x60
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	701a      	strb	r2, [r3, #0]
 8007c40:	e077      	b.n	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	212c      	movs	r1, #44	; 0x2c
 8007c48:	fb01 f303 	mul.w	r3, r1, r3
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3361      	adds	r3, #97	; 0x61
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	d109      	bne.n	8007c6a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	212c      	movs	r1, #44	; 0x2c
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	4413      	add	r3, r2
 8007c62:	3360      	adds	r3, #96	; 0x60
 8007c64:	2205      	movs	r2, #5
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e063      	b.n	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	212c      	movs	r1, #44	; 0x2c
 8007c70:	fb01 f303 	mul.w	r3, r1, r3
 8007c74:	4413      	add	r3, r2
 8007c76:	3361      	adds	r3, #97	; 0x61
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b06      	cmp	r3, #6
 8007c7c:	d009      	beq.n	8007c92 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	212c      	movs	r1, #44	; 0x2c
 8007c84:	fb01 f303 	mul.w	r3, r1, r3
 8007c88:	4413      	add	r3, r2
 8007c8a:	3361      	adds	r3, #97	; 0x61
 8007c8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d14f      	bne.n	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	212c      	movs	r1, #44	; 0x2c
 8007c98:	fb01 f303 	mul.w	r3, r1, r3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	335c      	adds	r3, #92	; 0x5c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	1c5a      	adds	r2, r3, #1
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	202c      	movs	r0, #44	; 0x2c
 8007caa:	fb00 f303 	mul.w	r3, r0, r3
 8007cae:	440b      	add	r3, r1
 8007cb0:	335c      	adds	r3, #92	; 0x5c
 8007cb2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	212c      	movs	r1, #44	; 0x2c
 8007cba:	fb01 f303 	mul.w	r3, r1, r3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	335c      	adds	r3, #92	; 0x5c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d912      	bls.n	8007cee <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	212c      	movs	r1, #44	; 0x2c
 8007cce:	fb01 f303 	mul.w	r3, r1, r3
 8007cd2:	4413      	add	r3, r2
 8007cd4:	335c      	adds	r3, #92	; 0x5c
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	212c      	movs	r1, #44	; 0x2c
 8007ce0:	fb01 f303 	mul.w	r3, r1, r3
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3360      	adds	r3, #96	; 0x60
 8007ce8:	2204      	movs	r2, #4
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e021      	b.n	8007d32 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	212c      	movs	r1, #44	; 0x2c
 8007cf4:	fb01 f303 	mul.w	r3, r1, r3
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3360      	adds	r3, #96	; 0x60
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d16:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d1e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3e:	461a      	mov	r2, r3
 8007d40:	2302      	movs	r3, #2
 8007d42:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	b2d9      	uxtb	r1, r3
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	202c      	movs	r0, #44	; 0x2c
 8007d4e:	fb00 f303 	mul.w	r3, r0, r3
 8007d52:	4413      	add	r3, r2
 8007d54:	3360      	adds	r3, #96	; 0x60
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f008 fa86 	bl	801026c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007d60:	bf00      	nop
 8007d62:	3720      	adds	r7, #32
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08a      	sub	sp, #40	; 0x28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	0c5b      	lsrs	r3, r3, #17
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	091b      	lsrs	r3, r3, #4
 8007d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d9c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d004      	beq.n	8007dae <HCD_RXQLVL_IRQHandler+0x46>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	f000 80a9 	beq.w	8007efe <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007dac:	e0aa      	b.n	8007f04 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80a6 	beq.w	8007f02 <HCD_RXQLVL_IRQHandler+0x19a>
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	212c      	movs	r1, #44	; 0x2c
 8007dbc:	fb01 f303 	mul.w	r3, r1, r3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	3344      	adds	r3, #68	; 0x44
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 809b 	beq.w	8007f02 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	212c      	movs	r1, #44	; 0x2c
 8007dd2:	fb01 f303 	mul.w	r3, r1, r3
 8007dd6:	4413      	add	r3, r2
 8007dd8:	3350      	adds	r3, #80	; 0x50
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	441a      	add	r2, r3
 8007de0:	6879      	ldr	r1, [r7, #4]
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	202c      	movs	r0, #44	; 0x2c
 8007de6:	fb00 f303 	mul.w	r3, r0, r3
 8007dea:	440b      	add	r3, r1
 8007dec:	334c      	adds	r3, #76	; 0x4c
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d87a      	bhi.n	8007eea <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	212c      	movs	r1, #44	; 0x2c
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	4413      	add	r3, r2
 8007e04:	3344      	adds	r3, #68	; 0x44
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	b292      	uxth	r2, r2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	f005 fbe9 	bl	800d5e4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	212c      	movs	r1, #44	; 0x2c
 8007e18:	fb01 f303 	mul.w	r3, r1, r3
 8007e1c:	4413      	add	r3, r2
 8007e1e:	3344      	adds	r3, #68	; 0x44
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	441a      	add	r2, r3
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	202c      	movs	r0, #44	; 0x2c
 8007e2c:	fb00 f303 	mul.w	r3, r0, r3
 8007e30:	440b      	add	r3, r1
 8007e32:	3344      	adds	r3, #68	; 0x44
 8007e34:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	212c      	movs	r1, #44	; 0x2c
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	4413      	add	r3, r2
 8007e42:	3350      	adds	r3, #80	; 0x50
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	441a      	add	r2, r3
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	202c      	movs	r0, #44	; 0x2c
 8007e50:	fb00 f303 	mul.w	r3, r0, r3
 8007e54:	440b      	add	r3, r1
 8007e56:	3350      	adds	r3, #80	; 0x50
 8007e58:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	0cdb      	lsrs	r3, r3, #19
 8007e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e6e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	212c      	movs	r1, #44	; 0x2c
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3340      	adds	r3, #64	; 0x40
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	461a      	mov	r2, r3
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d13c      	bne.n	8007f02 <HCD_RXQLVL_IRQHandler+0x19a>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d039      	beq.n	8007f02 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ea4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eac:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	6a3b      	ldr	r3, [r7, #32]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eba:	461a      	mov	r2, r3
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	212c      	movs	r1, #44	; 0x2c
 8007ec6:	fb01 f303 	mul.w	r3, r1, r3
 8007eca:	4413      	add	r3, r2
 8007ecc:	3354      	adds	r3, #84	; 0x54
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	f083 0301 	eor.w	r3, r3, #1
 8007ed4:	b2d8      	uxtb	r0, r3
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	212c      	movs	r1, #44	; 0x2c
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3354      	adds	r3, #84	; 0x54
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	701a      	strb	r2, [r3, #0]
      break;
 8007ee8:	e00b      	b.n	8007f02 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	212c      	movs	r1, #44	; 0x2c
 8007ef0:	fb01 f303 	mul.w	r3, r1, r3
 8007ef4:	4413      	add	r3, r2
 8007ef6:	3360      	adds	r3, #96	; 0x60
 8007ef8:	2204      	movs	r2, #4
 8007efa:	701a      	strb	r2, [r3, #0]
      break;
 8007efc:	e001      	b.n	8007f02 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007f02:	bf00      	nop
  }
}
 8007f04:	bf00      	nop
 8007f06:	3728      	adds	r7, #40	; 0x28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f38:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d10b      	bne.n	8007f5c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d102      	bne.n	8007f54 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f008 f970 	bl	8010234 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f043 0302 	orr.w	r3, r3, #2
 8007f5a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d132      	bne.n	8007fcc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	f043 0308 	orr.w	r3, r3, #8
 8007f6c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d126      	bne.n	8007fc6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d113      	bne.n	8007fa8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007f86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f8a:	d106      	bne.n	8007f9a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2102      	movs	r1, #2
 8007f92:	4618      	mov	r0, r3
 8007f94:	f005 fc86 	bl	800d8a4 <USB_InitFSLSPClkSel>
 8007f98:	e011      	b.n	8007fbe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f005 fc7f 	bl	800d8a4 <USB_InitFSLSPClkSel>
 8007fa6:	e00a      	b.n	8007fbe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d106      	bne.n	8007fbe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007fbc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f008 f962 	bl	8010288 <HAL_HCD_PortEnabled_Callback>
 8007fc4:	e002      	b.n	8007fcc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f008 f96c 	bl	80102a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d103      	bne.n	8007fde <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	f043 0320 	orr.w	r3, r3, #32
 8007fdc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	6013      	str	r3, [r2, #0]
}
 8007fea:	bf00      	nop
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e1be      	b.n	8008384 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a9f      	ldr	r2, [pc, #636]	; (8008288 <HAL_I2C_Init+0x294>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d00e      	beq.n	800802e <HAL_I2C_Init+0x3a>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a9d      	ldr	r2, [pc, #628]	; (800828c <HAL_I2C_Init+0x298>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d009      	beq.n	800802e <HAL_I2C_Init+0x3a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a9c      	ldr	r2, [pc, #624]	; (8008290 <HAL_I2C_Init+0x29c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d004      	beq.n	800802e <HAL_I2C_Init+0x3a>
 8008024:	f240 11bf 	movw	r1, #447	; 0x1bf
 8008028:	489a      	ldr	r0, [pc, #616]	; (8008294 <HAL_I2C_Init+0x2a0>)
 800802a:	f7fb faec 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <HAL_I2C_Init+0x4c>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	4a97      	ldr	r2, [pc, #604]	; (8008298 <HAL_I2C_Init+0x2a4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d904      	bls.n	800804a <HAL_I2C_Init+0x56>
 8008040:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8008044:	4893      	ldr	r0, [pc, #588]	; (8008294 <HAL_I2C_Init+0x2a0>)
 8008046:	f7fb fade 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_I2C_Init+0x72>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800805a:	d004      	beq.n	8008066 <HAL_I2C_Init+0x72>
 800805c:	f240 11c1 	movw	r1, #449	; 0x1c1
 8008060:	488c      	ldr	r0, [pc, #560]	; (8008294 <HAL_I2C_Init+0x2a0>)
 8008062:	f7fb fad0 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800806e:	f023 0303 	bic.w	r3, r3, #3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d004      	beq.n	8008080 <HAL_I2C_Init+0x8c>
 8008076:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800807a:	4886      	ldr	r0, [pc, #536]	; (8008294 <HAL_I2C_Init+0x2a0>)
 800807c:	f7fb fac3 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008088:	d009      	beq.n	800809e <HAL_I2C_Init+0xaa>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008092:	d004      	beq.n	800809e <HAL_I2C_Init+0xaa>
 8008094:	f240 11c3 	movw	r1, #451	; 0x1c3
 8008098:	487e      	ldr	r0, [pc, #504]	; (8008294 <HAL_I2C_Init+0x2a0>)
 800809a:	f7fb fab4 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d008      	beq.n	80080b8 <HAL_I2C_Init+0xc4>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d004      	beq.n	80080b8 <HAL_I2C_Init+0xc4>
 80080ae:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80080b2:	4878      	ldr	r0, [pc, #480]	; (8008294 <HAL_I2C_Init+0x2a0>)
 80080b4:	f7fb faa7 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d004      	beq.n	80080ce <HAL_I2C_Init+0xda>
 80080c4:	f240 11c5 	movw	r1, #453	; 0x1c5
 80080c8:	4872      	ldr	r0, [pc, #456]	; (8008294 <HAL_I2C_Init+0x2a0>)
 80080ca:	f7fb fa9c 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d008      	beq.n	80080e8 <HAL_I2C_Init+0xf4>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	2b40      	cmp	r3, #64	; 0x40
 80080dc:	d004      	beq.n	80080e8 <HAL_I2C_Init+0xf4>
 80080de:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80080e2:	486c      	ldr	r0, [pc, #432]	; (8008294 <HAL_I2C_Init+0x2a0>)
 80080e4:	f7fb fa8f 	bl	8003606 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <HAL_I2C_Init+0x10e>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	2b80      	cmp	r3, #128	; 0x80
 80080f6:	d004      	beq.n	8008102 <HAL_I2C_Init+0x10e>
 80080f8:	f240 11c7 	movw	r1, #455	; 0x1c7
 80080fc:	4865      	ldr	r0, [pc, #404]	; (8008294 <HAL_I2C_Init+0x2a0>)
 80080fe:	f7fb fa82 	bl	8003606 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d106      	bne.n	800811c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fa f956 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2224      	movs	r2, #36	; 0x24
 8008120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 0201 	bic.w	r2, r2, #1
 8008132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008154:	f001 fdac 	bl	8009cb0 <HAL_RCC_GetPCLK1Freq>
 8008158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	4a4f      	ldr	r2, [pc, #316]	; (800829c <HAL_I2C_Init+0x2a8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d807      	bhi.n	8008174 <HAL_I2C_Init+0x180>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4a4e      	ldr	r2, [pc, #312]	; (80082a0 <HAL_I2C_Init+0x2ac>)
 8008168:	4293      	cmp	r3, r2
 800816a:	bf94      	ite	ls
 800816c:	2301      	movls	r3, #1
 800816e:	2300      	movhi	r3, #0
 8008170:	b2db      	uxtb	r3, r3
 8008172:	e006      	b.n	8008182 <HAL_I2C_Init+0x18e>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4a4b      	ldr	r2, [pc, #300]	; (80082a4 <HAL_I2C_Init+0x2b0>)
 8008178:	4293      	cmp	r3, r2
 800817a:	bf94      	ite	ls
 800817c:	2301      	movls	r3, #1
 800817e:	2300      	movhi	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e0fc      	b.n	8008384 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4a46      	ldr	r2, [pc, #280]	; (80082a8 <HAL_I2C_Init+0x2b4>)
 800818e:	fba2 2303 	umull	r2, r3, r2, r3
 8008192:	0c9b      	lsrs	r3, r3, #18
 8008194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	4a38      	ldr	r2, [pc, #224]	; (800829c <HAL_I2C_Init+0x2a8>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d802      	bhi.n	80081c4 <HAL_I2C_Init+0x1d0>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	3301      	adds	r3, #1
 80081c2:	e009      	b.n	80081d8 <HAL_I2C_Init+0x1e4>
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081ca:	fb02 f303 	mul.w	r3, r2, r3
 80081ce:	4a37      	ldr	r2, [pc, #220]	; (80082ac <HAL_I2C_Init+0x2b8>)
 80081d0:	fba2 2303 	umull	r2, r3, r2, r3
 80081d4:	099b      	lsrs	r3, r3, #6
 80081d6:	3301      	adds	r3, #1
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6812      	ldr	r2, [r2, #0]
 80081dc:	430b      	orrs	r3, r1
 80081de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	492a      	ldr	r1, [pc, #168]	; (800829c <HAL_I2C_Init+0x2a8>)
 80081f4:	428b      	cmp	r3, r1
 80081f6:	d819      	bhi.n	800822c <HAL_I2C_Init+0x238>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	1e59      	subs	r1, r3, #1
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	fbb1 f3f3 	udiv	r3, r1, r3
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	f640 73fc 	movw	r3, #4092	; 0xffc
 800820c:	400b      	ands	r3, r1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00a      	beq.n	8008228 <HAL_I2C_Init+0x234>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	1e59      	subs	r1, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008220:	3301      	adds	r3, #1
 8008222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008226:	e066      	b.n	80082f6 <HAL_I2C_Init+0x302>
 8008228:	2304      	movs	r3, #4
 800822a:	e064      	b.n	80082f6 <HAL_I2C_Init+0x302>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d111      	bne.n	8008258 <HAL_I2C_Init+0x264>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1e58      	subs	r0, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	440b      	add	r3, r1
 8008242:	fbb0 f3f3 	udiv	r3, r0, r3
 8008246:	3301      	adds	r3, #1
 8008248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800824c:	2b00      	cmp	r3, #0
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	e012      	b.n	800827e <HAL_I2C_Init+0x28a>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	1e58      	subs	r0, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6859      	ldr	r1, [r3, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	0099      	lsls	r1, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	fbb0 f3f3 	udiv	r3, r0, r3
 800826e:	3301      	adds	r3, #1
 8008270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf0c      	ite	eq
 8008278:	2301      	moveq	r3, #1
 800827a:	2300      	movne	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d016      	beq.n	80082b0 <HAL_I2C_Init+0x2bc>
 8008282:	2301      	movs	r3, #1
 8008284:	e037      	b.n	80082f6 <HAL_I2C_Init+0x302>
 8008286:	bf00      	nop
 8008288:	40005400 	.word	0x40005400
 800828c:	40005800 	.word	0x40005800
 8008290:	40005c00 	.word	0x40005c00
 8008294:	08013210 	.word	0x08013210
 8008298:	00061a80 	.word	0x00061a80
 800829c:	000186a0 	.word	0x000186a0
 80082a0:	001e847f 	.word	0x001e847f
 80082a4:	003d08ff 	.word	0x003d08ff
 80082a8:	431bde83 	.word	0x431bde83
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10e      	bne.n	80082d6 <HAL_I2C_Init+0x2e2>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	1e58      	subs	r0, r3, #1
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6859      	ldr	r1, [r3, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	440b      	add	r3, r1
 80082c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ca:	3301      	adds	r3, #1
 80082cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082d4:	e00f      	b.n	80082f6 <HAL_I2C_Init+0x302>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	1e58      	subs	r0, r3, #1
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6859      	ldr	r1, [r3, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	0099      	lsls	r1, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ec:	3301      	adds	r3, #1
 80082ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	6809      	ldr	r1, [r1, #0]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008324:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	6911      	ldr	r1, [r2, #16]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68d2      	ldr	r2, [r2, #12]
 8008330:	4311      	orrs	r1, r2
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	6812      	ldr	r2, [r2, #0]
 8008336:	430b      	orrs	r3, r1
 8008338:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695a      	ldr	r2, [r3, #20]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0201 	orr.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e035      	b.n	800840a <HAL_I2C_DeInit+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a1c      	ldr	r2, [pc, #112]	; (8008414 <HAL_I2C_DeInit+0x88>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00e      	beq.n	80083c6 <HAL_I2C_DeInit+0x3a>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a1a      	ldr	r2, [pc, #104]	; (8008418 <HAL_I2C_DeInit+0x8c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d009      	beq.n	80083c6 <HAL_I2C_DeInit+0x3a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a19      	ldr	r2, [pc, #100]	; (800841c <HAL_I2C_DeInit+0x90>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d004      	beq.n	80083c6 <HAL_I2C_DeInit+0x3a>
 80083bc:	f240 212f 	movw	r1, #559	; 0x22f
 80083c0:	4817      	ldr	r0, [pc, #92]	; (8008420 <HAL_I2C_DeInit+0x94>)
 80083c2:	f7fb f920 	bl	8003606 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2224      	movs	r2, #36	; 0x24
 80083ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7fa f880 	bl	80024e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	40005400 	.word	0x40005400
 8008418:	40005800 	.word	0x40005800
 800841c:	40005c00 	.word	0x40005c00
 8008420:	08013210 	.word	0x08013210

08008424 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af02      	add	r7, sp, #8
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	4608      	mov	r0, r1
 800842e:	4611      	mov	r1, r2
 8008430:	461a      	mov	r2, r3
 8008432:	4603      	mov	r3, r0
 8008434:	817b      	strh	r3, [r7, #10]
 8008436:	460b      	mov	r3, r1
 8008438:	813b      	strh	r3, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800843e:	f7fc fa19 	bl	8004874 <HAL_GetTick>
 8008442:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d007      	beq.n	800845a <HAL_I2C_Mem_Write+0x36>
 800844a:	88fb      	ldrh	r3, [r7, #6]
 800844c:	2b10      	cmp	r3, #16
 800844e:	d004      	beq.n	800845a <HAL_I2C_Mem_Write+0x36>
 8008450:	f640 11ba 	movw	r1, #2490	; 0x9ba
 8008454:	4873      	ldr	r0, [pc, #460]	; (8008624 <HAL_I2C_Mem_Write+0x200>)
 8008456:	f7fb f8d6 	bl	8003606 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b20      	cmp	r3, #32
 8008464:	f040 80d9 	bne.w	800861a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	2319      	movs	r3, #25
 800846e:	2201      	movs	r2, #1
 8008470:	496d      	ldr	r1, [pc, #436]	; (8008628 <HAL_I2C_Mem_Write+0x204>)
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fc9a 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800847e:	2302      	movs	r3, #2
 8008480:	e0cc      	b.n	800861c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <HAL_I2C_Mem_Write+0x6c>
 800848c:	2302      	movs	r3, #2
 800848e:	e0c5      	b.n	800861c <HAL_I2C_Mem_Write+0x1f8>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d007      	beq.n	80084b6 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0201 	orr.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2221      	movs	r2, #33	; 0x21
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2240      	movs	r2, #64	; 0x40
 80084d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a3a      	ldr	r2, [r7, #32]
 80084e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4a4d      	ldr	r2, [pc, #308]	; (800862c <HAL_I2C_Mem_Write+0x208>)
 80084f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084f8:	88f8      	ldrh	r0, [r7, #6]
 80084fa:	893a      	ldrh	r2, [r7, #8]
 80084fc:	8979      	ldrh	r1, [r7, #10]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	4603      	mov	r3, r0
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fad1 	bl	8008ab0 <I2C_RequestMemoryWrite>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d052      	beq.n	80085ba <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e081      	b.n	800861c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 fd1b 	bl	8008f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00d      	beq.n	8008544 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	2b04      	cmp	r3, #4
 800852e:	d107      	bne.n	8008540 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800853e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e06b      	b.n	800861c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	781a      	ldrb	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855e:	3b01      	subs	r3, #1
 8008560:	b29a      	uxth	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b04      	cmp	r3, #4
 8008580:	d11b      	bne.n	80085ba <HAL_I2C_Mem_Write+0x196>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008586:	2b00      	cmp	r3, #0
 8008588:	d017      	beq.n	80085ba <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	781a      	ldrb	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1aa      	bne.n	8008518 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 fd07 	bl	8008fda <I2C_WaitOnBTFFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d107      	bne.n	80085ea <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e016      	b.n	800861c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2220      	movs	r2, #32
 8008602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	e000      	b.n	800861c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800861a:	2302      	movs	r3, #2
  }
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	08013210 	.word	0x08013210
 8008628:	00100002 	.word	0x00100002
 800862c:	ffff0000 	.word	0xffff0000

08008630 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08c      	sub	sp, #48	; 0x30
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	461a      	mov	r2, r3
 800863e:	4603      	mov	r3, r0
 8008640:	817b      	strh	r3, [r7, #10]
 8008642:	460b      	mov	r3, r1
 8008644:	813b      	strh	r3, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800864a:	f7fc f913 	bl	8004874 <HAL_GetTick>
 800864e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d007      	beq.n	8008666 <HAL_I2C_Mem_Read+0x36>
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	2b10      	cmp	r3, #16
 800865a:	d004      	beq.n	8008666 <HAL_I2C_Mem_Read+0x36>
 800865c:	f640 2135 	movw	r1, #2613	; 0xa35
 8008660:	4881      	ldr	r0, [pc, #516]	; (8008868 <HAL_I2C_Mem_Read+0x238>)
 8008662:	f7fa ffd0 	bl	8003606 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b20      	cmp	r3, #32
 8008670:	f040 8209 	bne.w	8008a86 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2319      	movs	r3, #25
 800867a:	2201      	movs	r2, #1
 800867c:	497b      	ldr	r1, [pc, #492]	; (800886c <HAL_I2C_Mem_Read+0x23c>)
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 fb94 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800868a:	2302      	movs	r3, #2
 800868c:	e1fc      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008694:	2b01      	cmp	r3, #1
 8008696:	d101      	bne.n	800869c <HAL_I2C_Mem_Read+0x6c>
 8008698:	2302      	movs	r3, #2
 800869a:	e1f5      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d007      	beq.n	80086c2 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f042 0201 	orr.w	r2, r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086d0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2222      	movs	r2, #34	; 0x22
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2240      	movs	r2, #64	; 0x40
 80086de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80086f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4a5b      	ldr	r2, [pc, #364]	; (8008870 <HAL_I2C_Mem_Read+0x240>)
 8008702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008704:	88f8      	ldrh	r0, [r7, #6]
 8008706:	893a      	ldrh	r2, [r7, #8]
 8008708:	8979      	ldrh	r1, [r7, #10]
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	4603      	mov	r3, r0
 8008714:	68f8      	ldr	r0, [r7, #12]
 8008716:	f000 fa61 	bl	8008bdc <I2C_RequestMemoryRead>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e1b1      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008728:	2b00      	cmp	r3, #0
 800872a:	d113      	bne.n	8008754 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800872c:	2300      	movs	r3, #0
 800872e:	623b      	str	r3, [r7, #32]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	623b      	str	r3, [r7, #32]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	623b      	str	r3, [r7, #32]
 8008740:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	e185      	b.n	8008a60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008758:	2b01      	cmp	r3, #1
 800875a:	d11b      	bne.n	8008794 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800876a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800876c:	2300      	movs	r3, #0
 800876e:	61fb      	str	r3, [r7, #28]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e165      	b.n	8008a60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008798:	2b02      	cmp	r3, #2
 800879a:	d11b      	bne.n	80087d4 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087aa:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087ba:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087bc:	2300      	movs	r3, #0
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	61bb      	str	r3, [r7, #24]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	e145      	b.n	8008a60 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80087ea:	e139      	b.n	8008a60 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	f200 80f2 	bhi.w	80089da <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d123      	bne.n	8008846 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008800:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 fc2a 	bl	800905c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e13a      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	b2d2      	uxtb	r2, r2
 800881e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	1c5a      	adds	r2, r3, #1
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800882e:	3b01      	subs	r3, #1
 8008830:	b29a      	uxth	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883a:	b29b      	uxth	r3, r3
 800883c:	3b01      	subs	r3, #1
 800883e:	b29a      	uxth	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008844:	e10c      	b.n	8008a60 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800884a:	2b02      	cmp	r3, #2
 800884c:	d14f      	bne.n	80088ee <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	2200      	movs	r2, #0
 8008856:	4907      	ldr	r1, [pc, #28]	; (8008874 <HAL_I2C_Mem_Read+0x244>)
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 faa7 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d009      	beq.n	8008878 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e10f      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
 8008868:	08013210 	.word	0x08013210
 800886c:	00100002 	.word	0x00100002
 8008870:	ffff0000 	.word	0xffff0000
 8008874:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008886:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691a      	ldr	r2, [r3, #16]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	b2d2      	uxtb	r2, r2
 8008894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	1c5a      	adds	r2, r3, #1
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	691a      	ldr	r2, [r3, #16]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	b2d2      	uxtb	r2, r2
 80088c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088d6:	3b01      	subs	r3, #1
 80088d8:	b29a      	uxth	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088ec:	e0b8      	b.n	8008a60 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	2200      	movs	r2, #0
 80088f6:	4966      	ldr	r1, [pc, #408]	; (8008a90 <HAL_I2C_Mem_Read+0x460>)
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fa57 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e0bf      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008916:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	691a      	ldr	r2, [r3, #16]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892a:	1c5a      	adds	r2, r3, #1
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008950:	2200      	movs	r2, #0
 8008952:	494f      	ldr	r1, [pc, #316]	; (8008a90 <HAL_I2C_Mem_Read+0x460>)
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fa29 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e091      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	691a      	ldr	r2, [r3, #16]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800899c:	b29b      	uxth	r3, r3
 800899e:	3b01      	subs	r3, #1
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	b2d2      	uxtb	r2, r2
 80089b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	1c5a      	adds	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	3b01      	subs	r3, #1
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089d8:	e042      	b.n	8008a60 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f000 fb3c 	bl	800905c <I2C_WaitOnRXNEFlagUntilTimeout>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e04c      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	691a      	ldr	r2, [r3, #16]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	b2d2      	uxtb	r2, r2
 80089fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d118      	bne.n	8008a60 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	b2d2      	uxtb	r2, r2
 8008a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f47f aec1 	bne.w	80087ec <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e000      	b.n	8008a88 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008a86:	2302      	movs	r3, #2
  }
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3728      	adds	r7, #40	; 0x28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	00010004 	.word	0x00010004

08008a94 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aa2:	b2db      	uxtb	r3, r3
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	4603      	mov	r3, r0
 8008ac0:	817b      	strh	r3, [r7, #10]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	813b      	strh	r3, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 f960 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00d      	beq.n	8008b0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b00:	d103      	bne.n	8008b0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e05f      	b.n	8008bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b0e:	897b      	ldrh	r3, [r7, #10]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	461a      	mov	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	6a3a      	ldr	r2, [r7, #32]
 8008b22:	492d      	ldr	r1, [pc, #180]	; (8008bd8 <I2C_RequestMemoryWrite+0x128>)
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f998 	bl	8008e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d001      	beq.n	8008b34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e04c      	b.n	8008bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4c:	6a39      	ldr	r1, [r7, #32]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fa02 	bl	8008f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00d      	beq.n	8008b76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	d107      	bne.n	8008b72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e02b      	b.n	8008bce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d105      	bne.n	8008b88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b7c:	893b      	ldrh	r3, [r7, #8]
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	611a      	str	r2, [r3, #16]
 8008b86:	e021      	b.n	8008bcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b88:	893b      	ldrh	r3, [r7, #8]
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b98:	6a39      	ldr	r1, [r7, #32]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 f9dc 	bl	8008f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00d      	beq.n	8008bc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	2b04      	cmp	r3, #4
 8008bac:	d107      	bne.n	8008bbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e005      	b.n	8008bce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bc2:	893b      	ldrh	r3, [r7, #8]
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	00010002 	.word	0x00010002

08008bdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af02      	add	r7, sp, #8
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	461a      	mov	r2, r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	817b      	strh	r3, [r7, #10]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	813b      	strh	r3, [r7, #8]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f000 f8c2 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00d      	beq.n	8008c4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3c:	d103      	bne.n	8008c46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e0aa      	b.n	8008da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008c4a:	897b      	ldrh	r3, [r7, #10]
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	461a      	mov	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	6a3a      	ldr	r2, [r7, #32]
 8008c5e:	4952      	ldr	r1, [pc, #328]	; (8008da8 <I2C_RequestMemoryRead+0x1cc>)
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 f8fa 	bl	8008e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e097      	b.n	8008da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	617b      	str	r3, [r7, #20]
 8008c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c88:	6a39      	ldr	r1, [r7, #32]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 f964 	bl	8008f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00d      	beq.n	8008cb2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d107      	bne.n	8008cae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e076      	b.n	8008da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d105      	bne.n	8008cc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cb8:	893b      	ldrh	r3, [r7, #8]
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	611a      	str	r2, [r3, #16]
 8008cc2:	e021      	b.n	8008d08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008cc4:	893b      	ldrh	r3, [r7, #8]
 8008cc6:	0a1b      	lsrs	r3, r3, #8
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd4:	6a39      	ldr	r1, [r7, #32]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f93e 	bl	8008f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00d      	beq.n	8008cfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d107      	bne.n	8008cfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e050      	b.n	8008da0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008cfe:	893b      	ldrh	r3, [r7, #8]
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0a:	6a39      	ldr	r1, [r7, #32]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f923 	bl	8008f58 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00d      	beq.n	8008d34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d107      	bne.n	8008d30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e035      	b.n	8008da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f82b 	bl	8008dac <I2C_WaitOnFlagUntilTimeout>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00d      	beq.n	8008d78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6a:	d103      	bne.n	8008d74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e013      	b.n	8008da0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008d78:	897b      	ldrh	r3, [r7, #10]
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f043 0301 	orr.w	r3, r3, #1
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	6a3a      	ldr	r2, [r7, #32]
 8008d8c:	4906      	ldr	r1, [pc, #24]	; (8008da8 <I2C_RequestMemoryRead+0x1cc>)
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 f863 	bl	8008e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	00010002 	.word	0x00010002

08008dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	603b      	str	r3, [r7, #0]
 8008db8:	4613      	mov	r3, r2
 8008dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008dbc:	e025      	b.n	8008e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dc4:	d021      	beq.n	8008e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc6:	f7fb fd55 	bl	8004874 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	683a      	ldr	r2, [r7, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d116      	bne.n	8008e0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	f043 0220 	orr.w	r2, r3, #32
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e023      	b.n	8008e52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	0c1b      	lsrs	r3, r3, #16
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d10d      	bne.n	8008e30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	43da      	mvns	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	bf0c      	ite	eq
 8008e26:	2301      	moveq	r3, #1
 8008e28:	2300      	movne	r3, #0
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	e00c      	b.n	8008e4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	43da      	mvns	r2, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	bf0c      	ite	eq
 8008e42:	2301      	moveq	r3, #1
 8008e44:	2300      	movne	r3, #0
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	461a      	mov	r2, r3
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d0b6      	beq.n	8008dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b084      	sub	sp, #16
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	60f8      	str	r0, [r7, #12]
 8008e62:	60b9      	str	r1, [r7, #8]
 8008e64:	607a      	str	r2, [r7, #4]
 8008e66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e68:	e051      	b.n	8008f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e78:	d123      	bne.n	8008ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	f043 0204 	orr.w	r2, r3, #4
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e046      	b.n	8008f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec8:	d021      	beq.n	8008f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eca:	f7fb fcd3 	bl	8004874 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d302      	bcc.n	8008ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d116      	bne.n	8008f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	f043 0220 	orr.w	r2, r3, #32
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e020      	b.n	8008f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	0c1b      	lsrs	r3, r3, #16
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d10c      	bne.n	8008f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	43da      	mvns	r2, r3
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	4013      	ands	r3, r2
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf14      	ite	ne
 8008f2a:	2301      	movne	r3, #1
 8008f2c:	2300      	moveq	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	e00b      	b.n	8008f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	43da      	mvns	r2, r3
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	bf14      	ite	ne
 8008f44:	2301      	movne	r3, #1
 8008f46:	2300      	moveq	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d18d      	bne.n	8008e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f64:	e02d      	b.n	8008fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f000 f8ce 	bl	8009108 <I2C_IsAcknowledgeFailed>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e02d      	b.n	8008fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f7c:	d021      	beq.n	8008fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f7e:	f7fb fc79 	bl	8004874 <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d302      	bcc.n	8008f94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d116      	bne.n	8008fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	f043 0220 	orr.w	r2, r3, #32
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e007      	b.n	8008fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fcc:	2b80      	cmp	r3, #128	; 0x80
 8008fce:	d1ca      	bne.n	8008f66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fe6:	e02d      	b.n	8009044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f88d 	bl	8009108 <I2C_IsAcknowledgeFailed>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e02d      	b.n	8009054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ffe:	d021      	beq.n	8009044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009000:	f7fb fc38 	bl	8004874 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	429a      	cmp	r2, r3
 800900e:	d302      	bcc.n	8009016 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d116      	bne.n	8009044 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009030:	f043 0220 	orr.w	r2, r3, #32
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e007      	b.n	8009054 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b04      	cmp	r3, #4
 8009050:	d1ca      	bne.n	8008fe8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009068:	e042      	b.n	80090f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	f003 0310 	and.w	r3, r3, #16
 8009074:	2b10      	cmp	r3, #16
 8009076:	d119      	bne.n	80090ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f06f 0210 	mvn.w	r2, #16
 8009080:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e029      	b.n	8009100 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ac:	f7fb fbe2 	bl	8004874 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d302      	bcc.n	80090c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d116      	bne.n	80090f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	f043 0220 	orr.w	r2, r3, #32
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e007      	b.n	8009100 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fa:	2b40      	cmp	r3, #64	; 0x40
 80090fc:	d1b5      	bne.n	800906a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800911a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800911e:	d11b      	bne.n	8009158 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009128:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2220      	movs	r2, #32
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009144:	f043 0204 	orr.w	r2, r3, #4
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e000      	b.n	800915a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
	...

08009168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e316      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b0f      	cmp	r3, #15
 8009180:	d903      	bls.n	800918a <HAL_RCC_OscConfig+0x22>
 8009182:	21e8      	movs	r1, #232	; 0xe8
 8009184:	48a3      	ldr	r0, [pc, #652]	; (8009414 <HAL_RCC_OscConfig+0x2ac>)
 8009186:	f7fa fa3e 	bl	8003606 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8088 	beq.w	80092a8 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00d      	beq.n	80091bc <HAL_RCC_OscConfig+0x54>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a8:	d008      	beq.n	80091bc <HAL_RCC_OscConfig+0x54>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091b2:	d003      	beq.n	80091bc <HAL_RCC_OscConfig+0x54>
 80091b4:	21ed      	movs	r1, #237	; 0xed
 80091b6:	4897      	ldr	r0, [pc, #604]	; (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80091b8:	f7fa fa25 	bl	8003606 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091bc:	4b96      	ldr	r3, [pc, #600]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	f003 030c 	and.w	r3, r3, #12
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d00c      	beq.n	80091e2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091c8:	4b93      	ldr	r3, [pc, #588]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d112      	bne.n	80091fa <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091d4:	4b90      	ldr	r3, [pc, #576]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091e0:	d10b      	bne.n	80091fa <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091e2:	4b8d      	ldr	r3, [pc, #564]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d05b      	beq.n	80092a6 <HAL_RCC_OscConfig+0x13e>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d157      	bne.n	80092a6 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e2d6      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009202:	d106      	bne.n	8009212 <HAL_RCC_OscConfig+0xaa>
 8009204:	4b84      	ldr	r3, [pc, #528]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a83      	ldr	r2, [pc, #524]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800920a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	e01d      	b.n	800924e <HAL_RCC_OscConfig+0xe6>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800921a:	d10c      	bne.n	8009236 <HAL_RCC_OscConfig+0xce>
 800921c:	4b7e      	ldr	r3, [pc, #504]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a7d      	ldr	r2, [pc, #500]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	4b7b      	ldr	r3, [pc, #492]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a7a      	ldr	r2, [pc, #488]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800922e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	e00b      	b.n	800924e <HAL_RCC_OscConfig+0xe6>
 8009236:	4b78      	ldr	r3, [pc, #480]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a77      	ldr	r2, [pc, #476]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800923c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	4b75      	ldr	r3, [pc, #468]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a74      	ldr	r2, [pc, #464]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800924c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d013      	beq.n	800927e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009256:	f7fb fb0d 	bl	8004874 <HAL_GetTick>
 800925a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800925c:	e008      	b.n	8009270 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800925e:	f7fb fb09 	bl	8004874 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b64      	cmp	r3, #100	; 0x64
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e29b      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009270:	4b69      	ldr	r3, [pc, #420]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0f0      	beq.n	800925e <HAL_RCC_OscConfig+0xf6>
 800927c:	e014      	b.n	80092a8 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800927e:	f7fb faf9 	bl	8004874 <HAL_GetTick>
 8009282:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009284:	e008      	b.n	8009298 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009286:	f7fb faf5 	bl	8004874 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b64      	cmp	r3, #100	; 0x64
 8009292:	d901      	bls.n	8009298 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e287      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009298:	4b5f      	ldr	r3, [pc, #380]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1f0      	bne.n	8009286 <HAL_RCC_OscConfig+0x11e>
 80092a4:	e000      	b.n	80092a8 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d079      	beq.n	80093a8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d008      	beq.n	80092ce <HAL_RCC_OscConfig+0x166>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d004      	beq.n	80092ce <HAL_RCC_OscConfig+0x166>
 80092c4:	f240 111f 	movw	r1, #287	; 0x11f
 80092c8:	4852      	ldr	r0, [pc, #328]	; (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80092ca:	f7fa f99c 	bl	8003606 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b1f      	cmp	r3, #31
 80092d4:	d904      	bls.n	80092e0 <HAL_RCC_OscConfig+0x178>
 80092d6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80092da:	484e      	ldr	r0, [pc, #312]	; (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80092dc:	f7fa f993 	bl	8003606 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092e0:	4b4d      	ldr	r3, [pc, #308]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 030c 	and.w	r3, r3, #12
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00b      	beq.n	8009304 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092ec:	4b4a      	ldr	r3, [pc, #296]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	d11c      	bne.n	8009332 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092f8:	4b47      	ldr	r3, [pc, #284]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d116      	bne.n	8009332 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009304:	4b44      	ldr	r3, [pc, #272]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_RCC_OscConfig+0x1b4>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d001      	beq.n	800931c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e245      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800931c:	4b3e      	ldr	r3, [pc, #248]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	493b      	ldr	r1, [pc, #236]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800932c:	4313      	orrs	r3, r2
 800932e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009330:	e03a      	b.n	80093a8 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d020      	beq.n	800937c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800933a:	4b38      	ldr	r3, [pc, #224]	; (800941c <HAL_RCC_OscConfig+0x2b4>)
 800933c:	2201      	movs	r2, #1
 800933e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009340:	f7fb fa98 	bl	8004874 <HAL_GetTick>
 8009344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009346:	e008      	b.n	800935a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009348:	f7fb fa94 	bl	8004874 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e226      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800935a:	4b2f      	ldr	r3, [pc, #188]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0f0      	beq.n	8009348 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009366:	4b2c      	ldr	r3, [pc, #176]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	4928      	ldr	r1, [pc, #160]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 8009376:	4313      	orrs	r3, r2
 8009378:	600b      	str	r3, [r1, #0]
 800937a:	e015      	b.n	80093a8 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800937c:	4b27      	ldr	r3, [pc, #156]	; (800941c <HAL_RCC_OscConfig+0x2b4>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009382:	f7fb fa77 	bl	8004874 <HAL_GetTick>
 8009386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009388:	e008      	b.n	800939c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800938a:	f7fb fa73 	bl	8004874 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	2b02      	cmp	r3, #2
 8009396:	d901      	bls.n	800939c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e205      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800939c:	4b1e      	ldr	r3, [pc, #120]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1f0      	bne.n	800938a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0308 	and.w	r3, r3, #8
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d046      	beq.n	8009442 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d008      	beq.n	80093ce <HAL_RCC_OscConfig+0x266>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	695b      	ldr	r3, [r3, #20]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d004      	beq.n	80093ce <HAL_RCC_OscConfig+0x266>
 80093c4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80093c8:	4812      	ldr	r0, [pc, #72]	; (8009414 <HAL_RCC_OscConfig+0x2ac>)
 80093ca:	f7fa f91c 	bl	8003606 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d016      	beq.n	8009404 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093d6:	4b12      	ldr	r3, [pc, #72]	; (8009420 <HAL_RCC_OscConfig+0x2b8>)
 80093d8:	2201      	movs	r2, #1
 80093da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093dc:	f7fb fa4a 	bl	8004874 <HAL_GetTick>
 80093e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093e2:	e008      	b.n	80093f6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093e4:	f7fb fa46 	bl	8004874 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d901      	bls.n	80093f6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e1d8      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093f6:	4b08      	ldr	r3, [pc, #32]	; (8009418 <HAL_RCC_OscConfig+0x2b0>)
 80093f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0f0      	beq.n	80093e4 <HAL_RCC_OscConfig+0x27c>
 8009402:	e01e      	b.n	8009442 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009404:	4b06      	ldr	r3, [pc, #24]	; (8009420 <HAL_RCC_OscConfig+0x2b8>)
 8009406:	2200      	movs	r2, #0
 8009408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800940a:	f7fb fa33 	bl	8004874 <HAL_GetTick>
 800940e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009410:	e011      	b.n	8009436 <HAL_RCC_OscConfig+0x2ce>
 8009412:	bf00      	nop
 8009414:	08013248 	.word	0x08013248
 8009418:	40023800 	.word	0x40023800
 800941c:	42470000 	.word	0x42470000
 8009420:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009424:	f7fb fa26 	bl	8004874 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	2b02      	cmp	r3, #2
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e1b8      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009436:	4b97      	ldr	r3, [pc, #604]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1f0      	bne.n	8009424 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0304 	and.w	r3, r3, #4
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80a8 	beq.w	80095a0 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009450:	2300      	movs	r3, #0
 8009452:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00c      	beq.n	8009476 <HAL_RCC_OscConfig+0x30e>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d008      	beq.n	8009476 <HAL_RCC_OscConfig+0x30e>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2b05      	cmp	r3, #5
 800946a:	d004      	beq.n	8009476 <HAL_RCC_OscConfig+0x30e>
 800946c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8009470:	4889      	ldr	r0, [pc, #548]	; (8009698 <HAL_RCC_OscConfig+0x530>)
 8009472:	f7fa f8c8 	bl	8003606 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009476:	4b87      	ldr	r3, [pc, #540]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10f      	bne.n	80094a2 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009482:	2300      	movs	r3, #0
 8009484:	60bb      	str	r3, [r7, #8]
 8009486:	4b83      	ldr	r3, [pc, #524]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	4a82      	ldr	r2, [pc, #520]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 800948c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009490:	6413      	str	r3, [r2, #64]	; 0x40
 8009492:	4b80      	ldr	r3, [pc, #512]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800949a:	60bb      	str	r3, [r7, #8]
 800949c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800949e:	2301      	movs	r3, #1
 80094a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094a2:	4b7e      	ldr	r3, [pc, #504]	; (800969c <HAL_RCC_OscConfig+0x534>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d118      	bne.n	80094e0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80094ae:	4b7b      	ldr	r3, [pc, #492]	; (800969c <HAL_RCC_OscConfig+0x534>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a7a      	ldr	r2, [pc, #488]	; (800969c <HAL_RCC_OscConfig+0x534>)
 80094b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094ba:	f7fb f9db 	bl	8004874 <HAL_GetTick>
 80094be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094c0:	e008      	b.n	80094d4 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094c2:	f7fb f9d7 	bl	8004874 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d901      	bls.n	80094d4 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e169      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094d4:	4b71      	ldr	r3, [pc, #452]	; (800969c <HAL_RCC_OscConfig+0x534>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d0f0      	beq.n	80094c2 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d106      	bne.n	80094f6 <HAL_RCC_OscConfig+0x38e>
 80094e8:	4b6a      	ldr	r3, [pc, #424]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 80094ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ec:	4a69      	ldr	r2, [pc, #420]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	6713      	str	r3, [r2, #112]	; 0x70
 80094f4:	e01c      	b.n	8009530 <HAL_RCC_OscConfig+0x3c8>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	d10c      	bne.n	8009518 <HAL_RCC_OscConfig+0x3b0>
 80094fe:	4b65      	ldr	r3, [pc, #404]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009502:	4a64      	ldr	r2, [pc, #400]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009504:	f043 0304 	orr.w	r3, r3, #4
 8009508:	6713      	str	r3, [r2, #112]	; 0x70
 800950a:	4b62      	ldr	r3, [pc, #392]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 800950c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950e:	4a61      	ldr	r2, [pc, #388]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009510:	f043 0301 	orr.w	r3, r3, #1
 8009514:	6713      	str	r3, [r2, #112]	; 0x70
 8009516:	e00b      	b.n	8009530 <HAL_RCC_OscConfig+0x3c8>
 8009518:	4b5e      	ldr	r3, [pc, #376]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 800951a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951c:	4a5d      	ldr	r2, [pc, #372]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	6713      	str	r3, [r2, #112]	; 0x70
 8009524:	4b5b      	ldr	r3, [pc, #364]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009528:	4a5a      	ldr	r2, [pc, #360]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 800952a:	f023 0304 	bic.w	r3, r3, #4
 800952e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d015      	beq.n	8009564 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009538:	f7fb f99c 	bl	8004874 <HAL_GetTick>
 800953c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800953e:	e00a      	b.n	8009556 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009540:	f7fb f998 	bl	8004874 <HAL_GetTick>
 8009544:	4602      	mov	r2, r0
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	f241 3288 	movw	r2, #5000	; 0x1388
 800954e:	4293      	cmp	r3, r2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e128      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009556:	4b4f      	ldr	r3, [pc, #316]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0ee      	beq.n	8009540 <HAL_RCC_OscConfig+0x3d8>
 8009562:	e014      	b.n	800958e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009564:	f7fb f986 	bl	8004874 <HAL_GetTick>
 8009568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800956a:	e00a      	b.n	8009582 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800956c:	f7fb f982 	bl	8004874 <HAL_GetTick>
 8009570:	4602      	mov	r2, r0
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	f241 3288 	movw	r2, #5000	; 0x1388
 800957a:	4293      	cmp	r3, r2
 800957c:	d901      	bls.n	8009582 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e112      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009582:	4b44      	ldr	r3, [pc, #272]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1ee      	bne.n	800956c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d105      	bne.n	80095a0 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009594:	4b3f      	ldr	r3, [pc, #252]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	4a3e      	ldr	r2, [pc, #248]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 800959a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800959e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <HAL_RCC_OscConfig+0x45a>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d008      	beq.n	80095c2 <HAL_RCC_OscConfig+0x45a>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d004      	beq.n	80095c2 <HAL_RCC_OscConfig+0x45a>
 80095b8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80095bc:	4836      	ldr	r0, [pc, #216]	; (8009698 <HAL_RCC_OscConfig+0x530>)
 80095be:	f7fa f822 	bl	8003606 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f000 80ed 	beq.w	80097a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095cc:	4b31      	ldr	r3, [pc, #196]	; (8009694 <HAL_RCC_OscConfig+0x52c>)
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 030c 	and.w	r3, r3, #12
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	f000 80ae 	beq.w	8009736 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	f040 8092 	bne.w	8009708 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	69db      	ldr	r3, [r3, #28]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d009      	beq.n	8009600 <HAL_RCC_OscConfig+0x498>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095f4:	d004      	beq.n	8009600 <HAL_RCC_OscConfig+0x498>
 80095f6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80095fa:	4827      	ldr	r0, [pc, #156]	; (8009698 <HAL_RCC_OscConfig+0x530>)
 80095fc:	f7fa f803 	bl	8003606 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	2b3f      	cmp	r3, #63	; 0x3f
 8009606:	d904      	bls.n	8009612 <HAL_RCC_OscConfig+0x4aa>
 8009608:	f240 11d9 	movw	r1, #473	; 0x1d9
 800960c:	4822      	ldr	r0, [pc, #136]	; (8009698 <HAL_RCC_OscConfig+0x530>)
 800960e:	f7f9 fffa 	bl	8003606 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009616:	2b31      	cmp	r3, #49	; 0x31
 8009618:	d904      	bls.n	8009624 <HAL_RCC_OscConfig+0x4bc>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8009622:	d904      	bls.n	800962e <HAL_RCC_OscConfig+0x4c6>
 8009624:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009628:	481b      	ldr	r0, [pc, #108]	; (8009698 <HAL_RCC_OscConfig+0x530>)
 800962a:	f7f9 ffec 	bl	8003606 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009632:	2b02      	cmp	r3, #2
 8009634:	d010      	beq.n	8009658 <HAL_RCC_OscConfig+0x4f0>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963a:	2b04      	cmp	r3, #4
 800963c:	d00c      	beq.n	8009658 <HAL_RCC_OscConfig+0x4f0>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	2b06      	cmp	r3, #6
 8009644:	d008      	beq.n	8009658 <HAL_RCC_OscConfig+0x4f0>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964a:	2b08      	cmp	r3, #8
 800964c:	d004      	beq.n	8009658 <HAL_RCC_OscConfig+0x4f0>
 800964e:	f240 11db 	movw	r1, #475	; 0x1db
 8009652:	4811      	ldr	r0, [pc, #68]	; (8009698 <HAL_RCC_OscConfig+0x530>)
 8009654:	f7f9 ffd7 	bl	8003606 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	2b01      	cmp	r3, #1
 800965e:	d903      	bls.n	8009668 <HAL_RCC_OscConfig+0x500>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	2b0f      	cmp	r3, #15
 8009666:	d904      	bls.n	8009672 <HAL_RCC_OscConfig+0x50a>
 8009668:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800966c:	480a      	ldr	r0, [pc, #40]	; (8009698 <HAL_RCC_OscConfig+0x530>)
 800966e:	f7f9 ffca 	bl	8003606 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009672:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <HAL_RCC_OscConfig+0x538>)
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009678:	f7fb f8fc 	bl	8004874 <HAL_GetTick>
 800967c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800967e:	e011      	b.n	80096a4 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009680:	f7fb f8f8 	bl	8004874 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d90a      	bls.n	80096a4 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e08a      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
 8009692:	bf00      	nop
 8009694:	40023800 	.word	0x40023800
 8009698:	08013248 	.word	0x08013248
 800969c:	40007000 	.word	0x40007000
 80096a0:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096a4:	4b42      	ldr	r3, [pc, #264]	; (80097b0 <HAL_RCC_OscConfig+0x648>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e7      	bne.n	8009680 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	69da      	ldr	r2, [r3, #28]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	431a      	orrs	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	019b      	lsls	r3, r3, #6
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	085b      	lsrs	r3, r3, #1
 80096c8:	3b01      	subs	r3, #1
 80096ca:	041b      	lsls	r3, r3, #16
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d2:	061b      	lsls	r3, r3, #24
 80096d4:	4936      	ldr	r1, [pc, #216]	; (80097b0 <HAL_RCC_OscConfig+0x648>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096da:	4b36      	ldr	r3, [pc, #216]	; (80097b4 <HAL_RCC_OscConfig+0x64c>)
 80096dc:	2201      	movs	r2, #1
 80096de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096e0:	f7fb f8c8 	bl	8004874 <HAL_GetTick>
 80096e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096e6:	e008      	b.n	80096fa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096e8:	f7fb f8c4 	bl	8004874 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d901      	bls.n	80096fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e056      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096fa:	4b2d      	ldr	r3, [pc, #180]	; (80097b0 <HAL_RCC_OscConfig+0x648>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0f0      	beq.n	80096e8 <HAL_RCC_OscConfig+0x580>
 8009706:	e04e      	b.n	80097a6 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009708:	4b2a      	ldr	r3, [pc, #168]	; (80097b4 <HAL_RCC_OscConfig+0x64c>)
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800970e:	f7fb f8b1 	bl	8004874 <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009714:	e008      	b.n	8009728 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009716:	f7fb f8ad 	bl	8004874 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	2b02      	cmp	r3, #2
 8009722:	d901      	bls.n	8009728 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e03f      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009728:	4b21      	ldr	r3, [pc, #132]	; (80097b0 <HAL_RCC_OscConfig+0x648>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f0      	bne.n	8009716 <HAL_RCC_OscConfig+0x5ae>
 8009734:	e037      	b.n	80097a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e032      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009742:	4b1b      	ldr	r3, [pc, #108]	; (80097b0 <HAL_RCC_OscConfig+0x648>)
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d028      	beq.n	80097a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800975a:	429a      	cmp	r2, r3
 800975c:	d121      	bne.n	80097a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009768:	429a      	cmp	r2, r3
 800976a:	d11a      	bne.n	80097a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009772:	4013      	ands	r3, r2
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009778:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800977a:	4293      	cmp	r3, r2
 800977c:	d111      	bne.n	80097a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009788:	085b      	lsrs	r3, r3, #1
 800978a:	3b01      	subs	r3, #1
 800978c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800978e:	429a      	cmp	r2, r3
 8009790:	d107      	bne.n	80097a2 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800979e:	429a      	cmp	r2, r3
 80097a0:	d001      	beq.n	80097a6 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	40023800 	.word	0x40023800
 80097b4:	42470060 	.word	0x42470060

080097b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e174      	b.n	8009ab6 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d003      	beq.n	80097dc <HAL_RCC_ClockConfig+0x24>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b0f      	cmp	r3, #15
 80097da:	d904      	bls.n	80097e6 <HAL_RCC_ClockConfig+0x2e>
 80097dc:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80097e0:	487b      	ldr	r0, [pc, #492]	; (80099d0 <HAL_RCC_ClockConfig+0x218>)
 80097e2:	f7f9 ff10 	bl	8003606 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d019      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d016      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d013      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d010      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b04      	cmp	r3, #4
 8009802:	d00d      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2b05      	cmp	r3, #5
 8009808:	d00a      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b06      	cmp	r3, #6
 800980e:	d007      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	2b07      	cmp	r3, #7
 8009814:	d004      	beq.n	8009820 <HAL_RCC_ClockConfig+0x68>
 8009816:	f240 215d 	movw	r1, #605	; 0x25d
 800981a:	486d      	ldr	r0, [pc, #436]	; (80099d0 <HAL_RCC_ClockConfig+0x218>)
 800981c:	f7f9 fef3 	bl	8003606 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009820:	4b6c      	ldr	r3, [pc, #432]	; (80099d4 <HAL_RCC_ClockConfig+0x21c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0307 	and.w	r3, r3, #7
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d90c      	bls.n	8009848 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800982e:	4b69      	ldr	r3, [pc, #420]	; (80099d4 <HAL_RCC_ClockConfig+0x21c>)
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	b2d2      	uxtb	r2, r2
 8009834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009836:	4b67      	ldr	r3, [pc, #412]	; (80099d4 <HAL_RCC_ClockConfig+0x21c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d001      	beq.n	8009848 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e136      	b.n	8009ab6 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d049      	beq.n	80098e8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009860:	4b5d      	ldr	r3, [pc, #372]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	4a5c      	ldr	r2, [pc, #368]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009866:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800986a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0308 	and.w	r3, r3, #8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009878:	4b57      	ldr	r3, [pc, #348]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	4a56      	ldr	r2, [pc, #344]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 800987e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d024      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	2b80      	cmp	r3, #128	; 0x80
 8009892:	d020      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	2b90      	cmp	r3, #144	; 0x90
 800989a:	d01c      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	2ba0      	cmp	r3, #160	; 0xa0
 80098a2:	d018      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	2bb0      	cmp	r3, #176	; 0xb0
 80098aa:	d014      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	2bc0      	cmp	r3, #192	; 0xc0
 80098b2:	d010      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	2bd0      	cmp	r3, #208	; 0xd0
 80098ba:	d00c      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	2be0      	cmp	r3, #224	; 0xe0
 80098c2:	d008      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	2bf0      	cmp	r3, #240	; 0xf0
 80098ca:	d004      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x11e>
 80098cc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80098d0:	483f      	ldr	r0, [pc, #252]	; (80099d0 <HAL_RCC_ClockConfig+0x218>)
 80098d2:	f7f9 fe98 	bl	8003606 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098d6:	4b40      	ldr	r3, [pc, #256]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	493d      	ldr	r1, [pc, #244]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d059      	beq.n	80099a8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d010      	beq.n	800991e <HAL_RCC_ClockConfig+0x166>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d00c      	beq.n	800991e <HAL_RCC_ClockConfig+0x166>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d008      	beq.n	800991e <HAL_RCC_ClockConfig+0x166>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2b03      	cmp	r3, #3
 8009912:	d004      	beq.n	800991e <HAL_RCC_ClockConfig+0x166>
 8009914:	f240 2187 	movw	r1, #647	; 0x287
 8009918:	482d      	ldr	r0, [pc, #180]	; (80099d0 <HAL_RCC_ClockConfig+0x218>)
 800991a:	f7f9 fe74 	bl	8003606 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d107      	bne.n	8009936 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009926:	4b2c      	ldr	r3, [pc, #176]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d119      	bne.n	8009966 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e0bf      	b.n	8009ab6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d003      	beq.n	8009946 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009942:	2b03      	cmp	r3, #3
 8009944:	d107      	bne.n	8009956 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009946:	4b24      	ldr	r3, [pc, #144]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d109      	bne.n	8009966 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	e0af      	b.n	8009ab6 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009956:	4b20      	ldr	r3, [pc, #128]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0302 	and.w	r3, r3, #2
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e0a7      	b.n	8009ab6 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009966:	4b1c      	ldr	r3, [pc, #112]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f023 0203 	bic.w	r2, r3, #3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	4919      	ldr	r1, [pc, #100]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009974:	4313      	orrs	r3, r2
 8009976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009978:	f7fa ff7c 	bl	8004874 <HAL_GetTick>
 800997c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800997e:	e00a      	b.n	8009996 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009980:	f7fa ff78 	bl	8004874 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	f241 3288 	movw	r2, #5000	; 0x1388
 800998e:	4293      	cmp	r3, r2
 8009990:	d901      	bls.n	8009996 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e08f      	b.n	8009ab6 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009996:	4b10      	ldr	r3, [pc, #64]	; (80099d8 <HAL_RCC_ClockConfig+0x220>)
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f003 020c 	and.w	r2, r3, #12
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d1eb      	bne.n	8009980 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80099a8:	4b0a      	ldr	r3, [pc, #40]	; (80099d4 <HAL_RCC_ClockConfig+0x21c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0307 	and.w	r3, r3, #7
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d212      	bcs.n	80099dc <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099b6:	4b07      	ldr	r3, [pc, #28]	; (80099d4 <HAL_RCC_ClockConfig+0x21c>)
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	b2d2      	uxtb	r2, r2
 80099bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099be:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <HAL_RCC_ClockConfig+0x21c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d007      	beq.n	80099dc <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e072      	b.n	8009ab6 <HAL_RCC_ClockConfig+0x2fe>
 80099d0:	08013248 	.word	0x08013248
 80099d4:	40023c00 	.word	0x40023c00
 80099d8:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d025      	beq.n	8009a34 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d018      	beq.n	8009a22 <HAL_RCC_ClockConfig+0x26a>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099f8:	d013      	beq.n	8009a22 <HAL_RCC_ClockConfig+0x26a>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a02:	d00e      	beq.n	8009a22 <HAL_RCC_ClockConfig+0x26a>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009a0c:	d009      	beq.n	8009a22 <HAL_RCC_ClockConfig+0x26a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009a16:	d004      	beq.n	8009a22 <HAL_RCC_ClockConfig+0x26a>
 8009a18:	f240 21c5 	movw	r1, #709	; 0x2c5
 8009a1c:	4828      	ldr	r0, [pc, #160]	; (8009ac0 <HAL_RCC_ClockConfig+0x308>)
 8009a1e:	f7f9 fdf2 	bl	8003606 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a22:	4b28      	ldr	r3, [pc, #160]	; (8009ac4 <HAL_RCC_ClockConfig+0x30c>)
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	4925      	ldr	r1, [pc, #148]	; (8009ac4 <HAL_RCC_ClockConfig+0x30c>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0308 	and.w	r3, r3, #8
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d026      	beq.n	8009a8e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d018      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x2c2>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a50:	d013      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x2c2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a5a:	d00e      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x2c2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8009a64:	d009      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x2c2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8009a6e:	d004      	beq.n	8009a7a <HAL_RCC_ClockConfig+0x2c2>
 8009a70:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8009a74:	4812      	ldr	r0, [pc, #72]	; (8009ac0 <HAL_RCC_ClockConfig+0x308>)
 8009a76:	f7f9 fdc6 	bl	8003606 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a7a:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <HAL_RCC_ClockConfig+0x30c>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	490e      	ldr	r1, [pc, #56]	; (8009ac4 <HAL_RCC_ClockConfig+0x30c>)
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a8e:	f000 f821 	bl	8009ad4 <HAL_RCC_GetSysClockFreq>
 8009a92:	4602      	mov	r2, r0
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <HAL_RCC_ClockConfig+0x30c>)
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	091b      	lsrs	r3, r3, #4
 8009a9a:	f003 030f 	and.w	r3, r3, #15
 8009a9e:	490a      	ldr	r1, [pc, #40]	; (8009ac8 <HAL_RCC_ClockConfig+0x310>)
 8009aa0:	5ccb      	ldrb	r3, [r1, r3]
 8009aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa6:	4a09      	ldr	r2, [pc, #36]	; (8009acc <HAL_RCC_ClockConfig+0x314>)
 8009aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009aaa:	4b09      	ldr	r3, [pc, #36]	; (8009ad0 <HAL_RCC_ClockConfig+0x318>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7fa fe9c 	bl	80047ec <HAL_InitTick>

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	08013248 	.word	0x08013248
 8009ac4:	40023800 	.word	0x40023800
 8009ac8:	08013940 	.word	0x08013940
 8009acc:	200000d8 	.word	0x200000d8
 8009ad0:	200000dc 	.word	0x200000dc

08009ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ad4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	607b      	str	r3, [r7, #4]
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009aec:	4b67      	ldr	r3, [pc, #412]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f003 030c 	and.w	r3, r3, #12
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d00d      	beq.n	8009b14 <HAL_RCC_GetSysClockFreq+0x40>
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	f200 80bd 	bhi.w	8009c78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <HAL_RCC_GetSysClockFreq+0x34>
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d003      	beq.n	8009b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8009b06:	e0b7      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b08:	4b61      	ldr	r3, [pc, #388]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009b0a:	60bb      	str	r3, [r7, #8]
       break;
 8009b0c:	e0b7      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b0e:	4b61      	ldr	r3, [pc, #388]	; (8009c94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009b10:	60bb      	str	r3, [r7, #8]
      break;
 8009b12:	e0b4      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b14:	4b5d      	ldr	r3, [pc, #372]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b1e:	4b5b      	ldr	r3, [pc, #364]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d04d      	beq.n	8009bc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b2a:	4b58      	ldr	r3, [pc, #352]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	099b      	lsrs	r3, r3, #6
 8009b30:	461a      	mov	r2, r3
 8009b32:	f04f 0300 	mov.w	r3, #0
 8009b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009b3a:	f04f 0100 	mov.w	r1, #0
 8009b3e:	ea02 0800 	and.w	r8, r2, r0
 8009b42:	ea03 0901 	and.w	r9, r3, r1
 8009b46:	4640      	mov	r0, r8
 8009b48:	4649      	mov	r1, r9
 8009b4a:	f04f 0200 	mov.w	r2, #0
 8009b4e:	f04f 0300 	mov.w	r3, #0
 8009b52:	014b      	lsls	r3, r1, #5
 8009b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b58:	0142      	lsls	r2, r0, #5
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	ebb0 0008 	subs.w	r0, r0, r8
 8009b62:	eb61 0109 	sbc.w	r1, r1, r9
 8009b66:	f04f 0200 	mov.w	r2, #0
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	018b      	lsls	r3, r1, #6
 8009b70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009b74:	0182      	lsls	r2, r0, #6
 8009b76:	1a12      	subs	r2, r2, r0
 8009b78:	eb63 0301 	sbc.w	r3, r3, r1
 8009b7c:	f04f 0000 	mov.w	r0, #0
 8009b80:	f04f 0100 	mov.w	r1, #0
 8009b84:	00d9      	lsls	r1, r3, #3
 8009b86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b8a:	00d0      	lsls	r0, r2, #3
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	eb12 0208 	adds.w	r2, r2, r8
 8009b94:	eb43 0309 	adc.w	r3, r3, r9
 8009b98:	f04f 0000 	mov.w	r0, #0
 8009b9c:	f04f 0100 	mov.w	r1, #0
 8009ba0:	0259      	lsls	r1, r3, #9
 8009ba2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009ba6:	0250      	lsls	r0, r2, #9
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4610      	mov	r0, r2
 8009bae:	4619      	mov	r1, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f04f 0300 	mov.w	r3, #0
 8009bb8:	f7f7 f84e 	bl	8000c58 <__aeabi_uldivmod>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	e04a      	b.n	8009c5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bc6:	4b31      	ldr	r3, [pc, #196]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	099b      	lsrs	r3, r3, #6
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f04f 0300 	mov.w	r3, #0
 8009bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009bd6:	f04f 0100 	mov.w	r1, #0
 8009bda:	ea02 0400 	and.w	r4, r2, r0
 8009bde:	ea03 0501 	and.w	r5, r3, r1
 8009be2:	4620      	mov	r0, r4
 8009be4:	4629      	mov	r1, r5
 8009be6:	f04f 0200 	mov.w	r2, #0
 8009bea:	f04f 0300 	mov.w	r3, #0
 8009bee:	014b      	lsls	r3, r1, #5
 8009bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009bf4:	0142      	lsls	r2, r0, #5
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	1b00      	subs	r0, r0, r4
 8009bfc:	eb61 0105 	sbc.w	r1, r1, r5
 8009c00:	f04f 0200 	mov.w	r2, #0
 8009c04:	f04f 0300 	mov.w	r3, #0
 8009c08:	018b      	lsls	r3, r1, #6
 8009c0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009c0e:	0182      	lsls	r2, r0, #6
 8009c10:	1a12      	subs	r2, r2, r0
 8009c12:	eb63 0301 	sbc.w	r3, r3, r1
 8009c16:	f04f 0000 	mov.w	r0, #0
 8009c1a:	f04f 0100 	mov.w	r1, #0
 8009c1e:	00d9      	lsls	r1, r3, #3
 8009c20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c24:	00d0      	lsls	r0, r2, #3
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	1912      	adds	r2, r2, r4
 8009c2c:	eb45 0303 	adc.w	r3, r5, r3
 8009c30:	f04f 0000 	mov.w	r0, #0
 8009c34:	f04f 0100 	mov.w	r1, #0
 8009c38:	0299      	lsls	r1, r3, #10
 8009c3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009c3e:	0290      	lsls	r0, r2, #10
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4610      	mov	r0, r2
 8009c46:	4619      	mov	r1, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f04f 0300 	mov.w	r3, #0
 8009c50:	f7f7 f802 	bl	8000c58 <__aeabi_uldivmod>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4613      	mov	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009c5c:	4b0b      	ldr	r3, [pc, #44]	; (8009c8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	0c1b      	lsrs	r3, r3, #16
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	3301      	adds	r3, #1
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c74:	60bb      	str	r3, [r7, #8]
      break;
 8009c76:	e002      	b.n	8009c7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009c78:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009c7a:	60bb      	str	r3, [r7, #8]
      break;
 8009c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009c8a:	bf00      	nop
 8009c8c:	40023800 	.word	0x40023800
 8009c90:	00f42400 	.word	0x00f42400
 8009c94:	007a1200 	.word	0x007a1200

08009c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009c9c:	4b03      	ldr	r3, [pc, #12]	; (8009cac <HAL_RCC_GetHCLKFreq+0x14>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	200000d8 	.word	0x200000d8

08009cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009cb4:	f7ff fff0 	bl	8009c98 <HAL_RCC_GetHCLKFreq>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	0a9b      	lsrs	r3, r3, #10
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	4903      	ldr	r1, [pc, #12]	; (8009cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cc6:	5ccb      	ldrb	r3, [r1, r3]
 8009cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	40023800 	.word	0x40023800
 8009cd4:	08013950 	.word	0x08013950

08009cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e18c      	b.n	800a004 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a75      	ldr	r2, [pc, #468]	; (8009ec4 <HAL_SPI_Init+0x1ec>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d018      	beq.n	8009d26 <HAL_SPI_Init+0x4e>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a73      	ldr	r2, [pc, #460]	; (8009ec8 <HAL_SPI_Init+0x1f0>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d013      	beq.n	8009d26 <HAL_SPI_Init+0x4e>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a72      	ldr	r2, [pc, #456]	; (8009ecc <HAL_SPI_Init+0x1f4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d00e      	beq.n	8009d26 <HAL_SPI_Init+0x4e>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a70      	ldr	r2, [pc, #448]	; (8009ed0 <HAL_SPI_Init+0x1f8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d009      	beq.n	8009d26 <HAL_SPI_Init+0x4e>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a6f      	ldr	r2, [pc, #444]	; (8009ed4 <HAL_SPI_Init+0x1fc>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d004      	beq.n	8009d26 <HAL_SPI_Init+0x4e>
 8009d1c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8009d20:	486d      	ldr	r0, [pc, #436]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009d22:	f7f9 fc70 	bl	8003606 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <HAL_SPI_Init+0x6a>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d36:	d004      	beq.n	8009d42 <HAL_SPI_Init+0x6a>
 8009d38:	f240 1143 	movw	r1, #323	; 0x143
 8009d3c:	4866      	ldr	r0, [pc, #408]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009d3e:	f7f9 fc62 	bl	8003606 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00e      	beq.n	8009d68 <HAL_SPI_Init+0x90>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d52:	d009      	beq.n	8009d68 <HAL_SPI_Init+0x90>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d5c:	d004      	beq.n	8009d68 <HAL_SPI_Init+0x90>
 8009d5e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009d62:	485d      	ldr	r0, [pc, #372]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009d64:	f7f9 fc4f 	bl	8003606 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d70:	d008      	beq.n	8009d84 <HAL_SPI_Init+0xac>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <HAL_SPI_Init+0xac>
 8009d7a:	f240 1145 	movw	r1, #325	; 0x145
 8009d7e:	4856      	ldr	r0, [pc, #344]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009d80:	f7f9 fc41 	bl	8003606 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d8c:	d00d      	beq.n	8009daa <HAL_SPI_Init+0xd2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	699b      	ldr	r3, [r3, #24]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d009      	beq.n	8009daa <HAL_SPI_Init+0xd2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d9e:	d004      	beq.n	8009daa <HAL_SPI_Init+0xd2>
 8009da0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8009da4:	484c      	ldr	r0, [pc, #304]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009da6:	f7f9 fc2e 	bl	8003606 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d020      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	2b08      	cmp	r3, #8
 8009db8:	d01c      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	2b10      	cmp	r3, #16
 8009dc0:	d018      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	2b18      	cmp	r3, #24
 8009dc8:	d014      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	2b20      	cmp	r3, #32
 8009dd0:	d010      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	2b28      	cmp	r3, #40	; 0x28
 8009dd8:	d00c      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	2b30      	cmp	r3, #48	; 0x30
 8009de0:	d008      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	69db      	ldr	r3, [r3, #28]
 8009de6:	2b38      	cmp	r3, #56	; 0x38
 8009de8:	d004      	beq.n	8009df4 <HAL_SPI_Init+0x11c>
 8009dea:	f240 1147 	movw	r1, #327	; 0x147
 8009dee:	483a      	ldr	r0, [pc, #232]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009df0:	f7f9 fc09 	bl	8003606 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d008      	beq.n	8009e0e <HAL_SPI_Init+0x136>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	2b80      	cmp	r3, #128	; 0x80
 8009e02:	d004      	beq.n	8009e0e <HAL_SPI_Init+0x136>
 8009e04:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009e08:	4833      	ldr	r0, [pc, #204]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009e0a:	f7f9 fbfc 	bl	8003606 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d008      	beq.n	8009e28 <HAL_SPI_Init+0x150>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	2b10      	cmp	r3, #16
 8009e1c:	d004      	beq.n	8009e28 <HAL_SPI_Init+0x150>
 8009e1e:	f240 1149 	movw	r1, #329	; 0x149
 8009e22:	482d      	ldr	r0, [pc, #180]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009e24:	f7f9 fbef 	bl	8003606 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d155      	bne.n	8009edc <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d008      	beq.n	8009e4a <HAL_SPI_Init+0x172>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d004      	beq.n	8009e4a <HAL_SPI_Init+0x172>
 8009e40:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8009e44:	4824      	ldr	r0, [pc, #144]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009e46:	f7f9 fbde 	bl	8003606 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d008      	beq.n	8009e64 <HAL_SPI_Init+0x18c>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d004      	beq.n	8009e64 <HAL_SPI_Init+0x18c>
 8009e5a:	f240 114d 	movw	r1, #333	; 0x14d
 8009e5e:	481e      	ldr	r0, [pc, #120]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009e60:	f7f9 fbd1 	bl	8003606 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e6c:	d125      	bne.n	8009eba <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d05d      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	69db      	ldr	r3, [r3, #28]
 8009e7a:	2b08      	cmp	r3, #8
 8009e7c:	d059      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	69db      	ldr	r3, [r3, #28]
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d055      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	2b18      	cmp	r3, #24
 8009e8c:	d051      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	2b20      	cmp	r3, #32
 8009e94:	d04d      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	2b28      	cmp	r3, #40	; 0x28
 8009e9c:	d049      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	2b30      	cmp	r3, #48	; 0x30
 8009ea4:	d045      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	2b38      	cmp	r3, #56	; 0x38
 8009eac:	d041      	beq.n	8009f32 <HAL_SPI_Init+0x25a>
 8009eae:	f240 1151 	movw	r1, #337	; 0x151
 8009eb2:	4809      	ldr	r0, [pc, #36]	; (8009ed8 <HAL_SPI_Init+0x200>)
 8009eb4:	f7f9 fba7 	bl	8003606 <assert_failed>
 8009eb8:	e03b      	b.n	8009f32 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	61da      	str	r2, [r3, #28]
 8009ec0:	e037      	b.n	8009f32 <HAL_SPI_Init+0x25a>
 8009ec2:	bf00      	nop
 8009ec4:	40013000 	.word	0x40013000
 8009ec8:	40003800 	.word	0x40003800
 8009ecc:	40003c00 	.word	0x40003c00
 8009ed0:	40013400 	.word	0x40013400
 8009ed4:	40015000 	.word	0x40015000
 8009ed8:	08013280 	.word	0x08013280
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d020      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	2b08      	cmp	r3, #8
 8009eea:	d01c      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	2b10      	cmp	r3, #16
 8009ef2:	d018      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	2b18      	cmp	r3, #24
 8009efa:	d014      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	69db      	ldr	r3, [r3, #28]
 8009f00:	2b20      	cmp	r3, #32
 8009f02:	d010      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	2b28      	cmp	r3, #40	; 0x28
 8009f0a:	d00c      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	2b30      	cmp	r3, #48	; 0x30
 8009f12:	d008      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	2b38      	cmp	r3, #56	; 0x38
 8009f1a:	d004      	beq.n	8009f26 <HAL_SPI_Init+0x24e>
 8009f1c:	f240 115b 	movw	r1, #347	; 0x15b
 8009f20:	483a      	ldr	r0, [pc, #232]	; (800a00c <HAL_SPI_Init+0x334>)
 8009f22:	f7f9 fb70 	bl	8003606 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d106      	bne.n	8009f52 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7f9 fbd1 	bl	80036f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f84:	431a      	orrs	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	431a      	orrs	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	431a      	orrs	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb6:	ea42 0103 	orr.w	r1, r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	0c1b      	lsrs	r3, r3, #16
 8009fd0:	f003 0104 	and.w	r1, r3, #4
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd8:	f003 0210 	and.w	r2, r3, #16
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	69da      	ldr	r2, [r3, #28]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ff2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	08013280 	.word	0x08013280

0800a010 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e038      	b.n	800a094 <HAL_SPI_DeInit+0x84>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a1d      	ldr	r2, [pc, #116]	; (800a09c <HAL_SPI_DeInit+0x8c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d018      	beq.n	800a05e <HAL_SPI_DeInit+0x4e>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1b      	ldr	r2, [pc, #108]	; (800a0a0 <HAL_SPI_DeInit+0x90>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d013      	beq.n	800a05e <HAL_SPI_DeInit+0x4e>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a1a      	ldr	r2, [pc, #104]	; (800a0a4 <HAL_SPI_DeInit+0x94>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d00e      	beq.n	800a05e <HAL_SPI_DeInit+0x4e>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a18      	ldr	r2, [pc, #96]	; (800a0a8 <HAL_SPI_DeInit+0x98>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d009      	beq.n	800a05e <HAL_SPI_DeInit+0x4e>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a17      	ldr	r2, [pc, #92]	; (800a0ac <HAL_SPI_DeInit+0x9c>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d004      	beq.n	800a05e <HAL_SPI_DeInit+0x4e>
 800a054:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800a058:	4815      	ldr	r0, [pc, #84]	; (800a0b0 <HAL_SPI_DeInit+0xa0>)
 800a05a:	f7f9 fad4 	bl	8003606 <assert_failed>

  hspi->State = HAL_SPI_STATE_BUSY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2202      	movs	r2, #2
 800a062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a074:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7f9 fbba 	bl	80037f0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	40013000 	.word	0x40013000
 800a0a0:	40003800 	.word	0x40003800
 800a0a4:	40003c00 	.word	0x40003c00
 800a0a8:	40013400 	.word	0x40013400
 800a0ac:	40015000 	.word	0x40015000
 800a0b0:	08013280 	.word	0x08013280

0800a0b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d009      	beq.n	800a0e4 <HAL_SPI_Transmit+0x30>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0d8:	d004      	beq.n	800a0e4 <HAL_SPI_Transmit+0x30>
 800a0da:	f240 310a 	movw	r1, #778	; 0x30a
 800a0de:	4893      	ldr	r0, [pc, #588]	; (800a32c <HAL_SPI_Transmit+0x278>)
 800a0e0:	f7f9 fa91 	bl	8003606 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d101      	bne.n	800a0f2 <HAL_SPI_Transmit+0x3e>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e128      	b.n	800a344 <HAL_SPI_Transmit+0x290>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0fa:	f7fa fbbb 	bl	8004874 <HAL_GetTick>
 800a0fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a100:	88fb      	ldrh	r3, [r7, #6]
 800a102:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d002      	beq.n	800a116 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800a110:	2302      	movs	r3, #2
 800a112:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a114:	e10d      	b.n	800a332 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <HAL_SPI_Transmit+0x6e>
 800a11c:	88fb      	ldrh	r3, [r7, #6]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d102      	bne.n	800a128 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a126:	e104      	b.n	800a332 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2203      	movs	r2, #3
 800a12c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	88fa      	ldrh	r2, [r7, #6]
 800a140:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	88fa      	ldrh	r2, [r7, #6]
 800a146:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a16e:	d10f      	bne.n	800a190 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a17e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a18e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19a:	2b40      	cmp	r3, #64	; 0x40
 800a19c:	d007      	beq.n	800a1ae <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1b6:	d14b      	bne.n	800a250 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <HAL_SPI_Transmit+0x112>
 800a1c0:	8afb      	ldrh	r3, [r7, #22]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d13e      	bne.n	800a244 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	881a      	ldrh	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d6:	1c9a      	adds	r2, r3, #2
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a1ea:	e02b      	b.n	800a244 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d112      	bne.n	800a220 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fe:	881a      	ldrh	r2, [r3, #0]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20a:	1c9a      	adds	r2, r3, #2
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a214:	b29b      	uxth	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	b29a      	uxth	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	86da      	strh	r2, [r3, #54]	; 0x36
 800a21e:	e011      	b.n	800a244 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a220:	f7fa fb28 	bl	8004874 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d803      	bhi.n	800a238 <HAL_SPI_Transmit+0x184>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a236:	d102      	bne.n	800a23e <HAL_SPI_Transmit+0x18a>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d102      	bne.n	800a244 <HAL_SPI_Transmit+0x190>
        {
          errorcode = HAL_TIMEOUT;
 800a23e:	2303      	movs	r3, #3
 800a240:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a242:	e076      	b.n	800a332 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a248:	b29b      	uxth	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1ce      	bne.n	800a1ec <HAL_SPI_Transmit+0x138>
 800a24e:	e04c      	b.n	800a2ea <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <HAL_SPI_Transmit+0x1aa>
 800a258:	8afb      	ldrh	r3, [r7, #22]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d140      	bne.n	800a2e0 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	330c      	adds	r3, #12
 800a268:	7812      	ldrb	r2, [r2, #0]
 800a26a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a284:	e02c      	b.n	800a2e0 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b02      	cmp	r3, #2
 800a292:	d113      	bne.n	800a2bc <HAL_SPI_Transmit+0x208>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	330c      	adds	r3, #12
 800a29e:	7812      	ldrb	r2, [r2, #0]
 800a2a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	86da      	strh	r2, [r3, #54]	; 0x36
 800a2ba:	e011      	b.n	800a2e0 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2bc:	f7fa fada 	bl	8004874 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d803      	bhi.n	800a2d4 <HAL_SPI_Transmit+0x220>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d2:	d102      	bne.n	800a2da <HAL_SPI_Transmit+0x226>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d102      	bne.n	800a2e0 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a2de:	e028      	b.n	800a332 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1cd      	bne.n	800a286 <HAL_SPI_Transmit+0x1d2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fa70 	bl	800a7d4 <SPI_EndRxTxTransaction>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d002      	beq.n	800a300 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2220      	movs	r2, #32
 800a2fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a308:	2300      	movs	r3, #0
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	613b      	str	r3, [r7, #16]
 800a31c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a322:	2b00      	cmp	r3, #0
 800a324:	d004      	beq.n	800a330 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	77fb      	strb	r3, [r7, #31]
 800a32a:	e002      	b.n	800a332 <HAL_SPI_Transmit+0x27e>
 800a32c:	08013280 	.word	0x08013280
  }

error:
 800a330:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a342:	7ffb      	ldrb	r3, [r7, #31]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08c      	sub	sp, #48	; 0x30
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
 800a358:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a35a:	2301      	movs	r3, #1
 800a35c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <HAL_SPI_TransmitReceive+0x2a>
 800a36c:	f240 417e 	movw	r1, #1150	; 0x47e
 800a370:	4884      	ldr	r0, [pc, #528]	; (800a584 <HAL_SPI_TransmitReceive+0x238>)
 800a372:	f7f9 f948 	bl	8003606 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d101      	bne.n	800a384 <HAL_SPI_TransmitReceive+0x38>
 800a380:	2302      	movs	r3, #2
 800a382:	e18d      	b.n	800a6a0 <HAL_SPI_TransmitReceive+0x354>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a38c:	f7fa fa72 	bl	8004874 <HAL_GetTick>
 800a390:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a3a2:	887b      	ldrh	r3, [r7, #2]
 800a3a4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a3a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d00f      	beq.n	800a3ce <HAL_SPI_TransmitReceive+0x82>
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a3b4:	d107      	bne.n	800a3c6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d103      	bne.n	800a3c6 <HAL_SPI_TransmitReceive+0x7a>
 800a3be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3c2:	2b04      	cmp	r3, #4
 800a3c4:	d003      	beq.n	800a3ce <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a3cc:	e15e      	b.n	800a68c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <HAL_SPI_TransmitReceive+0x94>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d002      	beq.n	800a3e0 <HAL_SPI_TransmitReceive+0x94>
 800a3da:	887b      	ldrh	r3, [r7, #2]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a3e6:	e151      	b.n	800a68c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d003      	beq.n	800a3fc <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2205      	movs	r2, #5
 800a3f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	887a      	ldrh	r2, [r7, #2]
 800a40c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	887a      	ldrh	r2, [r7, #2]
 800a412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	887a      	ldrh	r2, [r7, #2]
 800a41e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	887a      	ldrh	r2, [r7, #2]
 800a424:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2200      	movs	r2, #0
 800a42a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a43c:	2b40      	cmp	r3, #64	; 0x40
 800a43e:	d007      	beq.n	800a450 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a44e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a458:	d178      	bne.n	800a54c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d002      	beq.n	800a468 <HAL_SPI_TransmitReceive+0x11c>
 800a462:	8b7b      	ldrh	r3, [r7, #26]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d166      	bne.n	800a536 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	881a      	ldrh	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	1c9a      	adds	r2, r3, #2
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a482:	b29b      	uxth	r3, r3
 800a484:	3b01      	subs	r3, #1
 800a486:	b29a      	uxth	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a48c:	e053      	b.n	800a536 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d11b      	bne.n	800a4d4 <HAL_SPI_TransmitReceive+0x188>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d016      	beq.n	800a4d4 <HAL_SPI_TransmitReceive+0x188>
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d113      	bne.n	800a4d4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b0:	881a      	ldrh	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	1c9a      	adds	r2, r3, #2
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d119      	bne.n	800a516 <HAL_SPI_TransmitReceive+0x1ca>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d014      	beq.n	800a516 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f6:	b292      	uxth	r2, r2
 800a4f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fe:	1c9a      	adds	r2, r3, #2
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a512:	2301      	movs	r3, #1
 800a514:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a516:	f7fa f9ad 	bl	8004874 <HAL_GetTick>
 800a51a:	4602      	mov	r2, r0
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a522:	429a      	cmp	r2, r3
 800a524:	d807      	bhi.n	800a536 <HAL_SPI_TransmitReceive+0x1ea>
 800a526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a52c:	d003      	beq.n	800a536 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a534:	e0aa      	b.n	800a68c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1a6      	bne.n	800a48e <HAL_SPI_TransmitReceive+0x142>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a544:	b29b      	uxth	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1a1      	bne.n	800a48e <HAL_SPI_TransmitReceive+0x142>
 800a54a:	e07f      	b.n	800a64c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <HAL_SPI_TransmitReceive+0x20e>
 800a554:	8b7b      	ldrh	r3, [r7, #26]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d16e      	bne.n	800a638 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	330c      	adds	r3, #12
 800a564:	7812      	ldrb	r2, [r2, #0]
 800a566:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a576:	b29b      	uxth	r3, r3
 800a578:	3b01      	subs	r3, #1
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a580:	e05a      	b.n	800a638 <HAL_SPI_TransmitReceive+0x2ec>
 800a582:	bf00      	nop
 800a584:	08013280 	.word	0x08013280
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b02      	cmp	r3, #2
 800a594:	d11c      	bne.n	800a5d0 <HAL_SPI_TransmitReceive+0x284>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d017      	beq.n	800a5d0 <HAL_SPI_TransmitReceive+0x284>
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d114      	bne.n	800a5d0 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	330c      	adds	r3, #12
 800a5b0:	7812      	ldrb	r2, [r2, #0]
 800a5b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d119      	bne.n	800a612 <HAL_SPI_TransmitReceive+0x2c6>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d014      	beq.n	800a612 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	b2d2      	uxtb	r2, r2
 800a5f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fa:	1c5a      	adds	r2, r3, #1
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a604:	b29b      	uxth	r3, r3
 800a606:	3b01      	subs	r3, #1
 800a608:	b29a      	uxth	r2, r3
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a60e:	2301      	movs	r3, #1
 800a610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a612:	f7fa f92f 	bl	8004874 <HAL_GetTick>
 800a616:	4602      	mov	r2, r0
 800a618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a61e:	429a      	cmp	r2, r3
 800a620:	d803      	bhi.n	800a62a <HAL_SPI_TransmitReceive+0x2de>
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a628:	d102      	bne.n	800a630 <HAL_SPI_TransmitReceive+0x2e4>
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d103      	bne.n	800a638 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a636:	e029      	b.n	800a68c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1a2      	bne.n	800a588 <HAL_SPI_TransmitReceive+0x23c>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a646:	b29b      	uxth	r3, r3
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d19d      	bne.n	800a588 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a64c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f8bf 	bl	800a7d4 <SPI_EndRxTxTransaction>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d006      	beq.n	800a66a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2220      	movs	r2, #32
 800a666:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a668:	e010      	b.n	800a68c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10b      	bne.n	800a68a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	617b      	str	r3, [r7, #20]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	617b      	str	r3, [r7, #20]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	e000      	b.n	800a68c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800a68a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a69c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3730      	adds	r7, #48	; 0x30
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6b6:	b2db      	uxtb	r3, r3
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b088      	sub	sp, #32
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	603b      	str	r3, [r7, #0]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a6d4:	f7fa f8ce 	bl	8004874 <HAL_GetTick>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	1a9b      	subs	r3, r3, r2
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a6e4:	f7fa f8c6 	bl	8004874 <HAL_GetTick>
 800a6e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a6ea:	4b39      	ldr	r3, [pc, #228]	; (800a7d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	015b      	lsls	r3, r3, #5
 800a6f0:	0d1b      	lsrs	r3, r3, #20
 800a6f2:	69fa      	ldr	r2, [r7, #28]
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
 800a6f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6fa:	e054      	b.n	800a7a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a702:	d050      	beq.n	800a7a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a704:	f7fa f8b6 	bl	8004874 <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	69fa      	ldr	r2, [r7, #28]
 800a710:	429a      	cmp	r2, r3
 800a712:	d902      	bls.n	800a71a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d13d      	bne.n	800a796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a732:	d111      	bne.n	800a758 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a73c:	d004      	beq.n	800a748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a746:	d107      	bne.n	800a758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a760:	d10f      	bne.n	800a782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a792:	2303      	movs	r3, #3
 800a794:	e017      	b.n	800a7c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	bf0c      	ite	eq
 800a7b6:	2301      	moveq	r3, #1
 800a7b8:	2300      	movne	r3, #0
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	461a      	mov	r2, r3
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d19b      	bne.n	800a6fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3720      	adds	r7, #32
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	200000d8 	.word	0x200000d8

0800a7d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af02      	add	r7, sp, #8
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a7e0:	4b1b      	ldr	r3, [pc, #108]	; (800a850 <SPI_EndRxTxTransaction+0x7c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a1b      	ldr	r2, [pc, #108]	; (800a854 <SPI_EndRxTxTransaction+0x80>)
 800a7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ea:	0d5b      	lsrs	r3, r3, #21
 800a7ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7f0:	fb02 f303 	mul.w	r3, r2, r3
 800a7f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7fe:	d112      	bne.n	800a826 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2200      	movs	r2, #0
 800a808:	2180      	movs	r1, #128	; 0x80
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7ff ff5a 	bl	800a6c4 <SPI_WaitFlagStateUntilTimeout>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d016      	beq.n	800a844 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81a:	f043 0220 	orr.w	r2, r3, #32
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	e00f      	b.n	800a846 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00a      	beq.n	800a842 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	3b01      	subs	r3, #1
 800a830:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a83c:	2b80      	cmp	r3, #128	; 0x80
 800a83e:	d0f2      	beq.n	800a826 <SPI_EndRxTxTransaction+0x52>
 800a840:	e000      	b.n	800a844 <SPI_EndRxTxTransaction+0x70>
        break;
 800a842:	bf00      	nop
  }

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	200000d8 	.word	0x200000d8
 800a854:	165e9f81 	.word	0x165e9f81

0800a858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d101      	bne.n	800a86a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e0a7      	b.n	800a9ba <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a55      	ldr	r2, [pc, #340]	; (800a9c4 <HAL_TIM_Base_Init+0x16c>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d027      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a87c:	d022      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a51      	ldr	r2, [pc, #324]	; (800a9c8 <HAL_TIM_Base_Init+0x170>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d01d      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a4f      	ldr	r2, [pc, #316]	; (800a9cc <HAL_TIM_Base_Init+0x174>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d018      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a4e      	ldr	r2, [pc, #312]	; (800a9d0 <HAL_TIM_Base_Init+0x178>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d013      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a4c      	ldr	r2, [pc, #304]	; (800a9d4 <HAL_TIM_Base_Init+0x17c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00e      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a4b      	ldr	r2, [pc, #300]	; (800a9d8 <HAL_TIM_Base_Init+0x180>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d009      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a49      	ldr	r2, [pc, #292]	; (800a9dc <HAL_TIM_Base_Init+0x184>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d004      	beq.n	800a8c4 <HAL_TIM_Base_Init+0x6c>
 800a8ba:	f240 1113 	movw	r1, #275	; 0x113
 800a8be:	4848      	ldr	r0, [pc, #288]	; (800a9e0 <HAL_TIM_Base_Init+0x188>)
 800a8c0:	f7f8 fea1 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d014      	beq.n	800a8f6 <HAL_TIM_Base_Init+0x9e>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	2b10      	cmp	r3, #16
 800a8d2:	d010      	beq.n	800a8f6 <HAL_TIM_Base_Init+0x9e>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	2b20      	cmp	r3, #32
 800a8da:	d00c      	beq.n	800a8f6 <HAL_TIM_Base_Init+0x9e>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	2b40      	cmp	r3, #64	; 0x40
 800a8e2:	d008      	beq.n	800a8f6 <HAL_TIM_Base_Init+0x9e>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	2b60      	cmp	r3, #96	; 0x60
 800a8ea:	d004      	beq.n	800a8f6 <HAL_TIM_Base_Init+0x9e>
 800a8ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 800a8f0:	483b      	ldr	r0, [pc, #236]	; (800a9e0 <HAL_TIM_Base_Init+0x188>)
 800a8f2:	f7f8 fe88 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00e      	beq.n	800a91c <HAL_TIM_Base_Init+0xc4>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a906:	d009      	beq.n	800a91c <HAL_TIM_Base_Init+0xc4>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	691b      	ldr	r3, [r3, #16]
 800a90c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a910:	d004      	beq.n	800a91c <HAL_TIM_Base_Init+0xc4>
 800a912:	f240 1115 	movw	r1, #277	; 0x115
 800a916:	4832      	ldr	r0, [pc, #200]	; (800a9e0 <HAL_TIM_Base_Init+0x188>)
 800a918:	f7f8 fe75 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d008      	beq.n	800a936 <HAL_TIM_Base_Init+0xde>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	2b80      	cmp	r3, #128	; 0x80
 800a92a:	d004      	beq.n	800a936 <HAL_TIM_Base_Init+0xde>
 800a92c:	f44f 718b 	mov.w	r1, #278	; 0x116
 800a930:	482b      	ldr	r0, [pc, #172]	; (800a9e0 <HAL_TIM_Base_Init+0x188>)
 800a932:	f7f8 fe68 	bl	8003606 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d106      	bne.n	800a950 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7f9 fe26 	bl	800459c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	3304      	adds	r3, #4
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f001 fe9a 	bl	800c69c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	40010000 	.word	0x40010000
 800a9c8:	40000400 	.word	0x40000400
 800a9cc:	40000800 	.word	0x40000800
 800a9d0:	40000c00 	.word	0x40000c00
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40014400 	.word	0x40014400
 800a9dc:	40014800 	.word	0x40014800
 800a9e0:	080132b8 	.word	0x080132b8

0800a9e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a25      	ldr	r2, [pc, #148]	; (800aa88 <HAL_TIM_Base_Stop+0xa4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d027      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fe:	d022      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a21      	ldr	r2, [pc, #132]	; (800aa8c <HAL_TIM_Base_Stop+0xa8>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d01d      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a20      	ldr	r2, [pc, #128]	; (800aa90 <HAL_TIM_Base_Stop+0xac>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d018      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a1e      	ldr	r2, [pc, #120]	; (800aa94 <HAL_TIM_Base_Stop+0xb0>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d013      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a1d      	ldr	r2, [pc, #116]	; (800aa98 <HAL_TIM_Base_Stop+0xb4>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d00e      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a1b      	ldr	r2, [pc, #108]	; (800aa9c <HAL_TIM_Base_Stop+0xb8>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d009      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a1a      	ldr	r2, [pc, #104]	; (800aaa0 <HAL_TIM_Base_Stop+0xbc>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d004      	beq.n	800aa46 <HAL_TIM_Base_Stop+0x62>
 800aa3c:	f240 11b9 	movw	r1, #441	; 0x1b9
 800aa40:	4818      	ldr	r0, [pc, #96]	; (800aaa4 <HAL_TIM_Base_Stop+0xc0>)
 800aa42:	f7f8 fde0 	bl	8003606 <assert_failed>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6a1a      	ldr	r2, [r3, #32]
 800aa4c:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa50:	4013      	ands	r3, r2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10f      	bne.n	800aa76 <HAL_TIM_Base_Stop+0x92>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	6a1a      	ldr	r2, [r3, #32]
 800aa5c:	f240 4344 	movw	r3, #1092	; 0x444
 800aa60:	4013      	ands	r3, r2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d107      	bne.n	800aa76 <HAL_TIM_Base_Stop+0x92>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f022 0201 	bic.w	r2, r2, #1
 800aa74:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	40010000 	.word	0x40010000
 800aa8c:	40000400 	.word	0x40000400
 800aa90:	40000800 	.word	0x40000800
 800aa94:	40000c00 	.word	0x40000c00
 800aa98:	40014000 	.word	0x40014000
 800aa9c:	40014400 	.word	0x40014400
 800aaa0:	40014800 	.word	0x40014800
 800aaa4:	080132b8 	.word	0x080132b8

0800aaa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a3d      	ldr	r2, [pc, #244]	; (800abac <HAL_TIM_Base_Start_IT+0x104>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d027      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac2:	d022      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a39      	ldr	r2, [pc, #228]	; (800abb0 <HAL_TIM_Base_Start_IT+0x108>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d01d      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a38      	ldr	r2, [pc, #224]	; (800abb4 <HAL_TIM_Base_Start_IT+0x10c>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d018      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a36      	ldr	r2, [pc, #216]	; (800abb8 <HAL_TIM_Base_Start_IT+0x110>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d013      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a35      	ldr	r2, [pc, #212]	; (800abbc <HAL_TIM_Base_Start_IT+0x114>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d00e      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a33      	ldr	r2, [pc, #204]	; (800abc0 <HAL_TIM_Base_Start_IT+0x118>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d009      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a32      	ldr	r2, [pc, #200]	; (800abc4 <HAL_TIM_Base_Start_IT+0x11c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d004      	beq.n	800ab0a <HAL_TIM_Base_Start_IT+0x62>
 800ab00:	f240 11cf 	movw	r1, #463	; 0x1cf
 800ab04:	4830      	ldr	r0, [pc, #192]	; (800abc8 <HAL_TIM_Base_Start_IT+0x120>)
 800ab06:	f7f8 fd7e 	bl	8003606 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab10:	b2db      	uxtb	r3, r3
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d001      	beq.n	800ab1a <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	e044      	b.n	800aba4 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0201 	orr.w	r2, r2, #1
 800ab30:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a1d      	ldr	r2, [pc, #116]	; (800abac <HAL_TIM_Base_Start_IT+0x104>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d018      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0xc6>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab44:	d013      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0xc6>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a19      	ldr	r2, [pc, #100]	; (800abb0 <HAL_TIM_Base_Start_IT+0x108>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00e      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0xc6>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a17      	ldr	r2, [pc, #92]	; (800abb4 <HAL_TIM_Base_Start_IT+0x10c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d009      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0xc6>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <HAL_TIM_Base_Start_IT+0x110>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d004      	beq.n	800ab6e <HAL_TIM_Base_Start_IT+0xc6>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a14      	ldr	r2, [pc, #80]	; (800abbc <HAL_TIM_Base_Start_IT+0x114>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d111      	bne.n	800ab92 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2b06      	cmp	r3, #6
 800ab7e:	d010      	beq.n	800aba2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f042 0201 	orr.w	r2, r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab90:	e007      	b.n	800aba2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f042 0201 	orr.w	r2, r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	40010000 	.word	0x40010000
 800abb0:	40000400 	.word	0x40000400
 800abb4:	40000800 	.word	0x40000800
 800abb8:	40000c00 	.word	0x40000c00
 800abbc:	40014000 	.word	0x40014000
 800abc0:	40014400 	.word	0x40014400
 800abc4:	40014800 	.word	0x40014800
 800abc8:	080132b8 	.word	0x080132b8

0800abcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	e0a7      	b.n	800ad2e <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a55      	ldr	r2, [pc, #340]	; (800ad38 <HAL_TIM_PWM_Init+0x16c>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d027      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf0:	d022      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a51      	ldr	r2, [pc, #324]	; (800ad3c <HAL_TIM_PWM_Init+0x170>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d01d      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a4f      	ldr	r2, [pc, #316]	; (800ad40 <HAL_TIM_PWM_Init+0x174>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d018      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a4e      	ldr	r2, [pc, #312]	; (800ad44 <HAL_TIM_PWM_Init+0x178>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d013      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a4c      	ldr	r2, [pc, #304]	; (800ad48 <HAL_TIM_PWM_Init+0x17c>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00e      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a4b      	ldr	r2, [pc, #300]	; (800ad4c <HAL_TIM_PWM_Init+0x180>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d009      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a49      	ldr	r2, [pc, #292]	; (800ad50 <HAL_TIM_PWM_Init+0x184>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d004      	beq.n	800ac38 <HAL_TIM_PWM_Init+0x6c>
 800ac2e:	f240 5129 	movw	r1, #1321	; 0x529
 800ac32:	4848      	ldr	r0, [pc, #288]	; (800ad54 <HAL_TIM_PWM_Init+0x188>)
 800ac34:	f7f8 fce7 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d014      	beq.n	800ac6a <HAL_TIM_PWM_Init+0x9e>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	2b10      	cmp	r3, #16
 800ac46:	d010      	beq.n	800ac6a <HAL_TIM_PWM_Init+0x9e>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	2b20      	cmp	r3, #32
 800ac4e:	d00c      	beq.n	800ac6a <HAL_TIM_PWM_Init+0x9e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	2b40      	cmp	r3, #64	; 0x40
 800ac56:	d008      	beq.n	800ac6a <HAL_TIM_PWM_Init+0x9e>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	2b60      	cmp	r3, #96	; 0x60
 800ac5e:	d004      	beq.n	800ac6a <HAL_TIM_PWM_Init+0x9e>
 800ac60:	f240 512a 	movw	r1, #1322	; 0x52a
 800ac64:	483b      	ldr	r0, [pc, #236]	; (800ad54 <HAL_TIM_PWM_Init+0x188>)
 800ac66:	f7f8 fcce 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00e      	beq.n	800ac90 <HAL_TIM_PWM_Init+0xc4>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac7a:	d009      	beq.n	800ac90 <HAL_TIM_PWM_Init+0xc4>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac84:	d004      	beq.n	800ac90 <HAL_TIM_PWM_Init+0xc4>
 800ac86:	f240 512b 	movw	r1, #1323	; 0x52b
 800ac8a:	4832      	ldr	r0, [pc, #200]	; (800ad54 <HAL_TIM_PWM_Init+0x188>)
 800ac8c:	f7f8 fcbb 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d008      	beq.n	800acaa <HAL_TIM_PWM_Init+0xde>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	699b      	ldr	r3, [r3, #24]
 800ac9c:	2b80      	cmp	r3, #128	; 0x80
 800ac9e:	d004      	beq.n	800acaa <HAL_TIM_PWM_Init+0xde>
 800aca0:	f240 512c 	movw	r1, #1324	; 0x52c
 800aca4:	482b      	ldr	r0, [pc, #172]	; (800ad54 <HAL_TIM_PWM_Init+0x188>)
 800aca6:	f7f8 fcae 	bl	8003606 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f84a 	bl	800ad58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2202      	movs	r2, #2
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4619      	mov	r1, r3
 800acd6:	4610      	mov	r0, r2
 800acd8:	f001 fce0 	bl	800c69c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2201      	movs	r2, #1
 800ad00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40010000 	.word	0x40010000
 800ad3c:	40000400 	.word	0x40000400
 800ad40:	40000800 	.word	0x40000800
 800ad44:	40000c00 	.word	0x40000c00
 800ad48:	40014000 	.word	0x40014000
 800ad4c:	40014400 	.word	0x40014400
 800ad50:	40014800 	.word	0x40014800
 800ad54:	080132b8 	.word	0x080132b8

0800ad58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a9e      	ldr	r2, [pc, #632]	; (800affc <HAL_TIM_PWM_Start_DMA+0x290>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d10b      	bne.n	800ada0 <HAL_TIM_PWM_Start_DMA+0x34>
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d06c      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b04      	cmp	r3, #4
 800ad92:	d069      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b08      	cmp	r3, #8
 800ad98:	d066      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b0c      	cmp	r3, #12
 800ad9e:	d063      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ada8:	d10b      	bne.n	800adc2 <HAL_TIM_PWM_Start_DMA+0x56>
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d05b      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b04      	cmp	r3, #4
 800adb4:	d058      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b08      	cmp	r3, #8
 800adba:	d055      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b0c      	cmp	r3, #12
 800adc0:	d052      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a8e      	ldr	r2, [pc, #568]	; (800b000 <HAL_TIM_PWM_Start_DMA+0x294>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d10b      	bne.n	800ade4 <HAL_TIM_PWM_Start_DMA+0x78>
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d04a      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	2b04      	cmp	r3, #4
 800add6:	d047      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b08      	cmp	r3, #8
 800addc:	d044      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b0c      	cmp	r3, #12
 800ade2:	d041      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a86      	ldr	r2, [pc, #536]	; (800b004 <HAL_TIM_PWM_Start_DMA+0x298>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d10b      	bne.n	800ae06 <HAL_TIM_PWM_Start_DMA+0x9a>
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d039      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	2b04      	cmp	r3, #4
 800adf8:	d036      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b08      	cmp	r3, #8
 800adfe:	d033      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b0c      	cmp	r3, #12
 800ae04:	d030      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a7f      	ldr	r2, [pc, #508]	; (800b008 <HAL_TIM_PWM_Start_DMA+0x29c>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d10b      	bne.n	800ae28 <HAL_TIM_PWM_Start_DMA+0xbc>
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d028      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b04      	cmp	r3, #4
 800ae1a:	d025      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	d022      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b0c      	cmp	r3, #12
 800ae26:	d01f      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a77      	ldr	r2, [pc, #476]	; (800b00c <HAL_TIM_PWM_Start_DMA+0x2a0>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d105      	bne.n	800ae3e <HAL_TIM_PWM_Start_DMA+0xd2>
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d017      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d014      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a73      	ldr	r2, [pc, #460]	; (800b010 <HAL_TIM_PWM_Start_DMA+0x2a4>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d102      	bne.n	800ae4e <HAL_TIM_PWM_Start_DMA+0xe2>
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00c      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4a70      	ldr	r2, [pc, #448]	; (800b014 <HAL_TIM_PWM_Start_DMA+0x2a8>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d102      	bne.n	800ae5e <HAL_TIM_PWM_Start_DMA+0xf2>
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d004      	beq.n	800ae68 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ae5e:	f240 61b3 	movw	r1, #1715	; 0x6b3
 800ae62:	486d      	ldr	r0, [pc, #436]	; (800b018 <HAL_TIM_PWM_Start_DMA+0x2ac>)
 800ae64:	f7f8 fbcf 	bl	8003606 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <HAL_TIM_PWM_Start_DMA+0x116>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	bf0c      	ite	eq
 800ae7a:	2301      	moveq	r3, #1
 800ae7c:	2300      	movne	r3, #0
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	e022      	b.n	800aec8 <HAL_TIM_PWM_Start_DMA+0x15c>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d109      	bne.n	800ae9c <HAL_TIM_PWM_Start_DMA+0x130>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b02      	cmp	r3, #2
 800ae92:	bf0c      	ite	eq
 800ae94:	2301      	moveq	r3, #1
 800ae96:	2300      	movne	r3, #0
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	e015      	b.n	800aec8 <HAL_TIM_PWM_Start_DMA+0x15c>
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b08      	cmp	r3, #8
 800aea0:	d109      	bne.n	800aeb6 <HAL_TIM_PWM_Start_DMA+0x14a>
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	bf0c      	ite	eq
 800aeae:	2301      	moveq	r3, #1
 800aeb0:	2300      	movne	r3, #0
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	e008      	b.n	800aec8 <HAL_TIM_PWM_Start_DMA+0x15c>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	bf0c      	ite	eq
 800aec2:	2301      	moveq	r3, #1
 800aec4:	2300      	movne	r3, #0
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d001      	beq.n	800aed0 <HAL_TIM_PWM_Start_DMA+0x164>
  {
    return HAL_BUSY;
 800aecc:	2302      	movs	r3, #2
 800aece:	e173      	b.n	800b1b8 <HAL_TIM_PWM_Start_DMA+0x44c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <HAL_TIM_PWM_Start_DMA+0x17e>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	2b01      	cmp	r3, #1
 800aee0:	bf0c      	ite	eq
 800aee2:	2301      	moveq	r3, #1
 800aee4:	2300      	movne	r3, #0
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	e022      	b.n	800af30 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d109      	bne.n	800af04 <HAL_TIM_PWM_Start_DMA+0x198>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	bf0c      	ite	eq
 800aefc:	2301      	moveq	r3, #1
 800aefe:	2300      	movne	r3, #0
 800af00:	b2db      	uxtb	r3, r3
 800af02:	e015      	b.n	800af30 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	2b08      	cmp	r3, #8
 800af08:	d109      	bne.n	800af1e <HAL_TIM_PWM_Start_DMA+0x1b2>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b01      	cmp	r3, #1
 800af14:	bf0c      	ite	eq
 800af16:	2301      	moveq	r3, #1
 800af18:	2300      	movne	r3, #0
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	e008      	b.n	800af30 <HAL_TIM_PWM_Start_DMA+0x1c4>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b01      	cmp	r3, #1
 800af28:	bf0c      	ite	eq
 800af2a:	2301      	moveq	r3, #1
 800af2c:	2300      	movne	r3, #0
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	d024      	beq.n	800af7e <HAL_TIM_PWM_Start_DMA+0x212>
  {
    if ((pData == NULL) && (Length > 0U))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d104      	bne.n	800af44 <HAL_TIM_PWM_Start_DMA+0x1d8>
 800af3a:	887b      	ldrh	r3, [r7, #2]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <HAL_TIM_PWM_Start_DMA+0x1d8>
    {
      return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e139      	b.n	800b1b8 <HAL_TIM_PWM_Start_DMA+0x44c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d104      	bne.n	800af54 <HAL_TIM_PWM_Start_DMA+0x1e8>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2202      	movs	r2, #2
 800af4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af52:	e016      	b.n	800af82 <HAL_TIM_PWM_Start_DMA+0x216>
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d104      	bne.n	800af64 <HAL_TIM_PWM_Start_DMA+0x1f8>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2202      	movs	r2, #2
 800af5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af62:	e00e      	b.n	800af82 <HAL_TIM_PWM_Start_DMA+0x216>
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2b08      	cmp	r3, #8
 800af68:	d104      	bne.n	800af74 <HAL_TIM_PWM_Start_DMA+0x208>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2202      	movs	r2, #2
 800af6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af72:	e006      	b.n	800af82 <HAL_TIM_PWM_Start_DMA+0x216>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2202      	movs	r2, #2
 800af78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af7c:	e001      	b.n	800af82 <HAL_TIM_PWM_Start_DMA+0x216>
    }
  }
  else
  {
    return HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	e11a      	b.n	800b1b8 <HAL_TIM_PWM_Start_DMA+0x44c>
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b0c      	cmp	r3, #12
 800af86:	f200 80c4 	bhi.w	800b112 <HAL_TIM_PWM_Start_DMA+0x3a6>
 800af8a:	a201      	add	r2, pc, #4	; (adr r2, 800af90 <HAL_TIM_PWM_Start_DMA+0x224>)
 800af8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af90:	0800afc5 	.word	0x0800afc5
 800af94:	0800b113 	.word	0x0800b113
 800af98:	0800b113 	.word	0x0800b113
 800af9c:	0800b113 	.word	0x0800b113
 800afa0:	0800b03b 	.word	0x0800b03b
 800afa4:	0800b113 	.word	0x0800b113
 800afa8:	0800b113 	.word	0x0800b113
 800afac:	0800b113 	.word	0x0800b113
 800afb0:	0800b083 	.word	0x0800b083
 800afb4:	0800b113 	.word	0x0800b113
 800afb8:	0800b113 	.word	0x0800b113
 800afbc:	0800b113 	.word	0x0800b113
 800afc0:	0800b0cb 	.word	0x0800b0cb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	4a14      	ldr	r2, [pc, #80]	; (800b01c <HAL_TIM_PWM_Start_DMA+0x2b0>)
 800afca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	4a13      	ldr	r2, [pc, #76]	; (800b020 <HAL_TIM_PWM_Start_DMA+0x2b4>)
 800afd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	4a12      	ldr	r2, [pc, #72]	; (800b024 <HAL_TIM_PWM_Start_DMA+0x2b8>)
 800afda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800afe0:	6879      	ldr	r1, [r7, #4]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3334      	adds	r3, #52	; 0x34
 800afe8:	461a      	mov	r2, r3
 800afea:	887b      	ldrh	r3, [r7, #2]
 800afec:	f7fa fbac 	bl	8005748 <HAL_DMA_Start_IT>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d018      	beq.n	800b028 <HAL_TIM_PWM_Start_DMA+0x2bc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e0de      	b.n	800b1b8 <HAL_TIM_PWM_Start_DMA+0x44c>
 800affa:	bf00      	nop
 800affc:	40010000 	.word	0x40010000
 800b000:	40000400 	.word	0x40000400
 800b004:	40000800 	.word	0x40000800
 800b008:	40000c00 	.word	0x40000c00
 800b00c:	40014000 	.word	0x40014000
 800b010:	40014400 	.word	0x40014400
 800b014:	40014800 	.word	0x40014800
 800b018:	080132b8 	.word	0x080132b8
 800b01c:	0800c58b 	.word	0x0800c58b
 800b020:	0800c633 	.word	0x0800c633
 800b024:	0800c4f9 	.word	0x0800c4f9
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b036:	60da      	str	r2, [r3, #12]
      break;
 800b038:	e06e      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03e:	4a60      	ldr	r2, [pc, #384]	; (800b1c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b040:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b046:	4a5f      	ldr	r2, [pc, #380]	; (800b1c4 <HAL_TIM_PWM_Start_DMA+0x458>)
 800b048:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04e:	4a5e      	ldr	r2, [pc, #376]	; (800b1c8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b050:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3338      	adds	r3, #56	; 0x38
 800b05e:	461a      	mov	r2, r3
 800b060:	887b      	ldrh	r3, [r7, #2]
 800b062:	f7fa fb71 	bl	8005748 <HAL_DMA_Start_IT>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <HAL_TIM_PWM_Start_DMA+0x304>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e0a3      	b.n	800b1b8 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b07e:	60da      	str	r2, [r3, #12]
      break;
 800b080:	e04a      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	4a4e      	ldr	r2, [pc, #312]	; (800b1c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b088:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08e:	4a4d      	ldr	r2, [pc, #308]	; (800b1c4 <HAL_TIM_PWM_Start_DMA+0x458>)
 800b090:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	4a4c      	ldr	r2, [pc, #304]	; (800b1c8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b098:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b09e:	6879      	ldr	r1, [r7, #4]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	333c      	adds	r3, #60	; 0x3c
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	887b      	ldrh	r3, [r7, #2]
 800b0aa:	f7fa fb4d 	bl	8005748 <HAL_DMA_Start_IT>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <HAL_TIM_PWM_Start_DMA+0x34c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e07f      	b.n	800b1b8 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0c6:	60da      	str	r2, [r3, #12]
      break;
 800b0c8:	e026      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ce:	4a3c      	ldr	r2, [pc, #240]	; (800b1c0 <HAL_TIM_PWM_Start_DMA+0x454>)
 800b0d0:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d6:	4a3b      	ldr	r2, [pc, #236]	; (800b1c4 <HAL_TIM_PWM_Start_DMA+0x458>)
 800b0d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0de:	4a3a      	ldr	r2, [pc, #232]	; (800b1c8 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800b0e0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b0e6:	6879      	ldr	r1, [r7, #4]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3340      	adds	r3, #64	; 0x40
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	887b      	ldrh	r3, [r7, #2]
 800b0f2:	f7fa fb29 	bl	8005748 <HAL_DMA_Start_IT>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <HAL_TIM_PWM_Start_DMA+0x394>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e05b      	b.n	800b1b8 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68da      	ldr	r2, [r3, #12]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b10e:	60da      	str	r2, [r3, #12]
      break;
 800b110:	e002      	b.n	800b118 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    default:
      status = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	75fb      	strb	r3, [r7, #23]
      break;
 800b116:	bf00      	nop
  }

  if (status == HAL_OK)
 800b118:	7dfb      	ldrb	r3, [r7, #23]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d14b      	bne.n	800b1b6 <HAL_TIM_PWM_Start_DMA+0x44a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2201      	movs	r2, #1
 800b124:	68b9      	ldr	r1, [r7, #8]
 800b126:	4618      	mov	r0, r3
 800b128:	f001 ff06 	bl	800cf38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a26      	ldr	r2, [pc, #152]	; (800b1cc <HAL_TIM_PWM_Start_DMA+0x460>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d107      	bne.n	800b146 <HAL_TIM_PWM_Start_DMA+0x3da>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a20      	ldr	r2, [pc, #128]	; (800b1cc <HAL_TIM_PWM_Start_DMA+0x460>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d018      	beq.n	800b182 <HAL_TIM_PWM_Start_DMA+0x416>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b158:	d013      	beq.n	800b182 <HAL_TIM_PWM_Start_DMA+0x416>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a1c      	ldr	r2, [pc, #112]	; (800b1d0 <HAL_TIM_PWM_Start_DMA+0x464>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d00e      	beq.n	800b182 <HAL_TIM_PWM_Start_DMA+0x416>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a1a      	ldr	r2, [pc, #104]	; (800b1d4 <HAL_TIM_PWM_Start_DMA+0x468>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d009      	beq.n	800b182 <HAL_TIM_PWM_Start_DMA+0x416>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a19      	ldr	r2, [pc, #100]	; (800b1d8 <HAL_TIM_PWM_Start_DMA+0x46c>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d004      	beq.n	800b182 <HAL_TIM_PWM_Start_DMA+0x416>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a17      	ldr	r2, [pc, #92]	; (800b1dc <HAL_TIM_PWM_Start_DMA+0x470>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d111      	bne.n	800b1a6 <HAL_TIM_PWM_Start_DMA+0x43a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	689b      	ldr	r3, [r3, #8]
 800b188:	f003 0307 	and.w	r3, r3, #7
 800b18c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b06      	cmp	r3, #6
 800b192:	d010      	beq.n	800b1b6 <HAL_TIM_PWM_Start_DMA+0x44a>
      {
        __HAL_TIM_ENABLE(htim);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f042 0201 	orr.w	r2, r2, #1
 800b1a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1a4:	e007      	b.n	800b1b6 <HAL_TIM_PWM_Start_DMA+0x44a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f042 0201 	orr.w	r2, r2, #1
 800b1b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	0800c58b 	.word	0x0800c58b
 800b1c4:	0800c633 	.word	0x0800c633
 800b1c8:	0800c4f9 	.word	0x0800c4f9
 800b1cc:	40010000 	.word	0x40010000
 800b1d0:	40000400 	.word	0x40000400
 800b1d4:	40000800 	.word	0x40000800
 800b1d8:	40000c00 	.word	0x40000c00
 800b1dc:	40014000 	.word	0x40014000

0800b1e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a97      	ldr	r2, [pc, #604]	; (800b450 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d10b      	bne.n	800b210 <HAL_TIM_PWM_Stop_DMA+0x30>
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d06c      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b04      	cmp	r3, #4
 800b202:	d069      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	2b08      	cmp	r3, #8
 800b208:	d066      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	2b0c      	cmp	r3, #12
 800b20e:	d063      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b218:	d10b      	bne.n	800b232 <HAL_TIM_PWM_Stop_DMA+0x52>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d05b      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	2b04      	cmp	r3, #4
 800b224:	d058      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b08      	cmp	r3, #8
 800b22a:	d055      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b0c      	cmp	r3, #12
 800b230:	d052      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a87      	ldr	r2, [pc, #540]	; (800b454 <HAL_TIM_PWM_Stop_DMA+0x274>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d10b      	bne.n	800b254 <HAL_TIM_PWM_Stop_DMA+0x74>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d04a      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b04      	cmp	r3, #4
 800b246:	d047      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	2b08      	cmp	r3, #8
 800b24c:	d044      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b0c      	cmp	r3, #12
 800b252:	d041      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a7f      	ldr	r2, [pc, #508]	; (800b458 <HAL_TIM_PWM_Stop_DMA+0x278>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d10b      	bne.n	800b276 <HAL_TIM_PWM_Stop_DMA+0x96>
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d039      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	2b04      	cmp	r3, #4
 800b268:	d036      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b08      	cmp	r3, #8
 800b26e:	d033      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b0c      	cmp	r3, #12
 800b274:	d030      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a78      	ldr	r2, [pc, #480]	; (800b45c <HAL_TIM_PWM_Stop_DMA+0x27c>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d10b      	bne.n	800b298 <HAL_TIM_PWM_Stop_DMA+0xb8>
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d028      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b04      	cmp	r3, #4
 800b28a:	d025      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	2b08      	cmp	r3, #8
 800b290:	d022      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	2b0c      	cmp	r3, #12
 800b296:	d01f      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a70      	ldr	r2, [pc, #448]	; (800b460 <HAL_TIM_PWM_Stop_DMA+0x280>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d105      	bne.n	800b2ae <HAL_TIM_PWM_Stop_DMA+0xce>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d017      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b04      	cmp	r3, #4
 800b2ac:	d014      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	4a6c      	ldr	r2, [pc, #432]	; (800b464 <HAL_TIM_PWM_Stop_DMA+0x284>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d102      	bne.n	800b2be <HAL_TIM_PWM_Stop_DMA+0xde>
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00c      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a69      	ldr	r2, [pc, #420]	; (800b468 <HAL_TIM_PWM_Stop_DMA+0x288>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d102      	bne.n	800b2ce <HAL_TIM_PWM_Stop_DMA+0xee>
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d004      	beq.n	800b2d8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800b2ce:	f240 7154 	movw	r1, #1876	; 0x754
 800b2d2:	4866      	ldr	r0, [pc, #408]	; (800b46c <HAL_TIM_PWM_Stop_DMA+0x28c>)
 800b2d4:	f7f8 f997 	bl	8003606 <assert_failed>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	2b0c      	cmp	r3, #12
 800b2dc:	d854      	bhi.n	800b388 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800b2de:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <HAL_TIM_PWM_Stop_DMA+0x104>)
 800b2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e4:	0800b319 	.word	0x0800b319
 800b2e8:	0800b389 	.word	0x0800b389
 800b2ec:	0800b389 	.word	0x0800b389
 800b2f0:	0800b389 	.word	0x0800b389
 800b2f4:	0800b335 	.word	0x0800b335
 800b2f8:	0800b389 	.word	0x0800b389
 800b2fc:	0800b389 	.word	0x0800b389
 800b300:	0800b389 	.word	0x0800b389
 800b304:	0800b351 	.word	0x0800b351
 800b308:	0800b389 	.word	0x0800b389
 800b30c:	0800b389 	.word	0x0800b389
 800b310:	0800b389 	.word	0x0800b389
 800b314:	0800b36d 	.word	0x0800b36d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	68da      	ldr	r2, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b326:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fa fa71 	bl	8005814 <HAL_DMA_Abort_IT>
      break;
 800b332:	e02c      	b.n	800b38e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68da      	ldr	r2, [r3, #12]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b342:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b348:	4618      	mov	r0, r3
 800b34a:	f7fa fa63 	bl	8005814 <HAL_DMA_Abort_IT>
      break;
 800b34e:	e01e      	b.n	800b38e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68da      	ldr	r2, [r3, #12]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b35e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b364:	4618      	mov	r0, r3
 800b366:	f7fa fa55 	bl	8005814 <HAL_DMA_Abort_IT>
      break;
 800b36a:	e010      	b.n	800b38e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68da      	ldr	r2, [r3, #12]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b37a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b380:	4618      	mov	r0, r3
 800b382:	f7fa fa47 	bl	8005814 <HAL_DMA_Abort_IT>
      break;
 800b386:	e002      	b.n	800b38e <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    default:
      status = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	73fb      	strb	r3, [r7, #15]
      break;
 800b38c:	bf00      	nop
  }

  if (status == HAL_OK)
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d157      	bne.n	800b444 <HAL_TIM_PWM_Stop_DMA+0x264>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2200      	movs	r2, #0
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f001 fdcb 	bl	800cf38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a2a      	ldr	r2, [pc, #168]	; (800b450 <HAL_TIM_PWM_Stop_DMA+0x270>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d117      	bne.n	800b3dc <HAL_TIM_PWM_Stop_DMA+0x1fc>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6a1a      	ldr	r2, [r3, #32]
 800b3b2:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10f      	bne.n	800b3dc <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	6a1a      	ldr	r2, [r3, #32]
 800b3c2:	f240 4344 	movw	r3, #1092	; 0x444
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d107      	bne.n	800b3dc <HAL_TIM_PWM_Stop_DMA+0x1fc>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6a1a      	ldr	r2, [r3, #32]
 800b3e2:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d10f      	bne.n	800b40c <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6a1a      	ldr	r2, [r3, #32]
 800b3f2:	f240 4344 	movw	r3, #1092	; 0x444
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d107      	bne.n	800b40c <HAL_TIM_PWM_Stop_DMA+0x22c>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f022 0201 	bic.w	r2, r2, #1
 800b40a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d104      	bne.n	800b41c <HAL_TIM_PWM_Stop_DMA+0x23c>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b41a:	e013      	b.n	800b444 <HAL_TIM_PWM_Stop_DMA+0x264>
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2b04      	cmp	r3, #4
 800b420:	d104      	bne.n	800b42c <HAL_TIM_PWM_Stop_DMA+0x24c>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b42a:	e00b      	b.n	800b444 <HAL_TIM_PWM_Stop_DMA+0x264>
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	2b08      	cmp	r3, #8
 800b430:	d104      	bne.n	800b43c <HAL_TIM_PWM_Stop_DMA+0x25c>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b43a:	e003      	b.n	800b444 <HAL_TIM_PWM_Stop_DMA+0x264>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800b444:	7bfb      	ldrb	r3, [r7, #15]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	40010000 	.word	0x40010000
 800b454:	40000400 	.word	0x40000400
 800b458:	40000800 	.word	0x40000800
 800b45c:	40000c00 	.word	0x40000c00
 800b460:	40014000 	.word	0x40014000
 800b464:	40014400 	.word	0x40014400
 800b468:	40014800 	.word	0x40014800
 800b46c:	080132b8 	.word	0x080132b8

0800b470 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b47e:	2301      	movs	r3, #1
 800b480:	e0a7      	b.n	800b5d2 <HAL_TIM_IC_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a55      	ldr	r2, [pc, #340]	; (800b5dc <HAL_TIM_IC_Init+0x16c>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d027      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b494:	d022      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a51      	ldr	r2, [pc, #324]	; (800b5e0 <HAL_TIM_IC_Init+0x170>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d01d      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a4f      	ldr	r2, [pc, #316]	; (800b5e4 <HAL_TIM_IC_Init+0x174>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d018      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a4e      	ldr	r2, [pc, #312]	; (800b5e8 <HAL_TIM_IC_Init+0x178>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d013      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a4c      	ldr	r2, [pc, #304]	; (800b5ec <HAL_TIM_IC_Init+0x17c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d00e      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a4b      	ldr	r2, [pc, #300]	; (800b5f0 <HAL_TIM_IC_Init+0x180>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d009      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a49      	ldr	r2, [pc, #292]	; (800b5f4 <HAL_TIM_IC_Init+0x184>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d004      	beq.n	800b4dc <HAL_TIM_IC_Init+0x6c>
 800b4d2:	f240 71bf 	movw	r1, #1983	; 0x7bf
 800b4d6:	4848      	ldr	r0, [pc, #288]	; (800b5f8 <HAL_TIM_IC_Init+0x188>)
 800b4d8:	f7f8 f895 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d014      	beq.n	800b50e <HAL_TIM_IC_Init+0x9e>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2b10      	cmp	r3, #16
 800b4ea:	d010      	beq.n	800b50e <HAL_TIM_IC_Init+0x9e>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	2b20      	cmp	r3, #32
 800b4f2:	d00c      	beq.n	800b50e <HAL_TIM_IC_Init+0x9e>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	2b40      	cmp	r3, #64	; 0x40
 800b4fa:	d008      	beq.n	800b50e <HAL_TIM_IC_Init+0x9e>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	2b60      	cmp	r3, #96	; 0x60
 800b502:	d004      	beq.n	800b50e <HAL_TIM_IC_Init+0x9e>
 800b504:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 800b508:	483b      	ldr	r0, [pc, #236]	; (800b5f8 <HAL_TIM_IC_Init+0x188>)
 800b50a:	f7f8 f87c 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d00e      	beq.n	800b534 <HAL_TIM_IC_Init+0xc4>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	691b      	ldr	r3, [r3, #16]
 800b51a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b51e:	d009      	beq.n	800b534 <HAL_TIM_IC_Init+0xc4>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b528:	d004      	beq.n	800b534 <HAL_TIM_IC_Init+0xc4>
 800b52a:	f240 71c1 	movw	r1, #1985	; 0x7c1
 800b52e:	4832      	ldr	r0, [pc, #200]	; (800b5f8 <HAL_TIM_IC_Init+0x188>)
 800b530:	f7f8 f869 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d008      	beq.n	800b54e <HAL_TIM_IC_Init+0xde>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	699b      	ldr	r3, [r3, #24]
 800b540:	2b80      	cmp	r3, #128	; 0x80
 800b542:	d004      	beq.n	800b54e <HAL_TIM_IC_Init+0xde>
 800b544:	f240 71c2 	movw	r1, #1986	; 0x7c2
 800b548:	482b      	ldr	r0, [pc, #172]	; (800b5f8 <HAL_TIM_IC_Init+0x188>)
 800b54a:	f7f8 f85c 	bl	8003606 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <HAL_TIM_IC_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f84a 	bl	800b5fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3304      	adds	r3, #4
 800b578:	4619      	mov	r1, r3
 800b57a:	4610      	mov	r0, r2
 800b57c:	f001 f88e 	bl	800c69c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	40010000 	.word	0x40010000
 800b5e0:	40000400 	.word	0x40000400
 800b5e4:	40000800 	.word	0x40000800
 800b5e8:	40000c00 	.word	0x40000c00
 800b5ec:	40014000 	.word	0x40014000
 800b5f0:	40014400 	.word	0x40014400
 800b5f4:	40014800 	.word	0x40014800
 800b5f8:	080132b8 	.word	0x080132b8

0800b5fc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b604:	bf00      	nop
 800b606:	370c      	adds	r7, #12
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b02      	cmp	r3, #2
 800b624:	d122      	bne.n	800b66c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b02      	cmp	r3, #2
 800b632:	d11b      	bne.n	800b66c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f06f 0202 	mvn.w	r2, #2
 800b63c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 ff28 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800b658:	e005      	b.n	800b666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 ff1a 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7f7 fb75 	bl	8002d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	f003 0304 	and.w	r3, r3, #4
 800b676:	2b04      	cmp	r3, #4
 800b678:	d122      	bne.n	800b6c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b04      	cmp	r3, #4
 800b686:	d11b      	bne.n	800b6c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f06f 0204 	mvn.w	r2, #4
 800b690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2202      	movs	r2, #2
 800b696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fefe 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800b6ac:	e005      	b.n	800b6ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fef0 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7f7 fb4b 	bl	8002d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	f003 0308 	and.w	r3, r3, #8
 800b6ca:	2b08      	cmp	r3, #8
 800b6cc:	d122      	bne.n	800b714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	2b08      	cmp	r3, #8
 800b6da:	d11b      	bne.n	800b714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f06f 0208 	mvn.w	r2, #8
 800b6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2204      	movs	r2, #4
 800b6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	f003 0303 	and.w	r3, r3, #3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fed4 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800b700:	e005      	b.n	800b70e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fec6 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7f7 fb21 	bl	8002d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	f003 0310 	and.w	r3, r3, #16
 800b71e:	2b10      	cmp	r3, #16
 800b720:	d122      	bne.n	800b768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b10      	cmp	r3, #16
 800b72e:	d11b      	bne.n	800b768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f06f 0210 	mvn.w	r2, #16
 800b738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2208      	movs	r2, #8
 800b73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 feaa 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800b754:	e005      	b.n	800b762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fe9c 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7f7 faf7 	bl	8002d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b01      	cmp	r3, #1
 800b774:	d10e      	bne.n	800b794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b01      	cmp	r3, #1
 800b782:	d107      	bne.n	800b794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f06f 0201 	mvn.w	r2, #1
 800b78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7f7 fab4 	bl	8002cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79e:	2b80      	cmp	r3, #128	; 0x80
 800b7a0:	d10e      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ac:	2b80      	cmp	r3, #128	; 0x80
 800b7ae:	d107      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f001 fdb6 	bl	800d32c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ca:	2b40      	cmp	r3, #64	; 0x40
 800b7cc:	d10e      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d8:	2b40      	cmp	r3, #64	; 0x40
 800b7da:	d107      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fe72 	bl	800c4d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d10e      	bne.n	800b818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0320 	and.w	r3, r3, #32
 800b804:	2b20      	cmp	r3, #32
 800b806:	d107      	bne.n	800b818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0220 	mvn.w	r2, #32
 800b810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f001 fd80 	bl	800d318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a8a      	ldr	r2, [pc, #552]	; (800ba60 <HAL_TIM_IC_ConfigChannel+0x240>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d027      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b842:	d022      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a86      	ldr	r2, [pc, #536]	; (800ba64 <HAL_TIM_IC_ConfigChannel+0x244>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d01d      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a85      	ldr	r2, [pc, #532]	; (800ba68 <HAL_TIM_IC_ConfigChannel+0x248>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d018      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a83      	ldr	r2, [pc, #524]	; (800ba6c <HAL_TIM_IC_ConfigChannel+0x24c>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d013      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a82      	ldr	r2, [pc, #520]	; (800ba70 <HAL_TIM_IC_ConfigChannel+0x250>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d00e      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a80      	ldr	r2, [pc, #512]	; (800ba74 <HAL_TIM_IC_ConfigChannel+0x254>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d009      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a7f      	ldr	r2, [pc, #508]	; (800ba78 <HAL_TIM_IC_ConfigChannel+0x258>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d004      	beq.n	800b88a <HAL_TIM_IC_ConfigChannel+0x6a>
 800b880:	f241 0112 	movw	r1, #4114	; 0x1012
 800b884:	487d      	ldr	r0, [pc, #500]	; (800ba7c <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b886:	f7f7 febe 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00c      	beq.n	800b8ac <HAL_TIM_IC_ConfigChannel+0x8c>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2b02      	cmp	r3, #2
 800b898:	d008      	beq.n	800b8ac <HAL_TIM_IC_ConfigChannel+0x8c>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b0a      	cmp	r3, #10
 800b8a0:	d004      	beq.n	800b8ac <HAL_TIM_IC_ConfigChannel+0x8c>
 800b8a2:	f241 0113 	movw	r1, #4115	; 0x1013
 800b8a6:	4875      	ldr	r0, [pc, #468]	; (800ba7c <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b8a8:	f7f7 fead 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d00c      	beq.n	800b8ce <HAL_TIM_IC_ConfigChannel+0xae>
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d008      	beq.n	800b8ce <HAL_TIM_IC_ConfigChannel+0xae>
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d004      	beq.n	800b8ce <HAL_TIM_IC_ConfigChannel+0xae>
 800b8c4:	f241 0114 	movw	r1, #4116	; 0x1014
 800b8c8:	486c      	ldr	r0, [pc, #432]	; (800ba7c <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b8ca:	f7f7 fe9c 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d010      	beq.n	800b8f8 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	d00c      	beq.n	800b8f8 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	2b08      	cmp	r3, #8
 800b8e4:	d008      	beq.n	800b8f8 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	2b0c      	cmp	r3, #12
 800b8ec:	d004      	beq.n	800b8f8 <HAL_TIM_IC_ConfigChannel+0xd8>
 800b8ee:	f241 0115 	movw	r1, #4117	; 0x1015
 800b8f2:	4862      	ldr	r0, [pc, #392]	; (800ba7c <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b8f4:	f7f7 fe87 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	2b0f      	cmp	r3, #15
 800b8fe:	d904      	bls.n	800b90a <HAL_TIM_IC_ConfigChannel+0xea>
 800b900:	f241 0116 	movw	r1, #4118	; 0x1016
 800b904:	485d      	ldr	r0, [pc, #372]	; (800ba7c <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b906:	f7f7 fe7e 	bl	8003606 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b910:	2b01      	cmp	r3, #1
 800b912:	d101      	bne.n	800b918 <HAL_TIM_IC_ConfigChannel+0xf8>
 800b914:	2302      	movs	r3, #2
 800b916:	e0f8      	b.n	800bb0a <HAL_TIM_IC_ConfigChannel+0x2ea>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d11b      	bne.n	800b95e <HAL_TIM_IC_ConfigChannel+0x13e>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6818      	ldr	r0, [r3, #0]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	6819      	ldr	r1, [r3, #0]
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	f001 f947 	bl	800cbc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	699a      	ldr	r2, [r3, #24]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f022 020c 	bic.w	r2, r2, #12
 800b948:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6999      	ldr	r1, [r3, #24]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	689a      	ldr	r2, [r3, #8]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	430a      	orrs	r2, r1
 800b95a:	619a      	str	r2, [r3, #24]
 800b95c:	e0d0      	b.n	800bb00 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b04      	cmp	r3, #4
 800b962:	d13f      	bne.n	800b9e4 <HAL_TIM_IC_ConfigChannel+0x1c4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a3d      	ldr	r2, [pc, #244]	; (800ba60 <HAL_TIM_IC_ConfigChannel+0x240>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d01d      	beq.n	800b9aa <HAL_TIM_IC_ConfigChannel+0x18a>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b976:	d018      	beq.n	800b9aa <HAL_TIM_IC_ConfigChannel+0x18a>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a39      	ldr	r2, [pc, #228]	; (800ba64 <HAL_TIM_IC_ConfigChannel+0x244>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d013      	beq.n	800b9aa <HAL_TIM_IC_ConfigChannel+0x18a>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a38      	ldr	r2, [pc, #224]	; (800ba68 <HAL_TIM_IC_ConfigChannel+0x248>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d00e      	beq.n	800b9aa <HAL_TIM_IC_ConfigChannel+0x18a>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a36      	ldr	r2, [pc, #216]	; (800ba6c <HAL_TIM_IC_ConfigChannel+0x24c>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d009      	beq.n	800b9aa <HAL_TIM_IC_ConfigChannel+0x18a>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a35      	ldr	r2, [pc, #212]	; (800ba70 <HAL_TIM_IC_ConfigChannel+0x250>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d004      	beq.n	800b9aa <HAL_TIM_IC_ConfigChannel+0x18a>
 800b9a0:	f241 012c 	movw	r1, #4140	; 0x102c
 800b9a4:	4835      	ldr	r0, [pc, #212]	; (800ba7c <HAL_TIM_IC_ConfigChannel+0x25c>)
 800b9a6:	f7f7 fe2e 	bl	8003606 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6818      	ldr	r0, [r3, #0]
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	6819      	ldr	r1, [r3, #0]
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f001 f99c 	bl	800ccf6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	699a      	ldr	r2, [r3, #24]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b9cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6999      	ldr	r1, [r3, #24]
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	021a      	lsls	r2, r3, #8
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	619a      	str	r2, [r3, #24]
 800b9e2:	e08d      	b.n	800bb00 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b08      	cmp	r3, #8
 800b9e8:	d14a      	bne.n	800ba80 <HAL_TIM_IC_ConfigChannel+0x260>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a1c      	ldr	r2, [pc, #112]	; (800ba60 <HAL_TIM_IC_ConfigChannel+0x240>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d018      	beq.n	800ba26 <HAL_TIM_IC_ConfigChannel+0x206>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9fc:	d013      	beq.n	800ba26 <HAL_TIM_IC_ConfigChannel+0x206>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a18      	ldr	r2, [pc, #96]	; (800ba64 <HAL_TIM_IC_ConfigChannel+0x244>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d00e      	beq.n	800ba26 <HAL_TIM_IC_ConfigChannel+0x206>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a16      	ldr	r2, [pc, #88]	; (800ba68 <HAL_TIM_IC_ConfigChannel+0x248>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d009      	beq.n	800ba26 <HAL_TIM_IC_ConfigChannel+0x206>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a15      	ldr	r2, [pc, #84]	; (800ba6c <HAL_TIM_IC_ConfigChannel+0x24c>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d004      	beq.n	800ba26 <HAL_TIM_IC_ConfigChannel+0x206>
 800ba1c:	f241 013c 	movw	r1, #4156	; 0x103c
 800ba20:	4816      	ldr	r0, [pc, #88]	; (800ba7c <HAL_TIM_IC_ConfigChannel+0x25c>)
 800ba22:	f7f7 fdf0 	bl	8003606 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	6819      	ldr	r1, [r3, #0]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	f001 f9cb 	bl	800cdd0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	69da      	ldr	r2, [r3, #28]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 020c 	bic.w	r2, r2, #12
 800ba48:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69d9      	ldr	r1, [r3, #28]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	430a      	orrs	r2, r1
 800ba5a:	61da      	str	r2, [r3, #28]
 800ba5c:	e050      	b.n	800bb00 <HAL_TIM_IC_ConfigChannel+0x2e0>
 800ba5e:	bf00      	nop
 800ba60:	40010000 	.word	0x40010000
 800ba64:	40000400 	.word	0x40000400
 800ba68:	40000800 	.word	0x40000800
 800ba6c:	40000c00 	.word	0x40000c00
 800ba70:	40014000 	.word	0x40014000
 800ba74:	40014400 	.word	0x40014400
 800ba78:	40014800 	.word	0x40014800
 800ba7c:	080132b8 	.word	0x080132b8
  }
  else if (Channel == TIM_CHANNEL_4)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b0c      	cmp	r3, #12
 800ba84:	d13a      	bne.n	800bafc <HAL_TIM_IC_ConfigChannel+0x2dc>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a22      	ldr	r2, [pc, #136]	; (800bb14 <HAL_TIM_IC_ConfigChannel+0x2f4>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d018      	beq.n	800bac2 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba98:	d013      	beq.n	800bac2 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a1e      	ldr	r2, [pc, #120]	; (800bb18 <HAL_TIM_IC_ConfigChannel+0x2f8>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d00e      	beq.n	800bac2 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a1c      	ldr	r2, [pc, #112]	; (800bb1c <HAL_TIM_IC_ConfigChannel+0x2fc>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d009      	beq.n	800bac2 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a1b      	ldr	r2, [pc, #108]	; (800bb20 <HAL_TIM_IC_ConfigChannel+0x300>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d004      	beq.n	800bac2 <HAL_TIM_IC_ConfigChannel+0x2a2>
 800bab8:	f241 014c 	movw	r1, #4172	; 0x104c
 800babc:	4819      	ldr	r0, [pc, #100]	; (800bb24 <HAL_TIM_IC_ConfigChannel+0x304>)
 800babe:	f7f7 fda2 	bl	8003606 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	6819      	ldr	r1, [r3, #0]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f001 f9b9 	bl	800ce48 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	69da      	ldr	r2, [r3, #28]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bae4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	69d9      	ldr	r1, [r3, #28]
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	021a      	lsls	r2, r3, #8
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	430a      	orrs	r2, r1
 800baf8:	61da      	str	r2, [r3, #28]
 800bafa:	e001      	b.n	800bb00 <HAL_TIM_IC_ConfigChannel+0x2e0>
  }
  else
  {
    status = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	40010000 	.word	0x40010000
 800bb18:	40000400 	.word	0x40000400
 800bb1c:	40000800 	.word	0x40000800
 800bb20:	40000c00 	.word	0x40000c00
 800bb24:	080132b8 	.word	0x080132b8

0800bb28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d010      	beq.n	800bb60 <HAL_TIM_PWM_ConfigChannel+0x38>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b04      	cmp	r3, #4
 800bb42:	d00d      	beq.n	800bb60 <HAL_TIM_PWM_ConfigChannel+0x38>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b08      	cmp	r3, #8
 800bb48:	d00a      	beq.n	800bb60 <HAL_TIM_PWM_ConfigChannel+0x38>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b0c      	cmp	r3, #12
 800bb4e:	d007      	beq.n	800bb60 <HAL_TIM_PWM_ConfigChannel+0x38>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b3c      	cmp	r3, #60	; 0x3c
 800bb54:	d004      	beq.n	800bb60 <HAL_TIM_PWM_ConfigChannel+0x38>
 800bb56:	f241 0177 	movw	r1, #4215	; 0x1077
 800bb5a:	4893      	ldr	r0, [pc, #588]	; (800bda8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bb5c:	f7f7 fd53 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b60      	cmp	r3, #96	; 0x60
 800bb66:	d008      	beq.n	800bb7a <HAL_TIM_PWM_ConfigChannel+0x52>
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b70      	cmp	r3, #112	; 0x70
 800bb6e:	d004      	beq.n	800bb7a <HAL_TIM_PWM_ConfigChannel+0x52>
 800bb70:	f241 0178 	movw	r1, #4216	; 0x1078
 800bb74:	488c      	ldr	r0, [pc, #560]	; (800bda8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bb76:	f7f7 fd46 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d008      	beq.n	800bb94 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	d004      	beq.n	800bb94 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800bb8a:	f241 0179 	movw	r1, #4217	; 0x1079
 800bb8e:	4886      	ldr	r0, [pc, #536]	; (800bda8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bb90:	f7f7 fd39 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d008      	beq.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x86>
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d004      	beq.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x86>
 800bba4:	f241 017a 	movw	r1, #4218	; 0x107a
 800bba8:	487f      	ldr	r0, [pc, #508]	; (800bda8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bbaa:	f7f7 fd2c 	bl	8003606 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d101      	bne.n	800bbbc <HAL_TIM_PWM_ConfigChannel+0x94>
 800bbb8:	2302      	movs	r3, #2
 800bbba:	e14c      	b.n	800be56 <HAL_TIM_PWM_ConfigChannel+0x32e>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b0c      	cmp	r3, #12
 800bbc8:	f200 813d 	bhi.w	800be46 <HAL_TIM_PWM_ConfigChannel+0x31e>
 800bbcc:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bc09 	.word	0x0800bc09
 800bbd8:	0800be47 	.word	0x0800be47
 800bbdc:	0800be47 	.word	0x0800be47
 800bbe0:	0800be47 	.word	0x0800be47
 800bbe4:	0800bca3 	.word	0x0800bca3
 800bbe8:	0800be47 	.word	0x0800be47
 800bbec:	0800be47 	.word	0x0800be47
 800bbf0:	0800be47 	.word	0x0800be47
 800bbf4:	0800bd2b 	.word	0x0800bd2b
 800bbf8:	0800be47 	.word	0x0800be47
 800bbfc:	0800be47 	.word	0x0800be47
 800bc00:	0800be47 	.word	0x0800be47
 800bc04:	0800bdc9 	.word	0x0800bdc9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a67      	ldr	r2, [pc, #412]	; (800bdac <HAL_TIM_PWM_ConfigChannel+0x284>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d027      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc1a:	d022      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a63      	ldr	r2, [pc, #396]	; (800bdb0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d01d      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a62      	ldr	r2, [pc, #392]	; (800bdb4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d018      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a60      	ldr	r2, [pc, #384]	; (800bdb8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d013      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a5f      	ldr	r2, [pc, #380]	; (800bdbc <HAL_TIM_PWM_ConfigChannel+0x294>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d00e      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a5d      	ldr	r2, [pc, #372]	; (800bdc0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d009      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a5c      	ldr	r2, [pc, #368]	; (800bdc4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d004      	beq.n	800bc62 <HAL_TIM_PWM_ConfigChannel+0x13a>
 800bc58:	f241 0184 	movw	r1, #4228	; 0x1084
 800bc5c:	4852      	ldr	r0, [pc, #328]	; (800bda8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bc5e:	f7f7 fcd2 	bl	8003606 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68b9      	ldr	r1, [r7, #8]
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 fd97 	bl	800c79c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	699a      	ldr	r2, [r3, #24]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f042 0208 	orr.w	r2, r2, #8
 800bc7c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	699a      	ldr	r2, [r3, #24]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f022 0204 	bic.w	r2, r2, #4
 800bc8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6999      	ldr	r1, [r3, #24]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	691a      	ldr	r2, [r3, #16]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	430a      	orrs	r2, r1
 800bc9e:	619a      	str	r2, [r3, #24]
      break;
 800bca0:	e0d4      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a41      	ldr	r2, [pc, #260]	; (800bdac <HAL_TIM_PWM_ConfigChannel+0x284>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d01d      	beq.n	800bce8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcb4:	d018      	beq.n	800bce8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a3d      	ldr	r2, [pc, #244]	; (800bdb0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d013      	beq.n	800bce8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a3b      	ldr	r2, [pc, #236]	; (800bdb4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d00e      	beq.n	800bce8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a3a      	ldr	r2, [pc, #232]	; (800bdb8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d009      	beq.n	800bce8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a38      	ldr	r2, [pc, #224]	; (800bdbc <HAL_TIM_PWM_ConfigChannel+0x294>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800bcde:	f241 0195 	movw	r1, #4245	; 0x1095
 800bce2:	4831      	ldr	r0, [pc, #196]	; (800bda8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bce4:	f7f7 fc8f 	bl	8003606 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68b9      	ldr	r1, [r7, #8]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 fde4 	bl	800c8bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	699a      	ldr	r2, [r3, #24]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	699a      	ldr	r2, [r3, #24]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	6999      	ldr	r1, [r3, #24]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	021a      	lsls	r2, r3, #8
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	430a      	orrs	r2, r1
 800bd26:	619a      	str	r2, [r3, #24]
      break;
 800bd28:	e090      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a1f      	ldr	r2, [pc, #124]	; (800bdac <HAL_TIM_PWM_ConfigChannel+0x284>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d018      	beq.n	800bd66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd3c:	d013      	beq.n	800bd66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a1b      	ldr	r2, [pc, #108]	; (800bdb0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d00e      	beq.n	800bd66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a19      	ldr	r2, [pc, #100]	; (800bdb4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d009      	beq.n	800bd66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a18      	ldr	r2, [pc, #96]	; (800bdb8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d004      	beq.n	800bd66 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800bd5c:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800bd60:	4811      	ldr	r0, [pc, #68]	; (800bda8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800bd62:	f7f7 fc50 	bl	8003606 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68b9      	ldr	r1, [r7, #8]
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 fe39 	bl	800c9e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	69da      	ldr	r2, [r3, #28]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f042 0208 	orr.w	r2, r2, #8
 800bd80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	69da      	ldr	r2, [r3, #28]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 0204 	bic.w	r2, r2, #4
 800bd90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	69d9      	ldr	r1, [r3, #28]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	691a      	ldr	r2, [r3, #16]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	61da      	str	r2, [r3, #28]
      break;
 800bda4:	e052      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x324>
 800bda6:	bf00      	nop
 800bda8:	080132b8 	.word	0x080132b8
 800bdac:	40010000 	.word	0x40010000
 800bdb0:	40000400 	.word	0x40000400
 800bdb4:	40000800 	.word	0x40000800
 800bdb8:	40000c00 	.word	0x40000c00
 800bdbc:	40014000 	.word	0x40014000
 800bdc0:	40014400 	.word	0x40014400
 800bdc4:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a24      	ldr	r2, [pc, #144]	; (800be60 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d018      	beq.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdda:	d013      	beq.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a20      	ldr	r2, [pc, #128]	; (800be64 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d00e      	beq.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a1f      	ldr	r2, [pc, #124]	; (800be68 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d009      	beq.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a1d      	ldr	r2, [pc, #116]	; (800be6c <HAL_TIM_PWM_ConfigChannel+0x344>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d004      	beq.n	800be04 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800bdfa:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800bdfe:	481c      	ldr	r0, [pc, #112]	; (800be70 <HAL_TIM_PWM_ConfigChannel+0x348>)
 800be00:	f7f7 fc01 	bl	8003606 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	68b9      	ldr	r1, [r7, #8]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fe7e 	bl	800cb0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	69da      	ldr	r2, [r3, #28]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	69da      	ldr	r2, [r3, #28]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	69d9      	ldr	r1, [r3, #28]
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	021a      	lsls	r2, r3, #8
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	61da      	str	r2, [r3, #28]
      break;
 800be44:	e002      	b.n	800be4c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 800be46:	2301      	movs	r3, #1
 800be48:	75fb      	strb	r3, [r7, #23]
      break;
 800be4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	40010000 	.word	0x40010000
 800be64:	40000400 	.word	0x40000400
 800be68:	40000800 	.word	0x40000800
 800be6c:	40000c00 	.word	0x40000c00
 800be70:	080132b8 	.word	0x080132b8

0800be74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d101      	bne.n	800be90 <HAL_TIM_ConfigClockSource+0x1c>
 800be8c:	2302      	movs	r3, #2
 800be8e:	e2f0      	b.n	800c472 <HAL_TIM_ConfigClockSource+0x5fe>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bea8:	d029      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beb2:	d024      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d020      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b10      	cmp	r3, #16
 800bec2:	d01c      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b20      	cmp	r3, #32
 800beca:	d018      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b30      	cmp	r3, #48	; 0x30
 800bed2:	d014      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b40      	cmp	r3, #64	; 0x40
 800beda:	d010      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b50      	cmp	r3, #80	; 0x50
 800bee2:	d00c      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b60      	cmp	r3, #96	; 0x60
 800beea:	d008      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b70      	cmp	r3, #112	; 0x70
 800bef2:	d004      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x8a>
 800bef4:	f241 41bb 	movw	r1, #5307	; 0x14bb
 800bef8:	487c      	ldr	r0, [pc, #496]	; (800c0ec <HAL_TIM_ConfigClockSource+0x278>)
 800befa:	f7f7 fb84 	bl	8003606 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bf0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf14:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf26:	f000 80f1 	beq.w	800c10c <HAL_TIM_ConfigClockSource+0x298>
 800bf2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf2e:	f200 8293 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf36:	d02d      	beq.n	800bf94 <HAL_TIM_ConfigClockSource+0x120>
 800bf38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf3c:	f200 828c 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf40:	2b70      	cmp	r3, #112	; 0x70
 800bf42:	d05d      	beq.n	800c000 <HAL_TIM_ConfigClockSource+0x18c>
 800bf44:	2b70      	cmp	r3, #112	; 0x70
 800bf46:	f200 8287 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf4a:	2b60      	cmp	r3, #96	; 0x60
 800bf4c:	f000 81a0 	beq.w	800c290 <HAL_TIM_ConfigClockSource+0x41c>
 800bf50:	2b60      	cmp	r3, #96	; 0x60
 800bf52:	f200 8281 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf56:	2b50      	cmp	r3, #80	; 0x50
 800bf58:	f000 8144 	beq.w	800c1e4 <HAL_TIM_ConfigClockSource+0x370>
 800bf5c:	2b50      	cmp	r3, #80	; 0x50
 800bf5e:	f200 827b 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf62:	2b40      	cmp	r3, #64	; 0x40
 800bf64:	f000 81f6 	beq.w	800c354 <HAL_TIM_ConfigClockSource+0x4e0>
 800bf68:	2b40      	cmp	r3, #64	; 0x40
 800bf6a:	f200 8275 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf6e:	2b30      	cmp	r3, #48	; 0x30
 800bf70:	f000 8246 	beq.w	800c400 <HAL_TIM_ConfigClockSource+0x58c>
 800bf74:	2b30      	cmp	r3, #48	; 0x30
 800bf76:	f200 826f 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf7a:	2b20      	cmp	r3, #32
 800bf7c:	f000 8240 	beq.w	800c400 <HAL_TIM_ConfigClockSource+0x58c>
 800bf80:	2b20      	cmp	r3, #32
 800bf82:	f200 8269 	bhi.w	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f000 823a 	beq.w	800c400 <HAL_TIM_ConfigClockSource+0x58c>
 800bf8c:	2b10      	cmp	r3, #16
 800bf8e:	f000 8237 	beq.w	800c400 <HAL_TIM_ConfigClockSource+0x58c>
 800bf92:	e261      	b.n	800c458 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a55      	ldr	r2, [pc, #340]	; (800c0f0 <HAL_TIM_ConfigClockSource+0x27c>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	f000 825f 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa8:	f000 8259 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a50      	ldr	r2, [pc, #320]	; (800c0f4 <HAL_TIM_ConfigClockSource+0x280>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	f000 8253 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a4e      	ldr	r2, [pc, #312]	; (800c0f8 <HAL_TIM_ConfigClockSource+0x284>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	f000 824d 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a4c      	ldr	r2, [pc, #304]	; (800c0fc <HAL_TIM_ConfigClockSource+0x288>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	f000 8247 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a4a      	ldr	r2, [pc, #296]	; (800c100 <HAL_TIM_ConfigClockSource+0x28c>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	f000 8241 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a48      	ldr	r2, [pc, #288]	; (800c104 <HAL_TIM_ConfigClockSource+0x290>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	f000 823b 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a46      	ldr	r2, [pc, #280]	; (800c108 <HAL_TIM_ConfigClockSource+0x294>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	f000 8235 	beq.w	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
 800bff4:	f241 41c7 	movw	r1, #5319	; 0x14c7
 800bff8:	483c      	ldr	r0, [pc, #240]	; (800c0ec <HAL_TIM_ConfigClockSource+0x278>)
 800bffa:	f7f7 fb04 	bl	8003606 <assert_failed>
      break;
 800bffe:	e22e      	b.n	800c45e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a3a      	ldr	r2, [pc, #232]	; (800c0f0 <HAL_TIM_ConfigClockSource+0x27c>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d01d      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1d2>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c012:	d018      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1d2>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a36      	ldr	r2, [pc, #216]	; (800c0f4 <HAL_TIM_ConfigClockSource+0x280>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d013      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1d2>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a35      	ldr	r2, [pc, #212]	; (800c0f8 <HAL_TIM_ConfigClockSource+0x284>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d00e      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1d2>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a33      	ldr	r2, [pc, #204]	; (800c0fc <HAL_TIM_ConfigClockSource+0x288>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d009      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1d2>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a32      	ldr	r2, [pc, #200]	; (800c100 <HAL_TIM_ConfigClockSource+0x28c>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d004      	beq.n	800c046 <HAL_TIM_ConfigClockSource+0x1d2>
 800c03c:	f241 41ce 	movw	r1, #5326	; 0x14ce
 800c040:	482a      	ldr	r0, [pc, #168]	; (800c0ec <HAL_TIM_ConfigClockSource+0x278>)
 800c042:	f7f7 fae0 	bl	8003606 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d013      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x202>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c056:	d00e      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x202>
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c060:	d009      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x202>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c06a:	d004      	beq.n	800c076 <HAL_TIM_ConfigClockSource+0x202>
 800c06c:	f241 41d1 	movw	r1, #5329	; 0x14d1
 800c070:	481e      	ldr	r0, [pc, #120]	; (800c0ec <HAL_TIM_ConfigClockSource+0x278>)
 800c072:	f7f7 fac8 	bl	8003606 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c07e:	d014      	beq.n	800c0aa <HAL_TIM_ConfigClockSource+0x236>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d010      	beq.n	800c0aa <HAL_TIM_ConfigClockSource+0x236>
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00c      	beq.n	800c0aa <HAL_TIM_ConfigClockSource+0x236>
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	2b02      	cmp	r3, #2
 800c096:	d008      	beq.n	800c0aa <HAL_TIM_ConfigClockSource+0x236>
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	2b0a      	cmp	r3, #10
 800c09e:	d004      	beq.n	800c0aa <HAL_TIM_ConfigClockSource+0x236>
 800c0a0:	f241 41d2 	movw	r1, #5330	; 0x14d2
 800c0a4:	4811      	ldr	r0, [pc, #68]	; (800c0ec <HAL_TIM_ConfigClockSource+0x278>)
 800c0a6:	f7f7 faae 	bl	8003606 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	2b0f      	cmp	r3, #15
 800c0b0:	d904      	bls.n	800c0bc <HAL_TIM_ConfigClockSource+0x248>
 800c0b2:	f241 41d3 	movw	r1, #5331	; 0x14d3
 800c0b6:	480d      	ldr	r0, [pc, #52]	; (800c0ec <HAL_TIM_ConfigClockSource+0x278>)
 800c0b8:	f7f7 faa5 	bl	8003606 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6818      	ldr	r0, [r3, #0]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	6899      	ldr	r1, [r3, #8]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	685a      	ldr	r2, [r3, #4]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	f000 ff14 	bl	800cef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c0de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68ba      	ldr	r2, [r7, #8]
 800c0e6:	609a      	str	r2, [r3, #8]
      break;
 800c0e8:	e1ba      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x5ec>
 800c0ea:	bf00      	nop
 800c0ec:	080132b8 	.word	0x080132b8
 800c0f0:	40010000 	.word	0x40010000
 800c0f4:	40000400 	.word	0x40000400
 800c0f8:	40000800 	.word	0x40000800
 800c0fc:	40000c00 	.word	0x40000c00
 800c100:	40014000 	.word	0x40014000
 800c104:	40014400 	.word	0x40014400
 800c108:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4a8a      	ldr	r2, [pc, #552]	; (800c33c <HAL_TIM_ConfigClockSource+0x4c8>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d018      	beq.n	800c148 <HAL_TIM_ConfigClockSource+0x2d4>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c11e:	d013      	beq.n	800c148 <HAL_TIM_ConfigClockSource+0x2d4>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a86      	ldr	r2, [pc, #536]	; (800c340 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d00e      	beq.n	800c148 <HAL_TIM_ConfigClockSource+0x2d4>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a85      	ldr	r2, [pc, #532]	; (800c344 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d009      	beq.n	800c148 <HAL_TIM_ConfigClockSource+0x2d4>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a83      	ldr	r2, [pc, #524]	; (800c348 <HAL_TIM_ConfigClockSource+0x4d4>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d004      	beq.n	800c148 <HAL_TIM_ConfigClockSource+0x2d4>
 800c13e:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800c142:	4882      	ldr	r0, [pc, #520]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c144:	f7f7 fa5f 	bl	8003606 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d013      	beq.n	800c178 <HAL_TIM_ConfigClockSource+0x304>
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c158:	d00e      	beq.n	800c178 <HAL_TIM_ConfigClockSource+0x304>
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c162:	d009      	beq.n	800c178 <HAL_TIM_ConfigClockSource+0x304>
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c16c:	d004      	beq.n	800c178 <HAL_TIM_ConfigClockSource+0x304>
 800c16e:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800c172:	4876      	ldr	r0, [pc, #472]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c174:	f7f7 fa47 	bl	8003606 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c180:	d014      	beq.n	800c1ac <HAL_TIM_ConfigClockSource+0x338>
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	685b      	ldr	r3, [r3, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d010      	beq.n	800c1ac <HAL_TIM_ConfigClockSource+0x338>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00c      	beq.n	800c1ac <HAL_TIM_ConfigClockSource+0x338>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	2b02      	cmp	r3, #2
 800c198:	d008      	beq.n	800c1ac <HAL_TIM_ConfigClockSource+0x338>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	2b0a      	cmp	r3, #10
 800c1a0:	d004      	beq.n	800c1ac <HAL_TIM_ConfigClockSource+0x338>
 800c1a2:	f241 41ea 	movw	r1, #5354	; 0x14ea
 800c1a6:	4869      	ldr	r0, [pc, #420]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c1a8:	f7f7 fa2d 	bl	8003606 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	2b0f      	cmp	r3, #15
 800c1b2:	d904      	bls.n	800c1be <HAL_TIM_ConfigClockSource+0x34a>
 800c1b4:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800c1b8:	4864      	ldr	r0, [pc, #400]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c1ba:	f7f7 fa24 	bl	8003606 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	6899      	ldr	r1, [r3, #8]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	f000 fe93 	bl	800cef8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	689a      	ldr	r2, [r3, #8]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1e0:	609a      	str	r2, [r3, #8]
      break;
 800c1e2:	e13d      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a54      	ldr	r2, [pc, #336]	; (800c33c <HAL_TIM_ConfigClockSource+0x4c8>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d01d      	beq.n	800c22a <HAL_TIM_ConfigClockSource+0x3b6>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1f6:	d018      	beq.n	800c22a <HAL_TIM_ConfigClockSource+0x3b6>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a50      	ldr	r2, [pc, #320]	; (800c340 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d013      	beq.n	800c22a <HAL_TIM_ConfigClockSource+0x3b6>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a4f      	ldr	r2, [pc, #316]	; (800c344 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d00e      	beq.n	800c22a <HAL_TIM_ConfigClockSource+0x3b6>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a4d      	ldr	r2, [pc, #308]	; (800c348 <HAL_TIM_ConfigClockSource+0x4d4>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d009      	beq.n	800c22a <HAL_TIM_ConfigClockSource+0x3b6>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a4d      	ldr	r2, [pc, #308]	; (800c350 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d004      	beq.n	800c22a <HAL_TIM_ConfigClockSource+0x3b6>
 800c220:	f241 41fa 	movw	r1, #5370	; 0x14fa
 800c224:	4849      	ldr	r0, [pc, #292]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c226:	f7f7 f9ee 	bl	8003606 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c232:	d014      	beq.n	800c25e <HAL_TIM_ConfigClockSource+0x3ea>
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d010      	beq.n	800c25e <HAL_TIM_ConfigClockSource+0x3ea>
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00c      	beq.n	800c25e <HAL_TIM_ConfigClockSource+0x3ea>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d008      	beq.n	800c25e <HAL_TIM_ConfigClockSource+0x3ea>
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	2b0a      	cmp	r3, #10
 800c252:	d004      	beq.n	800c25e <HAL_TIM_ConfigClockSource+0x3ea>
 800c254:	f241 41fd 	movw	r1, #5373	; 0x14fd
 800c258:	483c      	ldr	r0, [pc, #240]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c25a:	f7f7 f9d4 	bl	8003606 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	2b0f      	cmp	r3, #15
 800c264:	d904      	bls.n	800c270 <HAL_TIM_ConfigClockSource+0x3fc>
 800c266:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800c26a:	4838      	ldr	r0, [pc, #224]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c26c:	f7f7 f9cb 	bl	8003606 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6818      	ldr	r0, [r3, #0]
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	6859      	ldr	r1, [r3, #4]
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	461a      	mov	r2, r3
 800c27e:	f000 fd0b 	bl	800cc98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2150      	movs	r1, #80	; 0x50
 800c288:	4618      	mov	r0, r3
 800c28a:	f000 fe1a 	bl	800cec2 <TIM_ITRx_SetConfig>
      break;
 800c28e:	e0e7      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a29      	ldr	r2, [pc, #164]	; (800c33c <HAL_TIM_ConfigClockSource+0x4c8>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d01d      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x462>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a2:	d018      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x462>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a25      	ldr	r2, [pc, #148]	; (800c340 <HAL_TIM_ConfigClockSource+0x4cc>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d013      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x462>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a24      	ldr	r2, [pc, #144]	; (800c344 <HAL_TIM_ConfigClockSource+0x4d0>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d00e      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x462>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a22      	ldr	r2, [pc, #136]	; (800c348 <HAL_TIM_ConfigClockSource+0x4d4>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d009      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x462>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a22      	ldr	r2, [pc, #136]	; (800c350 <HAL_TIM_ConfigClockSource+0x4dc>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d004      	beq.n	800c2d6 <HAL_TIM_ConfigClockSource+0x462>
 800c2cc:	f241 510a 	movw	r1, #5386	; 0x150a
 800c2d0:	481e      	ldr	r0, [pc, #120]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c2d2:	f7f7 f998 	bl	8003606 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2de:	d014      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x496>
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d010      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x496>
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00c      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x496>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	2b02      	cmp	r3, #2
 800c2f6:	d008      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x496>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	2b0a      	cmp	r3, #10
 800c2fe:	d004      	beq.n	800c30a <HAL_TIM_ConfigClockSource+0x496>
 800c300:	f241 510d 	movw	r1, #5389	; 0x150d
 800c304:	4811      	ldr	r0, [pc, #68]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c306:	f7f7 f97e 	bl	8003606 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	68db      	ldr	r3, [r3, #12]
 800c30e:	2b0f      	cmp	r3, #15
 800c310:	d904      	bls.n	800c31c <HAL_TIM_ConfigClockSource+0x4a8>
 800c312:	f241 510e 	movw	r1, #5390	; 0x150e
 800c316:	480d      	ldr	r0, [pc, #52]	; (800c34c <HAL_TIM_ConfigClockSource+0x4d8>)
 800c318:	f7f7 f975 	bl	8003606 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6818      	ldr	r0, [r3, #0]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	6859      	ldr	r1, [r3, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	461a      	mov	r2, r3
 800c32a:	f000 fd21 	bl	800cd70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2160      	movs	r1, #96	; 0x60
 800c334:	4618      	mov	r0, r3
 800c336:	f000 fdc4 	bl	800cec2 <TIM_ITRx_SetConfig>
      break;
 800c33a:	e091      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x5ec>
 800c33c:	40010000 	.word	0x40010000
 800c340:	40000400 	.word	0x40000400
 800c344:	40000800 	.word	0x40000800
 800c348:	40000c00 	.word	0x40000c00
 800c34c:	080132b8 	.word	0x080132b8
 800c350:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a48      	ldr	r2, [pc, #288]	; (800c47c <HAL_TIM_ConfigClockSource+0x608>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d01d      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0x526>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c366:	d018      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0x526>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a44      	ldr	r2, [pc, #272]	; (800c480 <HAL_TIM_ConfigClockSource+0x60c>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d013      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0x526>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a43      	ldr	r2, [pc, #268]	; (800c484 <HAL_TIM_ConfigClockSource+0x610>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d00e      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0x526>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a41      	ldr	r2, [pc, #260]	; (800c488 <HAL_TIM_ConfigClockSource+0x614>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d009      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0x526>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a40      	ldr	r2, [pc, #256]	; (800c48c <HAL_TIM_ConfigClockSource+0x618>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d004      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0x526>
 800c390:	f241 511a 	movw	r1, #5402	; 0x151a
 800c394:	483e      	ldr	r0, [pc, #248]	; (800c490 <HAL_TIM_ConfigClockSource+0x61c>)
 800c396:	f7f7 f936 	bl	8003606 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3a2:	d014      	beq.n	800c3ce <HAL_TIM_ConfigClockSource+0x55a>
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d010      	beq.n	800c3ce <HAL_TIM_ConfigClockSource+0x55a>
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00c      	beq.n	800c3ce <HAL_TIM_ConfigClockSource+0x55a>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d008      	beq.n	800c3ce <HAL_TIM_ConfigClockSource+0x55a>
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	2b0a      	cmp	r3, #10
 800c3c2:	d004      	beq.n	800c3ce <HAL_TIM_ConfigClockSource+0x55a>
 800c3c4:	f241 511d 	movw	r1, #5405	; 0x151d
 800c3c8:	4831      	ldr	r0, [pc, #196]	; (800c490 <HAL_TIM_ConfigClockSource+0x61c>)
 800c3ca:	f7f7 f91c 	bl	8003606 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	2b0f      	cmp	r3, #15
 800c3d4:	d904      	bls.n	800c3e0 <HAL_TIM_ConfigClockSource+0x56c>
 800c3d6:	f241 511e 	movw	r1, #5406	; 0x151e
 800c3da:	482d      	ldr	r0, [pc, #180]	; (800c490 <HAL_TIM_ConfigClockSource+0x61c>)
 800c3dc:	f7f7 f913 	bl	8003606 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6818      	ldr	r0, [r3, #0]
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	6859      	ldr	r1, [r3, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	f000 fc53 	bl	800cc98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2140      	movs	r1, #64	; 0x40
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 fd62 	bl	800cec2 <TIM_ITRx_SetConfig>
      break;
 800c3fe:	e02f      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a1d      	ldr	r2, [pc, #116]	; (800c47c <HAL_TIM_ConfigClockSource+0x608>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d01d      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x5d2>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c412:	d018      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x5d2>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a19      	ldr	r2, [pc, #100]	; (800c480 <HAL_TIM_ConfigClockSource+0x60c>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d013      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x5d2>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a18      	ldr	r2, [pc, #96]	; (800c484 <HAL_TIM_ConfigClockSource+0x610>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d00e      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x5d2>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a16      	ldr	r2, [pc, #88]	; (800c488 <HAL_TIM_ConfigClockSource+0x614>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d009      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x5d2>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a15      	ldr	r2, [pc, #84]	; (800c48c <HAL_TIM_ConfigClockSource+0x618>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d004      	beq.n	800c446 <HAL_TIM_ConfigClockSource+0x5d2>
 800c43c:	f241 512d 	movw	r1, #5421	; 0x152d
 800c440:	4813      	ldr	r0, [pc, #76]	; (800c490 <HAL_TIM_ConfigClockSource+0x61c>)
 800c442:	f7f7 f8e0 	bl	8003606 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f000 fd36 	bl	800cec2 <TIM_ITRx_SetConfig>
      break;
 800c456:	e003      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	73fb      	strb	r3, [r7, #15]
      break;
 800c45c:	e000      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800c45e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2201      	movs	r2, #1
 800c464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c470:	7bfb      	ldrb	r3, [r7, #15]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	40010000 	.word	0x40010000
 800c480:	40000400 	.word	0x40000400
 800c484:	40000800 	.word	0x40000800
 800c488:	40000c00 	.word	0x40000c00
 800c48c:	40014000 	.word	0x40014000
 800c490:	080132b8 	.word	0x080132b8

0800c494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c504:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d107      	bne.n	800c520 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2201      	movs	r2, #1
 800c514:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c51e:	e02a      	b.n	800c576 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	429a      	cmp	r2, r3
 800c528:	d107      	bne.n	800c53a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2202      	movs	r2, #2
 800c52e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c538:	e01d      	b.n	800c576 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	429a      	cmp	r2, r3
 800c542:	d107      	bne.n	800c554 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2204      	movs	r2, #4
 800c548:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c552:	e010      	b.n	800c576 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d107      	bne.n	800c56e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2208      	movs	r2, #8
 800c562:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c56c:	e003      	b.n	800c576 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7ff ffb4 	bl	800c4e4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	771a      	strb	r2, [r3, #28]
}
 800c582:	bf00      	nop
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b084      	sub	sp, #16
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c596:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d10b      	bne.n	800c5ba <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	69db      	ldr	r3, [r3, #28]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d136      	bne.n	800c61e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c5b8:	e031      	b.n	800c61e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d10b      	bne.n	800c5dc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	69db      	ldr	r3, [r3, #28]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d125      	bne.n	800c61e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c5da:	e020      	b.n	800c61e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d10b      	bne.n	800c5fe <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2204      	movs	r2, #4
 800c5ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	69db      	ldr	r3, [r3, #28]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d114      	bne.n	800c61e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c5fc:	e00f      	b.n	800c61e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	429a      	cmp	r2, r3
 800c606:	d10a      	bne.n	800c61e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2208      	movs	r2, #8
 800c60c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d103      	bne.n	800c61e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f7f6 fb96 	bl	8002d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	771a      	strb	r2, [r3, #28]
}
 800c62a:	bf00      	nop
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b084      	sub	sp, #16
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	429a      	cmp	r2, r3
 800c648:	d103      	bne.n	800c652 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2201      	movs	r2, #1
 800c64e:	771a      	strb	r2, [r3, #28]
 800c650:	e019      	b.n	800c686 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d103      	bne.n	800c664 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2202      	movs	r2, #2
 800c660:	771a      	strb	r2, [r3, #28]
 800c662:	e010      	b.n	800c686 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d103      	bne.n	800c676 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2204      	movs	r2, #4
 800c672:	771a      	strb	r2, [r3, #28]
 800c674:	e007      	b.n	800c686 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d102      	bne.n	800c686 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2208      	movs	r2, #8
 800c684:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f7ff ff18 	bl	800c4bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	771a      	strb	r2, [r3, #28]
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
	...

0800c69c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a34      	ldr	r2, [pc, #208]	; (800c780 <TIM_Base_SetConfig+0xe4>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d00f      	beq.n	800c6d4 <TIM_Base_SetConfig+0x38>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6ba:	d00b      	beq.n	800c6d4 <TIM_Base_SetConfig+0x38>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a31      	ldr	r2, [pc, #196]	; (800c784 <TIM_Base_SetConfig+0xe8>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d007      	beq.n	800c6d4 <TIM_Base_SetConfig+0x38>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a30      	ldr	r2, [pc, #192]	; (800c788 <TIM_Base_SetConfig+0xec>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d003      	beq.n	800c6d4 <TIM_Base_SetConfig+0x38>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a2f      	ldr	r2, [pc, #188]	; (800c78c <TIM_Base_SetConfig+0xf0>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d108      	bne.n	800c6e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a25      	ldr	r2, [pc, #148]	; (800c780 <TIM_Base_SetConfig+0xe4>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d01b      	beq.n	800c726 <TIM_Base_SetConfig+0x8a>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6f4:	d017      	beq.n	800c726 <TIM_Base_SetConfig+0x8a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a22      	ldr	r2, [pc, #136]	; (800c784 <TIM_Base_SetConfig+0xe8>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d013      	beq.n	800c726 <TIM_Base_SetConfig+0x8a>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a21      	ldr	r2, [pc, #132]	; (800c788 <TIM_Base_SetConfig+0xec>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00f      	beq.n	800c726 <TIM_Base_SetConfig+0x8a>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a20      	ldr	r2, [pc, #128]	; (800c78c <TIM_Base_SetConfig+0xf0>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d00b      	beq.n	800c726 <TIM_Base_SetConfig+0x8a>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a1f      	ldr	r2, [pc, #124]	; (800c790 <TIM_Base_SetConfig+0xf4>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d007      	beq.n	800c726 <TIM_Base_SetConfig+0x8a>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a1e      	ldr	r2, [pc, #120]	; (800c794 <TIM_Base_SetConfig+0xf8>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d003      	beq.n	800c726 <TIM_Base_SetConfig+0x8a>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a1d      	ldr	r2, [pc, #116]	; (800c798 <TIM_Base_SetConfig+0xfc>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d108      	bne.n	800c738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c72c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	4313      	orrs	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	4313      	orrs	r3, r2
 800c744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	689a      	ldr	r2, [r3, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a08      	ldr	r2, [pc, #32]	; (800c780 <TIM_Base_SetConfig+0xe4>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d103      	bne.n	800c76c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	691a      	ldr	r2, [r3, #16]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	615a      	str	r2, [r3, #20]
}
 800c772:	bf00      	nop
 800c774:	3714      	adds	r7, #20
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	40010000 	.word	0x40010000
 800c784:	40000400 	.word	0x40000400
 800c788:	40000800 	.word	0x40000800
 800c78c:	40000c00 	.word	0x40000c00
 800c790:	40014000 	.word	0x40014000
 800c794:	40014400 	.word	0x40014400
 800c798:	40014800 	.word	0x40014800

0800c79c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b086      	sub	sp, #24
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	f023 0201 	bic.w	r2, r3, #1
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f023 0303 	bic.w	r3, r3, #3
 800c7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f023 0302 	bic.w	r3, r3, #2
 800c7e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a30      	ldr	r2, [pc, #192]	; (800c8b4 <TIM_OC1_SetConfig+0x118>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d119      	bne.n	800c82c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d008      	beq.n	800c812 <TIM_OC1_SetConfig+0x76>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	2b08      	cmp	r3, #8
 800c806:	d004      	beq.n	800c812 <TIM_OC1_SetConfig+0x76>
 800c808:	f641 21cb 	movw	r1, #6859	; 0x1acb
 800c80c:	482a      	ldr	r0, [pc, #168]	; (800c8b8 <TIM_OC1_SetConfig+0x11c>)
 800c80e:	f7f6 fefa 	bl	8003606 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	f023 0308 	bic.w	r3, r3, #8
 800c818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	697a      	ldr	r2, [r7, #20]
 800c820:	4313      	orrs	r3, r2
 800c822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f023 0304 	bic.w	r3, r3, #4
 800c82a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a21      	ldr	r2, [pc, #132]	; (800c8b4 <TIM_OC1_SetConfig+0x118>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d12d      	bne.n	800c890 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c83c:	d008      	beq.n	800c850 <TIM_OC1_SetConfig+0xb4>
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d004      	beq.n	800c850 <TIM_OC1_SetConfig+0xb4>
 800c846:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800c84a:	481b      	ldr	r0, [pc, #108]	; (800c8b8 <TIM_OC1_SetConfig+0x11c>)
 800c84c:	f7f6 fedb 	bl	8003606 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c858:	d008      	beq.n	800c86c <TIM_OC1_SetConfig+0xd0>
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	695b      	ldr	r3, [r3, #20]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d004      	beq.n	800c86c <TIM_OC1_SetConfig+0xd0>
 800c862:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800c866:	4814      	ldr	r0, [pc, #80]	; (800c8b8 <TIM_OC1_SetConfig+0x11c>)
 800c868:	f7f6 fecd 	bl	8003606 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c87a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	4313      	orrs	r3, r2
 800c884:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	685a      	ldr	r2, [r3, #4]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	697a      	ldr	r2, [r7, #20]
 800c8a8:	621a      	str	r2, [r3, #32]
}
 800c8aa:	bf00      	nop
 800c8ac:	3718      	adds	r7, #24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	40010000 	.word	0x40010000
 800c8b8:	080132b8 	.word	0x080132b8

0800c8bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	f023 0210 	bic.w	r2, r3, #16
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	021b      	lsls	r3, r3, #8
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	f023 0320 	bic.w	r3, r3, #32
 800c906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	689b      	ldr	r3, [r3, #8]
 800c90c:	011b      	lsls	r3, r3, #4
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	4313      	orrs	r3, r2
 800c912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a31      	ldr	r2, [pc, #196]	; (800c9dc <TIM_OC2_SetConfig+0x120>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d11a      	bne.n	800c952 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d008      	beq.n	800c936 <TIM_OC2_SetConfig+0x7a>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	2b08      	cmp	r3, #8
 800c92a:	d004      	beq.n	800c936 <TIM_OC2_SetConfig+0x7a>
 800c92c:	f641 3116 	movw	r1, #6934	; 0x1b16
 800c930:	482b      	ldr	r0, [pc, #172]	; (800c9e0 <TIM_OC2_SetConfig+0x124>)
 800c932:	f7f6 fe68 	bl	8003606 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c93c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	011b      	lsls	r3, r3, #4
 800c944:	697a      	ldr	r2, [r7, #20]
 800c946:	4313      	orrs	r3, r2
 800c948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c950:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a21      	ldr	r2, [pc, #132]	; (800c9dc <TIM_OC2_SetConfig+0x120>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d12f      	bne.n	800c9ba <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c962:	d008      	beq.n	800c976 <TIM_OC2_SetConfig+0xba>
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d004      	beq.n	800c976 <TIM_OC2_SetConfig+0xba>
 800c96c:	f641 3124 	movw	r1, #6948	; 0x1b24
 800c970:	481b      	ldr	r0, [pc, #108]	; (800c9e0 <TIM_OC2_SetConfig+0x124>)
 800c972:	f7f6 fe48 	bl	8003606 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	695b      	ldr	r3, [r3, #20]
 800c97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c97e:	d008      	beq.n	800c992 <TIM_OC2_SetConfig+0xd6>
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	695b      	ldr	r3, [r3, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d004      	beq.n	800c992 <TIM_OC2_SetConfig+0xd6>
 800c988:	f641 3125 	movw	r1, #6949	; 0x1b25
 800c98c:	4814      	ldr	r0, [pc, #80]	; (800c9e0 <TIM_OC2_SetConfig+0x124>)
 800c98e:	f7f6 fe3a 	bl	8003606 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	693a      	ldr	r2, [r7, #16]
 800c9be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685a      	ldr	r2, [r3, #4]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	621a      	str	r2, [r3, #32]
}
 800c9d4:	bf00      	nop
 800c9d6:	3718      	adds	r7, #24
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	40010000 	.word	0x40010000
 800c9e0:	080132b8 	.word	0x080132b8

0800c9e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	69db      	ldr	r3, [r3, #28]
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f023 0303 	bic.w	r3, r3, #3
 800ca1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ca2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	021b      	lsls	r3, r3, #8
 800ca34:	697a      	ldr	r2, [r7, #20]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	4a31      	ldr	r2, [pc, #196]	; (800cb04 <TIM_OC3_SetConfig+0x120>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d11a      	bne.n	800ca78 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d008      	beq.n	800ca5c <TIM_OC3_SetConfig+0x78>
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	2b08      	cmp	r3, #8
 800ca50:	d004      	beq.n	800ca5c <TIM_OC3_SetConfig+0x78>
 800ca52:	f641 3161 	movw	r1, #7009	; 0x1b61
 800ca56:	482c      	ldr	r0, [pc, #176]	; (800cb08 <TIM_OC3_SetConfig+0x124>)
 800ca58:	f7f6 fdd5 	bl	8003606 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	021b      	lsls	r3, r3, #8
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a22      	ldr	r2, [pc, #136]	; (800cb04 <TIM_OC3_SetConfig+0x120>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d12f      	bne.n	800cae0 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca88:	d008      	beq.n	800ca9c <TIM_OC3_SetConfig+0xb8>
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	699b      	ldr	r3, [r3, #24]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d004      	beq.n	800ca9c <TIM_OC3_SetConfig+0xb8>
 800ca92:	f641 316e 	movw	r1, #7022	; 0x1b6e
 800ca96:	481c      	ldr	r0, [pc, #112]	; (800cb08 <TIM_OC3_SetConfig+0x124>)
 800ca98:	f7f6 fdb5 	bl	8003606 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caa4:	d008      	beq.n	800cab8 <TIM_OC3_SetConfig+0xd4>
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d004      	beq.n	800cab8 <TIM_OC3_SetConfig+0xd4>
 800caae:	f641 316f 	movw	r1, #7023	; 0x1b6f
 800cab2:	4815      	ldr	r0, [pc, #84]	; (800cb08 <TIM_OC3_SetConfig+0x124>)
 800cab4:	f7f6 fda7 	bl	8003606 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cabe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	695b      	ldr	r3, [r3, #20]
 800cacc:	011b      	lsls	r3, r3, #4
 800cace:	693a      	ldr	r2, [r7, #16]
 800cad0:	4313      	orrs	r3, r2
 800cad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	011b      	lsls	r3, r3, #4
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	4313      	orrs	r3, r2
 800cade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	693a      	ldr	r2, [r7, #16]
 800cae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	685a      	ldr	r2, [r3, #4]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	621a      	str	r2, [r3, #32]
}
 800cafa:	bf00      	nop
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	40010000 	.word	0x40010000
 800cb08:	080132b8 	.word	0x080132b8

0800cb0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6a1b      	ldr	r3, [r3, #32]
 800cb26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	69db      	ldr	r3, [r3, #28]
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	021b      	lsls	r3, r3, #8
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	031b      	lsls	r3, r3, #12
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a16      	ldr	r2, [pc, #88]	; (800cbc0 <TIM_OC4_SetConfig+0xb4>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d117      	bne.n	800cb9c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb74:	d008      	beq.n	800cb88 <TIM_OC4_SetConfig+0x7c>
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d004      	beq.n	800cb88 <TIM_OC4_SetConfig+0x7c>
 800cb7e:	f641 31ad 	movw	r1, #7085	; 0x1bad
 800cb82:	4810      	ldr	r0, [pc, #64]	; (800cbc4 <TIM_OC4_SetConfig+0xb8>)
 800cb84:	f7f6 fd3f 	bl	8003606 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	695b      	ldr	r3, [r3, #20]
 800cb94:	019b      	lsls	r3, r3, #6
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	621a      	str	r2, [r3, #32]
}
 800cbb6:	bf00      	nop
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	40010000 	.word	0x40010000
 800cbc4:	080132b8 	.word	0x080132b8

0800cbc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
 800cbd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	f023 0201 	bic.w	r2, r3, #1
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4a24      	ldr	r2, [pc, #144]	; (800cc84 <TIM_TI1_SetConfig+0xbc>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d013      	beq.n	800cc1e <TIM_TI1_SetConfig+0x56>
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbfc:	d00f      	beq.n	800cc1e <TIM_TI1_SetConfig+0x56>
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	4a21      	ldr	r2, [pc, #132]	; (800cc88 <TIM_TI1_SetConfig+0xc0>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d00b      	beq.n	800cc1e <TIM_TI1_SetConfig+0x56>
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	4a20      	ldr	r2, [pc, #128]	; (800cc8c <TIM_TI1_SetConfig+0xc4>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d007      	beq.n	800cc1e <TIM_TI1_SetConfig+0x56>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	4a1f      	ldr	r2, [pc, #124]	; (800cc90 <TIM_TI1_SetConfig+0xc8>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d003      	beq.n	800cc1e <TIM_TI1_SetConfig+0x56>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4a1e      	ldr	r2, [pc, #120]	; (800cc94 <TIM_TI1_SetConfig+0xcc>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d101      	bne.n	800cc22 <TIM_TI1_SetConfig+0x5a>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e000      	b.n	800cc24 <TIM_TI1_SetConfig+0x5c>
 800cc22:	2300      	movs	r3, #0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d008      	beq.n	800cc3a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	f023 0303 	bic.w	r3, r3, #3
 800cc2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800cc30:	697a      	ldr	r2, [r7, #20]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e003      	b.n	800cc42 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	f043 0301 	orr.w	r3, r3, #1
 800cc40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	011b      	lsls	r3, r3, #4
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f023 030a 	bic.w	r3, r3, #10
 800cc5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	f003 030a 	and.w	r3, r3, #10
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	621a      	str	r2, [r3, #32]
}
 800cc76:	bf00      	nop
 800cc78:	371c      	adds	r7, #28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	40010000 	.word	0x40010000
 800cc88:	40000400 	.word	0x40000400
 800cc8c:	40000800 	.word	0x40000800
 800cc90:	40000c00 	.word	0x40000c00
 800cc94:	40014000 	.word	0x40014000

0800cc98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6a1b      	ldr	r3, [r3, #32]
 800cca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	f023 0201 	bic.w	r2, r3, #1
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ccc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	011b      	lsls	r3, r3, #4
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	4313      	orrs	r3, r2
 800cccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	f023 030a 	bic.w	r3, r3, #10
 800ccd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	697a      	ldr	r2, [r7, #20]
 800cce8:	621a      	str	r2, [r3, #32]
}
 800ccea:	bf00      	nop
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ccf6:	b480      	push	{r7}
 800ccf8:	b087      	sub	sp, #28
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	60f8      	str	r0, [r7, #12]
 800ccfe:	60b9      	str	r1, [r7, #8]
 800cd00:	607a      	str	r2, [r7, #4]
 800cd02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6a1b      	ldr	r3, [r3, #32]
 800cd08:	f023 0210 	bic.w	r2, r3, #16
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	699b      	ldr	r3, [r3, #24]
 800cd14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6a1b      	ldr	r3, [r3, #32]
 800cd1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	021b      	lsls	r3, r3, #8
 800cd28:	697a      	ldr	r2, [r7, #20]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	031b      	lsls	r3, r3, #12
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	697a      	ldr	r2, [r7, #20]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cd48:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	011b      	lsls	r3, r3, #4
 800cd4e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cd52:	693a      	ldr	r2, [r7, #16]
 800cd54:	4313      	orrs	r3, r2
 800cd56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	697a      	ldr	r2, [r7, #20]
 800cd5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	621a      	str	r2, [r3, #32]
}
 800cd64:	bf00      	nop
 800cd66:	371c      	adds	r7, #28
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6a1b      	ldr	r3, [r3, #32]
 800cd80:	f023 0210 	bic.w	r2, r3, #16
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cd9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	031b      	lsls	r3, r3, #12
 800cda0:	697a      	ldr	r2, [r7, #20]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cdac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	011b      	lsls	r3, r3, #4
 800cdb2:	693a      	ldr	r2, [r7, #16]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	693a      	ldr	r2, [r7, #16]
 800cdc2:	621a      	str	r2, [r3, #32]
}
 800cdc4:	bf00      	nop
 800cdc6:	371c      	adds	r7, #28
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	69db      	ldr	r3, [r3, #28]
 800cdee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6a1b      	ldr	r3, [r3, #32]
 800cdf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	f023 0303 	bic.w	r3, r3, #3
 800cdfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	011b      	lsls	r3, r3, #4
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	4313      	orrs	r3, r2
 800ce18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800ce20:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	021b      	lsls	r3, r3, #8
 800ce26:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	697a      	ldr	r2, [r7, #20]
 800ce34:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	621a      	str	r2, [r3, #32]
}
 800ce3c:	bf00      	nop
 800ce3e:	371c      	adds	r7, #28
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b087      	sub	sp, #28
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6a1b      	ldr	r3, [r3, #32]
 800ce5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	021b      	lsls	r3, r3, #8
 800ce7a:	697a      	ldr	r2, [r7, #20]
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce86:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	031b      	lsls	r3, r3, #12
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800ce9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	031b      	lsls	r3, r3, #12
 800cea0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800cea4:	693a      	ldr	r2, [r7, #16]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	693a      	ldr	r2, [r7, #16]
 800ceb4:	621a      	str	r2, [r3, #32]
}
 800ceb6:	bf00      	nop
 800ceb8:	371c      	adds	r7, #28
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b085      	sub	sp, #20
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4313      	orrs	r3, r2
 800cee0:	f043 0307 	orr.w	r3, r3, #7
 800cee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	609a      	str	r2, [r3, #8]
}
 800ceec:	bf00      	nop
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cf12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	021a      	lsls	r2, r3, #8
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	431a      	orrs	r2, r3
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	697a      	ldr	r2, [r7, #20]
 800cf2a:	609a      	str	r2, [r3, #8]
}
 800cf2c:	bf00      	nop
 800cf2e:	371c      	adds	r7, #28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b086      	sub	sp, #24
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	4a2a      	ldr	r2, [pc, #168]	; (800cff0 <TIM_CCxChannelCmd+0xb8>)
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d020      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf52:	d01c      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4a27      	ldr	r2, [pc, #156]	; (800cff4 <TIM_CCxChannelCmd+0xbc>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d018      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4a26      	ldr	r2, [pc, #152]	; (800cff8 <TIM_CCxChannelCmd+0xc0>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d014      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4a25      	ldr	r2, [pc, #148]	; (800cffc <TIM_CCxChannelCmd+0xc4>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d010      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	4a24      	ldr	r2, [pc, #144]	; (800d000 <TIM_CCxChannelCmd+0xc8>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d00c      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4a23      	ldr	r2, [pc, #140]	; (800d004 <TIM_CCxChannelCmd+0xcc>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d008      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4a22      	ldr	r2, [pc, #136]	; (800d008 <TIM_CCxChannelCmd+0xd0>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d004      	beq.n	800cf8e <TIM_CCxChannelCmd+0x56>
 800cf84:	f641 5198 	movw	r1, #7576	; 0x1d98
 800cf88:	4820      	ldr	r0, [pc, #128]	; (800d00c <TIM_CCxChannelCmd+0xd4>)
 800cf8a:	f7f6 fb3c 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d010      	beq.n	800cfb6 <TIM_CCxChannelCmd+0x7e>
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	2b04      	cmp	r3, #4
 800cf98:	d00d      	beq.n	800cfb6 <TIM_CCxChannelCmd+0x7e>
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	2b08      	cmp	r3, #8
 800cf9e:	d00a      	beq.n	800cfb6 <TIM_CCxChannelCmd+0x7e>
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2b0c      	cmp	r3, #12
 800cfa4:	d007      	beq.n	800cfb6 <TIM_CCxChannelCmd+0x7e>
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2b3c      	cmp	r3, #60	; 0x3c
 800cfaa:	d004      	beq.n	800cfb6 <TIM_CCxChannelCmd+0x7e>
 800cfac:	f641 5199 	movw	r1, #7577	; 0x1d99
 800cfb0:	4816      	ldr	r0, [pc, #88]	; (800d00c <TIM_CCxChannelCmd+0xd4>)
 800cfb2:	f7f6 fb28 	bl	8003606 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	f003 031f 	and.w	r3, r3, #31
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6a1a      	ldr	r2, [r3, #32]
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	43db      	mvns	r3, r3
 800cfcc:	401a      	ands	r2, r3
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6a1a      	ldr	r2, [r3, #32]
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	f003 031f 	and.w	r3, r3, #31
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	fa01 f303 	lsl.w	r3, r1, r3
 800cfe2:	431a      	orrs	r2, r3
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	621a      	str	r2, [r3, #32]
}
 800cfe8:	bf00      	nop
 800cfea:	3718      	adds	r7, #24
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	40010000 	.word	0x40010000
 800cff4:	40000400 	.word	0x40000400
 800cff8:	40000800 	.word	0x40000800
 800cffc:	40000c00 	.word	0x40000c00
 800d000:	40014000 	.word	0x40014000
 800d004:	40014400 	.word	0x40014400
 800d008:	40014800 	.word	0x40014800
 800d00c:	080132b8 	.word	0x080132b8

0800d010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a55      	ldr	r2, [pc, #340]	; (800d174 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d018      	beq.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d02c:	d013      	beq.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a51      	ldr	r2, [pc, #324]	; (800d178 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d00e      	beq.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a4f      	ldr	r2, [pc, #316]	; (800d17c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d009      	beq.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a4e      	ldr	r2, [pc, #312]	; (800d180 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d004      	beq.n	800d056 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800d04c:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800d050:	484c      	ldr	r0, [pc, #304]	; (800d184 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d052:	f7f6 fad8 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d020      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b10      	cmp	r3, #16
 800d064:	d01c      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	d018      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b30      	cmp	r3, #48	; 0x30
 800d074:	d014      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b40      	cmp	r3, #64	; 0x40
 800d07c:	d010      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b50      	cmp	r3, #80	; 0x50
 800d084:	d00c      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b60      	cmp	r3, #96	; 0x60
 800d08c:	d008      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	2b70      	cmp	r3, #112	; 0x70
 800d094:	d004      	beq.n	800d0a0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800d096:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800d09a:	483a      	ldr	r0, [pc, #232]	; (800d184 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d09c:	f7f6 fab3 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	2b80      	cmp	r3, #128	; 0x80
 800d0a6:	d008      	beq.n	800d0ba <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d004      	beq.n	800d0ba <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800d0b0:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800d0b4:	4833      	ldr	r0, [pc, #204]	; (800d184 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800d0b6:	f7f6 faa6 	bl	8003606 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d101      	bne.n	800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	e050      	b.n	800d16a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	689b      	ldr	r3, [r3, #8]
 800d0e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a1b      	ldr	r2, [pc, #108]	; (800d174 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d018      	beq.n	800d13e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d114:	d013      	beq.n	800d13e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a17      	ldr	r2, [pc, #92]	; (800d178 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d00e      	beq.n	800d13e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a15      	ldr	r2, [pc, #84]	; (800d17c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d009      	beq.n	800d13e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a14      	ldr	r2, [pc, #80]	; (800d180 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800d130:	4293      	cmp	r3, r2
 800d132:	d004      	beq.n	800d13e <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a13      	ldr	r2, [pc, #76]	; (800d188 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d10c      	bne.n	800d158 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	4313      	orrs	r3, r2
 800d14e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	68ba      	ldr	r2, [r7, #8]
 800d156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	40010000 	.word	0x40010000
 800d178:	40000400 	.word	0x40000400
 800d17c:	40000800 	.word	0x40000800
 800d180:	40000c00 	.word	0x40000c00
 800d184:	080132f0 	.word	0x080132f0
 800d188:	40014000 	.word	0x40014000

0800d18c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b084      	sub	sp, #16
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d196:	2300      	movs	r3, #0
 800d198:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a5c      	ldr	r2, [pc, #368]	; (800d310 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d004      	beq.n	800d1ae <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 800d1a4:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800d1a8:	485a      	ldr	r0, [pc, #360]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d1aa:	f7f6 fa2c 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d1b6:	d008      	beq.n	800d1ca <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d004      	beq.n	800d1ca <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800d1c0:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800d1c4:	4853      	ldr	r0, [pc, #332]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d1c6:	f7f6 fa1e 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1d2:	d008      	beq.n	800d1e6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d004      	beq.n	800d1e6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800d1dc:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800d1e0:	484c      	ldr	r0, [pc, #304]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d1e2:	f7f6 fa10 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d013      	beq.n	800d216 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1f6:	d00e      	beq.n	800d216 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	689b      	ldr	r3, [r3, #8]
 800d1fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d200:	d009      	beq.n	800d216 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d20a:	d004      	beq.n	800d216 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800d20c:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800d210:	4840      	ldr	r0, [pc, #256]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d212:	f7f6 f9f8 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	2bff      	cmp	r3, #255	; 0xff
 800d21c:	d904      	bls.n	800d228 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800d21e:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800d222:	483c      	ldr	r0, [pc, #240]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d224:	f7f6 f9ef 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d230:	d008      	beq.n	800d244 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d004      	beq.n	800d244 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d23a:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800d23e:	4835      	ldr	r0, [pc, #212]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d240:	f7f6 f9e1 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	695b      	ldr	r3, [r3, #20]
 800d250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d254:	d004      	beq.n	800d260 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800d256:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800d25a:	482e      	ldr	r0, [pc, #184]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d25c:	f7f6 f9d3 	bl	8003606 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	69db      	ldr	r3, [r3, #28]
 800d264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d268:	d008      	beq.n	800d27c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	69db      	ldr	r3, [r3, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d004      	beq.n	800d27c <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800d272:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800d276:	4827      	ldr	r0, [pc, #156]	; (800d314 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800d278:	f7f6 f9c5 	bl	8003606 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d282:	2b01      	cmp	r3, #1
 800d284:	d101      	bne.n	800d28a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800d286:	2302      	movs	r3, #2
 800d288:	e03d      	b.n	800d306 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2201      	movs	r2, #1
 800d28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	68db      	ldr	r3, [r3, #12]
 800d29c:	4313      	orrs	r3, r2
 800d29e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	69db      	ldr	r3, [r3, #28]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	40010000 	.word	0x40010000
 800d314:	080132f0 	.word	0x080132f0

0800d318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d320:	bf00      	nop
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d340:	b084      	sub	sp, #16
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	f107 001c 	add.w	r0, r7, #28
 800d34e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d354:	2b01      	cmp	r3, #1
 800d356:	d122      	bne.n	800d39e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d35c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d36c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d382:	2b01      	cmp	r3, #1
 800d384:	d105      	bne.n	800d392 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f9a0 	bl	800d6d8 <USB_CoreReset>
 800d398:	4603      	mov	r3, r0
 800d39a:	73fb      	strb	r3, [r7, #15]
 800d39c:	e01a      	b.n	800d3d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f994 	bl	800d6d8 <USB_CoreReset>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d3b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d106      	bne.n	800d3c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	639a      	str	r2, [r3, #56]	; 0x38
 800d3c6:	e005      	b.n	800d3d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d10b      	bne.n	800d3f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	f043 0206 	orr.w	r2, r3, #6
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f043 0220 	orr.w	r2, r3, #32
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3710      	adds	r7, #16
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3fe:	b004      	add	sp, #16
 800d400:	4770      	bx	lr

0800d402 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d402:	b480      	push	{r7}
 800d404:	b083      	sub	sp, #12
 800d406:	af00      	add	r7, sp, #0
 800d408:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	f043 0201 	orr.w	r2, r3, #1
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	370c      	adds	r7, #12
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d424:	b480      	push	{r7}
 800d426:	b083      	sub	sp, #12
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	f023 0201 	bic.w	r2, r3, #1
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d438:	2300      	movs	r3, #0
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr

0800d446 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b084      	sub	sp, #16
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
 800d44e:	460b      	mov	r3, r1
 800d450:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d452:	2300      	movs	r3, #0
 800d454:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d462:	78fb      	ldrb	r3, [r7, #3]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d115      	bne.n	800d494 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68db      	ldr	r3, [r3, #12]
 800d46c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d474:	2001      	movs	r0, #1
 800d476:	f7f7 fa09 	bl	800488c <HAL_Delay>
      ms++;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3301      	adds	r3, #1
 800d47e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f91a 	bl	800d6ba <USB_GetMode>
 800d486:	4603      	mov	r3, r0
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d01e      	beq.n	800d4ca <USB_SetCurrentMode+0x84>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b31      	cmp	r3, #49	; 0x31
 800d490:	d9f0      	bls.n	800d474 <USB_SetCurrentMode+0x2e>
 800d492:	e01a      	b.n	800d4ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d494:	78fb      	ldrb	r3, [r7, #3]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d115      	bne.n	800d4c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	f7f7 f9f0 	bl	800488c <HAL_Delay>
      ms++;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f901 	bl	800d6ba <USB_GetMode>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d005      	beq.n	800d4ca <USB_SetCurrentMode+0x84>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b31      	cmp	r3, #49	; 0x31
 800d4c2:	d9f0      	bls.n	800d4a6 <USB_SetCurrentMode+0x60>
 800d4c4:	e001      	b.n	800d4ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e005      	b.n	800d4d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2b32      	cmp	r3, #50	; 0x32
 800d4ce:	d101      	bne.n	800d4d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e000      	b.n	800d4d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
	...

0800d4e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	019b      	lsls	r3, r3, #6
 800d4f2:	f043 0220 	orr.w	r2, r3, #32
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	4a08      	ldr	r2, [pc, #32]	; (800d524 <USB_FlushTxFifo+0x44>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d901      	bls.n	800d50a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800d506:	2303      	movs	r3, #3
 800d508:	e006      	b.n	800d518 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	f003 0320 	and.w	r3, r3, #32
 800d512:	2b20      	cmp	r3, #32
 800d514:	d0f1      	beq.n	800d4fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3714      	adds	r7, #20
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr
 800d524:	00030d40 	.word	0x00030d40

0800d528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2210      	movs	r2, #16
 800d538:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3301      	adds	r3, #1
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	4a08      	ldr	r2, [pc, #32]	; (800d564 <USB_FlushRxFifo+0x3c>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d901      	bls.n	800d54a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e006      	b.n	800d558 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	691b      	ldr	r3, [r3, #16]
 800d54e:	f003 0310 	and.w	r3, r3, #16
 800d552:	2b10      	cmp	r3, #16
 800d554:	d0f1      	beq.n	800d53a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3714      	adds	r7, #20
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr
 800d564:	00030d40 	.word	0x00030d40

0800d568 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d568:	b480      	push	{r7}
 800d56a:	b089      	sub	sp, #36	; 0x24
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	4611      	mov	r1, r2
 800d574:	461a      	mov	r2, r3
 800d576:	460b      	mov	r3, r1
 800d578:	71fb      	strb	r3, [r7, #7]
 800d57a:	4613      	mov	r3, r2
 800d57c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d586:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d123      	bne.n	800d5d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d58e:	88bb      	ldrh	r3, [r7, #4]
 800d590:	3303      	adds	r3, #3
 800d592:	089b      	lsrs	r3, r3, #2
 800d594:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d596:	2300      	movs	r3, #0
 800d598:	61bb      	str	r3, [r7, #24]
 800d59a:	e018      	b.n	800d5ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d59c:	79fb      	ldrb	r3, [r7, #7]
 800d59e:	031a      	lsls	r2, r3, #12
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d5c8:	69bb      	ldr	r3, [r7, #24]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	61bb      	str	r3, [r7, #24]
 800d5ce:	69ba      	ldr	r2, [r7, #24]
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d3e2      	bcc.n	800d59c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3724      	adds	r7, #36	; 0x24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b08b      	sub	sp, #44	; 0x2c
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d5fa:	88fb      	ldrh	r3, [r7, #6]
 800d5fc:	089b      	lsrs	r3, r3, #2
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d602:	88fb      	ldrh	r3, [r7, #6]
 800d604:	f003 0303 	and.w	r3, r3, #3
 800d608:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d60a:	2300      	movs	r3, #0
 800d60c:	623b      	str	r3, [r7, #32]
 800d60e:	e014      	b.n	800d63a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61e:	3301      	adds	r3, #1
 800d620:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	3301      	adds	r3, #1
 800d626:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	3301      	adds	r3, #1
 800d62c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	3301      	adds	r3, #1
 800d632:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d634:	6a3b      	ldr	r3, [r7, #32]
 800d636:	3301      	adds	r3, #1
 800d638:	623b      	str	r3, [r7, #32]
 800d63a:	6a3a      	ldr	r2, [r7, #32]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d3e6      	bcc.n	800d610 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d642:	8bfb      	ldrh	r3, [r7, #30]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01e      	beq.n	800d686 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d648:	2300      	movs	r3, #0
 800d64a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d652:	461a      	mov	r2, r3
 800d654:	f107 0310 	add.w	r3, r7, #16
 800d658:	6812      	ldr	r2, [r2, #0]
 800d65a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	b2db      	uxtb	r3, r3
 800d662:	00db      	lsls	r3, r3, #3
 800d664:	fa22 f303 	lsr.w	r3, r2, r3
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66c:	701a      	strb	r2, [r3, #0]
      i++;
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	3301      	adds	r3, #1
 800d672:	623b      	str	r3, [r7, #32]
      pDest++;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	3301      	adds	r3, #1
 800d678:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d67a:	8bfb      	ldrh	r3, [r7, #30]
 800d67c:	3b01      	subs	r3, #1
 800d67e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d680:	8bfb      	ldrh	r3, [r7, #30]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1ea      	bne.n	800d65c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d688:	4618      	mov	r0, r3
 800d68a:	372c      	adds	r7, #44	; 0x2c
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3714      	adds	r7, #20
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr

0800d6ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d6ba:	b480      	push	{r7}
 800d6bc:	b083      	sub	sp, #12
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	f003 0301 	and.w	r3, r3, #1
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
	...

0800d6d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b085      	sub	sp, #20
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]
 800d6ea:	4a13      	ldr	r2, [pc, #76]	; (800d738 <USB_CoreReset+0x60>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d901      	bls.n	800d6f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	e01a      	b.n	800d72a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	daf3      	bge.n	800d6e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	f043 0201 	orr.w	r2, r3, #1
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	3301      	adds	r3, #1
 800d710:	60fb      	str	r3, [r7, #12]
 800d712:	4a09      	ldr	r2, [pc, #36]	; (800d738 <USB_CoreReset+0x60>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d901      	bls.n	800d71c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800d718:	2303      	movs	r3, #3
 800d71a:	e006      	b.n	800d72a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	f003 0301 	and.w	r3, r3, #1
 800d724:	2b01      	cmp	r3, #1
 800d726:	d0f1      	beq.n	800d70c <USB_CoreReset+0x34>

  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	00030d40 	.word	0x00030d40

0800d73c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d73c:	b084      	sub	sp, #16
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
 800d746:	f107 001c 	add.w	r0, r7, #28
 800d74a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d758:	461a      	mov	r2, r3
 800d75a:	2300      	movs	r3, #0
 800d75c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d762:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d018      	beq.n	800d7c0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d790:	2b01      	cmp	r3, #1
 800d792:	d10a      	bne.n	800d7aa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	68ba      	ldr	r2, [r7, #8]
 800d79e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7a2:	f043 0304 	orr.w	r3, r3, #4
 800d7a6:	6013      	str	r3, [r2, #0]
 800d7a8:	e014      	b.n	800d7d4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68ba      	ldr	r2, [r7, #8]
 800d7b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7b8:	f023 0304 	bic.w	r3, r3, #4
 800d7bc:	6013      	str	r3, [r2, #0]
 800d7be:	e009      	b.n	800d7d4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7ce:	f023 0304 	bic.w	r3, r3, #4
 800d7d2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d7d4:	2110      	movs	r1, #16
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7ff fe82 	bl	800d4e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7ff fea3 	bl	800d528 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	60fb      	str	r3, [r7, #12]
 800d7e6:	e015      	b.n	800d814 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	015a      	lsls	r2, r3, #5
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7fa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	015a      	lsls	r2, r3, #5
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	4413      	add	r3, r2
 800d804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d808:	461a      	mov	r2, r3
 800d80a:	2300      	movs	r3, #0
 800d80c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3301      	adds	r3, #1
 800d812:	60fb      	str	r3, [r7, #12]
 800d814:	6a3b      	ldr	r3, [r7, #32]
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d3e5      	bcc.n	800d7e8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d828:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d832:	2b00      	cmp	r3, #0
 800d834:	d00b      	beq.n	800d84e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d83c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a13      	ldr	r2, [pc, #76]	; (800d890 <USB_HostInit+0x154>)
 800d842:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a13      	ldr	r2, [pc, #76]	; (800d894 <USB_HostInit+0x158>)
 800d848:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d84c:	e009      	b.n	800d862 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2280      	movs	r2, #128	; 0x80
 800d852:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a10      	ldr	r2, [pc, #64]	; (800d898 <USB_HostInit+0x15c>)
 800d858:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a0f      	ldr	r2, [pc, #60]	; (800d89c <USB_HostInit+0x160>)
 800d85e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	2b00      	cmp	r3, #0
 800d866:	d105      	bne.n	800d874 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	f043 0210 	orr.w	r2, r3, #16
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	699a      	ldr	r2, [r3, #24]
 800d878:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <USB_HostInit+0x164>)
 800d87a:	4313      	orrs	r3, r2
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d880:	2300      	movs	r3, #0
}
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d88c:	b004      	add	sp, #16
 800d88e:	4770      	bx	lr
 800d890:	01000200 	.word	0x01000200
 800d894:	00e00300 	.word	0x00e00300
 800d898:	00600080 	.word	0x00600080
 800d89c:	004000e0 	.word	0x004000e0
 800d8a0:	a3200008 	.word	0xa3200008

0800d8a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d8c2:	f023 0303 	bic.w	r3, r3, #3
 800d8c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	78fb      	ldrb	r3, [r7, #3]
 800d8d2:	f003 0303 	and.w	r3, r3, #3
 800d8d6:	68f9      	ldr	r1, [r7, #12]
 800d8d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d107      	bne.n	800d8f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d8f2:	6053      	str	r3, [r2, #4]
 800d8f4:	e009      	b.n	800d90a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d8f6:	78fb      	ldrb	r3, [r7, #3]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d106      	bne.n	800d90a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d902:	461a      	mov	r2, r3
 800d904:	f241 7370 	movw	r3, #6000	; 0x1770
 800d908:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d924:	2300      	movs	r3, #0
 800d926:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d938:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d946:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d948:	2064      	movs	r0, #100	; 0x64
 800d94a:	f7f6 ff9f 	bl	800488c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d956:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d95a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d95c:	200a      	movs	r0, #10
 800d95e:	f7f6 ff95 	bl	800488c <HAL_Delay>

  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d97c:	2300      	movs	r3, #0
 800d97e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d990:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d109      	bne.n	800d9b0 <USB_DriveVbus+0x44>
 800d99c:	78fb      	ldrb	r3, [r7, #3]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d106      	bne.n	800d9b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d9aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d9b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9ba:	d109      	bne.n	800d9d0 <USB_DriveVbus+0x64>
 800d9bc:	78fb      	ldrb	r3, [r7, #3]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d106      	bne.n	800d9d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	68fa      	ldr	r2, [r7, #12]
 800d9c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d9ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b085      	sub	sp, #20
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	0c5b      	lsrs	r3, r3, #17
 800d9fc:	f003 0303 	and.w	r3, r3, #3
}
 800da00:	4618      	mov	r0, r3
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr

0800da0c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	b29b      	uxth	r3, r3
}
 800da22:	4618      	mov	r0, r3
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
	...

0800da30 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b088      	sub	sp, #32
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	4608      	mov	r0, r1
 800da3a:	4611      	mov	r1, r2
 800da3c:	461a      	mov	r2, r3
 800da3e:	4603      	mov	r3, r0
 800da40:	70fb      	strb	r3, [r7, #3]
 800da42:	460b      	mov	r3, r1
 800da44:	70bb      	strb	r3, [r7, #2]
 800da46:	4613      	mov	r3, r2
 800da48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800da52:	78fb      	ldrb	r3, [r7, #3]
 800da54:	015a      	lsls	r2, r3, #5
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	4413      	add	r3, r2
 800da5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da5e:	461a      	mov	r2, r3
 800da60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800da66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d87e      	bhi.n	800db6c <USB_HC_Init+0x13c>
 800da6e:	a201      	add	r2, pc, #4	; (adr r2, 800da74 <USB_HC_Init+0x44>)
 800da70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da74:	0800da85 	.word	0x0800da85
 800da78:	0800db2f 	.word	0x0800db2f
 800da7c:	0800da85 	.word	0x0800da85
 800da80:	0800daf1 	.word	0x0800daf1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800da84:	78fb      	ldrb	r3, [r7, #3]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da90:	461a      	mov	r2, r3
 800da92:	f240 439d 	movw	r3, #1181	; 0x49d
 800da96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800da98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	da10      	bge.n	800dac2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	015a      	lsls	r2, r3, #5
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	4413      	add	r3, r2
 800daa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	78fa      	ldrb	r2, [r7, #3]
 800dab0:	0151      	lsls	r1, r2, #5
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	440a      	add	r2, r1
 800dab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800daba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dabe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800dac0:	e057      	b.n	800db72 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d051      	beq.n	800db72 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dace:	78fb      	ldrb	r3, [r7, #3]
 800dad0:	015a      	lsls	r2, r3, #5
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	4413      	add	r3, r2
 800dad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	78fa      	ldrb	r2, [r7, #3]
 800dade:	0151      	lsls	r1, r2, #5
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	440a      	add	r2, r1
 800dae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dae8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800daec:	60d3      	str	r3, [r2, #12]
      break;
 800daee:	e040      	b.n	800db72 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800daf0:	78fb      	ldrb	r3, [r7, #3]
 800daf2:	015a      	lsls	r2, r3, #5
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	4413      	add	r3, r2
 800daf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dafc:	461a      	mov	r2, r3
 800dafe:	f240 639d 	movw	r3, #1693	; 0x69d
 800db02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800db04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	da34      	bge.n	800db76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800db0c:	78fb      	ldrb	r3, [r7, #3]
 800db0e:	015a      	lsls	r2, r3, #5
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	4413      	add	r3, r2
 800db14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	78fa      	ldrb	r2, [r7, #3]
 800db1c:	0151      	lsls	r1, r2, #5
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	440a      	add	r2, r1
 800db22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db2a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800db2c:	e023      	b.n	800db76 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800db2e:	78fb      	ldrb	r3, [r7, #3]
 800db30:	015a      	lsls	r2, r3, #5
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	4413      	add	r3, r2
 800db36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db3a:	461a      	mov	r2, r3
 800db3c:	f240 2325 	movw	r3, #549	; 0x225
 800db40:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800db42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800db46:	2b00      	cmp	r3, #0
 800db48:	da17      	bge.n	800db7a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800db4a:	78fb      	ldrb	r3, [r7, #3]
 800db4c:	015a      	lsls	r2, r3, #5
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	4413      	add	r3, r2
 800db52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	78fa      	ldrb	r2, [r7, #3]
 800db5a:	0151      	lsls	r1, r2, #5
 800db5c:	693a      	ldr	r2, [r7, #16]
 800db5e:	440a      	add	r2, r1
 800db60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db64:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800db68:	60d3      	str	r3, [r2, #12]
      }
      break;
 800db6a:	e006      	b.n	800db7a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	77fb      	strb	r3, [r7, #31]
      break;
 800db70:	e004      	b.n	800db7c <USB_HC_Init+0x14c>
      break;
 800db72:	bf00      	nop
 800db74:	e002      	b.n	800db7c <USB_HC_Init+0x14c>
      break;
 800db76:	bf00      	nop
 800db78:	e000      	b.n	800db7c <USB_HC_Init+0x14c>
      break;
 800db7a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db82:	699a      	ldr	r2, [r3, #24]
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	f003 030f 	and.w	r3, r3, #15
 800db8a:	2101      	movs	r1, #1
 800db8c:	fa01 f303 	lsl.w	r3, r1, r3
 800db90:	6939      	ldr	r1, [r7, #16]
 800db92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800db96:	4313      	orrs	r3, r2
 800db98:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	699b      	ldr	r3, [r3, #24]
 800db9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dba6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	da03      	bge.n	800dbb6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dbae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbb2:	61bb      	str	r3, [r7, #24]
 800dbb4:	e001      	b.n	800dbba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ff0f 	bl	800d9de <USB_GetHostSpeed>
 800dbc0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dbc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d106      	bne.n	800dbd8 <USB_HC_Init+0x1a8>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d003      	beq.n	800dbd8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dbd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	e001      	b.n	800dbdc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dbdc:	787b      	ldrb	r3, [r7, #1]
 800dbde:	059b      	lsls	r3, r3, #22
 800dbe0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dbe4:	78bb      	ldrb	r3, [r7, #2]
 800dbe6:	02db      	lsls	r3, r3, #11
 800dbe8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dbec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dbee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dbf2:	049b      	lsls	r3, r3, #18
 800dbf4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dbf8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dbfa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800dbfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dc00:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dc02:	69bb      	ldr	r3, [r7, #24]
 800dc04:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dc06:	78fb      	ldrb	r3, [r7, #3]
 800dc08:	0159      	lsls	r1, r3, #5
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	440b      	add	r3, r1
 800dc0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc12:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dc18:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800dc1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	d10f      	bne.n	800dc42 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800dc22:	78fb      	ldrb	r3, [r7, #3]
 800dc24:	015a      	lsls	r2, r3, #5
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	4413      	add	r3, r2
 800dc2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	78fa      	ldrb	r2, [r7, #3]
 800dc32:	0151      	lsls	r1, r2, #5
 800dc34:	693a      	ldr	r2, [r7, #16]
 800dc36:	440a      	add	r2, r1
 800dc38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dc3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc40:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dc42:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3720      	adds	r7, #32
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b08c      	sub	sp, #48	; 0x30
 800dc50:	af02      	add	r7, sp, #8
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	4613      	mov	r3, r2
 800dc58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	785b      	ldrb	r3, [r3, #1]
 800dc62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800dc64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dc68:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d02d      	beq.n	800dcd2 <USB_HC_StartXfer+0x86>
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	791b      	ldrb	r3, [r3, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d129      	bne.n	800dcd2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d117      	bne.n	800dcb4 <USB_HC_StartXfer+0x68>
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	79db      	ldrb	r3, [r3, #7]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d003      	beq.n	800dc94 <USB_HC_StartXfer+0x48>
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	79db      	ldrb	r3, [r3, #7]
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	d10f      	bne.n	800dcb4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	015a      	lsls	r2, r3, #5
 800dc98:	6a3b      	ldr	r3, [r7, #32]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	69fa      	ldr	r2, [r7, #28]
 800dca4:	0151      	lsls	r1, r2, #5
 800dca6:	6a3a      	ldr	r2, [r7, #32]
 800dca8:	440a      	add	r2, r1
 800dcaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcb2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d10b      	bne.n	800dcd2 <USB_HC_StartXfer+0x86>
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	795b      	ldrb	r3, [r3, #5]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d107      	bne.n	800dcd2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	785b      	ldrb	r3, [r3, #1]
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 fa2f 	bl	800e12c <USB_DoPing>
      return HAL_OK;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e0f8      	b.n	800dec4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	695b      	ldr	r3, [r3, #20]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d018      	beq.n	800dd0c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	695b      	ldr	r3, [r3, #20]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	8912      	ldrh	r2, [r2, #8]
 800dce2:	4413      	add	r3, r2
 800dce4:	3b01      	subs	r3, #1
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	8912      	ldrh	r2, [r2, #8]
 800dcea:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800dcf0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcf2:	8b7b      	ldrh	r3, [r7, #26]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d90b      	bls.n	800dd10 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800dcf8:	8b7b      	ldrh	r3, [r7, #26]
 800dcfa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dcfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dcfe:	68ba      	ldr	r2, [r7, #8]
 800dd00:	8912      	ldrh	r2, [r2, #8]
 800dd02:	fb02 f203 	mul.w	r2, r2, r3
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	611a      	str	r2, [r3, #16]
 800dd0a:	e001      	b.n	800dd10 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	78db      	ldrb	r3, [r3, #3]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d007      	beq.n	800dd28 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800dd18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	8912      	ldrh	r2, [r2, #8]
 800dd1e:	fb02 f203 	mul.w	r2, r2, r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	611a      	str	r2, [r3, #16]
 800dd26:	e003      	b.n	800dd30 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	695a      	ldr	r2, [r3, #20]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	691b      	ldr	r3, [r3, #16]
 800dd34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dd38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dd3a:	04d9      	lsls	r1, r3, #19
 800dd3c:	4b63      	ldr	r3, [pc, #396]	; (800decc <USB_HC_StartXfer+0x280>)
 800dd3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dd40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	7a9b      	ldrb	r3, [r3, #10]
 800dd46:	075b      	lsls	r3, r3, #29
 800dd48:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dd4c:	69f9      	ldr	r1, [r7, #28]
 800dd4e:	0148      	lsls	r0, r1, #5
 800dd50:	6a39      	ldr	r1, [r7, #32]
 800dd52:	4401      	add	r1, r0
 800dd54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dd58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800dd5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dd5c:	79fb      	ldrb	r3, [r7, #7]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d009      	beq.n	800dd76 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	68d9      	ldr	r1, [r3, #12]
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	015a      	lsls	r2, r3, #5
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd72:	460a      	mov	r2, r1
 800dd74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dd76:	6a3b      	ldr	r3, [r7, #32]
 800dd78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	bf0c      	ite	eq
 800dd86:	2301      	moveq	r3, #1
 800dd88:	2300      	movne	r3, #0
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	015a      	lsls	r2, r3, #5
 800dd92:	6a3b      	ldr	r3, [r7, #32]
 800dd94:	4413      	add	r3, r2
 800dd96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	69fa      	ldr	r2, [r7, #28]
 800dd9e:	0151      	lsls	r1, r2, #5
 800dda0:	6a3a      	ldr	r2, [r7, #32]
 800dda2:	440a      	add	r2, r1
 800dda4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dda8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ddac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	015a      	lsls	r2, r3, #5
 800ddb2:	6a3b      	ldr	r3, [r7, #32]
 800ddb4:	4413      	add	r3, r2
 800ddb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	7e7b      	ldrb	r3, [r7, #25]
 800ddbe:	075b      	lsls	r3, r3, #29
 800ddc0:	69f9      	ldr	r1, [r7, #28]
 800ddc2:	0148      	lsls	r0, r1, #5
 800ddc4:	6a39      	ldr	r1, [r7, #32]
 800ddc6:	4401      	add	r1, r0
 800ddc8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	015a      	lsls	r2, r3, #5
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dde6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	78db      	ldrb	r3, [r3, #3]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d004      	beq.n	800ddfa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddf6:	613b      	str	r3, [r7, #16]
 800ddf8:	e003      	b.n	800de02 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800de00:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800de08:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	015a      	lsls	r2, r3, #5
 800de0e:	6a3b      	ldr	r3, [r7, #32]
 800de10:	4413      	add	r3, r2
 800de12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de16:	461a      	mov	r2, r3
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800de1c:	79fb      	ldrb	r3, [r7, #7]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d001      	beq.n	800de26 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	e04e      	b.n	800dec4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	78db      	ldrb	r3, [r3, #3]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d149      	bne.n	800dec2 <USB_HC_StartXfer+0x276>
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d045      	beq.n	800dec2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	79db      	ldrb	r3, [r3, #7]
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d830      	bhi.n	800dea0 <USB_HC_StartXfer+0x254>
 800de3e:	a201      	add	r2, pc, #4	; (adr r2, 800de44 <USB_HC_StartXfer+0x1f8>)
 800de40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de44:	0800de55 	.word	0x0800de55
 800de48:	0800de79 	.word	0x0800de79
 800de4c:	0800de55 	.word	0x0800de55
 800de50:	0800de79 	.word	0x0800de79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	3303      	adds	r3, #3
 800de5a:	089b      	lsrs	r3, r3, #2
 800de5c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800de5e:	8afa      	ldrh	r2, [r7, #22]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de64:	b29b      	uxth	r3, r3
 800de66:	429a      	cmp	r2, r3
 800de68:	d91c      	bls.n	800dea4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	f043 0220 	orr.w	r2, r3, #32
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	619a      	str	r2, [r3, #24]
        }
        break;
 800de76:	e015      	b.n	800dea4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	695b      	ldr	r3, [r3, #20]
 800de7c:	3303      	adds	r3, #3
 800de7e:	089b      	lsrs	r3, r3, #2
 800de80:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800de82:	8afa      	ldrh	r2, [r7, #22]
 800de84:	6a3b      	ldr	r3, [r7, #32]
 800de86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	429a      	cmp	r2, r3
 800de90:	d90a      	bls.n	800dea8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	699b      	ldr	r3, [r3, #24]
 800de96:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	619a      	str	r2, [r3, #24]
        }
        break;
 800de9e:	e003      	b.n	800dea8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800dea0:	bf00      	nop
 800dea2:	e002      	b.n	800deaa <USB_HC_StartXfer+0x25e>
        break;
 800dea4:	bf00      	nop
 800dea6:	e000      	b.n	800deaa <USB_HC_StartXfer+0x25e>
        break;
 800dea8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	68d9      	ldr	r1, [r3, #12]
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	785a      	ldrb	r2, [r3, #1]
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	695b      	ldr	r3, [r3, #20]
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	2000      	movs	r0, #0
 800deba:	9000      	str	r0, [sp, #0]
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f7ff fb53 	bl	800d568 <USB_WritePacket>
  }

  return HAL_OK;
 800dec2:	2300      	movs	r3, #0
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	3728      	adds	r7, #40	; 0x28
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	1ff80000 	.word	0x1ff80000

0800ded0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dee2:	695b      	ldr	r3, [r3, #20]
 800dee4:	b29b      	uxth	r3, r3
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800def2:	b480      	push	{r7}
 800def4:	b089      	sub	sp, #36	; 0x24
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	460b      	mov	r3, r1
 800defc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800df02:	78fb      	ldrb	r3, [r7, #3]
 800df04:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800df06:	2300      	movs	r3, #0
 800df08:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	015a      	lsls	r2, r3, #5
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	4413      	add	r3, r2
 800df12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	0c9b      	lsrs	r3, r3, #18
 800df1a:	f003 0303 	and.w	r3, r3, #3
 800df1e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	015a      	lsls	r2, r3, #5
 800df24:	69bb      	ldr	r3, [r7, #24]
 800df26:	4413      	add	r3, r2
 800df28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	0fdb      	lsrs	r3, r3, #31
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f003 0320 	and.w	r3, r3, #32
 800df3e:	2b20      	cmp	r3, #32
 800df40:	d104      	bne.n	800df4c <USB_HC_Halt+0x5a>
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	e0e8      	b.n	800e11e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <USB_HC_Halt+0x66>
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	2b02      	cmp	r3, #2
 800df56:	d173      	bne.n	800e040 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800df58:	697b      	ldr	r3, [r7, #20]
 800df5a:	015a      	lsls	r2, r3, #5
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	4413      	add	r3, r2
 800df60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	0151      	lsls	r1, r2, #5
 800df6a:	69ba      	ldr	r2, [r7, #24]
 800df6c:	440a      	add	r2, r1
 800df6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df76:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	f003 0320 	and.w	r3, r3, #32
 800df80:	2b00      	cmp	r3, #0
 800df82:	f040 80cb 	bne.w	800e11c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d143      	bne.n	800e01a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	015a      	lsls	r2, r3, #5
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	4413      	add	r3, r2
 800df9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	697a      	ldr	r2, [r7, #20]
 800dfa2:	0151      	lsls	r1, r2, #5
 800dfa4:	69ba      	ldr	r2, [r7, #24]
 800dfa6:	440a      	add	r2, r1
 800dfa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfb0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	015a      	lsls	r2, r3, #5
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	4413      	add	r3, r2
 800dfba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	0151      	lsls	r1, r2, #5
 800dfc4:	69ba      	ldr	r2, [r7, #24]
 800dfc6:	440a      	add	r2, r1
 800dfc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dfd0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	015a      	lsls	r2, r3, #5
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	4413      	add	r3, r2
 800dfda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	697a      	ldr	r2, [r7, #20]
 800dfe2:	0151      	lsls	r1, r2, #5
 800dfe4:	69ba      	ldr	r2, [r7, #24]
 800dfe6:	440a      	add	r2, r1
 800dfe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dff0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	3301      	adds	r3, #1
 800dff6:	61fb      	str	r3, [r7, #28]
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dffe:	d81d      	bhi.n	800e03c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	015a      	lsls	r2, r3, #5
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	4413      	add	r3, r2
 800e008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e016:	d0ec      	beq.n	800dff2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e018:	e080      	b.n	800e11c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	015a      	lsls	r2, r3, #5
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	4413      	add	r3, r2
 800e022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	0151      	lsls	r1, r2, #5
 800e02c:	69ba      	ldr	r2, [r7, #24]
 800e02e:	440a      	add	r2, r1
 800e030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e038:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e03a:	e06f      	b.n	800e11c <USB_HC_Halt+0x22a>
            break;
 800e03c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e03e:	e06d      	b.n	800e11c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	015a      	lsls	r2, r3, #5
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	4413      	add	r3, r2
 800e048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	697a      	ldr	r2, [r7, #20]
 800e050:	0151      	lsls	r1, r2, #5
 800e052:	69ba      	ldr	r2, [r7, #24]
 800e054:	440a      	add	r2, r1
 800e056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e05a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e05e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e060:	69bb      	ldr	r3, [r7, #24]
 800e062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d143      	bne.n	800e0f8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	015a      	lsls	r2, r3, #5
 800e074:	69bb      	ldr	r3, [r7, #24]
 800e076:	4413      	add	r3, r2
 800e078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	697a      	ldr	r2, [r7, #20]
 800e080:	0151      	lsls	r1, r2, #5
 800e082:	69ba      	ldr	r2, [r7, #24]
 800e084:	440a      	add	r2, r1
 800e086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e08a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e08e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	015a      	lsls	r2, r3, #5
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	4413      	add	r3, r2
 800e098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	0151      	lsls	r1, r2, #5
 800e0a2:	69ba      	ldr	r2, [r7, #24]
 800e0a4:	440a      	add	r2, r1
 800e0a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e0aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e0ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	015a      	lsls	r2, r3, #5
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	0151      	lsls	r1, r2, #5
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	440a      	add	r2, r1
 800e0c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e0ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e0ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	61fb      	str	r3, [r7, #28]
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e0dc:	d81d      	bhi.n	800e11a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	015a      	lsls	r2, r3, #5
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0f4:	d0ec      	beq.n	800e0d0 <USB_HC_Halt+0x1de>
 800e0f6:	e011      	b.n	800e11c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	015a      	lsls	r2, r3, #5
 800e0fc:	69bb      	ldr	r3, [r7, #24]
 800e0fe:	4413      	add	r3, r2
 800e100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	0151      	lsls	r1, r2, #5
 800e10a:	69ba      	ldr	r2, [r7, #24]
 800e10c:	440a      	add	r2, r1
 800e10e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e116:	6013      	str	r3, [r2, #0]
 800e118:	e000      	b.n	800e11c <USB_HC_Halt+0x22a>
          break;
 800e11a:	bf00      	nop
    }
  }

  return HAL_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3724      	adds	r7, #36	; 0x24
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr
	...

0800e12c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b087      	sub	sp, #28
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	460b      	mov	r3, r1
 800e136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e13c:	78fb      	ldrb	r3, [r7, #3]
 800e13e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e140:	2301      	movs	r3, #1
 800e142:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	04da      	lsls	r2, r3, #19
 800e148:	4b15      	ldr	r3, [pc, #84]	; (800e1a0 <USB_DoPing+0x74>)
 800e14a:	4013      	ands	r3, r2
 800e14c:	693a      	ldr	r2, [r7, #16]
 800e14e:	0151      	lsls	r1, r2, #5
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	440a      	add	r2, r1
 800e154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e15c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	015a      	lsls	r2, r3, #5
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	4413      	add	r3, r2
 800e166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e174:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e17c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	015a      	lsls	r2, r3, #5
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	4413      	add	r3, r2
 800e186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e18a:	461a      	mov	r2, r3
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	371c      	adds	r7, #28
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	1ff80000 	.word	0x1ff80000

0800e1a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b086      	sub	sp, #24
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff f935 	bl	800d424 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e1ba:	2110      	movs	r1, #16
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7ff f98f 	bl	800d4e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f7ff f9b0 	bl	800d528 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	e01f      	b.n	800e20e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	015a      	lsls	r2, r3, #5
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e1e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e1f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	015a      	lsls	r2, r3, #5
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e202:	461a      	mov	r2, r3
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	3301      	adds	r3, #1
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	2b0f      	cmp	r3, #15
 800e212:	d9dc      	bls.n	800e1ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e214:	2300      	movs	r3, #0
 800e216:	613b      	str	r3, [r7, #16]
 800e218:	e034      	b.n	800e284 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	015a      	lsls	r2, r3, #5
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	4413      	add	r3, r2
 800e222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e230:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e238:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e240:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	015a      	lsls	r2, r3, #5
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	4413      	add	r3, r2
 800e24a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e24e:	461a      	mov	r2, r3
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	3301      	adds	r3, #1
 800e258:	617b      	str	r3, [r7, #20]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e260:	d80c      	bhi.n	800e27c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	015a      	lsls	r2, r3, #5
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4413      	add	r3, r2
 800e26a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e278:	d0ec      	beq.n	800e254 <USB_StopHost+0xb0>
 800e27a:	e000      	b.n	800e27e <USB_StopHost+0xda>
        break;
 800e27c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	3301      	adds	r3, #1
 800e282:	613b      	str	r3, [r7, #16]
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	2b0f      	cmp	r3, #15
 800e288:	d9c7      	bls.n	800e21a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e290:	461a      	mov	r2, r3
 800e292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e296:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e29e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f7ff f8ae 	bl	800d402 <USB_EnableGlobalInt>

  return HAL_OK;
 800e2a6:	2300      	movs	r3, #0
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e2b0:	b590      	push	{r4, r7, lr}
 800e2b2:	b089      	sub	sp, #36	; 0x24
 800e2b4:	af04      	add	r7, sp, #16
 800e2b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	2102      	movs	r1, #2
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 fc66 	bl	800eb90 <USBH_FindInterface>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e2c8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ca:	2bff      	cmp	r3, #255	; 0xff
 800e2cc:	d002      	beq.n	800e2d4 <USBH_CDC_InterfaceInit+0x24>
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d901      	bls.n	800e2d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	e13d      	b.n	800e554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fc3b 	bl	800eb58 <USBH_SelectInterface>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e2e6:	7bbb      	ldrb	r3, [r7, #14]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	e131      	b.n	800e554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e2f6:	2050      	movs	r0, #80	; 0x50
 800e2f8:	f002 fa00 	bl	80106fc <malloc>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e306:	69db      	ldr	r3, [r3, #28]
 800e308:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e310:	2302      	movs	r3, #2
 800e312:	e11f      	b.n	800e554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e314:	2250      	movs	r2, #80	; 0x50
 800e316:	2100      	movs	r1, #0
 800e318:	68b8      	ldr	r0, [r7, #8]
 800e31a:	f002 f9ff 	bl	801071c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
 800e320:	687a      	ldr	r2, [r7, #4]
 800e322:	211a      	movs	r1, #26
 800e324:	fb01 f303 	mul.w	r3, r1, r3
 800e328:	4413      	add	r3, r2
 800e32a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	b25b      	sxtb	r3, r3
 800e332:	2b00      	cmp	r3, #0
 800e334:	da15      	bge.n	800e362 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e336:	7bfb      	ldrb	r3, [r7, #15]
 800e338:	687a      	ldr	r2, [r7, #4]
 800e33a:	211a      	movs	r1, #26
 800e33c:	fb01 f303 	mul.w	r3, r1, r3
 800e340:	4413      	add	r3, r2
 800e342:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e346:	781a      	ldrb	r2, [r3, #0]
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	211a      	movs	r1, #26
 800e352:	fb01 f303 	mul.w	r3, r1, r3
 800e356:	4413      	add	r3, r2
 800e358:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e35c:	881a      	ldrh	r2, [r3, #0]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	785b      	ldrb	r3, [r3, #1]
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f001 fe32 	bl	800ffd2 <USBH_AllocPipe>
 800e36e:	4603      	mov	r3, r0
 800e370:	461a      	mov	r2, r3
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	7819      	ldrb	r1, [r3, #0]
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	7858      	ldrb	r0, [r3, #1]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	8952      	ldrh	r2, [r2, #10]
 800e38e:	9202      	str	r2, [sp, #8]
 800e390:	2203      	movs	r2, #3
 800e392:	9201      	str	r2, [sp, #4]
 800e394:	9300      	str	r3, [sp, #0]
 800e396:	4623      	mov	r3, r4
 800e398:	4602      	mov	r2, r0
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f001 fdea 	bl	800ff74 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	781b      	ldrb	r3, [r3, #0]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f002 f8f9 	bl	80105a0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	210a      	movs	r1, #10
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fbeb 	bl	800eb90 <USBH_FindInterface>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	2bff      	cmp	r3, #255	; 0xff
 800e3c2:	d002      	beq.n	800e3ca <USBH_CDC_InterfaceInit+0x11a>
 800e3c4:	7bfb      	ldrb	r3, [r7, #15]
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d901      	bls.n	800e3ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e3ca:	2302      	movs	r3, #2
 800e3cc:	e0c2      	b.n	800e554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	211a      	movs	r1, #26
 800e3d4:	fb01 f303 	mul.w	r3, r1, r3
 800e3d8:	4413      	add	r3, r2
 800e3da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	b25b      	sxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	da16      	bge.n	800e414 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	211a      	movs	r1, #26
 800e3ec:	fb01 f303 	mul.w	r3, r1, r3
 800e3f0:	4413      	add	r3, r2
 800e3f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e3f6:	781a      	ldrb	r2, [r3, #0]
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	211a      	movs	r1, #26
 800e402:	fb01 f303 	mul.w	r3, r1, r3
 800e406:	4413      	add	r3, r2
 800e408:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e40c:	881a      	ldrh	r2, [r3, #0]
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	835a      	strh	r2, [r3, #26]
 800e412:	e015      	b.n	800e440 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e414:	7bfb      	ldrb	r3, [r7, #15]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	211a      	movs	r1, #26
 800e41a:	fb01 f303 	mul.w	r3, r1, r3
 800e41e:	4413      	add	r3, r2
 800e420:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e424:	781a      	ldrb	r2, [r3, #0]
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	211a      	movs	r1, #26
 800e430:	fb01 f303 	mul.w	r3, r1, r3
 800e434:	4413      	add	r3, r2
 800e436:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e43a:	881a      	ldrh	r2, [r3, #0]
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	211a      	movs	r1, #26
 800e446:	fb01 f303 	mul.w	r3, r1, r3
 800e44a:	4413      	add	r3, r2
 800e44c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	b25b      	sxtb	r3, r3
 800e454:	2b00      	cmp	r3, #0
 800e456:	da16      	bge.n	800e486 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e458:	7bfb      	ldrb	r3, [r7, #15]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	211a      	movs	r1, #26
 800e45e:	fb01 f303 	mul.w	r3, r1, r3
 800e462:	4413      	add	r3, r2
 800e464:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e468:	781a      	ldrb	r2, [r3, #0]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e46e:	7bfb      	ldrb	r3, [r7, #15]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	211a      	movs	r1, #26
 800e474:	fb01 f303 	mul.w	r3, r1, r3
 800e478:	4413      	add	r3, r2
 800e47a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e47e:	881a      	ldrh	r2, [r3, #0]
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	835a      	strh	r2, [r3, #26]
 800e484:	e015      	b.n	800e4b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e486:	7bfb      	ldrb	r3, [r7, #15]
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	211a      	movs	r1, #26
 800e48c:	fb01 f303 	mul.w	r3, r1, r3
 800e490:	4413      	add	r3, r2
 800e492:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e496:	781a      	ldrb	r2, [r3, #0]
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	211a      	movs	r1, #26
 800e4a2:	fb01 f303 	mul.w	r3, r1, r3
 800e4a6:	4413      	add	r3, r2
 800e4a8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e4ac:	881a      	ldrh	r2, [r3, #0]
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	7b9b      	ldrb	r3, [r3, #14]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f001 fd8a 	bl	800ffd2 <USBH_AllocPipe>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	461a      	mov	r2, r3
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	7bdb      	ldrb	r3, [r3, #15]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f001 fd80 	bl	800ffd2 <USBH_AllocPipe>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	7b59      	ldrb	r1, [r3, #13]
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	7b98      	ldrb	r0, [r3, #14]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e4ee:	68ba      	ldr	r2, [r7, #8]
 800e4f0:	8b12      	ldrh	r2, [r2, #24]
 800e4f2:	9202      	str	r2, [sp, #8]
 800e4f4:	2202      	movs	r2, #2
 800e4f6:	9201      	str	r2, [sp, #4]
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	4623      	mov	r3, r4
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f001 fd38 	bl	800ff74 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	7b19      	ldrb	r1, [r3, #12]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	7bd8      	ldrb	r0, [r3, #15]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	8b52      	ldrh	r2, [r2, #26]
 800e51c:	9202      	str	r2, [sp, #8]
 800e51e:	2202      	movs	r2, #2
 800e520:	9201      	str	r2, [sp, #4]
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	4623      	mov	r3, r4
 800e526:	4602      	mov	r2, r0
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f001 fd23 	bl	800ff74 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2200      	movs	r2, #0
 800e532:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	7b5b      	ldrb	r3, [r3, #13]
 800e53a:	2200      	movs	r2, #0
 800e53c:	4619      	mov	r1, r3
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f002 f82e 	bl	80105a0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	7b1b      	ldrb	r3, [r3, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	4619      	mov	r1, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f002 f827 	bl	80105a0 <USBH_LL_SetToggle>

  return USBH_OK;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3714      	adds	r7, #20
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd90      	pop	{r4, r7, pc}

0800e55c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b084      	sub	sp, #16
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e56a:	69db      	ldr	r3, [r3, #28]
 800e56c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00e      	beq.n	800e594 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	4619      	mov	r1, r3
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f001 fd18 	bl	800ffb2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 fd43 	bl	8010014 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	2200      	movs	r2, #0
 800e592:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	7b1b      	ldrb	r3, [r3, #12]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d00e      	beq.n	800e5ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	7b1b      	ldrb	r3, [r3, #12]
 800e5a0:	4619      	mov	r1, r3
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f001 fd05 	bl	800ffb2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	7b1b      	ldrb	r3, [r3, #12]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f001 fd30 	bl	8010014 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	7b5b      	ldrb	r3, [r3, #13]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d00e      	beq.n	800e5e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	7b5b      	ldrb	r3, [r3, #13]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f001 fcf2 	bl	800ffb2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	7b5b      	ldrb	r3, [r3, #13]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f001 fd1d 	bl	8010014 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5e6:	69db      	ldr	r3, [r3, #28]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00b      	beq.n	800e604 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e5f2:	69db      	ldr	r3, [r3, #28]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f002 f889 	bl	801070c <free>
    phost->pActiveClass->pData = 0U;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e600:	2200      	movs	r2, #0
 800e602:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e60e:	b580      	push	{r7, lr}
 800e610:	b084      	sub	sp, #16
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e61c:	69db      	ldr	r3, [r3, #28]
 800e61e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3340      	adds	r3, #64	; 0x40
 800e624:	4619      	mov	r1, r3
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f8b1 	bl	800e78e <GetLineCoding>
 800e62c:	4603      	mov	r3, r0
 800e62e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e630:	7afb      	ldrb	r3, [r7, #11]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d105      	bne.n	800e642 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e63c:	2102      	movs	r1, #2
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e642:	7afb      	ldrb	r3, [r7, #11]
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e654:	2301      	movs	r3, #1
 800e656:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e662:	69db      	ldr	r3, [r3, #28]
 800e664:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e66c:	2b04      	cmp	r3, #4
 800e66e:	d877      	bhi.n	800e760 <USBH_CDC_Process+0x114>
 800e670:	a201      	add	r2, pc, #4	; (adr r2, 800e678 <USBH_CDC_Process+0x2c>)
 800e672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e676:	bf00      	nop
 800e678:	0800e68d 	.word	0x0800e68d
 800e67c:	0800e693 	.word	0x0800e693
 800e680:	0800e6c3 	.word	0x0800e6c3
 800e684:	0800e737 	.word	0x0800e737
 800e688:	0800e745 	.word	0x0800e745
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e68c:	2300      	movs	r3, #0
 800e68e:	73fb      	strb	r3, [r7, #15]
      break;
 800e690:	e06d      	b.n	800e76e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e696:	4619      	mov	r1, r3
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f897 	bl	800e7cc <SetLineCoding>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e6a2:	7bbb      	ldrb	r3, [r7, #14]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d104      	bne.n	800e6b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e6b0:	e058      	b.n	800e764 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e6b2:	7bbb      	ldrb	r3, [r7, #14]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d055      	beq.n	800e764 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	2204      	movs	r2, #4
 800e6bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e6c0:	e050      	b.n	800e764 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	3340      	adds	r3, #64	; 0x40
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f860 	bl	800e78e <GetLineCoding>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e6d2:	7bbb      	ldrb	r3, [r7, #14]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d126      	bne.n	800e726 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6ea:	791b      	ldrb	r3, [r3, #4]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d13b      	bne.n	800e768 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d133      	bne.n	800e768 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e70a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d12b      	bne.n	800e768 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e718:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d124      	bne.n	800e768 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f958 	bl	800e9d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e724:	e020      	b.n	800e768 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e726:	7bbb      	ldrb	r3, [r7, #14]
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d01d      	beq.n	800e768 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	2204      	movs	r2, #4
 800e730:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e734:	e018      	b.n	800e768 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 f867 	bl	800e80a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f8da 	bl	800e8f6 <CDC_ProcessReception>
      break;
 800e742:	e014      	b.n	800e76e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e744:	2100      	movs	r1, #0
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 ffe3 	bl	800f712 <USBH_ClrFeature>
 800e74c:	4603      	mov	r3, r0
 800e74e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e750:	7bbb      	ldrb	r3, [r7, #14]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10a      	bne.n	800e76c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	2200      	movs	r2, #0
 800e75a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e75e:	e005      	b.n	800e76c <USBH_CDC_Process+0x120>

    default:
      break;
 800e760:	bf00      	nop
 800e762:	e004      	b.n	800e76e <USBH_CDC_Process+0x122>
      break;
 800e764:	bf00      	nop
 800e766:	e002      	b.n	800e76e <USBH_CDC_Process+0x122>
      break;
 800e768:	bf00      	nop
 800e76a:	e000      	b.n	800e76e <USBH_CDC_Process+0x122>
      break;
 800e76c:	bf00      	nop

  }

  return status;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	370c      	adds	r7, #12
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b082      	sub	sp, #8
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	22a1      	movs	r2, #161	; 0xa1
 800e79c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2221      	movs	r2, #33	; 0x21
 800e7a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2207      	movs	r2, #7
 800e7b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	2207      	movs	r2, #7
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f001 f988 	bl	800fad2 <USBH_CtlReq>
 800e7c2:	4603      	mov	r3, r0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2221      	movs	r2, #33	; 0x21
 800e7da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2220      	movs	r2, #32
 800e7e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2207      	movs	r2, #7
 800e7f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2207      	movs	r2, #7
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f001 f969 	bl	800fad2 <USBH_CtlReq>
 800e800:	4603      	mov	r3, r0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3708      	adds	r7, #8
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b086      	sub	sp, #24
 800e80e:	af02      	add	r7, sp, #8
 800e810:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e818:	69db      	ldr	r3, [r3, #28]
 800e81a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e81c:	2300      	movs	r3, #0
 800e81e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e826:	2b01      	cmp	r3, #1
 800e828:	d002      	beq.n	800e830 <CDC_ProcessTransmission+0x26>
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	d023      	beq.n	800e876 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e82e:	e05e      	b.n	800e8ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e834:	68fa      	ldr	r2, [r7, #12]
 800e836:	8b12      	ldrh	r2, [r2, #24]
 800e838:	4293      	cmp	r3, r2
 800e83a:	d90b      	bls.n	800e854 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	69d9      	ldr	r1, [r3, #28]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	8b1a      	ldrh	r2, [r3, #24]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	7b5b      	ldrb	r3, [r3, #13]
 800e848:	2001      	movs	r0, #1
 800e84a:	9000      	str	r0, [sp, #0]
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f001 fb4e 	bl	800feee <USBH_BulkSendData>
 800e852:	e00b      	b.n	800e86c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	7b5b      	ldrb	r3, [r3, #13]
 800e862:	2001      	movs	r0, #1
 800e864:	9000      	str	r0, [sp, #0]
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f001 fb41 	bl	800feee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2202      	movs	r2, #2
 800e870:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e874:	e03b      	b.n	800e8ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	7b5b      	ldrb	r3, [r3, #13]
 800e87a:	4619      	mov	r1, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f001 fe65 	bl	801054c <USBH_LL_GetURBState>
 800e882:	4603      	mov	r3, r0
 800e884:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e886:	7afb      	ldrb	r3, [r7, #11]
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d128      	bne.n	800e8de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e890:	68fa      	ldr	r2, [r7, #12]
 800e892:	8b12      	ldrh	r2, [r2, #24]
 800e894:	4293      	cmp	r3, r2
 800e896:	d90e      	bls.n	800e8b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	8b12      	ldrh	r2, [r2, #24]
 800e8a0:	1a9a      	subs	r2, r3, r2
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	69db      	ldr	r3, [r3, #28]
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	8b12      	ldrh	r2, [r2, #24]
 800e8ae:	441a      	add	r2, r3
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	61da      	str	r2, [r3, #28]
 800e8b4:	e002      	b.n	800e8bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d004      	beq.n	800e8ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e8cc:	e00e      	b.n	800e8ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 f868 	bl	800e9ac <USBH_CDC_TransmitCallback>
      break;
 800e8dc:	e006      	b.n	800e8ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800e8de:	7afb      	ldrb	r3, [r7, #11]
 800e8e0:	2b02      	cmp	r3, #2
 800e8e2:	d103      	bne.n	800e8ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e8ec:	bf00      	nop
  }
}
 800e8ee:	bf00      	nop
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b086      	sub	sp, #24
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e904:	69db      	ldr	r3, [r3, #28]
 800e906:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e908:	2300      	movs	r3, #0
 800e90a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e912:	2b03      	cmp	r3, #3
 800e914:	d002      	beq.n	800e91c <CDC_ProcessReception+0x26>
 800e916:	2b04      	cmp	r3, #4
 800e918:	d00e      	beq.n	800e938 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e91a:	e043      	b.n	800e9a4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	6a19      	ldr	r1, [r3, #32]
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	8b5a      	ldrh	r2, [r3, #26]
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	7b1b      	ldrb	r3, [r3, #12]
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f001 fb05 	bl	800ff38 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	2204      	movs	r2, #4
 800e932:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e936:	e035      	b.n	800e9a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	7b1b      	ldrb	r3, [r3, #12]
 800e93c:	4619      	mov	r1, r3
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f001 fe04 	bl	801054c <USBH_LL_GetURBState>
 800e944:	4603      	mov	r3, r0
 800e946:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e948:	7cfb      	ldrb	r3, [r7, #19]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d129      	bne.n	800e9a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	7b1b      	ldrb	r3, [r3, #12]
 800e952:	4619      	mov	r1, r3
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f001 fd67 	bl	8010428 <USBH_LL_GetLastXferSize>
 800e95a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	429a      	cmp	r2, r3
 800e964:	d016      	beq.n	800e994 <CDC_ProcessReception+0x9e>
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	8b5b      	ldrh	r3, [r3, #26]
 800e96a:	461a      	mov	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	4293      	cmp	r3, r2
 800e970:	d910      	bls.n	800e994 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	1ad2      	subs	r2, r2, r3
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	6a1a      	ldr	r2, [r3, #32]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	441a      	add	r2, r3
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e98a:	697b      	ldr	r3, [r7, #20]
 800e98c:	2203      	movs	r2, #3
 800e98e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e992:	e006      	b.n	800e9a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f80f 	bl	800e9c0 <USBH_CDC_ReceiveCallback>
      break;
 800e9a2:	bf00      	nop
  }
}
 800e9a4:	bf00      	nop
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e9b4:	bf00      	nop
 800e9b6:	370c      	adds	r7, #12
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9be:	4770      	bx	lr

0800e9c0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e9dc:	bf00      	nop
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d101      	bne.n	800ea00 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e9fc:	2302      	movs	r3, #2
 800e9fe:	e029      	b.n	800ea54 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	79fa      	ldrb	r2, [r7, #7]
 800ea04:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	2200      	movs	r2, #0
 800ea14:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f000 f81f 	bl	800ea5c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d003      	beq.n	800ea4c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f001 fc37 	bl	80102c0 <USBH_LL_Init>

  return USBH_OK;
 800ea52:	2300      	movs	r3, #0
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3710      	adds	r7, #16
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ea64:	2300      	movs	r3, #0
 800ea66:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	60fb      	str	r3, [r7, #12]
 800ea6c:	e009      	b.n	800ea82 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	33e0      	adds	r3, #224	; 0xe0
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	2200      	movs	r2, #0
 800ea7a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	60fb      	str	r3, [r7, #12]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2b0e      	cmp	r3, #14
 800ea86:	d9f2      	bls.n	800ea6e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ea88:	2300      	movs	r3, #0
 800ea8a:	60fb      	str	r3, [r7, #12]
 800ea8c:	e009      	b.n	800eaa2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	4413      	add	r3, r2
 800ea94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ea98:	2200      	movs	r2, #0
 800ea9a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	60fb      	str	r3, [r7, #12]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaa8:	d3f1      	bcc.n	800ea8e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2200      	movs	r2, #0
 800eaae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2201      	movs	r2, #1
 800eaba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2201      	movs	r2, #1
 800eac8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2240      	movs	r2, #64	; 0x40
 800eace:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2200      	movs	r2, #0
 800ead4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2201      	movs	r2, #1
 800eae2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3714      	adds	r7, #20
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d016      	beq.n	800eb46 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10e      	bne.n	800eb40 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eb28:	1c59      	adds	r1, r3, #1
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	33de      	adds	r3, #222	; 0xde
 800eb34:	6839      	ldr	r1, [r7, #0]
 800eb36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	73fb      	strb	r3, [r7, #15]
 800eb3e:	e004      	b.n	800eb4a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800eb40:	2302      	movs	r3, #2
 800eb42:	73fb      	strb	r3, [r7, #15]
 800eb44:	e001      	b.n	800eb4a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800eb46:	2302      	movs	r3, #2
 800eb48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eb4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3714      	adds	r7, #20
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
 800eb60:	460b      	mov	r3, r1
 800eb62:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800eb64:	2300      	movs	r3, #0
 800eb66:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800eb6e:	78fa      	ldrb	r2, [r7, #3]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d204      	bcs.n	800eb7e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	78fa      	ldrb	r2, [r7, #3]
 800eb78:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800eb7c:	e001      	b.n	800eb82 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800eb7e:	2302      	movs	r3, #2
 800eb80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3714      	adds	r7, #20
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b087      	sub	sp, #28
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	4608      	mov	r0, r1
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	4603      	mov	r3, r0
 800eba0:	70fb      	strb	r3, [r7, #3]
 800eba2:	460b      	mov	r3, r1
 800eba4:	70bb      	strb	r3, [r7, #2]
 800eba6:	4613      	mov	r3, r2
 800eba8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ebb8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ebba:	e025      	b.n	800ec08 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ebbc:	7dfb      	ldrb	r3, [r7, #23]
 800ebbe:	221a      	movs	r2, #26
 800ebc0:	fb02 f303 	mul.w	r3, r2, r3
 800ebc4:	3308      	adds	r3, #8
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	4413      	add	r3, r2
 800ebca:	3302      	adds	r3, #2
 800ebcc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	795b      	ldrb	r3, [r3, #5]
 800ebd2:	78fa      	ldrb	r2, [r7, #3]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d002      	beq.n	800ebde <USBH_FindInterface+0x4e>
 800ebd8:	78fb      	ldrb	r3, [r7, #3]
 800ebda:	2bff      	cmp	r3, #255	; 0xff
 800ebdc:	d111      	bne.n	800ec02 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ebe2:	78ba      	ldrb	r2, [r7, #2]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d002      	beq.n	800ebee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ebe8:	78bb      	ldrb	r3, [r7, #2]
 800ebea:	2bff      	cmp	r3, #255	; 0xff
 800ebec:	d109      	bne.n	800ec02 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ebf2:	787a      	ldrb	r2, [r7, #1]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d002      	beq.n	800ebfe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ebf8:	787b      	ldrb	r3, [r7, #1]
 800ebfa:	2bff      	cmp	r3, #255	; 0xff
 800ebfc:	d101      	bne.n	800ec02 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	e006      	b.n	800ec10 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ec02:	7dfb      	ldrb	r3, [r7, #23]
 800ec04:	3301      	adds	r3, #1
 800ec06:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d9d6      	bls.n	800ebbc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ec0e:	23ff      	movs	r3, #255	; 0xff
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	371c      	adds	r7, #28
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f001 fb87 	bl	8010338 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f001 fca0 	bl	8010572 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b088      	sub	sp, #32
 800ec40:	af04      	add	r7, sp, #16
 800ec42:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ec44:	2302      	movs	r3, #2
 800ec46:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ec52:	b2db      	uxtb	r3, r3
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d102      	bne.n	800ec5e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2203      	movs	r2, #3
 800ec5c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	2b0b      	cmp	r3, #11
 800ec66:	f200 81b3 	bhi.w	800efd0 <USBH_Process+0x394>
 800ec6a:	a201      	add	r2, pc, #4	; (adr r2, 800ec70 <USBH_Process+0x34>)
 800ec6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec70:	0800eca1 	.word	0x0800eca1
 800ec74:	0800ecd3 	.word	0x0800ecd3
 800ec78:	0800ed3b 	.word	0x0800ed3b
 800ec7c:	0800ef6b 	.word	0x0800ef6b
 800ec80:	0800efd1 	.word	0x0800efd1
 800ec84:	0800eddf 	.word	0x0800eddf
 800ec88:	0800ef11 	.word	0x0800ef11
 800ec8c:	0800ee15 	.word	0x0800ee15
 800ec90:	0800ee35 	.word	0x0800ee35
 800ec94:	0800ee55 	.word	0x0800ee55
 800ec98:	0800ee83 	.word	0x0800ee83
 800ec9c:	0800ef53 	.word	0x0800ef53
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f000 8193 	beq.w	800efd4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ecb4:	20c8      	movs	r0, #200	; 0xc8
 800ecb6:	f001 fca3 	bl	8010600 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f001 fb99 	bl	80103f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ecd0:	e180      	b.n	800efd4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d107      	bne.n	800ecec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2200      	movs	r2, #0
 800ece0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2202      	movs	r2, #2
 800ece8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ecea:	e182      	b.n	800eff2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ecf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ecf6:	d914      	bls.n	800ed22 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ecfe:	3301      	adds	r3, #1
 800ed00:	b2da      	uxtb	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ed0e:	2b03      	cmp	r3, #3
 800ed10:	d903      	bls.n	800ed1a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	220d      	movs	r2, #13
 800ed16:	701a      	strb	r2, [r3, #0]
      break;
 800ed18:	e16b      	b.n	800eff2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	701a      	strb	r2, [r3, #0]
      break;
 800ed20:	e167      	b.n	800eff2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ed28:	f103 020a 	add.w	r2, r3, #10
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ed32:	200a      	movs	r0, #10
 800ed34:	f001 fc64 	bl	8010600 <USBH_Delay>
      break;
 800ed38:	e15b      	b.n	800eff2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d005      	beq.n	800ed50 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed4a:	2104      	movs	r1, #4
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ed50:	2064      	movs	r0, #100	; 0x64
 800ed52:	f001 fc55 	bl	8010600 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f001 fb24 	bl	80103a4 <USBH_LL_GetSpeed>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	461a      	mov	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2205      	movs	r2, #5
 800ed6a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f001 f92f 	bl	800ffd2 <USBH_AllocPipe>
 800ed74:	4603      	mov	r3, r0
 800ed76:	461a      	mov	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ed7c:	2180      	movs	r1, #128	; 0x80
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f001 f927 	bl	800ffd2 <USBH_AllocPipe>
 800ed84:	4603      	mov	r3, r0
 800ed86:	461a      	mov	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	7919      	ldrb	r1, [r3, #4]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800eda0:	b292      	uxth	r2, r2
 800eda2:	9202      	str	r2, [sp, #8]
 800eda4:	2200      	movs	r2, #0
 800eda6:	9201      	str	r2, [sp, #4]
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	4603      	mov	r3, r0
 800edac:	2280      	movs	r2, #128	; 0x80
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f001 f8e0 	bl	800ff74 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	7959      	ldrb	r1, [r3, #5]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800edc8:	b292      	uxth	r2, r2
 800edca:	9202      	str	r2, [sp, #8]
 800edcc:	2200      	movs	r2, #0
 800edce:	9201      	str	r2, [sp, #4]
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	4603      	mov	r3, r0
 800edd4:	2200      	movs	r2, #0
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f001 f8cc 	bl	800ff74 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eddc:	e109      	b.n	800eff2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f90c 	bl	800effc <USBH_HandleEnum>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
 800edea:	b2db      	uxtb	r3, r3
 800edec:	2b00      	cmp	r3, #0
 800edee:	f040 80f3 	bne.w	800efd8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	d103      	bne.n	800ee0c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2208      	movs	r2, #8
 800ee08:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ee0a:	e0e5      	b.n	800efd8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2207      	movs	r2, #7
 800ee10:	701a      	strb	r2, [r3, #0]
      break;
 800ee12:	e0e1      	b.n	800efd8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f000 80de 	beq.w	800efdc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee26:	2101      	movs	r1, #1
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2208      	movs	r2, #8
 800ee30:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ee32:	e0d3      	b.n	800efdc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fc20 	bl	800f684 <USBH_SetCfg>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f040 80ca 	bne.w	800efe0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2209      	movs	r2, #9
 800ee50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ee52:	e0c5      	b.n	800efe0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ee5a:	f003 0320 	and.w	r3, r3, #32
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00b      	beq.n	800ee7a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ee62:	2101      	movs	r1, #1
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 fc30 	bl	800f6ca <USBH_SetFeature>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f040 80b9 	bne.w	800efe4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	220a      	movs	r2, #10
 800ee76:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ee78:	e0b4      	b.n	800efe4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	220a      	movs	r2, #10
 800ee7e:	701a      	strb	r2, [r3, #0]
      break;
 800ee80:	e0b0      	b.n	800efe4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f000 80ad 	beq.w	800efe8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2200      	movs	r2, #0
 800ee92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ee96:	2300      	movs	r3, #0
 800ee98:	73fb      	strb	r3, [r7, #15]
 800ee9a:	e016      	b.n	800eeca <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ee9c:	7bfa      	ldrb	r2, [r7, #15]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	32de      	adds	r2, #222	; 0xde
 800eea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eea6:	791a      	ldrb	r2, [r3, #4]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d108      	bne.n	800eec4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800eeb2:	7bfa      	ldrb	r2, [r7, #15]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	32de      	adds	r2, #222	; 0xde
 800eeb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800eec2:	e005      	b.n	800eed0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
 800eec6:	3301      	adds	r3, #1
 800eec8:	73fb      	strb	r3, [r7, #15]
 800eeca:	7bfb      	ldrb	r3, [r7, #15]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d0e5      	beq.n	800ee9c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d016      	beq.n	800ef08 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	4798      	blx	r3
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d109      	bne.n	800ef00 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2206      	movs	r2, #6
 800eef0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800eef8:	2103      	movs	r1, #3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800eefe:	e073      	b.n	800efe8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	220d      	movs	r2, #13
 800ef04:	701a      	strb	r2, [r3, #0]
      break;
 800ef06:	e06f      	b.n	800efe8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	220d      	movs	r2, #13
 800ef0c:	701a      	strb	r2, [r3, #0]
      break;
 800ef0e:	e06b      	b.n	800efe8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d017      	beq.n	800ef4a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	4798      	blx	r3
 800ef26:	4603      	mov	r3, r0
 800ef28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ef2a:	7bbb      	ldrb	r3, [r7, #14]
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d103      	bne.n	800ef3a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	220b      	movs	r2, #11
 800ef36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800ef38:	e058      	b.n	800efec <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800ef3a:	7bbb      	ldrb	r3, [r7, #14]
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	2b02      	cmp	r3, #2
 800ef40:	d154      	bne.n	800efec <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	220d      	movs	r2, #13
 800ef46:	701a      	strb	r2, [r3, #0]
      break;
 800ef48:	e050      	b.n	800efec <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	220d      	movs	r2, #13
 800ef4e:	701a      	strb	r2, [r3, #0]
      break;
 800ef50:	e04c      	b.n	800efec <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d049      	beq.n	800eff0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	4798      	blx	r3
      }
      break;
 800ef68:	e042      	b.n	800eff0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff fd72 	bl	800ea5c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d009      	beq.n	800ef96 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d005      	beq.n	800efac <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800efa6:	2105      	movs	r1, #5
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d107      	bne.n	800efc8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7ff fe2b 	bl	800ec1c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800efc6:	e014      	b.n	800eff2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f001 f9b5 	bl	8010338 <USBH_LL_Start>
      break;
 800efce:	e010      	b.n	800eff2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800efd0:	bf00      	nop
 800efd2:	e00e      	b.n	800eff2 <USBH_Process+0x3b6>
      break;
 800efd4:	bf00      	nop
 800efd6:	e00c      	b.n	800eff2 <USBH_Process+0x3b6>
      break;
 800efd8:	bf00      	nop
 800efda:	e00a      	b.n	800eff2 <USBH_Process+0x3b6>
    break;
 800efdc:	bf00      	nop
 800efde:	e008      	b.n	800eff2 <USBH_Process+0x3b6>
      break;
 800efe0:	bf00      	nop
 800efe2:	e006      	b.n	800eff2 <USBH_Process+0x3b6>
      break;
 800efe4:	bf00      	nop
 800efe6:	e004      	b.n	800eff2 <USBH_Process+0x3b6>
      break;
 800efe8:	bf00      	nop
 800efea:	e002      	b.n	800eff2 <USBH_Process+0x3b6>
      break;
 800efec:	bf00      	nop
 800efee:	e000      	b.n	800eff2 <USBH_Process+0x3b6>
      break;
 800eff0:	bf00      	nop
  }
  return USBH_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3710      	adds	r7, #16
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b088      	sub	sp, #32
 800f000:	af04      	add	r7, sp, #16
 800f002:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f004:	2301      	movs	r3, #1
 800f006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f008:	2301      	movs	r3, #1
 800f00a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	785b      	ldrb	r3, [r3, #1]
 800f010:	2b07      	cmp	r3, #7
 800f012:	f200 81c1 	bhi.w	800f398 <USBH_HandleEnum+0x39c>
 800f016:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <USBH_HandleEnum+0x20>)
 800f018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01c:	0800f03d 	.word	0x0800f03d
 800f020:	0800f0fb 	.word	0x0800f0fb
 800f024:	0800f165 	.word	0x0800f165
 800f028:	0800f1f3 	.word	0x0800f1f3
 800f02c:	0800f25d 	.word	0x0800f25d
 800f030:	0800f2cd 	.word	0x0800f2cd
 800f034:	0800f313 	.word	0x0800f313
 800f038:	0800f359 	.word	0x0800f359
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f03c:	2108      	movs	r1, #8
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f000 fa50 	bl	800f4e4 <USBH_Get_DevDesc>
 800f044:	4603      	mov	r3, r0
 800f046:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f048:	7bbb      	ldrb	r3, [r7, #14]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d130      	bne.n	800f0b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2201      	movs	r2, #1
 800f05c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	7919      	ldrb	r1, [r3, #4]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f072:	b292      	uxth	r2, r2
 800f074:	9202      	str	r2, [sp, #8]
 800f076:	2200      	movs	r2, #0
 800f078:	9201      	str	r2, [sp, #4]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	4603      	mov	r3, r0
 800f07e:	2280      	movs	r2, #128	; 0x80
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 ff77 	bl	800ff74 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	7959      	ldrb	r1, [r3, #5]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f09a:	b292      	uxth	r2, r2
 800f09c:	9202      	str	r2, [sp, #8]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	9201      	str	r2, [sp, #4]
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 ff63 	bl	800ff74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f0ae:	e175      	b.n	800f39c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f0b0:	7bbb      	ldrb	r3, [r7, #14]
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	f040 8172 	bne.w	800f39c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f0be:	3301      	adds	r3, #1
 800f0c0:	b2da      	uxtb	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d903      	bls.n	800f0da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	220d      	movs	r2, #13
 800f0d6:	701a      	strb	r2, [r3, #0]
      break;
 800f0d8:	e160      	b.n	800f39c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	795b      	ldrb	r3, [r3, #5]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 ff97 	bl	8010014 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	791b      	ldrb	r3, [r3, #4]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 ff91 	bl	8010014 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	701a      	strb	r2, [r3, #0]
      break;
 800f0f8:	e150      	b.n	800f39c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f0fa:	2112      	movs	r1, #18
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f9f1 	bl	800f4e4 <USBH_Get_DevDesc>
 800f102:	4603      	mov	r3, r0
 800f104:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f106:	7bbb      	ldrb	r3, [r7, #14]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d103      	bne.n	800f114 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2202      	movs	r2, #2
 800f110:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f112:	e145      	b.n	800f3a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f114:	7bbb      	ldrb	r3, [r7, #14]
 800f116:	2b03      	cmp	r3, #3
 800f118:	f040 8142 	bne.w	800f3a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f122:	3301      	adds	r3, #1
 800f124:	b2da      	uxtb	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f132:	2b03      	cmp	r3, #3
 800f134:	d903      	bls.n	800f13e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	220d      	movs	r2, #13
 800f13a:	701a      	strb	r2, [r3, #0]
      break;
 800f13c:	e130      	b.n	800f3a0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	795b      	ldrb	r3, [r3, #5]
 800f142:	4619      	mov	r1, r3
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 ff65 	bl	8010014 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	791b      	ldrb	r3, [r3, #4]
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 ff5f 	bl	8010014 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2200      	movs	r2, #0
 800f15a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	701a      	strb	r2, [r3, #0]
      break;
 800f162:	e11d      	b.n	800f3a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f164:	2101      	movs	r1, #1
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fa68 	bl	800f63c <USBH_SetAddress>
 800f16c:	4603      	mov	r3, r0
 800f16e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f170:	7bbb      	ldrb	r3, [r7, #14]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d132      	bne.n	800f1dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f176:	2002      	movs	r0, #2
 800f178:	f001 fa42 	bl	8010600 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2201      	movs	r2, #1
 800f180:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2203      	movs	r2, #3
 800f188:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	7919      	ldrb	r1, [r3, #4]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f19e:	b292      	uxth	r2, r2
 800f1a0:	9202      	str	r2, [sp, #8]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	9201      	str	r2, [sp, #4]
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2280      	movs	r2, #128	; 0x80
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fee1 	bl	800ff74 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	7959      	ldrb	r1, [r3, #5]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f1c6:	b292      	uxth	r2, r2
 800f1c8:	9202      	str	r2, [sp, #8]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	9201      	str	r2, [sp, #4]
 800f1ce:	9300      	str	r3, [sp, #0]
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 fecd 	bl	800ff74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f1da:	e0e3      	b.n	800f3a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f1dc:	7bbb      	ldrb	r3, [r7, #14]
 800f1de:	2b03      	cmp	r3, #3
 800f1e0:	f040 80e0 	bne.w	800f3a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	220d      	movs	r2, #13
 800f1e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	705a      	strb	r2, [r3, #1]
      break;
 800f1f0:	e0d8      	b.n	800f3a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f1f2:	2109      	movs	r1, #9
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 f99d 	bl	800f534 <USBH_Get_CfgDesc>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f1fe:	7bbb      	ldrb	r3, [r7, #14]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d103      	bne.n	800f20c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2204      	movs	r2, #4
 800f208:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f20a:	e0cd      	b.n	800f3a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f20c:	7bbb      	ldrb	r3, [r7, #14]
 800f20e:	2b03      	cmp	r3, #3
 800f210:	f040 80ca 	bne.w	800f3a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f21a:	3301      	adds	r3, #1
 800f21c:	b2da      	uxtb	r2, r3
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d903      	bls.n	800f236 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	220d      	movs	r2, #13
 800f232:	701a      	strb	r2, [r3, #0]
      break;
 800f234:	e0b8      	b.n	800f3a8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	795b      	ldrb	r3, [r3, #5]
 800f23a:	4619      	mov	r1, r3
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f000 fee9 	bl	8010014 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	791b      	ldrb	r3, [r3, #4]
 800f246:	4619      	mov	r1, r3
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fee3 	bl	8010014 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2200      	movs	r2, #0
 800f258:	701a      	strb	r2, [r3, #0]
      break;
 800f25a:	e0a5      	b.n	800f3a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f965 	bl	800f534 <USBH_Get_CfgDesc>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f26e:	7bbb      	ldrb	r3, [r7, #14]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d103      	bne.n	800f27c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2205      	movs	r2, #5
 800f278:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f27a:	e097      	b.n	800f3ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f27c:	7bbb      	ldrb	r3, [r7, #14]
 800f27e:	2b03      	cmp	r3, #3
 800f280:	f040 8094 	bne.w	800f3ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f28a:	3301      	adds	r3, #1
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d903      	bls.n	800f2a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	220d      	movs	r2, #13
 800f2a2:	701a      	strb	r2, [r3, #0]
      break;
 800f2a4:	e082      	b.n	800f3ac <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	795b      	ldrb	r3, [r3, #5]
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f000 feb1 	bl	8010014 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	791b      	ldrb	r3, [r3, #4]
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 feab 	bl	8010014 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	701a      	strb	r2, [r3, #0]
      break;
 800f2ca:	e06f      	b.n	800f3ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d019      	beq.n	800f30a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f2e2:	23ff      	movs	r3, #255	; 0xff
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 f949 	bl	800f57c <USBH_Get_StringDesc>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f2ee:	7bbb      	ldrb	r3, [r7, #14]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2206      	movs	r2, #6
 800f2f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f2fa:	e059      	b.n	800f3b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f2fc:	7bbb      	ldrb	r3, [r7, #14]
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d156      	bne.n	800f3b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2206      	movs	r2, #6
 800f306:	705a      	strb	r2, [r3, #1]
      break;
 800f308:	e052      	b.n	800f3b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2206      	movs	r2, #6
 800f30e:	705a      	strb	r2, [r3, #1]
      break;
 800f310:	e04e      	b.n	800f3b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d019      	beq.n	800f350 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f328:	23ff      	movs	r3, #255	; 0xff
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 f926 	bl	800f57c <USBH_Get_StringDesc>
 800f330:	4603      	mov	r3, r0
 800f332:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f334:	7bbb      	ldrb	r3, [r7, #14]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d103      	bne.n	800f342 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2207      	movs	r2, #7
 800f33e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f340:	e038      	b.n	800f3b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f342:	7bbb      	ldrb	r3, [r7, #14]
 800f344:	2b03      	cmp	r3, #3
 800f346:	d135      	bne.n	800f3b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2207      	movs	r2, #7
 800f34c:	705a      	strb	r2, [r3, #1]
      break;
 800f34e:	e031      	b.n	800f3b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2207      	movs	r2, #7
 800f354:	705a      	strb	r2, [r3, #1]
      break;
 800f356:	e02d      	b.n	800f3b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d017      	beq.n	800f392 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f36e:	23ff      	movs	r3, #255	; 0xff
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 f903 	bl	800f57c <USBH_Get_StringDesc>
 800f376:	4603      	mov	r3, r0
 800f378:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f37a:	7bbb      	ldrb	r3, [r7, #14]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d102      	bne.n	800f386 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f380:	2300      	movs	r3, #0
 800f382:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f384:	e018      	b.n	800f3b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f386:	7bbb      	ldrb	r3, [r7, #14]
 800f388:	2b03      	cmp	r3, #3
 800f38a:	d115      	bne.n	800f3b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800f38c:	2300      	movs	r3, #0
 800f38e:	73fb      	strb	r3, [r7, #15]
      break;
 800f390:	e012      	b.n	800f3b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800f392:	2300      	movs	r3, #0
 800f394:	73fb      	strb	r3, [r7, #15]
      break;
 800f396:	e00f      	b.n	800f3b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800f398:	bf00      	nop
 800f39a:	e00e      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f39c:	bf00      	nop
 800f39e:	e00c      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f3a0:	bf00      	nop
 800f3a2:	e00a      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f3a4:	bf00      	nop
 800f3a6:	e008      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f3a8:	bf00      	nop
 800f3aa:	e006      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f3ac:	bf00      	nop
 800f3ae:	e004      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f3b0:	bf00      	nop
 800f3b2:	e002      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f3b4:	bf00      	nop
 800f3b6:	e000      	b.n	800f3ba <USBH_HandleEnum+0x3be>
      break;
 800f3b8:	bf00      	nop
  }
  return Status;
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	683a      	ldr	r2, [r7, #0]
 800f3d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f3d6:	bf00      	nop
 800f3d8:	370c      	adds	r7, #12
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f3f0:	1c5a      	adds	r2, r3, #1
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f804 	bl	800f406 <USBH_HandleSof>
}
 800f3fe:	bf00      	nop
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f406:	b580      	push	{r7, lr}
 800f408:	b082      	sub	sp, #8
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	b2db      	uxtb	r3, r3
 800f414:	2b0b      	cmp	r3, #11
 800f416:	d10a      	bne.n	800f42e <USBH_HandleSof+0x28>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d005      	beq.n	800f42e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f428:	699b      	ldr	r3, [r3, #24]
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	4798      	blx	r3
  }
}
 800f42e:	bf00      	nop
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2201      	movs	r2, #1
 800f442:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800f446:	bf00      	nop
}
 800f448:	370c      	adds	r7, #12
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr

0800f452 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f452:	b480      	push	{r7}
 800f454:	b083      	sub	sp, #12
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2200      	movs	r2, #0
 800f45e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f462:	bf00      	nop
}
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2201      	movs	r2, #1
 800f47a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f48e:	2300      	movs	r3, #0
}
 800f490:	4618      	mov	r0, r3
 800f492:	370c      	adds	r7, #12
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 ff56 	bl	801036e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	791b      	ldrb	r3, [r3, #4]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fda3 	bl	8010014 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	795b      	ldrb	r3, [r3, #5]
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 fd9d 	bl	8010014 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800f4da:	2300      	movs	r3, #0
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b086      	sub	sp, #24
 800f4e8:	af02      	add	r7, sp, #8
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f4f6:	78fb      	ldrb	r3, [r7, #3]
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	9300      	str	r3, [sp, #0]
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f502:	2100      	movs	r1, #0
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 f864 	bl	800f5d2 <USBH_GetDescriptor>
 800f50a:	4603      	mov	r3, r0
 800f50c:	73fb      	strb	r3, [r7, #15]
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d10a      	bne.n	800f52a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f520:	78fa      	ldrb	r2, [r7, #3]
 800f522:	b292      	uxth	r2, r2
 800f524:	4619      	mov	r1, r3
 800f526:	f000 f918 	bl	800f75a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f534:	b580      	push	{r7, lr}
 800f536:	b086      	sub	sp, #24
 800f538:	af02      	add	r7, sp, #8
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	460b      	mov	r3, r1
 800f53e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	331c      	adds	r3, #28
 800f544:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f546:	887b      	ldrh	r3, [r7, #2]
 800f548:	9300      	str	r3, [sp, #0]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f550:	2100      	movs	r1, #0
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 f83d 	bl	800f5d2 <USBH_GetDescriptor>
 800f558:	4603      	mov	r3, r0
 800f55a:	72fb      	strb	r3, [r7, #11]
 800f55c:	7afb      	ldrb	r3, [r7, #11]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d107      	bne.n	800f572 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f568:	887a      	ldrh	r2, [r7, #2]
 800f56a:	68f9      	ldr	r1, [r7, #12]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f000 f964 	bl	800f83a <USBH_ParseCfgDesc>
  }

  return status;
 800f572:	7afb      	ldrb	r3, [r7, #11]
}
 800f574:	4618      	mov	r0, r3
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b088      	sub	sp, #32
 800f580:	af02      	add	r7, sp, #8
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	607a      	str	r2, [r7, #4]
 800f586:	461a      	mov	r2, r3
 800f588:	460b      	mov	r3, r1
 800f58a:	72fb      	strb	r3, [r7, #11]
 800f58c:	4613      	mov	r3, r2
 800f58e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f590:	7afb      	ldrb	r3, [r7, #11]
 800f592:	b29b      	uxth	r3, r3
 800f594:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f598:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f5a0:	893b      	ldrh	r3, [r7, #8]
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f000 f812 	bl	800f5d2 <USBH_GetDescriptor>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	75fb      	strb	r3, [r7, #23]
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d107      	bne.n	800f5c8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f5be:	893a      	ldrh	r2, [r7, #8]
 800f5c0:	6879      	ldr	r1, [r7, #4]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f000 fa37 	bl	800fa36 <USBH_ParseStringDesc>
  }

  return status;
 800f5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3718      	adds	r7, #24
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b084      	sub	sp, #16
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	60f8      	str	r0, [r7, #12]
 800f5da:	607b      	str	r3, [r7, #4]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	72fb      	strb	r3, [r7, #11]
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	789b      	ldrb	r3, [r3, #2]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d11c      	bne.n	800f626 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f5ec:	7afb      	ldrb	r3, [r7, #11]
 800f5ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5f2:	b2da      	uxtb	r2, r3
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2206      	movs	r2, #6
 800f5fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	893a      	ldrh	r2, [r7, #8]
 800f602:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f604:	893b      	ldrh	r3, [r7, #8]
 800f606:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f60e:	d104      	bne.n	800f61a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f240 4209 	movw	r2, #1033	; 0x409
 800f616:	829a      	strh	r2, [r3, #20]
 800f618:	e002      	b.n	800f620 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2200      	movs	r2, #0
 800f61e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	8b3a      	ldrh	r2, [r7, #24]
 800f624:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f626:	8b3b      	ldrh	r3, [r7, #24]
 800f628:	461a      	mov	r2, r3
 800f62a:	6879      	ldr	r1, [r7, #4]
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f000 fa50 	bl	800fad2 <USBH_CtlReq>
 800f632:	4603      	mov	r3, r0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	460b      	mov	r3, r1
 800f646:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	789b      	ldrb	r3, [r3, #2]
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d10f      	bne.n	800f670 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2205      	movs	r2, #5
 800f65a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f65c:	78fb      	ldrb	r3, [r7, #3]
 800f65e:	b29a      	uxth	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f670:	2200      	movs	r2, #0
 800f672:	2100      	movs	r1, #0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fa2c 	bl	800fad2 <USBH_CtlReq>
 800f67a:	4603      	mov	r3, r0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	460b      	mov	r3, r1
 800f68e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	789b      	ldrb	r3, [r3, #2]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d10e      	bne.n	800f6b6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2209      	movs	r2, #9
 800f6a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	887a      	ldrh	r2, [r7, #2]
 800f6a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 fa09 	bl	800fad2 <USBH_CtlReq>
 800f6c0:	4603      	mov	r3, r0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b082      	sub	sp, #8
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	789b      	ldrb	r3, [r3, #2]
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d10f      	bne.n	800f6fe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2203      	movs	r2, #3
 800f6e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f6ea:	78fb      	ldrb	r3, [r7, #3]
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f6fe:	2200      	movs	r2, #0
 800f700:	2100      	movs	r1, #0
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 f9e5 	bl	800fad2 <USBH_CtlReq>
 800f708:	4603      	mov	r3, r0
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3708      	adds	r7, #8
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}

0800f712 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f712:	b580      	push	{r7, lr}
 800f714:	b082      	sub	sp, #8
 800f716:	af00      	add	r7, sp, #0
 800f718:	6078      	str	r0, [r7, #4]
 800f71a:	460b      	mov	r3, r1
 800f71c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	789b      	ldrb	r3, [r3, #2]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d10f      	bne.n	800f746 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2202      	movs	r2, #2
 800f72a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2201      	movs	r2, #1
 800f730:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f738:	78fb      	ldrb	r3, [r7, #3]
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f746:	2200      	movs	r2, #0
 800f748:	2100      	movs	r1, #0
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 f9c1 	bl	800fad2 <USBH_CtlReq>
 800f750:	4603      	mov	r3, r0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f75a:	b480      	push	{r7}
 800f75c:	b085      	sub	sp, #20
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	4613      	mov	r3, r2
 800f766:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	781a      	ldrb	r2, [r3, #0]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	785a      	ldrb	r2, [r3, #1]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	3302      	adds	r3, #2
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	b29a      	uxth	r2, r3
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	3303      	adds	r3, #3
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	b29b      	uxth	r3, r3
 800f788:	021b      	lsls	r3, r3, #8
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	4313      	orrs	r3, r2
 800f78e:	b29a      	uxth	r2, r3
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	791a      	ldrb	r2, [r3, #4]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	795a      	ldrb	r2, [r3, #5]
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	799a      	ldrb	r2, [r3, #6]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	79da      	ldrb	r2, [r3, #7]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f7b4:	88fb      	ldrh	r3, [r7, #6]
 800f7b6:	2b08      	cmp	r3, #8
 800f7b8:	d939      	bls.n	800f82e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	3308      	adds	r3, #8
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	b29a      	uxth	r2, r3
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	3309      	adds	r3, #9
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	021b      	lsls	r3, r3, #8
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	330a      	adds	r3, #10
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	b29a      	uxth	r2, r3
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	330b      	adds	r3, #11
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	021b      	lsls	r3, r3, #8
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	330c      	adds	r3, #12
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	330d      	adds	r3, #13
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	b29b      	uxth	r3, r3
 800f802:	021b      	lsls	r3, r3, #8
 800f804:	b29b      	uxth	r3, r3
 800f806:	4313      	orrs	r3, r2
 800f808:	b29a      	uxth	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	7b9a      	ldrb	r2, [r3, #14]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	7bda      	ldrb	r2, [r3, #15]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	7c1a      	ldrb	r2, [r3, #16]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	7c5a      	ldrb	r2, [r3, #17]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	745a      	strb	r2, [r3, #17]
  }
}
 800f82e:	bf00      	nop
 800f830:	3714      	adds	r7, #20
 800f832:	46bd      	mov	sp, r7
 800f834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f838:	4770      	bx	lr

0800f83a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b08a      	sub	sp, #40	; 0x28
 800f83e:	af00      	add	r7, sp, #0
 800f840:	60f8      	str	r0, [r7, #12]
 800f842:	60b9      	str	r1, [r7, #8]
 800f844:	4613      	mov	r3, r2
 800f846:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f84c:	2300      	movs	r3, #0
 800f84e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f852:	2300      	movs	r3, #0
 800f854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	781a      	ldrb	r2, [r3, #0]
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	785a      	ldrb	r2, [r3, #1]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	3302      	adds	r3, #2
 800f870:	781b      	ldrb	r3, [r3, #0]
 800f872:	b29a      	uxth	r2, r3
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	3303      	adds	r3, #3
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	021b      	lsls	r3, r3, #8
 800f87e:	b29b      	uxth	r3, r3
 800f880:	4313      	orrs	r3, r2
 800f882:	b29a      	uxth	r2, r3
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	791a      	ldrb	r2, [r3, #4]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	795a      	ldrb	r2, [r3, #5]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	799a      	ldrb	r2, [r3, #6]
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	79da      	ldrb	r2, [r3, #7]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	7a1a      	ldrb	r2, [r3, #8]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f8b0:	88fb      	ldrh	r3, [r7, #6]
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d95f      	bls.n	800f976 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f8b6:	2309      	movs	r3, #9
 800f8b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f8be:	e051      	b.n	800f964 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f8c0:	f107 0316 	add.w	r3, r7, #22
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8c8:	f000 f8e8 	bl	800fa9c <USBH_GetNextDesc>
 800f8cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d0:	785b      	ldrb	r3, [r3, #1]
 800f8d2:	2b04      	cmp	r3, #4
 800f8d4:	d146      	bne.n	800f964 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f8d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8da:	221a      	movs	r2, #26
 800f8dc:	fb02 f303 	mul.w	r3, r2, r3
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	3302      	adds	r3, #2
 800f8e8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f8ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8ec:	69f8      	ldr	r0, [r7, #28]
 800f8ee:	f000 f846 	bl	800f97e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f8fc:	e022      	b.n	800f944 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f8fe:	f107 0316 	add.w	r3, r7, #22
 800f902:	4619      	mov	r1, r3
 800f904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f906:	f000 f8c9 	bl	800fa9c <USBH_GetNextDesc>
 800f90a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	785b      	ldrb	r3, [r3, #1]
 800f910:	2b05      	cmp	r3, #5
 800f912:	d117      	bne.n	800f944 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f914:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f918:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f91c:	3201      	adds	r2, #1
 800f91e:	00d2      	lsls	r2, r2, #3
 800f920:	211a      	movs	r1, #26
 800f922:	fb01 f303 	mul.w	r3, r1, r3
 800f926:	4413      	add	r3, r2
 800f928:	3308      	adds	r3, #8
 800f92a:	68fa      	ldr	r2, [r7, #12]
 800f92c:	4413      	add	r3, r2
 800f92e:	3304      	adds	r3, #4
 800f930:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f934:	69b8      	ldr	r0, [r7, #24]
 800f936:	f000 f851 	bl	800f9dc <USBH_ParseEPDesc>
            ep_ix++;
 800f93a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f93e:	3301      	adds	r3, #1
 800f940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	791b      	ldrb	r3, [r3, #4]
 800f948:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d204      	bcs.n	800f95a <USBH_ParseCfgDesc+0x120>
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	885a      	ldrh	r2, [r3, #2]
 800f954:	8afb      	ldrh	r3, [r7, #22]
 800f956:	429a      	cmp	r2, r3
 800f958:	d8d1      	bhi.n	800f8fe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f95a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f95e:	3301      	adds	r3, #1
 800f960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d804      	bhi.n	800f976 <USBH_ParseCfgDesc+0x13c>
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	885a      	ldrh	r2, [r3, #2]
 800f970:	8afb      	ldrh	r3, [r7, #22]
 800f972:	429a      	cmp	r2, r3
 800f974:	d8a4      	bhi.n	800f8c0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f976:	bf00      	nop
 800f978:	3728      	adds	r7, #40	; 0x28
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f97e:	b480      	push	{r7}
 800f980:	b083      	sub	sp, #12
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
 800f986:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	781a      	ldrb	r2, [r3, #0]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	785a      	ldrb	r2, [r3, #1]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	789a      	ldrb	r2, [r3, #2]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	78da      	ldrb	r2, [r3, #3]
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	791a      	ldrb	r2, [r3, #4]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	795a      	ldrb	r2, [r3, #5]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	799a      	ldrb	r2, [r3, #6]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	79da      	ldrb	r2, [r3, #7]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	7a1a      	ldrb	r2, [r3, #8]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	721a      	strb	r2, [r3, #8]
}
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	781a      	ldrb	r2, [r3, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	785a      	ldrb	r2, [r3, #1]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	789a      	ldrb	r2, [r3, #2]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	78da      	ldrb	r2, [r3, #3]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	3305      	adds	r3, #5
 800fa12:	781b      	ldrb	r3, [r3, #0]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	021b      	lsls	r3, r3, #8
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	799a      	ldrb	r2, [r3, #6]
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	719a      	strb	r2, [r3, #6]
}
 800fa2a:	bf00      	nop
 800fa2c:	370c      	adds	r7, #12
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr

0800fa36 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fa36:	b480      	push	{r7}
 800fa38:	b087      	sub	sp, #28
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	60f8      	str	r0, [r7, #12]
 800fa3e:	60b9      	str	r1, [r7, #8]
 800fa40:	4613      	mov	r3, r2
 800fa42:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	3301      	adds	r3, #1
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	2b03      	cmp	r3, #3
 800fa4c:	d120      	bne.n	800fa90 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	1e9a      	subs	r2, r3, #2
 800fa54:	88fb      	ldrh	r3, [r7, #6]
 800fa56:	4293      	cmp	r3, r2
 800fa58:	bf28      	it	cs
 800fa5a:	4613      	movcs	r3, r2
 800fa5c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3302      	adds	r3, #2
 800fa62:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fa64:	2300      	movs	r3, #0
 800fa66:	82fb      	strh	r3, [r7, #22]
 800fa68:	e00b      	b.n	800fa82 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fa6a:	8afb      	ldrh	r3, [r7, #22]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4413      	add	r3, r2
 800fa70:	781a      	ldrb	r2, [r3, #0]
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	3301      	adds	r3, #1
 800fa7a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fa7c:	8afb      	ldrh	r3, [r7, #22]
 800fa7e:	3302      	adds	r3, #2
 800fa80:	82fb      	strh	r3, [r7, #22]
 800fa82:	8afa      	ldrh	r2, [r7, #22]
 800fa84:	8abb      	ldrh	r3, [r7, #20]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d3ef      	bcc.n	800fa6a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	701a      	strb	r2, [r3, #0]
  }
}
 800fa90:	bf00      	nop
 800fa92:	371c      	adds	r7, #28
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	881a      	ldrh	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	b29b      	uxth	r3, r3
 800fab0:	4413      	add	r3, r2
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4413      	add	r3, r2
 800fac2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fac4:	68fb      	ldr	r3, [r7, #12]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3714      	adds	r7, #20
 800faca:	46bd      	mov	sp, r7
 800facc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad0:	4770      	bx	lr

0800fad2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b086      	sub	sp, #24
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	60f8      	str	r0, [r7, #12]
 800fada:	60b9      	str	r1, [r7, #8]
 800fadc:	4613      	mov	r3, r2
 800fade:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fae0:	2301      	movs	r3, #1
 800fae2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	789b      	ldrb	r3, [r3, #2]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d002      	beq.n	800faf2 <USBH_CtlReq+0x20>
 800faec:	2b02      	cmp	r3, #2
 800faee:	d00f      	beq.n	800fb10 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800faf0:	e027      	b.n	800fb42 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	68ba      	ldr	r2, [r7, #8]
 800faf6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	88fa      	ldrh	r2, [r7, #6]
 800fafc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2201      	movs	r2, #1
 800fb02:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	2202      	movs	r2, #2
 800fb08:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	75fb      	strb	r3, [r7, #23]
      break;
 800fb0e:	e018      	b.n	800fb42 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f000 f81b 	bl	800fb4c <USBH_HandleControl>
 800fb16:	4603      	mov	r3, r0
 800fb18:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d002      	beq.n	800fb26 <USBH_CtlReq+0x54>
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	d106      	bne.n	800fb34 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	761a      	strb	r2, [r3, #24]
      break;
 800fb32:	e005      	b.n	800fb40 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800fb34:	7dfb      	ldrb	r3, [r7, #23]
 800fb36:	2b02      	cmp	r3, #2
 800fb38:	d102      	bne.n	800fb40 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	709a      	strb	r2, [r3, #2]
      break;
 800fb40:	bf00      	nop
  }
  return status;
 800fb42:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3718      	adds	r7, #24
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af02      	add	r7, sp, #8
 800fb52:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fb54:	2301      	movs	r3, #1
 800fb56:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	7e1b      	ldrb	r3, [r3, #24]
 800fb60:	3b01      	subs	r3, #1
 800fb62:	2b0a      	cmp	r3, #10
 800fb64:	f200 8156 	bhi.w	800fe14 <USBH_HandleControl+0x2c8>
 800fb68:	a201      	add	r2, pc, #4	; (adr r2, 800fb70 <USBH_HandleControl+0x24>)
 800fb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb6e:	bf00      	nop
 800fb70:	0800fb9d 	.word	0x0800fb9d
 800fb74:	0800fbb7 	.word	0x0800fbb7
 800fb78:	0800fc21 	.word	0x0800fc21
 800fb7c:	0800fc47 	.word	0x0800fc47
 800fb80:	0800fc7f 	.word	0x0800fc7f
 800fb84:	0800fca9 	.word	0x0800fca9
 800fb88:	0800fcfb 	.word	0x0800fcfb
 800fb8c:	0800fd1d 	.word	0x0800fd1d
 800fb90:	0800fd59 	.word	0x0800fd59
 800fb94:	0800fd7f 	.word	0x0800fd7f
 800fb98:	0800fdbd 	.word	0x0800fdbd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f103 0110 	add.w	r1, r3, #16
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	795b      	ldrb	r3, [r3, #5]
 800fba6:	461a      	mov	r2, r3
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 f943 	bl	800fe34 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2202      	movs	r2, #2
 800fbb2:	761a      	strb	r2, [r3, #24]
      break;
 800fbb4:	e139      	b.n	800fe2a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	795b      	ldrb	r3, [r3, #5]
 800fbba:	4619      	mov	r1, r3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f000 fcc5 	bl	801054c <USBH_LL_GetURBState>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fbc6:	7bbb      	ldrb	r3, [r7, #14]
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d11e      	bne.n	800fc0a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	7c1b      	ldrb	r3, [r3, #16]
 800fbd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fbd4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	8adb      	ldrh	r3, [r3, #22]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00a      	beq.n	800fbf4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fbde:	7b7b      	ldrb	r3, [r7, #13]
 800fbe0:	2b80      	cmp	r3, #128	; 0x80
 800fbe2:	d103      	bne.n	800fbec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2203      	movs	r2, #3
 800fbe8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fbea:	e115      	b.n	800fe18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2205      	movs	r2, #5
 800fbf0:	761a      	strb	r2, [r3, #24]
      break;
 800fbf2:	e111      	b.n	800fe18 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800fbf4:	7b7b      	ldrb	r3, [r7, #13]
 800fbf6:	2b80      	cmp	r3, #128	; 0x80
 800fbf8:	d103      	bne.n	800fc02 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2209      	movs	r2, #9
 800fbfe:	761a      	strb	r2, [r3, #24]
      break;
 800fc00:	e10a      	b.n	800fe18 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2207      	movs	r2, #7
 800fc06:	761a      	strb	r2, [r3, #24]
      break;
 800fc08:	e106      	b.n	800fe18 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fc0a:	7bbb      	ldrb	r3, [r7, #14]
 800fc0c:	2b04      	cmp	r3, #4
 800fc0e:	d003      	beq.n	800fc18 <USBH_HandleControl+0xcc>
 800fc10:	7bbb      	ldrb	r3, [r7, #14]
 800fc12:	2b02      	cmp	r3, #2
 800fc14:	f040 8100 	bne.w	800fe18 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	220b      	movs	r2, #11
 800fc1c:	761a      	strb	r2, [r3, #24]
      break;
 800fc1e:	e0fb      	b.n	800fe18 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6899      	ldr	r1, [r3, #8]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	899a      	ldrh	r2, [r3, #12]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	791b      	ldrb	r3, [r3, #4]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 f93a 	bl	800feb2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2204      	movs	r2, #4
 800fc42:	761a      	strb	r2, [r3, #24]
      break;
 800fc44:	e0f1      	b.n	800fe2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	791b      	ldrb	r3, [r3, #4]
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 fc7d 	bl	801054c <USBH_LL_GetURBState>
 800fc52:	4603      	mov	r3, r0
 800fc54:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fc56:	7bbb      	ldrb	r3, [r7, #14]
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d102      	bne.n	800fc62 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2209      	movs	r2, #9
 800fc60:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800fc62:	7bbb      	ldrb	r3, [r7, #14]
 800fc64:	2b05      	cmp	r3, #5
 800fc66:	d102      	bne.n	800fc6e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800fc68:	2303      	movs	r3, #3
 800fc6a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fc6c:	e0d6      	b.n	800fe1c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800fc6e:	7bbb      	ldrb	r3, [r7, #14]
 800fc70:	2b04      	cmp	r3, #4
 800fc72:	f040 80d3 	bne.w	800fe1c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	220b      	movs	r2, #11
 800fc7a:	761a      	strb	r2, [r3, #24]
      break;
 800fc7c:	e0ce      	b.n	800fe1c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6899      	ldr	r1, [r3, #8]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	899a      	ldrh	r2, [r3, #12]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	795b      	ldrb	r3, [r3, #5]
 800fc8a:	2001      	movs	r0, #1
 800fc8c:	9000      	str	r0, [sp, #0]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f8ea 	bl	800fe68 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2206      	movs	r2, #6
 800fca4:	761a      	strb	r2, [r3, #24]
      break;
 800fca6:	e0c0      	b.n	800fe2a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	795b      	ldrb	r3, [r3, #5]
 800fcac:	4619      	mov	r1, r3
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 fc4c 	bl	801054c <USBH_LL_GetURBState>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fcb8:	7bbb      	ldrb	r3, [r7, #14]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d103      	bne.n	800fcc6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2207      	movs	r2, #7
 800fcc2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fcc4:	e0ac      	b.n	800fe20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800fcc6:	7bbb      	ldrb	r3, [r7, #14]
 800fcc8:	2b05      	cmp	r3, #5
 800fcca:	d105      	bne.n	800fcd8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	220c      	movs	r2, #12
 800fcd0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800fcd2:	2303      	movs	r3, #3
 800fcd4:	73fb      	strb	r3, [r7, #15]
      break;
 800fcd6:	e0a3      	b.n	800fe20 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fcd8:	7bbb      	ldrb	r3, [r7, #14]
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d103      	bne.n	800fce6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2205      	movs	r2, #5
 800fce2:	761a      	strb	r2, [r3, #24]
      break;
 800fce4:	e09c      	b.n	800fe20 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800fce6:	7bbb      	ldrb	r3, [r7, #14]
 800fce8:	2b04      	cmp	r3, #4
 800fcea:	f040 8099 	bne.w	800fe20 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	220b      	movs	r2, #11
 800fcf2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800fcf4:	2302      	movs	r3, #2
 800fcf6:	73fb      	strb	r3, [r7, #15]
      break;
 800fcf8:	e092      	b.n	800fe20 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	791b      	ldrb	r3, [r3, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	2100      	movs	r1, #0
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f8d5 	bl	800feb2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2208      	movs	r2, #8
 800fd18:	761a      	strb	r2, [r3, #24]

      break;
 800fd1a:	e086      	b.n	800fe2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	791b      	ldrb	r3, [r3, #4]
 800fd20:	4619      	mov	r1, r3
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fc12 	bl	801054c <USBH_LL_GetURBState>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800fd2c:	7bbb      	ldrb	r3, [r7, #14]
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d105      	bne.n	800fd3e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	220d      	movs	r2, #13
 800fd36:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fd3c:	e072      	b.n	800fe24 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800fd3e:	7bbb      	ldrb	r3, [r7, #14]
 800fd40:	2b04      	cmp	r3, #4
 800fd42:	d103      	bne.n	800fd4c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	220b      	movs	r2, #11
 800fd48:	761a      	strb	r2, [r3, #24]
      break;
 800fd4a:	e06b      	b.n	800fe24 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800fd4c:	7bbb      	ldrb	r3, [r7, #14]
 800fd4e:	2b05      	cmp	r3, #5
 800fd50:	d168      	bne.n	800fe24 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800fd52:	2303      	movs	r3, #3
 800fd54:	73fb      	strb	r3, [r7, #15]
      break;
 800fd56:	e065      	b.n	800fe24 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	795b      	ldrb	r3, [r3, #5]
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	9200      	str	r2, [sp, #0]
 800fd60:	2200      	movs	r2, #0
 800fd62:	2100      	movs	r1, #0
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 f87f 	bl	800fe68 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	220a      	movs	r2, #10
 800fd7a:	761a      	strb	r2, [r3, #24]
      break;
 800fd7c:	e055      	b.n	800fe2a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	795b      	ldrb	r3, [r3, #5]
 800fd82:	4619      	mov	r1, r3
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f000 fbe1 	bl	801054c <USBH_LL_GetURBState>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fd8e:	7bbb      	ldrb	r3, [r7, #14]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d105      	bne.n	800fda0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	220d      	movs	r2, #13
 800fd9c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fd9e:	e043      	b.n	800fe28 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fda0:	7bbb      	ldrb	r3, [r7, #14]
 800fda2:	2b02      	cmp	r3, #2
 800fda4:	d103      	bne.n	800fdae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2209      	movs	r2, #9
 800fdaa:	761a      	strb	r2, [r3, #24]
      break;
 800fdac:	e03c      	b.n	800fe28 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800fdae:	7bbb      	ldrb	r3, [r7, #14]
 800fdb0:	2b04      	cmp	r3, #4
 800fdb2:	d139      	bne.n	800fe28 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	220b      	movs	r2, #11
 800fdb8:	761a      	strb	r2, [r3, #24]
      break;
 800fdba:	e035      	b.n	800fe28 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	7e5b      	ldrb	r3, [r3, #25]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	b2da      	uxtb	r2, r3
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	765a      	strb	r2, [r3, #25]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	7e5b      	ldrb	r3, [r3, #25]
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d806      	bhi.n	800fdde <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2201      	movs	r2, #1
 800fdd4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fddc:	e025      	b.n	800fe2a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fde4:	2106      	movs	r1, #6
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	795b      	ldrb	r3, [r3, #5]
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 f90c 	bl	8010014 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	791b      	ldrb	r3, [r3, #4]
 800fe00:	4619      	mov	r1, r3
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f906 	bl	8010014 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fe0e:	2302      	movs	r3, #2
 800fe10:	73fb      	strb	r3, [r7, #15]
      break;
 800fe12:	e00a      	b.n	800fe2a <USBH_HandleControl+0x2de>

    default:
      break;
 800fe14:	bf00      	nop
 800fe16:	e008      	b.n	800fe2a <USBH_HandleControl+0x2de>
      break;
 800fe18:	bf00      	nop
 800fe1a:	e006      	b.n	800fe2a <USBH_HandleControl+0x2de>
      break;
 800fe1c:	bf00      	nop
 800fe1e:	e004      	b.n	800fe2a <USBH_HandleControl+0x2de>
      break;
 800fe20:	bf00      	nop
 800fe22:	e002      	b.n	800fe2a <USBH_HandleControl+0x2de>
      break;
 800fe24:	bf00      	nop
 800fe26:	e000      	b.n	800fe2a <USBH_HandleControl+0x2de>
      break;
 800fe28:	bf00      	nop
  }

  return status;
 800fe2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b088      	sub	sp, #32
 800fe38:	af04      	add	r7, sp, #16
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	4613      	mov	r3, r2
 800fe40:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fe42:	79f9      	ldrb	r1, [r7, #7]
 800fe44:	2300      	movs	r3, #0
 800fe46:	9303      	str	r3, [sp, #12]
 800fe48:	2308      	movs	r3, #8
 800fe4a:	9302      	str	r3, [sp, #8]
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	9301      	str	r3, [sp, #4]
 800fe50:	2300      	movs	r3, #0
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	2300      	movs	r3, #0
 800fe56:	2200      	movs	r2, #0
 800fe58:	68f8      	ldr	r0, [r7, #12]
 800fe5a:	f000 fb46 	bl	80104ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3710      	adds	r7, #16
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b088      	sub	sp, #32
 800fe6c:	af04      	add	r7, sp, #16
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	4611      	mov	r1, r2
 800fe74:	461a      	mov	r2, r3
 800fe76:	460b      	mov	r3, r1
 800fe78:	80fb      	strh	r3, [r7, #6]
 800fe7a:	4613      	mov	r3, r2
 800fe7c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fe8c:	7979      	ldrb	r1, [r7, #5]
 800fe8e:	7e3b      	ldrb	r3, [r7, #24]
 800fe90:	9303      	str	r3, [sp, #12]
 800fe92:	88fb      	ldrh	r3, [r7, #6]
 800fe94:	9302      	str	r3, [sp, #8]
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	9301      	str	r3, [sp, #4]
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	2300      	movs	r3, #0
 800fea0:	2200      	movs	r2, #0
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f000 fb21 	bl	80104ea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800feb2:	b580      	push	{r7, lr}
 800feb4:	b088      	sub	sp, #32
 800feb6:	af04      	add	r7, sp, #16
 800feb8:	60f8      	str	r0, [r7, #12]
 800feba:	60b9      	str	r1, [r7, #8]
 800febc:	4611      	mov	r1, r2
 800febe:	461a      	mov	r2, r3
 800fec0:	460b      	mov	r3, r1
 800fec2:	80fb      	strh	r3, [r7, #6]
 800fec4:	4613      	mov	r3, r2
 800fec6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fec8:	7979      	ldrb	r1, [r7, #5]
 800feca:	2300      	movs	r3, #0
 800fecc:	9303      	str	r3, [sp, #12]
 800fece:	88fb      	ldrh	r3, [r7, #6]
 800fed0:	9302      	str	r3, [sp, #8]
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	9301      	str	r3, [sp, #4]
 800fed6:	2301      	movs	r3, #1
 800fed8:	9300      	str	r3, [sp, #0]
 800feda:	2300      	movs	r3, #0
 800fedc:	2201      	movs	r2, #1
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f000 fb03 	bl	80104ea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fee4:	2300      	movs	r3, #0

}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3710      	adds	r7, #16
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b088      	sub	sp, #32
 800fef2:	af04      	add	r7, sp, #16
 800fef4:	60f8      	str	r0, [r7, #12]
 800fef6:	60b9      	str	r1, [r7, #8]
 800fef8:	4611      	mov	r1, r2
 800fefa:	461a      	mov	r2, r3
 800fefc:	460b      	mov	r3, r1
 800fefe:	80fb      	strh	r3, [r7, #6]
 800ff00:	4613      	mov	r3, r2
 800ff02:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d001      	beq.n	800ff12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ff12:	7979      	ldrb	r1, [r7, #5]
 800ff14:	7e3b      	ldrb	r3, [r7, #24]
 800ff16:	9303      	str	r3, [sp, #12]
 800ff18:	88fb      	ldrh	r3, [r7, #6]
 800ff1a:	9302      	str	r3, [sp, #8]
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	9301      	str	r3, [sp, #4]
 800ff20:	2301      	movs	r3, #1
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	2302      	movs	r3, #2
 800ff26:	2200      	movs	r2, #0
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f000 fade 	bl	80104ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3710      	adds	r7, #16
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b088      	sub	sp, #32
 800ff3c:	af04      	add	r7, sp, #16
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	4611      	mov	r1, r2
 800ff44:	461a      	mov	r2, r3
 800ff46:	460b      	mov	r3, r1
 800ff48:	80fb      	strh	r3, [r7, #6]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ff4e:	7979      	ldrb	r1, [r7, #5]
 800ff50:	2300      	movs	r3, #0
 800ff52:	9303      	str	r3, [sp, #12]
 800ff54:	88fb      	ldrh	r3, [r7, #6]
 800ff56:	9302      	str	r3, [sp, #8]
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	9301      	str	r3, [sp, #4]
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	2302      	movs	r3, #2
 800ff62:	2201      	movs	r2, #1
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f000 fac0 	bl	80104ea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ff6a:	2300      	movs	r3, #0
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b086      	sub	sp, #24
 800ff78:	af04      	add	r7, sp, #16
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	4608      	mov	r0, r1
 800ff7e:	4611      	mov	r1, r2
 800ff80:	461a      	mov	r2, r3
 800ff82:	4603      	mov	r3, r0
 800ff84:	70fb      	strb	r3, [r7, #3]
 800ff86:	460b      	mov	r3, r1
 800ff88:	70bb      	strb	r3, [r7, #2]
 800ff8a:	4613      	mov	r3, r2
 800ff8c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ff8e:	7878      	ldrb	r0, [r7, #1]
 800ff90:	78ba      	ldrb	r2, [r7, #2]
 800ff92:	78f9      	ldrb	r1, [r7, #3]
 800ff94:	8b3b      	ldrh	r3, [r7, #24]
 800ff96:	9302      	str	r3, [sp, #8]
 800ff98:	7d3b      	ldrb	r3, [r7, #20]
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	7c3b      	ldrb	r3, [r7, #16]
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 fa53 	bl	801044e <USBH_LL_OpenPipe>

  return USBH_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3708      	adds	r7, #8
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b082      	sub	sp, #8
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	6078      	str	r0, [r7, #4]
 800ffba:	460b      	mov	r3, r1
 800ffbc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ffbe:	78fb      	ldrb	r3, [r7, #3]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 fa72 	bl	80104ac <USBH_LL_ClosePipe>

  return USBH_OK;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b084      	sub	sp, #16
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
 800ffda:	460b      	mov	r3, r1
 800ffdc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 f836 	bl	8010050 <USBH_GetFreePipe>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ffe8:	89fb      	ldrh	r3, [r7, #14]
 800ffea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d00a      	beq.n	8010008 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fff2:	78fa      	ldrb	r2, [r7, #3]
 800fff4:	89fb      	ldrh	r3, [r7, #14]
 800fff6:	f003 030f 	and.w	r3, r3, #15
 800fffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fffe:	6879      	ldr	r1, [r7, #4]
 8010000:	33e0      	adds	r3, #224	; 0xe0
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	440b      	add	r3, r1
 8010006:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010008:	89fb      	ldrh	r3, [r7, #14]
 801000a:	b2db      	uxtb	r3, r3
}
 801000c:	4618      	mov	r0, r3
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	460b      	mov	r3, r1
 801001e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010020:	78fb      	ldrb	r3, [r7, #3]
 8010022:	2b0a      	cmp	r3, #10
 8010024:	d80d      	bhi.n	8010042 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010026:	78fb      	ldrb	r3, [r7, #3]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	33e0      	adds	r3, #224	; 0xe0
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	4413      	add	r3, r2
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	78fb      	ldrb	r3, [r7, #3]
 8010034:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010038:	6879      	ldr	r1, [r7, #4]
 801003a:	33e0      	adds	r3, #224	; 0xe0
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	440b      	add	r3, r1
 8010040:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010058:	2300      	movs	r3, #0
 801005a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 801005c:	2300      	movs	r3, #0
 801005e:	73fb      	strb	r3, [r7, #15]
 8010060:	e00f      	b.n	8010082 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010062:	7bfb      	ldrb	r3, [r7, #15]
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	33e0      	adds	r3, #224	; 0xe0
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	4413      	add	r3, r2
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010072:	2b00      	cmp	r3, #0
 8010074:	d102      	bne.n	801007c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010076:	7bfb      	ldrb	r3, [r7, #15]
 8010078:	b29b      	uxth	r3, r3
 801007a:	e007      	b.n	801008c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801007c:	7bfb      	ldrb	r3, [r7, #15]
 801007e:	3301      	adds	r3, #1
 8010080:	73fb      	strb	r3, [r7, #15]
 8010082:	7bfb      	ldrb	r3, [r7, #15]
 8010084:	2b0a      	cmp	r3, #10
 8010086:	d9ec      	bls.n	8010062 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010088:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801008c:	4618      	mov	r0, r3
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801009c:	2201      	movs	r2, #1
 801009e:	490e      	ldr	r1, [pc, #56]	; (80100d8 <MX_USB_HOST_Init+0x40>)
 80100a0:	480e      	ldr	r0, [pc, #56]	; (80100dc <MX_USB_HOST_Init+0x44>)
 80100a2:	f7fe fca1 	bl	800e9e8 <USBH_Init>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80100ac:	f7f3 faa6 	bl	80035fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80100b0:	490b      	ldr	r1, [pc, #44]	; (80100e0 <MX_USB_HOST_Init+0x48>)
 80100b2:	480a      	ldr	r0, [pc, #40]	; (80100dc <MX_USB_HOST_Init+0x44>)
 80100b4:	f7fe fd26 	bl	800eb04 <USBH_RegisterClass>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80100be:	f7f3 fa9d 	bl	80035fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80100c2:	4806      	ldr	r0, [pc, #24]	; (80100dc <MX_USB_HOST_Init+0x44>)
 80100c4:	f7fe fdaa 	bl	800ec1c <USBH_Start>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80100ce:	f7f3 fa95 	bl	80035fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80100d2:	bf00      	nop
 80100d4:	bd80      	pop	{r7, pc}
 80100d6:	bf00      	nop
 80100d8:	080100f9 	.word	0x080100f9
 80100dc:	20000f44 	.word	0x20000f44
 80100e0:	200000e4 	.word	0x200000e4

080100e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80100e8:	4802      	ldr	r0, [pc, #8]	; (80100f4 <MX_USB_HOST_Process+0x10>)
 80100ea:	f7fe fda7 	bl	800ec3c <USBH_Process>
}
 80100ee:	bf00      	nop
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	20000f44 	.word	0x20000f44

080100f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	460b      	mov	r3, r1
 8010102:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010104:	78fb      	ldrb	r3, [r7, #3]
 8010106:	3b01      	subs	r3, #1
 8010108:	2b04      	cmp	r3, #4
 801010a:	d819      	bhi.n	8010140 <USBH_UserProcess+0x48>
 801010c:	a201      	add	r2, pc, #4	; (adr r2, 8010114 <USBH_UserProcess+0x1c>)
 801010e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010112:	bf00      	nop
 8010114:	08010141 	.word	0x08010141
 8010118:	08010131 	.word	0x08010131
 801011c:	08010141 	.word	0x08010141
 8010120:	08010139 	.word	0x08010139
 8010124:	08010129 	.word	0x08010129
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010128:	4b09      	ldr	r3, [pc, #36]	; (8010150 <USBH_UserProcess+0x58>)
 801012a:	2203      	movs	r2, #3
 801012c:	701a      	strb	r2, [r3, #0]
  break;
 801012e:	e008      	b.n	8010142 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010130:	4b07      	ldr	r3, [pc, #28]	; (8010150 <USBH_UserProcess+0x58>)
 8010132:	2202      	movs	r2, #2
 8010134:	701a      	strb	r2, [r3, #0]
  break;
 8010136:	e004      	b.n	8010142 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010138:	4b05      	ldr	r3, [pc, #20]	; (8010150 <USBH_UserProcess+0x58>)
 801013a:	2201      	movs	r2, #1
 801013c:	701a      	strb	r2, [r3, #0]
  break;
 801013e:	e000      	b.n	8010142 <USBH_UserProcess+0x4a>

  default:
  break;
 8010140:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010142:	bf00      	nop
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	200003f4 	.word	0x200003f4

08010154 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b08a      	sub	sp, #40	; 0x28
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801015c:	f107 0314 	add.w	r3, r7, #20
 8010160:	2200      	movs	r2, #0
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	605a      	str	r2, [r3, #4]
 8010166:	609a      	str	r2, [r3, #8]
 8010168:	60da      	str	r2, [r3, #12]
 801016a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010174:	d147      	bne.n	8010206 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010176:	2300      	movs	r3, #0
 8010178:	613b      	str	r3, [r7, #16]
 801017a:	4b25      	ldr	r3, [pc, #148]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 801017c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017e:	4a24      	ldr	r2, [pc, #144]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 8010180:	f043 0301 	orr.w	r3, r3, #1
 8010184:	6313      	str	r3, [r2, #48]	; 0x30
 8010186:	4b22      	ldr	r3, [pc, #136]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 8010188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801018a:	f003 0301 	and.w	r3, r3, #1
 801018e:	613b      	str	r3, [r7, #16]
 8010190:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010198:	2300      	movs	r3, #0
 801019a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801019c:	2300      	movs	r3, #0
 801019e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80101a0:	f107 0314 	add.w	r3, r7, #20
 80101a4:	4619      	mov	r1, r3
 80101a6:	481b      	ldr	r0, [pc, #108]	; (8010214 <HAL_HCD_MspInit+0xc0>)
 80101a8:	f7f5 fdc0 	bl	8005d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80101ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80101b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101b2:	2302      	movs	r3, #2
 80101b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101ba:	2303      	movs	r3, #3
 80101bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101be:	230a      	movs	r3, #10
 80101c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101c2:	f107 0314 	add.w	r3, r7, #20
 80101c6:	4619      	mov	r1, r3
 80101c8:	4812      	ldr	r0, [pc, #72]	; (8010214 <HAL_HCD_MspInit+0xc0>)
 80101ca:	f7f5 fdaf 	bl	8005d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101ce:	4b10      	ldr	r3, [pc, #64]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 80101d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101d2:	4a0f      	ldr	r2, [pc, #60]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 80101d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d8:	6353      	str	r3, [r2, #52]	; 0x34
 80101da:	2300      	movs	r3, #0
 80101dc:	60fb      	str	r3, [r7, #12]
 80101de:	4b0c      	ldr	r3, [pc, #48]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 80101e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101e2:	4a0b      	ldr	r2, [pc, #44]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 80101e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80101e8:	6453      	str	r3, [r2, #68]	; 0x44
 80101ea:	4b09      	ldr	r3, [pc, #36]	; (8010210 <HAL_HCD_MspInit+0xbc>)
 80101ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101f2:	60fb      	str	r3, [r7, #12]
 80101f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80101f6:	2200      	movs	r2, #0
 80101f8:	2100      	movs	r1, #0
 80101fa:	2043      	movs	r0, #67	; 0x43
 80101fc:	f7f5 f838 	bl	8005270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010200:	2043      	movs	r0, #67	; 0x43
 8010202:	f7f5 f861 	bl	80052c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010206:	bf00      	nop
 8010208:	3728      	adds	r7, #40	; 0x28
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
 801020e:	bf00      	nop
 8010210:	40023800 	.word	0x40023800
 8010214:	40020000 	.word	0x40020000

08010218 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010226:	4618      	mov	r0, r3
 8010228:	f7ff f8db 	bl	800f3e2 <USBH_LL_IncTimer>
}
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b082      	sub	sp, #8
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010242:	4618      	mov	r0, r3
 8010244:	f7ff f913 	bl	800f46e <USBH_LL_Connect>
}
 8010248:	bf00      	nop
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801025e:	4618      	mov	r0, r3
 8010260:	f7ff f91c 	bl	800f49c <USBH_LL_Disconnect>
}
 8010264:	bf00      	nop
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	70fb      	strb	r3, [r7, #3]
 8010278:	4613      	mov	r3, r2
 801027a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801027c:	bf00      	nop
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010296:	4618      	mov	r0, r3
 8010298:	f7ff f8cd 	bl	800f436 <USBH_LL_PortEnabled>
}
 801029c:	bf00      	nop
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b082      	sub	sp, #8
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff f8cd 	bl	800f452 <USBH_LL_PortDisabled>
}
 80102b8:	bf00      	nop
 80102ba:	3708      	adds	r7, #8
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d12a      	bne.n	8010328 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80102d2:	4a18      	ldr	r2, [pc, #96]	; (8010334 <USBH_LL_Init+0x74>)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4a15      	ldr	r2, [pc, #84]	; (8010334 <USBH_LL_Init+0x74>)
 80102de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80102e2:	4b14      	ldr	r3, [pc, #80]	; (8010334 <USBH_LL_Init+0x74>)
 80102e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80102e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80102ea:	4b12      	ldr	r3, [pc, #72]	; (8010334 <USBH_LL_Init+0x74>)
 80102ec:	2208      	movs	r2, #8
 80102ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80102f0:	4b10      	ldr	r3, [pc, #64]	; (8010334 <USBH_LL_Init+0x74>)
 80102f2:	2201      	movs	r2, #1
 80102f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80102f6:	4b0f      	ldr	r3, [pc, #60]	; (8010334 <USBH_LL_Init+0x74>)
 80102f8:	2200      	movs	r2, #0
 80102fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80102fc:	4b0d      	ldr	r3, [pc, #52]	; (8010334 <USBH_LL_Init+0x74>)
 80102fe:	2202      	movs	r2, #2
 8010300:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010302:	4b0c      	ldr	r3, [pc, #48]	; (8010334 <USBH_LL_Init+0x74>)
 8010304:	2200      	movs	r2, #0
 8010306:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010308:	480a      	ldr	r0, [pc, #40]	; (8010334 <USBH_LL_Init+0x74>)
 801030a:	f7f6 f8f7 	bl	80064fc <HAL_HCD_Init>
 801030e:	4603      	mov	r3, r0
 8010310:	2b00      	cmp	r3, #0
 8010312:	d001      	beq.n	8010318 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010314:	f7f3 f972 	bl	80035fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010318:	4806      	ldr	r0, [pc, #24]	; (8010334 <USBH_LL_Init+0x74>)
 801031a:	f7f6 fce6 	bl	8006cea <HAL_HCD_GetCurrentFrame>
 801031e:	4603      	mov	r3, r0
 8010320:	4619      	mov	r1, r3
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7ff f84e 	bl	800f3c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010328:	2300      	movs	r3, #0
}
 801032a:	4618      	mov	r0, r3
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	2000131c 	.word	0x2000131c

08010338 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010340:	2300      	movs	r3, #0
 8010342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010344:	2300      	movs	r3, #0
 8010346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801034e:	4618      	mov	r0, r3
 8010350:	f7f6 fc55 	bl	8006bfe <HAL_HCD_Start>
 8010354:	4603      	mov	r3, r0
 8010356:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010358:	7bfb      	ldrb	r3, [r7, #15]
 801035a:	4618      	mov	r0, r3
 801035c:	f000 f95c 	bl	8010618 <USBH_Get_USB_Status>
 8010360:	4603      	mov	r3, r0
 8010362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010364:	7bbb      	ldrb	r3, [r7, #14]
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801036e:	b580      	push	{r7, lr}
 8010370:	b084      	sub	sp, #16
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010376:	2300      	movs	r3, #0
 8010378:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801037a:	2300      	movs	r3, #0
 801037c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010384:	4618      	mov	r0, r3
 8010386:	f7f6 fc5d 	bl	8006c44 <HAL_HCD_Stop>
 801038a:	4603      	mov	r3, r0
 801038c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801038e:	7bfb      	ldrb	r3, [r7, #15]
 8010390:	4618      	mov	r0, r3
 8010392:	f000 f941 	bl	8010618 <USBH_Get_USB_Status>
 8010396:	4603      	mov	r3, r0
 8010398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801039a:	7bbb      	ldrb	r3, [r7, #14]
}
 801039c:	4618      	mov	r0, r3
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80103ac:	2301      	movs	r3, #1
 80103ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7f6 fca5 	bl	8006d06 <HAL_HCD_GetCurrentSpeed>
 80103bc:	4603      	mov	r3, r0
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d00c      	beq.n	80103dc <USBH_LL_GetSpeed+0x38>
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	d80d      	bhi.n	80103e2 <USBH_LL_GetSpeed+0x3e>
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d002      	beq.n	80103d0 <USBH_LL_GetSpeed+0x2c>
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d003      	beq.n	80103d6 <USBH_LL_GetSpeed+0x32>
 80103ce:	e008      	b.n	80103e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80103d0:	2300      	movs	r3, #0
 80103d2:	73fb      	strb	r3, [r7, #15]
    break;
 80103d4:	e008      	b.n	80103e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80103d6:	2301      	movs	r3, #1
 80103d8:	73fb      	strb	r3, [r7, #15]
    break;
 80103da:	e005      	b.n	80103e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80103dc:	2302      	movs	r3, #2
 80103de:	73fb      	strb	r3, [r7, #15]
    break;
 80103e0:	e002      	b.n	80103e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80103e2:	2301      	movs	r3, #1
 80103e4:	73fb      	strb	r3, [r7, #15]
    break;
 80103e6:	bf00      	nop
  }
  return  speed;
 80103e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}

080103f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80103f2:	b580      	push	{r7, lr}
 80103f4:	b084      	sub	sp, #16
 80103f6:	af00      	add	r7, sp, #0
 80103f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103fa:	2300      	movs	r3, #0
 80103fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80103fe:	2300      	movs	r3, #0
 8010400:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010408:	4618      	mov	r0, r3
 801040a:	f7f6 fc38 	bl	8006c7e <HAL_HCD_ResetPort>
 801040e:	4603      	mov	r3, r0
 8010410:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010412:	7bfb      	ldrb	r3, [r7, #15]
 8010414:	4618      	mov	r0, r3
 8010416:	f000 f8ff 	bl	8010618 <USBH_Get_USB_Status>
 801041a:	4603      	mov	r3, r0
 801041c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801041e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	460b      	mov	r3, r1
 8010432:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801043a:	78fa      	ldrb	r2, [r7, #3]
 801043c:	4611      	mov	r1, r2
 801043e:	4618      	mov	r0, r3
 8010440:	f7f6 fc3f 	bl	8006cc2 <HAL_HCD_HC_GetXferCount>
 8010444:	4603      	mov	r3, r0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801044e:	b590      	push	{r4, r7, lr}
 8010450:	b089      	sub	sp, #36	; 0x24
 8010452:	af04      	add	r7, sp, #16
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	4608      	mov	r0, r1
 8010458:	4611      	mov	r1, r2
 801045a:	461a      	mov	r2, r3
 801045c:	4603      	mov	r3, r0
 801045e:	70fb      	strb	r3, [r7, #3]
 8010460:	460b      	mov	r3, r1
 8010462:	70bb      	strb	r3, [r7, #2]
 8010464:	4613      	mov	r3, r2
 8010466:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010468:	2300      	movs	r3, #0
 801046a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801046c:	2300      	movs	r3, #0
 801046e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010476:	787c      	ldrb	r4, [r7, #1]
 8010478:	78ba      	ldrb	r2, [r7, #2]
 801047a:	78f9      	ldrb	r1, [r7, #3]
 801047c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801047e:	9302      	str	r3, [sp, #8]
 8010480:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010484:	9301      	str	r3, [sp, #4]
 8010486:	f897 3020 	ldrb.w	r3, [r7, #32]
 801048a:	9300      	str	r3, [sp, #0]
 801048c:	4623      	mov	r3, r4
 801048e:	f7f6 f8a3 	bl	80065d8 <HAL_HCD_HC_Init>
 8010492:	4603      	mov	r3, r0
 8010494:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010496:	7bfb      	ldrb	r3, [r7, #15]
 8010498:	4618      	mov	r0, r3
 801049a:	f000 f8bd 	bl	8010618 <USBH_Get_USB_Status>
 801049e:	4603      	mov	r3, r0
 80104a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd90      	pop	{r4, r7, pc}

080104ac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	460b      	mov	r3, r1
 80104b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80104bc:	2300      	movs	r3, #0
 80104be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80104c6:	78fa      	ldrb	r2, [r7, #3]
 80104c8:	4611      	mov	r1, r2
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f6 f913 	bl	80066f6 <HAL_HCD_HC_Halt>
 80104d0:	4603      	mov	r3, r0
 80104d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f000 f89e 	bl	8010618 <USBH_Get_USB_Status>
 80104dc:	4603      	mov	r3, r0
 80104de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3710      	adds	r7, #16
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}

080104ea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80104ea:	b590      	push	{r4, r7, lr}
 80104ec:	b089      	sub	sp, #36	; 0x24
 80104ee:	af04      	add	r7, sp, #16
 80104f0:	6078      	str	r0, [r7, #4]
 80104f2:	4608      	mov	r0, r1
 80104f4:	4611      	mov	r1, r2
 80104f6:	461a      	mov	r2, r3
 80104f8:	4603      	mov	r3, r0
 80104fa:	70fb      	strb	r3, [r7, #3]
 80104fc:	460b      	mov	r3, r1
 80104fe:	70bb      	strb	r3, [r7, #2]
 8010500:	4613      	mov	r3, r2
 8010502:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010504:	2300      	movs	r3, #0
 8010506:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010508:	2300      	movs	r3, #0
 801050a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010512:	787c      	ldrb	r4, [r7, #1]
 8010514:	78ba      	ldrb	r2, [r7, #2]
 8010516:	78f9      	ldrb	r1, [r7, #3]
 8010518:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801051c:	9303      	str	r3, [sp, #12]
 801051e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010520:	9302      	str	r3, [sp, #8]
 8010522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010524:	9301      	str	r3, [sp, #4]
 8010526:	f897 3020 	ldrb.w	r3, [r7, #32]
 801052a:	9300      	str	r3, [sp, #0]
 801052c:	4623      	mov	r3, r4
 801052e:	f7f6 f905 	bl	800673c <HAL_HCD_HC_SubmitRequest>
 8010532:	4603      	mov	r3, r0
 8010534:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010536:	7bfb      	ldrb	r3, [r7, #15]
 8010538:	4618      	mov	r0, r3
 801053a:	f000 f86d 	bl	8010618 <USBH_Get_USB_Status>
 801053e:	4603      	mov	r3, r0
 8010540:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010542:	7bbb      	ldrb	r3, [r7, #14]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3714      	adds	r7, #20
 8010548:	46bd      	mov	sp, r7
 801054a:	bd90      	pop	{r4, r7, pc}

0801054c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	460b      	mov	r3, r1
 8010556:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801055e:	78fa      	ldrb	r2, [r7, #3]
 8010560:	4611      	mov	r1, r2
 8010562:	4618      	mov	r0, r3
 8010564:	f7f6 fb99 	bl	8006c9a <HAL_HCD_HC_GetURBState>
 8010568:	4603      	mov	r3, r0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b082      	sub	sp, #8
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
 801057a:	460b      	mov	r3, r1
 801057c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010584:	2b01      	cmp	r3, #1
 8010586:	d103      	bne.n	8010590 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010588:	78fb      	ldrb	r3, [r7, #3]
 801058a:	4618      	mov	r0, r3
 801058c:	f000 f870 	bl	8010670 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010590:	20c8      	movs	r0, #200	; 0xc8
 8010592:	f7f4 f97b 	bl	800488c <HAL_Delay>
  return USBH_OK;
 8010596:	2300      	movs	r3, #0
}
 8010598:	4618      	mov	r0, r3
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b085      	sub	sp, #20
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	460b      	mov	r3, r1
 80105aa:	70fb      	strb	r3, [r7, #3]
 80105ac:	4613      	mov	r3, r2
 80105ae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80105b6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80105b8:	78fb      	ldrb	r3, [r7, #3]
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	212c      	movs	r1, #44	; 0x2c
 80105be:	fb01 f303 	mul.w	r3, r1, r3
 80105c2:	4413      	add	r3, r2
 80105c4:	333b      	adds	r3, #59	; 0x3b
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d009      	beq.n	80105e0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80105cc:	78fb      	ldrb	r3, [r7, #3]
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	212c      	movs	r1, #44	; 0x2c
 80105d2:	fb01 f303 	mul.w	r3, r1, r3
 80105d6:	4413      	add	r3, r2
 80105d8:	3354      	adds	r3, #84	; 0x54
 80105da:	78ba      	ldrb	r2, [r7, #2]
 80105dc:	701a      	strb	r2, [r3, #0]
 80105de:	e008      	b.n	80105f2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	68fa      	ldr	r2, [r7, #12]
 80105e4:	212c      	movs	r1, #44	; 0x2c
 80105e6:	fb01 f303 	mul.w	r3, r1, r3
 80105ea:	4413      	add	r3, r2
 80105ec:	3355      	adds	r3, #85	; 0x55
 80105ee:	78ba      	ldrb	r2, [r7, #2]
 80105f0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80105f2:	2300      	movs	r3, #0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3714      	adds	r7, #20
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7f4 f93f 	bl	800488c <HAL_Delay>
}
 801060e:	bf00      	nop
 8010610:	3708      	adds	r7, #8
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
	...

08010618 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010618:	b480      	push	{r7}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	4603      	mov	r3, r0
 8010620:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010622:	2300      	movs	r3, #0
 8010624:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010626:	79fb      	ldrb	r3, [r7, #7]
 8010628:	2b03      	cmp	r3, #3
 801062a:	d817      	bhi.n	801065c <USBH_Get_USB_Status+0x44>
 801062c:	a201      	add	r2, pc, #4	; (adr r2, 8010634 <USBH_Get_USB_Status+0x1c>)
 801062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010632:	bf00      	nop
 8010634:	08010645 	.word	0x08010645
 8010638:	0801064b 	.word	0x0801064b
 801063c:	08010651 	.word	0x08010651
 8010640:	08010657 	.word	0x08010657
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010644:	2300      	movs	r3, #0
 8010646:	73fb      	strb	r3, [r7, #15]
    break;
 8010648:	e00b      	b.n	8010662 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801064a:	2302      	movs	r3, #2
 801064c:	73fb      	strb	r3, [r7, #15]
    break;
 801064e:	e008      	b.n	8010662 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010650:	2301      	movs	r3, #1
 8010652:	73fb      	strb	r3, [r7, #15]
    break;
 8010654:	e005      	b.n	8010662 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010656:	2302      	movs	r3, #2
 8010658:	73fb      	strb	r3, [r7, #15]
    break;
 801065a:	e002      	b.n	8010662 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801065c:	2302      	movs	r3, #2
 801065e:	73fb      	strb	r3, [r7, #15]
    break;
 8010660:	bf00      	nop
  }
  return usb_status;
 8010662:	7bfb      	ldrb	r3, [r7, #15]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3714      	adds	r7, #20
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b084      	sub	sp, #16
 8010674:	af00      	add	r7, sp, #0
 8010676:	4603      	mov	r3, r0
 8010678:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801067a:	79fb      	ldrb	r3, [r7, #7]
 801067c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801067e:	79fb      	ldrb	r3, [r7, #7]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d102      	bne.n	801068a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010684:	2301      	movs	r3, #1
 8010686:	73fb      	strb	r3, [r7, #15]
 8010688:	e001      	b.n	801068e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801068a:	2300      	movs	r3, #0
 801068c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 801068e:	7bfb      	ldrb	r3, [r7, #15]
 8010690:	461a      	mov	r2, r3
 8010692:	2101      	movs	r1, #1
 8010694:	4803      	ldr	r0, [pc, #12]	; (80106a4 <MX_DriverVbusFS+0x34>)
 8010696:	f7f5 fee7 	bl	8006468 <HAL_GPIO_WritePin>
}
 801069a:	bf00      	nop
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	40020800 	.word	0x40020800

080106a8 <__errno>:
 80106a8:	4b01      	ldr	r3, [pc, #4]	; (80106b0 <__errno+0x8>)
 80106aa:	6818      	ldr	r0, [r3, #0]
 80106ac:	4770      	bx	lr
 80106ae:	bf00      	nop
 80106b0:	20000104 	.word	0x20000104

080106b4 <__libc_init_array>:
 80106b4:	b570      	push	{r4, r5, r6, lr}
 80106b6:	4d0d      	ldr	r5, [pc, #52]	; (80106ec <__libc_init_array+0x38>)
 80106b8:	4c0d      	ldr	r4, [pc, #52]	; (80106f0 <__libc_init_array+0x3c>)
 80106ba:	1b64      	subs	r4, r4, r5
 80106bc:	10a4      	asrs	r4, r4, #2
 80106be:	2600      	movs	r6, #0
 80106c0:	42a6      	cmp	r6, r4
 80106c2:	d109      	bne.n	80106d8 <__libc_init_array+0x24>
 80106c4:	4d0b      	ldr	r5, [pc, #44]	; (80106f4 <__libc_init_array+0x40>)
 80106c6:	4c0c      	ldr	r4, [pc, #48]	; (80106f8 <__libc_init_array+0x44>)
 80106c8:	f002 fcfa 	bl	80130c0 <_init>
 80106cc:	1b64      	subs	r4, r4, r5
 80106ce:	10a4      	asrs	r4, r4, #2
 80106d0:	2600      	movs	r6, #0
 80106d2:	42a6      	cmp	r6, r4
 80106d4:	d105      	bne.n	80106e2 <__libc_init_array+0x2e>
 80106d6:	bd70      	pop	{r4, r5, r6, pc}
 80106d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80106dc:	4798      	blx	r3
 80106de:	3601      	adds	r6, #1
 80106e0:	e7ee      	b.n	80106c0 <__libc_init_array+0xc>
 80106e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80106e6:	4798      	blx	r3
 80106e8:	3601      	adds	r6, #1
 80106ea:	e7f2      	b.n	80106d2 <__libc_init_array+0x1e>
 80106ec:	08013d4c 	.word	0x08013d4c
 80106f0:	08013d4c 	.word	0x08013d4c
 80106f4:	08013d4c 	.word	0x08013d4c
 80106f8:	08013d50 	.word	0x08013d50

080106fc <malloc>:
 80106fc:	4b02      	ldr	r3, [pc, #8]	; (8010708 <malloc+0xc>)
 80106fe:	4601      	mov	r1, r0
 8010700:	6818      	ldr	r0, [r3, #0]
 8010702:	f000 b863 	b.w	80107cc <_malloc_r>
 8010706:	bf00      	nop
 8010708:	20000104 	.word	0x20000104

0801070c <free>:
 801070c:	4b02      	ldr	r3, [pc, #8]	; (8010718 <free+0xc>)
 801070e:	4601      	mov	r1, r0
 8010710:	6818      	ldr	r0, [r3, #0]
 8010712:	f000 b80b 	b.w	801072c <_free_r>
 8010716:	bf00      	nop
 8010718:	20000104 	.word	0x20000104

0801071c <memset>:
 801071c:	4402      	add	r2, r0
 801071e:	4603      	mov	r3, r0
 8010720:	4293      	cmp	r3, r2
 8010722:	d100      	bne.n	8010726 <memset+0xa>
 8010724:	4770      	bx	lr
 8010726:	f803 1b01 	strb.w	r1, [r3], #1
 801072a:	e7f9      	b.n	8010720 <memset+0x4>

0801072c <_free_r>:
 801072c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801072e:	2900      	cmp	r1, #0
 8010730:	d048      	beq.n	80107c4 <_free_r+0x98>
 8010732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010736:	9001      	str	r0, [sp, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	f1a1 0404 	sub.w	r4, r1, #4
 801073e:	bfb8      	it	lt
 8010740:	18e4      	addlt	r4, r4, r3
 8010742:	f001 fba3 	bl	8011e8c <__malloc_lock>
 8010746:	4a20      	ldr	r2, [pc, #128]	; (80107c8 <_free_r+0x9c>)
 8010748:	9801      	ldr	r0, [sp, #4]
 801074a:	6813      	ldr	r3, [r2, #0]
 801074c:	4615      	mov	r5, r2
 801074e:	b933      	cbnz	r3, 801075e <_free_r+0x32>
 8010750:	6063      	str	r3, [r4, #4]
 8010752:	6014      	str	r4, [r2, #0]
 8010754:	b003      	add	sp, #12
 8010756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801075a:	f001 bb9d 	b.w	8011e98 <__malloc_unlock>
 801075e:	42a3      	cmp	r3, r4
 8010760:	d90b      	bls.n	801077a <_free_r+0x4e>
 8010762:	6821      	ldr	r1, [r4, #0]
 8010764:	1862      	adds	r2, r4, r1
 8010766:	4293      	cmp	r3, r2
 8010768:	bf04      	itt	eq
 801076a:	681a      	ldreq	r2, [r3, #0]
 801076c:	685b      	ldreq	r3, [r3, #4]
 801076e:	6063      	str	r3, [r4, #4]
 8010770:	bf04      	itt	eq
 8010772:	1852      	addeq	r2, r2, r1
 8010774:	6022      	streq	r2, [r4, #0]
 8010776:	602c      	str	r4, [r5, #0]
 8010778:	e7ec      	b.n	8010754 <_free_r+0x28>
 801077a:	461a      	mov	r2, r3
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	b10b      	cbz	r3, 8010784 <_free_r+0x58>
 8010780:	42a3      	cmp	r3, r4
 8010782:	d9fa      	bls.n	801077a <_free_r+0x4e>
 8010784:	6811      	ldr	r1, [r2, #0]
 8010786:	1855      	adds	r5, r2, r1
 8010788:	42a5      	cmp	r5, r4
 801078a:	d10b      	bne.n	80107a4 <_free_r+0x78>
 801078c:	6824      	ldr	r4, [r4, #0]
 801078e:	4421      	add	r1, r4
 8010790:	1854      	adds	r4, r2, r1
 8010792:	42a3      	cmp	r3, r4
 8010794:	6011      	str	r1, [r2, #0]
 8010796:	d1dd      	bne.n	8010754 <_free_r+0x28>
 8010798:	681c      	ldr	r4, [r3, #0]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	6053      	str	r3, [r2, #4]
 801079e:	4421      	add	r1, r4
 80107a0:	6011      	str	r1, [r2, #0]
 80107a2:	e7d7      	b.n	8010754 <_free_r+0x28>
 80107a4:	d902      	bls.n	80107ac <_free_r+0x80>
 80107a6:	230c      	movs	r3, #12
 80107a8:	6003      	str	r3, [r0, #0]
 80107aa:	e7d3      	b.n	8010754 <_free_r+0x28>
 80107ac:	6825      	ldr	r5, [r4, #0]
 80107ae:	1961      	adds	r1, r4, r5
 80107b0:	428b      	cmp	r3, r1
 80107b2:	bf04      	itt	eq
 80107b4:	6819      	ldreq	r1, [r3, #0]
 80107b6:	685b      	ldreq	r3, [r3, #4]
 80107b8:	6063      	str	r3, [r4, #4]
 80107ba:	bf04      	itt	eq
 80107bc:	1949      	addeq	r1, r1, r5
 80107be:	6021      	streq	r1, [r4, #0]
 80107c0:	6054      	str	r4, [r2, #4]
 80107c2:	e7c7      	b.n	8010754 <_free_r+0x28>
 80107c4:	b003      	add	sp, #12
 80107c6:	bd30      	pop	{r4, r5, pc}
 80107c8:	200003f8 	.word	0x200003f8

080107cc <_malloc_r>:
 80107cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ce:	1ccd      	adds	r5, r1, #3
 80107d0:	f025 0503 	bic.w	r5, r5, #3
 80107d4:	3508      	adds	r5, #8
 80107d6:	2d0c      	cmp	r5, #12
 80107d8:	bf38      	it	cc
 80107da:	250c      	movcc	r5, #12
 80107dc:	2d00      	cmp	r5, #0
 80107de:	4606      	mov	r6, r0
 80107e0:	db01      	blt.n	80107e6 <_malloc_r+0x1a>
 80107e2:	42a9      	cmp	r1, r5
 80107e4:	d903      	bls.n	80107ee <_malloc_r+0x22>
 80107e6:	230c      	movs	r3, #12
 80107e8:	6033      	str	r3, [r6, #0]
 80107ea:	2000      	movs	r0, #0
 80107ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ee:	f001 fb4d 	bl	8011e8c <__malloc_lock>
 80107f2:	4921      	ldr	r1, [pc, #132]	; (8010878 <_malloc_r+0xac>)
 80107f4:	680a      	ldr	r2, [r1, #0]
 80107f6:	4614      	mov	r4, r2
 80107f8:	b99c      	cbnz	r4, 8010822 <_malloc_r+0x56>
 80107fa:	4f20      	ldr	r7, [pc, #128]	; (801087c <_malloc_r+0xb0>)
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	b923      	cbnz	r3, 801080a <_malloc_r+0x3e>
 8010800:	4621      	mov	r1, r4
 8010802:	4630      	mov	r0, r6
 8010804:	f000 fca6 	bl	8011154 <_sbrk_r>
 8010808:	6038      	str	r0, [r7, #0]
 801080a:	4629      	mov	r1, r5
 801080c:	4630      	mov	r0, r6
 801080e:	f000 fca1 	bl	8011154 <_sbrk_r>
 8010812:	1c43      	adds	r3, r0, #1
 8010814:	d123      	bne.n	801085e <_malloc_r+0x92>
 8010816:	230c      	movs	r3, #12
 8010818:	6033      	str	r3, [r6, #0]
 801081a:	4630      	mov	r0, r6
 801081c:	f001 fb3c 	bl	8011e98 <__malloc_unlock>
 8010820:	e7e3      	b.n	80107ea <_malloc_r+0x1e>
 8010822:	6823      	ldr	r3, [r4, #0]
 8010824:	1b5b      	subs	r3, r3, r5
 8010826:	d417      	bmi.n	8010858 <_malloc_r+0x8c>
 8010828:	2b0b      	cmp	r3, #11
 801082a:	d903      	bls.n	8010834 <_malloc_r+0x68>
 801082c:	6023      	str	r3, [r4, #0]
 801082e:	441c      	add	r4, r3
 8010830:	6025      	str	r5, [r4, #0]
 8010832:	e004      	b.n	801083e <_malloc_r+0x72>
 8010834:	6863      	ldr	r3, [r4, #4]
 8010836:	42a2      	cmp	r2, r4
 8010838:	bf0c      	ite	eq
 801083a:	600b      	streq	r3, [r1, #0]
 801083c:	6053      	strne	r3, [r2, #4]
 801083e:	4630      	mov	r0, r6
 8010840:	f001 fb2a 	bl	8011e98 <__malloc_unlock>
 8010844:	f104 000b 	add.w	r0, r4, #11
 8010848:	1d23      	adds	r3, r4, #4
 801084a:	f020 0007 	bic.w	r0, r0, #7
 801084e:	1ac2      	subs	r2, r0, r3
 8010850:	d0cc      	beq.n	80107ec <_malloc_r+0x20>
 8010852:	1a1b      	subs	r3, r3, r0
 8010854:	50a3      	str	r3, [r4, r2]
 8010856:	e7c9      	b.n	80107ec <_malloc_r+0x20>
 8010858:	4622      	mov	r2, r4
 801085a:	6864      	ldr	r4, [r4, #4]
 801085c:	e7cc      	b.n	80107f8 <_malloc_r+0x2c>
 801085e:	1cc4      	adds	r4, r0, #3
 8010860:	f024 0403 	bic.w	r4, r4, #3
 8010864:	42a0      	cmp	r0, r4
 8010866:	d0e3      	beq.n	8010830 <_malloc_r+0x64>
 8010868:	1a21      	subs	r1, r4, r0
 801086a:	4630      	mov	r0, r6
 801086c:	f000 fc72 	bl	8011154 <_sbrk_r>
 8010870:	3001      	adds	r0, #1
 8010872:	d1dd      	bne.n	8010830 <_malloc_r+0x64>
 8010874:	e7cf      	b.n	8010816 <_malloc_r+0x4a>
 8010876:	bf00      	nop
 8010878:	200003f8 	.word	0x200003f8
 801087c:	200003fc 	.word	0x200003fc

08010880 <__cvt>:
 8010880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010884:	ec55 4b10 	vmov	r4, r5, d0
 8010888:	2d00      	cmp	r5, #0
 801088a:	460e      	mov	r6, r1
 801088c:	4619      	mov	r1, r3
 801088e:	462b      	mov	r3, r5
 8010890:	bfbb      	ittet	lt
 8010892:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010896:	461d      	movlt	r5, r3
 8010898:	2300      	movge	r3, #0
 801089a:	232d      	movlt	r3, #45	; 0x2d
 801089c:	700b      	strb	r3, [r1, #0]
 801089e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80108a4:	4691      	mov	r9, r2
 80108a6:	f023 0820 	bic.w	r8, r3, #32
 80108aa:	bfbc      	itt	lt
 80108ac:	4622      	movlt	r2, r4
 80108ae:	4614      	movlt	r4, r2
 80108b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80108b4:	d005      	beq.n	80108c2 <__cvt+0x42>
 80108b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80108ba:	d100      	bne.n	80108be <__cvt+0x3e>
 80108bc:	3601      	adds	r6, #1
 80108be:	2102      	movs	r1, #2
 80108c0:	e000      	b.n	80108c4 <__cvt+0x44>
 80108c2:	2103      	movs	r1, #3
 80108c4:	ab03      	add	r3, sp, #12
 80108c6:	9301      	str	r3, [sp, #4]
 80108c8:	ab02      	add	r3, sp, #8
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	ec45 4b10 	vmov	d0, r4, r5
 80108d0:	4653      	mov	r3, sl
 80108d2:	4632      	mov	r2, r6
 80108d4:	f000 fcdc 	bl	8011290 <_dtoa_r>
 80108d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80108dc:	4607      	mov	r7, r0
 80108de:	d102      	bne.n	80108e6 <__cvt+0x66>
 80108e0:	f019 0f01 	tst.w	r9, #1
 80108e4:	d022      	beq.n	801092c <__cvt+0xac>
 80108e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80108ea:	eb07 0906 	add.w	r9, r7, r6
 80108ee:	d110      	bne.n	8010912 <__cvt+0x92>
 80108f0:	783b      	ldrb	r3, [r7, #0]
 80108f2:	2b30      	cmp	r3, #48	; 0x30
 80108f4:	d10a      	bne.n	801090c <__cvt+0x8c>
 80108f6:	2200      	movs	r2, #0
 80108f8:	2300      	movs	r3, #0
 80108fa:	4620      	mov	r0, r4
 80108fc:	4629      	mov	r1, r5
 80108fe:	f7f0 f8eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8010902:	b918      	cbnz	r0, 801090c <__cvt+0x8c>
 8010904:	f1c6 0601 	rsb	r6, r6, #1
 8010908:	f8ca 6000 	str.w	r6, [sl]
 801090c:	f8da 3000 	ldr.w	r3, [sl]
 8010910:	4499      	add	r9, r3
 8010912:	2200      	movs	r2, #0
 8010914:	2300      	movs	r3, #0
 8010916:	4620      	mov	r0, r4
 8010918:	4629      	mov	r1, r5
 801091a:	f7f0 f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 801091e:	b108      	cbz	r0, 8010924 <__cvt+0xa4>
 8010920:	f8cd 900c 	str.w	r9, [sp, #12]
 8010924:	2230      	movs	r2, #48	; 0x30
 8010926:	9b03      	ldr	r3, [sp, #12]
 8010928:	454b      	cmp	r3, r9
 801092a:	d307      	bcc.n	801093c <__cvt+0xbc>
 801092c:	9b03      	ldr	r3, [sp, #12]
 801092e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010930:	1bdb      	subs	r3, r3, r7
 8010932:	4638      	mov	r0, r7
 8010934:	6013      	str	r3, [r2, #0]
 8010936:	b004      	add	sp, #16
 8010938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801093c:	1c59      	adds	r1, r3, #1
 801093e:	9103      	str	r1, [sp, #12]
 8010940:	701a      	strb	r2, [r3, #0]
 8010942:	e7f0      	b.n	8010926 <__cvt+0xa6>

08010944 <__exponent>:
 8010944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010946:	4603      	mov	r3, r0
 8010948:	2900      	cmp	r1, #0
 801094a:	bfb8      	it	lt
 801094c:	4249      	neglt	r1, r1
 801094e:	f803 2b02 	strb.w	r2, [r3], #2
 8010952:	bfb4      	ite	lt
 8010954:	222d      	movlt	r2, #45	; 0x2d
 8010956:	222b      	movge	r2, #43	; 0x2b
 8010958:	2909      	cmp	r1, #9
 801095a:	7042      	strb	r2, [r0, #1]
 801095c:	dd2a      	ble.n	80109b4 <__exponent+0x70>
 801095e:	f10d 0407 	add.w	r4, sp, #7
 8010962:	46a4      	mov	ip, r4
 8010964:	270a      	movs	r7, #10
 8010966:	46a6      	mov	lr, r4
 8010968:	460a      	mov	r2, r1
 801096a:	fb91 f6f7 	sdiv	r6, r1, r7
 801096e:	fb07 1516 	mls	r5, r7, r6, r1
 8010972:	3530      	adds	r5, #48	; 0x30
 8010974:	2a63      	cmp	r2, #99	; 0x63
 8010976:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801097a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801097e:	4631      	mov	r1, r6
 8010980:	dcf1      	bgt.n	8010966 <__exponent+0x22>
 8010982:	3130      	adds	r1, #48	; 0x30
 8010984:	f1ae 0502 	sub.w	r5, lr, #2
 8010988:	f804 1c01 	strb.w	r1, [r4, #-1]
 801098c:	1c44      	adds	r4, r0, #1
 801098e:	4629      	mov	r1, r5
 8010990:	4561      	cmp	r1, ip
 8010992:	d30a      	bcc.n	80109aa <__exponent+0x66>
 8010994:	f10d 0209 	add.w	r2, sp, #9
 8010998:	eba2 020e 	sub.w	r2, r2, lr
 801099c:	4565      	cmp	r5, ip
 801099e:	bf88      	it	hi
 80109a0:	2200      	movhi	r2, #0
 80109a2:	4413      	add	r3, r2
 80109a4:	1a18      	subs	r0, r3, r0
 80109a6:	b003      	add	sp, #12
 80109a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80109b2:	e7ed      	b.n	8010990 <__exponent+0x4c>
 80109b4:	2330      	movs	r3, #48	; 0x30
 80109b6:	3130      	adds	r1, #48	; 0x30
 80109b8:	7083      	strb	r3, [r0, #2]
 80109ba:	70c1      	strb	r1, [r0, #3]
 80109bc:	1d03      	adds	r3, r0, #4
 80109be:	e7f1      	b.n	80109a4 <__exponent+0x60>

080109c0 <_printf_float>:
 80109c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c4:	ed2d 8b02 	vpush	{d8}
 80109c8:	b08d      	sub	sp, #52	; 0x34
 80109ca:	460c      	mov	r4, r1
 80109cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80109d0:	4616      	mov	r6, r2
 80109d2:	461f      	mov	r7, r3
 80109d4:	4605      	mov	r5, r0
 80109d6:	f001 fa47 	bl	8011e68 <_localeconv_r>
 80109da:	f8d0 a000 	ldr.w	sl, [r0]
 80109de:	4650      	mov	r0, sl
 80109e0:	f7ef fbfe 	bl	80001e0 <strlen>
 80109e4:	2300      	movs	r3, #0
 80109e6:	930a      	str	r3, [sp, #40]	; 0x28
 80109e8:	6823      	ldr	r3, [r4, #0]
 80109ea:	9305      	str	r3, [sp, #20]
 80109ec:	f8d8 3000 	ldr.w	r3, [r8]
 80109f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80109f4:	3307      	adds	r3, #7
 80109f6:	f023 0307 	bic.w	r3, r3, #7
 80109fa:	f103 0208 	add.w	r2, r3, #8
 80109fe:	f8c8 2000 	str.w	r2, [r8]
 8010a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010a0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010a0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010a12:	9307      	str	r3, [sp, #28]
 8010a14:	f8cd 8018 	str.w	r8, [sp, #24]
 8010a18:	ee08 0a10 	vmov	s16, r0
 8010a1c:	4b9f      	ldr	r3, [pc, #636]	; (8010c9c <_printf_float+0x2dc>)
 8010a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a26:	f7f0 f889 	bl	8000b3c <__aeabi_dcmpun>
 8010a2a:	bb88      	cbnz	r0, 8010a90 <_printf_float+0xd0>
 8010a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a30:	4b9a      	ldr	r3, [pc, #616]	; (8010c9c <_printf_float+0x2dc>)
 8010a32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a36:	f7f0 f863 	bl	8000b00 <__aeabi_dcmple>
 8010a3a:	bb48      	cbnz	r0, 8010a90 <_printf_float+0xd0>
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	2300      	movs	r3, #0
 8010a40:	4640      	mov	r0, r8
 8010a42:	4649      	mov	r1, r9
 8010a44:	f7f0 f852 	bl	8000aec <__aeabi_dcmplt>
 8010a48:	b110      	cbz	r0, 8010a50 <_printf_float+0x90>
 8010a4a:	232d      	movs	r3, #45	; 0x2d
 8010a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a50:	4b93      	ldr	r3, [pc, #588]	; (8010ca0 <_printf_float+0x2e0>)
 8010a52:	4894      	ldr	r0, [pc, #592]	; (8010ca4 <_printf_float+0x2e4>)
 8010a54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010a58:	bf94      	ite	ls
 8010a5a:	4698      	movls	r8, r3
 8010a5c:	4680      	movhi	r8, r0
 8010a5e:	2303      	movs	r3, #3
 8010a60:	6123      	str	r3, [r4, #16]
 8010a62:	9b05      	ldr	r3, [sp, #20]
 8010a64:	f023 0204 	bic.w	r2, r3, #4
 8010a68:	6022      	str	r2, [r4, #0]
 8010a6a:	f04f 0900 	mov.w	r9, #0
 8010a6e:	9700      	str	r7, [sp, #0]
 8010a70:	4633      	mov	r3, r6
 8010a72:	aa0b      	add	r2, sp, #44	; 0x2c
 8010a74:	4621      	mov	r1, r4
 8010a76:	4628      	mov	r0, r5
 8010a78:	f000 f9d8 	bl	8010e2c <_printf_common>
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	f040 8090 	bne.w	8010ba2 <_printf_float+0x1e2>
 8010a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010a86:	b00d      	add	sp, #52	; 0x34
 8010a88:	ecbd 8b02 	vpop	{d8}
 8010a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a90:	4642      	mov	r2, r8
 8010a92:	464b      	mov	r3, r9
 8010a94:	4640      	mov	r0, r8
 8010a96:	4649      	mov	r1, r9
 8010a98:	f7f0 f850 	bl	8000b3c <__aeabi_dcmpun>
 8010a9c:	b140      	cbz	r0, 8010ab0 <_printf_float+0xf0>
 8010a9e:	464b      	mov	r3, r9
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	bfbc      	itt	lt
 8010aa4:	232d      	movlt	r3, #45	; 0x2d
 8010aa6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010aaa:	487f      	ldr	r0, [pc, #508]	; (8010ca8 <_printf_float+0x2e8>)
 8010aac:	4b7f      	ldr	r3, [pc, #508]	; (8010cac <_printf_float+0x2ec>)
 8010aae:	e7d1      	b.n	8010a54 <_printf_float+0x94>
 8010ab0:	6863      	ldr	r3, [r4, #4]
 8010ab2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010ab6:	9206      	str	r2, [sp, #24]
 8010ab8:	1c5a      	adds	r2, r3, #1
 8010aba:	d13f      	bne.n	8010b3c <_printf_float+0x17c>
 8010abc:	2306      	movs	r3, #6
 8010abe:	6063      	str	r3, [r4, #4]
 8010ac0:	9b05      	ldr	r3, [sp, #20]
 8010ac2:	6861      	ldr	r1, [r4, #4]
 8010ac4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010ac8:	2300      	movs	r3, #0
 8010aca:	9303      	str	r3, [sp, #12]
 8010acc:	ab0a      	add	r3, sp, #40	; 0x28
 8010ace:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010ad2:	ab09      	add	r3, sp, #36	; 0x24
 8010ad4:	ec49 8b10 	vmov	d0, r8, r9
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	6022      	str	r2, [r4, #0]
 8010adc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	f7ff fecd 	bl	8010880 <__cvt>
 8010ae6:	9b06      	ldr	r3, [sp, #24]
 8010ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010aea:	2b47      	cmp	r3, #71	; 0x47
 8010aec:	4680      	mov	r8, r0
 8010aee:	d108      	bne.n	8010b02 <_printf_float+0x142>
 8010af0:	1cc8      	adds	r0, r1, #3
 8010af2:	db02      	blt.n	8010afa <_printf_float+0x13a>
 8010af4:	6863      	ldr	r3, [r4, #4]
 8010af6:	4299      	cmp	r1, r3
 8010af8:	dd41      	ble.n	8010b7e <_printf_float+0x1be>
 8010afa:	f1ab 0b02 	sub.w	fp, fp, #2
 8010afe:	fa5f fb8b 	uxtb.w	fp, fp
 8010b02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b06:	d820      	bhi.n	8010b4a <_printf_float+0x18a>
 8010b08:	3901      	subs	r1, #1
 8010b0a:	465a      	mov	r2, fp
 8010b0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010b10:	9109      	str	r1, [sp, #36]	; 0x24
 8010b12:	f7ff ff17 	bl	8010944 <__exponent>
 8010b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b18:	1813      	adds	r3, r2, r0
 8010b1a:	2a01      	cmp	r2, #1
 8010b1c:	4681      	mov	r9, r0
 8010b1e:	6123      	str	r3, [r4, #16]
 8010b20:	dc02      	bgt.n	8010b28 <_printf_float+0x168>
 8010b22:	6822      	ldr	r2, [r4, #0]
 8010b24:	07d2      	lsls	r2, r2, #31
 8010b26:	d501      	bpl.n	8010b2c <_printf_float+0x16c>
 8010b28:	3301      	adds	r3, #1
 8010b2a:	6123      	str	r3, [r4, #16]
 8010b2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d09c      	beq.n	8010a6e <_printf_float+0xae>
 8010b34:	232d      	movs	r3, #45	; 0x2d
 8010b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b3a:	e798      	b.n	8010a6e <_printf_float+0xae>
 8010b3c:	9a06      	ldr	r2, [sp, #24]
 8010b3e:	2a47      	cmp	r2, #71	; 0x47
 8010b40:	d1be      	bne.n	8010ac0 <_printf_float+0x100>
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d1bc      	bne.n	8010ac0 <_printf_float+0x100>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e7b9      	b.n	8010abe <_printf_float+0xfe>
 8010b4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010b4e:	d118      	bne.n	8010b82 <_printf_float+0x1c2>
 8010b50:	2900      	cmp	r1, #0
 8010b52:	6863      	ldr	r3, [r4, #4]
 8010b54:	dd0b      	ble.n	8010b6e <_printf_float+0x1ae>
 8010b56:	6121      	str	r1, [r4, #16]
 8010b58:	b913      	cbnz	r3, 8010b60 <_printf_float+0x1a0>
 8010b5a:	6822      	ldr	r2, [r4, #0]
 8010b5c:	07d0      	lsls	r0, r2, #31
 8010b5e:	d502      	bpl.n	8010b66 <_printf_float+0x1a6>
 8010b60:	3301      	adds	r3, #1
 8010b62:	440b      	add	r3, r1
 8010b64:	6123      	str	r3, [r4, #16]
 8010b66:	65a1      	str	r1, [r4, #88]	; 0x58
 8010b68:	f04f 0900 	mov.w	r9, #0
 8010b6c:	e7de      	b.n	8010b2c <_printf_float+0x16c>
 8010b6e:	b913      	cbnz	r3, 8010b76 <_printf_float+0x1b6>
 8010b70:	6822      	ldr	r2, [r4, #0]
 8010b72:	07d2      	lsls	r2, r2, #31
 8010b74:	d501      	bpl.n	8010b7a <_printf_float+0x1ba>
 8010b76:	3302      	adds	r3, #2
 8010b78:	e7f4      	b.n	8010b64 <_printf_float+0x1a4>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e7f2      	b.n	8010b64 <_printf_float+0x1a4>
 8010b7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b84:	4299      	cmp	r1, r3
 8010b86:	db05      	blt.n	8010b94 <_printf_float+0x1d4>
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	6121      	str	r1, [r4, #16]
 8010b8c:	07d8      	lsls	r0, r3, #31
 8010b8e:	d5ea      	bpl.n	8010b66 <_printf_float+0x1a6>
 8010b90:	1c4b      	adds	r3, r1, #1
 8010b92:	e7e7      	b.n	8010b64 <_printf_float+0x1a4>
 8010b94:	2900      	cmp	r1, #0
 8010b96:	bfd4      	ite	le
 8010b98:	f1c1 0202 	rsble	r2, r1, #2
 8010b9c:	2201      	movgt	r2, #1
 8010b9e:	4413      	add	r3, r2
 8010ba0:	e7e0      	b.n	8010b64 <_printf_float+0x1a4>
 8010ba2:	6823      	ldr	r3, [r4, #0]
 8010ba4:	055a      	lsls	r2, r3, #21
 8010ba6:	d407      	bmi.n	8010bb8 <_printf_float+0x1f8>
 8010ba8:	6923      	ldr	r3, [r4, #16]
 8010baa:	4642      	mov	r2, r8
 8010bac:	4631      	mov	r1, r6
 8010bae:	4628      	mov	r0, r5
 8010bb0:	47b8      	blx	r7
 8010bb2:	3001      	adds	r0, #1
 8010bb4:	d12c      	bne.n	8010c10 <_printf_float+0x250>
 8010bb6:	e764      	b.n	8010a82 <_printf_float+0xc2>
 8010bb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010bbc:	f240 80e0 	bls.w	8010d80 <_printf_float+0x3c0>
 8010bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	f7ef ff86 	bl	8000ad8 <__aeabi_dcmpeq>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d034      	beq.n	8010c3a <_printf_float+0x27a>
 8010bd0:	4a37      	ldr	r2, [pc, #220]	; (8010cb0 <_printf_float+0x2f0>)
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	4631      	mov	r1, r6
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	47b8      	blx	r7
 8010bda:	3001      	adds	r0, #1
 8010bdc:	f43f af51 	beq.w	8010a82 <_printf_float+0xc2>
 8010be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010be4:	429a      	cmp	r2, r3
 8010be6:	db02      	blt.n	8010bee <_printf_float+0x22e>
 8010be8:	6823      	ldr	r3, [r4, #0]
 8010bea:	07d8      	lsls	r0, r3, #31
 8010bec:	d510      	bpl.n	8010c10 <_printf_float+0x250>
 8010bee:	ee18 3a10 	vmov	r3, s16
 8010bf2:	4652      	mov	r2, sl
 8010bf4:	4631      	mov	r1, r6
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	47b8      	blx	r7
 8010bfa:	3001      	adds	r0, #1
 8010bfc:	f43f af41 	beq.w	8010a82 <_printf_float+0xc2>
 8010c00:	f04f 0800 	mov.w	r8, #0
 8010c04:	f104 091a 	add.w	r9, r4, #26
 8010c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	4543      	cmp	r3, r8
 8010c0e:	dc09      	bgt.n	8010c24 <_printf_float+0x264>
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	079b      	lsls	r3, r3, #30
 8010c14:	f100 8105 	bmi.w	8010e22 <_printf_float+0x462>
 8010c18:	68e0      	ldr	r0, [r4, #12]
 8010c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c1c:	4298      	cmp	r0, r3
 8010c1e:	bfb8      	it	lt
 8010c20:	4618      	movlt	r0, r3
 8010c22:	e730      	b.n	8010a86 <_printf_float+0xc6>
 8010c24:	2301      	movs	r3, #1
 8010c26:	464a      	mov	r2, r9
 8010c28:	4631      	mov	r1, r6
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	47b8      	blx	r7
 8010c2e:	3001      	adds	r0, #1
 8010c30:	f43f af27 	beq.w	8010a82 <_printf_float+0xc2>
 8010c34:	f108 0801 	add.w	r8, r8, #1
 8010c38:	e7e6      	b.n	8010c08 <_printf_float+0x248>
 8010c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	dc39      	bgt.n	8010cb4 <_printf_float+0x2f4>
 8010c40:	4a1b      	ldr	r2, [pc, #108]	; (8010cb0 <_printf_float+0x2f0>)
 8010c42:	2301      	movs	r3, #1
 8010c44:	4631      	mov	r1, r6
 8010c46:	4628      	mov	r0, r5
 8010c48:	47b8      	blx	r7
 8010c4a:	3001      	adds	r0, #1
 8010c4c:	f43f af19 	beq.w	8010a82 <_printf_float+0xc2>
 8010c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c54:	4313      	orrs	r3, r2
 8010c56:	d102      	bne.n	8010c5e <_printf_float+0x29e>
 8010c58:	6823      	ldr	r3, [r4, #0]
 8010c5a:	07d9      	lsls	r1, r3, #31
 8010c5c:	d5d8      	bpl.n	8010c10 <_printf_float+0x250>
 8010c5e:	ee18 3a10 	vmov	r3, s16
 8010c62:	4652      	mov	r2, sl
 8010c64:	4631      	mov	r1, r6
 8010c66:	4628      	mov	r0, r5
 8010c68:	47b8      	blx	r7
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	f43f af09 	beq.w	8010a82 <_printf_float+0xc2>
 8010c70:	f04f 0900 	mov.w	r9, #0
 8010c74:	f104 0a1a 	add.w	sl, r4, #26
 8010c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c7a:	425b      	negs	r3, r3
 8010c7c:	454b      	cmp	r3, r9
 8010c7e:	dc01      	bgt.n	8010c84 <_printf_float+0x2c4>
 8010c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c82:	e792      	b.n	8010baa <_printf_float+0x1ea>
 8010c84:	2301      	movs	r3, #1
 8010c86:	4652      	mov	r2, sl
 8010c88:	4631      	mov	r1, r6
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	47b8      	blx	r7
 8010c8e:	3001      	adds	r0, #1
 8010c90:	f43f aef7 	beq.w	8010a82 <_printf_float+0xc2>
 8010c94:	f109 0901 	add.w	r9, r9, #1
 8010c98:	e7ee      	b.n	8010c78 <_printf_float+0x2b8>
 8010c9a:	bf00      	nop
 8010c9c:	7fefffff 	.word	0x7fefffff
 8010ca0:	08013a68 	.word	0x08013a68
 8010ca4:	08013a6c 	.word	0x08013a6c
 8010ca8:	08013a74 	.word	0x08013a74
 8010cac:	08013a70 	.word	0x08013a70
 8010cb0:	08013a78 	.word	0x08013a78
 8010cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	bfa8      	it	ge
 8010cbc:	461a      	movge	r2, r3
 8010cbe:	2a00      	cmp	r2, #0
 8010cc0:	4691      	mov	r9, r2
 8010cc2:	dc37      	bgt.n	8010d34 <_printf_float+0x374>
 8010cc4:	f04f 0b00 	mov.w	fp, #0
 8010cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ccc:	f104 021a 	add.w	r2, r4, #26
 8010cd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cd2:	9305      	str	r3, [sp, #20]
 8010cd4:	eba3 0309 	sub.w	r3, r3, r9
 8010cd8:	455b      	cmp	r3, fp
 8010cda:	dc33      	bgt.n	8010d44 <_printf_float+0x384>
 8010cdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	db3b      	blt.n	8010d5c <_printf_float+0x39c>
 8010ce4:	6823      	ldr	r3, [r4, #0]
 8010ce6:	07da      	lsls	r2, r3, #31
 8010ce8:	d438      	bmi.n	8010d5c <_printf_float+0x39c>
 8010cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cec:	9b05      	ldr	r3, [sp, #20]
 8010cee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010cf0:	1ad3      	subs	r3, r2, r3
 8010cf2:	eba2 0901 	sub.w	r9, r2, r1
 8010cf6:	4599      	cmp	r9, r3
 8010cf8:	bfa8      	it	ge
 8010cfa:	4699      	movge	r9, r3
 8010cfc:	f1b9 0f00 	cmp.w	r9, #0
 8010d00:	dc35      	bgt.n	8010d6e <_printf_float+0x3ae>
 8010d02:	f04f 0800 	mov.w	r8, #0
 8010d06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d0a:	f104 0a1a 	add.w	sl, r4, #26
 8010d0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d12:	1a9b      	subs	r3, r3, r2
 8010d14:	eba3 0309 	sub.w	r3, r3, r9
 8010d18:	4543      	cmp	r3, r8
 8010d1a:	f77f af79 	ble.w	8010c10 <_printf_float+0x250>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	4652      	mov	r2, sl
 8010d22:	4631      	mov	r1, r6
 8010d24:	4628      	mov	r0, r5
 8010d26:	47b8      	blx	r7
 8010d28:	3001      	adds	r0, #1
 8010d2a:	f43f aeaa 	beq.w	8010a82 <_printf_float+0xc2>
 8010d2e:	f108 0801 	add.w	r8, r8, #1
 8010d32:	e7ec      	b.n	8010d0e <_printf_float+0x34e>
 8010d34:	4613      	mov	r3, r2
 8010d36:	4631      	mov	r1, r6
 8010d38:	4642      	mov	r2, r8
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	47b8      	blx	r7
 8010d3e:	3001      	adds	r0, #1
 8010d40:	d1c0      	bne.n	8010cc4 <_printf_float+0x304>
 8010d42:	e69e      	b.n	8010a82 <_printf_float+0xc2>
 8010d44:	2301      	movs	r3, #1
 8010d46:	4631      	mov	r1, r6
 8010d48:	4628      	mov	r0, r5
 8010d4a:	9205      	str	r2, [sp, #20]
 8010d4c:	47b8      	blx	r7
 8010d4e:	3001      	adds	r0, #1
 8010d50:	f43f ae97 	beq.w	8010a82 <_printf_float+0xc2>
 8010d54:	9a05      	ldr	r2, [sp, #20]
 8010d56:	f10b 0b01 	add.w	fp, fp, #1
 8010d5a:	e7b9      	b.n	8010cd0 <_printf_float+0x310>
 8010d5c:	ee18 3a10 	vmov	r3, s16
 8010d60:	4652      	mov	r2, sl
 8010d62:	4631      	mov	r1, r6
 8010d64:	4628      	mov	r0, r5
 8010d66:	47b8      	blx	r7
 8010d68:	3001      	adds	r0, #1
 8010d6a:	d1be      	bne.n	8010cea <_printf_float+0x32a>
 8010d6c:	e689      	b.n	8010a82 <_printf_float+0xc2>
 8010d6e:	9a05      	ldr	r2, [sp, #20]
 8010d70:	464b      	mov	r3, r9
 8010d72:	4442      	add	r2, r8
 8010d74:	4631      	mov	r1, r6
 8010d76:	4628      	mov	r0, r5
 8010d78:	47b8      	blx	r7
 8010d7a:	3001      	adds	r0, #1
 8010d7c:	d1c1      	bne.n	8010d02 <_printf_float+0x342>
 8010d7e:	e680      	b.n	8010a82 <_printf_float+0xc2>
 8010d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d82:	2a01      	cmp	r2, #1
 8010d84:	dc01      	bgt.n	8010d8a <_printf_float+0x3ca>
 8010d86:	07db      	lsls	r3, r3, #31
 8010d88:	d538      	bpl.n	8010dfc <_printf_float+0x43c>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	4642      	mov	r2, r8
 8010d8e:	4631      	mov	r1, r6
 8010d90:	4628      	mov	r0, r5
 8010d92:	47b8      	blx	r7
 8010d94:	3001      	adds	r0, #1
 8010d96:	f43f ae74 	beq.w	8010a82 <_printf_float+0xc2>
 8010d9a:	ee18 3a10 	vmov	r3, s16
 8010d9e:	4652      	mov	r2, sl
 8010da0:	4631      	mov	r1, r6
 8010da2:	4628      	mov	r0, r5
 8010da4:	47b8      	blx	r7
 8010da6:	3001      	adds	r0, #1
 8010da8:	f43f ae6b 	beq.w	8010a82 <_printf_float+0xc2>
 8010dac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010db0:	2200      	movs	r2, #0
 8010db2:	2300      	movs	r3, #0
 8010db4:	f7ef fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 8010db8:	b9d8      	cbnz	r0, 8010df2 <_printf_float+0x432>
 8010dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dbc:	f108 0201 	add.w	r2, r8, #1
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	4631      	mov	r1, r6
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	47b8      	blx	r7
 8010dc8:	3001      	adds	r0, #1
 8010dca:	d10e      	bne.n	8010dea <_printf_float+0x42a>
 8010dcc:	e659      	b.n	8010a82 <_printf_float+0xc2>
 8010dce:	2301      	movs	r3, #1
 8010dd0:	4652      	mov	r2, sl
 8010dd2:	4631      	mov	r1, r6
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	47b8      	blx	r7
 8010dd8:	3001      	adds	r0, #1
 8010dda:	f43f ae52 	beq.w	8010a82 <_printf_float+0xc2>
 8010dde:	f108 0801 	add.w	r8, r8, #1
 8010de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010de4:	3b01      	subs	r3, #1
 8010de6:	4543      	cmp	r3, r8
 8010de8:	dcf1      	bgt.n	8010dce <_printf_float+0x40e>
 8010dea:	464b      	mov	r3, r9
 8010dec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010df0:	e6dc      	b.n	8010bac <_printf_float+0x1ec>
 8010df2:	f04f 0800 	mov.w	r8, #0
 8010df6:	f104 0a1a 	add.w	sl, r4, #26
 8010dfa:	e7f2      	b.n	8010de2 <_printf_float+0x422>
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	4642      	mov	r2, r8
 8010e00:	e7df      	b.n	8010dc2 <_printf_float+0x402>
 8010e02:	2301      	movs	r3, #1
 8010e04:	464a      	mov	r2, r9
 8010e06:	4631      	mov	r1, r6
 8010e08:	4628      	mov	r0, r5
 8010e0a:	47b8      	blx	r7
 8010e0c:	3001      	adds	r0, #1
 8010e0e:	f43f ae38 	beq.w	8010a82 <_printf_float+0xc2>
 8010e12:	f108 0801 	add.w	r8, r8, #1
 8010e16:	68e3      	ldr	r3, [r4, #12]
 8010e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e1a:	1a5b      	subs	r3, r3, r1
 8010e1c:	4543      	cmp	r3, r8
 8010e1e:	dcf0      	bgt.n	8010e02 <_printf_float+0x442>
 8010e20:	e6fa      	b.n	8010c18 <_printf_float+0x258>
 8010e22:	f04f 0800 	mov.w	r8, #0
 8010e26:	f104 0919 	add.w	r9, r4, #25
 8010e2a:	e7f4      	b.n	8010e16 <_printf_float+0x456>

08010e2c <_printf_common>:
 8010e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e30:	4616      	mov	r6, r2
 8010e32:	4699      	mov	r9, r3
 8010e34:	688a      	ldr	r2, [r1, #8]
 8010e36:	690b      	ldr	r3, [r1, #16]
 8010e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	bfb8      	it	lt
 8010e40:	4613      	movlt	r3, r2
 8010e42:	6033      	str	r3, [r6, #0]
 8010e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e48:	4607      	mov	r7, r0
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	b10a      	cbz	r2, 8010e52 <_printf_common+0x26>
 8010e4e:	3301      	adds	r3, #1
 8010e50:	6033      	str	r3, [r6, #0]
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	0699      	lsls	r1, r3, #26
 8010e56:	bf42      	ittt	mi
 8010e58:	6833      	ldrmi	r3, [r6, #0]
 8010e5a:	3302      	addmi	r3, #2
 8010e5c:	6033      	strmi	r3, [r6, #0]
 8010e5e:	6825      	ldr	r5, [r4, #0]
 8010e60:	f015 0506 	ands.w	r5, r5, #6
 8010e64:	d106      	bne.n	8010e74 <_printf_common+0x48>
 8010e66:	f104 0a19 	add.w	sl, r4, #25
 8010e6a:	68e3      	ldr	r3, [r4, #12]
 8010e6c:	6832      	ldr	r2, [r6, #0]
 8010e6e:	1a9b      	subs	r3, r3, r2
 8010e70:	42ab      	cmp	r3, r5
 8010e72:	dc26      	bgt.n	8010ec2 <_printf_common+0x96>
 8010e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e78:	1e13      	subs	r3, r2, #0
 8010e7a:	6822      	ldr	r2, [r4, #0]
 8010e7c:	bf18      	it	ne
 8010e7e:	2301      	movne	r3, #1
 8010e80:	0692      	lsls	r2, r2, #26
 8010e82:	d42b      	bmi.n	8010edc <_printf_common+0xb0>
 8010e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e88:	4649      	mov	r1, r9
 8010e8a:	4638      	mov	r0, r7
 8010e8c:	47c0      	blx	r8
 8010e8e:	3001      	adds	r0, #1
 8010e90:	d01e      	beq.n	8010ed0 <_printf_common+0xa4>
 8010e92:	6823      	ldr	r3, [r4, #0]
 8010e94:	68e5      	ldr	r5, [r4, #12]
 8010e96:	6832      	ldr	r2, [r6, #0]
 8010e98:	f003 0306 	and.w	r3, r3, #6
 8010e9c:	2b04      	cmp	r3, #4
 8010e9e:	bf08      	it	eq
 8010ea0:	1aad      	subeq	r5, r5, r2
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	6922      	ldr	r2, [r4, #16]
 8010ea6:	bf0c      	ite	eq
 8010ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010eac:	2500      	movne	r5, #0
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	bfc4      	itt	gt
 8010eb2:	1a9b      	subgt	r3, r3, r2
 8010eb4:	18ed      	addgt	r5, r5, r3
 8010eb6:	2600      	movs	r6, #0
 8010eb8:	341a      	adds	r4, #26
 8010eba:	42b5      	cmp	r5, r6
 8010ebc:	d11a      	bne.n	8010ef4 <_printf_common+0xc8>
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	e008      	b.n	8010ed4 <_printf_common+0xa8>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	4652      	mov	r2, sl
 8010ec6:	4649      	mov	r1, r9
 8010ec8:	4638      	mov	r0, r7
 8010eca:	47c0      	blx	r8
 8010ecc:	3001      	adds	r0, #1
 8010ece:	d103      	bne.n	8010ed8 <_printf_common+0xac>
 8010ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ed8:	3501      	adds	r5, #1
 8010eda:	e7c6      	b.n	8010e6a <_printf_common+0x3e>
 8010edc:	18e1      	adds	r1, r4, r3
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	2030      	movs	r0, #48	; 0x30
 8010ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ee6:	4422      	add	r2, r4
 8010ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ef0:	3302      	adds	r3, #2
 8010ef2:	e7c7      	b.n	8010e84 <_printf_common+0x58>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	4649      	mov	r1, r9
 8010efa:	4638      	mov	r0, r7
 8010efc:	47c0      	blx	r8
 8010efe:	3001      	adds	r0, #1
 8010f00:	d0e6      	beq.n	8010ed0 <_printf_common+0xa4>
 8010f02:	3601      	adds	r6, #1
 8010f04:	e7d9      	b.n	8010eba <_printf_common+0x8e>
	...

08010f08 <_printf_i>:
 8010f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	4691      	mov	r9, r2
 8010f10:	7e27      	ldrb	r7, [r4, #24]
 8010f12:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010f14:	2f78      	cmp	r7, #120	; 0x78
 8010f16:	4680      	mov	r8, r0
 8010f18:	469a      	mov	sl, r3
 8010f1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010f1e:	d807      	bhi.n	8010f30 <_printf_i+0x28>
 8010f20:	2f62      	cmp	r7, #98	; 0x62
 8010f22:	d80a      	bhi.n	8010f3a <_printf_i+0x32>
 8010f24:	2f00      	cmp	r7, #0
 8010f26:	f000 80d8 	beq.w	80110da <_printf_i+0x1d2>
 8010f2a:	2f58      	cmp	r7, #88	; 0x58
 8010f2c:	f000 80a3 	beq.w	8011076 <_printf_i+0x16e>
 8010f30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f38:	e03a      	b.n	8010fb0 <_printf_i+0xa8>
 8010f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f3e:	2b15      	cmp	r3, #21
 8010f40:	d8f6      	bhi.n	8010f30 <_printf_i+0x28>
 8010f42:	a001      	add	r0, pc, #4	; (adr r0, 8010f48 <_printf_i+0x40>)
 8010f44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010f48:	08010fa1 	.word	0x08010fa1
 8010f4c:	08010fb5 	.word	0x08010fb5
 8010f50:	08010f31 	.word	0x08010f31
 8010f54:	08010f31 	.word	0x08010f31
 8010f58:	08010f31 	.word	0x08010f31
 8010f5c:	08010f31 	.word	0x08010f31
 8010f60:	08010fb5 	.word	0x08010fb5
 8010f64:	08010f31 	.word	0x08010f31
 8010f68:	08010f31 	.word	0x08010f31
 8010f6c:	08010f31 	.word	0x08010f31
 8010f70:	08010f31 	.word	0x08010f31
 8010f74:	080110c1 	.word	0x080110c1
 8010f78:	08010fe5 	.word	0x08010fe5
 8010f7c:	080110a3 	.word	0x080110a3
 8010f80:	08010f31 	.word	0x08010f31
 8010f84:	08010f31 	.word	0x08010f31
 8010f88:	080110e3 	.word	0x080110e3
 8010f8c:	08010f31 	.word	0x08010f31
 8010f90:	08010fe5 	.word	0x08010fe5
 8010f94:	08010f31 	.word	0x08010f31
 8010f98:	08010f31 	.word	0x08010f31
 8010f9c:	080110ab 	.word	0x080110ab
 8010fa0:	680b      	ldr	r3, [r1, #0]
 8010fa2:	1d1a      	adds	r2, r3, #4
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	600a      	str	r2, [r1, #0]
 8010fa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e0a3      	b.n	80110fc <_printf_i+0x1f4>
 8010fb4:	6825      	ldr	r5, [r4, #0]
 8010fb6:	6808      	ldr	r0, [r1, #0]
 8010fb8:	062e      	lsls	r6, r5, #24
 8010fba:	f100 0304 	add.w	r3, r0, #4
 8010fbe:	d50a      	bpl.n	8010fd6 <_printf_i+0xce>
 8010fc0:	6805      	ldr	r5, [r0, #0]
 8010fc2:	600b      	str	r3, [r1, #0]
 8010fc4:	2d00      	cmp	r5, #0
 8010fc6:	da03      	bge.n	8010fd0 <_printf_i+0xc8>
 8010fc8:	232d      	movs	r3, #45	; 0x2d
 8010fca:	426d      	negs	r5, r5
 8010fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fd0:	485e      	ldr	r0, [pc, #376]	; (801114c <_printf_i+0x244>)
 8010fd2:	230a      	movs	r3, #10
 8010fd4:	e019      	b.n	801100a <_printf_i+0x102>
 8010fd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010fda:	6805      	ldr	r5, [r0, #0]
 8010fdc:	600b      	str	r3, [r1, #0]
 8010fde:	bf18      	it	ne
 8010fe0:	b22d      	sxthne	r5, r5
 8010fe2:	e7ef      	b.n	8010fc4 <_printf_i+0xbc>
 8010fe4:	680b      	ldr	r3, [r1, #0]
 8010fe6:	6825      	ldr	r5, [r4, #0]
 8010fe8:	1d18      	adds	r0, r3, #4
 8010fea:	6008      	str	r0, [r1, #0]
 8010fec:	0628      	lsls	r0, r5, #24
 8010fee:	d501      	bpl.n	8010ff4 <_printf_i+0xec>
 8010ff0:	681d      	ldr	r5, [r3, #0]
 8010ff2:	e002      	b.n	8010ffa <_printf_i+0xf2>
 8010ff4:	0669      	lsls	r1, r5, #25
 8010ff6:	d5fb      	bpl.n	8010ff0 <_printf_i+0xe8>
 8010ff8:	881d      	ldrh	r5, [r3, #0]
 8010ffa:	4854      	ldr	r0, [pc, #336]	; (801114c <_printf_i+0x244>)
 8010ffc:	2f6f      	cmp	r7, #111	; 0x6f
 8010ffe:	bf0c      	ite	eq
 8011000:	2308      	moveq	r3, #8
 8011002:	230a      	movne	r3, #10
 8011004:	2100      	movs	r1, #0
 8011006:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801100a:	6866      	ldr	r6, [r4, #4]
 801100c:	60a6      	str	r6, [r4, #8]
 801100e:	2e00      	cmp	r6, #0
 8011010:	bfa2      	ittt	ge
 8011012:	6821      	ldrge	r1, [r4, #0]
 8011014:	f021 0104 	bicge.w	r1, r1, #4
 8011018:	6021      	strge	r1, [r4, #0]
 801101a:	b90d      	cbnz	r5, 8011020 <_printf_i+0x118>
 801101c:	2e00      	cmp	r6, #0
 801101e:	d04d      	beq.n	80110bc <_printf_i+0x1b4>
 8011020:	4616      	mov	r6, r2
 8011022:	fbb5 f1f3 	udiv	r1, r5, r3
 8011026:	fb03 5711 	mls	r7, r3, r1, r5
 801102a:	5dc7      	ldrb	r7, [r0, r7]
 801102c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011030:	462f      	mov	r7, r5
 8011032:	42bb      	cmp	r3, r7
 8011034:	460d      	mov	r5, r1
 8011036:	d9f4      	bls.n	8011022 <_printf_i+0x11a>
 8011038:	2b08      	cmp	r3, #8
 801103a:	d10b      	bne.n	8011054 <_printf_i+0x14c>
 801103c:	6823      	ldr	r3, [r4, #0]
 801103e:	07df      	lsls	r7, r3, #31
 8011040:	d508      	bpl.n	8011054 <_printf_i+0x14c>
 8011042:	6923      	ldr	r3, [r4, #16]
 8011044:	6861      	ldr	r1, [r4, #4]
 8011046:	4299      	cmp	r1, r3
 8011048:	bfde      	ittt	le
 801104a:	2330      	movle	r3, #48	; 0x30
 801104c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011050:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8011054:	1b92      	subs	r2, r2, r6
 8011056:	6122      	str	r2, [r4, #16]
 8011058:	f8cd a000 	str.w	sl, [sp]
 801105c:	464b      	mov	r3, r9
 801105e:	aa03      	add	r2, sp, #12
 8011060:	4621      	mov	r1, r4
 8011062:	4640      	mov	r0, r8
 8011064:	f7ff fee2 	bl	8010e2c <_printf_common>
 8011068:	3001      	adds	r0, #1
 801106a:	d14c      	bne.n	8011106 <_printf_i+0x1fe>
 801106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011070:	b004      	add	sp, #16
 8011072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011076:	4835      	ldr	r0, [pc, #212]	; (801114c <_printf_i+0x244>)
 8011078:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801107c:	6823      	ldr	r3, [r4, #0]
 801107e:	680e      	ldr	r6, [r1, #0]
 8011080:	061f      	lsls	r7, r3, #24
 8011082:	f856 5b04 	ldr.w	r5, [r6], #4
 8011086:	600e      	str	r6, [r1, #0]
 8011088:	d514      	bpl.n	80110b4 <_printf_i+0x1ac>
 801108a:	07d9      	lsls	r1, r3, #31
 801108c:	bf44      	itt	mi
 801108e:	f043 0320 	orrmi.w	r3, r3, #32
 8011092:	6023      	strmi	r3, [r4, #0]
 8011094:	b91d      	cbnz	r5, 801109e <_printf_i+0x196>
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	f023 0320 	bic.w	r3, r3, #32
 801109c:	6023      	str	r3, [r4, #0]
 801109e:	2310      	movs	r3, #16
 80110a0:	e7b0      	b.n	8011004 <_printf_i+0xfc>
 80110a2:	6823      	ldr	r3, [r4, #0]
 80110a4:	f043 0320 	orr.w	r3, r3, #32
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	2378      	movs	r3, #120	; 0x78
 80110ac:	4828      	ldr	r0, [pc, #160]	; (8011150 <_printf_i+0x248>)
 80110ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110b2:	e7e3      	b.n	801107c <_printf_i+0x174>
 80110b4:	065e      	lsls	r6, r3, #25
 80110b6:	bf48      	it	mi
 80110b8:	b2ad      	uxthmi	r5, r5
 80110ba:	e7e6      	b.n	801108a <_printf_i+0x182>
 80110bc:	4616      	mov	r6, r2
 80110be:	e7bb      	b.n	8011038 <_printf_i+0x130>
 80110c0:	680b      	ldr	r3, [r1, #0]
 80110c2:	6826      	ldr	r6, [r4, #0]
 80110c4:	6960      	ldr	r0, [r4, #20]
 80110c6:	1d1d      	adds	r5, r3, #4
 80110c8:	600d      	str	r5, [r1, #0]
 80110ca:	0635      	lsls	r5, r6, #24
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	d501      	bpl.n	80110d4 <_printf_i+0x1cc>
 80110d0:	6018      	str	r0, [r3, #0]
 80110d2:	e002      	b.n	80110da <_printf_i+0x1d2>
 80110d4:	0671      	lsls	r1, r6, #25
 80110d6:	d5fb      	bpl.n	80110d0 <_printf_i+0x1c8>
 80110d8:	8018      	strh	r0, [r3, #0]
 80110da:	2300      	movs	r3, #0
 80110dc:	6123      	str	r3, [r4, #16]
 80110de:	4616      	mov	r6, r2
 80110e0:	e7ba      	b.n	8011058 <_printf_i+0x150>
 80110e2:	680b      	ldr	r3, [r1, #0]
 80110e4:	1d1a      	adds	r2, r3, #4
 80110e6:	600a      	str	r2, [r1, #0]
 80110e8:	681e      	ldr	r6, [r3, #0]
 80110ea:	6862      	ldr	r2, [r4, #4]
 80110ec:	2100      	movs	r1, #0
 80110ee:	4630      	mov	r0, r6
 80110f0:	f7ef f87e 	bl	80001f0 <memchr>
 80110f4:	b108      	cbz	r0, 80110fa <_printf_i+0x1f2>
 80110f6:	1b80      	subs	r0, r0, r6
 80110f8:	6060      	str	r0, [r4, #4]
 80110fa:	6863      	ldr	r3, [r4, #4]
 80110fc:	6123      	str	r3, [r4, #16]
 80110fe:	2300      	movs	r3, #0
 8011100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011104:	e7a8      	b.n	8011058 <_printf_i+0x150>
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	4632      	mov	r2, r6
 801110a:	4649      	mov	r1, r9
 801110c:	4640      	mov	r0, r8
 801110e:	47d0      	blx	sl
 8011110:	3001      	adds	r0, #1
 8011112:	d0ab      	beq.n	801106c <_printf_i+0x164>
 8011114:	6823      	ldr	r3, [r4, #0]
 8011116:	079b      	lsls	r3, r3, #30
 8011118:	d413      	bmi.n	8011142 <_printf_i+0x23a>
 801111a:	68e0      	ldr	r0, [r4, #12]
 801111c:	9b03      	ldr	r3, [sp, #12]
 801111e:	4298      	cmp	r0, r3
 8011120:	bfb8      	it	lt
 8011122:	4618      	movlt	r0, r3
 8011124:	e7a4      	b.n	8011070 <_printf_i+0x168>
 8011126:	2301      	movs	r3, #1
 8011128:	4632      	mov	r2, r6
 801112a:	4649      	mov	r1, r9
 801112c:	4640      	mov	r0, r8
 801112e:	47d0      	blx	sl
 8011130:	3001      	adds	r0, #1
 8011132:	d09b      	beq.n	801106c <_printf_i+0x164>
 8011134:	3501      	adds	r5, #1
 8011136:	68e3      	ldr	r3, [r4, #12]
 8011138:	9903      	ldr	r1, [sp, #12]
 801113a:	1a5b      	subs	r3, r3, r1
 801113c:	42ab      	cmp	r3, r5
 801113e:	dcf2      	bgt.n	8011126 <_printf_i+0x21e>
 8011140:	e7eb      	b.n	801111a <_printf_i+0x212>
 8011142:	2500      	movs	r5, #0
 8011144:	f104 0619 	add.w	r6, r4, #25
 8011148:	e7f5      	b.n	8011136 <_printf_i+0x22e>
 801114a:	bf00      	nop
 801114c:	08013a7a 	.word	0x08013a7a
 8011150:	08013a8b 	.word	0x08013a8b

08011154 <_sbrk_r>:
 8011154:	b538      	push	{r3, r4, r5, lr}
 8011156:	4d06      	ldr	r5, [pc, #24]	; (8011170 <_sbrk_r+0x1c>)
 8011158:	2300      	movs	r3, #0
 801115a:	4604      	mov	r4, r0
 801115c:	4608      	mov	r0, r1
 801115e:	602b      	str	r3, [r5, #0]
 8011160:	f7f3 f8ec 	bl	800433c <_sbrk>
 8011164:	1c43      	adds	r3, r0, #1
 8011166:	d102      	bne.n	801116e <_sbrk_r+0x1a>
 8011168:	682b      	ldr	r3, [r5, #0]
 801116a:	b103      	cbz	r3, 801116e <_sbrk_r+0x1a>
 801116c:	6023      	str	r3, [r4, #0]
 801116e:	bd38      	pop	{r3, r4, r5, pc}
 8011170:	20001620 	.word	0x20001620

08011174 <quorem>:
 8011174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011178:	6903      	ldr	r3, [r0, #16]
 801117a:	690c      	ldr	r4, [r1, #16]
 801117c:	42a3      	cmp	r3, r4
 801117e:	4607      	mov	r7, r0
 8011180:	f2c0 8081 	blt.w	8011286 <quorem+0x112>
 8011184:	3c01      	subs	r4, #1
 8011186:	f101 0814 	add.w	r8, r1, #20
 801118a:	f100 0514 	add.w	r5, r0, #20
 801118e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011192:	9301      	str	r3, [sp, #4]
 8011194:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011198:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801119c:	3301      	adds	r3, #1
 801119e:	429a      	cmp	r2, r3
 80111a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80111a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80111a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80111ac:	d331      	bcc.n	8011212 <quorem+0x9e>
 80111ae:	f04f 0e00 	mov.w	lr, #0
 80111b2:	4640      	mov	r0, r8
 80111b4:	46ac      	mov	ip, r5
 80111b6:	46f2      	mov	sl, lr
 80111b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80111bc:	b293      	uxth	r3, r2
 80111be:	fb06 e303 	mla	r3, r6, r3, lr
 80111c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	ebaa 0303 	sub.w	r3, sl, r3
 80111cc:	0c12      	lsrs	r2, r2, #16
 80111ce:	f8dc a000 	ldr.w	sl, [ip]
 80111d2:	fb06 e202 	mla	r2, r6, r2, lr
 80111d6:	fa13 f38a 	uxtah	r3, r3, sl
 80111da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80111de:	fa1f fa82 	uxth.w	sl, r2
 80111e2:	f8dc 2000 	ldr.w	r2, [ip]
 80111e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80111ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111ee:	b29b      	uxth	r3, r3
 80111f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111f4:	4581      	cmp	r9, r0
 80111f6:	f84c 3b04 	str.w	r3, [ip], #4
 80111fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80111fe:	d2db      	bcs.n	80111b8 <quorem+0x44>
 8011200:	f855 300b 	ldr.w	r3, [r5, fp]
 8011204:	b92b      	cbnz	r3, 8011212 <quorem+0x9e>
 8011206:	9b01      	ldr	r3, [sp, #4]
 8011208:	3b04      	subs	r3, #4
 801120a:	429d      	cmp	r5, r3
 801120c:	461a      	mov	r2, r3
 801120e:	d32e      	bcc.n	801126e <quorem+0xfa>
 8011210:	613c      	str	r4, [r7, #16]
 8011212:	4638      	mov	r0, r7
 8011214:	f001 f8c4 	bl	80123a0 <__mcmp>
 8011218:	2800      	cmp	r0, #0
 801121a:	db24      	blt.n	8011266 <quorem+0xf2>
 801121c:	3601      	adds	r6, #1
 801121e:	4628      	mov	r0, r5
 8011220:	f04f 0c00 	mov.w	ip, #0
 8011224:	f858 2b04 	ldr.w	r2, [r8], #4
 8011228:	f8d0 e000 	ldr.w	lr, [r0]
 801122c:	b293      	uxth	r3, r2
 801122e:	ebac 0303 	sub.w	r3, ip, r3
 8011232:	0c12      	lsrs	r2, r2, #16
 8011234:	fa13 f38e 	uxtah	r3, r3, lr
 8011238:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801123c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011240:	b29b      	uxth	r3, r3
 8011242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011246:	45c1      	cmp	r9, r8
 8011248:	f840 3b04 	str.w	r3, [r0], #4
 801124c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011250:	d2e8      	bcs.n	8011224 <quorem+0xb0>
 8011252:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801125a:	b922      	cbnz	r2, 8011266 <quorem+0xf2>
 801125c:	3b04      	subs	r3, #4
 801125e:	429d      	cmp	r5, r3
 8011260:	461a      	mov	r2, r3
 8011262:	d30a      	bcc.n	801127a <quorem+0x106>
 8011264:	613c      	str	r4, [r7, #16]
 8011266:	4630      	mov	r0, r6
 8011268:	b003      	add	sp, #12
 801126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126e:	6812      	ldr	r2, [r2, #0]
 8011270:	3b04      	subs	r3, #4
 8011272:	2a00      	cmp	r2, #0
 8011274:	d1cc      	bne.n	8011210 <quorem+0x9c>
 8011276:	3c01      	subs	r4, #1
 8011278:	e7c7      	b.n	801120a <quorem+0x96>
 801127a:	6812      	ldr	r2, [r2, #0]
 801127c:	3b04      	subs	r3, #4
 801127e:	2a00      	cmp	r2, #0
 8011280:	d1f0      	bne.n	8011264 <quorem+0xf0>
 8011282:	3c01      	subs	r4, #1
 8011284:	e7eb      	b.n	801125e <quorem+0xea>
 8011286:	2000      	movs	r0, #0
 8011288:	e7ee      	b.n	8011268 <quorem+0xf4>
 801128a:	0000      	movs	r0, r0
 801128c:	0000      	movs	r0, r0
	...

08011290 <_dtoa_r>:
 8011290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	ed2d 8b02 	vpush	{d8}
 8011298:	ec57 6b10 	vmov	r6, r7, d0
 801129c:	b095      	sub	sp, #84	; 0x54
 801129e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80112a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80112a4:	9105      	str	r1, [sp, #20]
 80112a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80112aa:	4604      	mov	r4, r0
 80112ac:	9209      	str	r2, [sp, #36]	; 0x24
 80112ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80112b0:	b975      	cbnz	r5, 80112d0 <_dtoa_r+0x40>
 80112b2:	2010      	movs	r0, #16
 80112b4:	f7ff fa22 	bl	80106fc <malloc>
 80112b8:	4602      	mov	r2, r0
 80112ba:	6260      	str	r0, [r4, #36]	; 0x24
 80112bc:	b920      	cbnz	r0, 80112c8 <_dtoa_r+0x38>
 80112be:	4bb2      	ldr	r3, [pc, #712]	; (8011588 <_dtoa_r+0x2f8>)
 80112c0:	21ea      	movs	r1, #234	; 0xea
 80112c2:	48b2      	ldr	r0, [pc, #712]	; (801158c <_dtoa_r+0x2fc>)
 80112c4:	f001 f97c 	bl	80125c0 <__assert_func>
 80112c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112cc:	6005      	str	r5, [r0, #0]
 80112ce:	60c5      	str	r5, [r0, #12]
 80112d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112d2:	6819      	ldr	r1, [r3, #0]
 80112d4:	b151      	cbz	r1, 80112ec <_dtoa_r+0x5c>
 80112d6:	685a      	ldr	r2, [r3, #4]
 80112d8:	604a      	str	r2, [r1, #4]
 80112da:	2301      	movs	r3, #1
 80112dc:	4093      	lsls	r3, r2
 80112de:	608b      	str	r3, [r1, #8]
 80112e0:	4620      	mov	r0, r4
 80112e2:	f000 fe1f 	bl	8011f24 <_Bfree>
 80112e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112e8:	2200      	movs	r2, #0
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	1e3b      	subs	r3, r7, #0
 80112ee:	bfb9      	ittee	lt
 80112f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80112f4:	9303      	strlt	r3, [sp, #12]
 80112f6:	2300      	movge	r3, #0
 80112f8:	f8c8 3000 	strge.w	r3, [r8]
 80112fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011300:	4ba3      	ldr	r3, [pc, #652]	; (8011590 <_dtoa_r+0x300>)
 8011302:	bfbc      	itt	lt
 8011304:	2201      	movlt	r2, #1
 8011306:	f8c8 2000 	strlt.w	r2, [r8]
 801130a:	ea33 0309 	bics.w	r3, r3, r9
 801130e:	d11b      	bne.n	8011348 <_dtoa_r+0xb8>
 8011310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011312:	f242 730f 	movw	r3, #9999	; 0x270f
 8011316:	6013      	str	r3, [r2, #0]
 8011318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801131c:	4333      	orrs	r3, r6
 801131e:	f000 857a 	beq.w	8011e16 <_dtoa_r+0xb86>
 8011322:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011324:	b963      	cbnz	r3, 8011340 <_dtoa_r+0xb0>
 8011326:	4b9b      	ldr	r3, [pc, #620]	; (8011594 <_dtoa_r+0x304>)
 8011328:	e024      	b.n	8011374 <_dtoa_r+0xe4>
 801132a:	4b9b      	ldr	r3, [pc, #620]	; (8011598 <_dtoa_r+0x308>)
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	3308      	adds	r3, #8
 8011330:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011332:	6013      	str	r3, [r2, #0]
 8011334:	9800      	ldr	r0, [sp, #0]
 8011336:	b015      	add	sp, #84	; 0x54
 8011338:	ecbd 8b02 	vpop	{d8}
 801133c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011340:	4b94      	ldr	r3, [pc, #592]	; (8011594 <_dtoa_r+0x304>)
 8011342:	9300      	str	r3, [sp, #0]
 8011344:	3303      	adds	r3, #3
 8011346:	e7f3      	b.n	8011330 <_dtoa_r+0xa0>
 8011348:	ed9d 7b02 	vldr	d7, [sp, #8]
 801134c:	2200      	movs	r2, #0
 801134e:	ec51 0b17 	vmov	r0, r1, d7
 8011352:	2300      	movs	r3, #0
 8011354:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011358:	f7ef fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 801135c:	4680      	mov	r8, r0
 801135e:	b158      	cbz	r0, 8011378 <_dtoa_r+0xe8>
 8011360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011362:	2301      	movs	r3, #1
 8011364:	6013      	str	r3, [r2, #0]
 8011366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011368:	2b00      	cmp	r3, #0
 801136a:	f000 8551 	beq.w	8011e10 <_dtoa_r+0xb80>
 801136e:	488b      	ldr	r0, [pc, #556]	; (801159c <_dtoa_r+0x30c>)
 8011370:	6018      	str	r0, [r3, #0]
 8011372:	1e43      	subs	r3, r0, #1
 8011374:	9300      	str	r3, [sp, #0]
 8011376:	e7dd      	b.n	8011334 <_dtoa_r+0xa4>
 8011378:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801137c:	aa12      	add	r2, sp, #72	; 0x48
 801137e:	a913      	add	r1, sp, #76	; 0x4c
 8011380:	4620      	mov	r0, r4
 8011382:	f001 f8b1 	bl	80124e8 <__d2b>
 8011386:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801138a:	4683      	mov	fp, r0
 801138c:	2d00      	cmp	r5, #0
 801138e:	d07c      	beq.n	801148a <_dtoa_r+0x1fa>
 8011390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011392:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8011396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801139a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801139e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80113a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80113a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80113aa:	4b7d      	ldr	r3, [pc, #500]	; (80115a0 <_dtoa_r+0x310>)
 80113ac:	2200      	movs	r2, #0
 80113ae:	4630      	mov	r0, r6
 80113b0:	4639      	mov	r1, r7
 80113b2:	f7ee ff71 	bl	8000298 <__aeabi_dsub>
 80113b6:	a36e      	add	r3, pc, #440	; (adr r3, 8011570 <_dtoa_r+0x2e0>)
 80113b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113bc:	f7ef f924 	bl	8000608 <__aeabi_dmul>
 80113c0:	a36d      	add	r3, pc, #436	; (adr r3, 8011578 <_dtoa_r+0x2e8>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	f7ee ff69 	bl	800029c <__adddf3>
 80113ca:	4606      	mov	r6, r0
 80113cc:	4628      	mov	r0, r5
 80113ce:	460f      	mov	r7, r1
 80113d0:	f7ef f8b0 	bl	8000534 <__aeabi_i2d>
 80113d4:	a36a      	add	r3, pc, #424	; (adr r3, 8011580 <_dtoa_r+0x2f0>)
 80113d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113da:	f7ef f915 	bl	8000608 <__aeabi_dmul>
 80113de:	4602      	mov	r2, r0
 80113e0:	460b      	mov	r3, r1
 80113e2:	4630      	mov	r0, r6
 80113e4:	4639      	mov	r1, r7
 80113e6:	f7ee ff59 	bl	800029c <__adddf3>
 80113ea:	4606      	mov	r6, r0
 80113ec:	460f      	mov	r7, r1
 80113ee:	f7ef fbbb 	bl	8000b68 <__aeabi_d2iz>
 80113f2:	2200      	movs	r2, #0
 80113f4:	4682      	mov	sl, r0
 80113f6:	2300      	movs	r3, #0
 80113f8:	4630      	mov	r0, r6
 80113fa:	4639      	mov	r1, r7
 80113fc:	f7ef fb76 	bl	8000aec <__aeabi_dcmplt>
 8011400:	b148      	cbz	r0, 8011416 <_dtoa_r+0x186>
 8011402:	4650      	mov	r0, sl
 8011404:	f7ef f896 	bl	8000534 <__aeabi_i2d>
 8011408:	4632      	mov	r2, r6
 801140a:	463b      	mov	r3, r7
 801140c:	f7ef fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 8011410:	b908      	cbnz	r0, 8011416 <_dtoa_r+0x186>
 8011412:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011416:	f1ba 0f16 	cmp.w	sl, #22
 801141a:	d854      	bhi.n	80114c6 <_dtoa_r+0x236>
 801141c:	4b61      	ldr	r3, [pc, #388]	; (80115a4 <_dtoa_r+0x314>)
 801141e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801142a:	f7ef fb5f 	bl	8000aec <__aeabi_dcmplt>
 801142e:	2800      	cmp	r0, #0
 8011430:	d04b      	beq.n	80114ca <_dtoa_r+0x23a>
 8011432:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011436:	2300      	movs	r3, #0
 8011438:	930e      	str	r3, [sp, #56]	; 0x38
 801143a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801143c:	1b5d      	subs	r5, r3, r5
 801143e:	1e6b      	subs	r3, r5, #1
 8011440:	9304      	str	r3, [sp, #16]
 8011442:	bf43      	ittte	mi
 8011444:	2300      	movmi	r3, #0
 8011446:	f1c5 0801 	rsbmi	r8, r5, #1
 801144a:	9304      	strmi	r3, [sp, #16]
 801144c:	f04f 0800 	movpl.w	r8, #0
 8011450:	f1ba 0f00 	cmp.w	sl, #0
 8011454:	db3b      	blt.n	80114ce <_dtoa_r+0x23e>
 8011456:	9b04      	ldr	r3, [sp, #16]
 8011458:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801145c:	4453      	add	r3, sl
 801145e:	9304      	str	r3, [sp, #16]
 8011460:	2300      	movs	r3, #0
 8011462:	9306      	str	r3, [sp, #24]
 8011464:	9b05      	ldr	r3, [sp, #20]
 8011466:	2b09      	cmp	r3, #9
 8011468:	d869      	bhi.n	801153e <_dtoa_r+0x2ae>
 801146a:	2b05      	cmp	r3, #5
 801146c:	bfc4      	itt	gt
 801146e:	3b04      	subgt	r3, #4
 8011470:	9305      	strgt	r3, [sp, #20]
 8011472:	9b05      	ldr	r3, [sp, #20]
 8011474:	f1a3 0302 	sub.w	r3, r3, #2
 8011478:	bfcc      	ite	gt
 801147a:	2500      	movgt	r5, #0
 801147c:	2501      	movle	r5, #1
 801147e:	2b03      	cmp	r3, #3
 8011480:	d869      	bhi.n	8011556 <_dtoa_r+0x2c6>
 8011482:	e8df f003 	tbb	[pc, r3]
 8011486:	4e2c      	.short	0x4e2c
 8011488:	5a4c      	.short	0x5a4c
 801148a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801148e:	441d      	add	r5, r3
 8011490:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011494:	2b20      	cmp	r3, #32
 8011496:	bfc1      	itttt	gt
 8011498:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801149c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80114a0:	fa09 f303 	lslgt.w	r3, r9, r3
 80114a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80114a8:	bfda      	itte	le
 80114aa:	f1c3 0320 	rsble	r3, r3, #32
 80114ae:	fa06 f003 	lslle.w	r0, r6, r3
 80114b2:	4318      	orrgt	r0, r3
 80114b4:	f7ef f82e 	bl	8000514 <__aeabi_ui2d>
 80114b8:	2301      	movs	r3, #1
 80114ba:	4606      	mov	r6, r0
 80114bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80114c0:	3d01      	subs	r5, #1
 80114c2:	9310      	str	r3, [sp, #64]	; 0x40
 80114c4:	e771      	b.n	80113aa <_dtoa_r+0x11a>
 80114c6:	2301      	movs	r3, #1
 80114c8:	e7b6      	b.n	8011438 <_dtoa_r+0x1a8>
 80114ca:	900e      	str	r0, [sp, #56]	; 0x38
 80114cc:	e7b5      	b.n	801143a <_dtoa_r+0x1aa>
 80114ce:	f1ca 0300 	rsb	r3, sl, #0
 80114d2:	9306      	str	r3, [sp, #24]
 80114d4:	2300      	movs	r3, #0
 80114d6:	eba8 080a 	sub.w	r8, r8, sl
 80114da:	930d      	str	r3, [sp, #52]	; 0x34
 80114dc:	e7c2      	b.n	8011464 <_dtoa_r+0x1d4>
 80114de:	2300      	movs	r3, #0
 80114e0:	9308      	str	r3, [sp, #32]
 80114e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	dc39      	bgt.n	801155c <_dtoa_r+0x2cc>
 80114e8:	f04f 0901 	mov.w	r9, #1
 80114ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80114f0:	464b      	mov	r3, r9
 80114f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80114f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80114f8:	2200      	movs	r2, #0
 80114fa:	6042      	str	r2, [r0, #4]
 80114fc:	2204      	movs	r2, #4
 80114fe:	f102 0614 	add.w	r6, r2, #20
 8011502:	429e      	cmp	r6, r3
 8011504:	6841      	ldr	r1, [r0, #4]
 8011506:	d92f      	bls.n	8011568 <_dtoa_r+0x2d8>
 8011508:	4620      	mov	r0, r4
 801150a:	f000 fccb 	bl	8011ea4 <_Balloc>
 801150e:	9000      	str	r0, [sp, #0]
 8011510:	2800      	cmp	r0, #0
 8011512:	d14b      	bne.n	80115ac <_dtoa_r+0x31c>
 8011514:	4b24      	ldr	r3, [pc, #144]	; (80115a8 <_dtoa_r+0x318>)
 8011516:	4602      	mov	r2, r0
 8011518:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801151c:	e6d1      	b.n	80112c2 <_dtoa_r+0x32>
 801151e:	2301      	movs	r3, #1
 8011520:	e7de      	b.n	80114e0 <_dtoa_r+0x250>
 8011522:	2300      	movs	r3, #0
 8011524:	9308      	str	r3, [sp, #32]
 8011526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011528:	eb0a 0903 	add.w	r9, sl, r3
 801152c:	f109 0301 	add.w	r3, r9, #1
 8011530:	2b01      	cmp	r3, #1
 8011532:	9301      	str	r3, [sp, #4]
 8011534:	bfb8      	it	lt
 8011536:	2301      	movlt	r3, #1
 8011538:	e7dd      	b.n	80114f6 <_dtoa_r+0x266>
 801153a:	2301      	movs	r3, #1
 801153c:	e7f2      	b.n	8011524 <_dtoa_r+0x294>
 801153e:	2501      	movs	r5, #1
 8011540:	2300      	movs	r3, #0
 8011542:	9305      	str	r3, [sp, #20]
 8011544:	9508      	str	r5, [sp, #32]
 8011546:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801154a:	2200      	movs	r2, #0
 801154c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011550:	2312      	movs	r3, #18
 8011552:	9209      	str	r2, [sp, #36]	; 0x24
 8011554:	e7cf      	b.n	80114f6 <_dtoa_r+0x266>
 8011556:	2301      	movs	r3, #1
 8011558:	9308      	str	r3, [sp, #32]
 801155a:	e7f4      	b.n	8011546 <_dtoa_r+0x2b6>
 801155c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011560:	f8cd 9004 	str.w	r9, [sp, #4]
 8011564:	464b      	mov	r3, r9
 8011566:	e7c6      	b.n	80114f6 <_dtoa_r+0x266>
 8011568:	3101      	adds	r1, #1
 801156a:	6041      	str	r1, [r0, #4]
 801156c:	0052      	lsls	r2, r2, #1
 801156e:	e7c6      	b.n	80114fe <_dtoa_r+0x26e>
 8011570:	636f4361 	.word	0x636f4361
 8011574:	3fd287a7 	.word	0x3fd287a7
 8011578:	8b60c8b3 	.word	0x8b60c8b3
 801157c:	3fc68a28 	.word	0x3fc68a28
 8011580:	509f79fb 	.word	0x509f79fb
 8011584:	3fd34413 	.word	0x3fd34413
 8011588:	08013aa9 	.word	0x08013aa9
 801158c:	08013ac0 	.word	0x08013ac0
 8011590:	7ff00000 	.word	0x7ff00000
 8011594:	08013aa5 	.word	0x08013aa5
 8011598:	08013a9c 	.word	0x08013a9c
 801159c:	08013a79 	.word	0x08013a79
 80115a0:	3ff80000 	.word	0x3ff80000
 80115a4:	08013bb8 	.word	0x08013bb8
 80115a8:	08013b1f 	.word	0x08013b1f
 80115ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115ae:	9a00      	ldr	r2, [sp, #0]
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	9b01      	ldr	r3, [sp, #4]
 80115b4:	2b0e      	cmp	r3, #14
 80115b6:	f200 80ad 	bhi.w	8011714 <_dtoa_r+0x484>
 80115ba:	2d00      	cmp	r5, #0
 80115bc:	f000 80aa 	beq.w	8011714 <_dtoa_r+0x484>
 80115c0:	f1ba 0f00 	cmp.w	sl, #0
 80115c4:	dd36      	ble.n	8011634 <_dtoa_r+0x3a4>
 80115c6:	4ac3      	ldr	r2, [pc, #780]	; (80118d4 <_dtoa_r+0x644>)
 80115c8:	f00a 030f 	and.w	r3, sl, #15
 80115cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80115d0:	ed93 7b00 	vldr	d7, [r3]
 80115d4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80115d8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80115dc:	eeb0 8a47 	vmov.f32	s16, s14
 80115e0:	eef0 8a67 	vmov.f32	s17, s15
 80115e4:	d016      	beq.n	8011614 <_dtoa_r+0x384>
 80115e6:	4bbc      	ldr	r3, [pc, #752]	; (80118d8 <_dtoa_r+0x648>)
 80115e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80115ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80115f0:	f7ef f934 	bl	800085c <__aeabi_ddiv>
 80115f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80115f8:	f007 070f 	and.w	r7, r7, #15
 80115fc:	2503      	movs	r5, #3
 80115fe:	4eb6      	ldr	r6, [pc, #728]	; (80118d8 <_dtoa_r+0x648>)
 8011600:	b957      	cbnz	r7, 8011618 <_dtoa_r+0x388>
 8011602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011606:	ec53 2b18 	vmov	r2, r3, d8
 801160a:	f7ef f927 	bl	800085c <__aeabi_ddiv>
 801160e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011612:	e029      	b.n	8011668 <_dtoa_r+0x3d8>
 8011614:	2502      	movs	r5, #2
 8011616:	e7f2      	b.n	80115fe <_dtoa_r+0x36e>
 8011618:	07f9      	lsls	r1, r7, #31
 801161a:	d508      	bpl.n	801162e <_dtoa_r+0x39e>
 801161c:	ec51 0b18 	vmov	r0, r1, d8
 8011620:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011624:	f7ee fff0 	bl	8000608 <__aeabi_dmul>
 8011628:	ec41 0b18 	vmov	d8, r0, r1
 801162c:	3501      	adds	r5, #1
 801162e:	107f      	asrs	r7, r7, #1
 8011630:	3608      	adds	r6, #8
 8011632:	e7e5      	b.n	8011600 <_dtoa_r+0x370>
 8011634:	f000 80a6 	beq.w	8011784 <_dtoa_r+0x4f4>
 8011638:	f1ca 0600 	rsb	r6, sl, #0
 801163c:	4ba5      	ldr	r3, [pc, #660]	; (80118d4 <_dtoa_r+0x644>)
 801163e:	4fa6      	ldr	r7, [pc, #664]	; (80118d8 <_dtoa_r+0x648>)
 8011640:	f006 020f 	and.w	r2, r6, #15
 8011644:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801164c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011650:	f7ee ffda 	bl	8000608 <__aeabi_dmul>
 8011654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011658:	1136      	asrs	r6, r6, #4
 801165a:	2300      	movs	r3, #0
 801165c:	2502      	movs	r5, #2
 801165e:	2e00      	cmp	r6, #0
 8011660:	f040 8085 	bne.w	801176e <_dtoa_r+0x4de>
 8011664:	2b00      	cmp	r3, #0
 8011666:	d1d2      	bne.n	801160e <_dtoa_r+0x37e>
 8011668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801166a:	2b00      	cmp	r3, #0
 801166c:	f000 808c 	beq.w	8011788 <_dtoa_r+0x4f8>
 8011670:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011674:	4b99      	ldr	r3, [pc, #612]	; (80118dc <_dtoa_r+0x64c>)
 8011676:	2200      	movs	r2, #0
 8011678:	4630      	mov	r0, r6
 801167a:	4639      	mov	r1, r7
 801167c:	f7ef fa36 	bl	8000aec <__aeabi_dcmplt>
 8011680:	2800      	cmp	r0, #0
 8011682:	f000 8081 	beq.w	8011788 <_dtoa_r+0x4f8>
 8011686:	9b01      	ldr	r3, [sp, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d07d      	beq.n	8011788 <_dtoa_r+0x4f8>
 801168c:	f1b9 0f00 	cmp.w	r9, #0
 8011690:	dd3c      	ble.n	801170c <_dtoa_r+0x47c>
 8011692:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011696:	9307      	str	r3, [sp, #28]
 8011698:	2200      	movs	r2, #0
 801169a:	4b91      	ldr	r3, [pc, #580]	; (80118e0 <_dtoa_r+0x650>)
 801169c:	4630      	mov	r0, r6
 801169e:	4639      	mov	r1, r7
 80116a0:	f7ee ffb2 	bl	8000608 <__aeabi_dmul>
 80116a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116a8:	3501      	adds	r5, #1
 80116aa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80116ae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80116b2:	4628      	mov	r0, r5
 80116b4:	f7ee ff3e 	bl	8000534 <__aeabi_i2d>
 80116b8:	4632      	mov	r2, r6
 80116ba:	463b      	mov	r3, r7
 80116bc:	f7ee ffa4 	bl	8000608 <__aeabi_dmul>
 80116c0:	4b88      	ldr	r3, [pc, #544]	; (80118e4 <_dtoa_r+0x654>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	f7ee fdea 	bl	800029c <__adddf3>
 80116c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80116cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116d0:	9303      	str	r3, [sp, #12]
 80116d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d15c      	bne.n	8011792 <_dtoa_r+0x502>
 80116d8:	4b83      	ldr	r3, [pc, #524]	; (80118e8 <_dtoa_r+0x658>)
 80116da:	2200      	movs	r2, #0
 80116dc:	4630      	mov	r0, r6
 80116de:	4639      	mov	r1, r7
 80116e0:	f7ee fdda 	bl	8000298 <__aeabi_dsub>
 80116e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80116e8:	4606      	mov	r6, r0
 80116ea:	460f      	mov	r7, r1
 80116ec:	f7ef fa1c 	bl	8000b28 <__aeabi_dcmpgt>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	f040 8296 	bne.w	8011c22 <_dtoa_r+0x992>
 80116f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80116fa:	4630      	mov	r0, r6
 80116fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011700:	4639      	mov	r1, r7
 8011702:	f7ef f9f3 	bl	8000aec <__aeabi_dcmplt>
 8011706:	2800      	cmp	r0, #0
 8011708:	f040 8288 	bne.w	8011c1c <_dtoa_r+0x98c>
 801170c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011716:	2b00      	cmp	r3, #0
 8011718:	f2c0 8158 	blt.w	80119cc <_dtoa_r+0x73c>
 801171c:	f1ba 0f0e 	cmp.w	sl, #14
 8011720:	f300 8154 	bgt.w	80119cc <_dtoa_r+0x73c>
 8011724:	4b6b      	ldr	r3, [pc, #428]	; (80118d4 <_dtoa_r+0x644>)
 8011726:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801172a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801172e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011730:	2b00      	cmp	r3, #0
 8011732:	f280 80e3 	bge.w	80118fc <_dtoa_r+0x66c>
 8011736:	9b01      	ldr	r3, [sp, #4]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f300 80df 	bgt.w	80118fc <_dtoa_r+0x66c>
 801173e:	f040 826d 	bne.w	8011c1c <_dtoa_r+0x98c>
 8011742:	4b69      	ldr	r3, [pc, #420]	; (80118e8 <_dtoa_r+0x658>)
 8011744:	2200      	movs	r2, #0
 8011746:	4640      	mov	r0, r8
 8011748:	4649      	mov	r1, r9
 801174a:	f7ee ff5d 	bl	8000608 <__aeabi_dmul>
 801174e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011752:	f7ef f9df 	bl	8000b14 <__aeabi_dcmpge>
 8011756:	9e01      	ldr	r6, [sp, #4]
 8011758:	4637      	mov	r7, r6
 801175a:	2800      	cmp	r0, #0
 801175c:	f040 8243 	bne.w	8011be6 <_dtoa_r+0x956>
 8011760:	9d00      	ldr	r5, [sp, #0]
 8011762:	2331      	movs	r3, #49	; 0x31
 8011764:	f805 3b01 	strb.w	r3, [r5], #1
 8011768:	f10a 0a01 	add.w	sl, sl, #1
 801176c:	e23f      	b.n	8011bee <_dtoa_r+0x95e>
 801176e:	07f2      	lsls	r2, r6, #31
 8011770:	d505      	bpl.n	801177e <_dtoa_r+0x4ee>
 8011772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011776:	f7ee ff47 	bl	8000608 <__aeabi_dmul>
 801177a:	3501      	adds	r5, #1
 801177c:	2301      	movs	r3, #1
 801177e:	1076      	asrs	r6, r6, #1
 8011780:	3708      	adds	r7, #8
 8011782:	e76c      	b.n	801165e <_dtoa_r+0x3ce>
 8011784:	2502      	movs	r5, #2
 8011786:	e76f      	b.n	8011668 <_dtoa_r+0x3d8>
 8011788:	9b01      	ldr	r3, [sp, #4]
 801178a:	f8cd a01c 	str.w	sl, [sp, #28]
 801178e:	930c      	str	r3, [sp, #48]	; 0x30
 8011790:	e78d      	b.n	80116ae <_dtoa_r+0x41e>
 8011792:	9900      	ldr	r1, [sp, #0]
 8011794:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011798:	4b4e      	ldr	r3, [pc, #312]	; (80118d4 <_dtoa_r+0x644>)
 801179a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801179e:	4401      	add	r1, r0
 80117a0:	9102      	str	r1, [sp, #8]
 80117a2:	9908      	ldr	r1, [sp, #32]
 80117a4:	eeb0 8a47 	vmov.f32	s16, s14
 80117a8:	eef0 8a67 	vmov.f32	s17, s15
 80117ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80117b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80117b4:	2900      	cmp	r1, #0
 80117b6:	d045      	beq.n	8011844 <_dtoa_r+0x5b4>
 80117b8:	494c      	ldr	r1, [pc, #304]	; (80118ec <_dtoa_r+0x65c>)
 80117ba:	2000      	movs	r0, #0
 80117bc:	f7ef f84e 	bl	800085c <__aeabi_ddiv>
 80117c0:	ec53 2b18 	vmov	r2, r3, d8
 80117c4:	f7ee fd68 	bl	8000298 <__aeabi_dsub>
 80117c8:	9d00      	ldr	r5, [sp, #0]
 80117ca:	ec41 0b18 	vmov	d8, r0, r1
 80117ce:	4639      	mov	r1, r7
 80117d0:	4630      	mov	r0, r6
 80117d2:	f7ef f9c9 	bl	8000b68 <__aeabi_d2iz>
 80117d6:	900c      	str	r0, [sp, #48]	; 0x30
 80117d8:	f7ee feac 	bl	8000534 <__aeabi_i2d>
 80117dc:	4602      	mov	r2, r0
 80117de:	460b      	mov	r3, r1
 80117e0:	4630      	mov	r0, r6
 80117e2:	4639      	mov	r1, r7
 80117e4:	f7ee fd58 	bl	8000298 <__aeabi_dsub>
 80117e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80117ea:	3330      	adds	r3, #48	; 0x30
 80117ec:	f805 3b01 	strb.w	r3, [r5], #1
 80117f0:	ec53 2b18 	vmov	r2, r3, d8
 80117f4:	4606      	mov	r6, r0
 80117f6:	460f      	mov	r7, r1
 80117f8:	f7ef f978 	bl	8000aec <__aeabi_dcmplt>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d165      	bne.n	80118cc <_dtoa_r+0x63c>
 8011800:	4632      	mov	r2, r6
 8011802:	463b      	mov	r3, r7
 8011804:	4935      	ldr	r1, [pc, #212]	; (80118dc <_dtoa_r+0x64c>)
 8011806:	2000      	movs	r0, #0
 8011808:	f7ee fd46 	bl	8000298 <__aeabi_dsub>
 801180c:	ec53 2b18 	vmov	r2, r3, d8
 8011810:	f7ef f96c 	bl	8000aec <__aeabi_dcmplt>
 8011814:	2800      	cmp	r0, #0
 8011816:	f040 80b9 	bne.w	801198c <_dtoa_r+0x6fc>
 801181a:	9b02      	ldr	r3, [sp, #8]
 801181c:	429d      	cmp	r5, r3
 801181e:	f43f af75 	beq.w	801170c <_dtoa_r+0x47c>
 8011822:	4b2f      	ldr	r3, [pc, #188]	; (80118e0 <_dtoa_r+0x650>)
 8011824:	ec51 0b18 	vmov	r0, r1, d8
 8011828:	2200      	movs	r2, #0
 801182a:	f7ee feed 	bl	8000608 <__aeabi_dmul>
 801182e:	4b2c      	ldr	r3, [pc, #176]	; (80118e0 <_dtoa_r+0x650>)
 8011830:	ec41 0b18 	vmov	d8, r0, r1
 8011834:	2200      	movs	r2, #0
 8011836:	4630      	mov	r0, r6
 8011838:	4639      	mov	r1, r7
 801183a:	f7ee fee5 	bl	8000608 <__aeabi_dmul>
 801183e:	4606      	mov	r6, r0
 8011840:	460f      	mov	r7, r1
 8011842:	e7c4      	b.n	80117ce <_dtoa_r+0x53e>
 8011844:	ec51 0b17 	vmov	r0, r1, d7
 8011848:	f7ee fede 	bl	8000608 <__aeabi_dmul>
 801184c:	9b02      	ldr	r3, [sp, #8]
 801184e:	9d00      	ldr	r5, [sp, #0]
 8011850:	930c      	str	r3, [sp, #48]	; 0x30
 8011852:	ec41 0b18 	vmov	d8, r0, r1
 8011856:	4639      	mov	r1, r7
 8011858:	4630      	mov	r0, r6
 801185a:	f7ef f985 	bl	8000b68 <__aeabi_d2iz>
 801185e:	9011      	str	r0, [sp, #68]	; 0x44
 8011860:	f7ee fe68 	bl	8000534 <__aeabi_i2d>
 8011864:	4602      	mov	r2, r0
 8011866:	460b      	mov	r3, r1
 8011868:	4630      	mov	r0, r6
 801186a:	4639      	mov	r1, r7
 801186c:	f7ee fd14 	bl	8000298 <__aeabi_dsub>
 8011870:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011872:	3330      	adds	r3, #48	; 0x30
 8011874:	f805 3b01 	strb.w	r3, [r5], #1
 8011878:	9b02      	ldr	r3, [sp, #8]
 801187a:	429d      	cmp	r5, r3
 801187c:	4606      	mov	r6, r0
 801187e:	460f      	mov	r7, r1
 8011880:	f04f 0200 	mov.w	r2, #0
 8011884:	d134      	bne.n	80118f0 <_dtoa_r+0x660>
 8011886:	4b19      	ldr	r3, [pc, #100]	; (80118ec <_dtoa_r+0x65c>)
 8011888:	ec51 0b18 	vmov	r0, r1, d8
 801188c:	f7ee fd06 	bl	800029c <__adddf3>
 8011890:	4602      	mov	r2, r0
 8011892:	460b      	mov	r3, r1
 8011894:	4630      	mov	r0, r6
 8011896:	4639      	mov	r1, r7
 8011898:	f7ef f946 	bl	8000b28 <__aeabi_dcmpgt>
 801189c:	2800      	cmp	r0, #0
 801189e:	d175      	bne.n	801198c <_dtoa_r+0x6fc>
 80118a0:	ec53 2b18 	vmov	r2, r3, d8
 80118a4:	4911      	ldr	r1, [pc, #68]	; (80118ec <_dtoa_r+0x65c>)
 80118a6:	2000      	movs	r0, #0
 80118a8:	f7ee fcf6 	bl	8000298 <__aeabi_dsub>
 80118ac:	4602      	mov	r2, r0
 80118ae:	460b      	mov	r3, r1
 80118b0:	4630      	mov	r0, r6
 80118b2:	4639      	mov	r1, r7
 80118b4:	f7ef f91a 	bl	8000aec <__aeabi_dcmplt>
 80118b8:	2800      	cmp	r0, #0
 80118ba:	f43f af27 	beq.w	801170c <_dtoa_r+0x47c>
 80118be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80118c0:	1e6b      	subs	r3, r5, #1
 80118c2:	930c      	str	r3, [sp, #48]	; 0x30
 80118c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80118c8:	2b30      	cmp	r3, #48	; 0x30
 80118ca:	d0f8      	beq.n	80118be <_dtoa_r+0x62e>
 80118cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80118d0:	e04a      	b.n	8011968 <_dtoa_r+0x6d8>
 80118d2:	bf00      	nop
 80118d4:	08013bb8 	.word	0x08013bb8
 80118d8:	08013b90 	.word	0x08013b90
 80118dc:	3ff00000 	.word	0x3ff00000
 80118e0:	40240000 	.word	0x40240000
 80118e4:	401c0000 	.word	0x401c0000
 80118e8:	40140000 	.word	0x40140000
 80118ec:	3fe00000 	.word	0x3fe00000
 80118f0:	4baf      	ldr	r3, [pc, #700]	; (8011bb0 <_dtoa_r+0x920>)
 80118f2:	f7ee fe89 	bl	8000608 <__aeabi_dmul>
 80118f6:	4606      	mov	r6, r0
 80118f8:	460f      	mov	r7, r1
 80118fa:	e7ac      	b.n	8011856 <_dtoa_r+0x5c6>
 80118fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011900:	9d00      	ldr	r5, [sp, #0]
 8011902:	4642      	mov	r2, r8
 8011904:	464b      	mov	r3, r9
 8011906:	4630      	mov	r0, r6
 8011908:	4639      	mov	r1, r7
 801190a:	f7ee ffa7 	bl	800085c <__aeabi_ddiv>
 801190e:	f7ef f92b 	bl	8000b68 <__aeabi_d2iz>
 8011912:	9002      	str	r0, [sp, #8]
 8011914:	f7ee fe0e 	bl	8000534 <__aeabi_i2d>
 8011918:	4642      	mov	r2, r8
 801191a:	464b      	mov	r3, r9
 801191c:	f7ee fe74 	bl	8000608 <__aeabi_dmul>
 8011920:	4602      	mov	r2, r0
 8011922:	460b      	mov	r3, r1
 8011924:	4630      	mov	r0, r6
 8011926:	4639      	mov	r1, r7
 8011928:	f7ee fcb6 	bl	8000298 <__aeabi_dsub>
 801192c:	9e02      	ldr	r6, [sp, #8]
 801192e:	9f01      	ldr	r7, [sp, #4]
 8011930:	3630      	adds	r6, #48	; 0x30
 8011932:	f805 6b01 	strb.w	r6, [r5], #1
 8011936:	9e00      	ldr	r6, [sp, #0]
 8011938:	1bae      	subs	r6, r5, r6
 801193a:	42b7      	cmp	r7, r6
 801193c:	4602      	mov	r2, r0
 801193e:	460b      	mov	r3, r1
 8011940:	d137      	bne.n	80119b2 <_dtoa_r+0x722>
 8011942:	f7ee fcab 	bl	800029c <__adddf3>
 8011946:	4642      	mov	r2, r8
 8011948:	464b      	mov	r3, r9
 801194a:	4606      	mov	r6, r0
 801194c:	460f      	mov	r7, r1
 801194e:	f7ef f8eb 	bl	8000b28 <__aeabi_dcmpgt>
 8011952:	b9c8      	cbnz	r0, 8011988 <_dtoa_r+0x6f8>
 8011954:	4642      	mov	r2, r8
 8011956:	464b      	mov	r3, r9
 8011958:	4630      	mov	r0, r6
 801195a:	4639      	mov	r1, r7
 801195c:	f7ef f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8011960:	b110      	cbz	r0, 8011968 <_dtoa_r+0x6d8>
 8011962:	9b02      	ldr	r3, [sp, #8]
 8011964:	07d9      	lsls	r1, r3, #31
 8011966:	d40f      	bmi.n	8011988 <_dtoa_r+0x6f8>
 8011968:	4620      	mov	r0, r4
 801196a:	4659      	mov	r1, fp
 801196c:	f000 fada 	bl	8011f24 <_Bfree>
 8011970:	2300      	movs	r3, #0
 8011972:	702b      	strb	r3, [r5, #0]
 8011974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011976:	f10a 0001 	add.w	r0, sl, #1
 801197a:	6018      	str	r0, [r3, #0]
 801197c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801197e:	2b00      	cmp	r3, #0
 8011980:	f43f acd8 	beq.w	8011334 <_dtoa_r+0xa4>
 8011984:	601d      	str	r5, [r3, #0]
 8011986:	e4d5      	b.n	8011334 <_dtoa_r+0xa4>
 8011988:	f8cd a01c 	str.w	sl, [sp, #28]
 801198c:	462b      	mov	r3, r5
 801198e:	461d      	mov	r5, r3
 8011990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011994:	2a39      	cmp	r2, #57	; 0x39
 8011996:	d108      	bne.n	80119aa <_dtoa_r+0x71a>
 8011998:	9a00      	ldr	r2, [sp, #0]
 801199a:	429a      	cmp	r2, r3
 801199c:	d1f7      	bne.n	801198e <_dtoa_r+0x6fe>
 801199e:	9a07      	ldr	r2, [sp, #28]
 80119a0:	9900      	ldr	r1, [sp, #0]
 80119a2:	3201      	adds	r2, #1
 80119a4:	9207      	str	r2, [sp, #28]
 80119a6:	2230      	movs	r2, #48	; 0x30
 80119a8:	700a      	strb	r2, [r1, #0]
 80119aa:	781a      	ldrb	r2, [r3, #0]
 80119ac:	3201      	adds	r2, #1
 80119ae:	701a      	strb	r2, [r3, #0]
 80119b0:	e78c      	b.n	80118cc <_dtoa_r+0x63c>
 80119b2:	4b7f      	ldr	r3, [pc, #508]	; (8011bb0 <_dtoa_r+0x920>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	f7ee fe27 	bl	8000608 <__aeabi_dmul>
 80119ba:	2200      	movs	r2, #0
 80119bc:	2300      	movs	r3, #0
 80119be:	4606      	mov	r6, r0
 80119c0:	460f      	mov	r7, r1
 80119c2:	f7ef f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80119c6:	2800      	cmp	r0, #0
 80119c8:	d09b      	beq.n	8011902 <_dtoa_r+0x672>
 80119ca:	e7cd      	b.n	8011968 <_dtoa_r+0x6d8>
 80119cc:	9a08      	ldr	r2, [sp, #32]
 80119ce:	2a00      	cmp	r2, #0
 80119d0:	f000 80c4 	beq.w	8011b5c <_dtoa_r+0x8cc>
 80119d4:	9a05      	ldr	r2, [sp, #20]
 80119d6:	2a01      	cmp	r2, #1
 80119d8:	f300 80a8 	bgt.w	8011b2c <_dtoa_r+0x89c>
 80119dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80119de:	2a00      	cmp	r2, #0
 80119e0:	f000 80a0 	beq.w	8011b24 <_dtoa_r+0x894>
 80119e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80119e8:	9e06      	ldr	r6, [sp, #24]
 80119ea:	4645      	mov	r5, r8
 80119ec:	9a04      	ldr	r2, [sp, #16]
 80119ee:	2101      	movs	r1, #1
 80119f0:	441a      	add	r2, r3
 80119f2:	4620      	mov	r0, r4
 80119f4:	4498      	add	r8, r3
 80119f6:	9204      	str	r2, [sp, #16]
 80119f8:	f000 fb50 	bl	801209c <__i2b>
 80119fc:	4607      	mov	r7, r0
 80119fe:	2d00      	cmp	r5, #0
 8011a00:	dd0b      	ble.n	8011a1a <_dtoa_r+0x78a>
 8011a02:	9b04      	ldr	r3, [sp, #16]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	dd08      	ble.n	8011a1a <_dtoa_r+0x78a>
 8011a08:	42ab      	cmp	r3, r5
 8011a0a:	9a04      	ldr	r2, [sp, #16]
 8011a0c:	bfa8      	it	ge
 8011a0e:	462b      	movge	r3, r5
 8011a10:	eba8 0803 	sub.w	r8, r8, r3
 8011a14:	1aed      	subs	r5, r5, r3
 8011a16:	1ad3      	subs	r3, r2, r3
 8011a18:	9304      	str	r3, [sp, #16]
 8011a1a:	9b06      	ldr	r3, [sp, #24]
 8011a1c:	b1fb      	cbz	r3, 8011a5e <_dtoa_r+0x7ce>
 8011a1e:	9b08      	ldr	r3, [sp, #32]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f000 809f 	beq.w	8011b64 <_dtoa_r+0x8d4>
 8011a26:	2e00      	cmp	r6, #0
 8011a28:	dd11      	ble.n	8011a4e <_dtoa_r+0x7be>
 8011a2a:	4639      	mov	r1, r7
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f000 fbf0 	bl	8012214 <__pow5mult>
 8011a34:	465a      	mov	r2, fp
 8011a36:	4601      	mov	r1, r0
 8011a38:	4607      	mov	r7, r0
 8011a3a:	4620      	mov	r0, r4
 8011a3c:	f000 fb44 	bl	80120c8 <__multiply>
 8011a40:	4659      	mov	r1, fp
 8011a42:	9007      	str	r0, [sp, #28]
 8011a44:	4620      	mov	r0, r4
 8011a46:	f000 fa6d 	bl	8011f24 <_Bfree>
 8011a4a:	9b07      	ldr	r3, [sp, #28]
 8011a4c:	469b      	mov	fp, r3
 8011a4e:	9b06      	ldr	r3, [sp, #24]
 8011a50:	1b9a      	subs	r2, r3, r6
 8011a52:	d004      	beq.n	8011a5e <_dtoa_r+0x7ce>
 8011a54:	4659      	mov	r1, fp
 8011a56:	4620      	mov	r0, r4
 8011a58:	f000 fbdc 	bl	8012214 <__pow5mult>
 8011a5c:	4683      	mov	fp, r0
 8011a5e:	2101      	movs	r1, #1
 8011a60:	4620      	mov	r0, r4
 8011a62:	f000 fb1b 	bl	801209c <__i2b>
 8011a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	4606      	mov	r6, r0
 8011a6c:	dd7c      	ble.n	8011b68 <_dtoa_r+0x8d8>
 8011a6e:	461a      	mov	r2, r3
 8011a70:	4601      	mov	r1, r0
 8011a72:	4620      	mov	r0, r4
 8011a74:	f000 fbce 	bl	8012214 <__pow5mult>
 8011a78:	9b05      	ldr	r3, [sp, #20]
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	4606      	mov	r6, r0
 8011a7e:	dd76      	ble.n	8011b6e <_dtoa_r+0x8de>
 8011a80:	2300      	movs	r3, #0
 8011a82:	9306      	str	r3, [sp, #24]
 8011a84:	6933      	ldr	r3, [r6, #16]
 8011a86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011a8a:	6918      	ldr	r0, [r3, #16]
 8011a8c:	f000 fab6 	bl	8011ffc <__hi0bits>
 8011a90:	f1c0 0020 	rsb	r0, r0, #32
 8011a94:	9b04      	ldr	r3, [sp, #16]
 8011a96:	4418      	add	r0, r3
 8011a98:	f010 001f 	ands.w	r0, r0, #31
 8011a9c:	f000 8086 	beq.w	8011bac <_dtoa_r+0x91c>
 8011aa0:	f1c0 0320 	rsb	r3, r0, #32
 8011aa4:	2b04      	cmp	r3, #4
 8011aa6:	dd7f      	ble.n	8011ba8 <_dtoa_r+0x918>
 8011aa8:	f1c0 001c 	rsb	r0, r0, #28
 8011aac:	9b04      	ldr	r3, [sp, #16]
 8011aae:	4403      	add	r3, r0
 8011ab0:	4480      	add	r8, r0
 8011ab2:	4405      	add	r5, r0
 8011ab4:	9304      	str	r3, [sp, #16]
 8011ab6:	f1b8 0f00 	cmp.w	r8, #0
 8011aba:	dd05      	ble.n	8011ac8 <_dtoa_r+0x838>
 8011abc:	4659      	mov	r1, fp
 8011abe:	4642      	mov	r2, r8
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	f000 fc01 	bl	80122c8 <__lshift>
 8011ac6:	4683      	mov	fp, r0
 8011ac8:	9b04      	ldr	r3, [sp, #16]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	dd05      	ble.n	8011ada <_dtoa_r+0x84a>
 8011ace:	4631      	mov	r1, r6
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f000 fbf8 	bl	80122c8 <__lshift>
 8011ad8:	4606      	mov	r6, r0
 8011ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d069      	beq.n	8011bb4 <_dtoa_r+0x924>
 8011ae0:	4631      	mov	r1, r6
 8011ae2:	4658      	mov	r0, fp
 8011ae4:	f000 fc5c 	bl	80123a0 <__mcmp>
 8011ae8:	2800      	cmp	r0, #0
 8011aea:	da63      	bge.n	8011bb4 <_dtoa_r+0x924>
 8011aec:	2300      	movs	r3, #0
 8011aee:	4659      	mov	r1, fp
 8011af0:	220a      	movs	r2, #10
 8011af2:	4620      	mov	r0, r4
 8011af4:	f000 fa38 	bl	8011f68 <__multadd>
 8011af8:	9b08      	ldr	r3, [sp, #32]
 8011afa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011afe:	4683      	mov	fp, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	f000 818f 	beq.w	8011e24 <_dtoa_r+0xb94>
 8011b06:	4639      	mov	r1, r7
 8011b08:	2300      	movs	r3, #0
 8011b0a:	220a      	movs	r2, #10
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f000 fa2b 	bl	8011f68 <__multadd>
 8011b12:	f1b9 0f00 	cmp.w	r9, #0
 8011b16:	4607      	mov	r7, r0
 8011b18:	f300 808e 	bgt.w	8011c38 <_dtoa_r+0x9a8>
 8011b1c:	9b05      	ldr	r3, [sp, #20]
 8011b1e:	2b02      	cmp	r3, #2
 8011b20:	dc50      	bgt.n	8011bc4 <_dtoa_r+0x934>
 8011b22:	e089      	b.n	8011c38 <_dtoa_r+0x9a8>
 8011b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011b2a:	e75d      	b.n	80119e8 <_dtoa_r+0x758>
 8011b2c:	9b01      	ldr	r3, [sp, #4]
 8011b2e:	1e5e      	subs	r6, r3, #1
 8011b30:	9b06      	ldr	r3, [sp, #24]
 8011b32:	42b3      	cmp	r3, r6
 8011b34:	bfbf      	itttt	lt
 8011b36:	9b06      	ldrlt	r3, [sp, #24]
 8011b38:	9606      	strlt	r6, [sp, #24]
 8011b3a:	1af2      	sublt	r2, r6, r3
 8011b3c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011b3e:	bfb6      	itet	lt
 8011b40:	189b      	addlt	r3, r3, r2
 8011b42:	1b9e      	subge	r6, r3, r6
 8011b44:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011b46:	9b01      	ldr	r3, [sp, #4]
 8011b48:	bfb8      	it	lt
 8011b4a:	2600      	movlt	r6, #0
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	bfb5      	itete	lt
 8011b50:	eba8 0503 	sublt.w	r5, r8, r3
 8011b54:	9b01      	ldrge	r3, [sp, #4]
 8011b56:	2300      	movlt	r3, #0
 8011b58:	4645      	movge	r5, r8
 8011b5a:	e747      	b.n	80119ec <_dtoa_r+0x75c>
 8011b5c:	9e06      	ldr	r6, [sp, #24]
 8011b5e:	9f08      	ldr	r7, [sp, #32]
 8011b60:	4645      	mov	r5, r8
 8011b62:	e74c      	b.n	80119fe <_dtoa_r+0x76e>
 8011b64:	9a06      	ldr	r2, [sp, #24]
 8011b66:	e775      	b.n	8011a54 <_dtoa_r+0x7c4>
 8011b68:	9b05      	ldr	r3, [sp, #20]
 8011b6a:	2b01      	cmp	r3, #1
 8011b6c:	dc18      	bgt.n	8011ba0 <_dtoa_r+0x910>
 8011b6e:	9b02      	ldr	r3, [sp, #8]
 8011b70:	b9b3      	cbnz	r3, 8011ba0 <_dtoa_r+0x910>
 8011b72:	9b03      	ldr	r3, [sp, #12]
 8011b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b78:	b9a3      	cbnz	r3, 8011ba4 <_dtoa_r+0x914>
 8011b7a:	9b03      	ldr	r3, [sp, #12]
 8011b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b80:	0d1b      	lsrs	r3, r3, #20
 8011b82:	051b      	lsls	r3, r3, #20
 8011b84:	b12b      	cbz	r3, 8011b92 <_dtoa_r+0x902>
 8011b86:	9b04      	ldr	r3, [sp, #16]
 8011b88:	3301      	adds	r3, #1
 8011b8a:	9304      	str	r3, [sp, #16]
 8011b8c:	f108 0801 	add.w	r8, r8, #1
 8011b90:	2301      	movs	r3, #1
 8011b92:	9306      	str	r3, [sp, #24]
 8011b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f47f af74 	bne.w	8011a84 <_dtoa_r+0x7f4>
 8011b9c:	2001      	movs	r0, #1
 8011b9e:	e779      	b.n	8011a94 <_dtoa_r+0x804>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e7f6      	b.n	8011b92 <_dtoa_r+0x902>
 8011ba4:	9b02      	ldr	r3, [sp, #8]
 8011ba6:	e7f4      	b.n	8011b92 <_dtoa_r+0x902>
 8011ba8:	d085      	beq.n	8011ab6 <_dtoa_r+0x826>
 8011baa:	4618      	mov	r0, r3
 8011bac:	301c      	adds	r0, #28
 8011bae:	e77d      	b.n	8011aac <_dtoa_r+0x81c>
 8011bb0:	40240000 	.word	0x40240000
 8011bb4:	9b01      	ldr	r3, [sp, #4]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	dc38      	bgt.n	8011c2c <_dtoa_r+0x99c>
 8011bba:	9b05      	ldr	r3, [sp, #20]
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	dd35      	ble.n	8011c2c <_dtoa_r+0x99c>
 8011bc0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011bc4:	f1b9 0f00 	cmp.w	r9, #0
 8011bc8:	d10d      	bne.n	8011be6 <_dtoa_r+0x956>
 8011bca:	4631      	mov	r1, r6
 8011bcc:	464b      	mov	r3, r9
 8011bce:	2205      	movs	r2, #5
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f000 f9c9 	bl	8011f68 <__multadd>
 8011bd6:	4601      	mov	r1, r0
 8011bd8:	4606      	mov	r6, r0
 8011bda:	4658      	mov	r0, fp
 8011bdc:	f000 fbe0 	bl	80123a0 <__mcmp>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f73f adbd 	bgt.w	8011760 <_dtoa_r+0x4d0>
 8011be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011be8:	9d00      	ldr	r5, [sp, #0]
 8011bea:	ea6f 0a03 	mvn.w	sl, r3
 8011bee:	f04f 0800 	mov.w	r8, #0
 8011bf2:	4631      	mov	r1, r6
 8011bf4:	4620      	mov	r0, r4
 8011bf6:	f000 f995 	bl	8011f24 <_Bfree>
 8011bfa:	2f00      	cmp	r7, #0
 8011bfc:	f43f aeb4 	beq.w	8011968 <_dtoa_r+0x6d8>
 8011c00:	f1b8 0f00 	cmp.w	r8, #0
 8011c04:	d005      	beq.n	8011c12 <_dtoa_r+0x982>
 8011c06:	45b8      	cmp	r8, r7
 8011c08:	d003      	beq.n	8011c12 <_dtoa_r+0x982>
 8011c0a:	4641      	mov	r1, r8
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f000 f989 	bl	8011f24 <_Bfree>
 8011c12:	4639      	mov	r1, r7
 8011c14:	4620      	mov	r0, r4
 8011c16:	f000 f985 	bl	8011f24 <_Bfree>
 8011c1a:	e6a5      	b.n	8011968 <_dtoa_r+0x6d8>
 8011c1c:	2600      	movs	r6, #0
 8011c1e:	4637      	mov	r7, r6
 8011c20:	e7e1      	b.n	8011be6 <_dtoa_r+0x956>
 8011c22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011c24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011c28:	4637      	mov	r7, r6
 8011c2a:	e599      	b.n	8011760 <_dtoa_r+0x4d0>
 8011c2c:	9b08      	ldr	r3, [sp, #32]
 8011c2e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 80fd 	beq.w	8011e32 <_dtoa_r+0xba2>
 8011c38:	2d00      	cmp	r5, #0
 8011c3a:	dd05      	ble.n	8011c48 <_dtoa_r+0x9b8>
 8011c3c:	4639      	mov	r1, r7
 8011c3e:	462a      	mov	r2, r5
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fb41 	bl	80122c8 <__lshift>
 8011c46:	4607      	mov	r7, r0
 8011c48:	9b06      	ldr	r3, [sp, #24]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d05c      	beq.n	8011d08 <_dtoa_r+0xa78>
 8011c4e:	6879      	ldr	r1, [r7, #4]
 8011c50:	4620      	mov	r0, r4
 8011c52:	f000 f927 	bl	8011ea4 <_Balloc>
 8011c56:	4605      	mov	r5, r0
 8011c58:	b928      	cbnz	r0, 8011c66 <_dtoa_r+0x9d6>
 8011c5a:	4b80      	ldr	r3, [pc, #512]	; (8011e5c <_dtoa_r+0xbcc>)
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011c62:	f7ff bb2e 	b.w	80112c2 <_dtoa_r+0x32>
 8011c66:	693a      	ldr	r2, [r7, #16]
 8011c68:	3202      	adds	r2, #2
 8011c6a:	0092      	lsls	r2, r2, #2
 8011c6c:	f107 010c 	add.w	r1, r7, #12
 8011c70:	300c      	adds	r0, #12
 8011c72:	f000 f8fd 	bl	8011e70 <memcpy>
 8011c76:	2201      	movs	r2, #1
 8011c78:	4629      	mov	r1, r5
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f000 fb24 	bl	80122c8 <__lshift>
 8011c80:	9b00      	ldr	r3, [sp, #0]
 8011c82:	3301      	adds	r3, #1
 8011c84:	9301      	str	r3, [sp, #4]
 8011c86:	9b00      	ldr	r3, [sp, #0]
 8011c88:	444b      	add	r3, r9
 8011c8a:	9307      	str	r3, [sp, #28]
 8011c8c:	9b02      	ldr	r3, [sp, #8]
 8011c8e:	f003 0301 	and.w	r3, r3, #1
 8011c92:	46b8      	mov	r8, r7
 8011c94:	9306      	str	r3, [sp, #24]
 8011c96:	4607      	mov	r7, r0
 8011c98:	9b01      	ldr	r3, [sp, #4]
 8011c9a:	4631      	mov	r1, r6
 8011c9c:	3b01      	subs	r3, #1
 8011c9e:	4658      	mov	r0, fp
 8011ca0:	9302      	str	r3, [sp, #8]
 8011ca2:	f7ff fa67 	bl	8011174 <quorem>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	3330      	adds	r3, #48	; 0x30
 8011caa:	9004      	str	r0, [sp, #16]
 8011cac:	4641      	mov	r1, r8
 8011cae:	4658      	mov	r0, fp
 8011cb0:	9308      	str	r3, [sp, #32]
 8011cb2:	f000 fb75 	bl	80123a0 <__mcmp>
 8011cb6:	463a      	mov	r2, r7
 8011cb8:	4681      	mov	r9, r0
 8011cba:	4631      	mov	r1, r6
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	f000 fb8b 	bl	80123d8 <__mdiff>
 8011cc2:	68c2      	ldr	r2, [r0, #12]
 8011cc4:	9b08      	ldr	r3, [sp, #32]
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	bb02      	cbnz	r2, 8011d0c <_dtoa_r+0xa7c>
 8011cca:	4601      	mov	r1, r0
 8011ccc:	4658      	mov	r0, fp
 8011cce:	f000 fb67 	bl	80123a0 <__mcmp>
 8011cd2:	9b08      	ldr	r3, [sp, #32]
 8011cd4:	4602      	mov	r2, r0
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	4620      	mov	r0, r4
 8011cda:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011cde:	f000 f921 	bl	8011f24 <_Bfree>
 8011ce2:	9b05      	ldr	r3, [sp, #20]
 8011ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ce6:	9d01      	ldr	r5, [sp, #4]
 8011ce8:	ea43 0102 	orr.w	r1, r3, r2
 8011cec:	9b06      	ldr	r3, [sp, #24]
 8011cee:	430b      	orrs	r3, r1
 8011cf0:	9b08      	ldr	r3, [sp, #32]
 8011cf2:	d10d      	bne.n	8011d10 <_dtoa_r+0xa80>
 8011cf4:	2b39      	cmp	r3, #57	; 0x39
 8011cf6:	d029      	beq.n	8011d4c <_dtoa_r+0xabc>
 8011cf8:	f1b9 0f00 	cmp.w	r9, #0
 8011cfc:	dd01      	ble.n	8011d02 <_dtoa_r+0xa72>
 8011cfe:	9b04      	ldr	r3, [sp, #16]
 8011d00:	3331      	adds	r3, #49	; 0x31
 8011d02:	9a02      	ldr	r2, [sp, #8]
 8011d04:	7013      	strb	r3, [r2, #0]
 8011d06:	e774      	b.n	8011bf2 <_dtoa_r+0x962>
 8011d08:	4638      	mov	r0, r7
 8011d0a:	e7b9      	b.n	8011c80 <_dtoa_r+0x9f0>
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	e7e2      	b.n	8011cd6 <_dtoa_r+0xa46>
 8011d10:	f1b9 0f00 	cmp.w	r9, #0
 8011d14:	db06      	blt.n	8011d24 <_dtoa_r+0xa94>
 8011d16:	9905      	ldr	r1, [sp, #20]
 8011d18:	ea41 0909 	orr.w	r9, r1, r9
 8011d1c:	9906      	ldr	r1, [sp, #24]
 8011d1e:	ea59 0101 	orrs.w	r1, r9, r1
 8011d22:	d120      	bne.n	8011d66 <_dtoa_r+0xad6>
 8011d24:	2a00      	cmp	r2, #0
 8011d26:	ddec      	ble.n	8011d02 <_dtoa_r+0xa72>
 8011d28:	4659      	mov	r1, fp
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	9301      	str	r3, [sp, #4]
 8011d30:	f000 faca 	bl	80122c8 <__lshift>
 8011d34:	4631      	mov	r1, r6
 8011d36:	4683      	mov	fp, r0
 8011d38:	f000 fb32 	bl	80123a0 <__mcmp>
 8011d3c:	2800      	cmp	r0, #0
 8011d3e:	9b01      	ldr	r3, [sp, #4]
 8011d40:	dc02      	bgt.n	8011d48 <_dtoa_r+0xab8>
 8011d42:	d1de      	bne.n	8011d02 <_dtoa_r+0xa72>
 8011d44:	07da      	lsls	r2, r3, #31
 8011d46:	d5dc      	bpl.n	8011d02 <_dtoa_r+0xa72>
 8011d48:	2b39      	cmp	r3, #57	; 0x39
 8011d4a:	d1d8      	bne.n	8011cfe <_dtoa_r+0xa6e>
 8011d4c:	9a02      	ldr	r2, [sp, #8]
 8011d4e:	2339      	movs	r3, #57	; 0x39
 8011d50:	7013      	strb	r3, [r2, #0]
 8011d52:	462b      	mov	r3, r5
 8011d54:	461d      	mov	r5, r3
 8011d56:	3b01      	subs	r3, #1
 8011d58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011d5c:	2a39      	cmp	r2, #57	; 0x39
 8011d5e:	d050      	beq.n	8011e02 <_dtoa_r+0xb72>
 8011d60:	3201      	adds	r2, #1
 8011d62:	701a      	strb	r2, [r3, #0]
 8011d64:	e745      	b.n	8011bf2 <_dtoa_r+0x962>
 8011d66:	2a00      	cmp	r2, #0
 8011d68:	dd03      	ble.n	8011d72 <_dtoa_r+0xae2>
 8011d6a:	2b39      	cmp	r3, #57	; 0x39
 8011d6c:	d0ee      	beq.n	8011d4c <_dtoa_r+0xabc>
 8011d6e:	3301      	adds	r3, #1
 8011d70:	e7c7      	b.n	8011d02 <_dtoa_r+0xa72>
 8011d72:	9a01      	ldr	r2, [sp, #4]
 8011d74:	9907      	ldr	r1, [sp, #28]
 8011d76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011d7a:	428a      	cmp	r2, r1
 8011d7c:	d02a      	beq.n	8011dd4 <_dtoa_r+0xb44>
 8011d7e:	4659      	mov	r1, fp
 8011d80:	2300      	movs	r3, #0
 8011d82:	220a      	movs	r2, #10
 8011d84:	4620      	mov	r0, r4
 8011d86:	f000 f8ef 	bl	8011f68 <__multadd>
 8011d8a:	45b8      	cmp	r8, r7
 8011d8c:	4683      	mov	fp, r0
 8011d8e:	f04f 0300 	mov.w	r3, #0
 8011d92:	f04f 020a 	mov.w	r2, #10
 8011d96:	4641      	mov	r1, r8
 8011d98:	4620      	mov	r0, r4
 8011d9a:	d107      	bne.n	8011dac <_dtoa_r+0xb1c>
 8011d9c:	f000 f8e4 	bl	8011f68 <__multadd>
 8011da0:	4680      	mov	r8, r0
 8011da2:	4607      	mov	r7, r0
 8011da4:	9b01      	ldr	r3, [sp, #4]
 8011da6:	3301      	adds	r3, #1
 8011da8:	9301      	str	r3, [sp, #4]
 8011daa:	e775      	b.n	8011c98 <_dtoa_r+0xa08>
 8011dac:	f000 f8dc 	bl	8011f68 <__multadd>
 8011db0:	4639      	mov	r1, r7
 8011db2:	4680      	mov	r8, r0
 8011db4:	2300      	movs	r3, #0
 8011db6:	220a      	movs	r2, #10
 8011db8:	4620      	mov	r0, r4
 8011dba:	f000 f8d5 	bl	8011f68 <__multadd>
 8011dbe:	4607      	mov	r7, r0
 8011dc0:	e7f0      	b.n	8011da4 <_dtoa_r+0xb14>
 8011dc2:	f1b9 0f00 	cmp.w	r9, #0
 8011dc6:	9a00      	ldr	r2, [sp, #0]
 8011dc8:	bfcc      	ite	gt
 8011dca:	464d      	movgt	r5, r9
 8011dcc:	2501      	movle	r5, #1
 8011dce:	4415      	add	r5, r2
 8011dd0:	f04f 0800 	mov.w	r8, #0
 8011dd4:	4659      	mov	r1, fp
 8011dd6:	2201      	movs	r2, #1
 8011dd8:	4620      	mov	r0, r4
 8011dda:	9301      	str	r3, [sp, #4]
 8011ddc:	f000 fa74 	bl	80122c8 <__lshift>
 8011de0:	4631      	mov	r1, r6
 8011de2:	4683      	mov	fp, r0
 8011de4:	f000 fadc 	bl	80123a0 <__mcmp>
 8011de8:	2800      	cmp	r0, #0
 8011dea:	dcb2      	bgt.n	8011d52 <_dtoa_r+0xac2>
 8011dec:	d102      	bne.n	8011df4 <_dtoa_r+0xb64>
 8011dee:	9b01      	ldr	r3, [sp, #4]
 8011df0:	07db      	lsls	r3, r3, #31
 8011df2:	d4ae      	bmi.n	8011d52 <_dtoa_r+0xac2>
 8011df4:	462b      	mov	r3, r5
 8011df6:	461d      	mov	r5, r3
 8011df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011dfc:	2a30      	cmp	r2, #48	; 0x30
 8011dfe:	d0fa      	beq.n	8011df6 <_dtoa_r+0xb66>
 8011e00:	e6f7      	b.n	8011bf2 <_dtoa_r+0x962>
 8011e02:	9a00      	ldr	r2, [sp, #0]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d1a5      	bne.n	8011d54 <_dtoa_r+0xac4>
 8011e08:	f10a 0a01 	add.w	sl, sl, #1
 8011e0c:	2331      	movs	r3, #49	; 0x31
 8011e0e:	e779      	b.n	8011d04 <_dtoa_r+0xa74>
 8011e10:	4b13      	ldr	r3, [pc, #76]	; (8011e60 <_dtoa_r+0xbd0>)
 8011e12:	f7ff baaf 	b.w	8011374 <_dtoa_r+0xe4>
 8011e16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	f47f aa86 	bne.w	801132a <_dtoa_r+0x9a>
 8011e1e:	4b11      	ldr	r3, [pc, #68]	; (8011e64 <_dtoa_r+0xbd4>)
 8011e20:	f7ff baa8 	b.w	8011374 <_dtoa_r+0xe4>
 8011e24:	f1b9 0f00 	cmp.w	r9, #0
 8011e28:	dc03      	bgt.n	8011e32 <_dtoa_r+0xba2>
 8011e2a:	9b05      	ldr	r3, [sp, #20]
 8011e2c:	2b02      	cmp	r3, #2
 8011e2e:	f73f aec9 	bgt.w	8011bc4 <_dtoa_r+0x934>
 8011e32:	9d00      	ldr	r5, [sp, #0]
 8011e34:	4631      	mov	r1, r6
 8011e36:	4658      	mov	r0, fp
 8011e38:	f7ff f99c 	bl	8011174 <quorem>
 8011e3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011e40:	f805 3b01 	strb.w	r3, [r5], #1
 8011e44:	9a00      	ldr	r2, [sp, #0]
 8011e46:	1aaa      	subs	r2, r5, r2
 8011e48:	4591      	cmp	r9, r2
 8011e4a:	ddba      	ble.n	8011dc2 <_dtoa_r+0xb32>
 8011e4c:	4659      	mov	r1, fp
 8011e4e:	2300      	movs	r3, #0
 8011e50:	220a      	movs	r2, #10
 8011e52:	4620      	mov	r0, r4
 8011e54:	f000 f888 	bl	8011f68 <__multadd>
 8011e58:	4683      	mov	fp, r0
 8011e5a:	e7eb      	b.n	8011e34 <_dtoa_r+0xba4>
 8011e5c:	08013b1f 	.word	0x08013b1f
 8011e60:	08013a78 	.word	0x08013a78
 8011e64:	08013a9c 	.word	0x08013a9c

08011e68 <_localeconv_r>:
 8011e68:	4800      	ldr	r0, [pc, #0]	; (8011e6c <_localeconv_r+0x4>)
 8011e6a:	4770      	bx	lr
 8011e6c:	20000258 	.word	0x20000258

08011e70 <memcpy>:
 8011e70:	440a      	add	r2, r1
 8011e72:	4291      	cmp	r1, r2
 8011e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011e78:	d100      	bne.n	8011e7c <memcpy+0xc>
 8011e7a:	4770      	bx	lr
 8011e7c:	b510      	push	{r4, lr}
 8011e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e86:	4291      	cmp	r1, r2
 8011e88:	d1f9      	bne.n	8011e7e <memcpy+0xe>
 8011e8a:	bd10      	pop	{r4, pc}

08011e8c <__malloc_lock>:
 8011e8c:	4801      	ldr	r0, [pc, #4]	; (8011e94 <__malloc_lock+0x8>)
 8011e8e:	f000 bbc8 	b.w	8012622 <__retarget_lock_acquire_recursive>
 8011e92:	bf00      	nop
 8011e94:	20001628 	.word	0x20001628

08011e98 <__malloc_unlock>:
 8011e98:	4801      	ldr	r0, [pc, #4]	; (8011ea0 <__malloc_unlock+0x8>)
 8011e9a:	f000 bbc3 	b.w	8012624 <__retarget_lock_release_recursive>
 8011e9e:	bf00      	nop
 8011ea0:	20001628 	.word	0x20001628

08011ea4 <_Balloc>:
 8011ea4:	b570      	push	{r4, r5, r6, lr}
 8011ea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	460d      	mov	r5, r1
 8011eac:	b976      	cbnz	r6, 8011ecc <_Balloc+0x28>
 8011eae:	2010      	movs	r0, #16
 8011eb0:	f7fe fc24 	bl	80106fc <malloc>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	6260      	str	r0, [r4, #36]	; 0x24
 8011eb8:	b920      	cbnz	r0, 8011ec4 <_Balloc+0x20>
 8011eba:	4b18      	ldr	r3, [pc, #96]	; (8011f1c <_Balloc+0x78>)
 8011ebc:	4818      	ldr	r0, [pc, #96]	; (8011f20 <_Balloc+0x7c>)
 8011ebe:	2166      	movs	r1, #102	; 0x66
 8011ec0:	f000 fb7e 	bl	80125c0 <__assert_func>
 8011ec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ec8:	6006      	str	r6, [r0, #0]
 8011eca:	60c6      	str	r6, [r0, #12]
 8011ecc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011ece:	68f3      	ldr	r3, [r6, #12]
 8011ed0:	b183      	cbz	r3, 8011ef4 <_Balloc+0x50>
 8011ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011eda:	b9b8      	cbnz	r0, 8011f0c <_Balloc+0x68>
 8011edc:	2101      	movs	r1, #1
 8011ede:	fa01 f605 	lsl.w	r6, r1, r5
 8011ee2:	1d72      	adds	r2, r6, #5
 8011ee4:	0092      	lsls	r2, r2, #2
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f000 fb5a 	bl	80125a0 <_calloc_r>
 8011eec:	b160      	cbz	r0, 8011f08 <_Balloc+0x64>
 8011eee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011ef2:	e00e      	b.n	8011f12 <_Balloc+0x6e>
 8011ef4:	2221      	movs	r2, #33	; 0x21
 8011ef6:	2104      	movs	r1, #4
 8011ef8:	4620      	mov	r0, r4
 8011efa:	f000 fb51 	bl	80125a0 <_calloc_r>
 8011efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f00:	60f0      	str	r0, [r6, #12]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d1e4      	bne.n	8011ed2 <_Balloc+0x2e>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	bd70      	pop	{r4, r5, r6, pc}
 8011f0c:	6802      	ldr	r2, [r0, #0]
 8011f0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011f12:	2300      	movs	r3, #0
 8011f14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011f18:	e7f7      	b.n	8011f0a <_Balloc+0x66>
 8011f1a:	bf00      	nop
 8011f1c:	08013aa9 	.word	0x08013aa9
 8011f20:	08013b30 	.word	0x08013b30

08011f24 <_Bfree>:
 8011f24:	b570      	push	{r4, r5, r6, lr}
 8011f26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011f28:	4605      	mov	r5, r0
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	b976      	cbnz	r6, 8011f4c <_Bfree+0x28>
 8011f2e:	2010      	movs	r0, #16
 8011f30:	f7fe fbe4 	bl	80106fc <malloc>
 8011f34:	4602      	mov	r2, r0
 8011f36:	6268      	str	r0, [r5, #36]	; 0x24
 8011f38:	b920      	cbnz	r0, 8011f44 <_Bfree+0x20>
 8011f3a:	4b09      	ldr	r3, [pc, #36]	; (8011f60 <_Bfree+0x3c>)
 8011f3c:	4809      	ldr	r0, [pc, #36]	; (8011f64 <_Bfree+0x40>)
 8011f3e:	218a      	movs	r1, #138	; 0x8a
 8011f40:	f000 fb3e 	bl	80125c0 <__assert_func>
 8011f44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f48:	6006      	str	r6, [r0, #0]
 8011f4a:	60c6      	str	r6, [r0, #12]
 8011f4c:	b13c      	cbz	r4, 8011f5e <_Bfree+0x3a>
 8011f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011f50:	6862      	ldr	r2, [r4, #4]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f58:	6021      	str	r1, [r4, #0]
 8011f5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}
 8011f60:	08013aa9 	.word	0x08013aa9
 8011f64:	08013b30 	.word	0x08013b30

08011f68 <__multadd>:
 8011f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f6c:	690e      	ldr	r6, [r1, #16]
 8011f6e:	4607      	mov	r7, r0
 8011f70:	4698      	mov	r8, r3
 8011f72:	460c      	mov	r4, r1
 8011f74:	f101 0014 	add.w	r0, r1, #20
 8011f78:	2300      	movs	r3, #0
 8011f7a:	6805      	ldr	r5, [r0, #0]
 8011f7c:	b2a9      	uxth	r1, r5
 8011f7e:	fb02 8101 	mla	r1, r2, r1, r8
 8011f82:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011f86:	0c2d      	lsrs	r5, r5, #16
 8011f88:	fb02 c505 	mla	r5, r2, r5, ip
 8011f8c:	b289      	uxth	r1, r1
 8011f8e:	3301      	adds	r3, #1
 8011f90:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011f94:	429e      	cmp	r6, r3
 8011f96:	f840 1b04 	str.w	r1, [r0], #4
 8011f9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011f9e:	dcec      	bgt.n	8011f7a <__multadd+0x12>
 8011fa0:	f1b8 0f00 	cmp.w	r8, #0
 8011fa4:	d022      	beq.n	8011fec <__multadd+0x84>
 8011fa6:	68a3      	ldr	r3, [r4, #8]
 8011fa8:	42b3      	cmp	r3, r6
 8011faa:	dc19      	bgt.n	8011fe0 <__multadd+0x78>
 8011fac:	6861      	ldr	r1, [r4, #4]
 8011fae:	4638      	mov	r0, r7
 8011fb0:	3101      	adds	r1, #1
 8011fb2:	f7ff ff77 	bl	8011ea4 <_Balloc>
 8011fb6:	4605      	mov	r5, r0
 8011fb8:	b928      	cbnz	r0, 8011fc6 <__multadd+0x5e>
 8011fba:	4602      	mov	r2, r0
 8011fbc:	4b0d      	ldr	r3, [pc, #52]	; (8011ff4 <__multadd+0x8c>)
 8011fbe:	480e      	ldr	r0, [pc, #56]	; (8011ff8 <__multadd+0x90>)
 8011fc0:	21b5      	movs	r1, #181	; 0xb5
 8011fc2:	f000 fafd 	bl	80125c0 <__assert_func>
 8011fc6:	6922      	ldr	r2, [r4, #16]
 8011fc8:	3202      	adds	r2, #2
 8011fca:	f104 010c 	add.w	r1, r4, #12
 8011fce:	0092      	lsls	r2, r2, #2
 8011fd0:	300c      	adds	r0, #12
 8011fd2:	f7ff ff4d 	bl	8011e70 <memcpy>
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	4638      	mov	r0, r7
 8011fda:	f7ff ffa3 	bl	8011f24 <_Bfree>
 8011fde:	462c      	mov	r4, r5
 8011fe0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011fe4:	3601      	adds	r6, #1
 8011fe6:	f8c3 8014 	str.w	r8, [r3, #20]
 8011fea:	6126      	str	r6, [r4, #16]
 8011fec:	4620      	mov	r0, r4
 8011fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff2:	bf00      	nop
 8011ff4:	08013b1f 	.word	0x08013b1f
 8011ff8:	08013b30 	.word	0x08013b30

08011ffc <__hi0bits>:
 8011ffc:	0c03      	lsrs	r3, r0, #16
 8011ffe:	041b      	lsls	r3, r3, #16
 8012000:	b9d3      	cbnz	r3, 8012038 <__hi0bits+0x3c>
 8012002:	0400      	lsls	r0, r0, #16
 8012004:	2310      	movs	r3, #16
 8012006:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801200a:	bf04      	itt	eq
 801200c:	0200      	lsleq	r0, r0, #8
 801200e:	3308      	addeq	r3, #8
 8012010:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012014:	bf04      	itt	eq
 8012016:	0100      	lsleq	r0, r0, #4
 8012018:	3304      	addeq	r3, #4
 801201a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801201e:	bf04      	itt	eq
 8012020:	0080      	lsleq	r0, r0, #2
 8012022:	3302      	addeq	r3, #2
 8012024:	2800      	cmp	r0, #0
 8012026:	db05      	blt.n	8012034 <__hi0bits+0x38>
 8012028:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801202c:	f103 0301 	add.w	r3, r3, #1
 8012030:	bf08      	it	eq
 8012032:	2320      	moveq	r3, #32
 8012034:	4618      	mov	r0, r3
 8012036:	4770      	bx	lr
 8012038:	2300      	movs	r3, #0
 801203a:	e7e4      	b.n	8012006 <__hi0bits+0xa>

0801203c <__lo0bits>:
 801203c:	6803      	ldr	r3, [r0, #0]
 801203e:	f013 0207 	ands.w	r2, r3, #7
 8012042:	4601      	mov	r1, r0
 8012044:	d00b      	beq.n	801205e <__lo0bits+0x22>
 8012046:	07da      	lsls	r2, r3, #31
 8012048:	d424      	bmi.n	8012094 <__lo0bits+0x58>
 801204a:	0798      	lsls	r0, r3, #30
 801204c:	bf49      	itett	mi
 801204e:	085b      	lsrmi	r3, r3, #1
 8012050:	089b      	lsrpl	r3, r3, #2
 8012052:	2001      	movmi	r0, #1
 8012054:	600b      	strmi	r3, [r1, #0]
 8012056:	bf5c      	itt	pl
 8012058:	600b      	strpl	r3, [r1, #0]
 801205a:	2002      	movpl	r0, #2
 801205c:	4770      	bx	lr
 801205e:	b298      	uxth	r0, r3
 8012060:	b9b0      	cbnz	r0, 8012090 <__lo0bits+0x54>
 8012062:	0c1b      	lsrs	r3, r3, #16
 8012064:	2010      	movs	r0, #16
 8012066:	f013 0fff 	tst.w	r3, #255	; 0xff
 801206a:	bf04      	itt	eq
 801206c:	0a1b      	lsreq	r3, r3, #8
 801206e:	3008      	addeq	r0, #8
 8012070:	071a      	lsls	r2, r3, #28
 8012072:	bf04      	itt	eq
 8012074:	091b      	lsreq	r3, r3, #4
 8012076:	3004      	addeq	r0, #4
 8012078:	079a      	lsls	r2, r3, #30
 801207a:	bf04      	itt	eq
 801207c:	089b      	lsreq	r3, r3, #2
 801207e:	3002      	addeq	r0, #2
 8012080:	07da      	lsls	r2, r3, #31
 8012082:	d403      	bmi.n	801208c <__lo0bits+0x50>
 8012084:	085b      	lsrs	r3, r3, #1
 8012086:	f100 0001 	add.w	r0, r0, #1
 801208a:	d005      	beq.n	8012098 <__lo0bits+0x5c>
 801208c:	600b      	str	r3, [r1, #0]
 801208e:	4770      	bx	lr
 8012090:	4610      	mov	r0, r2
 8012092:	e7e8      	b.n	8012066 <__lo0bits+0x2a>
 8012094:	2000      	movs	r0, #0
 8012096:	4770      	bx	lr
 8012098:	2020      	movs	r0, #32
 801209a:	4770      	bx	lr

0801209c <__i2b>:
 801209c:	b510      	push	{r4, lr}
 801209e:	460c      	mov	r4, r1
 80120a0:	2101      	movs	r1, #1
 80120a2:	f7ff feff 	bl	8011ea4 <_Balloc>
 80120a6:	4602      	mov	r2, r0
 80120a8:	b928      	cbnz	r0, 80120b6 <__i2b+0x1a>
 80120aa:	4b05      	ldr	r3, [pc, #20]	; (80120c0 <__i2b+0x24>)
 80120ac:	4805      	ldr	r0, [pc, #20]	; (80120c4 <__i2b+0x28>)
 80120ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80120b2:	f000 fa85 	bl	80125c0 <__assert_func>
 80120b6:	2301      	movs	r3, #1
 80120b8:	6144      	str	r4, [r0, #20]
 80120ba:	6103      	str	r3, [r0, #16]
 80120bc:	bd10      	pop	{r4, pc}
 80120be:	bf00      	nop
 80120c0:	08013b1f 	.word	0x08013b1f
 80120c4:	08013b30 	.word	0x08013b30

080120c8 <__multiply>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	4614      	mov	r4, r2
 80120ce:	690a      	ldr	r2, [r1, #16]
 80120d0:	6923      	ldr	r3, [r4, #16]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	bfb8      	it	lt
 80120d6:	460b      	movlt	r3, r1
 80120d8:	460d      	mov	r5, r1
 80120da:	bfbc      	itt	lt
 80120dc:	4625      	movlt	r5, r4
 80120de:	461c      	movlt	r4, r3
 80120e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80120e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80120e8:	68ab      	ldr	r3, [r5, #8]
 80120ea:	6869      	ldr	r1, [r5, #4]
 80120ec:	eb0a 0709 	add.w	r7, sl, r9
 80120f0:	42bb      	cmp	r3, r7
 80120f2:	b085      	sub	sp, #20
 80120f4:	bfb8      	it	lt
 80120f6:	3101      	addlt	r1, #1
 80120f8:	f7ff fed4 	bl	8011ea4 <_Balloc>
 80120fc:	b930      	cbnz	r0, 801210c <__multiply+0x44>
 80120fe:	4602      	mov	r2, r0
 8012100:	4b42      	ldr	r3, [pc, #264]	; (801220c <__multiply+0x144>)
 8012102:	4843      	ldr	r0, [pc, #268]	; (8012210 <__multiply+0x148>)
 8012104:	f240 115d 	movw	r1, #349	; 0x15d
 8012108:	f000 fa5a 	bl	80125c0 <__assert_func>
 801210c:	f100 0614 	add.w	r6, r0, #20
 8012110:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012114:	4633      	mov	r3, r6
 8012116:	2200      	movs	r2, #0
 8012118:	4543      	cmp	r3, r8
 801211a:	d31e      	bcc.n	801215a <__multiply+0x92>
 801211c:	f105 0c14 	add.w	ip, r5, #20
 8012120:	f104 0314 	add.w	r3, r4, #20
 8012124:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012128:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801212c:	9202      	str	r2, [sp, #8]
 801212e:	ebac 0205 	sub.w	r2, ip, r5
 8012132:	3a15      	subs	r2, #21
 8012134:	f022 0203 	bic.w	r2, r2, #3
 8012138:	3204      	adds	r2, #4
 801213a:	f105 0115 	add.w	r1, r5, #21
 801213e:	458c      	cmp	ip, r1
 8012140:	bf38      	it	cc
 8012142:	2204      	movcc	r2, #4
 8012144:	9201      	str	r2, [sp, #4]
 8012146:	9a02      	ldr	r2, [sp, #8]
 8012148:	9303      	str	r3, [sp, #12]
 801214a:	429a      	cmp	r2, r3
 801214c:	d808      	bhi.n	8012160 <__multiply+0x98>
 801214e:	2f00      	cmp	r7, #0
 8012150:	dc55      	bgt.n	80121fe <__multiply+0x136>
 8012152:	6107      	str	r7, [r0, #16]
 8012154:	b005      	add	sp, #20
 8012156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801215a:	f843 2b04 	str.w	r2, [r3], #4
 801215e:	e7db      	b.n	8012118 <__multiply+0x50>
 8012160:	f8b3 a000 	ldrh.w	sl, [r3]
 8012164:	f1ba 0f00 	cmp.w	sl, #0
 8012168:	d020      	beq.n	80121ac <__multiply+0xe4>
 801216a:	f105 0e14 	add.w	lr, r5, #20
 801216e:	46b1      	mov	r9, r6
 8012170:	2200      	movs	r2, #0
 8012172:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012176:	f8d9 b000 	ldr.w	fp, [r9]
 801217a:	b2a1      	uxth	r1, r4
 801217c:	fa1f fb8b 	uxth.w	fp, fp
 8012180:	fb0a b101 	mla	r1, sl, r1, fp
 8012184:	4411      	add	r1, r2
 8012186:	f8d9 2000 	ldr.w	r2, [r9]
 801218a:	0c24      	lsrs	r4, r4, #16
 801218c:	0c12      	lsrs	r2, r2, #16
 801218e:	fb0a 2404 	mla	r4, sl, r4, r2
 8012192:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012196:	b289      	uxth	r1, r1
 8012198:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801219c:	45f4      	cmp	ip, lr
 801219e:	f849 1b04 	str.w	r1, [r9], #4
 80121a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80121a6:	d8e4      	bhi.n	8012172 <__multiply+0xaa>
 80121a8:	9901      	ldr	r1, [sp, #4]
 80121aa:	5072      	str	r2, [r6, r1]
 80121ac:	9a03      	ldr	r2, [sp, #12]
 80121ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80121b2:	3304      	adds	r3, #4
 80121b4:	f1b9 0f00 	cmp.w	r9, #0
 80121b8:	d01f      	beq.n	80121fa <__multiply+0x132>
 80121ba:	6834      	ldr	r4, [r6, #0]
 80121bc:	f105 0114 	add.w	r1, r5, #20
 80121c0:	46b6      	mov	lr, r6
 80121c2:	f04f 0a00 	mov.w	sl, #0
 80121c6:	880a      	ldrh	r2, [r1, #0]
 80121c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80121cc:	fb09 b202 	mla	r2, r9, r2, fp
 80121d0:	4492      	add	sl, r2
 80121d2:	b2a4      	uxth	r4, r4
 80121d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80121d8:	f84e 4b04 	str.w	r4, [lr], #4
 80121dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80121e0:	f8be 2000 	ldrh.w	r2, [lr]
 80121e4:	0c24      	lsrs	r4, r4, #16
 80121e6:	fb09 2404 	mla	r4, r9, r4, r2
 80121ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80121ee:	458c      	cmp	ip, r1
 80121f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80121f4:	d8e7      	bhi.n	80121c6 <__multiply+0xfe>
 80121f6:	9a01      	ldr	r2, [sp, #4]
 80121f8:	50b4      	str	r4, [r6, r2]
 80121fa:	3604      	adds	r6, #4
 80121fc:	e7a3      	b.n	8012146 <__multiply+0x7e>
 80121fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1a5      	bne.n	8012152 <__multiply+0x8a>
 8012206:	3f01      	subs	r7, #1
 8012208:	e7a1      	b.n	801214e <__multiply+0x86>
 801220a:	bf00      	nop
 801220c:	08013b1f 	.word	0x08013b1f
 8012210:	08013b30 	.word	0x08013b30

08012214 <__pow5mult>:
 8012214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012218:	4615      	mov	r5, r2
 801221a:	f012 0203 	ands.w	r2, r2, #3
 801221e:	4606      	mov	r6, r0
 8012220:	460f      	mov	r7, r1
 8012222:	d007      	beq.n	8012234 <__pow5mult+0x20>
 8012224:	4c25      	ldr	r4, [pc, #148]	; (80122bc <__pow5mult+0xa8>)
 8012226:	3a01      	subs	r2, #1
 8012228:	2300      	movs	r3, #0
 801222a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801222e:	f7ff fe9b 	bl	8011f68 <__multadd>
 8012232:	4607      	mov	r7, r0
 8012234:	10ad      	asrs	r5, r5, #2
 8012236:	d03d      	beq.n	80122b4 <__pow5mult+0xa0>
 8012238:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801223a:	b97c      	cbnz	r4, 801225c <__pow5mult+0x48>
 801223c:	2010      	movs	r0, #16
 801223e:	f7fe fa5d 	bl	80106fc <malloc>
 8012242:	4602      	mov	r2, r0
 8012244:	6270      	str	r0, [r6, #36]	; 0x24
 8012246:	b928      	cbnz	r0, 8012254 <__pow5mult+0x40>
 8012248:	4b1d      	ldr	r3, [pc, #116]	; (80122c0 <__pow5mult+0xac>)
 801224a:	481e      	ldr	r0, [pc, #120]	; (80122c4 <__pow5mult+0xb0>)
 801224c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012250:	f000 f9b6 	bl	80125c0 <__assert_func>
 8012254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012258:	6004      	str	r4, [r0, #0]
 801225a:	60c4      	str	r4, [r0, #12]
 801225c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012264:	b94c      	cbnz	r4, 801227a <__pow5mult+0x66>
 8012266:	f240 2171 	movw	r1, #625	; 0x271
 801226a:	4630      	mov	r0, r6
 801226c:	f7ff ff16 	bl	801209c <__i2b>
 8012270:	2300      	movs	r3, #0
 8012272:	f8c8 0008 	str.w	r0, [r8, #8]
 8012276:	4604      	mov	r4, r0
 8012278:	6003      	str	r3, [r0, #0]
 801227a:	f04f 0900 	mov.w	r9, #0
 801227e:	07eb      	lsls	r3, r5, #31
 8012280:	d50a      	bpl.n	8012298 <__pow5mult+0x84>
 8012282:	4639      	mov	r1, r7
 8012284:	4622      	mov	r2, r4
 8012286:	4630      	mov	r0, r6
 8012288:	f7ff ff1e 	bl	80120c8 <__multiply>
 801228c:	4639      	mov	r1, r7
 801228e:	4680      	mov	r8, r0
 8012290:	4630      	mov	r0, r6
 8012292:	f7ff fe47 	bl	8011f24 <_Bfree>
 8012296:	4647      	mov	r7, r8
 8012298:	106d      	asrs	r5, r5, #1
 801229a:	d00b      	beq.n	80122b4 <__pow5mult+0xa0>
 801229c:	6820      	ldr	r0, [r4, #0]
 801229e:	b938      	cbnz	r0, 80122b0 <__pow5mult+0x9c>
 80122a0:	4622      	mov	r2, r4
 80122a2:	4621      	mov	r1, r4
 80122a4:	4630      	mov	r0, r6
 80122a6:	f7ff ff0f 	bl	80120c8 <__multiply>
 80122aa:	6020      	str	r0, [r4, #0]
 80122ac:	f8c0 9000 	str.w	r9, [r0]
 80122b0:	4604      	mov	r4, r0
 80122b2:	e7e4      	b.n	801227e <__pow5mult+0x6a>
 80122b4:	4638      	mov	r0, r7
 80122b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122ba:	bf00      	nop
 80122bc:	08013c80 	.word	0x08013c80
 80122c0:	08013aa9 	.word	0x08013aa9
 80122c4:	08013b30 	.word	0x08013b30

080122c8 <__lshift>:
 80122c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122cc:	460c      	mov	r4, r1
 80122ce:	6849      	ldr	r1, [r1, #4]
 80122d0:	6923      	ldr	r3, [r4, #16]
 80122d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80122d6:	68a3      	ldr	r3, [r4, #8]
 80122d8:	4607      	mov	r7, r0
 80122da:	4691      	mov	r9, r2
 80122dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80122e0:	f108 0601 	add.w	r6, r8, #1
 80122e4:	42b3      	cmp	r3, r6
 80122e6:	db0b      	blt.n	8012300 <__lshift+0x38>
 80122e8:	4638      	mov	r0, r7
 80122ea:	f7ff fddb 	bl	8011ea4 <_Balloc>
 80122ee:	4605      	mov	r5, r0
 80122f0:	b948      	cbnz	r0, 8012306 <__lshift+0x3e>
 80122f2:	4602      	mov	r2, r0
 80122f4:	4b28      	ldr	r3, [pc, #160]	; (8012398 <__lshift+0xd0>)
 80122f6:	4829      	ldr	r0, [pc, #164]	; (801239c <__lshift+0xd4>)
 80122f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80122fc:	f000 f960 	bl	80125c0 <__assert_func>
 8012300:	3101      	adds	r1, #1
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	e7ee      	b.n	80122e4 <__lshift+0x1c>
 8012306:	2300      	movs	r3, #0
 8012308:	f100 0114 	add.w	r1, r0, #20
 801230c:	f100 0210 	add.w	r2, r0, #16
 8012310:	4618      	mov	r0, r3
 8012312:	4553      	cmp	r3, sl
 8012314:	db33      	blt.n	801237e <__lshift+0xb6>
 8012316:	6920      	ldr	r0, [r4, #16]
 8012318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801231c:	f104 0314 	add.w	r3, r4, #20
 8012320:	f019 091f 	ands.w	r9, r9, #31
 8012324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012328:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801232c:	d02b      	beq.n	8012386 <__lshift+0xbe>
 801232e:	f1c9 0e20 	rsb	lr, r9, #32
 8012332:	468a      	mov	sl, r1
 8012334:	2200      	movs	r2, #0
 8012336:	6818      	ldr	r0, [r3, #0]
 8012338:	fa00 f009 	lsl.w	r0, r0, r9
 801233c:	4302      	orrs	r2, r0
 801233e:	f84a 2b04 	str.w	r2, [sl], #4
 8012342:	f853 2b04 	ldr.w	r2, [r3], #4
 8012346:	459c      	cmp	ip, r3
 8012348:	fa22 f20e 	lsr.w	r2, r2, lr
 801234c:	d8f3      	bhi.n	8012336 <__lshift+0x6e>
 801234e:	ebac 0304 	sub.w	r3, ip, r4
 8012352:	3b15      	subs	r3, #21
 8012354:	f023 0303 	bic.w	r3, r3, #3
 8012358:	3304      	adds	r3, #4
 801235a:	f104 0015 	add.w	r0, r4, #21
 801235e:	4584      	cmp	ip, r0
 8012360:	bf38      	it	cc
 8012362:	2304      	movcc	r3, #4
 8012364:	50ca      	str	r2, [r1, r3]
 8012366:	b10a      	cbz	r2, 801236c <__lshift+0xa4>
 8012368:	f108 0602 	add.w	r6, r8, #2
 801236c:	3e01      	subs	r6, #1
 801236e:	4638      	mov	r0, r7
 8012370:	612e      	str	r6, [r5, #16]
 8012372:	4621      	mov	r1, r4
 8012374:	f7ff fdd6 	bl	8011f24 <_Bfree>
 8012378:	4628      	mov	r0, r5
 801237a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801237e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012382:	3301      	adds	r3, #1
 8012384:	e7c5      	b.n	8012312 <__lshift+0x4a>
 8012386:	3904      	subs	r1, #4
 8012388:	f853 2b04 	ldr.w	r2, [r3], #4
 801238c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012390:	459c      	cmp	ip, r3
 8012392:	d8f9      	bhi.n	8012388 <__lshift+0xc0>
 8012394:	e7ea      	b.n	801236c <__lshift+0xa4>
 8012396:	bf00      	nop
 8012398:	08013b1f 	.word	0x08013b1f
 801239c:	08013b30 	.word	0x08013b30

080123a0 <__mcmp>:
 80123a0:	b530      	push	{r4, r5, lr}
 80123a2:	6902      	ldr	r2, [r0, #16]
 80123a4:	690c      	ldr	r4, [r1, #16]
 80123a6:	1b12      	subs	r2, r2, r4
 80123a8:	d10e      	bne.n	80123c8 <__mcmp+0x28>
 80123aa:	f100 0314 	add.w	r3, r0, #20
 80123ae:	3114      	adds	r1, #20
 80123b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80123b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80123b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80123bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80123c0:	42a5      	cmp	r5, r4
 80123c2:	d003      	beq.n	80123cc <__mcmp+0x2c>
 80123c4:	d305      	bcc.n	80123d2 <__mcmp+0x32>
 80123c6:	2201      	movs	r2, #1
 80123c8:	4610      	mov	r0, r2
 80123ca:	bd30      	pop	{r4, r5, pc}
 80123cc:	4283      	cmp	r3, r0
 80123ce:	d3f3      	bcc.n	80123b8 <__mcmp+0x18>
 80123d0:	e7fa      	b.n	80123c8 <__mcmp+0x28>
 80123d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80123d6:	e7f7      	b.n	80123c8 <__mcmp+0x28>

080123d8 <__mdiff>:
 80123d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123dc:	460c      	mov	r4, r1
 80123de:	4606      	mov	r6, r0
 80123e0:	4611      	mov	r1, r2
 80123e2:	4620      	mov	r0, r4
 80123e4:	4617      	mov	r7, r2
 80123e6:	f7ff ffdb 	bl	80123a0 <__mcmp>
 80123ea:	1e05      	subs	r5, r0, #0
 80123ec:	d110      	bne.n	8012410 <__mdiff+0x38>
 80123ee:	4629      	mov	r1, r5
 80123f0:	4630      	mov	r0, r6
 80123f2:	f7ff fd57 	bl	8011ea4 <_Balloc>
 80123f6:	b930      	cbnz	r0, 8012406 <__mdiff+0x2e>
 80123f8:	4b39      	ldr	r3, [pc, #228]	; (80124e0 <__mdiff+0x108>)
 80123fa:	4602      	mov	r2, r0
 80123fc:	f240 2132 	movw	r1, #562	; 0x232
 8012400:	4838      	ldr	r0, [pc, #224]	; (80124e4 <__mdiff+0x10c>)
 8012402:	f000 f8dd 	bl	80125c0 <__assert_func>
 8012406:	2301      	movs	r3, #1
 8012408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801240c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012410:	bfa4      	itt	ge
 8012412:	463b      	movge	r3, r7
 8012414:	4627      	movge	r7, r4
 8012416:	4630      	mov	r0, r6
 8012418:	6879      	ldr	r1, [r7, #4]
 801241a:	bfa6      	itte	ge
 801241c:	461c      	movge	r4, r3
 801241e:	2500      	movge	r5, #0
 8012420:	2501      	movlt	r5, #1
 8012422:	f7ff fd3f 	bl	8011ea4 <_Balloc>
 8012426:	b920      	cbnz	r0, 8012432 <__mdiff+0x5a>
 8012428:	4b2d      	ldr	r3, [pc, #180]	; (80124e0 <__mdiff+0x108>)
 801242a:	4602      	mov	r2, r0
 801242c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012430:	e7e6      	b.n	8012400 <__mdiff+0x28>
 8012432:	693e      	ldr	r6, [r7, #16]
 8012434:	60c5      	str	r5, [r0, #12]
 8012436:	6925      	ldr	r5, [r4, #16]
 8012438:	f107 0114 	add.w	r1, r7, #20
 801243c:	f104 0914 	add.w	r9, r4, #20
 8012440:	f100 0e14 	add.w	lr, r0, #20
 8012444:	f107 0210 	add.w	r2, r7, #16
 8012448:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801244c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012450:	46f2      	mov	sl, lr
 8012452:	2700      	movs	r7, #0
 8012454:	f859 3b04 	ldr.w	r3, [r9], #4
 8012458:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801245c:	fa1f f883 	uxth.w	r8, r3
 8012460:	fa17 f78b 	uxtah	r7, r7, fp
 8012464:	0c1b      	lsrs	r3, r3, #16
 8012466:	eba7 0808 	sub.w	r8, r7, r8
 801246a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801246e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012472:	fa1f f888 	uxth.w	r8, r8
 8012476:	141f      	asrs	r7, r3, #16
 8012478:	454d      	cmp	r5, r9
 801247a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801247e:	f84a 3b04 	str.w	r3, [sl], #4
 8012482:	d8e7      	bhi.n	8012454 <__mdiff+0x7c>
 8012484:	1b2b      	subs	r3, r5, r4
 8012486:	3b15      	subs	r3, #21
 8012488:	f023 0303 	bic.w	r3, r3, #3
 801248c:	3304      	adds	r3, #4
 801248e:	3415      	adds	r4, #21
 8012490:	42a5      	cmp	r5, r4
 8012492:	bf38      	it	cc
 8012494:	2304      	movcc	r3, #4
 8012496:	4419      	add	r1, r3
 8012498:	4473      	add	r3, lr
 801249a:	469e      	mov	lr, r3
 801249c:	460d      	mov	r5, r1
 801249e:	4565      	cmp	r5, ip
 80124a0:	d30e      	bcc.n	80124c0 <__mdiff+0xe8>
 80124a2:	f10c 0203 	add.w	r2, ip, #3
 80124a6:	1a52      	subs	r2, r2, r1
 80124a8:	f022 0203 	bic.w	r2, r2, #3
 80124ac:	3903      	subs	r1, #3
 80124ae:	458c      	cmp	ip, r1
 80124b0:	bf38      	it	cc
 80124b2:	2200      	movcc	r2, #0
 80124b4:	441a      	add	r2, r3
 80124b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80124ba:	b17b      	cbz	r3, 80124dc <__mdiff+0x104>
 80124bc:	6106      	str	r6, [r0, #16]
 80124be:	e7a5      	b.n	801240c <__mdiff+0x34>
 80124c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80124c4:	fa17 f488 	uxtah	r4, r7, r8
 80124c8:	1422      	asrs	r2, r4, #16
 80124ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80124ce:	b2a4      	uxth	r4, r4
 80124d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80124d4:	f84e 4b04 	str.w	r4, [lr], #4
 80124d8:	1417      	asrs	r7, r2, #16
 80124da:	e7e0      	b.n	801249e <__mdiff+0xc6>
 80124dc:	3e01      	subs	r6, #1
 80124de:	e7ea      	b.n	80124b6 <__mdiff+0xde>
 80124e0:	08013b1f 	.word	0x08013b1f
 80124e4:	08013b30 	.word	0x08013b30

080124e8 <__d2b>:
 80124e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80124ec:	4689      	mov	r9, r1
 80124ee:	2101      	movs	r1, #1
 80124f0:	ec57 6b10 	vmov	r6, r7, d0
 80124f4:	4690      	mov	r8, r2
 80124f6:	f7ff fcd5 	bl	8011ea4 <_Balloc>
 80124fa:	4604      	mov	r4, r0
 80124fc:	b930      	cbnz	r0, 801250c <__d2b+0x24>
 80124fe:	4602      	mov	r2, r0
 8012500:	4b25      	ldr	r3, [pc, #148]	; (8012598 <__d2b+0xb0>)
 8012502:	4826      	ldr	r0, [pc, #152]	; (801259c <__d2b+0xb4>)
 8012504:	f240 310a 	movw	r1, #778	; 0x30a
 8012508:	f000 f85a 	bl	80125c0 <__assert_func>
 801250c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012510:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012514:	bb35      	cbnz	r5, 8012564 <__d2b+0x7c>
 8012516:	2e00      	cmp	r6, #0
 8012518:	9301      	str	r3, [sp, #4]
 801251a:	d028      	beq.n	801256e <__d2b+0x86>
 801251c:	4668      	mov	r0, sp
 801251e:	9600      	str	r6, [sp, #0]
 8012520:	f7ff fd8c 	bl	801203c <__lo0bits>
 8012524:	9900      	ldr	r1, [sp, #0]
 8012526:	b300      	cbz	r0, 801256a <__d2b+0x82>
 8012528:	9a01      	ldr	r2, [sp, #4]
 801252a:	f1c0 0320 	rsb	r3, r0, #32
 801252e:	fa02 f303 	lsl.w	r3, r2, r3
 8012532:	430b      	orrs	r3, r1
 8012534:	40c2      	lsrs	r2, r0
 8012536:	6163      	str	r3, [r4, #20]
 8012538:	9201      	str	r2, [sp, #4]
 801253a:	9b01      	ldr	r3, [sp, #4]
 801253c:	61a3      	str	r3, [r4, #24]
 801253e:	2b00      	cmp	r3, #0
 8012540:	bf14      	ite	ne
 8012542:	2202      	movne	r2, #2
 8012544:	2201      	moveq	r2, #1
 8012546:	6122      	str	r2, [r4, #16]
 8012548:	b1d5      	cbz	r5, 8012580 <__d2b+0x98>
 801254a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801254e:	4405      	add	r5, r0
 8012550:	f8c9 5000 	str.w	r5, [r9]
 8012554:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012558:	f8c8 0000 	str.w	r0, [r8]
 801255c:	4620      	mov	r0, r4
 801255e:	b003      	add	sp, #12
 8012560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012568:	e7d5      	b.n	8012516 <__d2b+0x2e>
 801256a:	6161      	str	r1, [r4, #20]
 801256c:	e7e5      	b.n	801253a <__d2b+0x52>
 801256e:	a801      	add	r0, sp, #4
 8012570:	f7ff fd64 	bl	801203c <__lo0bits>
 8012574:	9b01      	ldr	r3, [sp, #4]
 8012576:	6163      	str	r3, [r4, #20]
 8012578:	2201      	movs	r2, #1
 801257a:	6122      	str	r2, [r4, #16]
 801257c:	3020      	adds	r0, #32
 801257e:	e7e3      	b.n	8012548 <__d2b+0x60>
 8012580:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012584:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012588:	f8c9 0000 	str.w	r0, [r9]
 801258c:	6918      	ldr	r0, [r3, #16]
 801258e:	f7ff fd35 	bl	8011ffc <__hi0bits>
 8012592:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012596:	e7df      	b.n	8012558 <__d2b+0x70>
 8012598:	08013b1f 	.word	0x08013b1f
 801259c:	08013b30 	.word	0x08013b30

080125a0 <_calloc_r>:
 80125a0:	b513      	push	{r0, r1, r4, lr}
 80125a2:	434a      	muls	r2, r1
 80125a4:	4611      	mov	r1, r2
 80125a6:	9201      	str	r2, [sp, #4]
 80125a8:	f7fe f910 	bl	80107cc <_malloc_r>
 80125ac:	4604      	mov	r4, r0
 80125ae:	b118      	cbz	r0, 80125b8 <_calloc_r+0x18>
 80125b0:	9a01      	ldr	r2, [sp, #4]
 80125b2:	2100      	movs	r1, #0
 80125b4:	f7fe f8b2 	bl	801071c <memset>
 80125b8:	4620      	mov	r0, r4
 80125ba:	b002      	add	sp, #8
 80125bc:	bd10      	pop	{r4, pc}
	...

080125c0 <__assert_func>:
 80125c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125c2:	4614      	mov	r4, r2
 80125c4:	461a      	mov	r2, r3
 80125c6:	4b09      	ldr	r3, [pc, #36]	; (80125ec <__assert_func+0x2c>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	4605      	mov	r5, r0
 80125cc:	68d8      	ldr	r0, [r3, #12]
 80125ce:	b14c      	cbz	r4, 80125e4 <__assert_func+0x24>
 80125d0:	4b07      	ldr	r3, [pc, #28]	; (80125f0 <__assert_func+0x30>)
 80125d2:	9100      	str	r1, [sp, #0]
 80125d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80125d8:	4906      	ldr	r1, [pc, #24]	; (80125f4 <__assert_func+0x34>)
 80125da:	462b      	mov	r3, r5
 80125dc:	f000 f80e 	bl	80125fc <fiprintf>
 80125e0:	f000 fa5a 	bl	8012a98 <abort>
 80125e4:	4b04      	ldr	r3, [pc, #16]	; (80125f8 <__assert_func+0x38>)
 80125e6:	461c      	mov	r4, r3
 80125e8:	e7f3      	b.n	80125d2 <__assert_func+0x12>
 80125ea:	bf00      	nop
 80125ec:	20000104 	.word	0x20000104
 80125f0:	08013c8c 	.word	0x08013c8c
 80125f4:	08013c99 	.word	0x08013c99
 80125f8:	08013cc7 	.word	0x08013cc7

080125fc <fiprintf>:
 80125fc:	b40e      	push	{r1, r2, r3}
 80125fe:	b503      	push	{r0, r1, lr}
 8012600:	4601      	mov	r1, r0
 8012602:	ab03      	add	r3, sp, #12
 8012604:	4805      	ldr	r0, [pc, #20]	; (801261c <fiprintf+0x20>)
 8012606:	f853 2b04 	ldr.w	r2, [r3], #4
 801260a:	6800      	ldr	r0, [r0, #0]
 801260c:	9301      	str	r3, [sp, #4]
 801260e:	f000 f845 	bl	801269c <_vfiprintf_r>
 8012612:	b002      	add	sp, #8
 8012614:	f85d eb04 	ldr.w	lr, [sp], #4
 8012618:	b003      	add	sp, #12
 801261a:	4770      	bx	lr
 801261c:	20000104 	.word	0x20000104

08012620 <__retarget_lock_init_recursive>:
 8012620:	4770      	bx	lr

08012622 <__retarget_lock_acquire_recursive>:
 8012622:	4770      	bx	lr

08012624 <__retarget_lock_release_recursive>:
 8012624:	4770      	bx	lr

08012626 <__ascii_mbtowc>:
 8012626:	b082      	sub	sp, #8
 8012628:	b901      	cbnz	r1, 801262c <__ascii_mbtowc+0x6>
 801262a:	a901      	add	r1, sp, #4
 801262c:	b142      	cbz	r2, 8012640 <__ascii_mbtowc+0x1a>
 801262e:	b14b      	cbz	r3, 8012644 <__ascii_mbtowc+0x1e>
 8012630:	7813      	ldrb	r3, [r2, #0]
 8012632:	600b      	str	r3, [r1, #0]
 8012634:	7812      	ldrb	r2, [r2, #0]
 8012636:	1e10      	subs	r0, r2, #0
 8012638:	bf18      	it	ne
 801263a:	2001      	movne	r0, #1
 801263c:	b002      	add	sp, #8
 801263e:	4770      	bx	lr
 8012640:	4610      	mov	r0, r2
 8012642:	e7fb      	b.n	801263c <__ascii_mbtowc+0x16>
 8012644:	f06f 0001 	mvn.w	r0, #1
 8012648:	e7f8      	b.n	801263c <__ascii_mbtowc+0x16>

0801264a <__sfputc_r>:
 801264a:	6893      	ldr	r3, [r2, #8]
 801264c:	3b01      	subs	r3, #1
 801264e:	2b00      	cmp	r3, #0
 8012650:	b410      	push	{r4}
 8012652:	6093      	str	r3, [r2, #8]
 8012654:	da08      	bge.n	8012668 <__sfputc_r+0x1e>
 8012656:	6994      	ldr	r4, [r2, #24]
 8012658:	42a3      	cmp	r3, r4
 801265a:	db01      	blt.n	8012660 <__sfputc_r+0x16>
 801265c:	290a      	cmp	r1, #10
 801265e:	d103      	bne.n	8012668 <__sfputc_r+0x1e>
 8012660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012664:	f000 b94a 	b.w	80128fc <__swbuf_r>
 8012668:	6813      	ldr	r3, [r2, #0]
 801266a:	1c58      	adds	r0, r3, #1
 801266c:	6010      	str	r0, [r2, #0]
 801266e:	7019      	strb	r1, [r3, #0]
 8012670:	4608      	mov	r0, r1
 8012672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012676:	4770      	bx	lr

08012678 <__sfputs_r>:
 8012678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801267a:	4606      	mov	r6, r0
 801267c:	460f      	mov	r7, r1
 801267e:	4614      	mov	r4, r2
 8012680:	18d5      	adds	r5, r2, r3
 8012682:	42ac      	cmp	r4, r5
 8012684:	d101      	bne.n	801268a <__sfputs_r+0x12>
 8012686:	2000      	movs	r0, #0
 8012688:	e007      	b.n	801269a <__sfputs_r+0x22>
 801268a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801268e:	463a      	mov	r2, r7
 8012690:	4630      	mov	r0, r6
 8012692:	f7ff ffda 	bl	801264a <__sfputc_r>
 8012696:	1c43      	adds	r3, r0, #1
 8012698:	d1f3      	bne.n	8012682 <__sfputs_r+0xa>
 801269a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801269c <_vfiprintf_r>:
 801269c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a0:	460d      	mov	r5, r1
 80126a2:	b09d      	sub	sp, #116	; 0x74
 80126a4:	4614      	mov	r4, r2
 80126a6:	4698      	mov	r8, r3
 80126a8:	4606      	mov	r6, r0
 80126aa:	b118      	cbz	r0, 80126b4 <_vfiprintf_r+0x18>
 80126ac:	6983      	ldr	r3, [r0, #24]
 80126ae:	b90b      	cbnz	r3, 80126b4 <_vfiprintf_r+0x18>
 80126b0:	f000 fb14 	bl	8012cdc <__sinit>
 80126b4:	4b89      	ldr	r3, [pc, #548]	; (80128dc <_vfiprintf_r+0x240>)
 80126b6:	429d      	cmp	r5, r3
 80126b8:	d11b      	bne.n	80126f2 <_vfiprintf_r+0x56>
 80126ba:	6875      	ldr	r5, [r6, #4]
 80126bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126be:	07d9      	lsls	r1, r3, #31
 80126c0:	d405      	bmi.n	80126ce <_vfiprintf_r+0x32>
 80126c2:	89ab      	ldrh	r3, [r5, #12]
 80126c4:	059a      	lsls	r2, r3, #22
 80126c6:	d402      	bmi.n	80126ce <_vfiprintf_r+0x32>
 80126c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80126ca:	f7ff ffaa 	bl	8012622 <__retarget_lock_acquire_recursive>
 80126ce:	89ab      	ldrh	r3, [r5, #12]
 80126d0:	071b      	lsls	r3, r3, #28
 80126d2:	d501      	bpl.n	80126d8 <_vfiprintf_r+0x3c>
 80126d4:	692b      	ldr	r3, [r5, #16]
 80126d6:	b9eb      	cbnz	r3, 8012714 <_vfiprintf_r+0x78>
 80126d8:	4629      	mov	r1, r5
 80126da:	4630      	mov	r0, r6
 80126dc:	f000 f96e 	bl	80129bc <__swsetup_r>
 80126e0:	b1c0      	cbz	r0, 8012714 <_vfiprintf_r+0x78>
 80126e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80126e4:	07dc      	lsls	r4, r3, #31
 80126e6:	d50e      	bpl.n	8012706 <_vfiprintf_r+0x6a>
 80126e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80126ec:	b01d      	add	sp, #116	; 0x74
 80126ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126f2:	4b7b      	ldr	r3, [pc, #492]	; (80128e0 <_vfiprintf_r+0x244>)
 80126f4:	429d      	cmp	r5, r3
 80126f6:	d101      	bne.n	80126fc <_vfiprintf_r+0x60>
 80126f8:	68b5      	ldr	r5, [r6, #8]
 80126fa:	e7df      	b.n	80126bc <_vfiprintf_r+0x20>
 80126fc:	4b79      	ldr	r3, [pc, #484]	; (80128e4 <_vfiprintf_r+0x248>)
 80126fe:	429d      	cmp	r5, r3
 8012700:	bf08      	it	eq
 8012702:	68f5      	ldreq	r5, [r6, #12]
 8012704:	e7da      	b.n	80126bc <_vfiprintf_r+0x20>
 8012706:	89ab      	ldrh	r3, [r5, #12]
 8012708:	0598      	lsls	r0, r3, #22
 801270a:	d4ed      	bmi.n	80126e8 <_vfiprintf_r+0x4c>
 801270c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801270e:	f7ff ff89 	bl	8012624 <__retarget_lock_release_recursive>
 8012712:	e7e9      	b.n	80126e8 <_vfiprintf_r+0x4c>
 8012714:	2300      	movs	r3, #0
 8012716:	9309      	str	r3, [sp, #36]	; 0x24
 8012718:	2320      	movs	r3, #32
 801271a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801271e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012722:	2330      	movs	r3, #48	; 0x30
 8012724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80128e8 <_vfiprintf_r+0x24c>
 8012728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801272c:	f04f 0901 	mov.w	r9, #1
 8012730:	4623      	mov	r3, r4
 8012732:	469a      	mov	sl, r3
 8012734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012738:	b10a      	cbz	r2, 801273e <_vfiprintf_r+0xa2>
 801273a:	2a25      	cmp	r2, #37	; 0x25
 801273c:	d1f9      	bne.n	8012732 <_vfiprintf_r+0x96>
 801273e:	ebba 0b04 	subs.w	fp, sl, r4
 8012742:	d00b      	beq.n	801275c <_vfiprintf_r+0xc0>
 8012744:	465b      	mov	r3, fp
 8012746:	4622      	mov	r2, r4
 8012748:	4629      	mov	r1, r5
 801274a:	4630      	mov	r0, r6
 801274c:	f7ff ff94 	bl	8012678 <__sfputs_r>
 8012750:	3001      	adds	r0, #1
 8012752:	f000 80aa 	beq.w	80128aa <_vfiprintf_r+0x20e>
 8012756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012758:	445a      	add	r2, fp
 801275a:	9209      	str	r2, [sp, #36]	; 0x24
 801275c:	f89a 3000 	ldrb.w	r3, [sl]
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 80a2 	beq.w	80128aa <_vfiprintf_r+0x20e>
 8012766:	2300      	movs	r3, #0
 8012768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801276c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012770:	f10a 0a01 	add.w	sl, sl, #1
 8012774:	9304      	str	r3, [sp, #16]
 8012776:	9307      	str	r3, [sp, #28]
 8012778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801277c:	931a      	str	r3, [sp, #104]	; 0x68
 801277e:	4654      	mov	r4, sl
 8012780:	2205      	movs	r2, #5
 8012782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012786:	4858      	ldr	r0, [pc, #352]	; (80128e8 <_vfiprintf_r+0x24c>)
 8012788:	f7ed fd32 	bl	80001f0 <memchr>
 801278c:	9a04      	ldr	r2, [sp, #16]
 801278e:	b9d8      	cbnz	r0, 80127c8 <_vfiprintf_r+0x12c>
 8012790:	06d1      	lsls	r1, r2, #27
 8012792:	bf44      	itt	mi
 8012794:	2320      	movmi	r3, #32
 8012796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801279a:	0713      	lsls	r3, r2, #28
 801279c:	bf44      	itt	mi
 801279e:	232b      	movmi	r3, #43	; 0x2b
 80127a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80127a4:	f89a 3000 	ldrb.w	r3, [sl]
 80127a8:	2b2a      	cmp	r3, #42	; 0x2a
 80127aa:	d015      	beq.n	80127d8 <_vfiprintf_r+0x13c>
 80127ac:	9a07      	ldr	r2, [sp, #28]
 80127ae:	4654      	mov	r4, sl
 80127b0:	2000      	movs	r0, #0
 80127b2:	f04f 0c0a 	mov.w	ip, #10
 80127b6:	4621      	mov	r1, r4
 80127b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127bc:	3b30      	subs	r3, #48	; 0x30
 80127be:	2b09      	cmp	r3, #9
 80127c0:	d94e      	bls.n	8012860 <_vfiprintf_r+0x1c4>
 80127c2:	b1b0      	cbz	r0, 80127f2 <_vfiprintf_r+0x156>
 80127c4:	9207      	str	r2, [sp, #28]
 80127c6:	e014      	b.n	80127f2 <_vfiprintf_r+0x156>
 80127c8:	eba0 0308 	sub.w	r3, r0, r8
 80127cc:	fa09 f303 	lsl.w	r3, r9, r3
 80127d0:	4313      	orrs	r3, r2
 80127d2:	9304      	str	r3, [sp, #16]
 80127d4:	46a2      	mov	sl, r4
 80127d6:	e7d2      	b.n	801277e <_vfiprintf_r+0xe2>
 80127d8:	9b03      	ldr	r3, [sp, #12]
 80127da:	1d19      	adds	r1, r3, #4
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	9103      	str	r1, [sp, #12]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	bfbb      	ittet	lt
 80127e4:	425b      	neglt	r3, r3
 80127e6:	f042 0202 	orrlt.w	r2, r2, #2
 80127ea:	9307      	strge	r3, [sp, #28]
 80127ec:	9307      	strlt	r3, [sp, #28]
 80127ee:	bfb8      	it	lt
 80127f0:	9204      	strlt	r2, [sp, #16]
 80127f2:	7823      	ldrb	r3, [r4, #0]
 80127f4:	2b2e      	cmp	r3, #46	; 0x2e
 80127f6:	d10c      	bne.n	8012812 <_vfiprintf_r+0x176>
 80127f8:	7863      	ldrb	r3, [r4, #1]
 80127fa:	2b2a      	cmp	r3, #42	; 0x2a
 80127fc:	d135      	bne.n	801286a <_vfiprintf_r+0x1ce>
 80127fe:	9b03      	ldr	r3, [sp, #12]
 8012800:	1d1a      	adds	r2, r3, #4
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	9203      	str	r2, [sp, #12]
 8012806:	2b00      	cmp	r3, #0
 8012808:	bfb8      	it	lt
 801280a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801280e:	3402      	adds	r4, #2
 8012810:	9305      	str	r3, [sp, #20]
 8012812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80128f8 <_vfiprintf_r+0x25c>
 8012816:	7821      	ldrb	r1, [r4, #0]
 8012818:	2203      	movs	r2, #3
 801281a:	4650      	mov	r0, sl
 801281c:	f7ed fce8 	bl	80001f0 <memchr>
 8012820:	b140      	cbz	r0, 8012834 <_vfiprintf_r+0x198>
 8012822:	2340      	movs	r3, #64	; 0x40
 8012824:	eba0 000a 	sub.w	r0, r0, sl
 8012828:	fa03 f000 	lsl.w	r0, r3, r0
 801282c:	9b04      	ldr	r3, [sp, #16]
 801282e:	4303      	orrs	r3, r0
 8012830:	3401      	adds	r4, #1
 8012832:	9304      	str	r3, [sp, #16]
 8012834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012838:	482c      	ldr	r0, [pc, #176]	; (80128ec <_vfiprintf_r+0x250>)
 801283a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801283e:	2206      	movs	r2, #6
 8012840:	f7ed fcd6 	bl	80001f0 <memchr>
 8012844:	2800      	cmp	r0, #0
 8012846:	d03f      	beq.n	80128c8 <_vfiprintf_r+0x22c>
 8012848:	4b29      	ldr	r3, [pc, #164]	; (80128f0 <_vfiprintf_r+0x254>)
 801284a:	bb1b      	cbnz	r3, 8012894 <_vfiprintf_r+0x1f8>
 801284c:	9b03      	ldr	r3, [sp, #12]
 801284e:	3307      	adds	r3, #7
 8012850:	f023 0307 	bic.w	r3, r3, #7
 8012854:	3308      	adds	r3, #8
 8012856:	9303      	str	r3, [sp, #12]
 8012858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801285a:	443b      	add	r3, r7
 801285c:	9309      	str	r3, [sp, #36]	; 0x24
 801285e:	e767      	b.n	8012730 <_vfiprintf_r+0x94>
 8012860:	fb0c 3202 	mla	r2, ip, r2, r3
 8012864:	460c      	mov	r4, r1
 8012866:	2001      	movs	r0, #1
 8012868:	e7a5      	b.n	80127b6 <_vfiprintf_r+0x11a>
 801286a:	2300      	movs	r3, #0
 801286c:	3401      	adds	r4, #1
 801286e:	9305      	str	r3, [sp, #20]
 8012870:	4619      	mov	r1, r3
 8012872:	f04f 0c0a 	mov.w	ip, #10
 8012876:	4620      	mov	r0, r4
 8012878:	f810 2b01 	ldrb.w	r2, [r0], #1
 801287c:	3a30      	subs	r2, #48	; 0x30
 801287e:	2a09      	cmp	r2, #9
 8012880:	d903      	bls.n	801288a <_vfiprintf_r+0x1ee>
 8012882:	2b00      	cmp	r3, #0
 8012884:	d0c5      	beq.n	8012812 <_vfiprintf_r+0x176>
 8012886:	9105      	str	r1, [sp, #20]
 8012888:	e7c3      	b.n	8012812 <_vfiprintf_r+0x176>
 801288a:	fb0c 2101 	mla	r1, ip, r1, r2
 801288e:	4604      	mov	r4, r0
 8012890:	2301      	movs	r3, #1
 8012892:	e7f0      	b.n	8012876 <_vfiprintf_r+0x1da>
 8012894:	ab03      	add	r3, sp, #12
 8012896:	9300      	str	r3, [sp, #0]
 8012898:	462a      	mov	r2, r5
 801289a:	4b16      	ldr	r3, [pc, #88]	; (80128f4 <_vfiprintf_r+0x258>)
 801289c:	a904      	add	r1, sp, #16
 801289e:	4630      	mov	r0, r6
 80128a0:	f7fe f88e 	bl	80109c0 <_printf_float>
 80128a4:	4607      	mov	r7, r0
 80128a6:	1c78      	adds	r0, r7, #1
 80128a8:	d1d6      	bne.n	8012858 <_vfiprintf_r+0x1bc>
 80128aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128ac:	07d9      	lsls	r1, r3, #31
 80128ae:	d405      	bmi.n	80128bc <_vfiprintf_r+0x220>
 80128b0:	89ab      	ldrh	r3, [r5, #12]
 80128b2:	059a      	lsls	r2, r3, #22
 80128b4:	d402      	bmi.n	80128bc <_vfiprintf_r+0x220>
 80128b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128b8:	f7ff feb4 	bl	8012624 <__retarget_lock_release_recursive>
 80128bc:	89ab      	ldrh	r3, [r5, #12]
 80128be:	065b      	lsls	r3, r3, #25
 80128c0:	f53f af12 	bmi.w	80126e8 <_vfiprintf_r+0x4c>
 80128c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128c6:	e711      	b.n	80126ec <_vfiprintf_r+0x50>
 80128c8:	ab03      	add	r3, sp, #12
 80128ca:	9300      	str	r3, [sp, #0]
 80128cc:	462a      	mov	r2, r5
 80128ce:	4b09      	ldr	r3, [pc, #36]	; (80128f4 <_vfiprintf_r+0x258>)
 80128d0:	a904      	add	r1, sp, #16
 80128d2:	4630      	mov	r0, r6
 80128d4:	f7fe fb18 	bl	8010f08 <_printf_i>
 80128d8:	e7e4      	b.n	80128a4 <_vfiprintf_r+0x208>
 80128da:	bf00      	nop
 80128dc:	08013d04 	.word	0x08013d04
 80128e0:	08013d24 	.word	0x08013d24
 80128e4:	08013ce4 	.word	0x08013ce4
 80128e8:	08013cd2 	.word	0x08013cd2
 80128ec:	08013cdc 	.word	0x08013cdc
 80128f0:	080109c1 	.word	0x080109c1
 80128f4:	08012679 	.word	0x08012679
 80128f8:	08013cd8 	.word	0x08013cd8

080128fc <__swbuf_r>:
 80128fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128fe:	460e      	mov	r6, r1
 8012900:	4614      	mov	r4, r2
 8012902:	4605      	mov	r5, r0
 8012904:	b118      	cbz	r0, 801290e <__swbuf_r+0x12>
 8012906:	6983      	ldr	r3, [r0, #24]
 8012908:	b90b      	cbnz	r3, 801290e <__swbuf_r+0x12>
 801290a:	f000 f9e7 	bl	8012cdc <__sinit>
 801290e:	4b21      	ldr	r3, [pc, #132]	; (8012994 <__swbuf_r+0x98>)
 8012910:	429c      	cmp	r4, r3
 8012912:	d12b      	bne.n	801296c <__swbuf_r+0x70>
 8012914:	686c      	ldr	r4, [r5, #4]
 8012916:	69a3      	ldr	r3, [r4, #24]
 8012918:	60a3      	str	r3, [r4, #8]
 801291a:	89a3      	ldrh	r3, [r4, #12]
 801291c:	071a      	lsls	r2, r3, #28
 801291e:	d52f      	bpl.n	8012980 <__swbuf_r+0x84>
 8012920:	6923      	ldr	r3, [r4, #16]
 8012922:	b36b      	cbz	r3, 8012980 <__swbuf_r+0x84>
 8012924:	6923      	ldr	r3, [r4, #16]
 8012926:	6820      	ldr	r0, [r4, #0]
 8012928:	1ac0      	subs	r0, r0, r3
 801292a:	6963      	ldr	r3, [r4, #20]
 801292c:	b2f6      	uxtb	r6, r6
 801292e:	4283      	cmp	r3, r0
 8012930:	4637      	mov	r7, r6
 8012932:	dc04      	bgt.n	801293e <__swbuf_r+0x42>
 8012934:	4621      	mov	r1, r4
 8012936:	4628      	mov	r0, r5
 8012938:	f000 f93c 	bl	8012bb4 <_fflush_r>
 801293c:	bb30      	cbnz	r0, 801298c <__swbuf_r+0x90>
 801293e:	68a3      	ldr	r3, [r4, #8]
 8012940:	3b01      	subs	r3, #1
 8012942:	60a3      	str	r3, [r4, #8]
 8012944:	6823      	ldr	r3, [r4, #0]
 8012946:	1c5a      	adds	r2, r3, #1
 8012948:	6022      	str	r2, [r4, #0]
 801294a:	701e      	strb	r6, [r3, #0]
 801294c:	6963      	ldr	r3, [r4, #20]
 801294e:	3001      	adds	r0, #1
 8012950:	4283      	cmp	r3, r0
 8012952:	d004      	beq.n	801295e <__swbuf_r+0x62>
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	07db      	lsls	r3, r3, #31
 8012958:	d506      	bpl.n	8012968 <__swbuf_r+0x6c>
 801295a:	2e0a      	cmp	r6, #10
 801295c:	d104      	bne.n	8012968 <__swbuf_r+0x6c>
 801295e:	4621      	mov	r1, r4
 8012960:	4628      	mov	r0, r5
 8012962:	f000 f927 	bl	8012bb4 <_fflush_r>
 8012966:	b988      	cbnz	r0, 801298c <__swbuf_r+0x90>
 8012968:	4638      	mov	r0, r7
 801296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801296c:	4b0a      	ldr	r3, [pc, #40]	; (8012998 <__swbuf_r+0x9c>)
 801296e:	429c      	cmp	r4, r3
 8012970:	d101      	bne.n	8012976 <__swbuf_r+0x7a>
 8012972:	68ac      	ldr	r4, [r5, #8]
 8012974:	e7cf      	b.n	8012916 <__swbuf_r+0x1a>
 8012976:	4b09      	ldr	r3, [pc, #36]	; (801299c <__swbuf_r+0xa0>)
 8012978:	429c      	cmp	r4, r3
 801297a:	bf08      	it	eq
 801297c:	68ec      	ldreq	r4, [r5, #12]
 801297e:	e7ca      	b.n	8012916 <__swbuf_r+0x1a>
 8012980:	4621      	mov	r1, r4
 8012982:	4628      	mov	r0, r5
 8012984:	f000 f81a 	bl	80129bc <__swsetup_r>
 8012988:	2800      	cmp	r0, #0
 801298a:	d0cb      	beq.n	8012924 <__swbuf_r+0x28>
 801298c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012990:	e7ea      	b.n	8012968 <__swbuf_r+0x6c>
 8012992:	bf00      	nop
 8012994:	08013d04 	.word	0x08013d04
 8012998:	08013d24 	.word	0x08013d24
 801299c:	08013ce4 	.word	0x08013ce4

080129a0 <__ascii_wctomb>:
 80129a0:	b149      	cbz	r1, 80129b6 <__ascii_wctomb+0x16>
 80129a2:	2aff      	cmp	r2, #255	; 0xff
 80129a4:	bf85      	ittet	hi
 80129a6:	238a      	movhi	r3, #138	; 0x8a
 80129a8:	6003      	strhi	r3, [r0, #0]
 80129aa:	700a      	strbls	r2, [r1, #0]
 80129ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80129b0:	bf98      	it	ls
 80129b2:	2001      	movls	r0, #1
 80129b4:	4770      	bx	lr
 80129b6:	4608      	mov	r0, r1
 80129b8:	4770      	bx	lr
	...

080129bc <__swsetup_r>:
 80129bc:	4b32      	ldr	r3, [pc, #200]	; (8012a88 <__swsetup_r+0xcc>)
 80129be:	b570      	push	{r4, r5, r6, lr}
 80129c0:	681d      	ldr	r5, [r3, #0]
 80129c2:	4606      	mov	r6, r0
 80129c4:	460c      	mov	r4, r1
 80129c6:	b125      	cbz	r5, 80129d2 <__swsetup_r+0x16>
 80129c8:	69ab      	ldr	r3, [r5, #24]
 80129ca:	b913      	cbnz	r3, 80129d2 <__swsetup_r+0x16>
 80129cc:	4628      	mov	r0, r5
 80129ce:	f000 f985 	bl	8012cdc <__sinit>
 80129d2:	4b2e      	ldr	r3, [pc, #184]	; (8012a8c <__swsetup_r+0xd0>)
 80129d4:	429c      	cmp	r4, r3
 80129d6:	d10f      	bne.n	80129f8 <__swsetup_r+0x3c>
 80129d8:	686c      	ldr	r4, [r5, #4]
 80129da:	89a3      	ldrh	r3, [r4, #12]
 80129dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129e0:	0719      	lsls	r1, r3, #28
 80129e2:	d42c      	bmi.n	8012a3e <__swsetup_r+0x82>
 80129e4:	06dd      	lsls	r5, r3, #27
 80129e6:	d411      	bmi.n	8012a0c <__swsetup_r+0x50>
 80129e8:	2309      	movs	r3, #9
 80129ea:	6033      	str	r3, [r6, #0]
 80129ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80129f0:	81a3      	strh	r3, [r4, #12]
 80129f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129f6:	e03e      	b.n	8012a76 <__swsetup_r+0xba>
 80129f8:	4b25      	ldr	r3, [pc, #148]	; (8012a90 <__swsetup_r+0xd4>)
 80129fa:	429c      	cmp	r4, r3
 80129fc:	d101      	bne.n	8012a02 <__swsetup_r+0x46>
 80129fe:	68ac      	ldr	r4, [r5, #8]
 8012a00:	e7eb      	b.n	80129da <__swsetup_r+0x1e>
 8012a02:	4b24      	ldr	r3, [pc, #144]	; (8012a94 <__swsetup_r+0xd8>)
 8012a04:	429c      	cmp	r4, r3
 8012a06:	bf08      	it	eq
 8012a08:	68ec      	ldreq	r4, [r5, #12]
 8012a0a:	e7e6      	b.n	80129da <__swsetup_r+0x1e>
 8012a0c:	0758      	lsls	r0, r3, #29
 8012a0e:	d512      	bpl.n	8012a36 <__swsetup_r+0x7a>
 8012a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a12:	b141      	cbz	r1, 8012a26 <__swsetup_r+0x6a>
 8012a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a18:	4299      	cmp	r1, r3
 8012a1a:	d002      	beq.n	8012a22 <__swsetup_r+0x66>
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f7fd fe85 	bl	801072c <_free_r>
 8012a22:	2300      	movs	r3, #0
 8012a24:	6363      	str	r3, [r4, #52]	; 0x34
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a2c:	81a3      	strh	r3, [r4, #12]
 8012a2e:	2300      	movs	r3, #0
 8012a30:	6063      	str	r3, [r4, #4]
 8012a32:	6923      	ldr	r3, [r4, #16]
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	89a3      	ldrh	r3, [r4, #12]
 8012a38:	f043 0308 	orr.w	r3, r3, #8
 8012a3c:	81a3      	strh	r3, [r4, #12]
 8012a3e:	6923      	ldr	r3, [r4, #16]
 8012a40:	b94b      	cbnz	r3, 8012a56 <__swsetup_r+0x9a>
 8012a42:	89a3      	ldrh	r3, [r4, #12]
 8012a44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a4c:	d003      	beq.n	8012a56 <__swsetup_r+0x9a>
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4630      	mov	r0, r6
 8012a52:	f000 fa05 	bl	8012e60 <__smakebuf_r>
 8012a56:	89a0      	ldrh	r0, [r4, #12]
 8012a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a5c:	f010 0301 	ands.w	r3, r0, #1
 8012a60:	d00a      	beq.n	8012a78 <__swsetup_r+0xbc>
 8012a62:	2300      	movs	r3, #0
 8012a64:	60a3      	str	r3, [r4, #8]
 8012a66:	6963      	ldr	r3, [r4, #20]
 8012a68:	425b      	negs	r3, r3
 8012a6a:	61a3      	str	r3, [r4, #24]
 8012a6c:	6923      	ldr	r3, [r4, #16]
 8012a6e:	b943      	cbnz	r3, 8012a82 <__swsetup_r+0xc6>
 8012a70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012a74:	d1ba      	bne.n	80129ec <__swsetup_r+0x30>
 8012a76:	bd70      	pop	{r4, r5, r6, pc}
 8012a78:	0781      	lsls	r1, r0, #30
 8012a7a:	bf58      	it	pl
 8012a7c:	6963      	ldrpl	r3, [r4, #20]
 8012a7e:	60a3      	str	r3, [r4, #8]
 8012a80:	e7f4      	b.n	8012a6c <__swsetup_r+0xb0>
 8012a82:	2000      	movs	r0, #0
 8012a84:	e7f7      	b.n	8012a76 <__swsetup_r+0xba>
 8012a86:	bf00      	nop
 8012a88:	20000104 	.word	0x20000104
 8012a8c:	08013d04 	.word	0x08013d04
 8012a90:	08013d24 	.word	0x08013d24
 8012a94:	08013ce4 	.word	0x08013ce4

08012a98 <abort>:
 8012a98:	b508      	push	{r3, lr}
 8012a9a:	2006      	movs	r0, #6
 8012a9c:	f000 fa48 	bl	8012f30 <raise>
 8012aa0:	2001      	movs	r0, #1
 8012aa2:	f7f1 fbd3 	bl	800424c <_exit>
	...

08012aa8 <__sflush_r>:
 8012aa8:	898a      	ldrh	r2, [r1, #12]
 8012aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aae:	4605      	mov	r5, r0
 8012ab0:	0710      	lsls	r0, r2, #28
 8012ab2:	460c      	mov	r4, r1
 8012ab4:	d458      	bmi.n	8012b68 <__sflush_r+0xc0>
 8012ab6:	684b      	ldr	r3, [r1, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	dc05      	bgt.n	8012ac8 <__sflush_r+0x20>
 8012abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	dc02      	bgt.n	8012ac8 <__sflush_r+0x20>
 8012ac2:	2000      	movs	r0, #0
 8012ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012aca:	2e00      	cmp	r6, #0
 8012acc:	d0f9      	beq.n	8012ac2 <__sflush_r+0x1a>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ad4:	682f      	ldr	r7, [r5, #0]
 8012ad6:	602b      	str	r3, [r5, #0]
 8012ad8:	d032      	beq.n	8012b40 <__sflush_r+0x98>
 8012ada:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012adc:	89a3      	ldrh	r3, [r4, #12]
 8012ade:	075a      	lsls	r2, r3, #29
 8012ae0:	d505      	bpl.n	8012aee <__sflush_r+0x46>
 8012ae2:	6863      	ldr	r3, [r4, #4]
 8012ae4:	1ac0      	subs	r0, r0, r3
 8012ae6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ae8:	b10b      	cbz	r3, 8012aee <__sflush_r+0x46>
 8012aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012aec:	1ac0      	subs	r0, r0, r3
 8012aee:	2300      	movs	r3, #0
 8012af0:	4602      	mov	r2, r0
 8012af2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012af4:	6a21      	ldr	r1, [r4, #32]
 8012af6:	4628      	mov	r0, r5
 8012af8:	47b0      	blx	r6
 8012afa:	1c43      	adds	r3, r0, #1
 8012afc:	89a3      	ldrh	r3, [r4, #12]
 8012afe:	d106      	bne.n	8012b0e <__sflush_r+0x66>
 8012b00:	6829      	ldr	r1, [r5, #0]
 8012b02:	291d      	cmp	r1, #29
 8012b04:	d82c      	bhi.n	8012b60 <__sflush_r+0xb8>
 8012b06:	4a2a      	ldr	r2, [pc, #168]	; (8012bb0 <__sflush_r+0x108>)
 8012b08:	40ca      	lsrs	r2, r1
 8012b0a:	07d6      	lsls	r6, r2, #31
 8012b0c:	d528      	bpl.n	8012b60 <__sflush_r+0xb8>
 8012b0e:	2200      	movs	r2, #0
 8012b10:	6062      	str	r2, [r4, #4]
 8012b12:	04d9      	lsls	r1, r3, #19
 8012b14:	6922      	ldr	r2, [r4, #16]
 8012b16:	6022      	str	r2, [r4, #0]
 8012b18:	d504      	bpl.n	8012b24 <__sflush_r+0x7c>
 8012b1a:	1c42      	adds	r2, r0, #1
 8012b1c:	d101      	bne.n	8012b22 <__sflush_r+0x7a>
 8012b1e:	682b      	ldr	r3, [r5, #0]
 8012b20:	b903      	cbnz	r3, 8012b24 <__sflush_r+0x7c>
 8012b22:	6560      	str	r0, [r4, #84]	; 0x54
 8012b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b26:	602f      	str	r7, [r5, #0]
 8012b28:	2900      	cmp	r1, #0
 8012b2a:	d0ca      	beq.n	8012ac2 <__sflush_r+0x1a>
 8012b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b30:	4299      	cmp	r1, r3
 8012b32:	d002      	beq.n	8012b3a <__sflush_r+0x92>
 8012b34:	4628      	mov	r0, r5
 8012b36:	f7fd fdf9 	bl	801072c <_free_r>
 8012b3a:	2000      	movs	r0, #0
 8012b3c:	6360      	str	r0, [r4, #52]	; 0x34
 8012b3e:	e7c1      	b.n	8012ac4 <__sflush_r+0x1c>
 8012b40:	6a21      	ldr	r1, [r4, #32]
 8012b42:	2301      	movs	r3, #1
 8012b44:	4628      	mov	r0, r5
 8012b46:	47b0      	blx	r6
 8012b48:	1c41      	adds	r1, r0, #1
 8012b4a:	d1c7      	bne.n	8012adc <__sflush_r+0x34>
 8012b4c:	682b      	ldr	r3, [r5, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d0c4      	beq.n	8012adc <__sflush_r+0x34>
 8012b52:	2b1d      	cmp	r3, #29
 8012b54:	d001      	beq.n	8012b5a <__sflush_r+0xb2>
 8012b56:	2b16      	cmp	r3, #22
 8012b58:	d101      	bne.n	8012b5e <__sflush_r+0xb6>
 8012b5a:	602f      	str	r7, [r5, #0]
 8012b5c:	e7b1      	b.n	8012ac2 <__sflush_r+0x1a>
 8012b5e:	89a3      	ldrh	r3, [r4, #12]
 8012b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b64:	81a3      	strh	r3, [r4, #12]
 8012b66:	e7ad      	b.n	8012ac4 <__sflush_r+0x1c>
 8012b68:	690f      	ldr	r7, [r1, #16]
 8012b6a:	2f00      	cmp	r7, #0
 8012b6c:	d0a9      	beq.n	8012ac2 <__sflush_r+0x1a>
 8012b6e:	0793      	lsls	r3, r2, #30
 8012b70:	680e      	ldr	r6, [r1, #0]
 8012b72:	bf08      	it	eq
 8012b74:	694b      	ldreq	r3, [r1, #20]
 8012b76:	600f      	str	r7, [r1, #0]
 8012b78:	bf18      	it	ne
 8012b7a:	2300      	movne	r3, #0
 8012b7c:	eba6 0807 	sub.w	r8, r6, r7
 8012b80:	608b      	str	r3, [r1, #8]
 8012b82:	f1b8 0f00 	cmp.w	r8, #0
 8012b86:	dd9c      	ble.n	8012ac2 <__sflush_r+0x1a>
 8012b88:	6a21      	ldr	r1, [r4, #32]
 8012b8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b8c:	4643      	mov	r3, r8
 8012b8e:	463a      	mov	r2, r7
 8012b90:	4628      	mov	r0, r5
 8012b92:	47b0      	blx	r6
 8012b94:	2800      	cmp	r0, #0
 8012b96:	dc06      	bgt.n	8012ba6 <__sflush_r+0xfe>
 8012b98:	89a3      	ldrh	r3, [r4, #12]
 8012b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b9e:	81a3      	strh	r3, [r4, #12]
 8012ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ba4:	e78e      	b.n	8012ac4 <__sflush_r+0x1c>
 8012ba6:	4407      	add	r7, r0
 8012ba8:	eba8 0800 	sub.w	r8, r8, r0
 8012bac:	e7e9      	b.n	8012b82 <__sflush_r+0xda>
 8012bae:	bf00      	nop
 8012bb0:	20400001 	.word	0x20400001

08012bb4 <_fflush_r>:
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	690b      	ldr	r3, [r1, #16]
 8012bb8:	4605      	mov	r5, r0
 8012bba:	460c      	mov	r4, r1
 8012bbc:	b913      	cbnz	r3, 8012bc4 <_fflush_r+0x10>
 8012bbe:	2500      	movs	r5, #0
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	bd38      	pop	{r3, r4, r5, pc}
 8012bc4:	b118      	cbz	r0, 8012bce <_fflush_r+0x1a>
 8012bc6:	6983      	ldr	r3, [r0, #24]
 8012bc8:	b90b      	cbnz	r3, 8012bce <_fflush_r+0x1a>
 8012bca:	f000 f887 	bl	8012cdc <__sinit>
 8012bce:	4b14      	ldr	r3, [pc, #80]	; (8012c20 <_fflush_r+0x6c>)
 8012bd0:	429c      	cmp	r4, r3
 8012bd2:	d11b      	bne.n	8012c0c <_fflush_r+0x58>
 8012bd4:	686c      	ldr	r4, [r5, #4]
 8012bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d0ef      	beq.n	8012bbe <_fflush_r+0xa>
 8012bde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012be0:	07d0      	lsls	r0, r2, #31
 8012be2:	d404      	bmi.n	8012bee <_fflush_r+0x3a>
 8012be4:	0599      	lsls	r1, r3, #22
 8012be6:	d402      	bmi.n	8012bee <_fflush_r+0x3a>
 8012be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bea:	f7ff fd1a 	bl	8012622 <__retarget_lock_acquire_recursive>
 8012bee:	4628      	mov	r0, r5
 8012bf0:	4621      	mov	r1, r4
 8012bf2:	f7ff ff59 	bl	8012aa8 <__sflush_r>
 8012bf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bf8:	07da      	lsls	r2, r3, #31
 8012bfa:	4605      	mov	r5, r0
 8012bfc:	d4e0      	bmi.n	8012bc0 <_fflush_r+0xc>
 8012bfe:	89a3      	ldrh	r3, [r4, #12]
 8012c00:	059b      	lsls	r3, r3, #22
 8012c02:	d4dd      	bmi.n	8012bc0 <_fflush_r+0xc>
 8012c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c06:	f7ff fd0d 	bl	8012624 <__retarget_lock_release_recursive>
 8012c0a:	e7d9      	b.n	8012bc0 <_fflush_r+0xc>
 8012c0c:	4b05      	ldr	r3, [pc, #20]	; (8012c24 <_fflush_r+0x70>)
 8012c0e:	429c      	cmp	r4, r3
 8012c10:	d101      	bne.n	8012c16 <_fflush_r+0x62>
 8012c12:	68ac      	ldr	r4, [r5, #8]
 8012c14:	e7df      	b.n	8012bd6 <_fflush_r+0x22>
 8012c16:	4b04      	ldr	r3, [pc, #16]	; (8012c28 <_fflush_r+0x74>)
 8012c18:	429c      	cmp	r4, r3
 8012c1a:	bf08      	it	eq
 8012c1c:	68ec      	ldreq	r4, [r5, #12]
 8012c1e:	e7da      	b.n	8012bd6 <_fflush_r+0x22>
 8012c20:	08013d04 	.word	0x08013d04
 8012c24:	08013d24 	.word	0x08013d24
 8012c28:	08013ce4 	.word	0x08013ce4

08012c2c <std>:
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	b510      	push	{r4, lr}
 8012c30:	4604      	mov	r4, r0
 8012c32:	e9c0 3300 	strd	r3, r3, [r0]
 8012c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012c3a:	6083      	str	r3, [r0, #8]
 8012c3c:	8181      	strh	r1, [r0, #12]
 8012c3e:	6643      	str	r3, [r0, #100]	; 0x64
 8012c40:	81c2      	strh	r2, [r0, #14]
 8012c42:	6183      	str	r3, [r0, #24]
 8012c44:	4619      	mov	r1, r3
 8012c46:	2208      	movs	r2, #8
 8012c48:	305c      	adds	r0, #92	; 0x5c
 8012c4a:	f7fd fd67 	bl	801071c <memset>
 8012c4e:	4b05      	ldr	r3, [pc, #20]	; (8012c64 <std+0x38>)
 8012c50:	6263      	str	r3, [r4, #36]	; 0x24
 8012c52:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <std+0x3c>)
 8012c54:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c56:	4b05      	ldr	r3, [pc, #20]	; (8012c6c <std+0x40>)
 8012c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c5a:	4b05      	ldr	r3, [pc, #20]	; (8012c70 <std+0x44>)
 8012c5c:	6224      	str	r4, [r4, #32]
 8012c5e:	6323      	str	r3, [r4, #48]	; 0x30
 8012c60:	bd10      	pop	{r4, pc}
 8012c62:	bf00      	nop
 8012c64:	08012f69 	.word	0x08012f69
 8012c68:	08012f8b 	.word	0x08012f8b
 8012c6c:	08012fc3 	.word	0x08012fc3
 8012c70:	08012fe7 	.word	0x08012fe7

08012c74 <_cleanup_r>:
 8012c74:	4901      	ldr	r1, [pc, #4]	; (8012c7c <_cleanup_r+0x8>)
 8012c76:	f000 b8af 	b.w	8012dd8 <_fwalk_reent>
 8012c7a:	bf00      	nop
 8012c7c:	08012bb5 	.word	0x08012bb5

08012c80 <__sfmoreglue>:
 8012c80:	b570      	push	{r4, r5, r6, lr}
 8012c82:	1e4a      	subs	r2, r1, #1
 8012c84:	2568      	movs	r5, #104	; 0x68
 8012c86:	4355      	muls	r5, r2
 8012c88:	460e      	mov	r6, r1
 8012c8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c8e:	f7fd fd9d 	bl	80107cc <_malloc_r>
 8012c92:	4604      	mov	r4, r0
 8012c94:	b140      	cbz	r0, 8012ca8 <__sfmoreglue+0x28>
 8012c96:	2100      	movs	r1, #0
 8012c98:	e9c0 1600 	strd	r1, r6, [r0]
 8012c9c:	300c      	adds	r0, #12
 8012c9e:	60a0      	str	r0, [r4, #8]
 8012ca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ca4:	f7fd fd3a 	bl	801071c <memset>
 8012ca8:	4620      	mov	r0, r4
 8012caa:	bd70      	pop	{r4, r5, r6, pc}

08012cac <__sfp_lock_acquire>:
 8012cac:	4801      	ldr	r0, [pc, #4]	; (8012cb4 <__sfp_lock_acquire+0x8>)
 8012cae:	f7ff bcb8 	b.w	8012622 <__retarget_lock_acquire_recursive>
 8012cb2:	bf00      	nop
 8012cb4:	2000162c 	.word	0x2000162c

08012cb8 <__sfp_lock_release>:
 8012cb8:	4801      	ldr	r0, [pc, #4]	; (8012cc0 <__sfp_lock_release+0x8>)
 8012cba:	f7ff bcb3 	b.w	8012624 <__retarget_lock_release_recursive>
 8012cbe:	bf00      	nop
 8012cc0:	2000162c 	.word	0x2000162c

08012cc4 <__sinit_lock_acquire>:
 8012cc4:	4801      	ldr	r0, [pc, #4]	; (8012ccc <__sinit_lock_acquire+0x8>)
 8012cc6:	f7ff bcac 	b.w	8012622 <__retarget_lock_acquire_recursive>
 8012cca:	bf00      	nop
 8012ccc:	20001627 	.word	0x20001627

08012cd0 <__sinit_lock_release>:
 8012cd0:	4801      	ldr	r0, [pc, #4]	; (8012cd8 <__sinit_lock_release+0x8>)
 8012cd2:	f7ff bca7 	b.w	8012624 <__retarget_lock_release_recursive>
 8012cd6:	bf00      	nop
 8012cd8:	20001627 	.word	0x20001627

08012cdc <__sinit>:
 8012cdc:	b510      	push	{r4, lr}
 8012cde:	4604      	mov	r4, r0
 8012ce0:	f7ff fff0 	bl	8012cc4 <__sinit_lock_acquire>
 8012ce4:	69a3      	ldr	r3, [r4, #24]
 8012ce6:	b11b      	cbz	r3, 8012cf0 <__sinit+0x14>
 8012ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cec:	f7ff bff0 	b.w	8012cd0 <__sinit_lock_release>
 8012cf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012cf4:	6523      	str	r3, [r4, #80]	; 0x50
 8012cf6:	4b13      	ldr	r3, [pc, #76]	; (8012d44 <__sinit+0x68>)
 8012cf8:	4a13      	ldr	r2, [pc, #76]	; (8012d48 <__sinit+0x6c>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8012cfe:	42a3      	cmp	r3, r4
 8012d00:	bf04      	itt	eq
 8012d02:	2301      	moveq	r3, #1
 8012d04:	61a3      	streq	r3, [r4, #24]
 8012d06:	4620      	mov	r0, r4
 8012d08:	f000 f820 	bl	8012d4c <__sfp>
 8012d0c:	6060      	str	r0, [r4, #4]
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f000 f81c 	bl	8012d4c <__sfp>
 8012d14:	60a0      	str	r0, [r4, #8]
 8012d16:	4620      	mov	r0, r4
 8012d18:	f000 f818 	bl	8012d4c <__sfp>
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	60e0      	str	r0, [r4, #12]
 8012d20:	2104      	movs	r1, #4
 8012d22:	6860      	ldr	r0, [r4, #4]
 8012d24:	f7ff ff82 	bl	8012c2c <std>
 8012d28:	68a0      	ldr	r0, [r4, #8]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	2109      	movs	r1, #9
 8012d2e:	f7ff ff7d 	bl	8012c2c <std>
 8012d32:	68e0      	ldr	r0, [r4, #12]
 8012d34:	2202      	movs	r2, #2
 8012d36:	2112      	movs	r1, #18
 8012d38:	f7ff ff78 	bl	8012c2c <std>
 8012d3c:	2301      	movs	r3, #1
 8012d3e:	61a3      	str	r3, [r4, #24]
 8012d40:	e7d2      	b.n	8012ce8 <__sinit+0xc>
 8012d42:	bf00      	nop
 8012d44:	08013a64 	.word	0x08013a64
 8012d48:	08012c75 	.word	0x08012c75

08012d4c <__sfp>:
 8012d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d4e:	4607      	mov	r7, r0
 8012d50:	f7ff ffac 	bl	8012cac <__sfp_lock_acquire>
 8012d54:	4b1e      	ldr	r3, [pc, #120]	; (8012dd0 <__sfp+0x84>)
 8012d56:	681e      	ldr	r6, [r3, #0]
 8012d58:	69b3      	ldr	r3, [r6, #24]
 8012d5a:	b913      	cbnz	r3, 8012d62 <__sfp+0x16>
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	f7ff ffbd 	bl	8012cdc <__sinit>
 8012d62:	3648      	adds	r6, #72	; 0x48
 8012d64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012d68:	3b01      	subs	r3, #1
 8012d6a:	d503      	bpl.n	8012d74 <__sfp+0x28>
 8012d6c:	6833      	ldr	r3, [r6, #0]
 8012d6e:	b30b      	cbz	r3, 8012db4 <__sfp+0x68>
 8012d70:	6836      	ldr	r6, [r6, #0]
 8012d72:	e7f7      	b.n	8012d64 <__sfp+0x18>
 8012d74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012d78:	b9d5      	cbnz	r5, 8012db0 <__sfp+0x64>
 8012d7a:	4b16      	ldr	r3, [pc, #88]	; (8012dd4 <__sfp+0x88>)
 8012d7c:	60e3      	str	r3, [r4, #12]
 8012d7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012d82:	6665      	str	r5, [r4, #100]	; 0x64
 8012d84:	f7ff fc4c 	bl	8012620 <__retarget_lock_init_recursive>
 8012d88:	f7ff ff96 	bl	8012cb8 <__sfp_lock_release>
 8012d8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012d90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012d94:	6025      	str	r5, [r4, #0]
 8012d96:	61a5      	str	r5, [r4, #24]
 8012d98:	2208      	movs	r2, #8
 8012d9a:	4629      	mov	r1, r5
 8012d9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012da0:	f7fd fcbc 	bl	801071c <memset>
 8012da4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012da8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012dac:	4620      	mov	r0, r4
 8012dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012db0:	3468      	adds	r4, #104	; 0x68
 8012db2:	e7d9      	b.n	8012d68 <__sfp+0x1c>
 8012db4:	2104      	movs	r1, #4
 8012db6:	4638      	mov	r0, r7
 8012db8:	f7ff ff62 	bl	8012c80 <__sfmoreglue>
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	6030      	str	r0, [r6, #0]
 8012dc0:	2800      	cmp	r0, #0
 8012dc2:	d1d5      	bne.n	8012d70 <__sfp+0x24>
 8012dc4:	f7ff ff78 	bl	8012cb8 <__sfp_lock_release>
 8012dc8:	230c      	movs	r3, #12
 8012dca:	603b      	str	r3, [r7, #0]
 8012dcc:	e7ee      	b.n	8012dac <__sfp+0x60>
 8012dce:	bf00      	nop
 8012dd0:	08013a64 	.word	0x08013a64
 8012dd4:	ffff0001 	.word	0xffff0001

08012dd8 <_fwalk_reent>:
 8012dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ddc:	4606      	mov	r6, r0
 8012dde:	4688      	mov	r8, r1
 8012de0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012de4:	2700      	movs	r7, #0
 8012de6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012dea:	f1b9 0901 	subs.w	r9, r9, #1
 8012dee:	d505      	bpl.n	8012dfc <_fwalk_reent+0x24>
 8012df0:	6824      	ldr	r4, [r4, #0]
 8012df2:	2c00      	cmp	r4, #0
 8012df4:	d1f7      	bne.n	8012de6 <_fwalk_reent+0xe>
 8012df6:	4638      	mov	r0, r7
 8012df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012dfc:	89ab      	ldrh	r3, [r5, #12]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d907      	bls.n	8012e12 <_fwalk_reent+0x3a>
 8012e02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012e06:	3301      	adds	r3, #1
 8012e08:	d003      	beq.n	8012e12 <_fwalk_reent+0x3a>
 8012e0a:	4629      	mov	r1, r5
 8012e0c:	4630      	mov	r0, r6
 8012e0e:	47c0      	blx	r8
 8012e10:	4307      	orrs	r7, r0
 8012e12:	3568      	adds	r5, #104	; 0x68
 8012e14:	e7e9      	b.n	8012dea <_fwalk_reent+0x12>

08012e16 <__swhatbuf_r>:
 8012e16:	b570      	push	{r4, r5, r6, lr}
 8012e18:	460e      	mov	r6, r1
 8012e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e1e:	2900      	cmp	r1, #0
 8012e20:	b096      	sub	sp, #88	; 0x58
 8012e22:	4614      	mov	r4, r2
 8012e24:	461d      	mov	r5, r3
 8012e26:	da07      	bge.n	8012e38 <__swhatbuf_r+0x22>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	602b      	str	r3, [r5, #0]
 8012e2c:	89b3      	ldrh	r3, [r6, #12]
 8012e2e:	061a      	lsls	r2, r3, #24
 8012e30:	d410      	bmi.n	8012e54 <__swhatbuf_r+0x3e>
 8012e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e36:	e00e      	b.n	8012e56 <__swhatbuf_r+0x40>
 8012e38:	466a      	mov	r2, sp
 8012e3a:	f000 f8fb 	bl	8013034 <_fstat_r>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	dbf2      	blt.n	8012e28 <__swhatbuf_r+0x12>
 8012e42:	9a01      	ldr	r2, [sp, #4]
 8012e44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012e48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012e4c:	425a      	negs	r2, r3
 8012e4e:	415a      	adcs	r2, r3
 8012e50:	602a      	str	r2, [r5, #0]
 8012e52:	e7ee      	b.n	8012e32 <__swhatbuf_r+0x1c>
 8012e54:	2340      	movs	r3, #64	; 0x40
 8012e56:	2000      	movs	r0, #0
 8012e58:	6023      	str	r3, [r4, #0]
 8012e5a:	b016      	add	sp, #88	; 0x58
 8012e5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012e60 <__smakebuf_r>:
 8012e60:	898b      	ldrh	r3, [r1, #12]
 8012e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012e64:	079d      	lsls	r5, r3, #30
 8012e66:	4606      	mov	r6, r0
 8012e68:	460c      	mov	r4, r1
 8012e6a:	d507      	bpl.n	8012e7c <__smakebuf_r+0x1c>
 8012e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012e70:	6023      	str	r3, [r4, #0]
 8012e72:	6123      	str	r3, [r4, #16]
 8012e74:	2301      	movs	r3, #1
 8012e76:	6163      	str	r3, [r4, #20]
 8012e78:	b002      	add	sp, #8
 8012e7a:	bd70      	pop	{r4, r5, r6, pc}
 8012e7c:	ab01      	add	r3, sp, #4
 8012e7e:	466a      	mov	r2, sp
 8012e80:	f7ff ffc9 	bl	8012e16 <__swhatbuf_r>
 8012e84:	9900      	ldr	r1, [sp, #0]
 8012e86:	4605      	mov	r5, r0
 8012e88:	4630      	mov	r0, r6
 8012e8a:	f7fd fc9f 	bl	80107cc <_malloc_r>
 8012e8e:	b948      	cbnz	r0, 8012ea4 <__smakebuf_r+0x44>
 8012e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e94:	059a      	lsls	r2, r3, #22
 8012e96:	d4ef      	bmi.n	8012e78 <__smakebuf_r+0x18>
 8012e98:	f023 0303 	bic.w	r3, r3, #3
 8012e9c:	f043 0302 	orr.w	r3, r3, #2
 8012ea0:	81a3      	strh	r3, [r4, #12]
 8012ea2:	e7e3      	b.n	8012e6c <__smakebuf_r+0xc>
 8012ea4:	4b0d      	ldr	r3, [pc, #52]	; (8012edc <__smakebuf_r+0x7c>)
 8012ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	6020      	str	r0, [r4, #0]
 8012eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eb0:	81a3      	strh	r3, [r4, #12]
 8012eb2:	9b00      	ldr	r3, [sp, #0]
 8012eb4:	6163      	str	r3, [r4, #20]
 8012eb6:	9b01      	ldr	r3, [sp, #4]
 8012eb8:	6120      	str	r0, [r4, #16]
 8012eba:	b15b      	cbz	r3, 8012ed4 <__smakebuf_r+0x74>
 8012ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ec0:	4630      	mov	r0, r6
 8012ec2:	f000 f8c9 	bl	8013058 <_isatty_r>
 8012ec6:	b128      	cbz	r0, 8012ed4 <__smakebuf_r+0x74>
 8012ec8:	89a3      	ldrh	r3, [r4, #12]
 8012eca:	f023 0303 	bic.w	r3, r3, #3
 8012ece:	f043 0301 	orr.w	r3, r3, #1
 8012ed2:	81a3      	strh	r3, [r4, #12]
 8012ed4:	89a0      	ldrh	r0, [r4, #12]
 8012ed6:	4305      	orrs	r5, r0
 8012ed8:	81a5      	strh	r5, [r4, #12]
 8012eda:	e7cd      	b.n	8012e78 <__smakebuf_r+0x18>
 8012edc:	08012c75 	.word	0x08012c75

08012ee0 <_raise_r>:
 8012ee0:	291f      	cmp	r1, #31
 8012ee2:	b538      	push	{r3, r4, r5, lr}
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	460d      	mov	r5, r1
 8012ee8:	d904      	bls.n	8012ef4 <_raise_r+0x14>
 8012eea:	2316      	movs	r3, #22
 8012eec:	6003      	str	r3, [r0, #0]
 8012eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ef2:	bd38      	pop	{r3, r4, r5, pc}
 8012ef4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012ef6:	b112      	cbz	r2, 8012efe <_raise_r+0x1e>
 8012ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012efc:	b94b      	cbnz	r3, 8012f12 <_raise_r+0x32>
 8012efe:	4620      	mov	r0, r4
 8012f00:	f000 f830 	bl	8012f64 <_getpid_r>
 8012f04:	462a      	mov	r2, r5
 8012f06:	4601      	mov	r1, r0
 8012f08:	4620      	mov	r0, r4
 8012f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f0e:	f000 b817 	b.w	8012f40 <_kill_r>
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d00a      	beq.n	8012f2c <_raise_r+0x4c>
 8012f16:	1c59      	adds	r1, r3, #1
 8012f18:	d103      	bne.n	8012f22 <_raise_r+0x42>
 8012f1a:	2316      	movs	r3, #22
 8012f1c:	6003      	str	r3, [r0, #0]
 8012f1e:	2001      	movs	r0, #1
 8012f20:	e7e7      	b.n	8012ef2 <_raise_r+0x12>
 8012f22:	2400      	movs	r4, #0
 8012f24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012f28:	4628      	mov	r0, r5
 8012f2a:	4798      	blx	r3
 8012f2c:	2000      	movs	r0, #0
 8012f2e:	e7e0      	b.n	8012ef2 <_raise_r+0x12>

08012f30 <raise>:
 8012f30:	4b02      	ldr	r3, [pc, #8]	; (8012f3c <raise+0xc>)
 8012f32:	4601      	mov	r1, r0
 8012f34:	6818      	ldr	r0, [r3, #0]
 8012f36:	f7ff bfd3 	b.w	8012ee0 <_raise_r>
 8012f3a:	bf00      	nop
 8012f3c:	20000104 	.word	0x20000104

08012f40 <_kill_r>:
 8012f40:	b538      	push	{r3, r4, r5, lr}
 8012f42:	4d07      	ldr	r5, [pc, #28]	; (8012f60 <_kill_r+0x20>)
 8012f44:	2300      	movs	r3, #0
 8012f46:	4604      	mov	r4, r0
 8012f48:	4608      	mov	r0, r1
 8012f4a:	4611      	mov	r1, r2
 8012f4c:	602b      	str	r3, [r5, #0]
 8012f4e:	f7f1 f96d 	bl	800422c <_kill>
 8012f52:	1c43      	adds	r3, r0, #1
 8012f54:	d102      	bne.n	8012f5c <_kill_r+0x1c>
 8012f56:	682b      	ldr	r3, [r5, #0]
 8012f58:	b103      	cbz	r3, 8012f5c <_kill_r+0x1c>
 8012f5a:	6023      	str	r3, [r4, #0]
 8012f5c:	bd38      	pop	{r3, r4, r5, pc}
 8012f5e:	bf00      	nop
 8012f60:	20001620 	.word	0x20001620

08012f64 <_getpid_r>:
 8012f64:	f7f1 b95a 	b.w	800421c <_getpid>

08012f68 <__sread>:
 8012f68:	b510      	push	{r4, lr}
 8012f6a:	460c      	mov	r4, r1
 8012f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f70:	f000 f894 	bl	801309c <_read_r>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	bfab      	itete	ge
 8012f78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8012f7c:	181b      	addge	r3, r3, r0
 8012f7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f82:	bfac      	ite	ge
 8012f84:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f86:	81a3      	strhlt	r3, [r4, #12]
 8012f88:	bd10      	pop	{r4, pc}

08012f8a <__swrite>:
 8012f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f8e:	461f      	mov	r7, r3
 8012f90:	898b      	ldrh	r3, [r1, #12]
 8012f92:	05db      	lsls	r3, r3, #23
 8012f94:	4605      	mov	r5, r0
 8012f96:	460c      	mov	r4, r1
 8012f98:	4616      	mov	r6, r2
 8012f9a:	d505      	bpl.n	8012fa8 <__swrite+0x1e>
 8012f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fa0:	2302      	movs	r3, #2
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f000 f868 	bl	8013078 <_lseek_r>
 8012fa8:	89a3      	ldrh	r3, [r4, #12]
 8012faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fb2:	81a3      	strh	r3, [r4, #12]
 8012fb4:	4632      	mov	r2, r6
 8012fb6:	463b      	mov	r3, r7
 8012fb8:	4628      	mov	r0, r5
 8012fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbe:	f000 b817 	b.w	8012ff0 <_write_r>

08012fc2 <__sseek>:
 8012fc2:	b510      	push	{r4, lr}
 8012fc4:	460c      	mov	r4, r1
 8012fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fca:	f000 f855 	bl	8013078 <_lseek_r>
 8012fce:	1c43      	adds	r3, r0, #1
 8012fd0:	89a3      	ldrh	r3, [r4, #12]
 8012fd2:	bf15      	itete	ne
 8012fd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fde:	81a3      	strheq	r3, [r4, #12]
 8012fe0:	bf18      	it	ne
 8012fe2:	81a3      	strhne	r3, [r4, #12]
 8012fe4:	bd10      	pop	{r4, pc}

08012fe6 <__sclose>:
 8012fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fea:	f000 b813 	b.w	8013014 <_close_r>
	...

08012ff0 <_write_r>:
 8012ff0:	b538      	push	{r3, r4, r5, lr}
 8012ff2:	4d07      	ldr	r5, [pc, #28]	; (8013010 <_write_r+0x20>)
 8012ff4:	4604      	mov	r4, r0
 8012ff6:	4608      	mov	r0, r1
 8012ff8:	4611      	mov	r1, r2
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	602a      	str	r2, [r5, #0]
 8012ffe:	461a      	mov	r2, r3
 8013000:	f7f1 f94b 	bl	800429a <_write>
 8013004:	1c43      	adds	r3, r0, #1
 8013006:	d102      	bne.n	801300e <_write_r+0x1e>
 8013008:	682b      	ldr	r3, [r5, #0]
 801300a:	b103      	cbz	r3, 801300e <_write_r+0x1e>
 801300c:	6023      	str	r3, [r4, #0]
 801300e:	bd38      	pop	{r3, r4, r5, pc}
 8013010:	20001620 	.word	0x20001620

08013014 <_close_r>:
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	4d06      	ldr	r5, [pc, #24]	; (8013030 <_close_r+0x1c>)
 8013018:	2300      	movs	r3, #0
 801301a:	4604      	mov	r4, r0
 801301c:	4608      	mov	r0, r1
 801301e:	602b      	str	r3, [r5, #0]
 8013020:	f7f1 f957 	bl	80042d2 <_close>
 8013024:	1c43      	adds	r3, r0, #1
 8013026:	d102      	bne.n	801302e <_close_r+0x1a>
 8013028:	682b      	ldr	r3, [r5, #0]
 801302a:	b103      	cbz	r3, 801302e <_close_r+0x1a>
 801302c:	6023      	str	r3, [r4, #0]
 801302e:	bd38      	pop	{r3, r4, r5, pc}
 8013030:	20001620 	.word	0x20001620

08013034 <_fstat_r>:
 8013034:	b538      	push	{r3, r4, r5, lr}
 8013036:	4d07      	ldr	r5, [pc, #28]	; (8013054 <_fstat_r+0x20>)
 8013038:	2300      	movs	r3, #0
 801303a:	4604      	mov	r4, r0
 801303c:	4608      	mov	r0, r1
 801303e:	4611      	mov	r1, r2
 8013040:	602b      	str	r3, [r5, #0]
 8013042:	f7f1 f952 	bl	80042ea <_fstat>
 8013046:	1c43      	adds	r3, r0, #1
 8013048:	d102      	bne.n	8013050 <_fstat_r+0x1c>
 801304a:	682b      	ldr	r3, [r5, #0]
 801304c:	b103      	cbz	r3, 8013050 <_fstat_r+0x1c>
 801304e:	6023      	str	r3, [r4, #0]
 8013050:	bd38      	pop	{r3, r4, r5, pc}
 8013052:	bf00      	nop
 8013054:	20001620 	.word	0x20001620

08013058 <_isatty_r>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4d06      	ldr	r5, [pc, #24]	; (8013074 <_isatty_r+0x1c>)
 801305c:	2300      	movs	r3, #0
 801305e:	4604      	mov	r4, r0
 8013060:	4608      	mov	r0, r1
 8013062:	602b      	str	r3, [r5, #0]
 8013064:	f7f1 f951 	bl	800430a <_isatty>
 8013068:	1c43      	adds	r3, r0, #1
 801306a:	d102      	bne.n	8013072 <_isatty_r+0x1a>
 801306c:	682b      	ldr	r3, [r5, #0]
 801306e:	b103      	cbz	r3, 8013072 <_isatty_r+0x1a>
 8013070:	6023      	str	r3, [r4, #0]
 8013072:	bd38      	pop	{r3, r4, r5, pc}
 8013074:	20001620 	.word	0x20001620

08013078 <_lseek_r>:
 8013078:	b538      	push	{r3, r4, r5, lr}
 801307a:	4d07      	ldr	r5, [pc, #28]	; (8013098 <_lseek_r+0x20>)
 801307c:	4604      	mov	r4, r0
 801307e:	4608      	mov	r0, r1
 8013080:	4611      	mov	r1, r2
 8013082:	2200      	movs	r2, #0
 8013084:	602a      	str	r2, [r5, #0]
 8013086:	461a      	mov	r2, r3
 8013088:	f7f1 f94a 	bl	8004320 <_lseek>
 801308c:	1c43      	adds	r3, r0, #1
 801308e:	d102      	bne.n	8013096 <_lseek_r+0x1e>
 8013090:	682b      	ldr	r3, [r5, #0]
 8013092:	b103      	cbz	r3, 8013096 <_lseek_r+0x1e>
 8013094:	6023      	str	r3, [r4, #0]
 8013096:	bd38      	pop	{r3, r4, r5, pc}
 8013098:	20001620 	.word	0x20001620

0801309c <_read_r>:
 801309c:	b538      	push	{r3, r4, r5, lr}
 801309e:	4d07      	ldr	r5, [pc, #28]	; (80130bc <_read_r+0x20>)
 80130a0:	4604      	mov	r4, r0
 80130a2:	4608      	mov	r0, r1
 80130a4:	4611      	mov	r1, r2
 80130a6:	2200      	movs	r2, #0
 80130a8:	602a      	str	r2, [r5, #0]
 80130aa:	461a      	mov	r2, r3
 80130ac:	f7f1 f8d8 	bl	8004260 <_read>
 80130b0:	1c43      	adds	r3, r0, #1
 80130b2:	d102      	bne.n	80130ba <_read_r+0x1e>
 80130b4:	682b      	ldr	r3, [r5, #0]
 80130b6:	b103      	cbz	r3, 80130ba <_read_r+0x1e>
 80130b8:	6023      	str	r3, [r4, #0]
 80130ba:	bd38      	pop	{r3, r4, r5, pc}
 80130bc:	20001620 	.word	0x20001620

080130c0 <_init>:
 80130c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c2:	bf00      	nop
 80130c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130c6:	bc08      	pop	{r3}
 80130c8:	469e      	mov	lr, r3
 80130ca:	4770      	bx	lr

080130cc <_fini>:
 80130cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ce:	bf00      	nop
 80130d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130d2:	bc08      	pop	{r3}
 80130d4:	469e      	mov	lr, r3
 80130d6:	4770      	bx	lr
