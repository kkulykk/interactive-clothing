
project_version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800a644  0800a644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a86c  0800a86c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a874  0800a874  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f68  20000090  0800a90c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ff8  0800a90c  00020ff8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f602  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004360  00000000  00000000  0003f6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00043a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  00044fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a71f  00000000  00000000  000463e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f44e  00000000  00000000  00060b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e2c  00000000  00000000  0007ff55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115d81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca8  00000000  00000000  00115dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a62c 	.word	0x0800a62c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a62c 	.word	0x0800a62c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_DMA_Init+0x3c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a0b      	ldr	r2, [pc, #44]	; (800050c <MX_DMA_Init+0x3c>)
 80004e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_DMA_Init+0x3c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2039      	movs	r0, #57	; 0x39
 80004f8:	f000 ff3e 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80004fc:	2039      	movs	r0, #57	; 0x39
 80004fe:	f000 ff67 	bl	80013d0 <HAL_NVIC_EnableIRQ>

}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800

08000510 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	61bb      	str	r3, [r7, #24]
 800052a:	4b82      	ldr	r3, [pc, #520]	; (8000734 <MX_GPIO_Init+0x224>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a81      	ldr	r2, [pc, #516]	; (8000734 <MX_GPIO_Init+0x224>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b7f      	ldr	r3, [pc, #508]	; (8000734 <MX_GPIO_Init+0x224>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0310 	and.w	r3, r3, #16
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	4b7b      	ldr	r3, [pc, #492]	; (8000734 <MX_GPIO_Init+0x224>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a7a      	ldr	r2, [pc, #488]	; (8000734 <MX_GPIO_Init+0x224>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b78      	ldr	r3, [pc, #480]	; (8000734 <MX_GPIO_Init+0x224>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	4b74      	ldr	r3, [pc, #464]	; (8000734 <MX_GPIO_Init+0x224>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a73      	ldr	r2, [pc, #460]	; (8000734 <MX_GPIO_Init+0x224>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b71      	ldr	r3, [pc, #452]	; (8000734 <MX_GPIO_Init+0x224>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	4b6d      	ldr	r3, [pc, #436]	; (8000734 <MX_GPIO_Init+0x224>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a6c      	ldr	r2, [pc, #432]	; (8000734 <MX_GPIO_Init+0x224>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b6a      	ldr	r3, [pc, #424]	; (8000734 <MX_GPIO_Init+0x224>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	4b66      	ldr	r3, [pc, #408]	; (8000734 <MX_GPIO_Init+0x224>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a65      	ldr	r2, [pc, #404]	; (8000734 <MX_GPIO_Init+0x224>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b63      	ldr	r3, [pc, #396]	; (8000734 <MX_GPIO_Init+0x224>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b5f      	ldr	r3, [pc, #380]	; (8000734 <MX_GPIO_Init+0x224>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a5e      	ldr	r2, [pc, #376]	; (8000734 <MX_GPIO_Init+0x224>)
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b5c      	ldr	r3, [pc, #368]	; (8000734 <MX_GPIO_Init+0x224>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0308 	and.w	r3, r3, #8
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2108      	movs	r1, #8
 80005d2:	4859      	ldr	r0, [pc, #356]	; (8000738 <MX_GPIO_Init+0x228>)
 80005d4:	f001 feca 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	4857      	ldr	r0, [pc, #348]	; (800073c <MX_GPIO_Init+0x22c>)
 80005de:	f001 fec5 	bl	800236c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005e2:	2200      	movs	r2, #0
 80005e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005e8:	4855      	ldr	r0, [pc, #340]	; (8000740 <MX_GPIO_Init+0x230>)
 80005ea:	f001 febf 	bl	800236c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005ee:	2304      	movs	r3, #4
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	484d      	ldr	r0, [pc, #308]	; (8000738 <MX_GPIO_Init+0x228>)
 8000602:	f001 fc17 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000606:	2308      	movs	r3, #8
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	4619      	mov	r1, r3
 800061c:	4846      	ldr	r0, [pc, #280]	; (8000738 <MX_GPIO_Init+0x228>)
 800061e:	f001 fc09 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000622:	2332      	movs	r3, #50	; 0x32
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000626:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800062a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4840      	ldr	r0, [pc, #256]	; (8000738 <MX_GPIO_Init+0x228>)
 8000638:	f001 fbfc 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800063c:	2301      	movs	r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	4619      	mov	r1, r3
 8000652:	483a      	ldr	r0, [pc, #232]	; (800073c <MX_GPIO_Init+0x22c>)
 8000654:	f001 fbee 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000658:	2308      	movs	r3, #8
 800065a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000668:	2305      	movs	r3, #5
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4832      	ldr	r0, [pc, #200]	; (800073c <MX_GPIO_Init+0x22c>)
 8000674:	f001 fbde 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	482d      	ldr	r0, [pc, #180]	; (8000744 <MX_GPIO_Init+0x234>)
 800068e:	f001 fbd1 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000692:	2310      	movs	r3, #16
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006a2:	2306      	movs	r3, #6
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	4825      	ldr	r0, [pc, #148]	; (8000744 <MX_GPIO_Init+0x234>)
 80006ae:	f001 fbc1 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006c4:	2305      	movs	r3, #5
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	481e      	ldr	r0, [pc, #120]	; (8000748 <MX_GPIO_Init+0x238>)
 80006d0:	f001 fbb0 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006d4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006d8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4814      	ldr	r0, [pc, #80]	; (8000740 <MX_GPIO_Init+0x230>)
 80006ee:	f001 fba1 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006f2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000704:	2306      	movs	r3, #6
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0x22c>)
 8000710:	f001 fb90 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_GPIO_Init+0x230>)
 8000728:	f001 fb84 	bl	8001e34 <HAL_GPIO_Init>

}
 800072c:	bf00      	nop
 800072e:	3730      	adds	r7, #48	; 0x30
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40021000 	.word	0x40021000
 800073c:	40020800 	.word	0x40020800
 8000740:	40020c00 	.word	0x40020c00
 8000744:	40020000 	.word	0x40020000
 8000748:	40020400 	.word	0x40020400

0800074c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C1_Init+0x50>)
 8000752:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <MX_I2C1_Init+0x54>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C1_Init+0x50>)
 8000758:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_I2C1_Init+0x58>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_I2C1_Init+0x50>)
 800076a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_I2C1_Init+0x50>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C1_Init+0x50>)
 800078a:	f003 fb9d 	bl	8003ec8 <HAL_I2C_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000794:	f000 f9d6 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000c0 	.word	0x200000c0
 80007a0:	40005400 	.word	0x40005400
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a19      	ldr	r2, [pc, #100]	; (800082c <HAL_I2C_MspInit+0x84>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d12c      	bne.n	8000824 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_I2C_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007e6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ec:	2312      	movs	r3, #18
 80007ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f8:	2304      	movs	r3, #4
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <HAL_I2C_MspInit+0x8c>)
 8000804:	f001 fb16 	bl	8001e34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <HAL_I2C_MspInit+0x88>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	4a07      	ldr	r2, [pc, #28]	; (8000830 <HAL_I2C_MspInit+0x88>)
 8000812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000816:	6413      	str	r3, [r2, #64]	; 0x40
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <HAL_I2C_MspInit+0x88>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40005400 	.word	0x40005400
 8000830:	40023800 	.word	0x40023800
 8000834:	40020400 	.word	0x40020400

08000838 <HAL_TIM_PWM_PulseFinishedCallback>:

int datasentflag=0;  // to make sure that the dma does not send another data while the first data is still transmitted


void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)  // this callback is called when data transmission is finished
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);  // stop dma, when the transmission is finished
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000844:	f005 f830 	bl	80058a8 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800084a:	2201      	movs	r2, #1
 800084c:	601a      	str	r2, [r3, #0]
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200008c0 	.word	0x200008c0
 800085c:	200000ac 	.word	0x200000ac

08000860 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <Set_LED+0x58>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;  // store green first as ws2821b requires this order (g,r,b)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <Set_LED+0x58>)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	460a      	mov	r2, r1
 8000888:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	b2d9      	uxtb	r1, r3
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <Set_LED+0x58>)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	460a      	mov	r2, r1
 8000898:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2d9      	uxtb	r1, r3
 800089e:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <Set_LED+0x58>)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	460a      	mov	r2, r1
 80008a8:	70da      	strb	r2, [r3, #3]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000114 	.word	0x20000114

080008bc <Set_Brightness>:

#define PI 3.14159265359

void Set_Brightness (int brightness)  // 0-45
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <WS2812_Send>:


uint16_t pwmData[(24*MAX_LED)+50]; // store 24 bits for each led + 50 values for reset code

void WS2812_Send (void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
	uint32_t color;  //32 bit variable to store 24 bits of color


	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	e036      	b.n	800094e <WS2812_Send+0x7e>
	{

#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80008e0:	4a2e      	ldr	r2, [pc, #184]	; (800099c <WS2812_Send+0xcc>)
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	041a      	lsls	r2, r3, #16
 80008ec:	492b      	ldr	r1, [pc, #172]	; (800099c <WS2812_Send+0xcc>)
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	431a      	orrs	r2, r3
 80008fa:	4928      	ldr	r1, [pc, #160]	; (800099c <WS2812_Send+0xcc>)
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	78db      	ldrb	r3, [r3, #3]
 8000904:	4313      	orrs	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
#endif
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 8000908:	2317      	movs	r3, #23
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	e019      	b.n	8000942 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800090e:	2201      	movs	r2, #1
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4013      	ands	r3, r2
 800091c:	2b00      	cmp	r3, #0
 800091e:	d005      	beq.n	800092c <WS2812_Send+0x5c>
			{
				pwmData[indx] = 57; // if the bit is 1, the duty cycle is 64%
 8000920:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <WS2812_Send+0xd0>)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2139      	movs	r1, #57	; 0x39
 8000926:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800092a:	e004      	b.n	8000936 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 28;  // if the bit is 0, the duty cycle is 32%
 800092c:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <WS2812_Send+0xd0>)
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	211c      	movs	r1, #28
 8000932:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--) // iterate through the 24 bits which specify the color
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3b01      	subs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dae2      	bge.n	800090e <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)  // iterate through all of the LEDs
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3301      	adds	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	2b1d      	cmp	r3, #29
 8000952:	ddc5      	ble.n	80008e0 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	e00a      	b.n	8000970 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800095a:	4a11      	ldr	r2, [pc, #68]	; (80009a0 <WS2812_Send+0xd0>)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2100      	movs	r1, #0
 8000960:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)  // store values to keep the pulse low for 50+ us, reset code
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	3301      	adds	r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b31      	cmp	r3, #49	; 0x31
 8000974:	ddf1      	ble.n	800095a <WS2812_Send+0x8a>
	}
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);  // send the data to the dma
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	b29b      	uxth	r3, r3
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <WS2812_Send+0xd0>)
 800097c:	2100      	movs	r1, #0
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <WS2812_Send+0xd4>)
 8000980:	f004 fd58 	bl	8005434 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};  // this flag will be set when the data transmission is finished, dma is stopped and now we can send another data
 8000984:	bf00      	nop
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <WS2812_Send+0xd8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0fb      	beq.n	8000986 <WS2812_Send+0xb6>
	datasentflag = 0;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <WS2812_Send+0xd8>)
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000114 	.word	0x20000114
 80009a0:	20000204 	.word	0x20000204
 80009a4:	200008c0 	.word	0x200008c0
 80009a8:	200000ac 	.word	0x200000ac

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
int main(void)
 80009b2:	f107 0310 	add.w	r3, r7, #16
 80009b6:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b8:	f000 fb58 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009bc:	f000 f85a 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c0:	f7ff fda6 	bl	8000510 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009c4:	f7ff fec2 	bl	800074c <MX_I2C1_Init>
  MX_SPI1_Init();
 80009c8:	f000 f8cc 	bl	8000b64 <MX_SPI1_Init>
  MX_DMA_Init();
 80009cc:	f7ff fd80 	bl	80004d0 <MX_DMA_Init>
  MX_USB_HOST_Init();
 80009d0:	f009 fa1a 	bl	8009e08 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80009d4:	f000 f9f2 	bl	8000dbc <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int pos = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
		 HAL_Delay(80);
		 WS2812_Send();
	  };

//	  attention_blinking();
	  turn_signal(30, 1);
 80009dc:	463b      	mov	r3, r7
 80009de:	469c      	mov	ip, r3
 80009e0:	2101      	movs	r1, #1
 80009e2:	201e      	movs	r0, #30
 80009e4:	f000 f803 	bl	80009ee <turn_signal.9346>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009e8:	f009 fa34 	bl	8009e54 <MX_USB_HOST_Process>
  {
 80009ec:	e7f6      	b.n	80009dc <main+0x30>

080009ee <turn_signal.9346>:
	  void turn_signal(int num, int direction) {
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b088      	sub	sp, #32
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	f8c7 c004 	str.w	ip, [r7, #4]
		  int counter = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
		  int led_num = direction == -1 ? num: 0;
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a06:	d101      	bne.n	8000a0c <turn_signal.9346+0x1e>
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	e000      	b.n	8000a0e <turn_signal.9346+0x20>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]
		  while (counter != num) {
 8000a10:	e014      	b.n	8000a3c <turn_signal.9346+0x4e>
			Set_LED(led_num, 255, 30, 0);
 8000a12:	2300      	movs	r3, #0
 8000a14:	221e      	movs	r2, #30
 8000a16:	21ff      	movs	r1, #255	; 0xff
 8000a18:	69b8      	ldr	r0, [r7, #24]
 8000a1a:	f7ff ff21 	bl	8000860 <Set_LED>
			Set_Brightness(45);
 8000a1e:	202d      	movs	r0, #45	; 0x2d
 8000a20:	f7ff ff4c 	bl	80008bc <Set_Brightness>
			WS2812_Send();
 8000a24:	f7ff ff54 	bl	80008d0 <WS2812_Send>
			HAL_Delay(30);
 8000a28:	201e      	movs	r0, #30
 8000a2a:	f000 fb91 	bl	8001150 <HAL_Delay>
			led_num += direction;
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4413      	add	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
			counter++;
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
		  while (counter != num) {
 8000a3c:	69fa      	ldr	r2, [r7, #28]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d1e6      	bne.n	8000a12 <turn_signal.9346+0x24>
		 for (int i = 0; i < 30; i++) {
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	e008      	b.n	8000a5c <turn_signal.9346+0x6e>
		 	Set_LED(i, 0, 0, 0);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	6978      	ldr	r0, [r7, #20]
 8000a52:	f7ff ff05 	bl	8000860 <Set_LED>
		 for (int i = 0; i < 30; i++) {
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2b1d      	cmp	r3, #29
 8000a60:	ddf3      	ble.n	8000a4a <turn_signal.9346+0x5c>
		 HAL_Delay(80);
 8000a62:	2050      	movs	r0, #80	; 0x50
 8000a64:	f000 fb74 	bl	8001150 <HAL_Delay>
		 WS2812_Send();
 8000a68:	f7ff ff32 	bl	80008d0 <WS2812_Send>
	  };
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 fd02 	bl	800a48c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <SystemClock_Config+0xc8>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <SystemClock_Config+0xc8>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b24      	ldr	r3, [pc, #144]	; (8000b3c <SystemClock_Config+0xc8>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <SystemClock_Config+0xcc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <SystemClock_Config+0xcc>)
 8000abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <SystemClock_Config+0xcc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ae8:	2348      	movs	r3, #72	; 0x48
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000af0:	2303      	movs	r3, #3
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0320 	add.w	r3, r7, #32
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fbb1 	bl	8004260 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b04:	f000 f81e 	bl	8000b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2102      	movs	r1, #2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f003 fec3 	bl	80048b0 <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b30:	f000 f808 	bl	8000b44 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3750      	adds	r7, #80	; 0x50
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>

08000b4e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b6a:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <MX_SPI1_Init+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b6e:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000bb0:	220a      	movs	r2, #10
 8000bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_SPI1_Init+0x64>)
 8000bb6:	f004 f90b 	bl	8004dd0 <HAL_SPI_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bc0:	f7ff ffc0 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000808 	.word	0x20000808
 8000bcc:	40013000 	.word	0x40013000

08000bd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_SPI_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c2a:	23e0      	movs	r3, #224	; 0xe0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_SPI_MspInit+0x8c>)
 8000c46:	f001 f8f5 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40013000 	.word	0x40013000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_MspInit+0x4c>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <HAL_MspInit+0x4c>)
 8000c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <HAL_MspInit+0x4c>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_MspInit+0x4c>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_MspInit+0x4c>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c9e:	2007      	movs	r0, #7
 8000ca0:	f000 fb4a 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 fa08 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <DMA2_Stream1_IRQHandler+0x10>)
 8000d0a:	f000 fe29 	bl	8001960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000860 	.word	0x20000860

08000d18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <OTG_FS_IRQHandler+0x10>)
 8000d1e:	f001 fdcd 	bl	80028bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000ce4 	.word	0x20000ce4

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f009 fb5c 	bl	800a418 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200000b0 	.word	0x200000b0
 8000d94:	20000ff8 	.word	0x20000ff8

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b096      	sub	sp, #88	; 0x58
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
 8000de8:	611a      	str	r2, [r3, #16]
 8000dea:	615a      	str	r2, [r3, #20]
 8000dec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2220      	movs	r2, #32
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f009 fb49 	bl	800a48c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000dfc:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <MX_TIM1_Init+0x13c>)
 8000dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e00:	4b3c      	ldr	r3, [pc, #240]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000e0c:	4b39      	ldr	r3, [pc, #228]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e0e:	2259      	movs	r2, #89	; 0x59
 8000e10:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e18:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e24:	4833      	ldr	r0, [pc, #204]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e26:	f004 f96f 	bl	8005108 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e30:	f7ff fe88 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e3e:	4619      	mov	r1, r3
 8000e40:	482c      	ldr	r0, [pc, #176]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e42:	f005 f81f 	bl	8005e84 <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e4c:	f7ff fe7a 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e50:	4828      	ldr	r0, [pc, #160]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e52:	f004 fa1f 	bl	8005294 <HAL_TIM_PWM_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e5c:	f7ff fe72 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000e70:	f005 ff9a 	bl	8006da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e7a:	f7ff fe63 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	; 0x60
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e92:	2300      	movs	r3, #0
 8000e94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000ea4:	f004 fe48 	bl	8005b38 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000eae:	f7ff fe49 	bl	8000b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000ed6:	f006 f825 	bl	8006f24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000ee0:	f7ff fe30 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM1_Init+0x138>)
 8000ee6:	f000 f85d 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000eea:	bf00      	nop
 8000eec:	3758      	adds	r7, #88	; 0x58
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200008c0 	.word	0x200008c0
 8000ef8:	40010000 	.word	0x40010000

08000efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_TIM_Base_MspInit+0x98>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d13d      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_TIM_Base_MspInit+0x9c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <HAL_TIM_Base_MspInit+0x9c>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_TIM_Base_MspInit+0x9c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_TIM_Base_MspInit+0xa4>)
 8000f2e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f32:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f36:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f3a:	2240      	movs	r2, #64	; 0x40
 8000f3c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f4a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000f6e:	480b      	ldr	r0, [pc, #44]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f70:	f000 fa52 	bl	8001418 <HAL_DMA_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000f7a:	f7ff fde3 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <HAL_TIM_Base_MspInit+0xa0>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	20000860 	.word	0x20000860
 8000fa0:	40026428 	.word	0x40026428

08000fa4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <HAL_TIM_MspPostInit+0x68>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d11e      	bne.n	8001004 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_TIM_MspPostInit+0x6c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <HAL_TIM_MspPostInit+0x6c>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <HAL_TIM_MspPostInit+0x6c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_TIM_MspPostInit+0x70>)
 8001000:	f000 ff18 	bl	8001e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40010000 	.word	0x40010000
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101e:	490e      	ldr	r1, [pc, #56]	; (8001058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001034:	4c0b      	ldr	r4, [pc, #44]	; (8001064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001042:	f7ff fea9 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001046:	f009 f9ed 	bl	800a424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fcaf 	bl	80009ac <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800105c:	0800a87c 	.word	0x0800a87c
  ldr r2, =_sbss
 8001060:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001064:	20000ff8 	.word	0x20000ff8

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_Init+0x40>)
 8001076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <HAL_Init+0x40>)
 8001082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001086:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_Init+0x40>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001094:	2003      	movs	r0, #3
 8001096:	f000 f94f 	bl	8001338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f808 	bl	80010b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a0:	f7ff fdde 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x54>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x58>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f996 	bl	8001400 <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e00e      	b.n	80010fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b0f      	cmp	r3, #15
 80010e2:	d80a      	bhi.n	80010fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e4:	2200      	movs	r2, #0
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ec:	f000 f944 	bl	8001378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_InitTick+0x5c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x20>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x24>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <HAL_IncTick+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000008 	.word	0x20000008
 8001134:	20000908 	.word	0x20000908

08001138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return uwTick;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_GetTick+0x14>)
 800113e:	681b      	ldr	r3, [r3, #0]
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000908 	.word	0x20000908

08001150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff ffee 	bl	8001138 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001168:	d005      	beq.n	8001176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_Delay+0x44>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001176:	bf00      	nop
 8001178:	f7ff ffde 	bl	8001138 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8f7      	bhi.n	8001178 <HAL_Delay+0x28>
  {
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001304:	d301      	bcc.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e00f      	b.n	800132a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <SysTick_Config+0x40>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	210f      	movs	r1, #15
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f7ff ff8e 	bl	8001238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Config+0x40>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SysTick_Config+0x40>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d00f      	beq.n	8001366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b06      	cmp	r3, #6
 800134a:	d00c      	beq.n	8001366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d009      	beq.n	8001366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d006      	beq.n	8001366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d003      	beq.n	8001366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800135e:	2192      	movs	r1, #146	; 0x92
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001362:	f7ff fbf4 	bl	8000b4e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff16 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0800a644 	.word	0x0800a644

08001378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d903      	bls.n	8001398 <HAL_NVIC_SetPriority+0x20>
 8001390:	21aa      	movs	r1, #170	; 0xaa
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <HAL_NVIC_SetPriority+0x54>)
 8001394:	f7ff fbdb 	bl	8000b4e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	d903      	bls.n	80013a6 <HAL_NVIC_SetPriority+0x2e>
 800139e:	21ab      	movs	r1, #171	; 0xab
 80013a0:	480a      	ldr	r0, [pc, #40]	; (80013cc <HAL_NVIC_SetPriority+0x54>)
 80013a2:	f7ff fbd4 	bl	8000b4e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a6:	f7ff ff1b 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 80013aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6978      	ldr	r0, [r7, #20]
 80013b2:	f7ff ff6b 	bl	800128c <NVIC_EncodePriority>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013bc:	4611      	mov	r1, r2
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff3a 	bl	8001238 <__NVIC_SetPriority>
}
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	0800a644 	.word	0x0800a644

080013d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da03      	bge.n	80013ea <HAL_NVIC_EnableIRQ+0x1a>
 80013e2:	21be      	movs	r1, #190	; 0xbe
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <HAL_NVIC_EnableIRQ+0x2c>)
 80013e6:	f7ff fbb2 	bl	8000b4e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff04 	bl	80011fc <__NVIC_EnableIRQ>
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800a644 	.word	0x0800a644

08001400 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff73 	bl	80012f4 <SysTick_Config>
 800140e:	4603      	mov	r3, r0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff fe88 	bl	8001138 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e204      	b.n	800183e <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a97      	ldr	r2, [pc, #604]	; (8001698 <HAL_DMA_Init+0x280>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d04e      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a96      	ldr	r2, [pc, #600]	; (800169c <HAL_DMA_Init+0x284>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d049      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a94      	ldr	r2, [pc, #592]	; (80016a0 <HAL_DMA_Init+0x288>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d044      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a93      	ldr	r2, [pc, #588]	; (80016a4 <HAL_DMA_Init+0x28c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d03f      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a91      	ldr	r2, [pc, #580]	; (80016a8 <HAL_DMA_Init+0x290>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d03a      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a90      	ldr	r2, [pc, #576]	; (80016ac <HAL_DMA_Init+0x294>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d035      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a8e      	ldr	r2, [pc, #568]	; (80016b0 <HAL_DMA_Init+0x298>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d030      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a8d      	ldr	r2, [pc, #564]	; (80016b4 <HAL_DMA_Init+0x29c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d02b      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a8b      	ldr	r2, [pc, #556]	; (80016b8 <HAL_DMA_Init+0x2a0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d026      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a8a      	ldr	r2, [pc, #552]	; (80016bc <HAL_DMA_Init+0x2a4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d021      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a88      	ldr	r2, [pc, #544]	; (80016c0 <HAL_DMA_Init+0x2a8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d01c      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a87      	ldr	r2, [pc, #540]	; (80016c4 <HAL_DMA_Init+0x2ac>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d017      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a85      	ldr	r2, [pc, #532]	; (80016c8 <HAL_DMA_Init+0x2b0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d012      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a84      	ldr	r2, [pc, #528]	; (80016cc <HAL_DMA_Init+0x2b4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00d      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a82      	ldr	r2, [pc, #520]	; (80016d0 <HAL_DMA_Init+0x2b8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d008      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a81      	ldr	r2, [pc, #516]	; (80016d4 <HAL_DMA_Init+0x2bc>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d003      	beq.n	80014dc <HAL_DMA_Init+0xc4>
 80014d4:	21b8      	movs	r1, #184	; 0xb8
 80014d6:	4880      	ldr	r0, [pc, #512]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 80014d8:	f7ff fb39 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d026      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014ec:	d021      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014f6:	d01c      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001500:	d017      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800150a:	d012      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001514:	d00d      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800151e:	d008      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001528:	d003      	beq.n	8001532 <HAL_DMA_Init+0x11a>
 800152a:	21b9      	movs	r1, #185	; 0xb9
 800152c:	486a      	ldr	r0, [pc, #424]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 800152e:	f7ff fb0e 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <HAL_DMA_Init+0x13a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b40      	cmp	r3, #64	; 0x40
 8001540:	d007      	beq.n	8001552 <HAL_DMA_Init+0x13a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b80      	cmp	r3, #128	; 0x80
 8001548:	d003      	beq.n	8001552 <HAL_DMA_Init+0x13a>
 800154a:	21ba      	movs	r1, #186	; 0xba
 800154c:	4862      	ldr	r0, [pc, #392]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 800154e:	f7ff fafe 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155a:	d007      	beq.n	800156c <HAL_DMA_Init+0x154>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_DMA_Init+0x154>
 8001564:	21bb      	movs	r1, #187	; 0xbb
 8001566:	485c      	ldr	r0, [pc, #368]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 8001568:	f7ff faf1 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001574:	d007      	beq.n	8001586 <HAL_DMA_Init+0x16e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_DMA_Init+0x16e>
 800157e:	21bc      	movs	r1, #188	; 0xbc
 8001580:	4855      	ldr	r0, [pc, #340]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 8001582:	f7ff fae4 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00d      	beq.n	80015aa <HAL_DMA_Init+0x192>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001596:	d008      	beq.n	80015aa <HAL_DMA_Init+0x192>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a0:	d003      	beq.n	80015aa <HAL_DMA_Init+0x192>
 80015a2:	21bd      	movs	r1, #189	; 0xbd
 80015a4:	484c      	ldr	r0, [pc, #304]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 80015a6:	f7ff fad2 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00d      	beq.n	80015ce <HAL_DMA_Init+0x1b6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ba:	d008      	beq.n	80015ce <HAL_DMA_Init+0x1b6>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015c4:	d003      	beq.n	80015ce <HAL_DMA_Init+0x1b6>
 80015c6:	21be      	movs	r1, #190	; 0xbe
 80015c8:	4843      	ldr	r0, [pc, #268]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 80015ca:	f7ff fac0 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <HAL_DMA_Init+0x1d8>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015de:	d007      	beq.n	80015f0 <HAL_DMA_Init+0x1d8>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d003      	beq.n	80015f0 <HAL_DMA_Init+0x1d8>
 80015e8:	21bf      	movs	r1, #191	; 0xbf
 80015ea:	483b      	ldr	r0, [pc, #236]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 80015ec:	f7ff faaf 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d012      	beq.n	800161e <HAL_DMA_Init+0x206>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d00d      	beq.n	800161e <HAL_DMA_Init+0x206>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800160a:	d008      	beq.n	800161e <HAL_DMA_Init+0x206>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001614:	d003      	beq.n	800161e <HAL_DMA_Init+0x206>
 8001616:	21c0      	movs	r1, #192	; 0xc0
 8001618:	482f      	ldr	r0, [pc, #188]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 800161a:	f7ff fa98 	bl	8000b4e <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_DMA_Init+0x21e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	2b04      	cmp	r3, #4
 800162c:	d003      	beq.n	8001636 <HAL_DMA_Init+0x21e>
 800162e:	21c1      	movs	r1, #193	; 0xc1
 8001630:	4829      	ldr	r0, [pc, #164]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 8001632:	f7ff fa8c 	bl	8000b4e <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	d065      	beq.n	800170a <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00f      	beq.n	8001666 <HAL_DMA_Init+0x24e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	2b01      	cmp	r3, #1
 800164c:	d00b      	beq.n	8001666 <HAL_DMA_Init+0x24e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	2b02      	cmp	r3, #2
 8001654:	d007      	beq.n	8001666 <HAL_DMA_Init+0x24e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	2b03      	cmp	r3, #3
 800165c:	d003      	beq.n	8001666 <HAL_DMA_Init+0x24e>
 800165e:	21c6      	movs	r1, #198	; 0xc6
 8001660:	481d      	ldr	r0, [pc, #116]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 8001662:	f7ff fa74 	bl	8000b4e <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166a:	2b00      	cmp	r3, #0
 800166c:	d036      	beq.n	80016dc <HAL_DMA_Init+0x2c4>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001676:	d031      	beq.n	80016dc <HAL_DMA_Init+0x2c4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001680:	d02c      	beq.n	80016dc <HAL_DMA_Init+0x2c4>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800168a:	d027      	beq.n	80016dc <HAL_DMA_Init+0x2c4>
 800168c:	21c7      	movs	r1, #199	; 0xc7
 800168e:	4812      	ldr	r0, [pc, #72]	; (80016d8 <HAL_DMA_Init+0x2c0>)
 8001690:	f7ff fa5d 	bl	8000b4e <assert_failed>
 8001694:	e022      	b.n	80016dc <HAL_DMA_Init+0x2c4>
 8001696:	bf00      	nop
 8001698:	40026010 	.word	0x40026010
 800169c:	40026028 	.word	0x40026028
 80016a0:	40026040 	.word	0x40026040
 80016a4:	40026058 	.word	0x40026058
 80016a8:	40026070 	.word	0x40026070
 80016ac:	40026088 	.word	0x40026088
 80016b0:	400260a0 	.word	0x400260a0
 80016b4:	400260b8 	.word	0x400260b8
 80016b8:	40026410 	.word	0x40026410
 80016bc:	40026428 	.word	0x40026428
 80016c0:	40026440 	.word	0x40026440
 80016c4:	40026458 	.word	0x40026458
 80016c8:	40026470 	.word	0x40026470
 80016cc:	40026488 	.word	0x40026488
 80016d0:	400264a0 	.word	0x400264a0
 80016d4:	400264b8 	.word	0x400264b8
 80016d8:	0800a680 	.word	0x0800a680
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d012      	beq.n	800170a <HAL_DMA_Init+0x2f2>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016ec:	d00d      	beq.n	800170a <HAL_DMA_Init+0x2f2>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f6:	d008      	beq.n	800170a <HAL_DMA_Init+0x2f2>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001700:	d003      	beq.n	800170a <HAL_DMA_Init+0x2f2>
 8001702:	21c8      	movs	r1, #200	; 0xc8
 8001704:	4850      	ldr	r0, [pc, #320]	; (8001848 <HAL_DMA_Init+0x430>)
 8001706:	f7ff fa22 	bl	8000b4e <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2202      	movs	r2, #2
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800172a:	e00f      	b.n	800174c <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172c:	f7ff fd04 	bl	8001138 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b05      	cmp	r3, #5
 8001738:	d908      	bls.n	800174c <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2220      	movs	r2, #32
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2203      	movs	r2, #3
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e078      	b.n	800183e <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1e8      	bne.n	800172c <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_DMA_Init+0x434>)
 8001766:	4013      	ands	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4313      	orrs	r3, r2
 800179c:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d107      	bne.n	80017b6 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4313      	orrs	r3, r2
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f023 0307 	bic.w	r3, r3, #7
 80017cc:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d117      	bne.n	8001810 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00e      	beq.n	8001810 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 faa2 	bl	8001d3c <DMA_CheckFifoParam>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800180c:	2301      	movs	r3, #1
 800180e:	e016      	b.n	800183e <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fa59 	bl	8001cd0 <DMA_CalcBaseAndBitshift>
 800181e:	4603      	mov	r3, r0
 8001820:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	223f      	movs	r2, #63	; 0x3f
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	0800a680 	.word	0x0800a680
 800184c:	f010803f 	.word	0xf010803f

08001850 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_DMA_Start_IT+0x26>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d304      	bcc.n	8001880 <HAL_DMA_Start_IT+0x30>
 8001876:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800187a:	4827      	ldr	r0, [pc, #156]	; (8001918 <HAL_DMA_Start_IT+0xc8>)
 800187c:	f7ff f967 	bl	8000b4e <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_DMA_Start_IT+0x3e>
 800188a:	2302      	movs	r3, #2
 800188c:	e040      	b.n	8001910 <HAL_DMA_Start_IT+0xc0>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d12f      	bne.n	8001902 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2202      	movs	r2, #2
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f9dc 	bl	8001c74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c0:	223f      	movs	r2, #63	; 0x3f
 80018c2:	409a      	lsls	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0216 	orr.w	r2, r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0208 	orr.w	r2, r2, #8
 80018ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e005      	b.n	800190e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800190e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	0800a680 	.word	0x0800a680

0800191c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d004      	beq.n	800193a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2280      	movs	r2, #128	; 0x80
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00c      	b.n	8001954 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2205      	movs	r2, #5
 800193e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800196c:	4b92      	ldr	r3, [pc, #584]	; (8001bb8 <HAL_DMA_IRQHandler+0x258>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a92      	ldr	r2, [pc, #584]	; (8001bbc <HAL_DMA_IRQHandler+0x25c>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	0a9b      	lsrs	r3, r3, #10
 8001978:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198a:	2208      	movs	r2, #8
 800198c:	409a      	lsls	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01a      	beq.n	80019cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	2208      	movs	r2, #8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2201      	movs	r2, #1
 80019d2:	409a      	lsls	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00b      	beq.n	8001a02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2201      	movs	r2, #1
 80019f0:	409a      	lsls	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	2204      	movs	r2, #4
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d012      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2204      	movs	r2, #4
 8001a26:	409a      	lsls	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f043 0204 	orr.w	r2, r3, #4
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2210      	movs	r2, #16
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d043      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d03c      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d018      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	4798      	blx	r3
 8001a8e:	e01f      	b.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01b      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
 8001aa0:	e016      	b.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d107      	bne.n	8001ac0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0208 	bic.w	r2, r2, #8
 8001abe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 808e 	beq.w	8001bfe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 8086 	beq.w	8001bfe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af6:	2220      	movs	r2, #32
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d136      	bne.n	8001b78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0216 	bic.w	r2, r2, #22
 8001b18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <HAL_DMA_IRQHandler+0x1da>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0208 	bic.w	r2, r2, #8
 8001b48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	223f      	movs	r2, #63	; 0x3f
 8001b50:	409a      	lsls	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d07d      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
        }
        return;
 8001b76:	e078      	b.n	8001c6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01c      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d108      	bne.n	8001ba6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d030      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
 8001ba4:	e02b      	b.n	8001bfe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d027      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
 8001bb6:	e022      	b.n	8001bfe <HAL_DMA_IRQHandler+0x29e>
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d032      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d022      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2205      	movs	r2, #5
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d307      	bcc.n	8001c46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1f2      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x2ca>
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c46:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
 8001c68:	e000      	b.n	8001c6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c6a:	bf00      	nop
    }
  }
}
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop

08001c74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	d108      	bne.n	8001cb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cb2:	e007      	b.n	8001cc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	60da      	str	r2, [r3, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	3b10      	subs	r3, #16
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <DMA_CalcBaseAndBitshift+0x64>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <DMA_CalcBaseAndBitshift+0x68>)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d909      	bls.n	8001d12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d06:	f023 0303 	bic.w	r3, r3, #3
 8001d0a:	1d1a      	adds	r2, r3, #4
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d10:	e007      	b.n	8001d22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1a:	f023 0303 	bic.w	r3, r3, #3
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	aaaaaaab 	.word	0xaaaaaaab
 8001d38:	0800a864 	.word	0x0800a864

08001d3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d11f      	bne.n	8001d96 <DMA_CheckFifoParam+0x5a>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d856      	bhi.n	8001e0a <DMA_CheckFifoParam+0xce>
 8001d5c:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <DMA_CheckFifoParam+0x28>)
 8001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d62:	bf00      	nop
 8001d64:	08001d75 	.word	0x08001d75
 8001d68:	08001d87 	.word	0x08001d87
 8001d6c:	08001d75 	.word	0x08001d75
 8001d70:	08001e0b 	.word	0x08001e0b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d046      	beq.n	8001e0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d84:	e043      	b.n	8001e0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d8e:	d140      	bne.n	8001e12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d94:	e03d      	b.n	8001e12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d9e:	d121      	bne.n	8001de4 <DMA_CheckFifoParam+0xa8>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d837      	bhi.n	8001e16 <DMA_CheckFifoParam+0xda>
 8001da6:	a201      	add	r2, pc, #4	; (adr r2, 8001dac <DMA_CheckFifoParam+0x70>)
 8001da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dac:	08001dbd 	.word	0x08001dbd
 8001db0:	08001dc3 	.word	0x08001dc3
 8001db4:	08001dbd 	.word	0x08001dbd
 8001db8:	08001dd5 	.word	0x08001dd5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc0:	e030      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d025      	beq.n	8001e1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd2:	e022      	b.n	8001e1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ddc:	d11f      	bne.n	8001e1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001de2:	e01c      	b.n	8001e1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d903      	bls.n	8001df2 <DMA_CheckFifoParam+0xb6>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d003      	beq.n	8001df8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001df0:	e018      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      break;
 8001df6:	e015      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00e      	beq.n	8001e22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
      break;
 8001e08:	e00b      	b.n	8001e22 <DMA_CheckFifoParam+0xe6>
      break;
 8001e0a:	bf00      	nop
 8001e0c:	e00a      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      break;
 8001e0e:	bf00      	nop
 8001e10:	e008      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      break;
 8001e12:	bf00      	nop
 8001e14:	e006      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      break;
 8001e16:	bf00      	nop
 8001e18:	e004      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e002      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e1e:	bf00      	nop
 8001e20:	e000      	b.n	8001e24 <DMA_CheckFifoParam+0xe8>
      break;
 8001e22:	bf00      	nop
    }
  } 
  
  return status; 
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a33      	ldr	r2, [pc, #204]	; (8001f1c <HAL_GPIO_Init+0xe8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <HAL_GPIO_Init+0x4e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a32      	ldr	r2, [pc, #200]	; (8001f20 <HAL_GPIO_Init+0xec>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <HAL_GPIO_Init+0x4e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a31      	ldr	r2, [pc, #196]	; (8001f24 <HAL_GPIO_Init+0xf0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <HAL_GPIO_Init+0x4e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_GPIO_Init+0xf4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <HAL_GPIO_Init+0x4e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <HAL_GPIO_Init+0xf8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x4e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <HAL_GPIO_Init+0xfc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x4e>
 8001e7a:	21ac      	movs	r1, #172	; 0xac
 8001e7c:	482d      	ldr	r0, [pc, #180]	; (8001f34 <HAL_GPIO_Init+0x100>)
 8001e7e:	f7fe fe66 	bl	8000b4e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_GPIO_Init+0x64>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x6c>
 8001e98:	21ad      	movs	r1, #173	; 0xad
 8001e9a:	4826      	ldr	r0, [pc, #152]	; (8001f34 <HAL_GPIO_Init+0x100>)
 8001e9c:	f7fe fe57 	bl	8000b4e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d035      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d031      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b11      	cmp	r3, #17
 8001eb6:	d02d      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d029      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b12      	cmp	r3, #18
 8001ec6:	d025      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001ed0:	d020      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001eda:	d01b      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001ee4:	d016      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001eee:	d011      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001ef8:	d00c      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001f02:	d007      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0xe0>
 8001f0c:	21ae      	movs	r1, #174	; 0xae
 8001f0e:	4809      	ldr	r0, [pc, #36]	; (8001f34 <HAL_GPIO_Init+0x100>)
 8001f10:	f7fe fe1d 	bl	8000b4e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	e211      	b.n	800233e <HAL_GPIO_Init+0x50a>
 8001f1a:	bf00      	nop
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40021c00 	.word	0x40021c00
 8001f34:	0800a6b8 	.word	0x0800a6b8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	f040 81f1 	bne.w	8002338 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d005      	beq.n	8001f6e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d144      	bne.n	8001ff8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00f      	beq.n	8001f96 <HAL_GPIO_Init+0x162>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d00b      	beq.n	8001f96 <HAL_GPIO_Init+0x162>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x162>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x162>
 8001f8e:	21c0      	movs	r1, #192	; 0xc0
 8001f90:	489f      	ldr	r0, [pc, #636]	; (8002210 <HAL_GPIO_Init+0x3dc>)
 8001f92:	f7fe fddc 	bl	8000b4e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0201 	and.w	r2, r3, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b03      	cmp	r3, #3
 8002002:	d027      	beq.n	8002054 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00b      	beq.n	8002024 <HAL_GPIO_Init+0x1f0>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1f0>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x1f0>
 800201c:	21d1      	movs	r1, #209	; 0xd1
 800201e:	487c      	ldr	r0, [pc, #496]	; (8002210 <HAL_GPIO_Init+0x3dc>)
 8002020:	f7fe fd95 	bl	8000b4e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b02      	cmp	r3, #2
 800205e:	f040 80a0 	bne.w	80021a2 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d077      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b09      	cmp	r3, #9
 8002070:	d073      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d06f      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06b      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d067      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d063      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d05f      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d05b      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d057      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d053      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d04f      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d04b      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d047      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d043      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b05      	cmp	r3, #5
 80020d8:	d03f      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b05      	cmp	r3, #5
 80020e0:	d03b      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b05      	cmp	r3, #5
 80020e8:	d037      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d033      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d02f      	beq.n	800215a <HAL_GPIO_Init+0x326>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d02b      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	2b06      	cmp	r3, #6
 8002108:	d027      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b07      	cmp	r3, #7
 8002110:	d023      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b07      	cmp	r3, #7
 8002118:	d01f      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b07      	cmp	r3, #7
 8002120:	d01b      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d017      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b0a      	cmp	r3, #10
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b09      	cmp	r3, #9
 8002138:	d00f      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b09      	cmp	r3, #9
 8002140:	d00b      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d007      	beq.n	800215a <HAL_GPIO_Init+0x326>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x326>
 8002152:	21de      	movs	r1, #222	; 0xde
 8002154:	482e      	ldr	r0, [pc, #184]	; (8002210 <HAL_GPIO_Init+0x3dc>)
 8002156:	f7fe fcfa 	bl	8000b4e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	69b9      	ldr	r1, [r7, #24]
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0203 	and.w	r2, r3, #3
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80aa 	beq.w	8002338 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_GPIO_Init+0x3e0>)
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <HAL_GPIO_Init+0x3e0>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f2:	6453      	str	r3, [r2, #68]	; 0x44
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <HAL_GPIO_Init+0x3e0>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002200:	4a05      	ldr	r2, [pc, #20]	; (8002218 <HAL_GPIO_Init+0x3e4>)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	3302      	adds	r3, #2
 8002208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x3e8>
 800220e:	bf00      	nop
 8002210:	0800a6b8 	.word	0x0800a6b8
 8002214:	40023800 	.word	0x40023800
 8002218:	40013800 	.word	0x40013800
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a46      	ldr	r2, [pc, #280]	; (8002350 <HAL_GPIO_Init+0x51c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d019      	beq.n	8002270 <HAL_GPIO_Init+0x43c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_GPIO_Init+0x520>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d013      	beq.n	800226c <HAL_GPIO_Init+0x438>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a44      	ldr	r2, [pc, #272]	; (8002358 <HAL_GPIO_Init+0x524>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d00d      	beq.n	8002268 <HAL_GPIO_Init+0x434>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a43      	ldr	r2, [pc, #268]	; (800235c <HAL_GPIO_Init+0x528>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d007      	beq.n	8002264 <HAL_GPIO_Init+0x430>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a42      	ldr	r2, [pc, #264]	; (8002360 <HAL_GPIO_Init+0x52c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d101      	bne.n	8002260 <HAL_GPIO_Init+0x42c>
 800225c:	2304      	movs	r3, #4
 800225e:	e008      	b.n	8002272 <HAL_GPIO_Init+0x43e>
 8002260:	2307      	movs	r3, #7
 8002262:	e006      	b.n	8002272 <HAL_GPIO_Init+0x43e>
 8002264:	2303      	movs	r3, #3
 8002266:	e004      	b.n	8002272 <HAL_GPIO_Init+0x43e>
 8002268:	2302      	movs	r3, #2
 800226a:	e002      	b.n	8002272 <HAL_GPIO_Init+0x43e>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_GPIO_Init+0x43e>
 8002270:	2300      	movs	r3, #0
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	f002 0203 	and.w	r2, r2, #3
 8002278:	0092      	lsls	r2, r2, #2
 800227a:	4093      	lsls	r3, r2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002282:	4938      	ldr	r1, [pc, #224]	; (8002364 <HAL_GPIO_Init+0x530>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002290:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_GPIO_Init+0x534>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b4:	4a2c      	ldr	r2, [pc, #176]	; (8002368 <HAL_GPIO_Init+0x534>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_GPIO_Init+0x534>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022de:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_GPIO_Init+0x534>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_GPIO_Init+0x534>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <HAL_GPIO_Init+0x534>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_GPIO_Init+0x534>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002332:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_GPIO_Init+0x534>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3301      	adds	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	f67f adf9 	bls.w	8001f38 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40013800 	.word	0x40013800
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
 8002378:	4613      	mov	r3, r2
 800237a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_GPIO_WritePin+0x20>
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <HAL_GPIO_WritePin+0x2a>
 800238c:	f240 119d 	movw	r1, #413	; 0x19d
 8002390:	480e      	ldr	r0, [pc, #56]	; (80023cc <HAL_GPIO_WritePin+0x60>)
 8002392:	f7fe fbdc 	bl	8000b4e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002396:	787b      	ldrb	r3, [r7, #1]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d007      	beq.n	80023ac <HAL_GPIO_WritePin+0x40>
 800239c:	787b      	ldrb	r3, [r7, #1]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d004      	beq.n	80023ac <HAL_GPIO_WritePin+0x40>
 80023a2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80023a6:	4809      	ldr	r0, [pc, #36]	; (80023cc <HAL_GPIO_WritePin+0x60>)
 80023a8:	f7fe fbd1 	bl	8000b4e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b8:	e003      	b.n	80023c2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	0800a6b8 	.word	0x0800a6b8

080023d0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80023d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d2:	b08f      	sub	sp, #60	; 0x3c
 80023d4:	af0a      	add	r7, sp, #40	; 0x28
 80023d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e05d      	b.n	800249e <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ea:	d003      	beq.n	80023f4 <HAL_HCD_Init+0x24>
 80023ec:	2179      	movs	r1, #121	; 0x79
 80023ee:	482e      	ldr	r0, [pc, #184]	; (80024a8 <HAL_HCD_Init+0xd8>)
 80023f0:	f7fe fbad 	bl	8000b4e <assert_failed>

  USBx = hhcd->Instance;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f007 fd58 	bl	8009ec4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2203      	movs	r2, #3
 8002418:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f004 feae 	bl	8007194 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	687e      	ldr	r6, [r7, #4]
 8002440:	466d      	mov	r5, sp
 8002442:	f106 0410 	add.w	r4, r6, #16
 8002446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002452:	e885 0003 	stmia.w	r5, {r0, r1}
 8002456:	1d33      	adds	r3, r6, #4
 8002458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800245a:	6838      	ldr	r0, [r7, #0]
 800245c:	f004 fe28 	bl	80070b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f004 fea5 	bl	80071b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	687e      	ldr	r6, [r7, #4]
 8002474:	466d      	mov	r5, sp
 8002476:	f106 0410 	add.w	r4, r6, #16
 800247a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800247c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800247e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002486:	e885 0003 	stmia.w	r5, {r0, r1}
 800248a:	1d33      	adds	r3, r6, #4
 800248c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248e:	6838      	ldr	r0, [r7, #0]
 8002490:	f005 f80c 	bl	80074ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a6:	bf00      	nop
 80024a8:	0800a6f4 	.word	0x0800a6f4

080024ac <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af04      	add	r7, sp, #16
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	70fb      	strb	r3, [r7, #3]
 80024be:	460b      	mov	r3, r1
 80024c0:	70bb      	strb	r3, [r7, #2]
 80024c2:	4613      	mov	r3, r2
 80024c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_HCD_HC_Init+0x28>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e076      	b.n	80025c2 <HAL_HCD_HC_Init+0x116>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	333d      	adds	r3, #61	; 0x3d
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3338      	adds	r3, #56	; 0x38
 80024fc:	787a      	ldrb	r2, [r7, #1]
 80024fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3340      	adds	r3, #64	; 0x40
 800250e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002510:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	3339      	adds	r3, #57	; 0x39
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	333f      	adds	r3, #63	; 0x3f
 8002532:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002536:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	78ba      	ldrb	r2, [r7, #2]
 800253c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002540:	b2d0      	uxtb	r0, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	333a      	adds	r3, #58	; 0x3a
 800254e:	4602      	mov	r2, r0
 8002550:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002552:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002556:	2b00      	cmp	r3, #0
 8002558:	da09      	bge.n	800256e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	333b      	adds	r3, #59	; 0x3b
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e008      	b.n	8002580 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	333b      	adds	r3, #59	; 0x3b
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	333c      	adds	r3, #60	; 0x3c
 800258e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002592:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	787c      	ldrb	r4, [r7, #1]
 800259a:	78ba      	ldrb	r2, [r7, #2]
 800259c:	78f9      	ldrb	r1, [r7, #3]
 800259e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4623      	mov	r3, r4
 80025b0:	f005 f8f6 	bl	80077a0 <USB_HC_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}

080025ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_HCD_HC_Halt+0x1e>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e00f      	b.n	8002608 <HAL_HCD_HC_Halt+0x3e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	4611      	mov	r1, r2
 80025f8:	4618      	mov	r0, r3
 80025fa:	f005 fb32 	bl	8007c62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002606:	7bfb      	ldrb	r3, [r7, #15]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4603      	mov	r3, r0
 8002620:	70fb      	strb	r3, [r7, #3]
 8002622:	460b      	mov	r3, r1
 8002624:	70bb      	strb	r3, [r7, #2]
 8002626:	4613      	mov	r3, r2
 8002628:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	333b      	adds	r3, #59	; 0x3b
 8002638:	78ba      	ldrb	r2, [r7, #2]
 800263a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	333f      	adds	r3, #63	; 0x3f
 800264a:	787a      	ldrb	r2, [r7, #1]
 800264c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800264e:	7c3b      	ldrb	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d112      	bne.n	800267a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3342      	adds	r3, #66	; 0x42
 8002662:	2203      	movs	r2, #3
 8002664:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333d      	adds	r3, #61	; 0x3d
 8002674:	7f3a      	ldrb	r2, [r7, #28]
 8002676:	701a      	strb	r2, [r3, #0]
 8002678:	e008      	b.n	800268c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3342      	adds	r3, #66	; 0x42
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b03      	cmp	r3, #3
 8002690:	f200 80c6 	bhi.w	8002820 <HAL_HCD_HC_SubmitRequest+0x210>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	080026ad 	.word	0x080026ad
 80026a0:	0800280d 	.word	0x0800280d
 80026a4:	08002711 	.word	0x08002711
 80026a8:	0800278f 	.word	0x0800278f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80026ac:	7c3b      	ldrb	r3, [r7, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	f040 80b8 	bne.w	8002824 <HAL_HCD_HC_SubmitRequest+0x214>
 80026b4:	78bb      	ldrb	r3, [r7, #2]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 80b4 	bne.w	8002824 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80026bc:	8b3b      	ldrh	r3, [r7, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3355      	adds	r3, #85	; 0x55
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3355      	adds	r3, #85	; 0x55
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d109      	bne.n	80026fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	3342      	adds	r3, #66	; 0x42
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026fa:	e093      	b.n	8002824 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3342      	adds	r3, #66	; 0x42
 800270a:	2202      	movs	r2, #2
 800270c:	701a      	strb	r2, [r3, #0]
      break;
 800270e:	e089      	b.n	8002824 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002710:	78bb      	ldrb	r3, [r7, #2]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11d      	bne.n	8002752 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3355      	adds	r3, #85	; 0x55
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3342      	adds	r3, #66	; 0x42
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800273c:	e073      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3342      	adds	r3, #66	; 0x42
 800274c:	2202      	movs	r2, #2
 800274e:	701a      	strb	r2, [r3, #0]
      break;
 8002750:	e069      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3354      	adds	r3, #84	; 0x54
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	3342      	adds	r3, #66	; 0x42
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
      break;
 8002778:	e055      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3342      	adds	r3, #66	; 0x42
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
      break;
 800278c:	e04b      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800278e:	78bb      	ldrb	r3, [r7, #2]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d11d      	bne.n	80027d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3355      	adds	r3, #85	; 0x55
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d109      	bne.n	80027bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3342      	adds	r3, #66	; 0x42
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027ba:	e034      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3342      	adds	r3, #66	; 0x42
 80027ca:	2202      	movs	r2, #2
 80027cc:	701a      	strb	r2, [r3, #0]
      break;
 80027ce:	e02a      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027d0:	78fb      	ldrb	r3, [r7, #3]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3354      	adds	r3, #84	; 0x54
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3342      	adds	r3, #66	; 0x42
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
      break;
 80027f6:	e016      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3342      	adds	r3, #66	; 0x42
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
      break;
 800280a:	e00c      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3342      	adds	r3, #66	; 0x42
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
      break;
 800281e:	e002      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002820:	bf00      	nop
 8002822:	e000      	b.n	8002826 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002824:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	212c      	movs	r1, #44	; 0x2c
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	4413      	add	r3, r2
 8002832:	3344      	adds	r3, #68	; 0x44
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	8b3a      	ldrh	r2, [r7, #24]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	202c      	movs	r0, #44	; 0x2c
 8002840:	fb00 f303 	mul.w	r3, r0, r3
 8002844:	440b      	add	r3, r1
 8002846:	334c      	adds	r3, #76	; 0x4c
 8002848:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3360      	adds	r3, #96	; 0x60
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3350      	adds	r3, #80	; 0x50
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3339      	adds	r3, #57	; 0x39
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	222c      	movs	r2, #44	; 0x2c
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	3338      	adds	r3, #56	; 0x38
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	18d1      	adds	r1, r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	f005 f886 	bl	80079bc <USB_HC_StartXfer>
 80028b0:	4603      	mov	r3, r0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop

080028bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 fda9 	bl	800742a <USB_GetMode>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f040 80f6 	bne.w	8002acc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f004 fd8d 	bl	8007404 <USB_ReadInterrupts>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80ec 	beq.w	8002aca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fd84 	bl	8007404 <USB_ReadInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002906:	d104      	bne.n	8002912 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002910:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fd74 	bl	8007404 <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002926:	d104      	bne.n	8002932 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002930:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fd64 	bl	8007404 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002942:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002946:	d104      	bne.n	8002952 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002950:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f004 fd54 	bl	8007404 <USB_ReadInterrupts>
 800295c:	4603      	mov	r3, r0
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d103      	bne.n	800296e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f004 fd46 	bl	8007404 <USB_ReadInterrupts>
 8002978:	4603      	mov	r3, r0
 800297a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800297e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002982:	d11c      	bne.n	80029be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800298c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800299e:	2110      	movs	r1, #16
 80029a0:	6938      	ldr	r0, [r7, #16]
 80029a2:	f004 fc55 	bl	8007250 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80029a6:	6938      	ldr	r0, [r7, #16]
 80029a8:	f004 fc76 	bl	8007298 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 fe2e 	bl	8007614 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f007 fb01 	bl	8009fc0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fd1e 	bl	8007404 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d2:	d102      	bne.n	80029da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f001 fa03 	bl	8003de0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fd10 	bl	8007404 <USB_ReadInterrupts>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d106      	bne.n	80029fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f007 faca 	bl	8009f88 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2208      	movs	r2, #8
 80029fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f004 fcff 	bl	8007404 <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b10      	cmp	r3, #16
 8002a0e:	d101      	bne.n	8002a14 <HAL_HCD_IRQHandler+0x158>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <HAL_HCD_IRQHandler+0x15a>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0210 	bic.w	r2, r2, #16
 8002a28:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f001 f906 	bl	8003c3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0210 	orr.w	r2, r2, #16
 8002a3e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 fcdd 	bl	8007404 <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a54:	d13a      	bne.n	8002acc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f005 f8f0 	bl	8007c40 <USB_HC_ReadInterrupt>
 8002a60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	e025      	b.n	8002ab4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d018      	beq.n	8002aae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a92:	d106      	bne.n	8002aa2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8ab 	bl	8002bf6 <HCD_HC_IN_IRQHandler>
 8002aa0:	e005      	b.n	8002aae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fcc6 	bl	800343a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3d4      	bcc.n	8002a68 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	e000      	b.n	8002acc <HAL_HCD_IRQHandler+0x210>
      return;
 8002aca:	bf00      	nop
    }
  }
}
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_HCD_Start+0x16>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e013      	b.n	8002b10 <HAL_HCD_Start+0x3e>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 fdf0 	bl	80076dc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 fb36 	bl	8007172 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_HCD_Stop+0x16>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e00d      	b.n	8002b4a <HAL_HCD_Stop+0x32>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f005 f9ea 	bl	8007f14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f004 fd92 	bl	8007688 <USB_ResetPort>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3360      	adds	r3, #96	; 0x60
 8002b88:	781b      	ldrb	r3, [r3, #0]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3350      	adds	r3, #80	; 0x50
 8002bb0:	681b      	ldr	r3, [r3, #0]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fdd6 	bl	800777c <USB_GetCurrentFrame>
 8002bd0:	4603      	mov	r3, r0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 fdb1 	bl	800774e <USB_GetHostSpeed>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d119      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	461a      	mov	r2, r3
 8002c34:	2304      	movs	r3, #4
 8002c36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	0151      	lsls	r1, r2, #5
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	440a      	add	r2, r1
 8002c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c52:	f043 0302 	orr.w	r3, r3, #2
 8002c56:	60d3      	str	r3, [r2, #12]
 8002c58:	e101      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d12b      	bne.n	8002cca <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3361      	adds	r3, #97	; 0x61
 8002c94:	2207      	movs	r2, #7
 8002c96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	0151      	lsls	r1, r2, #5
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	440a      	add	r2, r1
 8002cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f004 ffcd 	bl	8007c62 <USB_HC_Halt>
 8002cc8:	e0c9      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d109      	bne.n	8002cf4 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	461a      	mov	r2, r3
 8002cee:	2320      	movs	r3, #32
 8002cf0:	6093      	str	r3, [r2, #8]
 8002cf2:	e0b4      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d133      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	0151      	lsls	r1, r2, #5
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	440a      	add	r2, r1
 8002d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d24:	f043 0302 	orr.w	r3, r3, #2
 8002d28:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	212c      	movs	r1, #44	; 0x2c
 8002d30:	fb01 f303 	mul.w	r3, r1, r3
 8002d34:	4413      	add	r3, r2
 8002d36:	3361      	adds	r3, #97	; 0x61
 8002d38:	2205      	movs	r2, #5
 8002d3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f004 ff79 	bl	8007c62 <USB_HC_Halt>
 8002d70:	e075      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d88:	d134      	bne.n	8002df4 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	0151      	lsls	r1, r2, #5
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	440a      	add	r2, r1
 8002da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3361      	adds	r3, #97	; 0x61
 8002db8:	2208      	movs	r2, #8
 8002dba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2310      	movs	r3, #16
 8002dcc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002de0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f004 ff38 	bl	8007c62 <USB_HC_Halt>
 8002df2:	e034      	b.n	8002e5e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	2b80      	cmp	r3, #128	; 0x80
 8002e08:	d129      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	0151      	lsls	r1, r2, #5
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	440a      	add	r2, r1
 8002e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3361      	adds	r3, #97	; 0x61
 8002e38:	2206      	movs	r2, #6
 8002e3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 ff0b 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e58:	461a      	mov	r2, r3
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e74:	d122      	bne.n	8002ebc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fede 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eb8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002eba:	e2ba      	b.n	8003432 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 811b 	bne.w	800310a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d019      	beq.n	8002f10 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3348      	adds	r3, #72	; 0x48
 8002eea:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	202c      	movs	r0, #44	; 0x2c
 8002f06:	fb00 f303 	mul.w	r3, r0, r3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3350      	adds	r3, #80	; 0x50
 8002f0e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3361      	adds	r3, #97	; 0x61
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	335c      	adds	r3, #92	; 0x5c
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2301      	movs	r3, #1
 8002f44:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	333f      	adds	r3, #63	; 0x3f
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	333f      	adds	r3, #63	; 0x3f
 8002f68:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d121      	bne.n	8002fb2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	0151      	lsls	r1, r2, #5
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	440a      	add	r2, r1
 8002f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 fe62 	bl	8007c62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	015a      	lsls	r2, r3, #5
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002faa:	461a      	mov	r2, r3
 8002fac:	2310      	movs	r3, #16
 8002fae:	6093      	str	r3, [r2, #8]
 8002fb0:	e066      	b.n	8003080 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	333f      	adds	r3, #63	; 0x3f
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d127      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fe4:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3360      	adds	r3, #96	; 0x60
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	b2d9      	uxtb	r1, r3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	202c      	movs	r0, #44	; 0x2c
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	4413      	add	r3, r2
 8003008:	3360      	adds	r3, #96	; 0x60
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f006 ffe4 	bl	8009fdc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003014:	e034      	b.n	8003080 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	333f      	adds	r3, #63	; 0x3f
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d12a      	bne.n	8003080 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3360      	adds	r3, #96	; 0x60
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3354      	adds	r3, #84	; 0x54
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f083 0301 	eor.w	r3, r3, #1
 8003050:	b2d8      	uxtb	r0, r3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	3354      	adds	r3, #84	; 0x54
 8003060:	4602      	mov	r2, r0
 8003062:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	b2d9      	uxtb	r1, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	202c      	movs	r0, #44	; 0x2c
 800306e:	fb00 f303 	mul.w	r3, r0, r3
 8003072:	4413      	add	r3, r2
 8003074:	3360      	adds	r3, #96	; 0x60
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f006 ffae 	bl	8009fdc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d12b      	bne.n	80030e0 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3348      	adds	r3, #72	; 0x48
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	202c      	movs	r0, #44	; 0x2c
 800309e:	fb00 f202 	mul.w	r2, r0, r2
 80030a2:	440a      	add	r2, r1
 80030a4:	3240      	adds	r2, #64	; 0x40
 80030a6:	8812      	ldrh	r2, [r2, #0]
 80030a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 81be 	beq.w	8003432 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	212c      	movs	r1, #44	; 0x2c
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	3354      	adds	r3, #84	; 0x54
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	f083 0301 	eor.w	r3, r3, #1
 80030ca:	b2d8      	uxtb	r0, r3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3354      	adds	r3, #84	; 0x54
 80030da:	4602      	mov	r2, r0
 80030dc:	701a      	strb	r2, [r3, #0]
}
 80030de:	e1a8      	b.n	8003432 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3354      	adds	r3, #84	; 0x54
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	f083 0301 	eor.w	r3, r3, #1
 80030f4:	b2d8      	uxtb	r0, r3
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	212c      	movs	r1, #44	; 0x2c
 80030fc:	fb01 f303 	mul.w	r3, r1, r3
 8003100:	4413      	add	r3, r2
 8003102:	3354      	adds	r3, #84	; 0x54
 8003104:	4602      	mov	r2, r0
 8003106:	701a      	strb	r2, [r3, #0]
}
 8003108:	e193      	b.n	8003432 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b02      	cmp	r3, #2
 800311e:	f040 8106 	bne.w	800332e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	0151      	lsls	r1, r2, #5
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	440a      	add	r2, r1
 8003138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800313c:	f023 0302 	bic.w	r3, r3, #2
 8003140:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3361      	adds	r3, #97	; 0x61
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d109      	bne.n	800316a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3360      	adds	r3, #96	; 0x60
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e0c9      	b.n	80032fe <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3361      	adds	r3, #97	; 0x61
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b05      	cmp	r3, #5
 800317c:	d109      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3360      	adds	r3, #96	; 0x60
 800318c:	2205      	movs	r2, #5
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e0b5      	b.n	80032fe <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3361      	adds	r3, #97	; 0x61
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d009      	beq.n	80031ba <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	3361      	adds	r3, #97	; 0x61
 80031b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d150      	bne.n	800325c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	335c      	adds	r3, #92	; 0x5c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	202c      	movs	r0, #44	; 0x2c
 80031d2:	fb00 f303 	mul.w	r3, r0, r3
 80031d6:	440b      	add	r3, r1
 80031d8:	335c      	adds	r3, #92	; 0x5c
 80031da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	335c      	adds	r3, #92	; 0x5c
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d912      	bls.n	8003216 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	335c      	adds	r3, #92	; 0x5c
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	212c      	movs	r1, #44	; 0x2c
 8003208:	fb01 f303 	mul.w	r3, r1, r3
 800320c:	4413      	add	r3, r2
 800320e:	3360      	adds	r3, #96	; 0x60
 8003210:	2204      	movs	r2, #4
 8003212:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003214:	e073      	b.n	80032fe <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3360      	adds	r3, #96	; 0x60
 8003224:	2202      	movs	r2, #2
 8003226:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800323e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003246:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800325a:	e050      	b.n	80032fe <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3361      	adds	r3, #97	; 0x61
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d122      	bne.n	80032b6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	3360      	adds	r3, #96	; 0x60
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003298:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ae:	461a      	mov	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e023      	b.n	80032fe <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	3361      	adds	r3, #97	; 0x61
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b07      	cmp	r3, #7
 80032c8:	d119      	bne.n	80032fe <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	335c      	adds	r3, #92	; 0x5c
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	202c      	movs	r0, #44	; 0x2c
 80032e2:	fb00 f303 	mul.w	r3, r0, r3
 80032e6:	440b      	add	r3, r1
 80032e8:	335c      	adds	r3, #92	; 0x5c
 80032ea:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3360      	adds	r3, #96	; 0x60
 80032fa:	2204      	movs	r2, #4
 80032fc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4413      	add	r3, r2
 8003306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330a:	461a      	mov	r2, r3
 800330c:	2302      	movs	r3, #2
 800330e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	b2d9      	uxtb	r1, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	202c      	movs	r0, #44	; 0x2c
 800331a:	fb00 f303 	mul.w	r3, r0, r3
 800331e:	4413      	add	r3, r2
 8003320:	3360      	adds	r3, #96	; 0x60
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f006 fe58 	bl	8009fdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800332c:	e081      	b.n	8003432 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b10      	cmp	r3, #16
 8003342:	d176      	bne.n	8003432 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	333f      	adds	r3, #63	; 0x3f
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d121      	bne.n	800339c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	335c      	adds	r3, #92	; 0x5c
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	0151      	lsls	r1, r2, #5
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	440a      	add	r2, r1
 8003380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003384:	f043 0302 	orr.w	r3, r3, #2
 8003388:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f004 fc64 	bl	8007c62 <USB_HC_Halt>
 800339a:	e041      	b.n	8003420 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	333f      	adds	r3, #63	; 0x3f
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	333f      	adds	r3, #63	; 0x3f
 80033be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d12d      	bne.n	8003420 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	212c      	movs	r1, #44	; 0x2c
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	4413      	add	r3, r2
 80033d0:	335c      	adds	r3, #92	; 0x5c
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d120      	bne.n	8003420 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3361      	adds	r3, #97	; 0x61
 80033ec:	2203      	movs	r2, #3
 80033ee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	0151      	lsls	r1, r2, #5
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	440a      	add	r2, r1
 8003406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f004 fc21 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	461a      	mov	r2, r3
 800342e:	2310      	movs	r3, #16
 8003430:	6093      	str	r3, [r2, #8]
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b04      	cmp	r3, #4
 8003468:	d119      	bne.n	800349e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	461a      	mov	r2, r3
 8003478:	2304      	movs	r3, #4
 800347a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	0151      	lsls	r1, r2, #5
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	440a      	add	r2, r1
 8003492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003496:	f043 0302 	orr.w	r3, r3, #2
 800349a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800349c:	e3ca      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b20      	cmp	r3, #32
 80034b2:	d13e      	bne.n	8003532 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c0:	461a      	mov	r2, r3
 80034c2:	2320      	movs	r3, #32
 80034c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	333d      	adds	r3, #61	; 0x3d
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	f040 83ac 	bne.w	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	333d      	adds	r3, #61	; 0x3d
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	212c      	movs	r1, #44	; 0x2c
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	4413      	add	r3, r2
 80034fa:	3360      	adds	r3, #96	; 0x60
 80034fc:	2202      	movs	r2, #2
 80034fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	0151      	lsls	r1, r2, #5
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	440a      	add	r2, r1
 8003516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800351a:	f043 0302 	orr.w	r3, r3, #2
 800351e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f004 fb99 	bl	8007c62 <USB_HC_Halt>
}
 8003530:	e380      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003548:	d122      	bne.n	8003590 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	0151      	lsls	r1, r2, #5
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	440a      	add	r2, r1
 8003560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f004 fb74 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800358c:	6093      	str	r3, [r2, #8]
}
 800358e:	e351      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d150      	bne.n	8003648 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	335c      	adds	r3, #92	; 0x5c
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	d111      	bne.n	80035f2 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	333d      	adds	r3, #61	; 0x3d
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	2340      	movs	r3, #64	; 0x40
 80035f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	0151      	lsls	r1, r2, #5
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	440a      	add	r2, r1
 8003608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f004 fb20 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	461a      	mov	r2, r3
 8003630:	2301      	movs	r3, #1
 8003632:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3361      	adds	r3, #97	; 0x61
 8003642:	2201      	movs	r2, #1
 8003644:	701a      	strb	r2, [r3, #0]
}
 8003646:	e2f5      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d13c      	bne.n	80036d8 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	3361      	adds	r3, #97	; 0x61
 800366c:	2204      	movs	r2, #4
 800366e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	333d      	adds	r3, #61	; 0x3d
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	212c      	movs	r1, #44	; 0x2c
 8003688:	fb01 f303 	mul.w	r3, r1, r3
 800368c:	4413      	add	r3, r2
 800368e:	335c      	adds	r3, #92	; 0x5c
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 facf 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	461a      	mov	r2, r3
 80036d2:	2340      	movs	r3, #64	; 0x40
 80036d4:	6093      	str	r3, [r2, #8]
}
 80036d6:	e2ad      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d12a      	bne.n	8003744 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	461a      	mov	r2, r3
 80036fc:	2308      	movs	r3, #8
 80036fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	440a      	add	r2, r1
 8003716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800371a:	f043 0302 	orr.w	r3, r3, #2
 800371e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f004 fa99 	bl	8007c62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	3361      	adds	r3, #97	; 0x61
 800373e:	2205      	movs	r2, #5
 8003740:	701a      	strb	r2, [r3, #0]
}
 8003742:	e277      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4413      	add	r3, r2
 800374c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b10      	cmp	r3, #16
 8003758:	d150      	bne.n	80037fc <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	335c      	adds	r3, #92	; 0x5c
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	212c      	movs	r1, #44	; 0x2c
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3361      	adds	r3, #97	; 0x61
 800377a:	2203      	movs	r2, #3
 800377c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	212c      	movs	r1, #44	; 0x2c
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	4413      	add	r3, r2
 800378a:	333d      	adds	r3, #61	; 0x3d
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d112      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	212c      	movs	r1, #44	; 0x2c
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	4413      	add	r3, r2
 800379e:	333c      	adds	r3, #60	; 0x3c
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	333d      	adds	r3, #61	; 0x3d
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037d2:	f043 0302 	orr.w	r3, r3, #2
 80037d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f004 fa3d 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	461a      	mov	r2, r3
 80037f6:	2310      	movs	r3, #16
 80037f8:	6093      	str	r3, [r2, #8]
}
 80037fa:	e21b      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d174      	bne.n	80038fc <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d121      	bne.n	800385e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3361      	adds	r3, #97	; 0x61
 8003828:	2206      	movs	r2, #6
 800382a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	0151      	lsls	r1, r2, #5
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	440a      	add	r2, r1
 8003842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f004 fa03 	bl	8007c62 <USB_HC_Halt>
 800385c:	e044      	b.n	80038e8 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	212c      	movs	r1, #44	; 0x2c
 8003864:	fb01 f303 	mul.w	r3, r1, r3
 8003868:	4413      	add	r3, r2
 800386a:	335c      	adds	r3, #92	; 0x5c
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	202c      	movs	r0, #44	; 0x2c
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	440b      	add	r3, r1
 800387c:	335c      	adds	r3, #92	; 0x5c
 800387e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	212c      	movs	r1, #44	; 0x2c
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	4413      	add	r3, r2
 800388c:	335c      	adds	r3, #92	; 0x5c
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d920      	bls.n	80038d6 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	212c      	movs	r1, #44	; 0x2c
 800389a:	fb01 f303 	mul.w	r3, r1, r3
 800389e:	4413      	add	r3, r2
 80038a0:	335c      	adds	r3, #92	; 0x5c
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3360      	adds	r3, #96	; 0x60
 80038b4:	2204      	movs	r2, #4
 80038b6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	b2d9      	uxtb	r1, r3
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	202c      	movs	r0, #44	; 0x2c
 80038c2:	fb00 f303 	mul.w	r3, r0, r3
 80038c6:	4413      	add	r3, r2
 80038c8:	3360      	adds	r3, #96	; 0x60
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f006 fb84 	bl	8009fdc <HAL_HCD_HC_NotifyURBChange_Callback>
 80038d4:	e008      	b.n	80038e8 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	212c      	movs	r1, #44	; 0x2c
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	3360      	adds	r3, #96	; 0x60
 80038e4:	2202      	movs	r2, #2
 80038e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	461a      	mov	r2, r3
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	6093      	str	r3, [r2, #8]
}
 80038fa:	e19b      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003912:	d134      	bne.n	800397e <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	440a      	add	r2, r1
 800392a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800392e:	f043 0302 	orr.w	r3, r3, #2
 8003932:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f004 f98f 	bl	8007c62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	015a      	lsls	r2, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	4413      	add	r3, r2
 800394c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003950:	461a      	mov	r2, r3
 8003952:	2310      	movs	r3, #16
 8003954:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	461a      	mov	r2, r3
 8003964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003968:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	3361      	adds	r3, #97	; 0x61
 8003978:	2208      	movs	r2, #8
 800397a:	701a      	strb	r2, [r3, #0]
}
 800397c:	e15a      	b.n	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	f040 814f 	bne.w	8003c34 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039b0:	f023 0302 	bic.w	r3, r3, #2
 80039b4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3361      	adds	r3, #97	; 0x61
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d17d      	bne.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	3360      	adds	r3, #96	; 0x60
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	333f      	adds	r3, #63	; 0x3f
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d00a      	beq.n	8003a06 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	333f      	adds	r3, #63	; 0x3f
 80039fe:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	f040 8100 	bne.w	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d113      	bne.n	8003a36 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	212c      	movs	r1, #44	; 0x2c
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	3355      	adds	r3, #85	; 0x55
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	f083 0301 	eor.w	r3, r3, #1
 8003a22:	b2d8      	uxtb	r0, r3
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	3355      	adds	r3, #85	; 0x55
 8003a32:	4602      	mov	r2, r0
 8003a34:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f040 80e3 	bne.w	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	334c      	adds	r3, #76	; 0x4c
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80d8 	beq.w	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	212c      	movs	r1, #44	; 0x2c
 8003a5c:	fb01 f303 	mul.w	r3, r1, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	334c      	adds	r3, #76	; 0x4c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	202c      	movs	r0, #44	; 0x2c
 8003a6c:	fb00 f202 	mul.w	r2, r0, r2
 8003a70:	440a      	add	r2, r1
 8003a72:	3240      	adds	r2, #64	; 0x40
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	4413      	add	r3, r2
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	202c      	movs	r0, #44	; 0x2c
 8003a80:	fb00 f202 	mul.w	r2, r0, r2
 8003a84:	440a      	add	r2, r1
 8003a86:	3240      	adds	r2, #64	; 0x40
 8003a88:	8812      	ldrh	r2, [r2, #0]
 8003a8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80b5 	beq.w	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3355      	adds	r3, #85	; 0x55
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	f083 0301 	eor.w	r3, r3, #1
 8003ab0:	b2d8      	uxtb	r0, r3
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	212c      	movs	r1, #44	; 0x2c
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	3355      	adds	r3, #85	; 0x55
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	e09f      	b.n	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3361      	adds	r3, #97	; 0x61
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d109      	bne.n	8003aee <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3360      	adds	r3, #96	; 0x60
 8003ae8:	2202      	movs	r2, #2
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	e08b      	b.n	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	212c      	movs	r1, #44	; 0x2c
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	3361      	adds	r3, #97	; 0x61
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d109      	bne.n	8003b16 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	212c      	movs	r1, #44	; 0x2c
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3360      	adds	r3, #96	; 0x60
 8003b10:	2202      	movs	r2, #2
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e077      	b.n	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	3361      	adds	r3, #97	; 0x61
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b05      	cmp	r3, #5
 8003b28:	d109      	bne.n	8003b3e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	212c      	movs	r1, #44	; 0x2c
 8003b30:	fb01 f303 	mul.w	r3, r1, r3
 8003b34:	4413      	add	r3, r2
 8003b36:	3360      	adds	r3, #96	; 0x60
 8003b38:	2205      	movs	r2, #5
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	e063      	b.n	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	212c      	movs	r1, #44	; 0x2c
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	4413      	add	r3, r2
 8003b4a:	3361      	adds	r3, #97	; 0x61
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d009      	beq.n	8003b66 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	212c      	movs	r1, #44	; 0x2c
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3361      	adds	r3, #97	; 0x61
 8003b60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d14f      	bne.n	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	335c      	adds	r3, #92	; 0x5c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	202c      	movs	r0, #44	; 0x2c
 8003b7e:	fb00 f303 	mul.w	r3, r0, r3
 8003b82:	440b      	add	r3, r1
 8003b84:	335c      	adds	r3, #92	; 0x5c
 8003b86:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	335c      	adds	r3, #92	; 0x5c
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d912      	bls.n	8003bc2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	335c      	adds	r3, #92	; 0x5c
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3360      	adds	r3, #96	; 0x60
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e021      	b.n	8003c06 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	212c      	movs	r1, #44	; 0x2c
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	3360      	adds	r3, #96	; 0x60
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bea:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	461a      	mov	r2, r3
 8003c14:	2302      	movs	r3, #2
 8003c16:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	b2d9      	uxtb	r1, r3
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	202c      	movs	r0, #44	; 0x2c
 8003c22:	fb00 f303 	mul.w	r3, r0, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	3360      	adds	r3, #96	; 0x60
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f006 f9d4 	bl	8009fdc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c34:	bf00      	nop
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	0c5b      	lsrs	r3, r3, #17
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c70:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d004      	beq.n	8003c82 <HCD_RXQLVL_IRQHandler+0x46>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	f000 80a9 	beq.w	8003dd2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c80:	e0aa      	b.n	8003dd8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a6 	beq.w	8003dd6 <HCD_RXQLVL_IRQHandler+0x19a>
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	212c      	movs	r1, #44	; 0x2c
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	4413      	add	r3, r2
 8003c96:	3344      	adds	r3, #68	; 0x44
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 809b 	beq.w	8003dd6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	212c      	movs	r1, #44	; 0x2c
 8003ca6:	fb01 f303 	mul.w	r3, r1, r3
 8003caa:	4413      	add	r3, r2
 8003cac:	3350      	adds	r3, #80	; 0x50
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	441a      	add	r2, r3
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	202c      	movs	r0, #44	; 0x2c
 8003cba:	fb00 f303 	mul.w	r3, r0, r3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	334c      	adds	r3, #76	; 0x4c
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d87a      	bhi.n	8003dbe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3344      	adds	r3, #68	; 0x44
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	b292      	uxth	r2, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f003 fb37 	bl	8007354 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	212c      	movs	r1, #44	; 0x2c
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3344      	adds	r3, #68	; 0x44
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	202c      	movs	r0, #44	; 0x2c
 8003d00:	fb00 f303 	mul.w	r3, r0, r3
 8003d04:	440b      	add	r3, r1
 8003d06:	3344      	adds	r3, #68	; 0x44
 8003d08:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3350      	adds	r3, #80	; 0x50
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	441a      	add	r2, r3
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	202c      	movs	r0, #44	; 0x2c
 8003d24:	fb00 f303 	mul.w	r3, r0, r3
 8003d28:	440b      	add	r3, r1
 8003d2a:	3350      	adds	r3, #80	; 0x50
 8003d2c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	0cdb      	lsrs	r3, r3, #19
 8003d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d42:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	212c      	movs	r1, #44	; 0x2c
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	3340      	adds	r3, #64	; 0x40
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d13c      	bne.n	8003dd6 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d039      	beq.n	8003dd6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d78:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d80:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	212c      	movs	r1, #44	; 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3354      	adds	r3, #84	; 0x54
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f083 0301 	eor.w	r3, r3, #1
 8003da8:	b2d8      	uxtb	r0, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3354      	adds	r3, #84	; 0x54
 8003db8:	4602      	mov	r2, r0
 8003dba:	701a      	strb	r2, [r3, #0]
      break;
 8003dbc:	e00b      	b.n	8003dd6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	212c      	movs	r1, #44	; 0x2c
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3360      	adds	r3, #96	; 0x60
 8003dcc:	2204      	movs	r2, #4
 8003dce:	701a      	strb	r2, [r3, #0]
      break;
 8003dd0:	e001      	b.n	8003dd6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003dd6:	bf00      	nop
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003e0c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d10b      	bne.n	8003e30 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d102      	bne.n	8003e28 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f006 f8be 	bl	8009fa4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f043 0302 	orr.w	r3, r3, #2
 8003e2e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d132      	bne.n	8003ea0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f043 0308 	orr.w	r3, r3, #8
 8003e40:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d126      	bne.n	8003e9a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d113      	bne.n	8003e7c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003e5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e5e:	d106      	bne.n	8003e6e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2102      	movs	r1, #2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 fbd4 	bl	8007614 <USB_InitFSLSPClkSel>
 8003e6c:	e011      	b.n	8003e92 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f003 fbcd 	bl	8007614 <USB_InitFSLSPClkSel>
 8003e7a:	e00a      	b.n	8003e92 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d106      	bne.n	8003e92 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003e90:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f006 f8b0 	bl	8009ff8 <HAL_HCD_PortEnabled_Callback>
 8003e98:	e002      	b.n	8003ea0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f006 f8ba 	bl	800a014 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d103      	bne.n	8003eb2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f043 0320 	orr.w	r3, r3, #32
 8003eb0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	6013      	str	r3, [r2, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1be      	b.n	8004258 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a9f      	ldr	r2, [pc, #636]	; (800415c <HAL_I2C_Init+0x294>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_I2C_Init+0x3a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a9d      	ldr	r2, [pc, #628]	; (8004160 <HAL_I2C_Init+0x298>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_I2C_Init+0x3a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a9c      	ldr	r2, [pc, #624]	; (8004164 <HAL_I2C_Init+0x29c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_I2C_Init+0x3a>
 8003ef8:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003efc:	489a      	ldr	r0, [pc, #616]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003efe:	f7fc fe26 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <HAL_I2C_Init+0x4c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a97      	ldr	r2, [pc, #604]	; (800416c <HAL_I2C_Init+0x2a4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d904      	bls.n	8003f1e <HAL_I2C_Init+0x56>
 8003f14:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003f18:	4893      	ldr	r0, [pc, #588]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003f1a:	f7fc fe18 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_I2C_Init+0x72>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f2e:	d004      	beq.n	8003f3a <HAL_I2C_Init+0x72>
 8003f30:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003f34:	488c      	ldr	r0, [pc, #560]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003f36:	f7fc fe0a 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_I2C_Init+0x8c>
 8003f4a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003f4e:	4886      	ldr	r0, [pc, #536]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003f50:	f7fc fdfd 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f5c:	d009      	beq.n	8003f72 <HAL_I2C_Init+0xaa>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f66:	d004      	beq.n	8003f72 <HAL_I2C_Init+0xaa>
 8003f68:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003f6c:	487e      	ldr	r0, [pc, #504]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003f6e:	f7fc fdee 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_I2C_Init+0xc4>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d004      	beq.n	8003f8c <HAL_I2C_Init+0xc4>
 8003f82:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003f86:	4878      	ldr	r0, [pc, #480]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003f88:	f7fc fde1 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_I2C_Init+0xda>
 8003f98:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003f9c:	4872      	ldr	r0, [pc, #456]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003f9e:	f7fc fdd6 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d008      	beq.n	8003fbc <HAL_I2C_Init+0xf4>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d004      	beq.n	8003fbc <HAL_I2C_Init+0xf4>
 8003fb2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003fb6:	486c      	ldr	r0, [pc, #432]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003fb8:	f7fc fdc9 	bl	8000b4e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_I2C_Init+0x10e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	2b80      	cmp	r3, #128	; 0x80
 8003fca:	d004      	beq.n	8003fd6 <HAL_I2C_Init+0x10e>
 8003fcc:	f240 11c7 	movw	r1, #455	; 0x1c7
 8003fd0:	4865      	ldr	r0, [pc, #404]	; (8004168 <HAL_I2C_Init+0x2a0>)
 8003fd2:	f7fc fdbc 	bl	8000b4e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fc fbdc 	bl	80007a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004028:	f000 febe 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 800402c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a4f      	ldr	r2, [pc, #316]	; (8004170 <HAL_I2C_Init+0x2a8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d807      	bhi.n	8004048 <HAL_I2C_Init+0x180>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a4e      	ldr	r2, [pc, #312]	; (8004174 <HAL_I2C_Init+0x2ac>)
 800403c:	4293      	cmp	r3, r2
 800403e:	bf94      	ite	ls
 8004040:	2301      	movls	r3, #1
 8004042:	2300      	movhi	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	e006      	b.n	8004056 <HAL_I2C_Init+0x18e>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a4b      	ldr	r2, [pc, #300]	; (8004178 <HAL_I2C_Init+0x2b0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e0fc      	b.n	8004258 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4a46      	ldr	r2, [pc, #280]	; (800417c <HAL_I2C_Init+0x2b4>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	0c9b      	lsrs	r3, r3, #18
 8004068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a38      	ldr	r2, [pc, #224]	; (8004170 <HAL_I2C_Init+0x2a8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d802      	bhi.n	8004098 <HAL_I2C_Init+0x1d0>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	3301      	adds	r3, #1
 8004096:	e009      	b.n	80040ac <HAL_I2C_Init+0x1e4>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	4a37      	ldr	r2, [pc, #220]	; (8004180 <HAL_I2C_Init+0x2b8>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	3301      	adds	r3, #1
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	492a      	ldr	r1, [pc, #168]	; (8004170 <HAL_I2C_Init+0x2a8>)
 80040c8:	428b      	cmp	r3, r1
 80040ca:	d819      	bhi.n	8004100 <HAL_I2C_Init+0x238>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1e59      	subs	r1, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040da:	1c59      	adds	r1, r3, #1
 80040dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80040e0:	400b      	ands	r3, r1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_I2C_Init+0x234>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1e59      	subs	r1, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fa:	e066      	b.n	80041ca <HAL_I2C_Init+0x302>
 80040fc:	2304      	movs	r3, #4
 80040fe:	e064      	b.n	80041ca <HAL_I2C_Init+0x302>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d111      	bne.n	800412c <HAL_I2C_Init+0x264>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	1e58      	subs	r0, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	440b      	add	r3, r1
 8004116:	fbb0 f3f3 	udiv	r3, r0, r3
 800411a:	3301      	adds	r3, #1
 800411c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e012      	b.n	8004152 <HAL_I2C_Init+0x28a>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	0099      	lsls	r1, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004142:	3301      	adds	r3, #1
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	2b00      	cmp	r3, #0
 800414a:	bf0c      	ite	eq
 800414c:	2301      	moveq	r3, #1
 800414e:	2300      	movne	r3, #0
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_I2C_Init+0x2bc>
 8004156:	2301      	movs	r3, #1
 8004158:	e037      	b.n	80041ca <HAL_I2C_Init+0x302>
 800415a:	bf00      	nop
 800415c:	40005400 	.word	0x40005400
 8004160:	40005800 	.word	0x40005800
 8004164:	40005c00 	.word	0x40005c00
 8004168:	0800a72c 	.word	0x0800a72c
 800416c:	00061a80 	.word	0x00061a80
 8004170:	000186a0 	.word	0x000186a0
 8004174:	001e847f 	.word	0x001e847f
 8004178:	003d08ff 	.word	0x003d08ff
 800417c:	431bde83 	.word	0x431bde83
 8004180:	10624dd3 	.word	0x10624dd3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10e      	bne.n	80041aa <HAL_I2C_Init+0x2e2>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e58      	subs	r0, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	440b      	add	r3, r1
 800419a:	fbb0 f3f3 	udiv	r3, r0, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a8:	e00f      	b.n	80041ca <HAL_I2C_Init+0x302>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1e58      	subs	r0, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	0099      	lsls	r1, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c0:	3301      	adds	r3, #1
 80041c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	6809      	ldr	r1, [r1, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6911      	ldr	r1, [r2, #16]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	68d2      	ldr	r2, [r2, #12]
 8004204:	4311      	orrs	r1, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	430b      	orrs	r3, r1
 800420c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e316      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d903      	bls.n	8004282 <HAL_RCC_OscConfig+0x22>
 800427a:	21e8      	movs	r1, #232	; 0xe8
 800427c:	48a3      	ldr	r0, [pc, #652]	; (800450c <HAL_RCC_OscConfig+0x2ac>)
 800427e:	f7fc fc66 	bl	8000b4e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8088 	beq.w	80043a0 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00d      	beq.n	80042b4 <HAL_RCC_OscConfig+0x54>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a0:	d008      	beq.n	80042b4 <HAL_RCC_OscConfig+0x54>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042aa:	d003      	beq.n	80042b4 <HAL_RCC_OscConfig+0x54>
 80042ac:	21ed      	movs	r1, #237	; 0xed
 80042ae:	4897      	ldr	r0, [pc, #604]	; (800450c <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	f7fc fc4d 	bl	8000b4e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b4:	4b96      	ldr	r3, [pc, #600]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f003 030c 	and.w	r3, r3, #12
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d00c      	beq.n	80042da <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c0:	4b93      	ldr	r3, [pc, #588]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d112      	bne.n	80042f2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042cc:	4b90      	ldr	r3, [pc, #576]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d8:	d10b      	bne.n	80042f2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042da:	4b8d      	ldr	r3, [pc, #564]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d05b      	beq.n	800439e <HAL_RCC_OscConfig+0x13e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d157      	bne.n	800439e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e2d6      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0xaa>
 80042fc:	4b84      	ldr	r3, [pc, #528]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a83      	ldr	r2, [pc, #524]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	e01d      	b.n	8004346 <HAL_RCC_OscConfig+0xe6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004312:	d10c      	bne.n	800432e <HAL_RCC_OscConfig+0xce>
 8004314:	4b7e      	ldr	r3, [pc, #504]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a7d      	ldr	r2, [pc, #500]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 800431a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b7b      	ldr	r3, [pc, #492]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a7a      	ldr	r2, [pc, #488]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0xe6>
 800432e:	4b78      	ldr	r3, [pc, #480]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a77      	ldr	r2, [pc, #476]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b75      	ldr	r3, [pc, #468]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a74      	ldr	r2, [pc, #464]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d013      	beq.n	8004376 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fc fef3 	bl	8001138 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004356:	f7fc feef 	bl	8001138 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b64      	cmp	r3, #100	; 0x64
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e29b      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004368:	4b69      	ldr	r3, [pc, #420]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0xf6>
 8004374:	e014      	b.n	80043a0 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fc fedf 	bl	8001138 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800437e:	f7fc fedb 	bl	8001138 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b64      	cmp	r3, #100	; 0x64
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e287      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004390:	4b5f      	ldr	r3, [pc, #380]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f0      	bne.n	800437e <HAL_RCC_OscConfig+0x11e>
 800439c:	e000      	b.n	80043a0 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d079      	beq.n	80044a0 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCC_OscConfig+0x166>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d004      	beq.n	80043c6 <HAL_RCC_OscConfig+0x166>
 80043bc:	f240 111f 	movw	r1, #287	; 0x11f
 80043c0:	4852      	ldr	r0, [pc, #328]	; (800450c <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	f7fc fbc4 	bl	8000b4e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b1f      	cmp	r3, #31
 80043cc:	d904      	bls.n	80043d8 <HAL_RCC_OscConfig+0x178>
 80043ce:	f44f 7190 	mov.w	r1, #288	; 0x120
 80043d2:	484e      	ldr	r0, [pc, #312]	; (800450c <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	f7fc fbbb 	bl	8000b4e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d8:	4b4d      	ldr	r3, [pc, #308]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e4:	4b4a      	ldr	r3, [pc, #296]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d11c      	bne.n	800442a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043f0:	4b47      	ldr	r3, [pc, #284]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d116      	bne.n	800442a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fc:	4b44      	ldr	r3, [pc, #272]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_OscConfig+0x1b4>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e245      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004414:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	493b      	ldr	r1, [pc, #236]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004428:	e03a      	b.n	80044a0 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d020      	beq.n	8004474 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004432:	4b38      	ldr	r3, [pc, #224]	; (8004514 <HAL_RCC_OscConfig+0x2b4>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fc fe7e 	bl	8001138 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004440:	f7fc fe7a 	bl	8001138 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e226      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004452:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445e:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4928      	ldr	r1, [pc, #160]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	600b      	str	r3, [r1, #0]
 8004472:	e015      	b.n	80044a0 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCC_OscConfig+0x2b4>)
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447a:	f7fc fe5d 	bl	8001138 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004482:	f7fc fe59 	bl	8001138 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e205      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004494:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f0      	bne.n	8004482 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d046      	beq.n	800453a <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_OscConfig+0x266>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d004      	beq.n	80044c6 <HAL_RCC_OscConfig+0x266>
 80044bc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80044c0:	4812      	ldr	r0, [pc, #72]	; (800450c <HAL_RCC_OscConfig+0x2ac>)
 80044c2:	f7fc fb44 	bl	8000b4e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_RCC_OscConfig+0x2b8>)
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fc fe30 	bl	8001138 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fc fe2c 	bl	8001138 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1d8      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ee:	4b08      	ldr	r3, [pc, #32]	; (8004510 <HAL_RCC_OscConfig+0x2b0>)
 80044f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x27c>
 80044fa:	e01e      	b.n	800453a <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_RCC_OscConfig+0x2b8>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004502:	f7fc fe19 	bl	8001138 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004508:	e011      	b.n	800452e <HAL_RCC_OscConfig+0x2ce>
 800450a:	bf00      	nop
 800450c:	0800a764 	.word	0x0800a764
 8004510:	40023800 	.word	0x40023800
 8004514:	42470000 	.word	0x42470000
 8004518:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800451c:	f7fc fe0c 	bl	8001138 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1b8      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452e:	4b97      	ldr	r3, [pc, #604]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a8 	beq.w	8004698 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004548:	2300      	movs	r3, #0
 800454a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00c      	beq.n	800456e <HAL_RCC_OscConfig+0x30e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d008      	beq.n	800456e <HAL_RCC_OscConfig+0x30e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b05      	cmp	r3, #5
 8004562:	d004      	beq.n	800456e <HAL_RCC_OscConfig+0x30e>
 8004564:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004568:	4889      	ldr	r0, [pc, #548]	; (8004790 <HAL_RCC_OscConfig+0x530>)
 800456a:	f7fc faf0 	bl	8000b4e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456e:	4b87      	ldr	r3, [pc, #540]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10f      	bne.n	800459a <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	4b83      	ldr	r3, [pc, #524]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	4a82      	ldr	r2, [pc, #520]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004588:	6413      	str	r3, [r2, #64]	; 0x40
 800458a:	4b80      	ldr	r3, [pc, #512]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004592:	60bb      	str	r3, [r7, #8]
 8004594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459a:	4b7e      	ldr	r3, [pc, #504]	; (8004794 <HAL_RCC_OscConfig+0x534>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d118      	bne.n	80045d8 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a6:	4b7b      	ldr	r3, [pc, #492]	; (8004794 <HAL_RCC_OscConfig+0x534>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a7a      	ldr	r2, [pc, #488]	; (8004794 <HAL_RCC_OscConfig+0x534>)
 80045ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b2:	f7fc fdc1 	bl	8001138 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ba:	f7fc fdbd 	bl	8001138 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e169      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045cc:	4b71      	ldr	r3, [pc, #452]	; (8004794 <HAL_RCC_OscConfig+0x534>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d106      	bne.n	80045ee <HAL_RCC_OscConfig+0x38e>
 80045e0:	4b6a      	ldr	r3, [pc, #424]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	4a69      	ldr	r2, [pc, #420]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70
 80045ec:	e01c      	b.n	8004628 <HAL_RCC_OscConfig+0x3c8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x3b0>
 80045f6:	4b65      	ldr	r3, [pc, #404]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a64      	ldr	r2, [pc, #400]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 80045fc:	f043 0304 	orr.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	4b62      	ldr	r3, [pc, #392]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	4a61      	ldr	r2, [pc, #388]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6713      	str	r3, [r2, #112]	; 0x70
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0x3c8>
 8004610:	4b5e      	ldr	r3, [pc, #376]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a5d      	ldr	r2, [pc, #372]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	4b5b      	ldr	r3, [pc, #364]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	4a5a      	ldr	r2, [pc, #360]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fc fd82 	bl	8001138 <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fc fd7e 	bl	8001138 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e128      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	4b4f      	ldr	r3, [pc, #316]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ee      	beq.n	8004638 <HAL_RCC_OscConfig+0x3d8>
 800465a:	e014      	b.n	8004686 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465c:	f7fc fd6c 	bl	8001138 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fc fd68 	bl	8001138 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e112      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467a:	4b44      	ldr	r3, [pc, #272]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ee      	bne.n	8004664 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d105      	bne.n	8004698 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468c:	4b3f      	ldr	r3, [pc, #252]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	4a3e      	ldr	r2, [pc, #248]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 8004692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00c      	beq.n	80046ba <HAL_RCC_OscConfig+0x45a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d008      	beq.n	80046ba <HAL_RCC_OscConfig+0x45a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d004      	beq.n	80046ba <HAL_RCC_OscConfig+0x45a>
 80046b0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80046b4:	4836      	ldr	r0, [pc, #216]	; (8004790 <HAL_RCC_OscConfig+0x530>)
 80046b6:	f7fc fa4a 	bl	8000b4e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 80ed 	beq.w	800489e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCC_OscConfig+0x52c>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 030c 	and.w	r3, r3, #12
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	f000 80ae 	beq.w	800482e <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	f040 8092 	bne.w	8004800 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <HAL_RCC_OscConfig+0x498>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ec:	d004      	beq.n	80046f8 <HAL_RCC_OscConfig+0x498>
 80046ee:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80046f2:	4827      	ldr	r0, [pc, #156]	; (8004790 <HAL_RCC_OscConfig+0x530>)
 80046f4:	f7fc fa2b 	bl	8000b4e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	2b3f      	cmp	r3, #63	; 0x3f
 80046fe:	d904      	bls.n	800470a <HAL_RCC_OscConfig+0x4aa>
 8004700:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004704:	4822      	ldr	r0, [pc, #136]	; (8004790 <HAL_RCC_OscConfig+0x530>)
 8004706:	f7fc fa22 	bl	8000b4e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b31      	cmp	r3, #49	; 0x31
 8004710:	d904      	bls.n	800471c <HAL_RCC_OscConfig+0x4bc>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800471a:	d904      	bls.n	8004726 <HAL_RCC_OscConfig+0x4c6>
 800471c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004720:	481b      	ldr	r0, [pc, #108]	; (8004790 <HAL_RCC_OscConfig+0x530>)
 8004722:	f7fc fa14 	bl	8000b4e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2b02      	cmp	r3, #2
 800472c:	d010      	beq.n	8004750 <HAL_RCC_OscConfig+0x4f0>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	2b04      	cmp	r3, #4
 8004734:	d00c      	beq.n	8004750 <HAL_RCC_OscConfig+0x4f0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	2b06      	cmp	r3, #6
 800473c:	d008      	beq.n	8004750 <HAL_RCC_OscConfig+0x4f0>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	2b08      	cmp	r3, #8
 8004744:	d004      	beq.n	8004750 <HAL_RCC_OscConfig+0x4f0>
 8004746:	f240 11db 	movw	r1, #475	; 0x1db
 800474a:	4811      	ldr	r0, [pc, #68]	; (8004790 <HAL_RCC_OscConfig+0x530>)
 800474c:	f7fc f9ff 	bl	8000b4e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	2b01      	cmp	r3, #1
 8004756:	d903      	bls.n	8004760 <HAL_RCC_OscConfig+0x500>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	2b0f      	cmp	r3, #15
 800475e:	d904      	bls.n	800476a <HAL_RCC_OscConfig+0x50a>
 8004760:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004764:	480a      	ldr	r0, [pc, #40]	; (8004790 <HAL_RCC_OscConfig+0x530>)
 8004766:	f7fc f9f2 	bl	8000b4e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_OscConfig+0x538>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fc fce2 	bl	8001138 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	e011      	b.n	800479c <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7fc fcde 	bl	8001138 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d90a      	bls.n	800479c <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e08a      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800
 8004790:	0800a764 	.word	0x0800a764
 8004794:	40007000 	.word	0x40007000
 8004798:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479c:	4b42      	ldr	r3, [pc, #264]	; (80048a8 <HAL_RCC_OscConfig+0x648>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e7      	bne.n	8004778 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	019b      	lsls	r3, r3, #6
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	3b01      	subs	r3, #1
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	061b      	lsls	r3, r3, #24
 80047cc:	4936      	ldr	r1, [pc, #216]	; (80048a8 <HAL_RCC_OscConfig+0x648>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d2:	4b36      	ldr	r3, [pc, #216]	; (80048ac <HAL_RCC_OscConfig+0x64c>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fc fcae 	bl	8001138 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fc fcaa 	bl	8001138 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e056      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_RCC_OscConfig+0x648>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x580>
 80047fe:	e04e      	b.n	800489e <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <HAL_RCC_OscConfig+0x64c>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004806:	f7fc fc97 	bl	8001138 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480e:	f7fc fc93 	bl	8001138 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e03f      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004820:	4b21      	ldr	r3, [pc, #132]	; (80048a8 <HAL_RCC_OscConfig+0x648>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f0      	bne.n	800480e <HAL_RCC_OscConfig+0x5ae>
 800482c:	e037      	b.n	800489e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e032      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800483a:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_RCC_OscConfig+0x648>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d028      	beq.n	800489a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d121      	bne.n	800489a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d11a      	bne.n	800489a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800486a:	4013      	ands	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004870:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004872:	4293      	cmp	r3, r2
 8004874:	d111      	bne.n	800489a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	085b      	lsrs	r3, r3, #1
 8004882:	3b01      	subs	r3, #1
 8004884:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d107      	bne.n	800489a <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800
 80048ac:	42470060 	.word	0x42470060

080048b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e174      	b.n	8004bae <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x24>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b0f      	cmp	r3, #15
 80048d2:	d904      	bls.n	80048de <HAL_RCC_ClockConfig+0x2e>
 80048d4:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80048d8:	487b      	ldr	r0, [pc, #492]	; (8004ac8 <HAL_RCC_ClockConfig+0x218>)
 80048da:	f7fc f938 	bl	8000b4e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d019      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d016      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d013      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d010      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d00d      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b05      	cmp	r3, #5
 8004900:	d00a      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d007      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b07      	cmp	r3, #7
 800490c:	d004      	beq.n	8004918 <HAL_RCC_ClockConfig+0x68>
 800490e:	f240 215d 	movw	r1, #605	; 0x25d
 8004912:	486d      	ldr	r0, [pc, #436]	; (8004ac8 <HAL_RCC_ClockConfig+0x218>)
 8004914:	f7fc f91b 	bl	8000b4e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4b6c      	ldr	r3, [pc, #432]	; (8004acc <HAL_RCC_ClockConfig+0x21c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d90c      	bls.n	8004940 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b69      	ldr	r3, [pc, #420]	; (8004acc <HAL_RCC_ClockConfig+0x21c>)
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_ClockConfig+0x21c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e136      	b.n	8004bae <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d049      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d005      	beq.n	8004964 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004958:	4b5d      	ldr	r3, [pc, #372]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	4a5c      	ldr	r2, [pc, #368]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 800495e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004962:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004970:	4b57      	ldr	r3, [pc, #348]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a56      	ldr	r2, [pc, #344]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004976:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800497a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d024      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b80      	cmp	r3, #128	; 0x80
 800498a:	d020      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b90      	cmp	r3, #144	; 0x90
 8004992:	d01c      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2ba0      	cmp	r3, #160	; 0xa0
 800499a:	d018      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2bb0      	cmp	r3, #176	; 0xb0
 80049a2:	d014      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	2bc0      	cmp	r3, #192	; 0xc0
 80049aa:	d010      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2bd0      	cmp	r3, #208	; 0xd0
 80049b2:	d00c      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2be0      	cmp	r3, #224	; 0xe0
 80049ba:	d008      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2bf0      	cmp	r3, #240	; 0xf0
 80049c2:	d004      	beq.n	80049ce <HAL_RCC_ClockConfig+0x11e>
 80049c4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80049c8:	483f      	ldr	r0, [pc, #252]	; (8004ac8 <HAL_RCC_ClockConfig+0x218>)
 80049ca:	f7fc f8c0 	bl	8000b4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ce:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	493d      	ldr	r1, [pc, #244]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d059      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d010      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x166>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d00c      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x166>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d008      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x166>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d004      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x166>
 8004a0c:	f240 2187 	movw	r1, #647	; 0x287
 8004a10:	482d      	ldr	r0, [pc, #180]	; (8004ac8 <HAL_RCC_ClockConfig+0x218>)
 8004a12:	f7fc f89c 	bl	8000b4e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d119      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e0bf      	b.n	8004bae <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d003      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3e:	4b24      	ldr	r3, [pc, #144]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0af      	b.n	8004bae <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4e:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0a7      	b.n	8004bae <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4919      	ldr	r1, [pc, #100]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a70:	f7fc fb62 	bl	8001138 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a78:	f7fc fb5e 	bl	8001138 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e08f      	b.n	8004bae <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_RCC_ClockConfig+0x220>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 020c 	and.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d1eb      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <HAL_RCC_ClockConfig+0x21c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d212      	bcs.n	8004ad4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <HAL_RCC_ClockConfig+0x21c>)
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_ClockConfig+0x21c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d007      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e072      	b.n	8004bae <HAL_RCC_ClockConfig+0x2fe>
 8004ac8:	0800a764 	.word	0x0800a764
 8004acc:	40023c00 	.word	0x40023c00
 8004ad0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d025      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d018      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x26a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d013      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x26a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004afa:	d00e      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x26a>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b04:	d009      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x26a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004b0e:	d004      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x26a>
 8004b10:	f240 21c5 	movw	r1, #709	; 0x2c5
 8004b14:	4828      	ldr	r0, [pc, #160]	; (8004bb8 <HAL_RCC_ClockConfig+0x308>)
 8004b16:	f7fc f81a 	bl	8000b4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1a:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <HAL_RCC_ClockConfig+0x30c>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4925      	ldr	r1, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x30c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0308 	and.w	r3, r3, #8
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d026      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d018      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2c2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	d013      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2c2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004b52:	d00e      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2c2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b5c:	d009      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2c2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004b66:	d004      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2c2>
 8004b68:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8004b6c:	4812      	ldr	r0, [pc, #72]	; (8004bb8 <HAL_RCC_ClockConfig+0x308>)
 8004b6e:	f7fb ffee 	bl	8000b4e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <HAL_RCC_ClockConfig+0x30c>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	490e      	ldr	r1, [pc, #56]	; (8004bbc <HAL_RCC_ClockConfig+0x30c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b86:	f000 f821 	bl	8004bcc <HAL_RCC_GetSysClockFreq>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <HAL_RCC_ClockConfig+0x30c>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	091b      	lsrs	r3, r3, #4
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	490a      	ldr	r1, [pc, #40]	; (8004bc0 <HAL_RCC_ClockConfig+0x310>)
 8004b98:	5ccb      	ldrb	r3, [r1, r3]
 8004b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <HAL_RCC_ClockConfig+0x314>)
 8004ba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba2:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x318>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fc fa82 	bl	80010b0 <HAL_InitTick>

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	0800a764 	.word	0x0800a764
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	0800a84c 	.word	0x0800a84c
 8004bc4:	20000000 	.word	0x20000000
 8004bc8:	20000004 	.word	0x20000004

08004bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be4:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d00d      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x40>
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	f200 80bd 	bhi.w	8004d70 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bfe:	e0b7      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c00:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c02:	60bb      	str	r3, [r7, #8]
       break;
 8004c04:	e0b7      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c06:	4b61      	ldr	r3, [pc, #388]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004c08:	60bb      	str	r3, [r7, #8]
      break;
 8004c0a:	e0b4      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c0c:	4b5d      	ldr	r3, [pc, #372]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c16:	4b5b      	ldr	r3, [pc, #364]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d04d      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c22:	4b58      	ldr	r3, [pc, #352]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	ea02 0800 	and.w	r8, r2, r0
 8004c3a:	ea03 0901 	and.w	r9, r3, r1
 8004c3e:	4640      	mov	r0, r8
 8004c40:	4649      	mov	r1, r9
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	014b      	lsls	r3, r1, #5
 8004c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c50:	0142      	lsls	r2, r0, #5
 8004c52:	4610      	mov	r0, r2
 8004c54:	4619      	mov	r1, r3
 8004c56:	ebb0 0008 	subs.w	r0, r0, r8
 8004c5a:	eb61 0109 	sbc.w	r1, r1, r9
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	018b      	lsls	r3, r1, #6
 8004c68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c6c:	0182      	lsls	r2, r0, #6
 8004c6e:	1a12      	subs	r2, r2, r0
 8004c70:	eb63 0301 	sbc.w	r3, r3, r1
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	00d9      	lsls	r1, r3, #3
 8004c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c82:	00d0      	lsls	r0, r2, #3
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	eb12 0208 	adds.w	r2, r2, r8
 8004c8c:	eb43 0309 	adc.w	r3, r3, r9
 8004c90:	f04f 0000 	mov.w	r0, #0
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	0259      	lsls	r1, r3, #9
 8004c9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c9e:	0250      	lsls	r0, r2, #9
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	f7fb fa92 	bl	80001d8 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e04a      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	ea02 0400 	and.w	r4, r2, r0
 8004cd6:	ea03 0501 	and.w	r5, r3, r1
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	014b      	lsls	r3, r1, #5
 8004ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cec:	0142      	lsls	r2, r0, #5
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	1b00      	subs	r0, r0, r4
 8004cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	018b      	lsls	r3, r1, #6
 8004d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d06:	0182      	lsls	r2, r0, #6
 8004d08:	1a12      	subs	r2, r2, r0
 8004d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d0e:	f04f 0000 	mov.w	r0, #0
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	00d9      	lsls	r1, r3, #3
 8004d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d1c:	00d0      	lsls	r0, r2, #3
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	1912      	adds	r2, r2, r4
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	0299      	lsls	r1, r3, #10
 8004d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d36:	0290      	lsls	r0, r2, #10
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	f7fb fa46 	bl	80001d8 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	60bb      	str	r3, [r7, #8]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d72:	60bb      	str	r3, [r7, #8]
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	68bb      	ldr	r3, [r7, #8]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	00f42400 	.word	0x00f42400
 8004d8c:	007a1200 	.word	0x007a1200

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000

08004da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dac:	f7ff fff0 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0a9b      	lsrs	r3, r3, #10
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800a85c 	.word	0x0800a85c

08004dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e18c      	b.n	80050fc <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a75      	ldr	r2, [pc, #468]	; (8004fbc <HAL_SPI_Init+0x1ec>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d018      	beq.n	8004e1e <HAL_SPI_Init+0x4e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a73      	ldr	r2, [pc, #460]	; (8004fc0 <HAL_SPI_Init+0x1f0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_SPI_Init+0x4e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a72      	ldr	r2, [pc, #456]	; (8004fc4 <HAL_SPI_Init+0x1f4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00e      	beq.n	8004e1e <HAL_SPI_Init+0x4e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a70      	ldr	r2, [pc, #448]	; (8004fc8 <HAL_SPI_Init+0x1f8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d009      	beq.n	8004e1e <HAL_SPI_Init+0x4e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6f      	ldr	r2, [pc, #444]	; (8004fcc <HAL_SPI_Init+0x1fc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d004      	beq.n	8004e1e <HAL_SPI_Init+0x4e>
 8004e14:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004e18:	486d      	ldr	r0, [pc, #436]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004e1a:	f7fb fe98 	bl	8000b4e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_SPI_Init+0x6a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2e:	d004      	beq.n	8004e3a <HAL_SPI_Init+0x6a>
 8004e30:	f240 1143 	movw	r1, #323	; 0x143
 8004e34:	4866      	ldr	r0, [pc, #408]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004e36:	f7fb fe8a 	bl	8000b4e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00e      	beq.n	8004e60 <HAL_SPI_Init+0x90>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4a:	d009      	beq.n	8004e60 <HAL_SPI_Init+0x90>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	d004      	beq.n	8004e60 <HAL_SPI_Init+0x90>
 8004e56:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004e5a:	485d      	ldr	r0, [pc, #372]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004e5c:	f7fb fe77 	bl	8000b4e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e68:	d008      	beq.n	8004e7c <HAL_SPI_Init+0xac>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <HAL_SPI_Init+0xac>
 8004e72:	f240 1145 	movw	r1, #325	; 0x145
 8004e76:	4856      	ldr	r0, [pc, #344]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004e78:	f7fb fe69 	bl	8000b4e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e84:	d00d      	beq.n	8004ea2 <HAL_SPI_Init+0xd2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_SPI_Init+0xd2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e96:	d004      	beq.n	8004ea2 <HAL_SPI_Init+0xd2>
 8004e98:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004e9c:	484c      	ldr	r0, [pc, #304]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004e9e:	f7fb fe56 	bl	8000b4e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d01c      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2b10      	cmp	r3, #16
 8004eb8:	d018      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	2b18      	cmp	r3, #24
 8004ec0:	d014      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d010      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	2b28      	cmp	r3, #40	; 0x28
 8004ed0:	d00c      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b30      	cmp	r3, #48	; 0x30
 8004ed8:	d008      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b38      	cmp	r3, #56	; 0x38
 8004ee0:	d004      	beq.n	8004eec <HAL_SPI_Init+0x11c>
 8004ee2:	f240 1147 	movw	r1, #327	; 0x147
 8004ee6:	483a      	ldr	r0, [pc, #232]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004ee8:	f7fb fe31 	bl	8000b4e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_SPI_Init+0x136>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d004      	beq.n	8004f06 <HAL_SPI_Init+0x136>
 8004efc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f00:	4833      	ldr	r0, [pc, #204]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004f02:	f7fb fe24 	bl	8000b4e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d008      	beq.n	8004f20 <HAL_SPI_Init+0x150>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d004      	beq.n	8004f20 <HAL_SPI_Init+0x150>
 8004f16:	f240 1149 	movw	r1, #329	; 0x149
 8004f1a:	482d      	ldr	r0, [pc, #180]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004f1c:	f7fb fe17 	bl	8000b4e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d155      	bne.n	8004fd4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_SPI_Init+0x172>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d004      	beq.n	8004f42 <HAL_SPI_Init+0x172>
 8004f38:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004f3c:	4824      	ldr	r0, [pc, #144]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004f3e:	f7fb fe06 	bl	8000b4e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d008      	beq.n	8004f5c <HAL_SPI_Init+0x18c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d004      	beq.n	8004f5c <HAL_SPI_Init+0x18c>
 8004f52:	f240 114d 	movw	r1, #333	; 0x14d
 8004f56:	481e      	ldr	r0, [pc, #120]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004f58:	f7fb fdf9 	bl	8000b4e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f64:	d125      	bne.n	8004fb2 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d05d      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d059      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d055      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	2b18      	cmp	r3, #24
 8004f84:	d051      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d04d      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	2b28      	cmp	r3, #40	; 0x28
 8004f94:	d049      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	2b30      	cmp	r3, #48	; 0x30
 8004f9c:	d045      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	2b38      	cmp	r3, #56	; 0x38
 8004fa4:	d041      	beq.n	800502a <HAL_SPI_Init+0x25a>
 8004fa6:	f240 1151 	movw	r1, #337	; 0x151
 8004faa:	4809      	ldr	r0, [pc, #36]	; (8004fd0 <HAL_SPI_Init+0x200>)
 8004fac:	f7fb fdcf 	bl	8000b4e <assert_failed>
 8004fb0:	e03b      	b.n	800502a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	61da      	str	r2, [r3, #28]
 8004fb8:	e037      	b.n	800502a <HAL_SPI_Init+0x25a>
 8004fba:	bf00      	nop
 8004fbc:	40013000 	.word	0x40013000
 8004fc0:	40003800 	.word	0x40003800
 8004fc4:	40003c00 	.word	0x40003c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40015000 	.word	0x40015000
 8004fd0:	0800a79c 	.word	0x0800a79c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d020      	beq.n	800501e <HAL_SPI_Init+0x24e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d01c      	beq.n	800501e <HAL_SPI_Init+0x24e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d018      	beq.n	800501e <HAL_SPI_Init+0x24e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b18      	cmp	r3, #24
 8004ff2:	d014      	beq.n	800501e <HAL_SPI_Init+0x24e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d010      	beq.n	800501e <HAL_SPI_Init+0x24e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	2b28      	cmp	r3, #40	; 0x28
 8005002:	d00c      	beq.n	800501e <HAL_SPI_Init+0x24e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d008      	beq.n	800501e <HAL_SPI_Init+0x24e>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b38      	cmp	r3, #56	; 0x38
 8005012:	d004      	beq.n	800501e <HAL_SPI_Init+0x24e>
 8005014:	f240 115b 	movw	r1, #347	; 0x15b
 8005018:	483a      	ldr	r0, [pc, #232]	; (8005104 <HAL_SPI_Init+0x334>)
 800501a:	f7fb fd98 	bl	8000b4e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f7fb fdc3 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2202      	movs	r2, #2
 800504e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005060:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	ea42 0103 	orr.w	r1, r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 0104 	and.w	r1, r3, #4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0210 	and.w	r2, r3, #16
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	0800a79c 	.word	0x0800a79c

08005108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0a7      	b.n	800526a <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a55      	ldr	r2, [pc, #340]	; (8005274 <HAL_TIM_Base_Init+0x16c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d027      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d022      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a51      	ldr	r2, [pc, #324]	; (8005278 <HAL_TIM_Base_Init+0x170>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d01d      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a4f      	ldr	r2, [pc, #316]	; (800527c <HAL_TIM_Base_Init+0x174>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d018      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a4e      	ldr	r2, [pc, #312]	; (8005280 <HAL_TIM_Base_Init+0x178>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4c      	ldr	r2, [pc, #304]	; (8005284 <HAL_TIM_Base_Init+0x17c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00e      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a4b      	ldr	r2, [pc, #300]	; (8005288 <HAL_TIM_Base_Init+0x180>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d009      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a49      	ldr	r2, [pc, #292]	; (800528c <HAL_TIM_Base_Init+0x184>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d004      	beq.n	8005174 <HAL_TIM_Base_Init+0x6c>
 800516a:	f240 1113 	movw	r1, #275	; 0x113
 800516e:	4848      	ldr	r0, [pc, #288]	; (8005290 <HAL_TIM_Base_Init+0x188>)
 8005170:	f7fb fced 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d014      	beq.n	80051a6 <HAL_TIM_Base_Init+0x9e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b10      	cmp	r3, #16
 8005182:	d010      	beq.n	80051a6 <HAL_TIM_Base_Init+0x9e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b20      	cmp	r3, #32
 800518a:	d00c      	beq.n	80051a6 <HAL_TIM_Base_Init+0x9e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b40      	cmp	r3, #64	; 0x40
 8005192:	d008      	beq.n	80051a6 <HAL_TIM_Base_Init+0x9e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b60      	cmp	r3, #96	; 0x60
 800519a:	d004      	beq.n	80051a6 <HAL_TIM_Base_Init+0x9e>
 800519c:	f44f 718a 	mov.w	r1, #276	; 0x114
 80051a0:	483b      	ldr	r0, [pc, #236]	; (8005290 <HAL_TIM_Base_Init+0x188>)
 80051a2:	f7fb fcd4 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00e      	beq.n	80051cc <HAL_TIM_Base_Init+0xc4>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b6:	d009      	beq.n	80051cc <HAL_TIM_Base_Init+0xc4>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c0:	d004      	beq.n	80051cc <HAL_TIM_Base_Init+0xc4>
 80051c2:	f240 1115 	movw	r1, #277	; 0x115
 80051c6:	4832      	ldr	r0, [pc, #200]	; (8005290 <HAL_TIM_Base_Init+0x188>)
 80051c8:	f7fb fcc1 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_TIM_Base_Init+0xde>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d004      	beq.n	80051e6 <HAL_TIM_Base_Init+0xde>
 80051dc:	f44f 718b 	mov.w	r1, #278	; 0x116
 80051e0:	482b      	ldr	r0, [pc, #172]	; (8005290 <HAL_TIM_Base_Init+0x188>)
 80051e2:	f7fb fcb4 	bl	8000b4e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fb fe7e 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f001 fa2c 	bl	8006670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40000400 	.word	0x40000400
 800527c:	40000800 	.word	0x40000800
 8005280:	40000c00 	.word	0x40000c00
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800
 8005290:	0800a7d4 	.word	0x0800a7d4

08005294 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e0a7      	b.n	80053f6 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a55      	ldr	r2, [pc, #340]	; (8005400 <HAL_TIM_PWM_Init+0x16c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d027      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d022      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a51      	ldr	r2, [pc, #324]	; (8005404 <HAL_TIM_PWM_Init+0x170>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d01d      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a4f      	ldr	r2, [pc, #316]	; (8005408 <HAL_TIM_PWM_Init+0x174>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d018      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a4e      	ldr	r2, [pc, #312]	; (800540c <HAL_TIM_PWM_Init+0x178>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <HAL_TIM_PWM_Init+0x17c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00e      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a4b      	ldr	r2, [pc, #300]	; (8005414 <HAL_TIM_PWM_Init+0x180>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a49      	ldr	r2, [pc, #292]	; (8005418 <HAL_TIM_PWM_Init+0x184>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d004      	beq.n	8005300 <HAL_TIM_PWM_Init+0x6c>
 80052f6:	f240 5129 	movw	r1, #1321	; 0x529
 80052fa:	4848      	ldr	r0, [pc, #288]	; (800541c <HAL_TIM_PWM_Init+0x188>)
 80052fc:	f7fb fc27 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d014      	beq.n	8005332 <HAL_TIM_PWM_Init+0x9e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b10      	cmp	r3, #16
 800530e:	d010      	beq.n	8005332 <HAL_TIM_PWM_Init+0x9e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b20      	cmp	r3, #32
 8005316:	d00c      	beq.n	8005332 <HAL_TIM_PWM_Init+0x9e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d008      	beq.n	8005332 <HAL_TIM_PWM_Init+0x9e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b60      	cmp	r3, #96	; 0x60
 8005326:	d004      	beq.n	8005332 <HAL_TIM_PWM_Init+0x9e>
 8005328:	f240 512a 	movw	r1, #1322	; 0x52a
 800532c:	483b      	ldr	r0, [pc, #236]	; (800541c <HAL_TIM_PWM_Init+0x188>)
 800532e:	f7fb fc0e 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00e      	beq.n	8005358 <HAL_TIM_PWM_Init+0xc4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d009      	beq.n	8005358 <HAL_TIM_PWM_Init+0xc4>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534c:	d004      	beq.n	8005358 <HAL_TIM_PWM_Init+0xc4>
 800534e:	f240 512b 	movw	r1, #1323	; 0x52b
 8005352:	4832      	ldr	r0, [pc, #200]	; (800541c <HAL_TIM_PWM_Init+0x188>)
 8005354:	f7fb fbfb 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_TIM_PWM_Init+0xde>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	2b80      	cmp	r3, #128	; 0x80
 8005366:	d004      	beq.n	8005372 <HAL_TIM_PWM_Init+0xde>
 8005368:	f240 512c 	movw	r1, #1324	; 0x52c
 800536c:	482b      	ldr	r0, [pc, #172]	; (800541c <HAL_TIM_PWM_Init+0x188>)
 800536e:	f7fb fbee 	bl	8000b4e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f84a 	bl	8005420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f001 f966 	bl	8006670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40014000 	.word	0x40014000
 8005414:	40014400 	.word	0x40014400
 8005418:	40014800 	.word	0x40014800
 800541c:	0800a7d4 	.word	0x0800a7d4

08005420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a9e      	ldr	r2, [pc, #632]	; (80056c4 <HAL_TIM_PWM_Start_DMA+0x290>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10b      	bne.n	8005468 <HAL_TIM_PWM_Start_DMA+0x34>
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d06c      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b04      	cmp	r3, #4
 800545a:	d069      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b08      	cmp	r3, #8
 8005460:	d066      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b0c      	cmp	r3, #12
 8005466:	d063      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005470:	d10b      	bne.n	800548a <HAL_TIM_PWM_Start_DMA+0x56>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d05b      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b04      	cmp	r3, #4
 800547c:	d058      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b08      	cmp	r3, #8
 8005482:	d055      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b0c      	cmp	r3, #12
 8005488:	d052      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a8e      	ldr	r2, [pc, #568]	; (80056c8 <HAL_TIM_PWM_Start_DMA+0x294>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10b      	bne.n	80054ac <HAL_TIM_PWM_Start_DMA+0x78>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04a      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b04      	cmp	r3, #4
 800549e:	d047      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d044      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b0c      	cmp	r3, #12
 80054aa:	d041      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a86      	ldr	r2, [pc, #536]	; (80056cc <HAL_TIM_PWM_Start_DMA+0x298>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10b      	bne.n	80054ce <HAL_TIM_PWM_Start_DMA+0x9a>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d039      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d036      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d033      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d030      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a7f      	ldr	r2, [pc, #508]	; (80056d0 <HAL_TIM_PWM_Start_DMA+0x29c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10b      	bne.n	80054f0 <HAL_TIM_PWM_Start_DMA+0xbc>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d028      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d025      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d022      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b0c      	cmp	r3, #12
 80054ee:	d01f      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a77      	ldr	r2, [pc, #476]	; (80056d4 <HAL_TIM_PWM_Start_DMA+0x2a0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d105      	bne.n	8005506 <HAL_TIM_PWM_Start_DMA+0xd2>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d017      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b04      	cmp	r3, #4
 8005504:	d014      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a73      	ldr	r2, [pc, #460]	; (80056d8 <HAL_TIM_PWM_Start_DMA+0x2a4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d102      	bne.n	8005516 <HAL_TIM_PWM_Start_DMA+0xe2>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00c      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a70      	ldr	r2, [pc, #448]	; (80056dc <HAL_TIM_PWM_Start_DMA+0x2a8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d102      	bne.n	8005526 <HAL_TIM_PWM_Start_DMA+0xf2>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <HAL_TIM_PWM_Start_DMA+0xfc>
 8005526:	f240 61b3 	movw	r1, #1715	; 0x6b3
 800552a:	486d      	ldr	r0, [pc, #436]	; (80056e0 <HAL_TIM_PWM_Start_DMA+0x2ac>)
 800552c:	f7fb fb0f 	bl	8000b4e <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_TIM_PWM_Start_DMA+0x116>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e022      	b.n	8005590 <HAL_TIM_PWM_Start_DMA+0x15c>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d109      	bne.n	8005564 <HAL_TIM_PWM_Start_DMA+0x130>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e015      	b.n	8005590 <HAL_TIM_PWM_Start_DMA+0x15c>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b08      	cmp	r3, #8
 8005568:	d109      	bne.n	800557e <HAL_TIM_PWM_Start_DMA+0x14a>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	e008      	b.n	8005590 <HAL_TIM_PWM_Start_DMA+0x15c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	bf0c      	ite	eq
 800558a:	2301      	moveq	r3, #1
 800558c:	2300      	movne	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_TIM_PWM_Start_DMA+0x164>
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
 8005596:	e173      	b.n	8005880 <HAL_TIM_PWM_Start_DMA+0x44c>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_TIM_PWM_Start_DMA+0x17e>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	bf0c      	ite	eq
 80055aa:	2301      	moveq	r3, #1
 80055ac:	2300      	movne	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	e022      	b.n	80055f8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d109      	bne.n	80055cc <HAL_TIM_PWM_Start_DMA+0x198>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e015      	b.n	80055f8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d109      	bne.n	80055e6 <HAL_TIM_PWM_Start_DMA+0x1b2>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e008      	b.n	80055f8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d024      	beq.n	8005646 <HAL_TIM_PWM_Start_DMA+0x212>
  {
    if ((pData == NULL) && (Length > 0U))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <HAL_TIM_PWM_Start_DMA+0x1d8>
 8005602:	887b      	ldrh	r3, [r7, #2]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_TIM_PWM_Start_DMA+0x1d8>
    {
      return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e139      	b.n	8005880 <HAL_TIM_PWM_Start_DMA+0x44c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <HAL_TIM_PWM_Start_DMA+0x1e8>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800561a:	e016      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x216>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d104      	bne.n	800562c <HAL_TIM_PWM_Start_DMA+0x1f8>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800562a:	e00e      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x216>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b08      	cmp	r3, #8
 8005630:	d104      	bne.n	800563c <HAL_TIM_PWM_Start_DMA+0x208>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800563a:	e006      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x216>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005644:	e001      	b.n	800564a <HAL_TIM_PWM_Start_DMA+0x216>
    }
  }
  else
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e11a      	b.n	8005880 <HAL_TIM_PWM_Start_DMA+0x44c>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b0c      	cmp	r3, #12
 800564e:	f200 80c4 	bhi.w	80057da <HAL_TIM_PWM_Start_DMA+0x3a6>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_TIM_PWM_Start_DMA+0x224>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800568d 	.word	0x0800568d
 800565c:	080057db 	.word	0x080057db
 8005660:	080057db 	.word	0x080057db
 8005664:	080057db 	.word	0x080057db
 8005668:	08005703 	.word	0x08005703
 800566c:	080057db 	.word	0x080057db
 8005670:	080057db 	.word	0x080057db
 8005674:	080057db 	.word	0x080057db
 8005678:	0800574b 	.word	0x0800574b
 800567c:	080057db 	.word	0x080057db
 8005680:	080057db 	.word	0x080057db
 8005684:	080057db 	.word	0x080057db
 8005688:	08005793 	.word	0x08005793
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	4a14      	ldr	r2, [pc, #80]	; (80056e4 <HAL_TIM_PWM_Start_DMA+0x2b0>)
 8005692:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <HAL_TIM_PWM_Start_DMA+0x2b4>)
 800569a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	4a12      	ldr	r2, [pc, #72]	; (80056ec <HAL_TIM_PWM_Start_DMA+0x2b8>)
 80056a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3334      	adds	r3, #52	; 0x34
 80056b0:	461a      	mov	r2, r3
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	f7fc f8cc 	bl	8001850 <HAL_DMA_Start_IT>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d018      	beq.n	80056f0 <HAL_TIM_PWM_Start_DMA+0x2bc>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e0de      	b.n	8005880 <HAL_TIM_PWM_Start_DMA+0x44c>
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800
 80056d0:	40000c00 	.word	0x40000c00
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800
 80056e0:	0800a7d4 	.word	0x0800a7d4
 80056e4:	0800655f 	.word	0x0800655f
 80056e8:	08006607 	.word	0x08006607
 80056ec:	080064cd 	.word	0x080064cd
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056fe:	60da      	str	r2, [r3, #12]
      break;
 8005700:	e06e      	b.n	80057e0 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	4a60      	ldr	r2, [pc, #384]	; (8005888 <HAL_TIM_PWM_Start_DMA+0x454>)
 8005708:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	4a5f      	ldr	r2, [pc, #380]	; (800588c <HAL_TIM_PWM_Start_DMA+0x458>)
 8005710:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	4a5e      	ldr	r2, [pc, #376]	; (8005890 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8005718:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3338      	adds	r3, #56	; 0x38
 8005726:	461a      	mov	r2, r3
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	f7fc f891 	bl	8001850 <HAL_DMA_Start_IT>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_TIM_PWM_Start_DMA+0x304>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e0a3      	b.n	8005880 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005746:	60da      	str	r2, [r3, #12]
      break;
 8005748:	e04a      	b.n	80057e0 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	4a4e      	ldr	r2, [pc, #312]	; (8005888 <HAL_TIM_PWM_Start_DMA+0x454>)
 8005750:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	4a4d      	ldr	r2, [pc, #308]	; (800588c <HAL_TIM_PWM_Start_DMA+0x458>)
 8005758:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	4a4c      	ldr	r2, [pc, #304]	; (8005890 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8005760:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005766:	6879      	ldr	r1, [r7, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	333c      	adds	r3, #60	; 0x3c
 800576e:	461a      	mov	r2, r3
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	f7fc f86d 	bl	8001850 <HAL_DMA_Start_IT>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_TIM_PWM_Start_DMA+0x34c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e07f      	b.n	8005880 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800578e:	60da      	str	r2, [r3, #12]
      break;
 8005790:	e026      	b.n	80057e0 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	4a3c      	ldr	r2, [pc, #240]	; (8005888 <HAL_TIM_PWM_Start_DMA+0x454>)
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	4a3b      	ldr	r2, [pc, #236]	; (800588c <HAL_TIM_PWM_Start_DMA+0x458>)
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	4a3a      	ldr	r2, [pc, #232]	; (8005890 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80057a8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3340      	adds	r3, #64	; 0x40
 80057b6:	461a      	mov	r2, r3
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	f7fc f849 	bl	8001850 <HAL_DMA_Start_IT>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_TIM_PWM_Start_DMA+0x394>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e05b      	b.n	8005880 <HAL_TIM_PWM_Start_DMA+0x44c>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057d6:	60da      	str	r2, [r3, #12]
      break;
 80057d8:	e002      	b.n	80057e0 <HAL_TIM_PWM_Start_DMA+0x3ac>
    }

    default:
      status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
      break;
 80057de:	bf00      	nop
  }

  if (status == HAL_OK)
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d14b      	bne.n	800587e <HAL_TIM_PWM_Start_DMA+0x44a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2201      	movs	r2, #1
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fa6e 	bl	8006cd0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a26      	ldr	r2, [pc, #152]	; (8005894 <HAL_TIM_PWM_Start_DMA+0x460>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d107      	bne.n	800580e <HAL_TIM_PWM_Start_DMA+0x3da>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800580c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <HAL_TIM_PWM_Start_DMA+0x460>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d018      	beq.n	800584a <HAL_TIM_PWM_Start_DMA+0x416>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d013      	beq.n	800584a <HAL_TIM_PWM_Start_DMA+0x416>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a1c      	ldr	r2, [pc, #112]	; (8005898 <HAL_TIM_PWM_Start_DMA+0x464>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00e      	beq.n	800584a <HAL_TIM_PWM_Start_DMA+0x416>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1a      	ldr	r2, [pc, #104]	; (800589c <HAL_TIM_PWM_Start_DMA+0x468>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d009      	beq.n	800584a <HAL_TIM_PWM_Start_DMA+0x416>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_TIM_PWM_Start_DMA+0x46c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d004      	beq.n	800584a <HAL_TIM_PWM_Start_DMA+0x416>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <HAL_TIM_PWM_Start_DMA+0x470>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d111      	bne.n	800586e <HAL_TIM_PWM_Start_DMA+0x43a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b06      	cmp	r3, #6
 800585a:	d010      	beq.n	800587e <HAL_TIM_PWM_Start_DMA+0x44a>
      {
        __HAL_TIM_ENABLE(htim);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586c:	e007      	b.n	800587e <HAL_TIM_PWM_Start_DMA+0x44a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f042 0201 	orr.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	0800655f 	.word	0x0800655f
 800588c:	08006607 	.word	0x08006607
 8005890:	080064cd 	.word	0x080064cd
 8005894:	40010000 	.word	0x40010000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40014000 	.word	0x40014000

080058a8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a97      	ldr	r2, [pc, #604]	; (8005b18 <HAL_TIM_PWM_Stop_DMA+0x270>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10b      	bne.n	80058d8 <HAL_TIM_PWM_Stop_DMA+0x30>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d06c      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d069      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d066      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	d063      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e0:	d10b      	bne.n	80058fa <HAL_TIM_PWM_Stop_DMA+0x52>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05b      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d058      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d055      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b0c      	cmp	r3, #12
 80058f8:	d052      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a87      	ldr	r2, [pc, #540]	; (8005b1c <HAL_TIM_PWM_Stop_DMA+0x274>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d10b      	bne.n	800591c <HAL_TIM_PWM_Stop_DMA+0x74>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d04a      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b04      	cmp	r3, #4
 800590e:	d047      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b08      	cmp	r3, #8
 8005914:	d044      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d041      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a7f      	ldr	r2, [pc, #508]	; (8005b20 <HAL_TIM_PWM_Stop_DMA+0x278>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10b      	bne.n	800593e <HAL_TIM_PWM_Stop_DMA+0x96>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d039      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b04      	cmp	r3, #4
 8005930:	d036      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d033      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b0c      	cmp	r3, #12
 800593c:	d030      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a78      	ldr	r2, [pc, #480]	; (8005b24 <HAL_TIM_PWM_Stop_DMA+0x27c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10b      	bne.n	8005960 <HAL_TIM_PWM_Stop_DMA+0xb8>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d028      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d025      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b08      	cmp	r3, #8
 8005958:	d022      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b0c      	cmp	r3, #12
 800595e:	d01f      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a70      	ldr	r2, [pc, #448]	; (8005b28 <HAL_TIM_PWM_Stop_DMA+0x280>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d105      	bne.n	8005976 <HAL_TIM_PWM_Stop_DMA+0xce>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b04      	cmp	r3, #4
 8005974:	d014      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a6c      	ldr	r2, [pc, #432]	; (8005b2c <HAL_TIM_PWM_Stop_DMA+0x284>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d102      	bne.n	8005986 <HAL_TIM_PWM_Stop_DMA+0xde>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a69      	ldr	r2, [pc, #420]	; (8005b30 <HAL_TIM_PWM_Stop_DMA+0x288>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d102      	bne.n	8005996 <HAL_TIM_PWM_Stop_DMA+0xee>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005996:	f240 7154 	movw	r1, #1876	; 0x754
 800599a:	4866      	ldr	r0, [pc, #408]	; (8005b34 <HAL_TIM_PWM_Stop_DMA+0x28c>)
 800599c:	f7fb f8d7 	bl	8000b4e <assert_failed>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b0c      	cmp	r3, #12
 80059a4:	d854      	bhi.n	8005a50 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <HAL_TIM_PWM_Stop_DMA+0x104>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059e1 	.word	0x080059e1
 80059b0:	08005a51 	.word	0x08005a51
 80059b4:	08005a51 	.word	0x08005a51
 80059b8:	08005a51 	.word	0x08005a51
 80059bc:	080059fd 	.word	0x080059fd
 80059c0:	08005a51 	.word	0x08005a51
 80059c4:	08005a51 	.word	0x08005a51
 80059c8:	08005a51 	.word	0x08005a51
 80059cc:	08005a19 	.word	0x08005a19
 80059d0:	08005a51 	.word	0x08005a51
 80059d4:	08005a51 	.word	0x08005a51
 80059d8:	08005a51 	.word	0x08005a51
 80059dc:	08005a35 	.word	0x08005a35
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fb ff91 	bl	800191c <HAL_DMA_Abort_IT>
      break;
 80059fa:	e02c      	b.n	8005a56 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a0a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fb ff83 	bl	800191c <HAL_DMA_Abort_IT>
      break;
 8005a16:	e01e      	b.n	8005a56 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a26:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fb ff75 	bl	800191c <HAL_DMA_Abort_IT>
      break;
 8005a32:	e010      	b.n	8005a56 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fb ff67 	bl	800191c <HAL_DMA_Abort_IT>
      break;
 8005a4e:	e002      	b.n	8005a56 <HAL_TIM_PWM_Stop_DMA+0x1ae>
    }

    default:
      status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
      break;
 8005a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d157      	bne.n	8005b0c <HAL_TIM_PWM_Stop_DMA+0x264>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 f933 	bl	8006cd0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a2a      	ldr	r2, [pc, #168]	; (8005b18 <HAL_TIM_PWM_Stop_DMA+0x270>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d117      	bne.n	8005aa4 <HAL_TIM_PWM_Stop_DMA+0x1fc>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1a      	ldr	r2, [r3, #32]
 8005a7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10f      	bne.n	8005aa4 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	f240 4344 	movw	r3, #1092	; 0x444
 8005a8e:	4013      	ands	r3, r2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d107      	bne.n	8005aa4 <HAL_TIM_PWM_Stop_DMA+0x1fc>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_TIM_PWM_Stop_DMA+0x22c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a1a      	ldr	r2, [r3, #32]
 8005aba:	f240 4344 	movw	r3, #1092	; 0x444
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d107      	bne.n	8005ad4 <HAL_TIM_PWM_Stop_DMA+0x22c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 0201 	bic.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d104      	bne.n	8005ae4 <HAL_TIM_PWM_Stop_DMA+0x23c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae2:	e013      	b.n	8005b0c <HAL_TIM_PWM_Stop_DMA+0x264>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d104      	bne.n	8005af4 <HAL_TIM_PWM_Stop_DMA+0x24c>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af2:	e00b      	b.n	8005b0c <HAL_TIM_PWM_Stop_DMA+0x264>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d104      	bne.n	8005b04 <HAL_TIM_PWM_Stop_DMA+0x25c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b02:	e003      	b.n	8005b0c <HAL_TIM_PWM_Stop_DMA+0x264>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40010000 	.word	0x40010000
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800
 8005b24:	40000c00 	.word	0x40000c00
 8005b28:	40014000 	.word	0x40014000
 8005b2c:	40014400 	.word	0x40014400
 8005b30:	40014800 	.word	0x40014800
 8005b34:	0800a7d4 	.word	0x0800a7d4

08005b38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d010      	beq.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x38>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d00d      	beq.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x38>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d00a      	beq.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x38>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b0c      	cmp	r3, #12
 8005b5e:	d007      	beq.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x38>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b3c      	cmp	r3, #60	; 0x3c
 8005b64:	d004      	beq.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0x38>
 8005b66:	f241 0177 	movw	r1, #4215	; 0x1077
 8005b6a:	4893      	ldr	r0, [pc, #588]	; (8005db8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005b6c:	f7fa ffef 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b60      	cmp	r3, #96	; 0x60
 8005b76:	d008      	beq.n	8005b8a <HAL_TIM_PWM_ConfigChannel+0x52>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b70      	cmp	r3, #112	; 0x70
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIM_PWM_ConfigChannel+0x52>
 8005b80:	f241 0178 	movw	r1, #4216	; 0x1078
 8005b84:	488c      	ldr	r0, [pc, #560]	; (8005db8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005b86:	f7fa ffe2 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d004      	beq.n	8005ba4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005b9a:	f241 0179 	movw	r1, #4217	; 0x1079
 8005b9e:	4886      	ldr	r0, [pc, #536]	; (8005db8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005ba0:	f7fa ffd5 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x86>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b04      	cmp	r3, #4
 8005bb2:	d004      	beq.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x86>
 8005bb4:	f241 017a 	movw	r1, #4218	; 0x107a
 8005bb8:	487f      	ldr	r0, [pc, #508]	; (8005db8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005bba:	f7fa ffc8 	bl	8000b4e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x94>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e14c      	b.n	8005e66 <HAL_TIM_PWM_ConfigChannel+0x32e>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b0c      	cmp	r3, #12
 8005bd8:	f200 813d 	bhi.w	8005e56 <HAL_TIM_PWM_ConfigChannel+0x31e>
 8005bdc:	a201      	add	r2, pc, #4	; (adr r2, 8005be4 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8005bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005c19 	.word	0x08005c19
 8005be8:	08005e57 	.word	0x08005e57
 8005bec:	08005e57 	.word	0x08005e57
 8005bf0:	08005e57 	.word	0x08005e57
 8005bf4:	08005cb3 	.word	0x08005cb3
 8005bf8:	08005e57 	.word	0x08005e57
 8005bfc:	08005e57 	.word	0x08005e57
 8005c00:	08005e57 	.word	0x08005e57
 8005c04:	08005d3b 	.word	0x08005d3b
 8005c08:	08005e57 	.word	0x08005e57
 8005c0c:	08005e57 	.word	0x08005e57
 8005c10:	08005e57 	.word	0x08005e57
 8005c14:	08005dd9 	.word	0x08005dd9
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a67      	ldr	r2, [pc, #412]	; (8005dbc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d027      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d022      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a63      	ldr	r2, [pc, #396]	; (8005dc0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d01d      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a62      	ldr	r2, [pc, #392]	; (8005dc4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d018      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a60      	ldr	r2, [pc, #384]	; (8005dc8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d013      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a5f      	ldr	r2, [pc, #380]	; (8005dcc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00e      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d009      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a5c      	ldr	r2, [pc, #368]	; (8005dd4 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d004      	beq.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8005c68:	f241 0184 	movw	r1, #4228	; 0x1084
 8005c6c:	4852      	ldr	r0, [pc, #328]	; (8005db8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005c6e:	f7fa ff6e 	bl	8000b4e <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fd79 	bl	8006770 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0208 	orr.w	r2, r2, #8
 8005c8c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0204 	bic.w	r2, r2, #4
 8005c9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6999      	ldr	r1, [r3, #24]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	619a      	str	r2, [r3, #24]
      break;
 8005cb0:	e0d4      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a41      	ldr	r2, [pc, #260]	; (8005dbc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01d      	beq.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d018      	beq.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a3d      	ldr	r2, [pc, #244]	; (8005dc0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a3b      	ldr	r2, [pc, #236]	; (8005dc4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00e      	beq.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a3a      	ldr	r2, [pc, #232]	; (8005dc8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a38      	ldr	r2, [pc, #224]	; (8005dcc <HAL_TIM_PWM_ConfigChannel+0x294>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005cee:	f241 0195 	movw	r1, #4245	; 0x1095
 8005cf2:	4831      	ldr	r0, [pc, #196]	; (8005db8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005cf4:	f7fa ff2b 	bl	8000b4e <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fdc6 	bl	8006890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6999      	ldr	r1, [r3, #24]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	021a      	lsls	r2, r3, #8
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	619a      	str	r2, [r3, #24]
      break;
 8005d38:	e090      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1f      	ldr	r2, [pc, #124]	; (8005dbc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d018      	beq.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a19      	ldr	r2, [pc, #100]	; (8005dc4 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005d6c:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8005d70:	4811      	ldr	r0, [pc, #68]	; (8005db8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8005d72:	f7fa feec 	bl	8000b4e <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fe1b 	bl	80069b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 0208 	orr.w	r2, r2, #8
 8005d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69da      	ldr	r2, [r3, #28]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0204 	bic.w	r2, r2, #4
 8005da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69d9      	ldr	r1, [r3, #28]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	61da      	str	r2, [r3, #28]
      break;
 8005db4:	e052      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x324>
 8005db6:	bf00      	nop
 8005db8:	0800a7d4 	.word	0x0800a7d4
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40000400 	.word	0x40000400
 8005dc4:	40000800 	.word	0x40000800
 8005dc8:	40000c00 	.word	0x40000c00
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40014400 	.word	0x40014400
 8005dd4:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d018      	beq.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d013      	beq.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a20      	ldr	r2, [pc, #128]	; (8005e74 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00e      	beq.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a1d      	ldr	r2, [pc, #116]	; (8005e7c <HAL_TIM_PWM_ConfigChannel+0x344>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8005e0a:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8005e0e:	481c      	ldr	r0, [pc, #112]	; (8005e80 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8005e10:	f7fa fe9d 	bl	8000b4e <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fe60 	bl	8006ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69da      	ldr	r2, [r3, #28]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69da      	ldr	r2, [r3, #28]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69d9      	ldr	r1, [r3, #28]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	61da      	str	r2, [r3, #28]
      break;
 8005e54:	e002      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40010000 	.word	0x40010000
 8005e74:	40000400 	.word	0x40000400
 8005e78:	40000800 	.word	0x40000800
 8005e7c:	40000c00 	.word	0x40000c00
 8005e80:	0800a7d4 	.word	0x0800a7d4

08005e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e2f0      	b.n	8006482 <HAL_TIM_ConfigClockSource+0x5fe>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb8:	d029      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	d024      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d020      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d01c      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d018      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b30      	cmp	r3, #48	; 0x30
 8005ee2:	d014      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d010      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b50      	cmp	r3, #80	; 0x50
 8005ef2:	d00c      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b60      	cmp	r3, #96	; 0x60
 8005efa:	d008      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2b70      	cmp	r3, #112	; 0x70
 8005f02:	d004      	beq.n	8005f0e <HAL_TIM_ConfigClockSource+0x8a>
 8005f04:	f241 41bb 	movw	r1, #5307	; 0x14bb
 8005f08:	487c      	ldr	r0, [pc, #496]	; (80060fc <HAL_TIM_ConfigClockSource+0x278>)
 8005f0a:	f7fa fe20 	bl	8000b4e <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f36:	f000 80f1 	beq.w	800611c <HAL_TIM_ConfigClockSource+0x298>
 8005f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f3e:	f200 8293 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	d02d      	beq.n	8005fa4 <HAL_TIM_ConfigClockSource+0x120>
 8005f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4c:	f200 828c 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f50:	2b70      	cmp	r3, #112	; 0x70
 8005f52:	d05d      	beq.n	8006010 <HAL_TIM_ConfigClockSource+0x18c>
 8005f54:	2b70      	cmp	r3, #112	; 0x70
 8005f56:	f200 8287 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f5a:	2b60      	cmp	r3, #96	; 0x60
 8005f5c:	f000 81a0 	beq.w	80062a0 <HAL_TIM_ConfigClockSource+0x41c>
 8005f60:	2b60      	cmp	r3, #96	; 0x60
 8005f62:	f200 8281 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f66:	2b50      	cmp	r3, #80	; 0x50
 8005f68:	f000 8144 	beq.w	80061f4 <HAL_TIM_ConfigClockSource+0x370>
 8005f6c:	2b50      	cmp	r3, #80	; 0x50
 8005f6e:	f200 827b 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	f000 81f6 	beq.w	8006364 <HAL_TIM_ConfigClockSource+0x4e0>
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	f200 8275 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f7e:	2b30      	cmp	r3, #48	; 0x30
 8005f80:	f000 8246 	beq.w	8006410 <HAL_TIM_ConfigClockSource+0x58c>
 8005f84:	2b30      	cmp	r3, #48	; 0x30
 8005f86:	f200 826f 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	f000 8240 	beq.w	8006410 <HAL_TIM_ConfigClockSource+0x58c>
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	f200 8269 	bhi.w	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 823a 	beq.w	8006410 <HAL_TIM_ConfigClockSource+0x58c>
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	f000 8237 	beq.w	8006410 <HAL_TIM_ConfigClockSource+0x58c>
 8005fa2:	e261      	b.n	8006468 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a55      	ldr	r2, [pc, #340]	; (8006100 <HAL_TIM_ConfigClockSource+0x27c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f000 825f 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb8:	f000 8259 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a50      	ldr	r2, [pc, #320]	; (8006104 <HAL_TIM_ConfigClockSource+0x280>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	f000 8253 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a4e      	ldr	r2, [pc, #312]	; (8006108 <HAL_TIM_ConfigClockSource+0x284>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	f000 824d 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a4c      	ldr	r2, [pc, #304]	; (800610c <HAL_TIM_ConfigClockSource+0x288>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f000 8247 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a4a      	ldr	r2, [pc, #296]	; (8006110 <HAL_TIM_ConfigClockSource+0x28c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	f000 8241 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a48      	ldr	r2, [pc, #288]	; (8006114 <HAL_TIM_ConfigClockSource+0x290>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	f000 823b 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a46      	ldr	r2, [pc, #280]	; (8006118 <HAL_TIM_ConfigClockSource+0x294>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	f000 8235 	beq.w	800646e <HAL_TIM_ConfigClockSource+0x5ea>
 8006004:	f241 41c7 	movw	r1, #5319	; 0x14c7
 8006008:	483c      	ldr	r0, [pc, #240]	; (80060fc <HAL_TIM_ConfigClockSource+0x278>)
 800600a:	f7fa fda0 	bl	8000b4e <assert_failed>
      break;
 800600e:	e22e      	b.n	800646e <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a3a      	ldr	r2, [pc, #232]	; (8006100 <HAL_TIM_ConfigClockSource+0x27c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x1d2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d018      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x1d2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a36      	ldr	r2, [pc, #216]	; (8006104 <HAL_TIM_ConfigClockSource+0x280>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x1d2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a35      	ldr	r2, [pc, #212]	; (8006108 <HAL_TIM_ConfigClockSource+0x284>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x1d2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a33      	ldr	r2, [pc, #204]	; (800610c <HAL_TIM_ConfigClockSource+0x288>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x1d2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a32      	ldr	r2, [pc, #200]	; (8006110 <HAL_TIM_ConfigClockSource+0x28c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x1d2>
 800604c:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8006050:	482a      	ldr	r0, [pc, #168]	; (80060fc <HAL_TIM_ConfigClockSource+0x278>)
 8006052:	f7fa fd7c 	bl	8000b4e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d013      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x202>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	d00e      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x202>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006070:	d009      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x202>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800607a:	d004      	beq.n	8006086 <HAL_TIM_ConfigClockSource+0x202>
 800607c:	f241 41d1 	movw	r1, #5329	; 0x14d1
 8006080:	481e      	ldr	r0, [pc, #120]	; (80060fc <HAL_TIM_ConfigClockSource+0x278>)
 8006082:	f7fa fd64 	bl	8000b4e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800608e:	d014      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x236>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d010      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x236>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00c      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x236>
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d008      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x236>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	2b0a      	cmp	r3, #10
 80060ae:	d004      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x236>
 80060b0:	f241 41d2 	movw	r1, #5330	; 0x14d2
 80060b4:	4811      	ldr	r0, [pc, #68]	; (80060fc <HAL_TIM_ConfigClockSource+0x278>)
 80060b6:	f7fa fd4a 	bl	8000b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b0f      	cmp	r3, #15
 80060c0:	d904      	bls.n	80060cc <HAL_TIM_ConfigClockSource+0x248>
 80060c2:	f241 41d3 	movw	r1, #5331	; 0x14d3
 80060c6:	480d      	ldr	r0, [pc, #52]	; (80060fc <HAL_TIM_ConfigClockSource+0x278>)
 80060c8:	f7fa fd41 	bl	8000b4e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6899      	ldr	r1, [r3, #8]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f000 fdd8 	bl	8006c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	609a      	str	r2, [r3, #8]
      break;
 80060f8:	e1ba      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x5ec>
 80060fa:	bf00      	nop
 80060fc:	0800a7d4 	.word	0x0800a7d4
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400
 8006118:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a8a      	ldr	r2, [pc, #552]	; (800634c <HAL_TIM_ConfigClockSource+0x4c8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x2d4>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800612e:	d013      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x2d4>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a86      	ldr	r2, [pc, #536]	; (8006350 <HAL_TIM_ConfigClockSource+0x4cc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x2d4>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a85      	ldr	r2, [pc, #532]	; (8006354 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x2d4>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a83      	ldr	r2, [pc, #524]	; (8006358 <HAL_TIM_ConfigClockSource+0x4d4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <HAL_TIM_ConfigClockSource+0x2d4>
 800614e:	f241 41e6 	movw	r1, #5350	; 0x14e6
 8006152:	4882      	ldr	r0, [pc, #520]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006154:	f7fa fcfb 	bl	8000b4e <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <HAL_TIM_ConfigClockSource+0x304>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006168:	d00e      	beq.n	8006188 <HAL_TIM_ConfigClockSource+0x304>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006172:	d009      	beq.n	8006188 <HAL_TIM_ConfigClockSource+0x304>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800617c:	d004      	beq.n	8006188 <HAL_TIM_ConfigClockSource+0x304>
 800617e:	f241 41e9 	movw	r1, #5353	; 0x14e9
 8006182:	4876      	ldr	r0, [pc, #472]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006184:	f7fa fce3 	bl	8000b4e <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006190:	d014      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0x338>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d010      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0x338>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0x338>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d008      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0x338>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b0a      	cmp	r3, #10
 80061b0:	d004      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0x338>
 80061b2:	f241 41ea 	movw	r1, #5354	; 0x14ea
 80061b6:	4869      	ldr	r0, [pc, #420]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 80061b8:	f7fa fcc9 	bl	8000b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	2b0f      	cmp	r3, #15
 80061c2:	d904      	bls.n	80061ce <HAL_TIM_ConfigClockSource+0x34a>
 80061c4:	f241 41eb 	movw	r1, #5355	; 0x14eb
 80061c8:	4864      	ldr	r0, [pc, #400]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 80061ca:	f7fa fcc0 	bl	8000b4e <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	6899      	ldr	r1, [r3, #8]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f000 fd57 	bl	8006c90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061f0:	609a      	str	r2, [r3, #8]
      break;
 80061f2:	e13d      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a54      	ldr	r2, [pc, #336]	; (800634c <HAL_TIM_ConfigClockSource+0x4c8>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d01d      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x3b6>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d018      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x3b6>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a50      	ldr	r2, [pc, #320]	; (8006350 <HAL_TIM_ConfigClockSource+0x4cc>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x3b6>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a4f      	ldr	r2, [pc, #316]	; (8006354 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d00e      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x3b6>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a4d      	ldr	r2, [pc, #308]	; (8006358 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d009      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x3b6>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a4d      	ldr	r2, [pc, #308]	; (8006360 <HAL_TIM_ConfigClockSource+0x4dc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d004      	beq.n	800623a <HAL_TIM_ConfigClockSource+0x3b6>
 8006230:	f241 41fa 	movw	r1, #5370	; 0x14fa
 8006234:	4849      	ldr	r0, [pc, #292]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006236:	f7fa fc8a 	bl	8000b4e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006242:	d014      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x3ea>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d010      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x3ea>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00c      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x3ea>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d008      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x3ea>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b0a      	cmp	r3, #10
 8006262:	d004      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x3ea>
 8006264:	f241 41fd 	movw	r1, #5373	; 0x14fd
 8006268:	483c      	ldr	r0, [pc, #240]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 800626a:	f7fa fc70 	bl	8000b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	2b0f      	cmp	r3, #15
 8006274:	d904      	bls.n	8006280 <HAL_TIM_ConfigClockSource+0x3fc>
 8006276:	f241 41fe 	movw	r1, #5374	; 0x14fe
 800627a:	4838      	ldr	r0, [pc, #224]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 800627c:	f7fa fc67 	bl	8000b4e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	461a      	mov	r2, r3
 800628e:	f000 fc85 	bl	8006b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2150      	movs	r1, #80	; 0x50
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fcde 	bl	8006c5a <TIM_ITRx_SetConfig>
      break;
 800629e:	e0e7      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a29      	ldr	r2, [pc, #164]	; (800634c <HAL_TIM_ConfigClockSource+0x4c8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d01d      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x462>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b2:	d018      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x462>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a25      	ldr	r2, [pc, #148]	; (8006350 <HAL_TIM_ConfigClockSource+0x4cc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x462>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a24      	ldr	r2, [pc, #144]	; (8006354 <HAL_TIM_ConfigClockSource+0x4d0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x462>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a22      	ldr	r2, [pc, #136]	; (8006358 <HAL_TIM_ConfigClockSource+0x4d4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x462>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a22      	ldr	r2, [pc, #136]	; (8006360 <HAL_TIM_ConfigClockSource+0x4dc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_TIM_ConfigClockSource+0x462>
 80062dc:	f241 510a 	movw	r1, #5386	; 0x150a
 80062e0:	481e      	ldr	r0, [pc, #120]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 80062e2:	f7fa fc34 	bl	8000b4e <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	d014      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x496>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d010      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x496>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00c      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x496>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b02      	cmp	r3, #2
 8006306:	d008      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x496>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b0a      	cmp	r3, #10
 800630e:	d004      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x496>
 8006310:	f241 510d 	movw	r1, #5389	; 0x150d
 8006314:	4811      	ldr	r0, [pc, #68]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006316:	f7fa fc1a 	bl	8000b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	2b0f      	cmp	r3, #15
 8006320:	d904      	bls.n	800632c <HAL_TIM_ConfigClockSource+0x4a8>
 8006322:	f241 510e 	movw	r1, #5390	; 0x150e
 8006326:	480d      	ldr	r0, [pc, #52]	; (800635c <HAL_TIM_ConfigClockSource+0x4d8>)
 8006328:	f7fa fc11 	bl	8000b4e <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6818      	ldr	r0, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	6859      	ldr	r1, [r3, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	461a      	mov	r2, r3
 800633a:	f000 fc5e 	bl	8006bfa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2160      	movs	r1, #96	; 0x60
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fc88 	bl	8006c5a <TIM_ITRx_SetConfig>
      break;
 800634a:	e091      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x5ec>
 800634c:	40010000 	.word	0x40010000
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	0800a7d4 	.word	0x0800a7d4
 8006360:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a48      	ldr	r2, [pc, #288]	; (800648c <HAL_TIM_ConfigClockSource+0x608>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01d      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x526>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006376:	d018      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x526>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a44      	ldr	r2, [pc, #272]	; (8006490 <HAL_TIM_ConfigClockSource+0x60c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x526>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a43      	ldr	r2, [pc, #268]	; (8006494 <HAL_TIM_ConfigClockSource+0x610>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x526>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a41      	ldr	r2, [pc, #260]	; (8006498 <HAL_TIM_ConfigClockSource+0x614>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x526>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a40      	ldr	r2, [pc, #256]	; (800649c <HAL_TIM_ConfigClockSource+0x618>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x526>
 80063a0:	f241 511a 	movw	r1, #5402	; 0x151a
 80063a4:	483e      	ldr	r0, [pc, #248]	; (80064a0 <HAL_TIM_ConfigClockSource+0x61c>)
 80063a6:	f7fa fbd2 	bl	8000b4e <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b2:	d014      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x55a>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d010      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x55a>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00c      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x55a>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d008      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x55a>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b0a      	cmp	r3, #10
 80063d2:	d004      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x55a>
 80063d4:	f241 511d 	movw	r1, #5405	; 0x151d
 80063d8:	4831      	ldr	r0, [pc, #196]	; (80064a0 <HAL_TIM_ConfigClockSource+0x61c>)
 80063da:	f7fa fbb8 	bl	8000b4e <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2b0f      	cmp	r3, #15
 80063e4:	d904      	bls.n	80063f0 <HAL_TIM_ConfigClockSource+0x56c>
 80063e6:	f241 511e 	movw	r1, #5406	; 0x151e
 80063ea:	482d      	ldr	r0, [pc, #180]	; (80064a0 <HAL_TIM_ConfigClockSource+0x61c>)
 80063ec:	f7fa fbaf 	bl	8000b4e <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	461a      	mov	r2, r3
 80063fe:	f000 fbcd 	bl	8006b9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2140      	movs	r1, #64	; 0x40
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fc26 	bl	8006c5a <TIM_ITRx_SetConfig>
      break;
 800640e:	e02f      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <HAL_TIM_ConfigClockSource+0x608>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01d      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x5d2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d018      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x5d2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a19      	ldr	r2, [pc, #100]	; (8006490 <HAL_TIM_ConfigClockSource+0x60c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x5d2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a18      	ldr	r2, [pc, #96]	; (8006494 <HAL_TIM_ConfigClockSource+0x610>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00e      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x5d2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a16      	ldr	r2, [pc, #88]	; (8006498 <HAL_TIM_ConfigClockSource+0x614>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d009      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x5d2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a15      	ldr	r2, [pc, #84]	; (800649c <HAL_TIM_ConfigClockSource+0x618>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0x5d2>
 800644c:	f241 512d 	movw	r1, #5421	; 0x152d
 8006450:	4813      	ldr	r0, [pc, #76]	; (80064a0 <HAL_TIM_ConfigClockSource+0x61c>)
 8006452:	f7fa fb7c 	bl	8000b4e <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f000 fbfa 	bl	8006c5a <TIM_ITRx_SetConfig>
      break;
 8006466:	e003      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
      break;
 800646c:	e000      	b.n	8006470 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800646e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40014000 	.word	0x40014000
 80064a0:	0800a7d4 	.word	0x0800a7d4

080064a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d107      	bne.n	80064f4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f2:	e02a      	b.n	800654a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d107      	bne.n	800650e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2202      	movs	r2, #2
 8006502:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800650c:	e01d      	b.n	800654a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d107      	bne.n	8006528 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2204      	movs	r2, #4
 800651c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006526:	e010      	b.n	800654a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	429a      	cmp	r2, r3
 8006530:	d107      	bne.n	8006542 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2208      	movs	r2, #8
 8006536:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006540:	e003      	b.n	800654a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2201      	movs	r2, #1
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7ff ffb4 	bl	80064b8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	771a      	strb	r2, [r3, #28]
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d10b      	bne.n	800658e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d136      	bne.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658c:	e031      	b.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d10b      	bne.n	80065b0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2202      	movs	r2, #2
 800659c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d125      	bne.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ae:	e020      	b.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d10b      	bne.n	80065d2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2204      	movs	r2, #4
 80065be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d114      	bne.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065d0:	e00f      	b.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d10a      	bne.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2208      	movs	r2, #8
 80065e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7fa f920 	bl	8000838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	771a      	strb	r2, [r3, #28]
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d103      	bne.n	8006626 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	771a      	strb	r2, [r3, #28]
 8006624:	e019      	b.n	800665a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d103      	bne.n	8006638 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2202      	movs	r2, #2
 8006634:	771a      	strb	r2, [r3, #28]
 8006636:	e010      	b.n	800665a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	429a      	cmp	r2, r3
 8006640:	d103      	bne.n	800664a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2204      	movs	r2, #4
 8006646:	771a      	strb	r2, [r3, #28]
 8006648:	e007      	b.n	800665a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d102      	bne.n	800665a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2208      	movs	r2, #8
 8006658:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff ff22 	bl	80064a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	771a      	strb	r2, [r3, #28]
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a34      	ldr	r2, [pc, #208]	; (8006754 <TIM_Base_SetConfig+0xe4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d00f      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d00b      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a31      	ldr	r2, [pc, #196]	; (8006758 <TIM_Base_SetConfig+0xe8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d007      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a30      	ldr	r2, [pc, #192]	; (800675c <TIM_Base_SetConfig+0xec>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d003      	beq.n	80066a8 <TIM_Base_SetConfig+0x38>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a2f      	ldr	r2, [pc, #188]	; (8006760 <TIM_Base_SetConfig+0xf0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d108      	bne.n	80066ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a25      	ldr	r2, [pc, #148]	; (8006754 <TIM_Base_SetConfig+0xe4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01b      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c8:	d017      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a22      	ldr	r2, [pc, #136]	; (8006758 <TIM_Base_SetConfig+0xe8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a21      	ldr	r2, [pc, #132]	; (800675c <TIM_Base_SetConfig+0xec>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a20      	ldr	r2, [pc, #128]	; (8006760 <TIM_Base_SetConfig+0xf0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00b      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a1f      	ldr	r2, [pc, #124]	; (8006764 <TIM_Base_SetConfig+0xf4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a1e      	ldr	r2, [pc, #120]	; (8006768 <TIM_Base_SetConfig+0xf8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_Base_SetConfig+0x8a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <TIM_Base_SetConfig+0xfc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d108      	bne.n	800670c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a08      	ldr	r2, [pc, #32]	; (8006754 <TIM_Base_SetConfig+0xe4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d103      	bne.n	8006740 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	615a      	str	r2, [r3, #20]
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40010000 	.word	0x40010000
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40014000 	.word	0x40014000
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800

08006770 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f023 0201 	bic.w	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0303 	bic.w	r3, r3, #3
 80067a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 0302 	bic.w	r3, r3, #2
 80067b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a30      	ldr	r2, [pc, #192]	; (8006888 <TIM_OC1_SetConfig+0x118>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d119      	bne.n	8006800 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <TIM_OC1_SetConfig+0x76>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b08      	cmp	r3, #8
 80067da:	d004      	beq.n	80067e6 <TIM_OC1_SetConfig+0x76>
 80067dc:	f641 21cb 	movw	r1, #6859	; 0x1acb
 80067e0:	482a      	ldr	r0, [pc, #168]	; (800688c <TIM_OC1_SetConfig+0x11c>)
 80067e2:	f7fa f9b4 	bl	8000b4e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0308 	bic.w	r3, r3, #8
 80067ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0304 	bic.w	r3, r3, #4
 80067fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a21      	ldr	r2, [pc, #132]	; (8006888 <TIM_OC1_SetConfig+0x118>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d12d      	bne.n	8006864 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006810:	d008      	beq.n	8006824 <TIM_OC1_SetConfig+0xb4>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <TIM_OC1_SetConfig+0xb4>
 800681a:	f641 21d8 	movw	r1, #6872	; 0x1ad8
 800681e:	481b      	ldr	r0, [pc, #108]	; (800688c <TIM_OC1_SetConfig+0x11c>)
 8006820:	f7fa f995 	bl	8000b4e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682c:	d008      	beq.n	8006840 <TIM_OC1_SetConfig+0xd0>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <TIM_OC1_SetConfig+0xd0>
 8006836:	f641 21d9 	movw	r1, #6873	; 0x1ad9
 800683a:	4814      	ldr	r0, [pc, #80]	; (800688c <TIM_OC1_SetConfig+0x11c>)
 800683c:	f7fa f987 	bl	8000b4e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006846:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800684e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	621a      	str	r2, [r3, #32]
}
 800687e:	bf00      	nop
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40010000 	.word	0x40010000
 800688c:	0800a7d4 	.word	0x0800a7d4

08006890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f023 0210 	bic.w	r2, r3, #16
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f023 0320 	bic.w	r3, r3, #32
 80068da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a31      	ldr	r2, [pc, #196]	; (80069b0 <TIM_OC2_SetConfig+0x120>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d11a      	bne.n	8006926 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d008      	beq.n	800690a <TIM_OC2_SetConfig+0x7a>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d004      	beq.n	800690a <TIM_OC2_SetConfig+0x7a>
 8006900:	f641 3116 	movw	r1, #6934	; 0x1b16
 8006904:	482b      	ldr	r0, [pc, #172]	; (80069b4 <TIM_OC2_SetConfig+0x124>)
 8006906:	f7fa f922 	bl	8000b4e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006924:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a21      	ldr	r2, [pc, #132]	; (80069b0 <TIM_OC2_SetConfig+0x120>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d12f      	bne.n	800698e <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006936:	d008      	beq.n	800694a <TIM_OC2_SetConfig+0xba>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <TIM_OC2_SetConfig+0xba>
 8006940:	f641 3124 	movw	r1, #6948	; 0x1b24
 8006944:	481b      	ldr	r0, [pc, #108]	; (80069b4 <TIM_OC2_SetConfig+0x124>)
 8006946:	f7fa f902 	bl	8000b4e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006952:	d008      	beq.n	8006966 <TIM_OC2_SetConfig+0xd6>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d004      	beq.n	8006966 <TIM_OC2_SetConfig+0xd6>
 800695c:	f641 3125 	movw	r1, #6949	; 0x1b25
 8006960:	4814      	ldr	r0, [pc, #80]	; (80069b4 <TIM_OC2_SetConfig+0x124>)
 8006962:	f7fa f8f4 	bl	8000b4e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800696c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40010000 	.word	0x40010000
 80069b4:	0800a7d4 	.word	0x0800a7d4

080069b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0303 	bic.w	r3, r3, #3
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a31      	ldr	r2, [pc, #196]	; (8006ad8 <TIM_OC3_SetConfig+0x120>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d11a      	bne.n	8006a4c <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <TIM_OC3_SetConfig+0x78>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b08      	cmp	r3, #8
 8006a24:	d004      	beq.n	8006a30 <TIM_OC3_SetConfig+0x78>
 8006a26:	f641 3161 	movw	r1, #7009	; 0x1b61
 8006a2a:	482c      	ldr	r0, [pc, #176]	; (8006adc <TIM_OC3_SetConfig+0x124>)
 8006a2c:	f7fa f88f 	bl	8000b4e <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a22      	ldr	r2, [pc, #136]	; (8006ad8 <TIM_OC3_SetConfig+0x120>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d12f      	bne.n	8006ab4 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a5c:	d008      	beq.n	8006a70 <TIM_OC3_SetConfig+0xb8>
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d004      	beq.n	8006a70 <TIM_OC3_SetConfig+0xb8>
 8006a66:	f641 316e 	movw	r1, #7022	; 0x1b6e
 8006a6a:	481c      	ldr	r0, [pc, #112]	; (8006adc <TIM_OC3_SetConfig+0x124>)
 8006a6c:	f7fa f86f 	bl	8000b4e <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a78:	d008      	beq.n	8006a8c <TIM_OC3_SetConfig+0xd4>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <TIM_OC3_SetConfig+0xd4>
 8006a82:	f641 316f 	movw	r1, #7023	; 0x1b6f
 8006a86:	4815      	ldr	r0, [pc, #84]	; (8006adc <TIM_OC3_SetConfig+0x124>)
 8006a88:	f7fa f861 	bl	8000b4e <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	0800a7d4 	.word	0x0800a7d4

08006ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	031b      	lsls	r3, r3, #12
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a16      	ldr	r2, [pc, #88]	; (8006b94 <TIM_OC4_SetConfig+0xb4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d117      	bne.n	8006b70 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b48:	d008      	beq.n	8006b5c <TIM_OC4_SetConfig+0x7c>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d004      	beq.n	8006b5c <TIM_OC4_SetConfig+0x7c>
 8006b52:	f641 31ad 	movw	r1, #7085	; 0x1bad
 8006b56:	4810      	ldr	r0, [pc, #64]	; (8006b98 <TIM_OC4_SetConfig+0xb8>)
 8006b58:	f7f9 fff9 	bl	8000b4e <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	695b      	ldr	r3, [r3, #20]
 8006b68:	019b      	lsls	r3, r3, #6
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	621a      	str	r2, [r3, #32]
}
 8006b8a:	bf00      	nop
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40010000 	.word	0x40010000
 8006b98:	0800a7d4 	.word	0x0800a7d4

08006b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 030a 	bic.w	r3, r3, #10
 8006bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b087      	sub	sp, #28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f023 0210 	bic.w	r2, r3, #16
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	031b      	lsls	r3, r3, #12
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	f043 0307 	orr.w	r3, r3, #7
 8006c7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	609a      	str	r2, [r3, #8]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006caa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	021a      	lsls	r2, r3, #8
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	609a      	str	r2, [r3, #8]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <TIM_CCxChannelCmd+0xb8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d020      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cea:	d01c      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <TIM_CCxChannelCmd+0xbc>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d018      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <TIM_CCxChannelCmd+0xc0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d014      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4a25      	ldr	r2, [pc, #148]	; (8006d94 <TIM_CCxChannelCmd+0xc4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d010      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4a24      	ldr	r2, [pc, #144]	; (8006d98 <TIM_CCxChannelCmd+0xc8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00c      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4a23      	ldr	r2, [pc, #140]	; (8006d9c <TIM_CCxChannelCmd+0xcc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d008      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	4a22      	ldr	r2, [pc, #136]	; (8006da0 <TIM_CCxChannelCmd+0xd0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d004      	beq.n	8006d26 <TIM_CCxChannelCmd+0x56>
 8006d1c:	f641 5198 	movw	r1, #7576	; 0x1d98
 8006d20:	4820      	ldr	r0, [pc, #128]	; (8006da4 <TIM_CCxChannelCmd+0xd4>)
 8006d22:	f7f9 ff14 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d010      	beq.n	8006d4e <TIM_CCxChannelCmd+0x7e>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00d      	beq.n	8006d4e <TIM_CCxChannelCmd+0x7e>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d00a      	beq.n	8006d4e <TIM_CCxChannelCmd+0x7e>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d007      	beq.n	8006d4e <TIM_CCxChannelCmd+0x7e>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b3c      	cmp	r3, #60	; 0x3c
 8006d42:	d004      	beq.n	8006d4e <TIM_CCxChannelCmd+0x7e>
 8006d44:	f641 5199 	movw	r1, #7577	; 0x1d99
 8006d48:	4816      	ldr	r0, [pc, #88]	; (8006da4 <TIM_CCxChannelCmd+0xd4>)
 8006d4a:	f7f9 ff00 	bl	8000b4e <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f003 031f 	and.w	r3, r3, #31
 8006d54:	2201      	movs	r2, #1
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6a1a      	ldr	r2, [r3, #32]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	43db      	mvns	r3, r3
 8006d64:	401a      	ands	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1a      	ldr	r2, [r3, #32]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	6879      	ldr	r1, [r7, #4]
 8006d76:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	621a      	str	r2, [r3, #32]
}
 8006d80:	bf00      	nop
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40000400 	.word	0x40000400
 8006d90:	40000800 	.word	0x40000800
 8006d94:	40000c00 	.word	0x40000c00
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400
 8006da0:	40014800 	.word	0x40014800
 8006da4:	0800a7d4 	.word	0x0800a7d4

08006da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a55      	ldr	r2, [pc, #340]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d018      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc4:	d013      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a51      	ldr	r2, [pc, #324]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a4f      	ldr	r2, [pc, #316]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4e      	ldr	r2, [pc, #312]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8006de4:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8006de8:	484c      	ldr	r0, [pc, #304]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006dea:	f7f9 feb0 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d020      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b10      	cmp	r3, #16
 8006dfc:	d01c      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d018      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b30      	cmp	r3, #48	; 0x30
 8006e0c:	d014      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d010      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b50      	cmp	r3, #80	; 0x50
 8006e1c:	d00c      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	2b60      	cmp	r3, #96	; 0x60
 8006e24:	d008      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b70      	cmp	r3, #112	; 0x70
 8006e2c:	d004      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006e2e:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8006e32:	483a      	ldr	r0, [pc, #232]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006e34:	f7f9 fe8b 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	2b80      	cmp	r3, #128	; 0x80
 8006e3e:	d008      	beq.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d004      	beq.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8006e48:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8006e4c:	4833      	ldr	r0, [pc, #204]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8006e4e:	f7f9 fe7e 	bl	8000b4e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e050      	b.n	8006f02 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eac:	d013      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a14      	ldr	r2, [pc, #80]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a13      	ldr	r2, [pc, #76]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	0800a80c 	.word	0x0800a80c
 8006f20:	40014000 	.word	0x40014000

08006f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a5c      	ldr	r2, [pc, #368]	; (80070a8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d004      	beq.n	8006f46 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 8006f3c:	f240 71ee 	movw	r1, #2030	; 0x7ee
 8006f40:	485a      	ldr	r0, [pc, #360]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006f42:	f7f9 fe04 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f4e:	d008      	beq.n	8006f62 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8006f58:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8006f5c:	4853      	ldr	r0, [pc, #332]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006f5e:	f7f9 fdf6 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6a:	d008      	beq.n	8006f7e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d004      	beq.n	8006f7e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8006f74:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8006f78:	484c      	ldr	r0, [pc, #304]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006f7a:	f7f9 fde8 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d013      	beq.n	8006fae <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f98:	d009      	beq.n	8006fae <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa2:	d004      	beq.n	8006fae <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8006fa4:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8006fa8:	4840      	ldr	r0, [pc, #256]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006faa:	f7f9 fdd0 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2bff      	cmp	r3, #255	; 0xff
 8006fb4:	d904      	bls.n	8006fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 8006fb6:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8006fba:	483c      	ldr	r0, [pc, #240]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006fbc:	f7f9 fdc7 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc8:	d008      	beq.n	8006fdc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006fd2:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8006fd6:	4835      	ldr	r0, [pc, #212]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006fd8:	f7f9 fdb9 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fec:	d004      	beq.n	8006ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8006fee:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8006ff2:	482e      	ldr	r0, [pc, #184]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8006ff4:	f7f9 fdab 	bl	8000b4e <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007000:	d008      	beq.n	8007014 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800700a:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800700e:	4827      	ldr	r0, [pc, #156]	; (80070ac <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8007010:	f7f9 fd9d 	bl	8000b4e <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800701e:	2302      	movs	r3, #2
 8007020:	e03d      	b.n	800709e <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	4313      	orrs	r3, r2
 8007052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40010000 	.word	0x40010000
 80070ac:	0800a80c 	.word	0x0800a80c

080070b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070b0:	b084      	sub	sp, #16
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	f107 001c 	add.w	r0, r7, #28
 80070be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d122      	bne.n	800710e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d105      	bne.n	8007102 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9a0 	bl	8007448 <USB_CoreReset>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	e01a      	b.n	8007144 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f994 	bl	8007448 <USB_CoreReset>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
 8007136:	e005      	b.n	8007144 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	2b01      	cmp	r3, #1
 8007148:	d10b      	bne.n	8007162 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f043 0206 	orr.w	r2, r3, #6
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800716e:	b004      	add	sp, #16
 8007170:	4770      	bx	lr

08007172 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f043 0201 	orr.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 0201 	bic.w	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d115      	bne.n	8007204 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071e4:	2001      	movs	r0, #1
 80071e6:	f7f9 ffb3 	bl	8001150 <HAL_Delay>
      ms++;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3301      	adds	r3, #1
 80071ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f91a 	bl	800742a <USB_GetMode>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d01e      	beq.n	800723a <USB_SetCurrentMode+0x84>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b31      	cmp	r3, #49	; 0x31
 8007200:	d9f0      	bls.n	80071e4 <USB_SetCurrentMode+0x2e>
 8007202:	e01a      	b.n	800723a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d115      	bne.n	8007236 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007216:	2001      	movs	r0, #1
 8007218:	f7f9 ff9a 	bl	8001150 <HAL_Delay>
      ms++;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f901 	bl	800742a <USB_GetMode>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <USB_SetCurrentMode+0x84>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b31      	cmp	r3, #49	; 0x31
 8007232:	d9f0      	bls.n	8007216 <USB_SetCurrentMode+0x60>
 8007234:	e001      	b.n	800723a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e005      	b.n	8007246 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b32      	cmp	r3, #50	; 0x32
 800723e:	d101      	bne.n	8007244 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	019b      	lsls	r3, r3, #6
 8007262:	f043 0220 	orr.w	r2, r3, #32
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	4a08      	ldr	r2, [pc, #32]	; (8007294 <USB_FlushTxFifo+0x44>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d901      	bls.n	800727a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e006      	b.n	8007288 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d0f1      	beq.n	800726a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	00030d40 	.word	0x00030d40

08007298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2210      	movs	r2, #16
 80072a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	4a08      	ldr	r2, [pc, #32]	; (80072d4 <USB_FlushRxFifo+0x3c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d901      	bls.n	80072ba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e006      	b.n	80072c8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d0f1      	beq.n	80072aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	00030d40 	.word	0x00030d40

080072d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072d8:	b480      	push	{r7}
 80072da:	b089      	sub	sp, #36	; 0x24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4611      	mov	r1, r2
 80072e4:	461a      	mov	r2, r3
 80072e6:	460b      	mov	r3, r1
 80072e8:	71fb      	strb	r3, [r7, #7]
 80072ea:	4613      	mov	r3, r2
 80072ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d123      	bne.n	8007346 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072fe:	88bb      	ldrh	r3, [r7, #4]
 8007300:	3303      	adds	r3, #3
 8007302:	089b      	lsrs	r3, r3, #2
 8007304:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007306:	2300      	movs	r3, #0
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	e018      	b.n	800733e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	031a      	lsls	r2, r3, #12
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	4413      	add	r3, r2
 8007314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007318:	461a      	mov	r2, r3
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	3301      	adds	r3, #1
 8007324:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	3301      	adds	r3, #1
 800732a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	3301      	adds	r3, #1
 8007330:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	3301      	adds	r3, #1
 8007336:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	3301      	adds	r3, #1
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	429a      	cmp	r2, r3
 8007344:	d3e2      	bcc.n	800730c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3724      	adds	r7, #36	; 0x24
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007354:	b480      	push	{r7}
 8007356:	b08b      	sub	sp, #44	; 0x2c
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800736a:	88fb      	ldrh	r3, [r7, #6]
 800736c:	089b      	lsrs	r3, r3, #2
 800736e:	b29b      	uxth	r3, r3
 8007370:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007372:	88fb      	ldrh	r3, [r7, #6]
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	623b      	str	r3, [r7, #32]
 800737e:	e014      	b.n	80073aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	601a      	str	r2, [r3, #0]
    pDest++;
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	3301      	adds	r3, #1
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	3301      	adds	r3, #1
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	3301      	adds	r3, #1
 800739c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	3301      	adds	r3, #1
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	3301      	adds	r3, #1
 80073a8:	623b      	str	r3, [r7, #32]
 80073aa:	6a3a      	ldr	r2, [r7, #32]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d3e6      	bcc.n	8007380 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073b2:	8bfb      	ldrh	r3, [r7, #30]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01e      	beq.n	80073f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c2:	461a      	mov	r2, r3
 80073c4:	f107 0310 	add.w	r3, r7, #16
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	701a      	strb	r2, [r3, #0]
      i++;
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	3301      	adds	r3, #1
 80073e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	3301      	adds	r3, #1
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80073ea:	8bfb      	ldrh	r3, [r7, #30]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073f0:	8bfb      	ldrh	r3, [r7, #30]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1ea      	bne.n	80073cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	372c      	adds	r7, #44	; 0x2c
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4013      	ands	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800741c:	68fb      	ldr	r3, [r7, #12]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f003 0301 	and.w	r3, r3, #1
}
 800743a:	4618      	mov	r0, r3
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
	...

08007448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <USB_CoreReset+0x60>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d901      	bls.n	8007464 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e01a      	b.n	800749a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	daf3      	bge.n	8007454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f043 0201 	orr.w	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <USB_CoreReset+0x60>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d901      	bls.n	800748c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007488:	2303      	movs	r3, #3
 800748a:	e006      	b.n	800749a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b01      	cmp	r3, #1
 8007496:	d0f1      	beq.n	800747c <USB_CoreReset+0x34>

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	00030d40 	.word	0x00030d40

080074ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074ac:	b084      	sub	sp, #16
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	f107 001c 	add.w	r0, r7, #28
 80074ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074c8:	461a      	mov	r2, r3
 80074ca:	2300      	movs	r3, #0
 80074cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	2b01      	cmp	r3, #1
 8007502:	d10a      	bne.n	800751a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007512:	f043 0304 	orr.w	r3, r3, #4
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	e014      	b.n	8007544 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007528:	f023 0304 	bic.w	r3, r3, #4
 800752c:	6013      	str	r3, [r2, #0]
 800752e:	e009      	b.n	8007544 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800753e:	f023 0304 	bic.w	r3, r3, #4
 8007542:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007544:	2110      	movs	r1, #16
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fe82 	bl	8007250 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fea3 	bl	8007298 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	e015      	b.n	8007584 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	4413      	add	r3, r2
 8007560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007564:	461a      	mov	r2, r3
 8007566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800756a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	4413      	add	r3, r2
 8007574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007578:	461a      	mov	r2, r3
 800757a:	2300      	movs	r3, #0
 800757c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	429a      	cmp	r2, r3
 800758a:	d3e5      	bcc.n	8007558 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007598:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00b      	beq.n	80075be <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a13      	ldr	r2, [pc, #76]	; (8007600 <USB_HostInit+0x154>)
 80075b2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a13      	ldr	r2, [pc, #76]	; (8007604 <USB_HostInit+0x158>)
 80075b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80075bc:	e009      	b.n	80075d2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2280      	movs	r2, #128	; 0x80
 80075c2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a10      	ldr	r2, [pc, #64]	; (8007608 <USB_HostInit+0x15c>)
 80075c8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a0f      	ldr	r2, [pc, #60]	; (800760c <USB_HostInit+0x160>)
 80075ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f043 0210 	orr.w	r2, r3, #16
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	4b09      	ldr	r3, [pc, #36]	; (8007610 <USB_HostInit+0x164>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075fc:	b004      	add	sp, #16
 80075fe:	4770      	bx	lr
 8007600:	01000200 	.word	0x01000200
 8007604:	00e00300 	.word	0x00e00300
 8007608:	00600080 	.word	0x00600080
 800760c:	004000e0 	.word	0x004000e0
 8007610:	a3200008 	.word	0xa3200008

08007614 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007632:	f023 0303 	bic.w	r3, r3, #3
 8007636:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	f003 0303 	and.w	r3, r3, #3
 8007646:	68f9      	ldr	r1, [r7, #12]
 8007648:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800764c:	4313      	orrs	r3, r2
 800764e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d107      	bne.n	8007666 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800765c:	461a      	mov	r2, r3
 800765e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007662:	6053      	str	r3, [r2, #4]
 8007664:	e009      	b.n	800767a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007666:	78fb      	ldrb	r3, [r7, #3]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d106      	bne.n	800767a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007672:	461a      	mov	r2, r3
 8007674:	f241 7370 	movw	r3, #6000	; 0x1770
 8007678:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80076a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80076b8:	2064      	movs	r0, #100	; 0x64
 80076ba:	f7f9 fd49 	bl	8001150 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80076cc:	200a      	movs	r0, #10
 80076ce:	f7f9 fd3f 	bl	8001150 <HAL_Delay>

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007700:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d109      	bne.n	8007720 <USB_DriveVbus+0x44>
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d106      	bne.n	8007720 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800771a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800771e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772a:	d109      	bne.n	8007740 <USB_DriveVbus+0x64>
 800772c:	78fb      	ldrb	r3, [r7, #3]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800773a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800773e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	0c5b      	lsrs	r3, r3, #17
 800776c:	f003 0303 	and.w	r3, r3, #3
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	b29b      	uxth	r3, r3
}
 8007792:	4618      	mov	r0, r3
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
	...

080077a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	70fb      	strb	r3, [r7, #3]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70bb      	strb	r3, [r7, #2]
 80077b6:	4613      	mov	r3, r2
 80077b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ce:	461a      	mov	r2, r3
 80077d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80077d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d87e      	bhi.n	80078dc <USB_HC_Init+0x13c>
 80077de:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <USB_HC_Init+0x44>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	080077f5 	.word	0x080077f5
 80077e8:	0800789f 	.word	0x0800789f
 80077ec:	080077f5 	.word	0x080077f5
 80077f0:	08007861 	.word	0x08007861
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007800:	461a      	mov	r2, r3
 8007802:	f240 439d 	movw	r3, #1181	; 0x49d
 8007806:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007808:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da10      	bge.n	8007832 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	440a      	add	r2, r1
 8007826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800782a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007830:	e057      	b.n	80078e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d051      	beq.n	80078e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800783e:	78fb      	ldrb	r3, [r7, #3]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4413      	add	r3, r2
 8007846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	78fa      	ldrb	r2, [r7, #3]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	440a      	add	r2, r1
 8007854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007858:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800785c:	60d3      	str	r3, [r2, #12]
      break;
 800785e:	e040      	b.n	80078e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	4413      	add	r3, r2
 8007868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800786c:	461a      	mov	r2, r3
 800786e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007872:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007874:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007878:	2b00      	cmp	r3, #0
 800787a:	da34      	bge.n	80078e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	0151      	lsls	r1, r2, #5
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	440a      	add	r2, r1
 8007892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800789a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800789c:	e023      	b.n	80078e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078aa:	461a      	mov	r2, r3
 80078ac:	f240 2325 	movw	r3, #549	; 0x225
 80078b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	da17      	bge.n	80078ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80078d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80078da:	e006      	b.n	80078ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	77fb      	strb	r3, [r7, #31]
      break;
 80078e0:	e004      	b.n	80078ec <USB_HC_Init+0x14c>
      break;
 80078e2:	bf00      	nop
 80078e4:	e002      	b.n	80078ec <USB_HC_Init+0x14c>
      break;
 80078e6:	bf00      	nop
 80078e8:	e000      	b.n	80078ec <USB_HC_Init+0x14c>
      break;
 80078ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	2101      	movs	r1, #1
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	6939      	ldr	r1, [r7, #16]
 8007902:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007906:	4313      	orrs	r3, r2
 8007908:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007916:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800791a:	2b00      	cmp	r3, #0
 800791c:	da03      	bge.n	8007926 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800791e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	e001      	b.n	800792a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff ff0f 	bl	800774e <USB_GetHostSpeed>
 8007930:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007936:	2b02      	cmp	r3, #2
 8007938:	d106      	bne.n	8007948 <USB_HC_Init+0x1a8>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d003      	beq.n	8007948 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	e001      	b.n	800794c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800794c:	787b      	ldrb	r3, [r7, #1]
 800794e:	059b      	lsls	r3, r3, #22
 8007950:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007954:	78bb      	ldrb	r3, [r7, #2]
 8007956:	02db      	lsls	r3, r3, #11
 8007958:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800795c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800795e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007962:	049b      	lsls	r3, r3, #18
 8007964:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007968:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800796a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800796c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007970:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	0159      	lsls	r1, r3, #5
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	440b      	add	r3, r1
 800797e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007982:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007988:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800798a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800798e:	2b03      	cmp	r3, #3
 8007990:	d10f      	bne.n	80079b2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079b0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80079b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3720      	adds	r7, #32
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80079d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02d      	beq.n	8007a42 <USB_HC_StartXfer+0x86>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d129      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80079ee:	79fb      	ldrb	r3, [r7, #7]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d117      	bne.n	8007a24 <USB_HC_StartXfer+0x68>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	79db      	ldrb	r3, [r3, #7]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <USB_HC_StartXfer+0x48>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	79db      	ldrb	r3, [r3, #7]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d10f      	bne.n	8007a24 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	0151      	lsls	r1, r2, #5
 8007a16:	6a3a      	ldr	r2, [r7, #32]
 8007a18:	440a      	add	r2, r1
 8007a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a22:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	795b      	ldrb	r3, [r3, #5]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d107      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fa2f 	bl	8007e9c <USB_DoPing>
      return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e0f8      	b.n	8007c34 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d018      	beq.n	8007a7c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	8912      	ldrh	r2, [r2, #8]
 8007a52:	4413      	add	r3, r2
 8007a54:	3b01      	subs	r3, #1
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	8912      	ldrh	r2, [r2, #8]
 8007a5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a5e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007a60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a62:	8b7b      	ldrh	r3, [r7, #26]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d90b      	bls.n	8007a80 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007a68:	8b7b      	ldrh	r3, [r7, #26]
 8007a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	8912      	ldrh	r2, [r2, #8]
 8007a72:	fb02 f203 	mul.w	r2, r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	611a      	str	r2, [r3, #16]
 8007a7a:	e001      	b.n	8007a80 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	78db      	ldrb	r3, [r3, #3]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d007      	beq.n	8007a98 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	8912      	ldrh	r2, [r2, #8]
 8007a8e:	fb02 f203 	mul.w	r2, r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	611a      	str	r2, [r3, #16]
 8007a96:	e003      	b.n	8007aa0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	695a      	ldr	r2, [r3, #20]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007aa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007aaa:	04d9      	lsls	r1, r3, #19
 8007aac:	4b63      	ldr	r3, [pc, #396]	; (8007c3c <USB_HC_StartXfer+0x280>)
 8007aae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ab0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	7a9b      	ldrb	r3, [r3, #10]
 8007ab6:	075b      	lsls	r3, r3, #29
 8007ab8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007abc:	69f9      	ldr	r1, [r7, #28]
 8007abe:	0148      	lsls	r0, r1, #5
 8007ac0:	6a39      	ldr	r1, [r7, #32]
 8007ac2:	4401      	add	r1, r0
 8007ac4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ac8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007aca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	68d9      	ldr	r1, [r3, #12]
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf0c      	ite	eq
 8007af6:	2301      	moveq	r3, #1
 8007af8:	2300      	movne	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	015a      	lsls	r2, r3, #5
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	69fa      	ldr	r2, [r7, #28]
 8007b0e:	0151      	lsls	r1, r2, #5
 8007b10:	6a3a      	ldr	r2, [r7, #32]
 8007b12:	440a      	add	r2, r1
 8007b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	7e7b      	ldrb	r3, [r7, #25]
 8007b2e:	075b      	lsls	r3, r3, #29
 8007b30:	69f9      	ldr	r1, [r7, #28]
 8007b32:	0148      	lsls	r0, r1, #5
 8007b34:	6a39      	ldr	r1, [r7, #32]
 8007b36:	4401      	add	r1, r0
 8007b38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b56:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d004      	beq.n	8007b6a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	e003      	b.n	8007b72 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b70:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b78:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b86:	461a      	mov	r2, r3
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e04e      	b.n	8007c34 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	78db      	ldrb	r3, [r3, #3]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d149      	bne.n	8007c32 <USB_HC_StartXfer+0x276>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d045      	beq.n	8007c32 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	79db      	ldrb	r3, [r3, #7]
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d830      	bhi.n	8007c10 <USB_HC_StartXfer+0x254>
 8007bae:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <USB_HC_StartXfer+0x1f8>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007be9 	.word	0x08007be9
 8007bbc:	08007bc5 	.word	0x08007bc5
 8007bc0:	08007be9 	.word	0x08007be9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	3303      	adds	r3, #3
 8007bca:	089b      	lsrs	r3, r3, #2
 8007bcc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007bce:	8afa      	ldrh	r2, [r7, #22]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d91c      	bls.n	8007c14 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f043 0220 	orr.w	r2, r3, #32
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007be6:	e015      	b.n	8007c14 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	3303      	adds	r3, #3
 8007bee:	089b      	lsrs	r3, r3, #2
 8007bf0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007bf2:	8afa      	ldrh	r2, [r7, #22]
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d90a      	bls.n	8007c18 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c0e:	e003      	b.n	8007c18 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007c10:	bf00      	nop
 8007c12:	e002      	b.n	8007c1a <USB_HC_StartXfer+0x25e>
        break;
 8007c14:	bf00      	nop
 8007c16:	e000      	b.n	8007c1a <USB_HC_StartXfer+0x25e>
        break;
 8007c18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	68d9      	ldr	r1, [r3, #12]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	785a      	ldrb	r2, [r3, #1]
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2000      	movs	r0, #0
 8007c2a:	9000      	str	r0, [sp, #0]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fb53 	bl	80072d8 <USB_WritePacket>
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3728      	adds	r7, #40	; 0x28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	1ff80000 	.word	0x1ff80000

08007c40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	b29b      	uxth	r3, r3
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b089      	sub	sp, #36	; 0x24
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	0c9b      	lsrs	r3, r3, #18
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	015a      	lsls	r2, r3, #5
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	4413      	add	r3, r2
 8007c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	0fdb      	lsrs	r3, r3, #31
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d104      	bne.n	8007cbc <USB_HC_Halt+0x5a>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e0e8      	b.n	8007e8e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <USB_HC_Halt+0x66>
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d173      	bne.n	8007db0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ce6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f003 0320 	and.w	r3, r3, #32
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f040 80cb 	bne.w	8007e8c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d143      	bne.n	8007d8a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	0151      	lsls	r1, r2, #5
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	440a      	add	r2, r1
 8007d18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d20:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	0151      	lsls	r1, r2, #5
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	440a      	add	r2, r1
 8007d38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d60:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3301      	adds	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d6e:	d81d      	bhi.n	8007dac <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d86:	d0ec      	beq.n	8007d62 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d88:	e080      	b.n	8007e8c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007da8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007daa:	e06f      	b.n	8007e8c <USB_HC_Halt+0x22a>
            break;
 8007dac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dae:	e06d      	b.n	8007e8c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007dce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d143      	bne.n	8007e68 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	0151      	lsls	r1, r2, #5
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	440a      	add	r2, r1
 8007df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dfe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	3301      	adds	r3, #1
 8007e44:	61fb      	str	r3, [r7, #28]
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e4c:	d81d      	bhi.n	8007e8a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e64:	d0ec      	beq.n	8007e40 <USB_HC_Halt+0x1de>
 8007e66:	e011      	b.n	8007e8c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	e000      	b.n	8007e8c <USB_HC_Halt+0x22a>
          break;
 8007e8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3724      	adds	r7, #36	; 0x24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007eac:	78fb      	ldrb	r3, [r7, #3]
 8007eae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	04da      	lsls	r2, r3, #19
 8007eb8:	4b15      	ldr	r3, [pc, #84]	; (8007f10 <USB_DoPing+0x74>)
 8007eba:	4013      	ands	r3, r2
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	0151      	lsls	r1, r2, #5
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ecc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ee4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efa:	461a      	mov	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	1ff80000 	.word	0x1ff80000

08007f14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff f935 	bl	8007194 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007f2a:	2110      	movs	r1, #16
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff f98f 	bl	8007250 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff f9b0 	bl	8007298 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f38:	2300      	movs	r3, #0
 8007f3a:	613b      	str	r3, [r7, #16]
 8007f3c:	e01f      	b.n	8007f7e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f54:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f64:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f72:	461a      	mov	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	613b      	str	r3, [r7, #16]
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b0f      	cmp	r3, #15
 8007f82:	d9dc      	bls.n	8007f3e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007f84:	2300      	movs	r3, #0
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e034      	b.n	8007ff4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	015a      	lsls	r2, r3, #5
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4413      	add	r3, r2
 8007f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fa0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fa8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fb0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fd0:	d80c      	bhi.n	8007fec <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe8:	d0ec      	beq.n	8007fc4 <USB_StopHost+0xb0>
 8007fea:	e000      	b.n	8007fee <USB_StopHost+0xda>
        break;
 8007fec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	613b      	str	r3, [r7, #16]
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	2b0f      	cmp	r3, #15
 8007ff8:	d9c7      	bls.n	8007f8a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008000:	461a      	mov	r2, r3
 8008002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008006:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800800e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff f8ae 	bl	8007172 <USB_EnableGlobalInt>

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008020:	b590      	push	{r4, r7, lr}
 8008022:	b089      	sub	sp, #36	; 0x24
 8008024:	af04      	add	r7, sp, #16
 8008026:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008028:	2301      	movs	r3, #1
 800802a:	2202      	movs	r2, #2
 800802c:	2102      	movs	r1, #2
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fc66 	bl	8008900 <USBH_FindInterface>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2bff      	cmp	r3, #255	; 0xff
 800803c:	d002      	beq.n	8008044 <USBH_CDC_InterfaceInit+0x24>
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d901      	bls.n	8008048 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008044:	2302      	movs	r3, #2
 8008046:	e13d      	b.n	80082c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fc3b 	bl	80088c8 <USBH_SelectInterface>
 8008052:	4603      	mov	r3, r0
 8008054:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800805c:	2302      	movs	r3, #2
 800805e:	e131      	b.n	80082c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008066:	2050      	movs	r0, #80	; 0x50
 8008068:	f002 fa00 	bl	800a46c <malloc>
 800806c:	4603      	mov	r3, r0
 800806e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008080:	2302      	movs	r3, #2
 8008082:	e11f      	b.n	80082c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008084:	2250      	movs	r2, #80	; 0x50
 8008086:	2100      	movs	r1, #0
 8008088:	68b8      	ldr	r0, [r7, #8]
 800808a:	f002 f9ff 	bl	800a48c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	211a      	movs	r1, #26
 8008094:	fb01 f303 	mul.w	r3, r1, r3
 8008098:	4413      	add	r3, r2
 800809a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	b25b      	sxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	da15      	bge.n	80080d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	211a      	movs	r1, #26
 80080ac:	fb01 f303 	mul.w	r3, r1, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80080b6:	781a      	ldrb	r2, [r3, #0]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	211a      	movs	r1, #26
 80080c2:	fb01 f303 	mul.w	r3, r1, r3
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80080cc:	881a      	ldrh	r2, [r3, #0]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fe32 	bl	8009d42 <USBH_AllocPipe>
 80080de:	4603      	mov	r3, r0
 80080e0:	461a      	mov	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	7819      	ldrb	r1, [r3, #0]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	7858      	ldrb	r0, [r3, #1]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	8952      	ldrh	r2, [r2, #10]
 80080fe:	9202      	str	r2, [sp, #8]
 8008100:	2203      	movs	r2, #3
 8008102:	9201      	str	r2, [sp, #4]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	4623      	mov	r3, r4
 8008108:	4602      	mov	r2, r0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fdea 	bl	8009ce4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2200      	movs	r2, #0
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f002 f8f9 	bl	800a310 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800811e:	2300      	movs	r3, #0
 8008120:	2200      	movs	r2, #0
 8008122:	210a      	movs	r1, #10
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fbeb 	bl	8008900 <USBH_FindInterface>
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	2bff      	cmp	r3, #255	; 0xff
 8008132:	d002      	beq.n	800813a <USBH_CDC_InterfaceInit+0x11a>
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d901      	bls.n	800813e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800813a:	2302      	movs	r3, #2
 800813c:	e0c2      	b.n	80082c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	211a      	movs	r1, #26
 8008144:	fb01 f303 	mul.w	r3, r1, r3
 8008148:	4413      	add	r3, r2
 800814a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	b25b      	sxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	da16      	bge.n	8008184 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	211a      	movs	r1, #26
 800815c:	fb01 f303 	mul.w	r3, r1, r3
 8008160:	4413      	add	r3, r2
 8008162:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008166:	781a      	ldrb	r2, [r3, #0]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800816c:	7bfb      	ldrb	r3, [r7, #15]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	211a      	movs	r1, #26
 8008172:	fb01 f303 	mul.w	r3, r1, r3
 8008176:	4413      	add	r3, r2
 8008178:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800817c:	881a      	ldrh	r2, [r3, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	835a      	strh	r2, [r3, #26]
 8008182:	e015      	b.n	80081b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	211a      	movs	r1, #26
 800818a:	fb01 f303 	mul.w	r3, r1, r3
 800818e:	4413      	add	r3, r2
 8008190:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008194:	781a      	ldrb	r2, [r3, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	211a      	movs	r1, #26
 80081a0:	fb01 f303 	mul.w	r3, r1, r3
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	211a      	movs	r1, #26
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b25b      	sxtb	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	da16      	bge.n	80081f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	211a      	movs	r1, #26
 80081ce:	fb01 f303 	mul.w	r3, r1, r3
 80081d2:	4413      	add	r3, r2
 80081d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	211a      	movs	r1, #26
 80081e4:	fb01 f303 	mul.w	r3, r1, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80081ee:	881a      	ldrh	r2, [r3, #0]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	835a      	strh	r2, [r3, #26]
 80081f4:	e015      	b.n	8008222 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	211a      	movs	r1, #26
 80081fc:	fb01 f303 	mul.w	r3, r1, r3
 8008200:	4413      	add	r3, r2
 8008202:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	211a      	movs	r1, #26
 8008212:	fb01 f303 	mul.w	r3, r1, r3
 8008216:	4413      	add	r3, r2
 8008218:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800821c:	881a      	ldrh	r2, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	7b9b      	ldrb	r3, [r3, #14]
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 fd8a 	bl	8009d42 <USBH_AllocPipe>
 800822e:	4603      	mov	r3, r0
 8008230:	461a      	mov	r2, r3
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	7bdb      	ldrb	r3, [r3, #15]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 fd80 	bl	8009d42 <USBH_AllocPipe>
 8008242:	4603      	mov	r3, r0
 8008244:	461a      	mov	r2, r3
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	7b59      	ldrb	r1, [r3, #13]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	7b98      	ldrb	r0, [r3, #14]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	8b12      	ldrh	r2, [r2, #24]
 8008262:	9202      	str	r2, [sp, #8]
 8008264:	2202      	movs	r2, #2
 8008266:	9201      	str	r2, [sp, #4]
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	4623      	mov	r3, r4
 800826c:	4602      	mov	r2, r0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fd38 	bl	8009ce4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	7b19      	ldrb	r1, [r3, #12]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	7bd8      	ldrb	r0, [r3, #15]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	8b52      	ldrh	r2, [r2, #26]
 800828c:	9202      	str	r2, [sp, #8]
 800828e:	2202      	movs	r2, #2
 8008290:	9201      	str	r2, [sp, #4]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	4623      	mov	r3, r4
 8008296:	4602      	mov	r2, r0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fd23 	bl	8009ce4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	7b5b      	ldrb	r3, [r3, #13]
 80082aa:	2200      	movs	r2, #0
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f002 f82e 	bl	800a310 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	7b1b      	ldrb	r3, [r3, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f002 f827 	bl	800a310 <USBH_LL_SetToggle>

  return USBH_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd90      	pop	{r4, r7, pc}

080082cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00e      	beq.n	8008304 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 fd18 	bl	8009d22 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 fd43 	bl	8009d84 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	7b1b      	ldrb	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00e      	beq.n	800832a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	7b1b      	ldrb	r3, [r3, #12]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fd05 	bl	8009d22 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	7b1b      	ldrb	r3, [r3, #12]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 fd30 	bl	8009d84 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	7b5b      	ldrb	r3, [r3, #13]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00e      	beq.n	8008350 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	7b5b      	ldrb	r3, [r3, #13]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 fcf2 	bl	8009d22 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	7b5b      	ldrb	r3, [r3, #13]
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fd1d 	bl	8009d84 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4618      	mov	r0, r3
 8008366:	f002 f889 	bl	800a47c <free>
    phost->pActiveClass->pData = 0U;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008370:	2200      	movs	r2, #0
 8008372:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3340      	adds	r3, #64	; 0x40
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f8b1 	bl	80084fe <GetLineCoding>
 800839c:	4603      	mov	r3, r0
 800839e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d105      	bne.n	80083b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083ac:	2102      	movs	r1, #2
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80083b2:	7afb      	ldrb	r3, [r7, #11]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80083c4:	2301      	movs	r3, #1
 80083c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d877      	bhi.n	80084d0 <USBH_CDC_Process+0x114>
 80083e0:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <USBH_CDC_Process+0x2c>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	080083fd 	.word	0x080083fd
 80083ec:	08008403 	.word	0x08008403
 80083f0:	08008433 	.word	0x08008433
 80083f4:	080084a7 	.word	0x080084a7
 80083f8:	080084b5 	.word	0x080084b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008400:	e06d      	b.n	80084de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f897 	bl	800853c <SetLineCoding>
 800840e:	4603      	mov	r3, r0
 8008410:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008420:	e058      	b.n	80084d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d055      	beq.n	80084d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2204      	movs	r2, #4
 800842c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008430:	e050      	b.n	80084d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	3340      	adds	r3, #64	; 0x40
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f860 	bl	80084fe <GetLineCoding>
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d126      	bne.n	8008496 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800845a:	791b      	ldrb	r3, [r3, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d13b      	bne.n	80084d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800846a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800846c:	429a      	cmp	r2, r3
 800846e:	d133      	bne.n	80084d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800847a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800847c:	429a      	cmp	r2, r3
 800847e:	d12b      	bne.n	80084d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008488:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800848a:	429a      	cmp	r2, r3
 800848c:	d124      	bne.n	80084d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f958 	bl	8008744 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008494:	e020      	b.n	80084d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d01d      	beq.n	80084d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2204      	movs	r2, #4
 80084a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80084a4:	e018      	b.n	80084d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f867 	bl	800857a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8da 	bl	8008666 <CDC_ProcessReception>
      break;
 80084b2:	e014      	b.n	80084de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80084b4:	2100      	movs	r1, #0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 ffe3 	bl	8009482 <USBH_ClrFeature>
 80084bc:	4603      	mov	r3, r0
 80084be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80084ce:	e005      	b.n	80084dc <USBH_CDC_Process+0x120>

    default:
      break;
 80084d0:	bf00      	nop
 80084d2:	e004      	b.n	80084de <USBH_CDC_Process+0x122>
      break;
 80084d4:	bf00      	nop
 80084d6:	e002      	b.n	80084de <USBH_CDC_Process+0x122>
      break;
 80084d8:	bf00      	nop
 80084da:	e000      	b.n	80084de <USBH_CDC_Process+0x122>
      break;
 80084dc:	bf00      	nop

  }

  return status;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	22a1      	movs	r2, #161	; 0xa1
 800850c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2221      	movs	r2, #33	; 0x21
 8008512:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2207      	movs	r2, #7
 8008524:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2207      	movs	r2, #7
 800852a:	4619      	mov	r1, r3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f988 	bl	8009842 <USBH_CtlReq>
 8008532:	4603      	mov	r3, r0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2221      	movs	r2, #33	; 0x21
 800854a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2207      	movs	r2, #7
 8008562:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2207      	movs	r2, #7
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f001 f969 	bl	8009842 <USBH_CtlReq>
 8008570:	4603      	mov	r3, r0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af02      	add	r7, sp, #8
 8008580:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800858c:	2300      	movs	r3, #0
 800858e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008596:	2b01      	cmp	r3, #1
 8008598:	d002      	beq.n	80085a0 <CDC_ProcessTransmission+0x26>
 800859a:	2b02      	cmp	r3, #2
 800859c:	d023      	beq.n	80085e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800859e:	e05e      	b.n	800865e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	8b12      	ldrh	r2, [r2, #24]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d90b      	bls.n	80085c4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	69d9      	ldr	r1, [r3, #28]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8b1a      	ldrh	r2, [r3, #24]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	7b5b      	ldrb	r3, [r3, #13]
 80085b8:	2001      	movs	r0, #1
 80085ba:	9000      	str	r0, [sp, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 fb4e 	bl	8009c5e <USBH_BulkSendData>
 80085c2:	e00b      	b.n	80085dc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	7b5b      	ldrb	r3, [r3, #13]
 80085d2:	2001      	movs	r0, #1
 80085d4:	9000      	str	r0, [sp, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 fb41 	bl	8009c5e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80085e4:	e03b      	b.n	800865e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	7b5b      	ldrb	r3, [r3, #13]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 fe65 	bl	800a2bc <USBH_LL_GetURBState>
 80085f2:	4603      	mov	r3, r0
 80085f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80085f6:	7afb      	ldrb	r3, [r7, #11]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d128      	bne.n	800864e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	8b12      	ldrh	r2, [r2, #24]
 8008604:	4293      	cmp	r3, r2
 8008606:	d90e      	bls.n	8008626 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	8b12      	ldrh	r2, [r2, #24]
 8008610:	1a9a      	subs	r2, r3, r2
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	8b12      	ldrh	r2, [r2, #24]
 800861e:	441a      	add	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	61da      	str	r2, [r3, #28]
 8008624:	e002      	b.n	800862c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800863c:	e00e      	b.n	800865c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f868 	bl	800871c <USBH_CDC_TransmitCallback>
      break;
 800864c:	e006      	b.n	800865c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d103      	bne.n	800865c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800865c:	bf00      	nop
  }
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008678:	2300      	movs	r3, #0
 800867a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008682:	2b03      	cmp	r3, #3
 8008684:	d002      	beq.n	800868c <CDC_ProcessReception+0x26>
 8008686:	2b04      	cmp	r3, #4
 8008688:	d00e      	beq.n	80086a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800868a:	e043      	b.n	8008714 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	6a19      	ldr	r1, [r3, #32]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	8b5a      	ldrh	r2, [r3, #26]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	7b1b      	ldrb	r3, [r3, #12]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fb05 	bl	8009ca8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2204      	movs	r2, #4
 80086a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80086a6:	e035      	b.n	8008714 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	7b1b      	ldrb	r3, [r3, #12]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 fe04 	bl	800a2bc <USBH_LL_GetURBState>
 80086b4:	4603      	mov	r3, r0
 80086b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80086b8:	7cfb      	ldrb	r3, [r7, #19]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d129      	bne.n	8008712 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	7b1b      	ldrb	r3, [r3, #12]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 fd67 	bl	800a198 <USBH_LL_GetLastXferSize>
 80086ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d016      	beq.n	8008704 <CDC_ProcessReception+0x9e>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	8b5b      	ldrh	r3, [r3, #26]
 80086da:	461a      	mov	r2, r3
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4293      	cmp	r3, r2
 80086e0:	d910      	bls.n	8008704 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1ad2      	subs	r2, r2, r3
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	6a1a      	ldr	r2, [r3, #32]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	441a      	add	r2, r3
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2203      	movs	r2, #3
 80086fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008702:	e006      	b.n	8008712 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f80f 	bl	8008730 <USBH_CDC_ReceiveCallback>
      break;
 8008712:	bf00      	nop
  }
}
 8008714:	bf00      	nop
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008724:	bf00      	nop
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800876c:	2302      	movs	r3, #2
 800876e:	e029      	b.n	80087c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	79fa      	ldrb	r2, [r7, #7]
 8008774:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f81f 	bl	80087cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d003      	beq.n	80087bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f001 fc37 	bl	800a030 <USBH_LL_Init>

  return USBH_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e009      	b.n	80087f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	33e0      	adds	r3, #224	; 0xe0
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	2200      	movs	r2, #0
 80087ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b0e      	cmp	r3, #14
 80087f6:	d9f2      	bls.n	80087de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e009      	b.n	8008812 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4413      	add	r3, r2
 8008804:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008818:	d3f1      	bcc.n	80087fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2240      	movs	r2, #64	; 0x40
 800883e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d016      	beq.n	80088b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10e      	bne.n	80088b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008898:	1c59      	adds	r1, r3, #1
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	33de      	adds	r3, #222	; 0xde
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
 80088ae:	e004      	b.n	80088ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80088b0:	2302      	movs	r3, #2
 80088b2:	73fb      	strb	r3, [r7, #15]
 80088b4:	e001      	b.n	80088ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80088b6:	2302      	movs	r3, #2
 80088b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d204      	bcs.n	80088ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80088ec:	e001      	b.n	80088f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80088ee:	2302      	movs	r3, #2
 80088f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	4608      	mov	r0, r1
 800890a:	4611      	mov	r1, r2
 800890c:	461a      	mov	r2, r3
 800890e:	4603      	mov	r3, r0
 8008910:	70fb      	strb	r3, [r7, #3]
 8008912:	460b      	mov	r3, r1
 8008914:	70bb      	strb	r3, [r7, #2]
 8008916:	4613      	mov	r3, r2
 8008918:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800891e:	2300      	movs	r3, #0
 8008920:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008928:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800892a:	e025      	b.n	8008978 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	221a      	movs	r2, #26
 8008930:	fb02 f303 	mul.w	r3, r2, r3
 8008934:	3308      	adds	r3, #8
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4413      	add	r3, r2
 800893a:	3302      	adds	r3, #2
 800893c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	795b      	ldrb	r3, [r3, #5]
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	429a      	cmp	r2, r3
 8008946:	d002      	beq.n	800894e <USBH_FindInterface+0x4e>
 8008948:	78fb      	ldrb	r3, [r7, #3]
 800894a:	2bff      	cmp	r3, #255	; 0xff
 800894c:	d111      	bne.n	8008972 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008952:	78ba      	ldrb	r2, [r7, #2]
 8008954:	429a      	cmp	r2, r3
 8008956:	d002      	beq.n	800895e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008958:	78bb      	ldrb	r3, [r7, #2]
 800895a:	2bff      	cmp	r3, #255	; 0xff
 800895c:	d109      	bne.n	8008972 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008962:	787a      	ldrb	r2, [r7, #1]
 8008964:	429a      	cmp	r2, r3
 8008966:	d002      	beq.n	800896e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008968:	787b      	ldrb	r3, [r7, #1]
 800896a:	2bff      	cmp	r3, #255	; 0xff
 800896c:	d101      	bne.n	8008972 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	e006      	b.n	8008980 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008972:	7dfb      	ldrb	r3, [r7, #23]
 8008974:	3301      	adds	r3, #1
 8008976:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008978:	7dfb      	ldrb	r3, [r7, #23]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d9d6      	bls.n	800892c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800897e:	23ff      	movs	r3, #255	; 0xff
}
 8008980:	4618      	mov	r0, r3
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f001 fb87 	bl	800a0a8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800899a:	2101      	movs	r1, #1
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 fca0 	bl	800a2e2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af04      	add	r7, sp, #16
 80089b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80089b4:	2302      	movs	r3, #2
 80089b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d102      	bne.n	80089ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2203      	movs	r2, #3
 80089cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b0b      	cmp	r3, #11
 80089d6:	f200 81b3 	bhi.w	8008d40 <USBH_Process+0x394>
 80089da:	a201      	add	r2, pc, #4	; (adr r2, 80089e0 <USBH_Process+0x34>)
 80089dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e0:	08008a11 	.word	0x08008a11
 80089e4:	08008a43 	.word	0x08008a43
 80089e8:	08008aab 	.word	0x08008aab
 80089ec:	08008cdb 	.word	0x08008cdb
 80089f0:	08008d41 	.word	0x08008d41
 80089f4:	08008b4f 	.word	0x08008b4f
 80089f8:	08008c81 	.word	0x08008c81
 80089fc:	08008b85 	.word	0x08008b85
 8008a00:	08008ba5 	.word	0x08008ba5
 8008a04:	08008bc5 	.word	0x08008bc5
 8008a08:	08008bf3 	.word	0x08008bf3
 8008a0c:	08008cc3 	.word	0x08008cc3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8193 	beq.w	8008d44 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008a24:	20c8      	movs	r0, #200	; 0xc8
 8008a26:	f001 fca3 	bl	800a370 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 fb99 	bl	800a162 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008a40:	e180      	b.n	8008d44 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d107      	bne.n	8008a5c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008a5a:	e182      	b.n	8008d62 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a66:	d914      	bls.n	8008a92 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a6e:	3301      	adds	r3, #1
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d903      	bls.n	8008a8a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	220d      	movs	r2, #13
 8008a86:	701a      	strb	r2, [r3, #0]
      break;
 8008a88:	e16b      	b.n	8008d62 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	701a      	strb	r2, [r3, #0]
      break;
 8008a90:	e167      	b.n	8008d62 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a98:	f103 020a 	add.w	r2, r3, #10
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008aa2:	200a      	movs	r0, #10
 8008aa4:	f001 fc64 	bl	800a370 <USBH_Delay>
      break;
 8008aa8:	e15b      	b.n	8008d62 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008aba:	2104      	movs	r1, #4
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ac0:	2064      	movs	r0, #100	; 0x64
 8008ac2:	f001 fc55 	bl	800a370 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fb24 	bl	800a114 <USBH_LL_GetSpeed>
 8008acc:	4603      	mov	r3, r0
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2205      	movs	r2, #5
 8008ada:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008adc:	2100      	movs	r1, #0
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 f92f 	bl	8009d42 <USBH_AllocPipe>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008aec:	2180      	movs	r1, #128	; 0x80
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 f927 	bl	8009d42 <USBH_AllocPipe>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7919      	ldrb	r1, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b10:	b292      	uxth	r2, r2
 8008b12:	9202      	str	r2, [sp, #8]
 8008b14:	2200      	movs	r2, #0
 8008b16:	9201      	str	r2, [sp, #4]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2280      	movs	r2, #128	; 0x80
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f001 f8e0 	bl	8009ce4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	7959      	ldrb	r1, [r3, #5]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b38:	b292      	uxth	r2, r2
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4603      	mov	r3, r0
 8008b44:	2200      	movs	r2, #0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 f8cc 	bl	8009ce4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008b4c:	e109      	b.n	8008d62 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f90c 	bl	8008d6c <USBH_HandleEnum>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f040 80f3 	bne.w	8008d48 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d103      	bne.n	8008b7c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2208      	movs	r2, #8
 8008b78:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008b7a:	e0e5      	b.n	8008d48 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2207      	movs	r2, #7
 8008b80:	701a      	strb	r2, [r3, #0]
      break;
 8008b82:	e0e1      	b.n	8008d48 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80de 	beq.w	8008d4c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b96:	2101      	movs	r1, #1
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008ba2:	e0d3      	b.n	8008d4c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fc20 	bl	80093f4 <USBH_SetCfg>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 80ca 	bne.w	8008d50 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2209      	movs	r2, #9
 8008bc0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008bc2:	e0c5      	b.n	8008d50 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008bca:	f003 0320 	and.w	r3, r3, #32
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fc30 	bl	800943a <USBH_SetFeature>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f040 80b9 	bne.w	8008d54 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	220a      	movs	r2, #10
 8008be6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008be8:	e0b4      	b.n	8008d54 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	220a      	movs	r2, #10
 8008bee:	701a      	strb	r2, [r3, #0]
      break;
 8008bf0:	e0b0      	b.n	8008d54 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80ad 	beq.w	8008d58 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
 8008c0a:	e016      	b.n	8008c3a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c0c:	7bfa      	ldrb	r2, [r7, #15]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	32de      	adds	r2, #222	; 0xde
 8008c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c16:	791a      	ldrb	r2, [r3, #4]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d108      	bne.n	8008c34 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008c22:	7bfa      	ldrb	r2, [r7, #15]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	32de      	adds	r2, #222	; 0xde
 8008c28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008c32:	e005      	b.n	8008c40 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	3301      	adds	r3, #1
 8008c38:	73fb      	strb	r3, [r7, #15]
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0e5      	beq.n	8008c0c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d016      	beq.n	8008c78 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	4798      	blx	r3
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2206      	movs	r2, #6
 8008c60:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c68:	2103      	movs	r1, #3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c6e:	e073      	b.n	8008d58 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	220d      	movs	r2, #13
 8008c74:	701a      	strb	r2, [r3, #0]
      break;
 8008c76:	e06f      	b.n	8008d58 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	220d      	movs	r2, #13
 8008c7c:	701a      	strb	r2, [r3, #0]
      break;
 8008c7e:	e06b      	b.n	8008d58 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d017      	beq.n	8008cba <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d103      	bne.n	8008caa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	220b      	movs	r2, #11
 8008ca6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ca8:	e058      	b.n	8008d5c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008caa:	7bbb      	ldrb	r3, [r7, #14]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d154      	bne.n	8008d5c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	220d      	movs	r2, #13
 8008cb6:	701a      	strb	r2, [r3, #0]
      break;
 8008cb8:	e050      	b.n	8008d5c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	220d      	movs	r2, #13
 8008cbe:	701a      	strb	r2, [r3, #0]
      break;
 8008cc0:	e04c      	b.n	8008d5c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d049      	beq.n	8008d60 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
      }
      break;
 8008cd8:	e042      	b.n	8008d60 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f7ff fd72 	bl	80087cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d16:	2105      	movs	r1, #5
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d107      	bne.n	8008d38 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff fe2b 	bl	800898c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d36:	e014      	b.n	8008d62 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 f9b5 	bl	800a0a8 <USBH_LL_Start>
      break;
 8008d3e:	e010      	b.n	8008d62 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008d40:	bf00      	nop
 8008d42:	e00e      	b.n	8008d62 <USBH_Process+0x3b6>
      break;
 8008d44:	bf00      	nop
 8008d46:	e00c      	b.n	8008d62 <USBH_Process+0x3b6>
      break;
 8008d48:	bf00      	nop
 8008d4a:	e00a      	b.n	8008d62 <USBH_Process+0x3b6>
    break;
 8008d4c:	bf00      	nop
 8008d4e:	e008      	b.n	8008d62 <USBH_Process+0x3b6>
      break;
 8008d50:	bf00      	nop
 8008d52:	e006      	b.n	8008d62 <USBH_Process+0x3b6>
      break;
 8008d54:	bf00      	nop
 8008d56:	e004      	b.n	8008d62 <USBH_Process+0x3b6>
      break;
 8008d58:	bf00      	nop
 8008d5a:	e002      	b.n	8008d62 <USBH_Process+0x3b6>
      break;
 8008d5c:	bf00      	nop
 8008d5e:	e000      	b.n	8008d62 <USBH_Process+0x3b6>
      break;
 8008d60:	bf00      	nop
  }
  return USBH_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b088      	sub	sp, #32
 8008d70:	af04      	add	r7, sp, #16
 8008d72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008d74:	2301      	movs	r3, #1
 8008d76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	785b      	ldrb	r3, [r3, #1]
 8008d80:	2b07      	cmp	r3, #7
 8008d82:	f200 81c1 	bhi.w	8009108 <USBH_HandleEnum+0x39c>
 8008d86:	a201      	add	r2, pc, #4	; (adr r2, 8008d8c <USBH_HandleEnum+0x20>)
 8008d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8c:	08008dad 	.word	0x08008dad
 8008d90:	08008e6b 	.word	0x08008e6b
 8008d94:	08008ed5 	.word	0x08008ed5
 8008d98:	08008f63 	.word	0x08008f63
 8008d9c:	08008fcd 	.word	0x08008fcd
 8008da0:	0800903d 	.word	0x0800903d
 8008da4:	08009083 	.word	0x08009083
 8008da8:	080090c9 	.word	0x080090c9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008dac:	2108      	movs	r1, #8
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa50 	bl	8009254 <USBH_Get_DevDesc>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d130      	bne.n	8008e20 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	7919      	ldrb	r1, [r3, #4]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008de2:	b292      	uxth	r2, r2
 8008de4:	9202      	str	r2, [sp, #8]
 8008de6:	2200      	movs	r2, #0
 8008de8:	9201      	str	r2, [sp, #4]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	4603      	mov	r3, r0
 8008dee:	2280      	movs	r2, #128	; 0x80
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 ff77 	bl	8009ce4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	7959      	ldrb	r1, [r3, #5]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e0a:	b292      	uxth	r2, r2
 8008e0c:	9202      	str	r2, [sp, #8]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	9201      	str	r2, [sp, #4]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	4603      	mov	r3, r0
 8008e16:	2200      	movs	r2, #0
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 ff63 	bl	8009ce4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e1e:	e175      	b.n	800910c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b03      	cmp	r3, #3
 8008e24:	f040 8172 	bne.w	800910c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e2e:	3301      	adds	r3, #1
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	d903      	bls.n	8008e4a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	220d      	movs	r2, #13
 8008e46:	701a      	strb	r2, [r3, #0]
      break;
 8008e48:	e160      	b.n	800910c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	795b      	ldrb	r3, [r3, #5]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 ff97 	bl	8009d84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	791b      	ldrb	r3, [r3, #4]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 ff91 	bl	8009d84 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
      break;
 8008e68:	e150      	b.n	800910c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008e6a:	2112      	movs	r1, #18
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f9f1 	bl	8009254 <USBH_Get_DevDesc>
 8008e72:	4603      	mov	r3, r0
 8008e74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d103      	bne.n	8008e84 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e82:	e145      	b.n	8009110 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	f040 8142 	bne.w	8009110 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e92:	3301      	adds	r3, #1
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d903      	bls.n	8008eae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	220d      	movs	r2, #13
 8008eaa:	701a      	strb	r2, [r3, #0]
      break;
 8008eac:	e130      	b.n	8009110 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	795b      	ldrb	r3, [r3, #5]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 ff65 	bl	8009d84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 ff5f 	bl	8009d84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
      break;
 8008ed2:	e11d      	b.n	8009110 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fa68 	bl	80093ac <USBH_SetAddress>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d132      	bne.n	8008f4c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008ee6:	2002      	movs	r0, #2
 8008ee8:	f001 fa42 	bl	800a370 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2203      	movs	r2, #3
 8008ef8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	7919      	ldrb	r1, [r3, #4]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	9202      	str	r2, [sp, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	9201      	str	r2, [sp, #4]
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2280      	movs	r2, #128	; 0x80
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fee1 	bl	8009ce4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	7959      	ldrb	r1, [r3, #5]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f36:	b292      	uxth	r2, r2
 8008f38:	9202      	str	r2, [sp, #8]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	9201      	str	r2, [sp, #4]
 8008f3e:	9300      	str	r3, [sp, #0]
 8008f40:	4603      	mov	r3, r0
 8008f42:	2200      	movs	r2, #0
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fecd 	bl	8009ce4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f4a:	e0e3      	b.n	8009114 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	f040 80e0 	bne.w	8009114 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220d      	movs	r2, #13
 8008f58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	705a      	strb	r2, [r3, #1]
      break;
 8008f60:	e0d8      	b.n	8009114 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008f62:	2109      	movs	r1, #9
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f99d 	bl	80092a4 <USBH_Get_CfgDesc>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d103      	bne.n	8008f7c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2204      	movs	r2, #4
 8008f78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f7a:	e0cd      	b.n	8009118 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	f040 80ca 	bne.w	8009118 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d903      	bls.n	8008fa6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	220d      	movs	r2, #13
 8008fa2:	701a      	strb	r2, [r3, #0]
      break;
 8008fa4:	e0b8      	b.n	8009118 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	795b      	ldrb	r3, [r3, #5]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fee9 	bl	8009d84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	791b      	ldrb	r3, [r3, #4]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fee3 	bl	8009d84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]
      break;
 8008fca:	e0a5      	b.n	8009118 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f965 	bl	80092a4 <USBH_Get_CfgDesc>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2205      	movs	r2, #5
 8008fe8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fea:	e097      	b.n	800911c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	f040 8094 	bne.w	800911c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800900a:	2b03      	cmp	r3, #3
 800900c:	d903      	bls.n	8009016 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	220d      	movs	r2, #13
 8009012:	701a      	strb	r2, [r3, #0]
      break;
 8009014:	e082      	b.n	800911c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	795b      	ldrb	r3, [r3, #5]
 800901a:	4619      	mov	r1, r3
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 feb1 	bl	8009d84 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	791b      	ldrb	r3, [r3, #4]
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 feab 	bl	8009d84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	701a      	strb	r2, [r3, #0]
      break;
 800903a:	e06f      	b.n	800911c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009042:	2b00      	cmp	r3, #0
 8009044:	d019      	beq.n	800907a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009052:	23ff      	movs	r3, #255	; 0xff
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f949 	bl	80092ec <USBH_Get_StringDesc>
 800905a:	4603      	mov	r3, r0
 800905c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2206      	movs	r2, #6
 8009068:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800906a:	e059      	b.n	8009120 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b03      	cmp	r3, #3
 8009070:	d156      	bne.n	8009120 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2206      	movs	r2, #6
 8009076:	705a      	strb	r2, [r3, #1]
      break;
 8009078:	e052      	b.n	8009120 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2206      	movs	r2, #6
 800907e:	705a      	strb	r2, [r3, #1]
      break;
 8009080:	e04e      	b.n	8009120 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009088:	2b00      	cmp	r3, #0
 800908a:	d019      	beq.n	80090c0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009098:	23ff      	movs	r3, #255	; 0xff
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f926 	bl	80092ec <USBH_Get_StringDesc>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d103      	bne.n	80090b2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2207      	movs	r2, #7
 80090ae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80090b0:	e038      	b.n	8009124 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d135      	bne.n	8009124 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2207      	movs	r2, #7
 80090bc:	705a      	strb	r2, [r3, #1]
      break;
 80090be:	e031      	b.n	8009124 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2207      	movs	r2, #7
 80090c4:	705a      	strb	r2, [r3, #1]
      break;
 80090c6:	e02d      	b.n	8009124 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d017      	beq.n	8009102 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80090de:	23ff      	movs	r3, #255	; 0xff
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f903 	bl	80092ec <USBH_Get_StringDesc>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d102      	bne.n	80090f6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80090f4:	e018      	b.n	8009128 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d115      	bne.n	8009128 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009100:	e012      	b.n	8009128 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
      break;
 8009106:	e00f      	b.n	8009128 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009108:	bf00      	nop
 800910a:	e00e      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 800910c:	bf00      	nop
 800910e:	e00c      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 8009110:	bf00      	nop
 8009112:	e00a      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 8009114:	bf00      	nop
 8009116:	e008      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 8009118:	bf00      	nop
 800911a:	e006      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 800911c:	bf00      	nop
 800911e:	e004      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 8009120:	bf00      	nop
 8009122:	e002      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 8009124:	bf00      	nop
 8009126:	e000      	b.n	800912a <USBH_HandleEnum+0x3be>
      break;
 8009128:	bf00      	nop
  }
  return Status;
 800912a:	7bfb      	ldrb	r3, [r7, #15]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009146:	bf00      	nop
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f804 	bl	8009176 <USBH_HandleSof>
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b0b      	cmp	r3, #11
 8009186:	d10a      	bne.n	800919e <USBH_HandleSof+0x28>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d005      	beq.n	800919e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	4798      	blx	r3
  }
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b083      	sub	sp, #12
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80091b6:	bf00      	nop
}
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b083      	sub	sp, #12
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80091d2:	bf00      	nop
}
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80091de:	b480      	push	{r7}
 80091e0:	b083      	sub	sp, #12
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 ff56 	bl	800a0de <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	791b      	ldrb	r3, [r3, #4]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fda3 	bl	8009d84 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	795b      	ldrb	r3, [r3, #5]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fd9d 	bl	8009d84 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af02      	add	r7, sp, #8
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	b29b      	uxth	r3, r3
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	4613      	mov	r3, r2
 800926e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009272:	2100      	movs	r1, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f864 	bl	8009342 <USBH_GetDescriptor>
 800927a:	4603      	mov	r3, r0
 800927c:	73fb      	strb	r3, [r7, #15]
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f203 3026 	addw	r0, r3, #806	; 0x326
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	b292      	uxth	r2, r2
 8009294:	4619      	mov	r1, r3
 8009296:	f000 f918 	bl	80094ca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af02      	add	r7, sp, #8
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	331c      	adds	r3, #28
 80092b4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80092b6:	887b      	ldrh	r3, [r7, #2]
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092c0:	2100      	movs	r1, #0
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f83d 	bl	8009342 <USBH_GetDescriptor>
 80092c8:	4603      	mov	r3, r0
 80092ca:	72fb      	strb	r3, [r7, #11]
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d107      	bne.n	80092e2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80092d8:	887a      	ldrh	r2, [r7, #2]
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f964 	bl	80095aa <USBH_ParseCfgDesc>
  }

  return status;
 80092e2:	7afb      	ldrb	r3, [r7, #11]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	461a      	mov	r2, r3
 80092f8:	460b      	mov	r3, r1
 80092fa:	72fb      	strb	r3, [r7, #11]
 80092fc:	4613      	mov	r3, r2
 80092fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	b29b      	uxth	r3, r3
 8009304:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009308:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009310:	893b      	ldrh	r3, [r7, #8]
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	460b      	mov	r3, r1
 8009316:	2100      	movs	r1, #0
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f812 	bl	8009342 <USBH_GetDescriptor>
 800931e:	4603      	mov	r3, r0
 8009320:	75fb      	strb	r3, [r7, #23]
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d107      	bne.n	8009338 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800932e:	893a      	ldrh	r2, [r7, #8]
 8009330:	6879      	ldr	r1, [r7, #4]
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fa37 	bl	80097a6 <USBH_ParseStringDesc>
  }

  return status;
 8009338:	7dfb      	ldrb	r3, [r7, #23]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	607b      	str	r3, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	72fb      	strb	r3, [r7, #11]
 8009350:	4613      	mov	r3, r2
 8009352:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	789b      	ldrb	r3, [r3, #2]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d11c      	bne.n	8009396 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009362:	b2da      	uxtb	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2206      	movs	r2, #6
 800936c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	893a      	ldrh	r2, [r7, #8]
 8009372:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009374:	893b      	ldrh	r3, [r7, #8]
 8009376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800937a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800937e:	d104      	bne.n	800938a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f240 4209 	movw	r2, #1033	; 0x409
 8009386:	829a      	strh	r2, [r3, #20]
 8009388:	e002      	b.n	8009390 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8b3a      	ldrh	r2, [r7, #24]
 8009394:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009396:	8b3b      	ldrh	r3, [r7, #24]
 8009398:	461a      	mov	r2, r3
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 fa50 	bl	8009842 <USBH_CtlReq>
 80093a2:	4603      	mov	r3, r0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	460b      	mov	r3, r1
 80093b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	789b      	ldrb	r3, [r3, #2]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d10f      	bne.n	80093e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2205      	movs	r2, #5
 80093ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80093e0:	2200      	movs	r2, #0
 80093e2:	2100      	movs	r1, #0
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fa2c 	bl	8009842 <USBH_CtlReq>
 80093ea:	4603      	mov	r3, r0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	789b      	ldrb	r3, [r3, #2]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d10e      	bne.n	8009426 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2209      	movs	r2, #9
 8009412:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	887a      	ldrh	r2, [r7, #2]
 8009418:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009426:	2200      	movs	r2, #0
 8009428:	2100      	movs	r1, #0
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fa09 	bl	8009842 <USBH_CtlReq>
 8009430:	4603      	mov	r3, r0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	789b      	ldrb	r3, [r3, #2]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d10f      	bne.n	800946e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2203      	movs	r2, #3
 8009458:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	b29a      	uxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800946e:	2200      	movs	r2, #0
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9e5 	bl	8009842 <USBH_CtlReq>
 8009478:	4603      	mov	r3, r0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	789b      	ldrb	r3, [r3, #2]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d10f      	bne.n	80094b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2202      	movs	r2, #2
 800949a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80094b6:	2200      	movs	r2, #0
 80094b8:	2100      	movs	r1, #0
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f9c1 	bl	8009842 <USBH_CtlReq>
 80094c0:	4603      	mov	r3, r0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	4613      	mov	r3, r2
 80094d6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	785a      	ldrb	r2, [r3, #1]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3302      	adds	r3, #2
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	3303      	adds	r3, #3
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	4313      	orrs	r3, r2
 80094fe:	b29a      	uxth	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	791a      	ldrb	r2, [r3, #4]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	795a      	ldrb	r2, [r3, #5]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	799a      	ldrb	r2, [r3, #6]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	79da      	ldrb	r2, [r3, #7]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	2b08      	cmp	r3, #8
 8009528:	d939      	bls.n	800959e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	3308      	adds	r3, #8
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	b29a      	uxth	r2, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	3309      	adds	r3, #9
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	b29b      	uxth	r3, r3
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	b29b      	uxth	r3, r3
 800953e:	4313      	orrs	r3, r2
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	330a      	adds	r3, #10
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	b29a      	uxth	r2, r3
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	330b      	adds	r3, #11
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	b29b      	uxth	r3, r3
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	4313      	orrs	r3, r2
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	330c      	adds	r3, #12
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	b29a      	uxth	r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	330d      	adds	r3, #13
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	b29b      	uxth	r3, r3
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	b29b      	uxth	r3, r3
 8009576:	4313      	orrs	r3, r2
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	7b9a      	ldrb	r2, [r3, #14]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	7bda      	ldrb	r2, [r3, #15]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	7c1a      	ldrb	r2, [r3, #16]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	7c5a      	ldrb	r2, [r3, #17]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	745a      	strb	r2, [r3, #17]
  }
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b08a      	sub	sp, #40	; 0x28
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	4613      	mov	r3, r2
 80095b6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	781a      	ldrb	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	785a      	ldrb	r2, [r3, #1]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	3302      	adds	r3, #2
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	3303      	adds	r3, #3
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	4313      	orrs	r3, r2
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	791a      	ldrb	r2, [r3, #4]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	795a      	ldrb	r2, [r3, #5]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	799a      	ldrb	r2, [r3, #6]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	79da      	ldrb	r2, [r3, #7]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	7a1a      	ldrb	r2, [r3, #8]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009620:	88fb      	ldrh	r3, [r7, #6]
 8009622:	2b09      	cmp	r3, #9
 8009624:	d95f      	bls.n	80096e6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009626:	2309      	movs	r3, #9
 8009628:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800962e:	e051      	b.n	80096d4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009630:	f107 0316 	add.w	r3, r7, #22
 8009634:	4619      	mov	r1, r3
 8009636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009638:	f000 f8e8 	bl	800980c <USBH_GetNextDesc>
 800963c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	785b      	ldrb	r3, [r3, #1]
 8009642:	2b04      	cmp	r3, #4
 8009644:	d146      	bne.n	80096d4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800964a:	221a      	movs	r2, #26
 800964c:	fb02 f303 	mul.w	r3, r2, r3
 8009650:	3308      	adds	r3, #8
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	4413      	add	r3, r2
 8009656:	3302      	adds	r3, #2
 8009658:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800965a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800965c:	69f8      	ldr	r0, [r7, #28]
 800965e:	f000 f846 	bl	80096ee <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009662:	2300      	movs	r3, #0
 8009664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009668:	2300      	movs	r3, #0
 800966a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800966c:	e022      	b.n	80096b4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800966e:	f107 0316 	add.w	r3, r7, #22
 8009672:	4619      	mov	r1, r3
 8009674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009676:	f000 f8c9 	bl	800980c <USBH_GetNextDesc>
 800967a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b05      	cmp	r3, #5
 8009682:	d117      	bne.n	80096b4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009688:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800968c:	3201      	adds	r2, #1
 800968e:	00d2      	lsls	r2, r2, #3
 8009690:	211a      	movs	r1, #26
 8009692:	fb01 f303 	mul.w	r3, r1, r3
 8009696:	4413      	add	r3, r2
 8009698:	3308      	adds	r3, #8
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	3304      	adds	r3, #4
 80096a0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80096a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096a4:	69b8      	ldr	r0, [r7, #24]
 80096a6:	f000 f851 	bl	800974c <USBH_ParseEPDesc>
            ep_ix++;
 80096aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80096ae:	3301      	adds	r3, #1
 80096b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	791b      	ldrb	r3, [r3, #4]
 80096b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80096bc:	429a      	cmp	r2, r3
 80096be:	d204      	bcs.n	80096ca <USBH_ParseCfgDesc+0x120>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	885a      	ldrh	r2, [r3, #2]
 80096c4:	8afb      	ldrh	r3, [r7, #22]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d8d1      	bhi.n	800966e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80096ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096ce:	3301      	adds	r3, #1
 80096d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80096d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d804      	bhi.n	80096e6 <USBH_ParseCfgDesc+0x13c>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	885a      	ldrh	r2, [r3, #2]
 80096e0:	8afb      	ldrh	r3, [r7, #22]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d8a4      	bhi.n	8009630 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80096e6:	bf00      	nop
 80096e8:	3728      	adds	r7, #40	; 0x28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b083      	sub	sp, #12
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	785a      	ldrb	r2, [r3, #1]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	789a      	ldrb	r2, [r3, #2]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	78da      	ldrb	r2, [r3, #3]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	791a      	ldrb	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	795a      	ldrb	r2, [r3, #5]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	799a      	ldrb	r2, [r3, #6]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	79da      	ldrb	r2, [r3, #7]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	7a1a      	ldrb	r2, [r3, #8]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	721a      	strb	r2, [r3, #8]
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781a      	ldrb	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	785a      	ldrb	r2, [r3, #1]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	789a      	ldrb	r2, [r3, #2]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	78da      	ldrb	r2, [r3, #3]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	3304      	adds	r3, #4
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b29a      	uxth	r2, r3
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	3305      	adds	r3, #5
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	b29b      	uxth	r3, r3
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	b29b      	uxth	r3, r3
 800978a:	4313      	orrs	r3, r2
 800978c:	b29a      	uxth	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	799a      	ldrb	r2, [r3, #6]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	719a      	strb	r2, [r3, #6]
}
 800979a:	bf00      	nop
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b087      	sub	sp, #28
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	4613      	mov	r3, r2
 80097b2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	3301      	adds	r3, #1
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d120      	bne.n	8009800 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	1e9a      	subs	r2, r3, #2
 80097c4:	88fb      	ldrh	r3, [r7, #6]
 80097c6:	4293      	cmp	r3, r2
 80097c8:	bf28      	it	cs
 80097ca:	4613      	movcs	r3, r2
 80097cc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3302      	adds	r3, #2
 80097d2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80097d4:	2300      	movs	r3, #0
 80097d6:	82fb      	strh	r3, [r7, #22]
 80097d8:	e00b      	b.n	80097f2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80097da:	8afb      	ldrh	r3, [r7, #22]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	781a      	ldrb	r2, [r3, #0]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3301      	adds	r3, #1
 80097ea:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80097ec:	8afb      	ldrh	r3, [r7, #22]
 80097ee:	3302      	adds	r3, #2
 80097f0:	82fb      	strh	r3, [r7, #22]
 80097f2:	8afa      	ldrh	r2, [r7, #22]
 80097f4:	8abb      	ldrh	r3, [r7, #20]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d3ef      	bcc.n	80097da <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2200      	movs	r2, #0
 80097fe:	701a      	strb	r2, [r3, #0]
  }
}
 8009800:	bf00      	nop
 8009802:	371c      	adds	r7, #28
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	881a      	ldrh	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	4413      	add	r3, r2
 8009822:	b29a      	uxth	r2, r3
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009834:	68fb      	ldr	r3, [r7, #12]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b086      	sub	sp, #24
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	4613      	mov	r3, r2
 800984e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009850:	2301      	movs	r3, #1
 8009852:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	789b      	ldrb	r3, [r3, #2]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d002      	beq.n	8009862 <USBH_CtlReq+0x20>
 800985c:	2b02      	cmp	r3, #2
 800985e:	d00f      	beq.n	8009880 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009860:	e027      	b.n	80098b2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	88fa      	ldrh	r2, [r7, #6]
 800986c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2201      	movs	r2, #1
 8009872:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2202      	movs	r2, #2
 8009878:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800987a:	2301      	movs	r3, #1
 800987c:	75fb      	strb	r3, [r7, #23]
      break;
 800987e:	e018      	b.n	80098b2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009880:	68f8      	ldr	r0, [r7, #12]
 8009882:	f000 f81b 	bl	80098bc <USBH_HandleControl>
 8009886:	4603      	mov	r3, r0
 8009888:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <USBH_CtlReq+0x54>
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	2b03      	cmp	r3, #3
 8009894:	d106      	bne.n	80098a4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2201      	movs	r2, #1
 800989a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	761a      	strb	r2, [r3, #24]
      break;
 80098a2:	e005      	b.n	80098b0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d102      	bne.n	80098b0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2201      	movs	r2, #1
 80098ae:	709a      	strb	r2, [r3, #2]
      break;
 80098b0:	bf00      	nop
  }
  return status;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3718      	adds	r7, #24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80098c4:	2301      	movs	r3, #1
 80098c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	7e1b      	ldrb	r3, [r3, #24]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	2b0a      	cmp	r3, #10
 80098d4:	f200 8156 	bhi.w	8009b84 <USBH_HandleControl+0x2c8>
 80098d8:	a201      	add	r2, pc, #4	; (adr r2, 80098e0 <USBH_HandleControl+0x24>)
 80098da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098de:	bf00      	nop
 80098e0:	0800990d 	.word	0x0800990d
 80098e4:	08009927 	.word	0x08009927
 80098e8:	08009991 	.word	0x08009991
 80098ec:	080099b7 	.word	0x080099b7
 80098f0:	080099ef 	.word	0x080099ef
 80098f4:	08009a19 	.word	0x08009a19
 80098f8:	08009a6b 	.word	0x08009a6b
 80098fc:	08009a8d 	.word	0x08009a8d
 8009900:	08009ac9 	.word	0x08009ac9
 8009904:	08009aef 	.word	0x08009aef
 8009908:	08009b2d 	.word	0x08009b2d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f103 0110 	add.w	r1, r3, #16
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	795b      	ldrb	r3, [r3, #5]
 8009916:	461a      	mov	r2, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f943 	bl	8009ba4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2202      	movs	r2, #2
 8009922:	761a      	strb	r2, [r3, #24]
      break;
 8009924:	e139      	b.n	8009b9a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	795b      	ldrb	r3, [r3, #5]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fcc5 	bl	800a2bc <USBH_LL_GetURBState>
 8009932:	4603      	mov	r3, r0
 8009934:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009936:	7bbb      	ldrb	r3, [r7, #14]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d11e      	bne.n	800997a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	7c1b      	ldrb	r3, [r3, #16]
 8009940:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009944:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8adb      	ldrh	r3, [r3, #22]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00a      	beq.n	8009964 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800994e:	7b7b      	ldrb	r3, [r7, #13]
 8009950:	2b80      	cmp	r3, #128	; 0x80
 8009952:	d103      	bne.n	800995c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2203      	movs	r2, #3
 8009958:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800995a:	e115      	b.n	8009b88 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2205      	movs	r2, #5
 8009960:	761a      	strb	r2, [r3, #24]
      break;
 8009962:	e111      	b.n	8009b88 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009964:	7b7b      	ldrb	r3, [r7, #13]
 8009966:	2b80      	cmp	r3, #128	; 0x80
 8009968:	d103      	bne.n	8009972 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2209      	movs	r2, #9
 800996e:	761a      	strb	r2, [r3, #24]
      break;
 8009970:	e10a      	b.n	8009b88 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2207      	movs	r2, #7
 8009976:	761a      	strb	r2, [r3, #24]
      break;
 8009978:	e106      	b.n	8009b88 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	2b04      	cmp	r3, #4
 800997e:	d003      	beq.n	8009988 <USBH_HandleControl+0xcc>
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b02      	cmp	r3, #2
 8009984:	f040 8100 	bne.w	8009b88 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	220b      	movs	r2, #11
 800998c:	761a      	strb	r2, [r3, #24]
      break;
 800998e:	e0fb      	b.n	8009b88 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009996:	b29a      	uxth	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6899      	ldr	r1, [r3, #8]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	899a      	ldrh	r2, [r3, #12]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	791b      	ldrb	r3, [r3, #4]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f93a 	bl	8009c22 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2204      	movs	r2, #4
 80099b2:	761a      	strb	r2, [r3, #24]
      break;
 80099b4:	e0f1      	b.n	8009b9a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	791b      	ldrb	r3, [r3, #4]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fc7d 	bl	800a2bc <USBH_LL_GetURBState>
 80099c2:	4603      	mov	r3, r0
 80099c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d102      	bne.n	80099d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2209      	movs	r2, #9
 80099d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	2b05      	cmp	r3, #5
 80099d6:	d102      	bne.n	80099de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80099d8:	2303      	movs	r3, #3
 80099da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80099dc:	e0d6      	b.n	8009b8c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80099de:	7bbb      	ldrb	r3, [r7, #14]
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	f040 80d3 	bne.w	8009b8c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	220b      	movs	r2, #11
 80099ea:	761a      	strb	r2, [r3, #24]
      break;
 80099ec:	e0ce      	b.n	8009b8c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6899      	ldr	r1, [r3, #8]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	899a      	ldrh	r2, [r3, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	795b      	ldrb	r3, [r3, #5]
 80099fa:	2001      	movs	r0, #1
 80099fc:	9000      	str	r0, [sp, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f8ea 	bl	8009bd8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2206      	movs	r2, #6
 8009a14:	761a      	strb	r2, [r3, #24]
      break;
 8009a16:	e0c0      	b.n	8009b9a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	795b      	ldrb	r3, [r3, #5]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fc4c 	bl	800a2bc <USBH_LL_GetURBState>
 8009a24:	4603      	mov	r3, r0
 8009a26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d103      	bne.n	8009a36 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2207      	movs	r2, #7
 8009a32:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009a34:	e0ac      	b.n	8009b90 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b05      	cmp	r3, #5
 8009a3a:	d105      	bne.n	8009a48 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	220c      	movs	r2, #12
 8009a40:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a42:	2303      	movs	r3, #3
 8009a44:	73fb      	strb	r3, [r7, #15]
      break;
 8009a46:	e0a3      	b.n	8009b90 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d103      	bne.n	8009a56 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2205      	movs	r2, #5
 8009a52:	761a      	strb	r2, [r3, #24]
      break;
 8009a54:	e09c      	b.n	8009b90 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	f040 8099 	bne.w	8009b90 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	220b      	movs	r2, #11
 8009a62:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a64:	2302      	movs	r3, #2
 8009a66:	73fb      	strb	r3, [r7, #15]
      break;
 8009a68:	e092      	b.n	8009b90 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	791b      	ldrb	r3, [r3, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f8d5 	bl	8009c22 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2208      	movs	r2, #8
 8009a88:	761a      	strb	r2, [r3, #24]

      break;
 8009a8a:	e086      	b.n	8009b9a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	791b      	ldrb	r3, [r3, #4]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fc12 	bl	800a2bc <USBH_LL_GetURBState>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a9c:	7bbb      	ldrb	r3, [r7, #14]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d105      	bne.n	8009aae <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	220d      	movs	r2, #13
 8009aa6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009aac:	e072      	b.n	8009b94 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d103      	bne.n	8009abc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	220b      	movs	r2, #11
 8009ab8:	761a      	strb	r2, [r3, #24]
      break;
 8009aba:	e06b      	b.n	8009b94 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	d168      	bne.n	8009b94 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac6:	e065      	b.n	8009b94 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	795b      	ldrb	r3, [r3, #5]
 8009acc:	2201      	movs	r2, #1
 8009ace:	9200      	str	r2, [sp, #0]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f87f 	bl	8009bd8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	220a      	movs	r2, #10
 8009aea:	761a      	strb	r2, [r3, #24]
      break;
 8009aec:	e055      	b.n	8009b9a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	795b      	ldrb	r3, [r3, #5]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fbe1 	bl	800a2bc <USBH_LL_GetURBState>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d105      	bne.n	8009b10 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	220d      	movs	r2, #13
 8009b0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b0e:	e043      	b.n	8009b98 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d103      	bne.n	8009b1e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2209      	movs	r2, #9
 8009b1a:	761a      	strb	r2, [r3, #24]
      break;
 8009b1c:	e03c      	b.n	8009b98 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d139      	bne.n	8009b98 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	220b      	movs	r2, #11
 8009b28:	761a      	strb	r2, [r3, #24]
      break;
 8009b2a:	e035      	b.n	8009b98 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7e5b      	ldrb	r3, [r3, #25]
 8009b30:	3301      	adds	r3, #1
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	765a      	strb	r2, [r3, #25]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	7e5b      	ldrb	r3, [r3, #25]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d806      	bhi.n	8009b4e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b4c:	e025      	b.n	8009b9a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b54:	2106      	movs	r1, #6
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	795b      	ldrb	r3, [r3, #5]
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f90c 	bl	8009d84 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	791b      	ldrb	r3, [r3, #4]
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f906 	bl	8009d84 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	73fb      	strb	r3, [r7, #15]
      break;
 8009b82:	e00a      	b.n	8009b9a <USBH_HandleControl+0x2de>

    default:
      break;
 8009b84:	bf00      	nop
 8009b86:	e008      	b.n	8009b9a <USBH_HandleControl+0x2de>
      break;
 8009b88:	bf00      	nop
 8009b8a:	e006      	b.n	8009b9a <USBH_HandleControl+0x2de>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e004      	b.n	8009b9a <USBH_HandleControl+0x2de>
      break;
 8009b90:	bf00      	nop
 8009b92:	e002      	b.n	8009b9a <USBH_HandleControl+0x2de>
      break;
 8009b94:	bf00      	nop
 8009b96:	e000      	b.n	8009b9a <USBH_HandleControl+0x2de>
      break;
 8009b98:	bf00      	nop
  }

  return status;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b088      	sub	sp, #32
 8009ba8:	af04      	add	r7, sp, #16
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009bb2:	79f9      	ldrb	r1, [r7, #7]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	2308      	movs	r3, #8
 8009bba:	9302      	str	r3, [sp, #8]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 fb46 	bl	800a25a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af04      	add	r7, sp, #16
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	4611      	mov	r1, r2
 8009be4:	461a      	mov	r2, r3
 8009be6:	460b      	mov	r3, r1
 8009be8:	80fb      	strh	r3, [r7, #6]
 8009bea:	4613      	mov	r3, r2
 8009bec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009bfc:	7979      	ldrb	r1, [r7, #5]
 8009bfe:	7e3b      	ldrb	r3, [r7, #24]
 8009c00:	9303      	str	r3, [sp, #12]
 8009c02:	88fb      	ldrh	r3, [r7, #6]
 8009c04:	9302      	str	r3, [sp, #8]
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2200      	movs	r2, #0
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f000 fb21 	bl	800a25a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b088      	sub	sp, #32
 8009c26:	af04      	add	r7, sp, #16
 8009c28:	60f8      	str	r0, [r7, #12]
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	461a      	mov	r2, r3
 8009c30:	460b      	mov	r3, r1
 8009c32:	80fb      	strh	r3, [r7, #6]
 8009c34:	4613      	mov	r3, r2
 8009c36:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009c38:	7979      	ldrb	r1, [r7, #5]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9303      	str	r3, [sp, #12]
 8009c3e:	88fb      	ldrh	r3, [r7, #6]
 8009c40:	9302      	str	r3, [sp, #8]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	2301      	movs	r3, #1
 8009c48:	9300      	str	r3, [sp, #0]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 fb03 	bl	800a25a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009c54:	2300      	movs	r3, #0

}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b088      	sub	sp, #32
 8009c62:	af04      	add	r7, sp, #16
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	4611      	mov	r1, r2
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	80fb      	strh	r3, [r7, #6]
 8009c70:	4613      	mov	r3, r2
 8009c72:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009c82:	7979      	ldrb	r1, [r7, #5]
 8009c84:	7e3b      	ldrb	r3, [r7, #24]
 8009c86:	9303      	str	r3, [sp, #12]
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	9302      	str	r3, [sp, #8]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	9301      	str	r3, [sp, #4]
 8009c90:	2301      	movs	r3, #1
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	2302      	movs	r3, #2
 8009c96:	2200      	movs	r2, #0
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fade 	bl	800a25a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af04      	add	r7, sp, #16
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	80fb      	strh	r3, [r7, #6]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009cbe:	7979      	ldrb	r1, [r7, #5]
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9303      	str	r3, [sp, #12]
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	9302      	str	r3, [sp, #8]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	2301      	movs	r3, #1
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 fac0 	bl	800a25a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af04      	add	r7, sp, #16
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	4608      	mov	r0, r1
 8009cee:	4611      	mov	r1, r2
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	70fb      	strb	r3, [r7, #3]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	70bb      	strb	r3, [r7, #2]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cfe:	7878      	ldrb	r0, [r7, #1]
 8009d00:	78ba      	ldrb	r2, [r7, #2]
 8009d02:	78f9      	ldrb	r1, [r7, #3]
 8009d04:	8b3b      	ldrh	r3, [r7, #24]
 8009d06:	9302      	str	r3, [sp, #8]
 8009d08:	7d3b      	ldrb	r3, [r7, #20]
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	7c3b      	ldrb	r3, [r7, #16]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	4603      	mov	r3, r0
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa53 	bl	800a1be <USBH_LL_OpenPipe>

  return USBH_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b082      	sub	sp, #8
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009d2e:	78fb      	ldrb	r3, [r7, #3]
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa72 	bl	800a21c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f836 	bl	8009dc0 <USBH_GetFreePipe>
 8009d54:	4603      	mov	r3, r0
 8009d56:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d58:	89fb      	ldrh	r3, [r7, #14]
 8009d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00a      	beq.n	8009d78 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009d62:	78fa      	ldrb	r2, [r7, #3]
 8009d64:	89fb      	ldrh	r3, [r7, #14]
 8009d66:	f003 030f 	and.w	r3, r3, #15
 8009d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	33e0      	adds	r3, #224	; 0xe0
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d78:	89fb      	ldrh	r3, [r7, #14]
 8009d7a:	b2db      	uxtb	r3, r3
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	2b0a      	cmp	r3, #10
 8009d94:	d80d      	bhi.n	8009db2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d96:	78fb      	ldrb	r3, [r7, #3]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	33e0      	adds	r3, #224	; 0xe0
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	78fb      	ldrb	r3, [r7, #3]
 8009da4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	33e0      	adds	r3, #224	; 0xe0
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	440b      	add	r3, r1
 8009db0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
 8009dd0:	e00f      	b.n	8009df2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	33e0      	adds	r3, #224	; 0xe0
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	e007      	b.n	8009dfc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	3301      	adds	r3, #1
 8009df0:	73fb      	strb	r3, [r7, #15]
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b0a      	cmp	r3, #10
 8009df6:	d9ec      	bls.n	8009dd2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3714      	adds	r7, #20
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	490e      	ldr	r1, [pc, #56]	; (8009e48 <MX_USB_HOST_Init+0x40>)
 8009e10:	480e      	ldr	r0, [pc, #56]	; (8009e4c <MX_USB_HOST_Init+0x44>)
 8009e12:	f7fe fca1 	bl	8008758 <USBH_Init>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009e1c:	f7f6 fe92 	bl	8000b44 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009e20:	490b      	ldr	r1, [pc, #44]	; (8009e50 <MX_USB_HOST_Init+0x48>)
 8009e22:	480a      	ldr	r0, [pc, #40]	; (8009e4c <MX_USB_HOST_Init+0x44>)
 8009e24:	f7fe fd26 	bl	8008874 <USBH_RegisterClass>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d001      	beq.n	8009e32 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009e2e:	f7f6 fe89 	bl	8000b44 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009e32:	4806      	ldr	r0, [pc, #24]	; (8009e4c <MX_USB_HOST_Init+0x44>)
 8009e34:	f7fe fdaa 	bl	800898c <USBH_Start>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009e3e:	f7f6 fe81 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009e42:	bf00      	nop
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	08009e69 	.word	0x08009e69
 8009e4c:	2000090c 	.word	0x2000090c
 8009e50:	2000000c 	.word	0x2000000c

08009e54 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e58:	4802      	ldr	r0, [pc, #8]	; (8009e64 <MX_USB_HOST_Process+0x10>)
 8009e5a:	f7fe fda7 	bl	80089ac <USBH_Process>
}
 8009e5e:	bf00      	nop
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	2000090c 	.word	0x2000090c

08009e68 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	3b01      	subs	r3, #1
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d819      	bhi.n	8009eb0 <USBH_UserProcess+0x48>
 8009e7c:	a201      	add	r2, pc, #4	; (adr r2, 8009e84 <USBH_UserProcess+0x1c>)
 8009e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e82:	bf00      	nop
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	08009ea1 	.word	0x08009ea1
 8009e8c:	08009eb1 	.word	0x08009eb1
 8009e90:	08009ea9 	.word	0x08009ea9
 8009e94:	08009e99 	.word	0x08009e99
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009e98:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <USBH_UserProcess+0x58>)
 8009e9a:	2203      	movs	r2, #3
 8009e9c:	701a      	strb	r2, [r3, #0]
  break;
 8009e9e:	e008      	b.n	8009eb2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <USBH_UserProcess+0x58>)
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	701a      	strb	r2, [r3, #0]
  break;
 8009ea6:	e004      	b.n	8009eb2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <USBH_UserProcess+0x58>)
 8009eaa:	2201      	movs	r2, #1
 8009eac:	701a      	strb	r2, [r3, #0]
  break;
 8009eae:	e000      	b.n	8009eb2 <USBH_UserProcess+0x4a>

  default:
  break;
 8009eb0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009eb2:	bf00      	nop
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	200000b4 	.word	0x200000b4

08009ec4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	605a      	str	r2, [r3, #4]
 8009ed6:	609a      	str	r2, [r3, #8]
 8009ed8:	60da      	str	r2, [r3, #12]
 8009eda:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ee4:	d147      	bne.n	8009f76 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
 8009eea:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eee:	4a24      	ldr	r2, [pc, #144]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009ef0:	f043 0301 	orr.w	r3, r3, #1
 8009ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ef6:	4b22      	ldr	r3, [pc, #136]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f10:	f107 0314 	add.w	r3, r7, #20
 8009f14:	4619      	mov	r1, r3
 8009f16:	481b      	ldr	r0, [pc, #108]	; (8009f84 <HAL_HCD_MspInit+0xc0>)
 8009f18:	f7f7 ff8c 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f22:	2302      	movs	r3, #2
 8009f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f2e:	230a      	movs	r3, #10
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f32:	f107 0314 	add.w	r3, r7, #20
 8009f36:	4619      	mov	r1, r3
 8009f38:	4812      	ldr	r0, [pc, #72]	; (8009f84 <HAL_HCD_MspInit+0xc0>)
 8009f3a:	f7f7 ff7b 	bl	8001e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f3e:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f42:	4a0f      	ldr	r2, [pc, #60]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f48:	6353      	str	r3, [r2, #52]	; 0x34
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	4b0c      	ldr	r3, [pc, #48]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f52:	4a0b      	ldr	r2, [pc, #44]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f58:	6453      	str	r3, [r2, #68]	; 0x44
 8009f5a:	4b09      	ldr	r3, [pc, #36]	; (8009f80 <HAL_HCD_MspInit+0xbc>)
 8009f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f66:	2200      	movs	r2, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	2043      	movs	r0, #67	; 0x43
 8009f6c:	f7f7 fa04 	bl	8001378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f70:	2043      	movs	r0, #67	; 0x43
 8009f72:	f7f7 fa2d 	bl	80013d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f76:	bf00      	nop
 8009f78:	3728      	adds	r7, #40	; 0x28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	40023800 	.word	0x40023800
 8009f84:	40020000 	.word	0x40020000

08009f88 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7ff f8db 	bl	8009152 <USBH_LL_IncTimer>
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7ff f913 	bl	80091de <USBH_LL_Connect>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff f91c 	bl	800920c <USBH_LL_Disconnect>
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
 8009fe8:	4613      	mov	r3, r2
 8009fea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff f8cd 	bl	80091a6 <USBH_LL_PortEnabled>
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff f8cd 	bl	80091c2 <USBH_LL_PortDisabled>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d12a      	bne.n	800a098 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a042:	4a18      	ldr	r2, [pc, #96]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a04e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a052:	4b14      	ldr	r3, [pc, #80]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a054:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a058:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a05a:	4b12      	ldr	r3, [pc, #72]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a05c:	2208      	movs	r2, #8
 800a05e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a060:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a062:	2201      	movs	r2, #1
 800a064:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a066:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a068:	2200      	movs	r2, #0
 800a06a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a06c:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a06e:	2202      	movs	r2, #2
 800a070:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a072:	4b0c      	ldr	r3, [pc, #48]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a074:	2200      	movs	r2, #0
 800a076:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a078:	480a      	ldr	r0, [pc, #40]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a07a:	f7f8 f9a9 	bl	80023d0 <HAL_HCD_Init>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a084:	f7f6 fd5e 	bl	8000b44 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a088:	4806      	ldr	r0, [pc, #24]	; (800a0a4 <USBH_LL_Init+0x74>)
 800a08a:	f7f8 fd98 	bl	8002bbe <HAL_HCD_GetCurrentFrame>
 800a08e:	4603      	mov	r3, r0
 800a090:	4619      	mov	r1, r3
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff f84e 	bl	8009134 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000ce4 	.word	0x20000ce4

0800a0a8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f8 fd07 	bl	8002ad2 <HAL_HCD_Start>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 f95c 	bl	800a388 <USBH_Get_USB_Status>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b084      	sub	sp, #16
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7f8 fd0f 	bl	8002b18 <HAL_HCD_Stop>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	4618      	mov	r0, r3
 800a102:	f000 f941 	bl	800a388 <USBH_Get_USB_Status>
 800a106:	4603      	mov	r3, r0
 800a108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a11c:	2301      	movs	r3, #1
 800a11e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a126:	4618      	mov	r0, r3
 800a128:	f7f8 fd57 	bl	8002bda <HAL_HCD_GetCurrentSpeed>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d00c      	beq.n	800a14c <USBH_LL_GetSpeed+0x38>
 800a132:	2b02      	cmp	r3, #2
 800a134:	d80d      	bhi.n	800a152 <USBH_LL_GetSpeed+0x3e>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <USBH_LL_GetSpeed+0x2c>
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d003      	beq.n	800a146 <USBH_LL_GetSpeed+0x32>
 800a13e:	e008      	b.n	800a152 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]
    break;
 800a144:	e008      	b.n	800a158 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a146:	2301      	movs	r3, #1
 800a148:	73fb      	strb	r3, [r7, #15]
    break;
 800a14a:	e005      	b.n	800a158 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a14c:	2302      	movs	r3, #2
 800a14e:	73fb      	strb	r3, [r7, #15]
    break;
 800a150:	e002      	b.n	800a158 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a152:	2301      	movs	r3, #1
 800a154:	73fb      	strb	r3, [r7, #15]
    break;
 800a156:	bf00      	nop
  }
  return  speed;
 800a158:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a178:	4618      	mov	r0, r3
 800a17a:	f7f8 fcea 	bl	8002b52 <HAL_HCD_ResetPort>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 f8ff 	bl	800a388 <USBH_Get_USB_Status>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7f8 fcf1 	bl	8002b96 <HAL_HCD_HC_GetXferCount>
 800a1b4:	4603      	mov	r3, r0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1be:	b590      	push	{r4, r7, lr}
 800a1c0:	b089      	sub	sp, #36	; 0x24
 800a1c2:	af04      	add	r7, sp, #16
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	70fb      	strb	r3, [r7, #3]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	70bb      	strb	r3, [r7, #2]
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a1e6:	787c      	ldrb	r4, [r7, #1]
 800a1e8:	78ba      	ldrb	r2, [r7, #2]
 800a1ea:	78f9      	ldrb	r1, [r7, #3]
 800a1ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1ee:	9302      	str	r3, [sp, #8]
 800a1f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	f7f8 f955 	bl	80024ac <HAL_HCD_HC_Init>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f8bd 	bl	800a388 <USBH_Get_USB_Status>
 800a20e:	4603      	mov	r3, r0
 800a210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a212:	7bbb      	ldrb	r3, [r7, #14]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd90      	pop	{r4, r7, pc}

0800a21c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a236:	78fa      	ldrb	r2, [r7, #3]
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f8 f9c5 	bl	80025ca <HAL_HCD_HC_Halt>
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f89e 	bl	800a388 <USBH_Get_USB_Status>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a250:	7bbb      	ldrb	r3, [r7, #14]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a25a:	b590      	push	{r4, r7, lr}
 800a25c:	b089      	sub	sp, #36	; 0x24
 800a25e:	af04      	add	r7, sp, #16
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	4608      	mov	r0, r1
 800a264:	4611      	mov	r1, r2
 800a266:	461a      	mov	r2, r3
 800a268:	4603      	mov	r3, r0
 800a26a:	70fb      	strb	r3, [r7, #3]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70bb      	strb	r3, [r7, #2]
 800a270:	4613      	mov	r3, r2
 800a272:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a282:	787c      	ldrb	r4, [r7, #1]
 800a284:	78ba      	ldrb	r2, [r7, #2]
 800a286:	78f9      	ldrb	r1, [r7, #3]
 800a288:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a290:	9302      	str	r3, [sp, #8]
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	4623      	mov	r3, r4
 800a29e:	f7f8 f9b7 	bl	8002610 <HAL_HCD_HC_SubmitRequest>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 f86d 	bl	800a388 <USBH_Get_USB_Status>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd90      	pop	{r4, r7, pc}

0800a2bc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7f8 fc4b 	bl	8002b6e <HAL_HCD_HC_GetURBState>
 800a2d8:	4603      	mov	r3, r0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d103      	bne.n	800a300 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f870 	bl	800a3e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a300:	20c8      	movs	r0, #200	; 0xc8
 800a302:	f7f6 ff25 	bl	8001150 <HAL_Delay>
  return USBH_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	460b      	mov	r3, r1
 800a31a:	70fb      	strb	r3, [r7, #3]
 800a31c:	4613      	mov	r3, r2
 800a31e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a326:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	212c      	movs	r1, #44	; 0x2c
 800a32e:	fb01 f303 	mul.w	r3, r1, r3
 800a332:	4413      	add	r3, r2
 800a334:	333b      	adds	r3, #59	; 0x3b
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d009      	beq.n	800a350 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	212c      	movs	r1, #44	; 0x2c
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	4413      	add	r3, r2
 800a348:	3354      	adds	r3, #84	; 0x54
 800a34a:	78ba      	ldrb	r2, [r7, #2]
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	e008      	b.n	800a362 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	212c      	movs	r1, #44	; 0x2c
 800a356:	fb01 f303 	mul.w	r3, r1, r3
 800a35a:	4413      	add	r3, r2
 800a35c:	3355      	adds	r3, #85	; 0x55
 800a35e:	78ba      	ldrb	r2, [r7, #2]
 800a360:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3714      	adds	r7, #20
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7f6 fee9 	bl	8001150 <HAL_Delay>
}
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d817      	bhi.n	800a3cc <USBH_Get_USB_Status+0x44>
 800a39c:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <USBH_Get_USB_Status+0x1c>)
 800a39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a2:	bf00      	nop
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3bb 	.word	0x0800a3bb
 800a3ac:	0800a3c1 	.word	0x0800a3c1
 800a3b0:	0800a3c7 	.word	0x0800a3c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	e00b      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3be:	e008      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c4:	e005      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ca:	e002      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d0:	bf00      	nop
  }
  return usb_status;
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d102      	bne.n	800a3fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	e001      	b.n	800a3fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	461a      	mov	r2, r3
 800a402:	2101      	movs	r1, #1
 800a404:	4803      	ldr	r0, [pc, #12]	; (800a414 <MX_DriverVbusFS+0x34>)
 800a406:	f7f7 ffb1 	bl	800236c <HAL_GPIO_WritePin>
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	40020800 	.word	0x40020800

0800a418 <__errno>:
 800a418:	4b01      	ldr	r3, [pc, #4]	; (800a420 <__errno+0x8>)
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	2000002c 	.word	0x2000002c

0800a424 <__libc_init_array>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4d0d      	ldr	r5, [pc, #52]	; (800a45c <__libc_init_array+0x38>)
 800a428:	4c0d      	ldr	r4, [pc, #52]	; (800a460 <__libc_init_array+0x3c>)
 800a42a:	1b64      	subs	r4, r4, r5
 800a42c:	10a4      	asrs	r4, r4, #2
 800a42e:	2600      	movs	r6, #0
 800a430:	42a6      	cmp	r6, r4
 800a432:	d109      	bne.n	800a448 <__libc_init_array+0x24>
 800a434:	4d0b      	ldr	r5, [pc, #44]	; (800a464 <__libc_init_array+0x40>)
 800a436:	4c0c      	ldr	r4, [pc, #48]	; (800a468 <__libc_init_array+0x44>)
 800a438:	f000 f8f8 	bl	800a62c <_init>
 800a43c:	1b64      	subs	r4, r4, r5
 800a43e:	10a4      	asrs	r4, r4, #2
 800a440:	2600      	movs	r6, #0
 800a442:	42a6      	cmp	r6, r4
 800a444:	d105      	bne.n	800a452 <__libc_init_array+0x2e>
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44c:	4798      	blx	r3
 800a44e:	3601      	adds	r6, #1
 800a450:	e7ee      	b.n	800a430 <__libc_init_array+0xc>
 800a452:	f855 3b04 	ldr.w	r3, [r5], #4
 800a456:	4798      	blx	r3
 800a458:	3601      	adds	r6, #1
 800a45a:	e7f2      	b.n	800a442 <__libc_init_array+0x1e>
 800a45c:	0800a874 	.word	0x0800a874
 800a460:	0800a874 	.word	0x0800a874
 800a464:	0800a874 	.word	0x0800a874
 800a468:	0800a878 	.word	0x0800a878

0800a46c <malloc>:
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <malloc+0xc>)
 800a46e:	4601      	mov	r1, r0
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	f000 b863 	b.w	800a53c <_malloc_r>
 800a476:	bf00      	nop
 800a478:	2000002c 	.word	0x2000002c

0800a47c <free>:
 800a47c:	4b02      	ldr	r3, [pc, #8]	; (800a488 <free+0xc>)
 800a47e:	4601      	mov	r1, r0
 800a480:	6818      	ldr	r0, [r3, #0]
 800a482:	f000 b80b 	b.w	800a49c <_free_r>
 800a486:	bf00      	nop
 800a488:	2000002c 	.word	0x2000002c

0800a48c <memset>:
 800a48c:	4402      	add	r2, r0
 800a48e:	4603      	mov	r3, r0
 800a490:	4293      	cmp	r3, r2
 800a492:	d100      	bne.n	800a496 <memset+0xa>
 800a494:	4770      	bx	lr
 800a496:	f803 1b01 	strb.w	r1, [r3], #1
 800a49a:	e7f9      	b.n	800a490 <memset+0x4>

0800a49c <_free_r>:
 800a49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	d048      	beq.n	800a534 <_free_r+0x98>
 800a4a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a6:	9001      	str	r0, [sp, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f1a1 0404 	sub.w	r4, r1, #4
 800a4ae:	bfb8      	it	lt
 800a4b0:	18e4      	addlt	r4, r4, r3
 800a4b2:	f000 f8ad 	bl	800a610 <__malloc_lock>
 800a4b6:	4a20      	ldr	r2, [pc, #128]	; (800a538 <_free_r+0x9c>)
 800a4b8:	9801      	ldr	r0, [sp, #4]
 800a4ba:	6813      	ldr	r3, [r2, #0]
 800a4bc:	4615      	mov	r5, r2
 800a4be:	b933      	cbnz	r3, 800a4ce <_free_r+0x32>
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	6014      	str	r4, [r2, #0]
 800a4c4:	b003      	add	sp, #12
 800a4c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ca:	f000 b8a7 	b.w	800a61c <__malloc_unlock>
 800a4ce:	42a3      	cmp	r3, r4
 800a4d0:	d90b      	bls.n	800a4ea <_free_r+0x4e>
 800a4d2:	6821      	ldr	r1, [r4, #0]
 800a4d4:	1862      	adds	r2, r4, r1
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	bf04      	itt	eq
 800a4da:	681a      	ldreq	r2, [r3, #0]
 800a4dc:	685b      	ldreq	r3, [r3, #4]
 800a4de:	6063      	str	r3, [r4, #4]
 800a4e0:	bf04      	itt	eq
 800a4e2:	1852      	addeq	r2, r2, r1
 800a4e4:	6022      	streq	r2, [r4, #0]
 800a4e6:	602c      	str	r4, [r5, #0]
 800a4e8:	e7ec      	b.n	800a4c4 <_free_r+0x28>
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b10b      	cbz	r3, 800a4f4 <_free_r+0x58>
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d9fa      	bls.n	800a4ea <_free_r+0x4e>
 800a4f4:	6811      	ldr	r1, [r2, #0]
 800a4f6:	1855      	adds	r5, r2, r1
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d10b      	bne.n	800a514 <_free_r+0x78>
 800a4fc:	6824      	ldr	r4, [r4, #0]
 800a4fe:	4421      	add	r1, r4
 800a500:	1854      	adds	r4, r2, r1
 800a502:	42a3      	cmp	r3, r4
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	d1dd      	bne.n	800a4c4 <_free_r+0x28>
 800a508:	681c      	ldr	r4, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	6053      	str	r3, [r2, #4]
 800a50e:	4421      	add	r1, r4
 800a510:	6011      	str	r1, [r2, #0]
 800a512:	e7d7      	b.n	800a4c4 <_free_r+0x28>
 800a514:	d902      	bls.n	800a51c <_free_r+0x80>
 800a516:	230c      	movs	r3, #12
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	e7d3      	b.n	800a4c4 <_free_r+0x28>
 800a51c:	6825      	ldr	r5, [r4, #0]
 800a51e:	1961      	adds	r1, r4, r5
 800a520:	428b      	cmp	r3, r1
 800a522:	bf04      	itt	eq
 800a524:	6819      	ldreq	r1, [r3, #0]
 800a526:	685b      	ldreq	r3, [r3, #4]
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	bf04      	itt	eq
 800a52c:	1949      	addeq	r1, r1, r5
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	6054      	str	r4, [r2, #4]
 800a532:	e7c7      	b.n	800a4c4 <_free_r+0x28>
 800a534:	b003      	add	sp, #12
 800a536:	bd30      	pop	{r4, r5, pc}
 800a538:	200000b8 	.word	0x200000b8

0800a53c <_malloc_r>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	1ccd      	adds	r5, r1, #3
 800a540:	f025 0503 	bic.w	r5, r5, #3
 800a544:	3508      	adds	r5, #8
 800a546:	2d0c      	cmp	r5, #12
 800a548:	bf38      	it	cc
 800a54a:	250c      	movcc	r5, #12
 800a54c:	2d00      	cmp	r5, #0
 800a54e:	4606      	mov	r6, r0
 800a550:	db01      	blt.n	800a556 <_malloc_r+0x1a>
 800a552:	42a9      	cmp	r1, r5
 800a554:	d903      	bls.n	800a55e <_malloc_r+0x22>
 800a556:	230c      	movs	r3, #12
 800a558:	6033      	str	r3, [r6, #0]
 800a55a:	2000      	movs	r0, #0
 800a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a55e:	f000 f857 	bl	800a610 <__malloc_lock>
 800a562:	4921      	ldr	r1, [pc, #132]	; (800a5e8 <_malloc_r+0xac>)
 800a564:	680a      	ldr	r2, [r1, #0]
 800a566:	4614      	mov	r4, r2
 800a568:	b99c      	cbnz	r4, 800a592 <_malloc_r+0x56>
 800a56a:	4f20      	ldr	r7, [pc, #128]	; (800a5ec <_malloc_r+0xb0>)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	b923      	cbnz	r3, 800a57a <_malloc_r+0x3e>
 800a570:	4621      	mov	r1, r4
 800a572:	4630      	mov	r0, r6
 800a574:	f000 f83c 	bl	800a5f0 <_sbrk_r>
 800a578:	6038      	str	r0, [r7, #0]
 800a57a:	4629      	mov	r1, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	f000 f837 	bl	800a5f0 <_sbrk_r>
 800a582:	1c43      	adds	r3, r0, #1
 800a584:	d123      	bne.n	800a5ce <_malloc_r+0x92>
 800a586:	230c      	movs	r3, #12
 800a588:	6033      	str	r3, [r6, #0]
 800a58a:	4630      	mov	r0, r6
 800a58c:	f000 f846 	bl	800a61c <__malloc_unlock>
 800a590:	e7e3      	b.n	800a55a <_malloc_r+0x1e>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	1b5b      	subs	r3, r3, r5
 800a596:	d417      	bmi.n	800a5c8 <_malloc_r+0x8c>
 800a598:	2b0b      	cmp	r3, #11
 800a59a:	d903      	bls.n	800a5a4 <_malloc_r+0x68>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	441c      	add	r4, r3
 800a5a0:	6025      	str	r5, [r4, #0]
 800a5a2:	e004      	b.n	800a5ae <_malloc_r+0x72>
 800a5a4:	6863      	ldr	r3, [r4, #4]
 800a5a6:	42a2      	cmp	r2, r4
 800a5a8:	bf0c      	ite	eq
 800a5aa:	600b      	streq	r3, [r1, #0]
 800a5ac:	6053      	strne	r3, [r2, #4]
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f000 f834 	bl	800a61c <__malloc_unlock>
 800a5b4:	f104 000b 	add.w	r0, r4, #11
 800a5b8:	1d23      	adds	r3, r4, #4
 800a5ba:	f020 0007 	bic.w	r0, r0, #7
 800a5be:	1ac2      	subs	r2, r0, r3
 800a5c0:	d0cc      	beq.n	800a55c <_malloc_r+0x20>
 800a5c2:	1a1b      	subs	r3, r3, r0
 800a5c4:	50a3      	str	r3, [r4, r2]
 800a5c6:	e7c9      	b.n	800a55c <_malloc_r+0x20>
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	6864      	ldr	r4, [r4, #4]
 800a5cc:	e7cc      	b.n	800a568 <_malloc_r+0x2c>
 800a5ce:	1cc4      	adds	r4, r0, #3
 800a5d0:	f024 0403 	bic.w	r4, r4, #3
 800a5d4:	42a0      	cmp	r0, r4
 800a5d6:	d0e3      	beq.n	800a5a0 <_malloc_r+0x64>
 800a5d8:	1a21      	subs	r1, r4, r0
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f000 f808 	bl	800a5f0 <_sbrk_r>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d1dd      	bne.n	800a5a0 <_malloc_r+0x64>
 800a5e4:	e7cf      	b.n	800a586 <_malloc_r+0x4a>
 800a5e6:	bf00      	nop
 800a5e8:	200000b8 	.word	0x200000b8
 800a5ec:	200000bc 	.word	0x200000bc

0800a5f0 <_sbrk_r>:
 800a5f0:	b538      	push	{r3, r4, r5, lr}
 800a5f2:	4d06      	ldr	r5, [pc, #24]	; (800a60c <_sbrk_r+0x1c>)
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	4608      	mov	r0, r1
 800a5fa:	602b      	str	r3, [r5, #0]
 800a5fc:	f7f6 fb96 	bl	8000d2c <_sbrk>
 800a600:	1c43      	adds	r3, r0, #1
 800a602:	d102      	bne.n	800a60a <_sbrk_r+0x1a>
 800a604:	682b      	ldr	r3, [r5, #0]
 800a606:	b103      	cbz	r3, 800a60a <_sbrk_r+0x1a>
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	bd38      	pop	{r3, r4, r5, pc}
 800a60c:	20000fe8 	.word	0x20000fe8

0800a610 <__malloc_lock>:
 800a610:	4801      	ldr	r0, [pc, #4]	; (800a618 <__malloc_lock+0x8>)
 800a612:	f000 b809 	b.w	800a628 <__retarget_lock_acquire_recursive>
 800a616:	bf00      	nop
 800a618:	20000ff0 	.word	0x20000ff0

0800a61c <__malloc_unlock>:
 800a61c:	4801      	ldr	r0, [pc, #4]	; (800a624 <__malloc_unlock+0x8>)
 800a61e:	f000 b804 	b.w	800a62a <__retarget_lock_release_recursive>
 800a622:	bf00      	nop
 800a624:	20000ff0 	.word	0x20000ff0

0800a628 <__retarget_lock_acquire_recursive>:
 800a628:	4770      	bx	lr

0800a62a <__retarget_lock_release_recursive>:
 800a62a:	4770      	bx	lr

0800a62c <_init>:
 800a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62e:	bf00      	nop
 800a630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a632:	bc08      	pop	{r3}
 800a634:	469e      	mov	lr, r3
 800a636:	4770      	bx	lr

0800a638 <_fini>:
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63a:	bf00      	nop
 800a63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a63e:	bc08      	pop	{r3}
 800a640:	469e      	mov	lr, r3
 800a642:	4770      	bx	lr
